From luke at dashjr.org  Fri Dec  2 21:02:35 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 2 Dec 2011 16:02:35 -0500
Subject: [Bitcoin-development] Overview of pullreqs for 0.6
Message-ID: <201112021602.36649.luke@dashjr.org>

ACK'd for 0.6:
585   Added Caps Lock detection to askpassphrasedialog.
569   Coinbaser
669   Multisignature and OP_EVAL support
629   QR Code generation via libqrencode
582   Bitcoin-Qt signmessage GUI

*** All of the above are available merged in my personal 'next' branch:
***     https://github.com/luke-jr/bitcoin/tree/next

Possibly good for 0.6:
454   Add -keepnode which attempts to -addnode and keep a connection open
570   Specify fees explicitly via JSON-RPC
673   Store fewer time samples
649   Compressed pubkeys
593   Full URL Support in bitcoin-qt

*** All of the above are available merged in my personal 'next-test' branch:
***     https://github.com/luke-jr/bitcoin/tree/next-test

Needs more review/support:
427   IPv6 support (lots of complicated conflicts merging)
568   Multithreaded JSON-RPC with HTTP 1.1 Keep-Alive support
565   FastGetWork optimization
555   SIGUSR1 new block notifications
415   advanced anonymity features: send from address(es), view address
      linkages, view all addresses
358   Address Book related Fixes



From witchspace81 at gmail.com  Sun Dec  4 10:24:08 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 4 Dec 2011 11:24:08 +0100
Subject: [Bitcoin-development] Closing issues on github
Message-ID: <CAJNQ0ssW4od3tA5vdASEs4KxZ7-UsxEjWT7NSc0dcWEzrkcH9w@mail.gmail.com>

Hi,

This weekend I closed some old github issues that are no longer
reproducible in more recent versions, or needed input from the submitter
but were stalling for months.

I've also closed some issues that deal purely with Wx UI issues like this
one:

https://github.com/bitcoin/bitcoin/issues/425

I think my statement is valid, that we no longer support the old UI? Or
maybe some people want to take up maintenance of the old UI? I don't think
that has very high priority, and should probably not be in the main project.

Some of the older issues are absolutely still relevant, but 150+ open
issues is not something to be proud of, and I wonder how other open source
projects deal with this without too much stepping on people's toes :-)

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111204/c9a87b35/attachment.html>

From luke at dashjr.org  Sun Dec  4 14:22:11 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 4 Dec 2011 09:22:11 -0500
Subject: [Bitcoin-development] Closing issues on github
In-Reply-To: <CAJNQ0ssW4od3tA5vdASEs4KxZ7-UsxEjWT7NSc0dcWEzrkcH9w@mail.gmail.com>
References: <CAJNQ0ssW4od3tA5vdASEs4KxZ7-UsxEjWT7NSc0dcWEzrkcH9w@mail.gmail.com>
Message-ID: <201112040922.13744.luke@dashjr.org>

On Sunday, December 04, 2011 5:24:08 AM John Smith wrote:
> I've also closed some issues that deal purely with Wx UI issues like this
> one:
> 
> https://github.com/bitcoin/bitcoin/issues/425
> 
> I think my statement is valid, that we no longer support the old UI? Or
> maybe some people want to take up maintenance of the old UI? 

I think it would be ideal if someone wanted to take up wxBitcoin. Maybe after 
backporting to wx 2.8...

That being said, I have no interest, as I hate wx, and prefer Qt in general ;)

> I don't think that has very high priority, and should probably not be in the
> main project.

Please be careful to avoid the centralization mindset. There is no "main 
project"; there is bitcoind, wxBitcoin, Bitcoin-Qt, MultiBit, and many other 
non-functional clients, which should be given equal footing (before 
considering their differences). There shouldn't be given any special treatment 
to bitcoind and Bitcoin-Qt just because "Gavin et al" happen to maintain it.

> Some of the older issues are absolutely still relevant, but 150+ open
> issues is not something to be proud of, and I wonder how other open source
> projects deal with this without too much stepping on people's toes :-)

KDE literally just closed a bug of mine that I reported in 2002, because the 
component with the bug hasn't been part of KDE since 2008.



From laanwj at gmail.com  Sun Dec  4 15:31:01 2011
From: laanwj at gmail.com (Wladimir)
Date: Sun, 4 Dec 2011 16:31:01 +0100
Subject: [Bitcoin-development] Closing issues on github
In-Reply-To: <201112040922.13744.luke@dashjr.org>
References: <CAJNQ0ssW4od3tA5vdASEs4KxZ7-UsxEjWT7NSc0dcWEzrkcH9w@mail.gmail.com>
	<201112040922.13744.luke@dashjr.org>
Message-ID: <CA+s+GJB197G+NaRgxG0VbUdbLS=SdoYjdmtaApQiALvn=+n73g@mail.gmail.com>

>
>
> I think it would be ideal if someone wanted to take up wxBitcoin. Maybe
> after
> backporting to wx 2.8...
>

Indeed, someone could do this if they're interested in it, in their own
fork. That's what I said too. But it's no longer our issue.


> > I don't think that has very high priority, and should probably not be in
> the
> > main project.
>
> Please be careful to avoid the centralization mindset. There is no "main
> project"; there is bitcoind, wxBitcoin, Bitcoin-Qt, MultiBit,


With the "main project" here I mean the issue list of bitcoin/bitcoin
project on github, which only deals with that project (and not that of the
forks, which have their own issue lists). You can argue the "main"-ness but
it's just a mailing list message and not some official document deciding
about the future of bitcoin, so I did not feel like specifying it to that
level of detail.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111204/2b2b293f/attachment.html>

From luke at dashjr.org  Tue Dec  6 21:10:39 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 6 Dec 2011 16:10:39 -0500
Subject: [Bitcoin-development] Version bytes "2.0"
Message-ID: <201112061610.41083.luke@dashjr.org>

sipa made a nice specification for version numbers a while back, that seemed 
great at the time. However, there are concerns that it has overlooked a very 
important factor: usability in base58 encoding. The version currently chosen 
for script-based addresses (2) makes this excessively complicated for end 
users-- these addresses, once encoded, may begin with ANY of the following 
characters: 2opqrstuvwxyz

Taking this into account, as well as sipa's original goals, I have come up 
with the following proposal:
* Bits 128/64 define network class
** 0 = main network
** 64,128 = reserved
** 192 = test network
* Bits 32/16 define network
** 0 = Bitcoin
** 16,32 = reserved
** 48 = OTHER (next octet)
* Bits 8/4/2 define data class
** 0 = Public key hash
** 2 = Public key (raw)
** 4 = Script hash
** 6 = reserved
** 8 = Private key (raw)
** 10 = Signature
** 12 = reserved
** 14 = OTHER (next octet)
* Bit 1 is freely chosen (for aesthetic assignment)

Unlike sipa's proposal, however, I have (intentionally) neglected to consider 
the versions currently in use other than the widespread Bitcoin addresses. 
That means this reassigns the versions used by Namecoin and testnets, and 
probably messes with the (unmerged) key export format and signature formats.

It "wastes" 2 bits (64 and 1) to accomplish aesthetic norms. Bit 64 *could* be 
assigned in the future if we ever have a "crunch". By using the high bit (128) 
to designate test networks, all testnet addresses will now begin with '2'. 
Bitcoin script-hash (aka OP_EVAL) addresses are assigned version 5 (using the 
aesthetic +1), which means they always begin with '3'. Signatures are on 
version 10 and/or 11, beginning with '5'.

We get two first-class "networks" besides Bitcoin, addresses starting with '7' 
and 'E' (pubkey), and '9' and 'F' (script). I propose these should be assigned 
sparingly, only when a network has significant adoption-- the only one I would 
even *consider* might fit the requirement today is Namecoin. I would also 
suggest making merged mining support a requirement except for networks that 
have a proven-better proof-of-work (ie, NOT scrypt). Other networks can use 
the "other" value (thus beginning with 'L' and 'N') and a second octet (which 
can be divided up later).

Thoughts?

Luke



From luke at dashjr.org  Tue Dec  6 21:28:16 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 6 Dec 2011 16:28:16 -0500
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <201112061610.41083.luke@dashjr.org>
References: <201112061610.41083.luke@dashjr.org>
Message-ID: <201112061628.18634.luke@dashjr.org>

Some bugs I found in my spec so far:
- Bitcoin public keys begin with '2' (same as testnet data)
- For the first first-class "aux" network, signatures and private keys will
  start with the same character.
- More "collisions" are possible if the "reserved" values were ever assigned.

To address these slightly better, here's a revised proposal:
* Bits 128/64 define network class
** 0 = main network
** 64,128 = reserved
** 192 = test network
* Bits 32/16 define network
** 0 = Bitcoin
** 16,32 = reserved
** 48 = OTHER (next octet)
* Bits 8/4/2 define data class
** 0 = Public key hash
** 2 = reserved
** 4 = Script hash
** 6 = Public key (raw)
** 8 = Signature
** 10 = reserved
** 12 = Private key (raw)
** 14 = OTHER (next octet)
* Bit 1 is freely chosen (for aesthetic assignment)

Note that under this scheme, both script hashes and raw public keys begin with 
'3'; I consider this a non-issue since neither are supported by current-
generation clients, and both pubkey-hash and script-hash are quite capable of 
the same functionality as a raw public key. Also, the raw public key will 
presumably be noticably longer.

For reference, a table of version number to first-base58-char mappings:
+........   0 => 1
-.......1   1 => QRSTUVWXYZabcdefghijkmno
-......1.   2 => 2opqrstuvwxyz
+......11   3 => 2
-.....1..   4 => 23
+.....1.1   5 => 3
+.....11.   6 => 3
-.....111   7 => 34
+....1...   8 => 4
-....1..1   9 => 45
+....1.1.  10 => 5
+....1.11  11 => 5
-....11..  12 => 56
+....11.1  13 => 6
-....111.  14 => 67
+....1111  15 => 7
+...1....  16 => 7
-...1...1  17 => 78
+...1..1.  18 => 8
-...1..11  19 => 89
+...1.1..  20 => 9
+...1.1.1  21 => 9
-...1.11.  22 => 9A
+...1.111  23 => A
-...11...  24 => AB
+...11..1  25 => B
+...11.1.  26 => B
-...11.11  27 => BC
+...111..  28 => C
-...111.1  29 => CD
+...1111.  30 => D
+...11111  31 => D
-..1.....  32 => DE
+..1....1  33 => E
-..1...1.  34 => EF
+..1...11  35 => F
+..1..1..  36 => F
-..1..1.1  37 => FG
+..1..11.  38 => G
-..1..111  39 => GH
+..1.1...  40 => H
+..1.1..1  41 => H
-..1.1.1.  42 => HJ
+..1.1.11  43 => J
-..1.11..  44 => JK
+..1.11.1  45 => K
+..1.111.  46 => K
-..1.1111  47 => KL
+..11....  48 => L
-..11...1  49 => LM
+..11..1.  50 => M
+..11..11  51 => M
-..11.1..  52 => MN
+..11.1.1  53 => N
-..11.11.  54 => NP
+..11.111  55 => P
+..111...  56 => P
-..111..1  57 => PQ
+..111.1.  58 => Q
-..111.11  59 => QR
+..1111..  60 => R
+..1111.1  61 => R
-..11111.  62 => RS
+..111111  63 => S
-.1......  64 => ST
+.1.....1  65 => T
+.1....1.  66 => T
-.1....11  67 => TU
+.1...1..  68 => U
-.1...1.1  69 => UV
+.1...11.  70 => V
+.1...111  71 => V
-.1..1...  72 => VW
+.1..1..1  73 => W
-.1..1.1.  74 => WX
+.1..1.11  75 => X
+.1..11..  76 => X
-.1..11.1  77 => XY
+.1..111.  78 => Y
-.1..1111  79 => YZ
+.1.1....  80 => Z
+.1.1...1  81 => Z
-.1.1..1.  82 => Za
+.1.1..11  83 => a
-.1.1.1..  84 => ab
+.1.1.1.1  85 => b
-.1.1.11.  86 => bc
+.1.1.111  87 => c
+.1.11...  88 => c
-.1.11..1  89 => cd
+.1.11.1.  90 => d
-.1.11.11  91 => de
+.1.111..  92 => e
+.1.111.1  93 => e
-.1.1111.  94 => ef
+.1.11111  95 => f
-.11.....  96 => fg
+.11....1  97 => g
+.11...1.  98 => g
-.11...11  99 => gh
+.11..1.. 100 => h
-.11..1.1 101 => hi
+.11..11. 102 => i
+.11..111 103 => i
-.11.1... 104 => ij
+.11.1..1 105 => j
-.11.1.1. 106 => jk
+.11.1.11 107 => k
+.11.11.. 108 => k
-.11.11.1 109 => km
+.11.111. 110 => m
-.11.1111 111 => mn
+.111.... 112 => n
+.111...1 113 => n
-.111..1. 114 => no
+.111..11 115 => o
-.111.1.. 116 => op
+.111.1.1 117 => p
+.111.11. 118 => p
-.111.111 119 => pq
+.1111... 120 => q
-.1111..1 121 => qr
+.1111.1. 122 => r
+.1111.11 123 => r
-.11111.. 124 => rs
+.11111.1 125 => s
-.111111. 126 => st
+.1111111 127 => t
+1....... 128 => t
-1......1 129 => tu
+1.....1. 130 => u
-1.....11 131 => uv
+1....1.. 132 => v
+1....1.1 133 => v
-1....11. 134 => vw
+1....111 135 => w
-1...1... 136 => wx
+1...1..1 137 => x
+1...1.1. 138 => x
-1...1.11 139 => xy
+1...11.. 140 => y
-1...11.1 141 => yz
+1...111. 142 => z
+1...1111 143 => z
-1..1.... 144 => 2z
+1..1...1 145 => 2
+1..1..1. 146 => 2
+1..1..11 147 => 2
+1..1.1.. 148 => 2
+1..1.1.1 149 => 2
+1..1.11. 150 => 2
+1..1.111 151 => 2
+1..11... 152 => 2
+1..11..1 153 => 2
+1..11.1. 154 => 2
+1..11.11 155 => 2
+1..111.. 156 => 2
+1..111.1 157 => 2
+1..1111. 158 => 2
+1..11111 159 => 2
+1.1..... 160 => 2
+1.1....1 161 => 2
+1.1...1. 162 => 2
+1.1...11 163 => 2
+1.1..1.. 164 => 2
+1.1..1.1 165 => 2
+1.1..11. 166 => 2
+1.1..111 167 => 2
+1.1.1... 168 => 2
+1.1.1..1 169 => 2
+1.1.1.1. 170 => 2
+1.1.1.11 171 => 2
+1.1.11.. 172 => 2
+1.1.11.1 173 => 2
+1.1.111. 174 => 2
+1.1.1111 175 => 2
+1.11.... 176 => 2
+1.11...1 177 => 2
+1.11..1. 178 => 2
+1.11..11 179 => 2
+1.11.1.. 180 => 2
+1.11.1.1 181 => 2
+1.11.11. 182 => 2
+1.11.111 183 => 2
+1.111... 184 => 2
+1.111..1 185 => 2
+1.111.1. 186 => 2
+1.111.11 187 => 2
+1.1111.. 188 => 2
+1.1111.1 189 => 2
+1.11111. 190 => 2
+1.111111 191 => 2
+11...... 192 => 2
+11.....1 193 => 2
+11....1. 194 => 2
+11....11 195 => 2
+11...1.. 196 => 2
+11...1.1 197 => 2
+11...11. 198 => 2
+11...111 199 => 2
+11..1... 200 => 2
+11..1..1 201 => 2
+11..1.1. 202 => 2
+11..1.11 203 => 2
+11..11.. 204 => 2
+11..11.1 205 => 2
+11..111. 206 => 2
+11..1111 207 => 2
+11.1.... 208 => 2
+11.1...1 209 => 2
+11.1..1. 210 => 2
+11.1..11 211 => 2
+11.1.1.. 212 => 2
+11.1.1.1 213 => 2
+11.1.11. 214 => 2
+11.1.111 215 => 2
+11.11... 216 => 2
+11.11..1 217 => 2
+11.11.1. 218 => 2
+11.11.11 219 => 2
+11.111.. 220 => 2
+11.111.1 221 => 2
+11.1111. 222 => 2
+11.11111 223 => 2
+111..... 224 => 2
+111....1 225 => 2
+111...1. 226 => 2
+111...11 227 => 2
+111..1.. 228 => 2
+111..1.1 229 => 2
+111..11. 230 => 2
+111..111 231 => 2
+111.1... 232 => 2
+111.1..1 233 => 2
+111.1.1. 234 => 2
+111.1.11 235 => 2
+111.11.. 236 => 2
+111.11.1 237 => 2
+111.111. 238 => 2
+111.1111 239 => 2
+1111.... 240 => 2
+1111...1 241 => 2
+1111..1. 242 => 2
+1111..11 243 => 2
+1111.1.. 244 => 2
+1111.1.1 245 => 2
+1111.11. 246 => 2
+1111.111 247 => 2
+11111... 248 => 2
+11111..1 249 => 2
+11111.1. 250 => 2
+11111.11 251 => 2
+111111.. 252 => 2
+111111.1 253 => 2
+1111111. 254 => 2
+11111111 255 => 2




From andyparkins at gmail.com  Thu Dec  8 10:47:08 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 8 Dec 2011 10:47:08 +0000
Subject: [Bitcoin-development] Lowering confirmation requirements and
	preventing double spends
Message-ID: <201112081047.09082.andyparkins@gmail.com>

Hello,

Another of my crazy ideas:

When a transaction is first broadcast, it should include the hash of the block 
it wants to appear after, let's call it's basis block.  That block can be 
anything the claimer wants; but it allows the miners to add this condition: 
the transactions outputs a new transaction claims must be before the new 
transaction's basis block.

Consider this block chain fork:

 * -- * -- F -- * -- 1 -- 4 -- 5
            \
             * -- 2 -- 3

Let's say in block 2; I transfer coins from address A to Mt.Gox (or any other 
pooled-account online wallet).  In block 1 I transfer credit from address A to 
address B.  In block 3 I transfer credit from Mt.Gox's pool to address B.

The chain at 3 races out first, but eventually the chain at 5 becomes "the 
one".  If Mt.Gox are foolish enough to broadcast my withdrawl in 3; there is 
nothing to stop that same withdrawl making it into 4 (since it comes from a 
pooled fund address).  Therefore Mt.Gox can't allow such a fast turnaround and 
must wait for six confirmations of 2 before allowing use of the funds.  That 
is an inconvenience for all the honest users.

With my proposed change, the Mt.Gox transaction broadcast at 3 would include 
"block 2" as its basis block.  Therefore that transaction could never make it 
into block 4, as no miner will include a transaction based on block 2 in the 
block 4 chain.

Mt.Gox is probably not a good example, as they have problems with fiat to deal 
with too.  However, for other online wallet accounts it would allow faster 
acceptance of received funds, since there is no danger of loss should an 
attacker arrange a reorganisation.

This basis block would be optional (implied by the input transactions if it 
isn't present); and would only need storing for the pending transactions, so 
no incompatible change is needed to the block format.



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com



From moon at justmoon.de  Thu Dec  8 22:43:24 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Thu, 08 Dec 2011 23:43:24 +0100
Subject: [Bitcoin-development] Lowering confirmation requirements and
 preventing double spends
In-Reply-To: <201112081047.09082.andyparkins@gmail.com>
References: <201112081047.09082.andyparkins@gmail.com>
Message-ID: <4EE13D8C.2020308@justmoon.de>

Hey Andy,

Bitcoin already does something which in practice has exactly this 
effect: If a transaction is reversed, any transactions based on its 
outputs are rejected.

Hosted wallets can make use of this - but as you correctly point out, 
depending on the service, it can get tricky. What if I exchange the 
money to USD and back before withdrawing? You could have an algorithm 
where MtGox prefers to spend outputs from your own deposits as the 
inputs for your withdrawals, it's not trivial though and never 100% secure.

I have trouble thinking of a good example where you need an explicit 
block dependency as you describe. The only times you'd want to use this 
dependency of transactions on specific previous transactions is when you 
can clearly and easily associate the money. But if you can clearly and 
easily associate the money, you might as well just relate the 
transactions (use the outputs from the deposit transaction as the inputs 
of the withdrawal transaction.)

This is btw something that would strongly agree with: Hosted wallets 
should absolutely keep each account as separate public keys. With that 
you lose free and instant internal transactions, but you gain instant 
deposits and much better risk isolation.

This is just my view. Thanks and keep the thought-provoking stuff coming!

Cheers,

Stefan

On 12/8/2011 11:47 AM, Andy Parkins wrote:
> Hello,
>
> Another of my crazy ideas:
>
> When a transaction is first broadcast, it should include the hash of the block
> it wants to appear after, let's call it's basis block.  That block can be
> anything the claimer wants; but it allows the miners to add this condition:
> the transactions outputs a new transaction claims must be before the new
> transaction's basis block.
>
> Consider this block chain fork:
>
>   * -- * -- F -- * -- 1 -- 4 -- 5
>              \
>               * -- 2 -- 3
>
> Let's say in block 2; I transfer coins from address A to Mt.Gox (or any other
> pooled-account online wallet).  In block 1 I transfer credit from address A to
> address B.  In block 3 I transfer credit from Mt.Gox's pool to address B.
>
> The chain at 3 races out first, but eventually the chain at 5 becomes "the
> one".  If Mt.Gox are foolish enough to broadcast my withdrawl in 3; there is
> nothing to stop that same withdrawl making it into 4 (since it comes from a
> pooled fund address).  Therefore Mt.Gox can't allow such a fast turnaround and
> must wait for six confirmations of 2 before allowing use of the funds.  That
> is an inconvenience for all the honest users.
>
> With my proposed change, the Mt.Gox transaction broadcast at 3 would include
> "block 2" as its basis block.  Therefore that transaction could never make it
> into block 4, as no miner will include a transaction based on block 2 in the
> block 4 chain.
>
> Mt.Gox is probably not a good example, as they have problems with fiat to deal
> with too.  However, for other online wallet accounts it would allow faster
> acceptance of received funds, since there is no danger of loss should an
> attacker arrange a reorganisation.
>
> This basis block would be optional (implied by the input transactions if it
> isn't present); and would only need storing for the pending transactions, so
> no incompatible change is needed to the block format.
>
>
>
> Andy




From andyparkins at gmail.com  Fri Dec  9 09:50:03 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 9 Dec 2011 09:50:03 +0000
Subject: [Bitcoin-development] Lowering confirmation requirements and
	preventing double spends
In-Reply-To: <4EE13D8C.2020308@justmoon.de>
References: <201112081047.09082.andyparkins@gmail.com>
	<4EE13D8C.2020308@justmoon.de>
Message-ID: <201112090950.10974.andyparkins@gmail.com>

On 2011 December 08 Thursday, Stefan Thomas wrote:

> Bitcoin already does something which in practice has exactly this
> effect: If a transaction is reversed, any transactions based on its
> outputs are rejected.

That part is fine; I was aware that Bitcoin did this.  How could it not?  The 
transactions form multiple signature chains of their own.  It impossible to 
have a transaction depend on a non-existent input transaction.

> Hosted wallets can make use of this - but as you correctly point out,
> depending on the service, it can get tricky. What if I exchange the
> money to USD and back before withdrawing? You could have an algorithm
> where MtGox prefers to spend outputs from your own deposits as the
> inputs for your withdrawals, it's not trivial though and never 100% secure.

Quite so; this is essentially the problem my suggestion addresses.  What do 
you do when a transaction is dependent on another transaction financially but 
not technically?  That is to say that your accounting software would show a 
credit and a debit to a particular entity, but the bitcoin block chain would 
not.  In the old world we might do this as "I'll write you a cheque and you 
give me cash"; if that cheque bounces, you've lost your cash.

> I have trouble thinking of a good example where you need an explicit
> block dependency as you describe. The only times you'd want to use this
> dependency of transactions on specific previous transactions is when you
> can clearly and easily associate the money. But if you can clearly and
> easily associate the money, you might as well just relate the
> transactions (use the outputs from the deposit transaction as the inputs
> of the withdrawal transaction.)

The MyBitcoin debacle (if we are to believe their reports) would have been 
avoided by my suggestion.  They were accepting deposits in one chain, and 
allowing withdrawls from another.  That meant that while there was a financial 
connection, there was not a bitcoin-connection.  The withdrawls happened from 
the pool address, most likely well funded, so were valid on either chain.  If 
MyBitcoin had been able to broadcast the withdrawl transactions as being based 
on the same chain as the deposit (even though it was not using transactions in 
that chain) then the attack would have failed.

> This is btw something that would strongly agree with: Hosted wallets
> should absolutely keep each account as separate public keys. With that
> you lose free and instant internal transactions, but you gain instant
> deposits and much better risk isolation.

I'm not sure I agree.  There is certainly a case for both types: one-to-one 
correspondence between address and account has the advantages you list but is 
highly identifiable and trackable.  However the disadvantage is that all funds 
would have to be kept online.  Places like Mt.Gox can (although there is 
evidence to suggest that they don't, tut tu) move the majority of the funds to 
five USB sticks, and keep them in five fire-proof safes or deposit boxes or 
whatever only because deposited funds are pooled.

> This is just my view. Thanks and keep the thought-provoking stuff coming!

Thanks for the encouragement.  It's appreciated.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111209/5a680498/attachment.sig>

From luke at dashjr.org  Sat Dec 10 18:16:30 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 10 Dec 2011 13:16:30 -0500
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <201112061628.18634.luke@dashjr.org>
References: <201112061610.41083.luke@dashjr.org>
	<201112061628.18634.luke@dashjr.org>
Message-ID: <201112101316.31666.luke@dashjr.org>

This should make it compatible with Namecoin addresses...

Here's a revised proposal:
* Bits 128/64 define network class
** 0 = main network
** 64,128 = reserved
** 192 = test network
* Bits 32/16 define network
** 0 = Bitcoin
** 16 = reserved
** 32 = OTHER (next octet)
** 48 = Namecoin

The rest is left up to the network to decide; for Bitcoin, it is:
* Bits 8/4/2 define data class
** 0 = Public key hash
** 2 = reserved
** 4 = Script hash
** 6 = Public key (raw)
** 8 = Signature
** 10 = reserved
** 12 = Private key (raw)
** 14 = OTHER (next octet)
* Bit 1 is freely chosen (for aesthetic assignment)



From pieter.wuille at gmail.com  Mon Dec 12 20:57:54 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 12 Dec 2011 21:57:54 +0100
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <20111212205559.GA16665@ulyssis.org>
References: <201112061610.41083.luke@dashjr.org>
	<201112061628.18634.luke@dashjr.org>
	<201112101316.31666.luke@dashjr.org>
	<20111212205559.GA16665@ulyssis.org>
Message-ID: <20111212205753.GB16665@ulyssis.org>

It seems base58 is actually quite terrible for producing nice human-recognizable
addresses, even though base58 is specially intended for human usage. We'll just
have to deal with it, or completely overhaul it and move to a saner encoding.


Luke's proposal is somewhat more drastic than my original one, since it removes
the actual "version" notion from the version bytes, and changes testnet addresses.
However, I think it may be worth it. More data classes have been necessary
before, and new versions haven't. Furthermore, they are far more recognizable to
users, which is something that in particular for OP_EVAL addresses (script hashes)
will be a plus.

Therefore, I'm in favor of the proposal; the new versions would become:

0:   mainnet pubkey hashes ('1', as before)
192: testnet pubnet hashes ('2', instead of 111, 'm' and 'n')
5:   mainnet script hashes ('3'; for OP_EVAL)
196: testnet script hashes ('2', same as normal testnet addresses)
12:  mainnet private keys  ('Q', 'R' or 'S', instead of 128, '5')
204: testnet private keys  ('7', instead of 239, '8' and '9')

Comments?

--
Pieter



From luke at dashjr.org  Mon Dec 12 21:02:11 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 12 Dec 2011 16:02:11 -0500
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <20111212205559.GA16665@ulyssis.org>
References: <201112061610.41083.luke@dashjr.org>
	<201112101316.31666.luke@dashjr.org>
	<20111212205559.GA16665@ulyssis.org>
Message-ID: <201112121602.12806.luke@dashjr.org>

On Monday, December 12, 2011 3:56:01 PM Pieter Wuille wrote:
> It seems base58 is actually quite terrible for producing nice
> human-recognizable addresses, even though base58 is specially intended for
> human usage. We'll just have to deal with it, or completely overhaul it
> and move to a saner encoding.

Or both: use this proposal for 20-byte base58 for now, and overhaul it in the 
future (maybe when the block chain forks?).

> 0:   mainnet pubkey hashes ('1', as before)
> 192: testnet pubnet hashes ('2', instead of 111, 'm' and 'n')
> 5:   mainnet script hashes ('3'; for OP_EVAL)
> 196: testnet script hashes ('2', same as normal testnet addresses)

Looks good here.

> 12:  mainnet private keys  ('Q', 'R' or 'S', instead of 128, '5')
> 204: testnet private keys  ('7', instead of 239, '8' and '9')

These are 32-byte, so have no reason IMO to follow the 20-byte proposal.
Since a lot of services are already using version 128 ('5') for bitcoin 
private keys, and 128 is "reserved" in the 20-byte proposal, I think it's fair 
to leave it alone (for now).



From zgenjix at yahoo.com  Mon Dec 12 22:21:09 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 12 Dec 2011 14:21:09 -0800 (PST)
Subject: [Bitcoin-development] [BIP 15] Aliases
Message-ID: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>

I wrote this pre-draft:


https://en.bitcoin.it/wiki/BIP_0015

It's merely a starter for discussions.

Aliases are a way to lookup bitcoin addresses so I can type genjix at genjix.net instead of 1jkddsjdskjwnk2j3kj232kjdkj




From zgenjix at yahoo.com  Mon Dec 12 22:25:42 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 12 Dec 2011 14:25:42 -0800 (PST)
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
Message-ID: <1323728742.10631.YahooMailNeo@web121019.mail.ne1.yahoo.com>

OK, my thoughts. My order of preference is: web service, server service, DNS TXT records.

FirstBits + Vanitygen is out of the question in my mind. Not robust enough.

I like web service since anyone can trivially set one up. You can provide a PHP script and a text file (that users edit) that people upload to XFreeWebHost and then they're instantly set to go. Setting up a web host is very easy nowadays- as easy as click click click.

The other ideas are not so easy.

Also HTTPS + CA is the most secure of the bunch.

I'm curious to hear any other ideas too.

Thanks.



----- Original Message -----
From: Amir Taaki <zgenjix at yahoo.com>
To: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net>
Cc: 
Sent: Monday, December 12, 2011 10:21 PM
Subject: [BIP 15] Aliases

I wrote this pre-draft:


https://en.bitcoin.it/wiki/BIP_0015

It's merely a starter for discussions.

Aliases are a way to lookup bitcoin addresses so I can type genjix at genjix.net instead of 1jkddsjdskjwnk2j3kj232kjdkj



From luke at dashjr.org  Mon Dec 12 22:32:40 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 12 Dec 2011 17:32:40 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
Message-ID: <201112121732.43072.luke@dashjr.org>

FirstBits looks nice at glance, but is bound to create a gold-rush to grab 
every nice-looking FirstBits address.

HTTPS is only as secure as the (centralized) CAs, thus not really any better 
than TXT records.

I don't think an address of some form is avoidable.



From zellfaze at yahoo.com  Mon Dec 12 23:16:21 2011
From: zellfaze at yahoo.com (Zell Faze)
Date: Mon, 12 Dec 2011 15:16:21 -0800 (PST)
Subject: [Bitcoin-development] [BIP 15] Aliases
Message-ID: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>

I agree with Luke-Jr.  We need to try to find a decentralized solution if we are going to implement BIP 15.  Bitcoin needs to remain decentralized in every aspect of the protocol or we lose its greatest strength.

I feel like the HTTPS idea would be a great idea for a client feature, but not really something that should be added to the protocol.

--- On Mon, 12/12/11, Luke-Jr <luke at dashjr.org> wrote:

> From: Luke-Jr <luke at dashjr.org>
> Subject: Re: [Bitcoin-development] [BIP 15] Aliases
> To: bitcoin-development at lists.sourceforge.net, "Amir Taaki" <zgenjix at yahoo.com>
> Date: Monday, December 12, 2011, 5:32 PM
> FirstBits looks nice at glance, but
> is bound to create a gold-rush to grab 
> every nice-looking FirstBits address.
> 
> HTTPS is only as secure as the (centralized) CAs, thus not
> really any better 
> than TXT records.
> 
> I don't think an address of some form is avoidable.




From timon.elviejo at gmail.com  Mon Dec 12 23:37:56 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 13 Dec 2011 00:37:56 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
Message-ID: <CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>

I don't think Amir wants to put it into the protocol, but I still
don't like much the proposal if it has to rely on servers.
As an aside, even if firstbits it's not useful enough for the human
memory, it is still useful for QR-codes like in the case of green
addresses's POS instant payments.

Would it be too strange to use namecoin?
Some devices may need to rely on block exploring servers, but it is
the easiest decentralized solution that comes to mind.


2011/12/13, Zell Faze <zellfaze at yahoo.com>:
> I agree with Luke-Jr.  We need to try to find a decentralized solution if we
> are going to implement BIP 15.  Bitcoin needs to remain decentralized in
> every aspect of the protocol or we lose its greatest strength.
>
> I feel like the HTTPS idea would be a great idea for a client feature, but
> not really something that should be added to the protocol.
>
> --- On Mon, 12/12/11, Luke-Jr <luke at dashjr.org> wrote:
>
>> From: Luke-Jr <luke at dashjr.org>
>> Subject: Re: [Bitcoin-development] [BIP 15] Aliases
>> To: bitcoin-development at lists.sourceforge.net, "Amir Taaki"
>> <zgenjix at yahoo.com>
>> Date: Monday, December 12, 2011, 5:32 PM
>> FirstBits looks nice at glance, but
>> is bound to create a gold-rush to grab
>> every nice-looking FirstBits address.
>>
>> HTTPS is only as secure as the (centralized) CAs, thus not
>> really any better
>> than TXT records.
>>
>> I don't think an address of some form is avoidable.
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n



From luke at dashjr.org  Mon Dec 12 23:41:38 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 12 Dec 2011 18:41:38 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
Message-ID: <201112121841.39864.luke@dashjr.org>

On Monday, December 12, 2011 6:37:56 PM Jorge Tim?n wrote:
> Would it be too strange to use namecoin?

This has the same problem as FirstBits, except .bit domains are dirt cheap, 
whereas vanitygen at least slows down grabbing all the common words...



From timon.elviejo at gmail.com  Tue Dec 13 00:00:58 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 13 Dec 2011 01:00:58 +0100
Subject: [Bitcoin-development] Fwd:  [BIP 15] Aliases
In-Reply-To: <CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
Message-ID: <CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>

Is the point is to have different hosts like in jtimon at gmail.com,
jtimon at timon.es, etc. so if jtimon is already taken I can take another
host?

What about reserving directly the string "jtimon at nottaken.org" or
"jtimon::public::receiving::bitcoin" in namecoin?

I'm confused about the problem we're trying to solve.


2011/12/13, Luke-Jr <luke at dashjr.org>:
> On Monday, December 12, 2011 6:37:56 PM Jorge Tim?n wrote:
>> Would it be too strange to use namecoin?
>
> This has the same problem as FirstBits, except .bit domains are dirt cheap,
> whereas vanitygen at least slows down grabbing all the common words...
>



From bitcoin-list at bluematt.me  Mon Dec 12 23:52:45 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 12 Dec 2011 18:52:45 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
Message-ID: <1323733965.3353.15.camel@BMThinkPad.lan.bluematt.me>

On Tue, 2011-12-13 at 00:37 +0100, Jorge Tim?n wrote:
> I don't think Amir wants to put it into the protocol, but I still
> don't like much the proposal if it has to rely on servers.
> As an aside, even if firstbits it's not useful enough for the human
> memory, it is still useful for QR-codes like in the case of green
> addresses's POS instant payments.
Firstbits isn't acceptable for anything.  As Amir originally pointed
out, it doesn't scale well and worst of all it fills the blockchain with
a ton of crap to get 1 satoshi at an address so that it is
"registered".  
> 
> Would it be too strange to use namecoin?
> Some devices may need to rely on block exploring servers, but it is
> the easiest decentralized solution that comes to mind.
Firstbits is unacceptable because it causes unnecessary harm to each
Bitcoin node.  However, if one were to use a chain specifically crafted
for such a purpose isn't terrible.  That said, it still doesn't scale
well and if it becomes popular virtually every implementation would have
to rely on trusted servers at which point you are better off going back
to an HTTPS/DNSSEC-based implementation

Matt




From will at phase.net  Mon Dec 12 23:37:58 2011
From: will at phase.net (Will)
Date: Mon, 12 Dec 2011 23:37:58 +0000
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
Message-ID: <CAHQs=o7ieTM3axeDvmODY+o6pMXDzy2V70-bKV31wKWXKBN+FQ@mail.gmail.com>

Are there any PGP key servers that support EC key pairs?  OpenPGP Spec
RFC2440 defines key types for EC, just not sure if they were ever
implemented on the keyserver side.  Could even have a similar 'web of
trust' using private keys to sign people's identities similar to PGP.

Will

On 12 December 2011 23:16, Zell Faze <zellfaze at yahoo.com> wrote:

> I agree with Luke-Jr.  We need to try to find a decentralized solution if
> we are going to implement BIP 15.  Bitcoin needs to remain decentralized in
> every aspect of the protocol or we lose its greatest strength.
>
> I feel like the HTTPS idea would be a great idea for a client feature, but
> not really something that should be added to the protocol.
>
> --- On Mon, 12/12/11, Luke-Jr <luke at dashjr.org> wrote:
>
> > From: Luke-Jr <luke at dashjr.org>
> > Subject: Re: [Bitcoin-development] [BIP 15] Aliases
> > To: bitcoin-development at lists.sourceforge.net, "Amir Taaki" <
> zgenjix at yahoo.com>
> > Date: Monday, December 12, 2011, 5:32 PM
> > FirstBits looks nice at glance, but
> > is bound to create a gold-rush to grab
> > every nice-looking FirstBits address.
> >
> > HTTPS is only as secure as the (centralized) CAs, thus not
> > really any better
> > than TXT records.
> >
> > I don't think an address of some form is avoidable.
>
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111212/25918c42/attachment.html>

From zgenjix at yahoo.com  Tue Dec 13 00:42:26 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 12 Dec 2011 16:42:26 -0800 (PST)
Subject: [Bitcoin-development] Fwd:  [BIP 15] Aliases
In-Reply-To: <CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
Message-ID: <1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>

> I'm confused about the problem we're trying to solve.

I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the wall a picture of their QR code and a bitcoin address. I don't own a mobile phone so the QR code is 
useless. Then I remembered FirstBits, went to my terminal and typed 
1brmlab. I got their bitcoin address from the website and copied that, 
then opened my terminal and pasted that in to send 1 BTC.

And 
these proposals for Namecoin, would make bitcoin implementations 
dependent on unproven technology. HTTPS/DNSSEC have been around a long 
time and are responsible for many mission critical systems. There's a 
lot of momentum behind those projects. Namecoin by contrast, could die 
tomorrow. And it isn't a big deal that they're centralised. This is a 
convenience for end users and does not affect the core system much.

tl;dr: usability




From nanotube at gmail.com  Tue Dec 13 02:32:56 2011
From: nanotube at gmail.com (Daniel F)
Date: Mon, 12 Dec 2011 21:32:56 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <CAHY2ayB_36VyKF1HfCf3oGNJB7FGGidXidsbLP=HXMzdbnyWDg@mail.gmail.com>

> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the wall a picture of their QR code and a bitcoin address. I don't own a mobile phone so the QR code is
> useless. Then I remembered FirstBits, went to my terminal and typed
> 1brmlab. I got their bitcoin address from the website and copied that,
> then opened my terminal and pasted that in to send 1 BTC.

ok, imagine if firstbits didn't exist. instead of going to firstbits,
you would have gone to your terminal, opened up brmlabs website, and
copied the address from there?

there may be some arguments for name-> address translation, but i'm
sorry to say, that your example is not one of them. if anything, it
seems to suggest that firstbits is completely useless, since it saves
approximately zero effort.



From zgenjix at yahoo.com  Tue Dec 13 02:37:06 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 12 Dec 2011 18:37:06 -0800 (PST)
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAHY2ayB_36VyKF1HfCf3oGNJB7FGGidXidsbLP=HXMzdbnyWDg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CAHY2ayB_36VyKF1HfCf3oGNJB7FGGidXidsbLP=HXMzdbnyWDg@mail.gmail.com>
Message-ID: <1323743826.16120.YahooMailNeo@web121003.mail.ne1.yahoo.com>

lol, way to miss the point nanotube.

FirstBits *is* useless, but not for the reasons you specified. But simply because the resources it needs rises exponentially as the number of participants in the network grows linearly.

The point is that if FirstBits were built into the implementation, that would allow me to simply send to 1brmlab. The proposal here is not for a website where people can lookup bitcoin addresses, but a shared naming scheme between bitcoin implementations. Here's the story again:

> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had 
on the wall a picture of their QR code and a bitcoin address. I don't 
own a mobile phone so the QR code is
> useless. Then I remembered FirstBits, went to my terminal and typed
> 1brmlab. I got their bitcoin address from the website and copied that,
> then opened my terminal and pasted that in to send 1 BTC.

In our revised history, I simply send 1 BTC to brmlab

BOOM.

Club Mate



----- Original Message -----
From: Daniel F <nanotube at gmail.com>
To: Amir Taaki <zgenjix at yahoo.com>
Cc: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net>
Sent: Tuesday, December 13, 2011 2:32 AM
Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases

> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the wall a picture of their QR code and a bitcoin address. I don't own a mobile phone so the QR code is
> useless. Then I remembered FirstBits, went to my terminal and typed
> 1brmlab. I got their bitcoin address from the website and copied that,
> then opened my terminal and pasted that in to send 1 BTC.

ok, imagine if firstbits didn't exist. instead of going to firstbits,
you would have gone to your terminal, opened up brmlabs website, and
copied the address from there?

there may be some arguments for name-> address translation, but i'm
sorry to say, that your example is not one of them. if anything, it
seems to suggest that firstbits is completely useless, since it saves
approximately zero effort.




From moon at justmoon.de  Tue Dec 13 02:39:42 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Tue, 13 Dec 2011 03:39:42 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112121841.39864.luke@dashjr.org>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
Message-ID: <4EE6BAEE.6010208@justmoon.de>

>> Would it be too strange to use namecoin?
> This has the same problem as FirstBits, except .bit domains are dirt cheap,
> whereas vanitygen at least slows down grabbing all the common words...

Grabbing is no more an issue than mining Bitcoins is an issue. Sure, 
domain grabbers will have the domains first, but they want to profit and 
therefore are willing to sell them for whatever price they can get. Just 
like the trading of any other limited resource, this process sounds like 
somebody is getting rich for nothing, but it does tend to put the 
limited resources to good use as people who waste good domains can't 
afford them in the long run. The problem with Firstbits is that the 
names already grabbed have fixed private keys that are known by their 
originators. That makes the names untradable. This may be fixable with 
split keys, but a lot of "good" 1firstbits are already made useless in 
this way.

Names in Namecoin can be transferred/traded securely, strong 
cryptography is built in and it shares mining without bloating the 
Bitcoin block chain. I see it as a decentralized DNS alternative at a 
time when domain seizures are on the rise, even absent any court order.

So I would use one of the DNS-based solutions that Amir suggested and 
simply require standard-compliant clients to be able to look up .bit 
(i.e. Namecoin) domains as well. That way we have a pragmatic solution, 
but one that also provides security and true decentralization for the 
more paranoid of our users.


On 12/13/2011 12:41 AM, Luke-Jr wrote:
> On Monday, December 12, 2011 6:37:56 PM Jorge Tim?n wrote:
>> Would it be too strange to use namecoin?
> This has the same problem as FirstBits, except .bit domains are dirt cheap,
> whereas vanitygen at least slows down grabbing all the common words...
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From luke at dashjr.org  Tue Dec 13 02:43:08 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 12 Dec 2011 21:43:08 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323743826.16120.YahooMailNeo@web121003.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAHY2ayB_36VyKF1HfCf3oGNJB7FGGidXidsbLP=HXMzdbnyWDg@mail.gmail.com>
	<1323743826.16120.YahooMailNeo@web121003.mail.ne1.yahoo.com>
Message-ID: <201112122143.09445.luke@dashjr.org>

On Monday, December 12, 2011 9:37:06 PM Amir Taaki wrote:
> In our revised history, I simply send 1 BTC to brmlab

And then Joe Address Squatter gets 1 BTC. BOOM.



From nanotube at gmail.com  Tue Dec 13 02:52:00 2011
From: nanotube at gmail.com (Daniel F)
Date: Mon, 12 Dec 2011 21:52:00 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323743826.16120.YahooMailNeo@web121003.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CAHY2ayB_36VyKF1HfCf3oGNJB7FGGidXidsbLP=HXMzdbnyWDg@mail.gmail.com>
	<1323743826.16120.YahooMailNeo@web121003.mail.ne1.yahoo.com>
Message-ID: <CAHY2ayBUZjh3UNwgc8AcgLXJF+EQjPsWR2XpvTJRqfJAm=jkyw@mail.gmail.com>

On Mon, Dec 12, 2011 at 9:37 PM, Amir Taaki <zgenjix at yahoo.com> wrote:
> lol, way to miss the point nanotube.
>
> FirstBits *is* useless, but not for the reasons you specified. But simply because the resources it needs rises exponentially as the number of participants in the network grows linearly.
>
> The point is that if FirstBits were built into the implementation, that would allow me to simply send to 1brmlab. The proposal here is not for a website where people can lookup bitcoin addresses, but a shared naming scheme between bitcoin implementations. Here's the story again:

well, it's easy to miss the point when the example you use doesn't
make the point you think you're making. :D
but ok, yes, it would be nice to send directly to something like
1brmlab from the client. i suppose figuring out how to make sure that
1brmlab actually does send to whom you think it sends, is left to the
details of implementation, but that's a separate question.



From theymos at mm.st  Tue Dec 13 04:38:42 2011
From: theymos at mm.st (theymos)
Date: Mon, 12 Dec 2011 22:38:42 -0600
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
Message-ID: <1323751122.9491.140661010910705@webmail.messagingengine.com>

I like the user at server.com model. The protocol should be done entirely
in DNS, though, not using HTTP connections to the server. Then the
protocol can easily be used with Namecoin or other DNS
replacements/enhancements later. Crypto to prevent MITM attacks can be
an optional part of the protocol.

Almost all users will be unable to set up *any* always-on Internet
service to answer queries, so I'm not too concerned about how easy it is
to set up the server software.

I agree that FirstBits is bad for this. Unlike DNS, "registrations" last
forever because private keys can't be transferred safely. All short
names will be taken quickly. It will also be very expensive for clients
to query this themselves.

The CA model is broken and it should never be used by Bitcoin.



From timon.elviejo at gmail.com  Tue Dec 13 07:41:48 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 13 Dec 2011 08:41:48 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323751122.9491.140661010910705@webmail.messagingengine.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323751122.9491.140661010910705@webmail.messagingengine.com>
Message-ID: <CAGQP0AFPuoMfJFD_5BZXXwAgN97rwtOrF4xJJFO9=zQyUrcPfA@mail.gmail.com>

@Matt
I didn't thought about firstbits scalability, but the "registering
crap" and squatting arguments don't apply to green addresses because
no one wants fancy or easy to memorize names there. Is just a way to
make the bitcoin addresses shorter in the green addresses protocol to
be able to have various of them in the same QR-code.

@Amir
I see, the point is to be able to type the alias directly into the client.

I like the DNS proposal. This would allow for both well known working
centralized technology and namecoin (not proven, but decentralized)
options to be used.


2011/12/13, theymos <theymos at mm.st>:
> I like the user at server.com model. The protocol should be done entirely
> in DNS, though, not using HTTP connections to the server. Then the
> protocol can easily be used with Namecoin or other DNS
> replacements/enhancements later. Crypto to prevent MITM attacks can be
> an optional part of the protocol.
>
> Almost all users will be unable to set up *any* always-on Internet
> service to answer queries, so I'm not too concerned about how easy it is
> to set up the server software.
>
> I agree that FirstBits is bad for this. Unlike DNS, "registrations" last
> forever because private keys can't be transferred safely. All short
> names will be taken quickly. It will also be very expensive for clients
> to query this themselves.
>
> The CA model is broken and it should never be used by Bitcoin.
>
> ------------------------------------------------------------------------------
> Systems Optimization Self Assessment
> Improve efficiency and utilization of IT resources. Drive out cost and
> improve service delivery. Take 5 minutes to use this Systems Optimization
> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n



From da2ce7 at gmail.com  Tue Dec 13 08:55:23 2011
From: da2ce7 at gmail.com (Cameron Garnham)
Date: Tue, 13 Dec 2011 08:55:23 +0000
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <9109000381434268897@unknownmsgid>
References: <9109000381434268897@unknownmsgid>
Message-ID: <CAACjpwJnZPEnLtxbGeaOvdxjTekEkWEkTcXG30-Jfsqt2hacZg@mail.gmail.com>

Namecoin makes sense; as we can use the same private keys to spend the
namecoin as spending the bitcoins.

Namecoin happens to be the only secure guaranteed global unique human
rememberable string system that exists.

I suggest that sending bitcoins to a namecoin name is the way to go...
It makes even more sense since namecoin started merged mining.

On 13 December 2011 08:03, Cameron Garnham <da2ce7 at gmail.com> wrote:

>
> Sent from my Windows Phone
> De: Amir Taaki
> Enviado: 13/12/2011 0:43
> Para: bitcoin-development at lists.sourceforge.net
> Asunto: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases
> > I'm confused about the problem we're trying to solve.
>
> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on
> the wall a picture of their QR code and a bitcoin address. I don't own
> a mobile phone so the QR code is
> useless. Then I remembered FirstBits, went to my terminal and typed
> 1brmlab. I got their bitcoin address from the website and copied that,
> then opened my terminal and pasted that in to send 1 BTC.
>
> And
> these proposals for Namecoin, would make bitcoin implementations
> dependent on unproven technology. HTTPS/DNSSEC have been around a long
> time and are responsible for many mission critical systems. There's a
> lot of momentum behind those projects. Namecoin by contrast, could die
> tomorrow. And it isn't a big deal that they're centralised. This is a
> convenience for end users and does not affect the core system much.
>
> tl;dr: usability
>
>
>
> ------------------------------------------------------------------------------
> Systems Optimization Self Assessment
> Improve efficiency and utilization of IT resources. Drive out cost and
> improve service delivery. Take 5 minutes to use this Systems Optimization
> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Cameron Garnham:
email: da2ce7 at gmail.com
website: http://da2ce7.blogspot.com
telephone: +61405227831
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/4f763e8f/attachment.html>

From mike at plan99.net  Tue Dec 13 10:38:55 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 13 Dec 2011 11:38:55 +0100
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <201112121602.12806.luke@dashjr.org>
References: <201112061610.41083.luke@dashjr.org>
	<201112101316.31666.luke@dashjr.org>
	<20111212205559.GA16665@ulyssis.org>
	<201112121602.12806.luke@dashjr.org>
Message-ID: <CANEZrP2GvBg19LMyDG_DJe18cvUg3xG7H9S7m+8EemkARz7_Tg@mail.gmail.com>

Why does anyone care what an address looks like?

If the user is seeing an address, that's a usability fail right there. It's
common today because AFAIK nobody finished off the  URL handling support in
the main client for browser integration. It'd be a much better use of time
to finish off that integration and make it easy for people to create links
containing a bitcoin: URL (like with copy/paste of text/html content).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/d8f5f0e8/attachment.html>

From mike at plan99.net  Tue Dec 13 10:55:34 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 13 Dec 2011 11:55:34 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>

>
> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the
> wall a picture of their QR code and a bitcoin address. I don't own a mobile
> phone so the QR code is
> useless.


Fixed addresses like that are a temporary thing during Bitcoins maturation
period. They lead to merchants exposing data they probably don't realize
they're exposing, like their income, which is basically unacceptable for
any payment system.

There's no point trying to optimize a case where:

1) You are in the minority (no phone?)
2) The "perfect experience" leaks private data in such a way that would be
deemed a gross security breach by any serious payment processor.

OK, some thoughts on the general proposal, from the POV of what it'd take
for a large deployment, like for every Gmail or every Facebook user. In
terms of ease of implementation it is ordered HTTPS/HTTP then DNS trailing
by a large margin. Big sites, even small sites, typically have high-speed
load balancing and demuxing already implemented for HTTP[S] and it's
usually easy to add new endpoints. The same is *not* true of DNS, and
whilst coding up a custom DNS server is possible it's definitely a worse
fit.

FirstBits seems out of the question for the same privacy reasons as given
above. No banking system worth its salt would let everyone look up other
peoples income.

The simplest approach would be to request a full public key with an HTTPS
request like

   foo at domain ->
https://domain/_bitcoin/getnewkey?user=foo&label=Payment%20from%20Bob

If you then want to turn the resulting public key into an address before
creating a transaction you can obviously do that.

BTW the BIP is pretty hard to read. Your spec for the HTTPS proposal is a
big pile of source code. I think it's the same as above, but it's hard to
tell without more effort.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/f32e484c/attachment.html>

From laanwj at gmail.com  Tue Dec 13 10:56:52 2011
From: laanwj at gmail.com (Wladimir)
Date: Tue, 13 Dec 2011 11:56:52 +0100
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <CANEZrP2GvBg19LMyDG_DJe18cvUg3xG7H9S7m+8EemkARz7_Tg@mail.gmail.com>
References: <201112061610.41083.luke@dashjr.org>
	<201112101316.31666.luke@dashjr.org>
	<20111212205559.GA16665@ulyssis.org>
	<201112121602.12806.luke@dashjr.org>
	<CANEZrP2GvBg19LMyDG_DJe18cvUg3xG7H9S7m+8EemkARz7_Tg@mail.gmail.com>
Message-ID: <CA+s+GJDxJesFGhE8K2DiR_nxfDebEKtDRGWxeVRC7eaZbO9fSw@mail.gmail.com>

All,

I fully agree with Mike Hearn on this. Like email addresses, bank numbers,
phone numbers, IPv4/v6 addresses and such the bitcoin address is just an
opaque identifier for machines to be able to send each other messages.

Base58 was chosen not for human readability but to make it easy to
copy/paste.

Of course, sometimes for security reasons you may want to check the
addresses manually, but it is not the prime usage scenario. Although fun as
a nerd pasttime, I don't think we should encourage "addresses with meaning"
to normal users.

Indeed better to focus on alternative ways that don't involve typing or
even seeing the addresses.

Copy/paste of HTML content is currently not possible. You *can* already
drag&drop the bitcoin: link to the client. Bluematt has a pull request to
automatically handle bitcoin: URLs when clicked in the browser.

Wladimir

On Tue, Dec 13, 2011 at 11:38 AM, Mike Hearn <mike at plan99.net> wrote:

> Why does anyone care what an address looks like?
>
> If the user is seeing an address, that's a usability fail right there.
> It's common today because AFAIK nobody finished off the  URL handling
> support in the main client for browser integration. It'd be a much better
> use of time to finish off that integration and make it easy for people to
> create links containing a bitcoin: URL (like with copy/paste of text/html
> content).
>
> ------------------------------------------------------------------------------
> Systems Optimization Self Assessment
> Improve efficiency and utilization of IT resources. Drive out cost and
> improve service delivery. Take 5 minutes to use this Systems Optimization
> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/aedaec84/attachment.html>

From mike at plan99.net  Tue Dec 13 11:07:17 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 13 Dec 2011 12:07:17 +0100
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <CA+s+GJDxJesFGhE8K2DiR_nxfDebEKtDRGWxeVRC7eaZbO9fSw@mail.gmail.com>
References: <201112061610.41083.luke@dashjr.org>
	<201112101316.31666.luke@dashjr.org>
	<20111212205559.GA16665@ulyssis.org>
	<201112121602.12806.luke@dashjr.org>
	<CANEZrP2GvBg19LMyDG_DJe18cvUg3xG7H9S7m+8EemkARz7_Tg@mail.gmail.com>
	<CA+s+GJDxJesFGhE8K2DiR_nxfDebEKtDRGWxeVRC7eaZbO9fSw@mail.gmail.com>
Message-ID: <CANEZrP3EpkCaK2nXXazX-D-a0yO_3SkWXg74V2zh+nCM=Ko20w@mail.gmail.com>

>
> Base58 was chosen not for human readability but to make it easy to
> copy/paste.
>

It was also chosen for hand-writeability, weirdly enough. That's why it
excludes some confusible characters. But Satoshi didn't really understand
how people would end up using Bitcoin, he originally imagined most
transactions being done directly between pairs of IP addresses.


> Copy/paste of HTML content is currently not possible. You *can* already
> drag&drop the bitcoin: link to the client. Bluematt has a pull request to
> automatically handle bitcoin: URLs when clicked in the browser.
>

That's cool. I hope Matts change gets merged soon. Then the issue becomes
how do people find out about this capability? Expecting people to learn how
to hand-craft Bitcoin links won't work. But all modern operating systems
support copy/paste and drag/drop of rich content. Qt probably makes it easy
to expose an UI like this:

   *Pay me*    [Copy to clipboard]

Clicking the link in the UI would pop up an alert saying something like

   "You can drag this link to an email, chat window or editing program."

Dragging it/pushing the copy button would just set the drag/clipboard data
as a bit of text/html content. So then you can just copy/paste into an
email or HTML editor. It wouldn't work for forums that use bbCode, though I
guess there's no particular reason the forum software can't turn <a href>
into [url=] automatically.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/545d5441/attachment.html>

From laanwj at gmail.com  Tue Dec 13 11:15:20 2011
From: laanwj at gmail.com (Wladimir)
Date: Tue, 13 Dec 2011 12:15:20 +0100
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <CANEZrP3EpkCaK2nXXazX-D-a0yO_3SkWXg74V2zh+nCM=Ko20w@mail.gmail.com>
References: <201112061610.41083.luke@dashjr.org>
	<201112101316.31666.luke@dashjr.org>
	<20111212205559.GA16665@ulyssis.org>
	<201112121602.12806.luke@dashjr.org>
	<CANEZrP2GvBg19LMyDG_DJe18cvUg3xG7H9S7m+8EemkARz7_Tg@mail.gmail.com>
	<CA+s+GJDxJesFGhE8K2DiR_nxfDebEKtDRGWxeVRC7eaZbO9fSw@mail.gmail.com>
	<CANEZrP3EpkCaK2nXXazX-D-a0yO_3SkWXg74V2zh+nCM=Ko20w@mail.gmail.com>
Message-ID: <CA+s+GJCdKAOtpwitGWOXW9yq5qBD6Up8KdkJwvwQNM3No-pHOg@mail.gmail.com>

>
>
> That's cool. I hope Matts change gets merged soon. Then the issue becomes
> how do people find out about this capability? Expecting people to learn how
> to hand-craft Bitcoin links won't work. But all modern operating systems
> support copy/paste and drag/drop of rich content. Qt probably makes it easy
> to expose an UI like this:
>
>    *Pay me*    [Copy to clipboard]
>
> Clicking the link in the UI would pop up an alert saying something like
>
>    "You can drag this link to an email, chat window or editing program."
>

Good idea! This could be integrated with the QR-code generation (
https://github.com/bitcoin/bitcoin/pull/629) which adds "create a payment
link" functionality (but currently only "exports" this link as a QR code).

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/681d3874/attachment.html>

From decker.christian at gmail.com  Tue Dec 13 11:42:17 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Tue, 13 Dec 2011 12:42:17 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
Message-ID: <CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>

I think the scope of this BIP is not so well defined right now. We need a
way for merchants to translate a human readable, and more importantly
human-writeable, address into a bitcoin address. I agree with Mike that a
fixed address is not the way to go, because addresses should be used once
for a single transaction to be able to track payments.

While firstbits sounds attractive at first, I think we can all agree that
it just isn't feasible and would not allow per-transaction addresses. DNS
sounds interesting for fixed addresses, but caching and propagation make it
difficult to use for per-transaction addresses that are to be generated
ad-hoc.

HTTP(S) is the best option I think, merchants are probably using HTTP
anyway for their shops. So something like
http://merchant.com/btc/transaction/1234 sounds reasonable. But I think it
should not be over-engineered, it should be a simple HTTP(S) request to a
merchant specified URL that returns an ASCII document containing either a
bitcoin: URI or simply the bitcoin address or even a 301 redirect. It's no
use to start defining URL schemes, it should be left to the merchants to
define how to structure them.

This would allow a merchant to decide if he prefers per-transaction
addresses, per-user transactions, fixed addresses or any combination.

Regards,
cdecker


On Tue, Dec 13, 2011 at 11:55 AM, Mike Hearn <mike at plan99.net> wrote:

> I was in brmlab and wanted to pay 1 BTC for a Club Mate. They had on the
>> wall a picture of their QR code and a bitcoin address. I don't own a mobile
>> phone so the QR code is
>> useless.
>
>
> Fixed addresses like that are a temporary thing during Bitcoins maturation
> period. They lead to merchants exposing data they probably don't realize
> they're exposing, like their income, which is basically unacceptable for
> any payment system.
>
> There's no point trying to optimize a case where:
>
> 1) You are in the minority (no phone?)
> 2) The "perfect experience" leaks private data in such a way that would be
> deemed a gross security breach by any serious payment processor.
>
> OK, some thoughts on the general proposal, from the POV of what it'd take
> for a large deployment, like for every Gmail or every Facebook user. In
> terms of ease of implementation it is ordered HTTPS/HTTP then DNS trailing
> by a large margin. Big sites, even small sites, typically have high-speed
> load balancing and demuxing already implemented for HTTP[S] and it's
> usually easy to add new endpoints. The same is *not* true of DNS, and
> whilst coding up a custom DNS server is possible it's definitely a worse
> fit.
>
> FirstBits seems out of the question for the same privacy reasons as given
> above. No banking system worth its salt would let everyone look up other
> peoples income.
>
> The simplest approach would be to request a full public key with an HTTPS
> request like
>
>    foo at domain ->
> https://domain/_bitcoin/getnewkey?user=foo&label=Payment%20from%20Bob
>
> If you then want to turn the resulting public key into an address before
> creating a transaction you can obviously do that.
>
> BTW the BIP is pretty hard to read. Your spec for the HTTPS proposal is a
> big pile of source code. I think it's the same as above, but it's hard to
> tell without more effort.
>
>
> ------------------------------------------------------------------------------
> Systems Optimization Self Assessment
> Improve efficiency and utilization of IT resources. Drive out cost and
> improve service delivery. Take 5 minutes to use this Systems Optimization
> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/2f4582b5/attachment.html>

From timon.elviejo at gmail.com  Tue Dec 13 12:32:27 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 13 Dec 2011 13:32:27 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
Message-ID: <CAGQP0AHRaaB6UC5Y-mW=K6BqrzTOj9saKJjo50ZzvTpZKntnww@mail.gmail.com>

No decentralized solution for non-fixed addresses comes to mind.
If we're going to always rely on servers, we should definitely offer
dynamic addresses.

There was a bitcoin service in the forum to which merchants send
different addresses and the service manages the payments for the
merchant without holding his private keys. The service identified each
shopping cart by a combination of the total amount and the selected
address for that cart. I don't remember the name of the service
though.
It could easily implement aliases (the same alias for various rotating
addresses). Of course, the service provider still knows your income
and you still need to provide new addresses to maintain your privacy.
I say this just in case it inspires someone.



From gavinandresen at gmail.com  Tue Dec 13 13:06:15 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 13 Dec 2011 08:06:15 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAGQP0AHRaaB6UC5Y-mW=K6BqrzTOj9saKJjo50ZzvTpZKntnww@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
	<CAGQP0AHRaaB6UC5Y-mW=K6BqrzTOj9saKJjo50ZzvTpZKntnww@mail.gmail.com>
Message-ID: <CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>

I agree with Mike Hearn and Christian Decker-- paying to
'somebody at foo.com' should become, behind the scenes, a HTTPS query to
https://foo.com/something. If you just want to (say) donate to
eff.org, then paying to '@eff.org' aught to work nicely.

And if namecoin ever takes off you'll pay to 'somebody at foo.bit'.

It seems to me that if it was DNS-based, the address should be
something like 'somebody.bitcoin.foo.com'. But I think it is unlikely
people will setup and run a custom DNS server just to support bitcoin
payments.

-- 
--
Gavin Andresen



From luke at dashjr.org  Tue Dec 13 15:43:18 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 13 Dec 2011 10:43:18 -0500
Subject: [Bitcoin-development] Version bytes "2.0"
In-Reply-To: <CANEZrP3EpkCaK2nXXazX-D-a0yO_3SkWXg74V2zh+nCM=Ko20w@mail.gmail.com>
References: <201112061610.41083.luke@dashjr.org>
	<CA+s+GJDxJesFGhE8K2DiR_nxfDebEKtDRGWxeVRC7eaZbO9fSw@mail.gmail.com>
	<CANEZrP3EpkCaK2nXXazX-D-a0yO_3SkWXg74V2zh+nCM=Ko20w@mail.gmail.com>
Message-ID: <201112131043.19906.luke@dashjr.org>

On Tuesday, December 13, 2011 6:07:17 AM Mike Hearn wrote:
> That's cool. I hope Matts change gets merged soon. Then the issue becomes
> how do people find out about this capability? Expecting people to learn how
> to hand-craft Bitcoin links won't work. 

Bitcoin-Qt 0.6 will include a QR Code generator.

> But all modern operating systems support copy/paste and drag/drop of rich
> content. 

No, not really. I've found that dragging and dropping links manages to corrupt 
them most of the time.



From zgenjix at yahoo.com  Tue Dec 13 15:46:48 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Tue, 13 Dec 2011 07:46:48 -0800 (PST)
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
	<CAGQP0AHRaaB6UC5Y-mW=K6BqrzTOj9saKJjo50ZzvTpZKntnww@mail.gmail.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
Message-ID: <1323791208.31194.YahooMailNeo@web121013.mail.ne1.yahoo.com>

Maybe I wasn't clear enough in the document, but this is the intent with the HTTPS proposal.

genjix at foo.org

Contacts https://foo.org/bitcoin-alias/?handle=genjix and the system responds with a bitcoin address. Whether the system gives you a new address from a pool of addresses, or contacts the merchant behind the scenes is implementation defined.

I'll clarify it later. This is the relevant line:

string strRequestUrl = strDomain + "/bitcoin-alias/?handle=" + pszEncodedNick;

Between HTTPS service and server service, I lean slightly towards HTTPS (automatic encrypted connection, CAs + all benefits of DNS). But still interested in arguments in favour of a server service (daemon answering queries).


----- Original Message -----
From: Gavin Andresen <gavinandresen at gmail.com>
To: Jorge Tim?n <timon.elviejo at gmail.com>
Cc: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net>
Sent: Tuesday, December 13, 2011 1:06 PM
Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases

I agree with Mike Hearn and Christian Decker-- paying to
'somebody at foo.com' should become, behind the scenes, a HTTPS query to
https://foo.com/something. If you just want to (say) donate to
eff.org, then paying to '@eff.org' aught to work nicely.

And if namecoin ever takes off you'll pay to 'somebody at foo.bit'.

It seems to me that if it was DNS-based, the address should be
something like 'somebody.bitcoin.foo.com'. But I think it is unlikely
people will setup and run a custom DNS server just to support bitcoin
payments.

-- 
--
Gavin Andresen

------------------------------------------------------------------------------
Systems Optimization Self Assessment
Improve efficiency and utilization of IT resources. Drive out cost and 
improve service delivery. Take 5 minutes to use this Systems Optimization 
Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From luke at dashjr.org  Tue Dec 13 15:47:42 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 13 Dec 2011 10:47:42 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AHRaaB6UC5Y-mW=K6BqrzTOj9saKJjo50ZzvTpZKntnww@mail.gmail.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
Message-ID: <201112131047.43569.luke@dashjr.org>

On Tuesday, December 13, 2011 8:06:15 AM Gavin Andresen wrote:
> I agree with Mike Hearn and Christian Decker-- paying to
> 'somebody at foo.com' should become, behind the scenes, a HTTPS query to
> https://foo.com/something. If you just want to (say) donate to
> eff.org, then paying to '@eff.org' aught to work nicely.

Seems like introducing a gaping security risk to me.

> It seems to me that if it was DNS-based, the address should be
> something like 'somebody.bitcoin.foo.com'. But I think it is unlikely
> people will setup and run a custom DNS server just to support bitcoin
> payments.

Could always use a fixed address and email somebody at foo.com a signed message.



From walter at stani.sh  Tue Dec 13 15:55:47 2011
From: walter at stani.sh (Walter Stanish)
Date: Tue, 13 Dec 2011 23:55:47 +0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
Message-ID: <CACwuEiNO=pSfgD415-5=HnaXdXbZ++Ps0n4cyjckLRRP-tJemA@mail.gmail.com>

Interesting thread.

Given the following paragraph and the limited feedback garnered upon
its announcement to this list last month, I couldn't help but chime in
again to mention IIBAN, an Internet Standards Draft available at
http://tools.ietf.org/html/draft-iiban-00 (A related proposal for
internet connected financial market identification, IMIC, is also
available: http://tools.ietf.org/html/draft-imic-00) which - fair
declaration of bias - I authored on behalf of my employer, Payward
Inc., while working on Bitcoin-related development.

> I think the scope of this BIP is not so well defined right now. We need a
> way for merchants to translate a human readable, and more importantly
> human-writeable, address into a bitcoin address.

I believe that IIBAN solves this problem fairly elegantly:

(1) Mature transposition error detection (think "Oops, that's a zero
not an 'oh'! I wrote it wrong!"). This functions via checksum digits
using a known algorithm, leveraging decades of experience in
conventional financial institutions. The same functionality provides
for simple suggested error correction on common transposition errors
(0->O, 1->I, etc.).

(2) Fixed length.

(3) Far shorter than both bitcoin addresses and many national bank
account numbers at 13 characters (less than half of the size of a
bitcoin address).

(4) Fewer characters (no lowercase), resulting in less transposition
issues and greater legibility.

(5) Superset-compatible with existing financial networks utilizing the
IBAN standard (mandated in Europe, increasingly popular elsewhere),
resulting in greater ease of uptake.

(5) Centralized, delegatable namespace allocation but with clear rules
governing allocation that aim to minimize potential room for any
potential abuse of power.

(6) Settlement system neutral - ie: not bitcoin-centric. By leaving
Bitcoin to be Bitcoin, Bitcoin developers can focus on core concerns
rather than becoming embroiled in formatting and user experience
concerns. Also, a single address could be paid via multiple channels
(conventional financial systems, bitcoin, LETS systems, etc.)
resulting in greater ease of uptake and higher user confidence over
time since published banking information is no longer held hostage to
the assumed longevity, liquidity, legality or other liabilities of an
individual settlement system (such as Bitcoin).

(7) Provides defined private address spaces for internal transfers
(eg: within an organization's own systems, for financial simulations,
MMORPGs, etc.) and a documentation/public works of fiction address
space to address common usage concerns in similar network addressing
schemes.

(8) Heterogeneous management of different parts of the address space.

Whilst the proposed IANA (Internet Assigned Numbers Authority)
management of IIBAN's initial institution namespace is indeed
centralized and will no doubt raise eyebrows from within parts of the
community for that reason alone, the IIBAN draft is liberal in its
assignment policy, which can be viewed within the draft document
linked to above, and whose terms are binding for IANA.  It's also
worth noting that four of the most similar global systems deployed
today, SWIFT's BIC and IBAN, the ITU's E.164 international telephone
numbering scheme and IANA's IP address space management are
implemented as similar centralized-but-delegated style schemes.

Furthermore, due to the flat nature of the registry, a
http://convergence.io/ style 'trust agility' model (ie: multiple
'centralized' parties share their network view, and user-prioritized
source consensus/acceptance/approval determine end-user perspective)
is wholly compatible.

In closing, a quick mention that a new version of the IIBAN draft will
be released very shortly including a draft IIBAN institutions registry
that will be established in order to facilitate implementation and
testing. Drop me an email if you'd like a portion of the address space
and your early assignment will appear within that draft.

Regards,
Walter Stanish
Payward, Inc.



From timon.elviejo at gmail.com  Tue Dec 13 16:15:57 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 13 Dec 2011 17:15:57 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CACwuEiNO=pSfgD415-5=HnaXdXbZ++Ps0n4cyjckLRRP-tJemA@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
	<CACwuEiNO=pSfgD415-5=HnaXdXbZ++Ps0n4cyjckLRRP-tJemA@mail.gmail.com>
Message-ID: <CAGQP0AEcmy50QF-Q7qu=7ZjceJrH0NP0ArymjBwc92-ny_VFzA@mail.gmail.com>

> (6) Settlement system neutral - ie: not bitcoin-centric.
...
> Also, a single address could be paid via multiple channels
> (conventional financial systems, bitcoin, LETS systems, etc.)
> resulting in greater ease of uptake and higher user confidence over
> time since published banking information is no longer held hostage to
> the assumed longevity, liquidity, legality or other liabilities of an
> individual settlement system (such as Bitcoin).

I like this part.



From andyparkins at gmail.com  Tue Dec 13 16:22:00 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 13 Dec 2011 16:22:00 +0000
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323791208.31194.YahooMailNeo@web121013.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
	<1323791208.31194.YahooMailNeo@web121013.mail.ne1.yahoo.com>
Message-ID: <201112131622.08158.andyparkins@gmail.com>

On 2011 December 13 Tuesday, Amir Taaki wrote:

> Maybe I wasn't clear enough in the document, but this is the intent with
> the HTTPS proposal.

I don't like the idea of a hard-coded mapping at all.  We shouldn't be making 
choices on behalf of server operators.  It's up to them how they arrange their 
domain names and paths.

I also agree that DNS is not the technology to use.  DNS is a nightmare.

> genjix at foo.org
> 
> Contacts https://foo.org/bitcoin-alias/?handle=genjix and the system
> responds with a bitcoin address. Whether the system gives you a new
> address from a pool of addresses, or contacts the merchant behind the
> scenes is implementation defined.
> 
> I'll clarify it later. This is the relevant line:
> 
> string strRequestUrl = strDomain + "/bitcoin-alias/?handle=" +
> pszEncodedNick;
> 
> Between HTTPS service and server service, I lean slightly towards HTTPS
> (automatic encrypted connection, CAs + all benefits of DNS). But still
> interested in arguments in favour of a server service (daemon answering
> queries).

Why bother with an encoding scheme at all?  If the address

  genjix at foo.org

always maps to

  https://foo.org/bitcoin-alias/?handle=genjix

Then forget the hardcoding of "https" the hardcoding of "bitcoin-alias" and 
"?handle=" and the original email-looking "genjix at foo.org".  Just use the URL.  
Then the author of the service can use whatever they want.

 "Can I pay you 10 BTC?"
 "Sure, send it to 'https://bitcoinalias.foo.org/genjix/'"

While I might implement my alias server like this:

 "Sure, send it to 'https://google.com/bitcoin/?andyparkins'"
 "Sure, send it to 'https://parkins.co.uk/"

... or any other URL they want -- any of which suit might suit me and my 
webserver better than whatever mapping would otherwise be hard-coded.  The 
world is already very familiar with URLs so this is no more scary than the 
email address.  What's more, the email address form looks _too much_ like an 
email address, and will only lead to confusion ... "send it to genjix at foo.org"  
"so I use outlook express for that, right?"  "erm, no, you put it in your 
bitcoin client".

The URL form could easily be made to detect a browser connecting rather than a 
bitcoin client (and this is an area that would benefit from a standards 
document -- define the headers and user agent triggers that an alias server 
expects) and give them better instructions.

https can be specified as the default, so  "https://" can be optional when 
they're typing.  If, in the future, bitcoin gets a distributed peer-to-peer 
alias system, then a new URL type can be added easily "bcalias://andyparkins" 
might automatically find my node in the network and query it for an address 
(or whatever).

All of the above is exactly why OpenID chose to use URLs for ID.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111213/bac47699/attachment.sig>

From gavinandresen at gmail.com  Tue Dec 13 16:48:31 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 13 Dec 2011 11:48:31 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CACwuEiNO=pSfgD415-5=HnaXdXbZ++Ps0n4cyjckLRRP-tJemA@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
	<CACwuEiNO=pSfgD415-5=HnaXdXbZ++Ps0n4cyjckLRRP-tJemA@mail.gmail.com>
Message-ID: <CABsx9T3g=27QwQaoBKKJ2ckZhOUVMokRYNDq9yRXfGzVQOuFJg@mail.gmail.com>

RE: IIBAN numbers:

Nifty!  Thanks for the pointers, I think we should avoid reinventing
wheels whenever possible.

When composing my last response in this thread I wrote, and then erased:

"There doesn't have to be one solution: I'd like to see some
experimentation, with clients supporting different schemes for bitcoin
address aliases, and maybe supporting plugins to extend the schemes
supported (a plugin would take a string, do some
behind-the-scenes-magic, and return a bitcoin address or public key)."

Defining Bitcoin as an IIBAN "institution", with 36^6 "accounts",
seems like a forward-thinking idea, although I'm not clear on exactly
how those 2.2billion "accounts" would get allocated and mapped into
bitcoin addresses.

I imagine some central organization that maps IIBAN account numbers to
domain names... and then clients (or plugins in the clients) query
that trusted central organization and then the account holder's domain
to get a (possibly unique) public key or bitcoin address.

As long as IIBANs are not the ONLY way of aliasing bitcoin addresses
to more-human-friendly strings I think that would be a fine way to do
it.

-- 
--
Gavin Andresen



From walter at stani.sh  Wed Dec 14 02:30:04 2011
From: walter at stani.sh (Walter Stanish)
Date: Wed, 14 Dec 2011 10:30:04 +0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CABsx9T3g=27QwQaoBKKJ2ckZhOUVMokRYNDq9yRXfGzVQOuFJg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
	<CACwuEiNO=pSfgD415-5=HnaXdXbZ++Ps0n4cyjckLRRP-tJemA@mail.gmail.com>
	<CABsx9T3g=27QwQaoBKKJ2ckZhOUVMokRYNDq9yRXfGzVQOuFJg@mail.gmail.com>
Message-ID: <CACwuEiMTexatUaccpgfiqq48gr2swCfWDZCc772XCmN=G-VD-Q@mail.gmail.com>

> Nifty! ?Thanks for the pointers, I think we should avoid reinventing
> wheels whenever possible.

Hear hear!

> When composing my last response in this thread I wrote, and then erased:
>
> "There doesn't have to be one solution: I'd like to see some
> experimentation, with clients supporting different schemes for bitcoin
> address aliases, and maybe supporting plugins to extend the schemes
> supported (a plugin would take a string, do some
> behind-the-scenes-magic, and return a bitcoin address or public key)."

Sure. Alias systems are a usability focused requirement and as such
should probably not be mandated by the network itself, anyway.

> Defining Bitcoin as an IIBAN "institution", with 36^6 "accounts",
> seems like a forward-thinking idea, although I'm not clear on exactly
> how those 2.2billion "accounts" would get allocated and mapped into
> bitcoin addresses.

It seems a clarification is in order, apologies for not being clearer.

Under the IIBAN scheme, whilst Bitcoin *could* define some default
mechanism for automatically creating IIBANs that map to Bitcoin
addresses (for example, Bitcoin client authors could provide hosted
lookup), this was not the style of integration in mind while writing
the IIBAN draft.

Rather than simply defining Bitcoin as a single 'institution'
(namespace segment) within the IIBAN standard, Payward Inc. envisages
large numbers of parties (including individuals or small groups of
individuals) operating individual Bitcoin-related (or LETS, or other
alternate currency) services to register as institutions (really just
'namespace holders') within the IIBAN registry. Each such party may
then define its own mapping system between Bitcoin, LETS, or other
alternate currency financial endpoints that it 'manages' (proxies for)
and IIBAN, within its namespace.  As detailed within the IIBAN
proposal, this process could be peer to peer or centralized,
supporting one time or short-term use addresses as well as permanent
addresses.  A permanent address within IIBAN could map via the
institution managing that portion of the IIBAN address space to a
single use address on the Bitcoin network.

Institutions are important for the following reasons (from
http://tools.ietf.org/html/draft-iiban-00#section-4.3.2):

   With the advent of decentralized virtual currencies such as [BITCOIN]
   the conventional idea of a financial institution (such as a bank) may
   be seen by some as somewhat superfluous.  However, the notion remains
   useful:

    * Conventional currencies will not disappear in the conceivable
      future, so the notion of financial institutions is expected
      to endure at least as providers of currency exchange and holding
      services.

    * Systems such as [BITCOIN] have quirks that require slightly
      delayed settlement due to the nature of their decentralized,
      consensus-based approach to fiscal transfer.  Users requiring
      instant settlement MAY thus see benefit in the use of a
      centralized proxy system or organization as an instantaneous
      financial settlement provider (the 'institution').

    * IANA MAY delegate management of portions of the IIBAN name space
      through such institutions.

Furthermore from http://tools.ietf.org/html/draft-iiban-00#section-4.3.1:

   [Under IIBAN's combined issue paradigm] proxied issue is
   facilitated through IANA managed institution registration, provision
   for two types of privately issued addresses is reserved within this
   document, and registered institutions COULD provide DHT or similar
   mechanisms for the management of their delegated name space.  The
   combined issue paradigm offers adequate provision for both
   manageability and decentralization, whilst maintaining heterogeneity.

So the idea is that many institutions each provide mappings between
IIBAN and Bitcoin, in a range of ways, and we do not see the emergence
of a single mandated standard.  There is no suggestion that Bitcoin
developers should implement a hard-coded mechanism.

> I imagine some central organization that maps IIBAN account numbers to
> domain names... and then clients (or plugins in the clients) query
> that trusted central organization and then the account holder's domain
> to get a (possibly unique) public key or bitcoin address.

This style of solution - in which a central organization becomes aware
of every single IIBAN-based transaction in the network - is not
necessary or desirable.  Instead, under the IIBAN recommendation IANA
would publish the registry of IIBAN institutions for everyone to use
without the need to query any party.

In the case of a financial transfer, a client or peer instutition
seeking to send funds to an IIBAN-denominated address would use some
hitherto-underfined mechanism* for translating the appropriate entry
within that registry (corresponding to the transfer's destination
address) to some kind of internet node representing the institution's
systems.

* This mechanism may necessitate the storage of public keys within the
IIBAN institution registry and will be addressed within the next
version of the IIBAN draft.  Community input is encouraged.

In a second yet-to-be-define protocol**, various settlement-system
neutral (ie: not specific to Bitcoin, LETS, or any other system)
transaction-related metadata would then be exchanged, prior to any
actual transaction.  Such metadata could include aspects of the
transaction such as description, financial system endpoint ('account')
holder name, account exists verification, settlement path negotiation
(based upon feasibility, transaction overheads, latency, etc.), which
party is to pay overheads, information mandated by local jurisdiction
such as business tax numbers (required in some countries of Europe, I
believe, for domestic B2B settlements), etc.

** This mechanism does need to be defined, and Payward Inc. has
completed a not insubstantial amount of research in to existing
protocols and concerns within this area, which touches upon high
frequency automated banking, financial market support, and interbank
settlement policy.  An additional Internet Draft proposing one such
potential mechanism will probably be published 'soon'.

At the conclusion of this metadata exchange, the two nodes would have
either aborted the transaction, suspended it to seek human input (such
as settlement path selection based upon fee and latency metadata
garnered), or agreed upon financial settlement system specific
information to use in executing the transaction itself, likely out of
band. In the case of Bitcoin, this *might* include information such as
the blockcount after which the transaction will be considered settled
by the receiving institution, an effective 'gentleman's agreement' on
the terms of any opt-in notion of reversibility, a one time Bitcoin
address provided by the recipient institution for the sender to make a
Bitcoin transaction to, etc.

>From the perspective of a settlement system such as Bitcoin, IIBAN's
provision of settlement system neutral financial endpoint
identification provides the benefits outlined in the previous email,
as well as the possibility to publish a permanent, fixed address
without disclosing one's corresponding Bitcoin-derived income.  From
the broader perspective of effective financial system innovation, it
hopes to provide a common basis upon which many such systems can
conceivably interoperate, regardless of their underlying systemic
differences.

> As long as IIBANs are not the ONLY way of aliasing bitcoin addresses
> to more-human-friendly strings I think that would be a fine way to do
> it.

Thank you for your vote of confidence.

Regards,
Walter Stanish
Payward Inc.



From david at bitcoin.se  Wed Dec 14 19:22:12 2011
From: david at bitcoin.se (D.H.)
Date: Wed, 14 Dec 2011 20:22:12 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <201112131622.08158.andyparkins@gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
	<1323791208.31194.YahooMailNeo@web121013.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
Message-ID: <CANf5GBjVhgcV1aGe53x1LfEjpnCabj1=KXx0d8B2b=sr7K7A5Q@mail.gmail.com>

> Then forget the hardcoding of "https" the hardcoding of "bitcoin-alias" and> "?handle=" and the original email-looking "genjix at foo.org". ?Just use the URL.> Then the author of the service can use whatever they want.
I like this a lot. It's very simple to understand and would be very
easy to implement and set up.

"Sure, send it to david.bitcoin.se".

D.H.



From luke at dashjr.org  Wed Dec 14 20:07:59 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 14 Dec 2011 15:07:59 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CANf5GBjVhgcV1aGe53x1LfEjpnCabj1=KXx0d8B2b=sr7K7A5Q@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
	<CANf5GBjVhgcV1aGe53x1LfEjpnCabj1=KXx0d8B2b=sr7K7A5Q@mail.gmail.com>
Message-ID: <201112141508.01136.luke@dashjr.org>

On Wednesday, December 14, 2011 2:22:12 PM D.H. wrote:
> > Then forget the hardcoding of "https" the hardcoding of "bitcoin-alias"
> > and> "?handle=" and the original email-looking "genjix at foo.org".  Just
> > use the URL.> Then the author of the service can use whatever they want.
> 
> I like this a lot. It's very simple to understand and would be very
> easy to implement and set up.
> 
> "Sure, send it to david.bitcoin.se".

That's not a valid URI.



From david at bitcoin.se  Wed Dec 14 20:17:42 2011
From: david at bitcoin.se (D.H.)
Date: Wed, 14 Dec 2011 21:17:42 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <201112141508.01136.luke@dashjr.org>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
	<CANf5GBjVhgcV1aGe53x1LfEjpnCabj1=KXx0d8B2b=sr7K7A5Q@mail.gmail.com>
	<201112141508.01136.luke@dashjr.org>
Message-ID: <CANf5GBhfP3y4sNrkCffL4uCuPo6h6nhM5mjKp4HVkvjs=mh2vw@mail.gmail.com>

>> "Sure, send it to david.bitcoin.se".>> That's not a valid URI.
I'm not sure I get your point. If someone tells you "hey, check out
the web page at xkcd.com", is that your response or do you just open
up your web browser and type "xkcd.com"?

D.H.



From joel.kaartinen at gmail.com  Wed Dec 14 20:21:20 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Wed, 14 Dec 2011 22:21:20 +0200
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <201112141508.01136.luke@dashjr.org>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
	<CANf5GBjVhgcV1aGe53x1LfEjpnCabj1=KXx0d8B2b=sr7K7A5Q@mail.gmail.com>
	<201112141508.01136.luke@dashjr.org>
Message-ID: <1323894080.30850.7.camel@mei>

On Wed, 2011-12-14 at 15:07 -0500, Luke-Jr wrote:
> > "Sure, send it to david.bitcoin.se".
> 
> That's not a valid URI.

I realize I'm responding to an useless nitpick with another useless
nitpick but here goes.

It doesn't have to be a valid URI. As long as the recipient (or the
software he's using) can make it into a valid URI. My web-browser
definitely would open http://david.bitcoin.se/ from that. For bitcoin
clients, https:// should be the guess it tries.

- Joel




From timon.elviejo at gmail.com  Wed Dec 14 22:51:48 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Wed, 14 Dec 2011 23:51:48 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323894080.30850.7.camel@mei>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
	<CANf5GBjVhgcV1aGe53x1LfEjpnCabj1=KXx0d8B2b=sr7K7A5Q@mail.gmail.com>
	<201112141508.01136.luke@dashjr.org> <1323894080.30850.7.camel@mei>
Message-ID: <CAGQP0AE7Pd5HLmTizJVzdBLXx+mR2NwJPM6eMfUf8i=4DFL76g@mail.gmail.com>

What if we specify "bitcoin" to make it easier for software (maybe the
browser, a plugin for the browser, the bitcoin client analyzing the
clipboard...) to easily detect that you expect a bitcoin address when
going to url?
If puted in the bitcoin client, the "bitcoin://" is optional (? and
can also be replaced by http ?) since from the context you already
expect an address or an url that will give you the address.

In the browser:

bitcoin://address
bitcoin://rest_of_url

In the bitcoin client:

address
rest_of_url
bitcoin://address
bitcoin://rest_of_url
http://rest_of_url  ??

Maybe in the bitcoin client you can put any site and the client
downloads the web to look for occurrences of "bitcoin://" (? or just
valid addresses ?) in it. It caches and shows them to you to decide
what to do with each one.
I have used other programs (jdownloader) that read the clipboard
looking for patterns in links and is very convenient.

Maybe then parameters for the client can be added to this.

bitcoin://address?amount=10.53
bitcoin://rest_of_url?amount=10.53&green_address=r
bitcoin://rest_of_url?amount=10.53&green_address=r&green_address_list=address1,address2,address3

Whatever the community have planned for bitcoin URIs.



From rick at support-intelligence.com  Wed Dec 14 23:02:25 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 14 Dec 2011 15:02:25 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAGQP0AE7Pd5HLmTizJVzdBLXx+mR2NwJPM6eMfUf8i=4DFL76g@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
	<CANf5GBjVhgcV1aGe53x1LfEjpnCabj1=KXx0d8B2b=sr7K7A5Q@mail.gmail.com>
	<201112141508.01136.luke@dashjr.org> <1323894080.30850.7.camel@mei>
	<CAGQP0AE7Pd5HLmTizJVzdBLXx+mR2NwJPM6eMfUf8i=4DFL76g@mail.gmail.com>
Message-ID: <CAJ1JLttapMPTp0KE=V6Y5DFonvp5-dYK7KS6MoqUL8O1kt1stg@mail.gmail.com>

I was looking at the wiki entry for this and noticed that your
description of DNSSEC is incorrect. It is an internet standard and is
widely deployed in the root (.), many TLDs, ccTLDs and second leverl
domains.

Also understand when the IETF or ICANN adopts new (we worked on DNSSEC
no less than 10 years) standard the horizon is at least 20 years.
Nothing and I really mean nothing is adopted in mass over shorter time
scales.

I also am largely in favor of using secured zones to publish TXT
records to digital currencies. I've been thinking mainly about TXT
using the following format for bitcoin.

_btc.<lhs>.<rhs>

you can look up the following record _btc.rick.wesson.us (from
rick at wesson.us) which yealds

; <<>> DiG 9.6-ESV-R4-P3 <<>> _btc.rick.wesson.us txt
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 45136
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;_btc.rick.wesson.us.           IN      TXT

;; ANSWER SECTION:
_btc.rick.wesson.us.    299     IN      TXT     "BTC=1\;
1GCVXLfF1TcpnnDLJRHk845NZhuJWQTnUD"

;; Query time: 147 msec


while this isn't a secured zone, any leverage of DNSSEC would require
the application to have direct hooks into the stub-resolver, rather
than just leveraging the OS's implementation.

just some food for thought...

-rick



2011/12/14 Jorge Tim?n <timon.elviejo at gmail.com>:
> What if we specify "bitcoin" to make it easier for software (maybe the
> browser, a plugin for the browser, the bitcoin client analyzing the
> clipboard...) to easily detect that you expect a bitcoin address when
> going to url?
> If puted in the bitcoin client, the "bitcoin://" is optional (? and
> can also be replaced by http ?) since from the context you already
> expect an address or an url that will give you the address.
>
> In the browser:
>
> bitcoin://address
> bitcoin://rest_of_url
>
> In the bitcoin client:
>
> address
> rest_of_url
> bitcoin://address
> bitcoin://rest_of_url
> http://rest_of_url ???
>
> Maybe in the bitcoin client you can put any site and the client
> downloads the web to look for occurrences of "bitcoin://" (? or just
> valid addresses ?) in it. It caches and shows them to you to decide
> what to do with each one.
> I have used other programs (jdownloader) that read the clipboard
> looking for patterns in links and is very convenient.
>
> Maybe then parameters for the client can be added to this.
>
> bitcoin://address?amount=10.53
> bitcoin://rest_of_url?amount=10.53&green_address=r
> bitcoin://rest_of_url?amount=10.53&green_address=r&green_address_list=address1,address2,address3
>
> Whatever the community have planned for bitcoin URIs.
>
> ------------------------------------------------------------------------------
> Cloud Computing - Latest Buzzword or a Glimpse of the Future?
> This paper surveys cloud computing today: What are the benefits?
> Why are businesses embracing it? What are its payoffs and pitfalls?
> http://www.accelacomm.com/jaw/sdnl/114/51425149/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From luke at dashjr.org  Wed Dec 14 23:27:34 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 14 Dec 2011 18:27:34 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAJ1JLttapMPTp0KE=V6Y5DFonvp5-dYK7KS6MoqUL8O1kt1stg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AE7Pd5HLmTizJVzdBLXx+mR2NwJPM6eMfUf8i=4DFL76g@mail.gmail.com>
	<CAJ1JLttapMPTp0KE=V6Y5DFonvp5-dYK7KS6MoqUL8O1kt1stg@mail.gmail.com>
Message-ID: <201112141827.36100.luke@dashjr.org>

On Wednesday, December 14, 2011 6:02:25 PM Rick Wesson wrote:
> I also am largely in favor of using secured zones to publish TXT
> records to digital currencies. I've been thinking mainly about TXT
> using the following format for bitcoin.
> 
> _btc.<lhs>.<rhs>

Don't confuse BTC (Bitcoin unit) with BC (Bitcoin in general / protocol)...
The hard part of using DNS will be sticking to the standard good practice of 
using a new address for every transaction.



From rick at support-intelligence.com  Thu Dec 15 01:22:30 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 14 Dec 2011 17:22:30 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <201112141827.36100.luke@dashjr.org>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AE7Pd5HLmTizJVzdBLXx+mR2NwJPM6eMfUf8i=4DFL76g@mail.gmail.com>
	<CAJ1JLttapMPTp0KE=V6Y5DFonvp5-dYK7KS6MoqUL8O1kt1stg@mail.gmail.com>
	<201112141827.36100.luke@dashjr.org>
Message-ID: <CAJ1JLtuxTmbBZsZQjKZU6zdDKx96JKTbdzuoQ=+S2h81qA9mhQ@mail.gmail.com>

understand that not *everyone* wants or will adhere to that best
practice and in my NSHO it isn't.

-rick

2011/12/14 Luke-Jr <luke at dashjr.org>:
> On Wednesday, December 14, 2011 6:02:25 PM Rick Wesson wrote:
>> I also am largely in favor of using secured zones to publish TXT
>> records to digital currencies. I've been thinking mainly about TXT
>> using the following format for bitcoin.
>>
>> _btc.<lhs>.<rhs>
>
> Don't confuse BTC (Bitcoin unit) with BC (Bitcoin in general / protocol)...
> The hard part of using DNS will be sticking to the standard good practice of
> using a new address for every transaction.



From zellfaze at yahoo.com  Thu Dec 15 03:57:09 2011
From: zellfaze at yahoo.com (Zell Faze)
Date: Wed, 14 Dec 2011 19:57:09 -0800 (PST)
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAJ1JLtuxTmbBZsZQjKZU6zdDKx96JKTbdzuoQ=+S2h81qA9mhQ@mail.gmail.com>
Message-ID: <1323921429.68086.YahooMailClassic@web120901.mail.ne1.yahoo.com>

Could we combine this proposal and the HTTPS proposal?

The DNSSEC TXT record could give instructions on how to query an HTTPS server to get the address.  Then we get the dynamism of HTTPS without having a rigid URL scheme for querying the server along with the advantages of DNSSEC.


--- On Wed, 12/14/11, Rick Wesson <rick at support-intelligence.com> wrote:

> From: Rick Wesson <rick at support-intelligence.com>
> Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases
> To: "Luke-Jr" <luke at dashjr.org>
> Cc: bitcoin-development at lists.sourceforge.net
> Date: Wednesday, December 14, 2011, 8:22 PM
> understand that not *everyone* wants
> or will adhere to that best
> practice and in my NSHO it isn't.
> 
> -rick
> 
> 2011/12/14 Luke-Jr <luke at dashjr.org>:
> > On Wednesday, December 14, 2011 6:02:25 PM Rick Wesson
> wrote:
> >> I also am largely in favor of using secured zones
> to publish TXT
> >> records to digital currencies. I've been thinking
> mainly about TXT
> >> using the following format for bitcoin.
> >>
> >> _btc.<lhs>.<rhs>
> >
> > Don't confuse BTC (Bitcoin unit) with BC (Bitcoin in
> general / protocol)...
> > The hard part of using DNS will be sticking to the
> standard good practice of
> > using a new address for every transaction.
> 
> ------------------------------------------------------------------------------
> 10 Tips for Better Server Consolidation
> Server virtualization is being driven by many needs.?
> 
> But none more important than the need to reduce IT
> complexity 
> while improving strategic productivity.? Learn More! 
> http://www.accelacomm.com/jaw/sdnl/114/51507609/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From k at old.school.nz  Thu Dec 15 04:56:52 2011
From: k at old.school.nz (Kyle Henderson)
Date: Thu, 15 Dec 2011 17:56:52 +1300
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323921429.68086.YahooMailClassic@web120901.mail.ne1.yahoo.com>
References: <CAJ1JLtuxTmbBZsZQjKZU6zdDKx96JKTbdzuoQ=+S2h81qA9mhQ@mail.gmail.com>
	<1323921429.68086.YahooMailClassic@web120901.mail.ne1.yahoo.com>
Message-ID: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>

Just so we're clear, what is the need for HTTP at all?

A query for a string and an answer can all be handled via DNS.

On Thu, Dec 15, 2011 at 4:57 PM, Zell Faze <zellfaze at yahoo.com> wrote:

> Could we combine this proposal and the HTTPS proposal?
>
> The DNSSEC TXT record could give instructions on how to query an HTTPS
> server to get the address.  Then we get the dynamism of HTTPS without
> having a rigid URL scheme for querying the server along with the advantages
> of DNSSEC.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/2289ae2c/attachment.html>

From zellfaze at yahoo.com  Thu Dec 15 06:04:54 2011
From: zellfaze at yahoo.com (Zell Faze)
Date: Wed, 14 Dec 2011 22:04:54 -0800 (PST)
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
Message-ID: <1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>

It is a lot easier to set up an HTTP server to dynamically respond with addresses than a DNS record. ?It is considered a good practice to use a different address for every payment.

------------------------
"It stopped being just a website a long time ago. For many of us, most of us, Wikipedia has become an indispensable part of our daily lives."
? Jimmy Wales, Founder of Wikipedia 
Help protect it now. Please make a donation today: http://www.wikimediafoundation.org/wiki/Donate


--- On Wed, 12/14/11, Kyle Henderson <k at old.school.nz> wrote:

From: Kyle Henderson <k at old.school.nz>
Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases
To: "Zell Faze" <zellfaze at yahoo.com>
Cc: "Luke-Jr" <luke at dashjr.org>, "Rick Wesson" <rick at support-intelligence.com>, bitcoin-development at lists.sourceforge.net
Date: Wednesday, December 14, 2011, 11:56 PM

Just so we're clear, what is the need for HTTP at all?

A query for a string and an answer can all be handled via DNS.

On Thu, Dec 15, 2011 at 4:57 PM, Zell Faze <zellfaze at yahoo.com> wrote:

Could we combine this proposal and the HTTPS proposal?



The DNSSEC TXT record could give instructions on how to query an HTTPS server to get the address. ?Then we get the dynamism of HTTPS without having a rigid URL scheme for querying the server along with the advantages of DNSSEC.





-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111214/5a89fb7b/attachment.html>

From walter at stani.sh  Thu Dec 15 06:41:02 2011
From: walter at stani.sh (Walter Stanish)
Date: Thu, 15 Dec 2011 14:41:02 +0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
Message-ID: <CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>

>> Just so we're clear, what is the need for HTTP at all?
>> A query for a string and an answer can all be handled via DNS.

> It is a lot easier to set up an HTTP server to dynamically respond
> with addresses than a DNS record.

Interesting that you bring up the effort factor.

The notion that every individual will want to run their own DNS or
HTTP based alias system to dispense transaction-specific bitcoin
addresses seems - on this basis - alone a little far fetched. Such a
system would provide very little added value at significant hassle to
the small subset of users who could be bothered setting up such a
scheme. Also, remember that most people in the world don't even know
what DNS is, nor do they have the capacity or motivation to set up a
program on a web server for what amounts to minor ongoing time savings
and some vanity thrills.

To my mind, it is far more likely that third party hosted services
(such as providers of hosted wallet, conventional currency holding and
exchange services) will provide aliasing resolution, and that these
alias resolution services will operate on an alias at provider mechanism
(for example, IIBAN and its 'institution' codes @ ).

In addition, during the 'pre-transaction exchange' that the alias
resolution process essentially represents, additional value could be
added by these types of service providers by providing functionality
presently excluded from Bitcoin but relevant to real world financial
systems. For example this 'pre-transaction exchange' process might
include, in addition to alias resolution, transaction metadata
exchange (transaction description, invoice/order number, taxation
information, schedules of fees and charges, pre-arranged currency
exchange rates if filling an payment for an amount quoted in another
(eg: conventional) currency, shipping terms, transaction reversal
(cancellation) terms, escrow terms, etc.)

Regards,
Walter Stanish
Payward Inc.



From jordanmack at parhelic.com  Thu Dec 15 07:45:45 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Wed, 14 Dec 2011 23:45:45 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
Message-ID: <4EE9A5A9.3000904@parhelic.com>

I believe it is also worth mentioning the possible susceptibility of a 
DOS attack on a publicly available alias system. Assuming that an alias 
lookup triggers the creation of a new Bitcoin address, the private key 
would need to be retained indefinitely. If gone unnoticed, this could 
consume considerable resources over time. Unlike system logs and such, 
this is not something that can be so easily pruned.



From timon.elviejo at gmail.com  Thu Dec 15 07:48:12 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 15 Dec 2011 08:48:12 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
Message-ID: <CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>

Andy sounded very convincing when talking in favor of URLs. What's
wrong with his proposal?

2011/12/15, Walter Stanish <walter at stani.sh>:
> To my mind, it is far more likely that third party hosted services
> (such as providers of hosted wallet, conventional currency holding and
> exchange services) will provide aliasing resolution, and that these
> alias resolution services will operate on an alias at provider mechanism
> (for example, IIBAN and its 'institution' codes @ ).

Why don't just...

bitcoin://url.without.explicitly.specifying.provider
bitcoin://alias at provider
bitcoin://IIBAN at authorizedBitcoinInstitution ??

By the way, I don't like the fact that a single authorized institution
needs to map the IIBANs to bitcoin addresses.



From timon.elviejo at gmail.com  Thu Dec 15 07:52:12 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 15 Dec 2011 08:52:12 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <4EE9A5A9.3000904@parhelic.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
	<4EE9A5A9.3000904@parhelic.com>
Message-ID: <CAGQP0AGJ4-nhSfhBXKWcDY_JdPp_RQdinLVO7NXf4JWub51oFw@mail.gmail.com>

2011/12/15, Jordan Mack <jordanmack at parhelic.com>:
> I believe it is also worth mentioning the possible susceptibility of a
> DOS attack on a publicly available alias system. Assuming that an alias
> lookup triggers the creation of a new Bitcoin address, the private key
> would need to be retained indefinitely. If gone unnoticed, this could
> consume considerable resources over time. Unlike system logs and such,
> this is not something that can be so easily pruned.

You're right. Then servers should not use a different address with
every lookup. Maybe don't change it more than once per
min/hour/whatever, maybe wait to see a payment to that address to
start giving another one...



From walter at stani.sh  Thu Dec 15 08:26:38 2011
From: walter at stani.sh (Walter Stanish)
Date: Thu, 15 Dec 2011 16:26:38 +0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
	<CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
Message-ID: <CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>

>> Why don't just...
>>
>> bitcoin://url.without.explicitly.specifying.provider
>> bitcoin://alias at provider
>> bitcoin://IIBAN at authorizedBitcoinInstitution ??

> Andy sounded very convincing when talking in favor of URLs. What's
> wrong with his proposal?

A URI identifies a resource and is in effect an alias itself.
Identifying a resource is different from interacting with it. So,
while <resource-type>://<resource-type-specific-alias> will work
sufficiently for the identification, it does not explain the
interaction.

Interaction is a requirement, since there seems to be a widely felt
need to preserve anonymity through the use of temporary addresses.
Generating a temporary address requires some actual processing to
achieve, since the issuing of the new address cannot be done without
interacting with the entity hosting the wallet (unless I'm missing
something?).

> By the way, I don't like the fact that a single authorized institution
> needs to map the IIBANs to bitcoin addresses.

This is not the case. Please read my earlier response to Gavin and the
IIBAN specification itself to clarify.  That would be a total breach
of privacy since the entity would have access to financial information
on all transactions using the IIBAN identifiers... prior to
transactions being executed.

It *is* true that under the current IIBAN proposal there would be one
entity (IANA) in charge of issuing namespace portions ('institution
codes' - probably best to rename these...), however:
 - The policy is strict and something similar to 'give one out to
anyone except existing financial instutions with the pre-existing
capacity to issue IBAN'.
 - IANA have a pretty reasonable track record
 - This suggestion, like the entire proposal, is open for discussion
and modification.  If you can think of a more efficient and fair way
of assigning namespace prefixes to random entities on the internet
that doesn't require someone *without* an established track record of
doing this for the internet community to take up IANA's place, then
I'd be happy to hear it. Whilst a bitcoin-like 'community consensus'
system is conceivably possible to deploy in its place, I don't think
it's necessary.

Regards,
Walter Stanish
Payward, Inc.



From andyparkins at gmail.com  Thu Dec 15 10:01:14 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 15 Dec 2011 10:01:14 +0000
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
	<CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
Message-ID: <201112151001.23274.andyparkins@gmail.com>

On 2011 December 15 Thursday, Walter Stanish wrote:

> > Andy sounded very convincing when talking in favor of URLs. What's
> > wrong with his proposal?
> 
> A URI identifies a resource and is in effect an alias itself.
> Identifying a resource is different from interacting with it. So,
> while <resource-type>://<resource-type-specific-alias> will work
> sufficiently for the identification, it does not explain the
> interaction.

Quite so; the BIP15 standard shouldn't be setting the format of the URI; it 
should be setting what the format of the client-server conversation is.  
Effectively, what headers will a requesting client send?  What headers should 
a server require?  What will a server respond?

> Interaction is a requirement, since there seems to be a widely felt
> need to preserve anonymity through the use of temporary addresses.

I think that's missing the point; any aliasing scheme is definitely reducing 
your anonymity, neccessarily so -- the alias has to be looked up somewhere, 
that somewhere reduces anonymity.  If anonymity is what you want, stick with 
just a bitcoin address.  The point of an aliasing server is surely to be able 
to give a single, unchanging, well known label to a transacting party, but 
still enable that party to generate a new address per transaction.

I want my webshop to be able to say "please pay 3.20 BTC to 
https://mywebshop.com/payments/orderid=27282" to enable the automatic 
connection from orderid to bitcoin address (which my payment system can then 
monitor for payment receipt).  (This is just one example).

> Generating a temporary address requires some actual processing to
> achieve, since the issuing of the new address cannot be done without
> interacting with the entity hosting the wallet (unless I'm missing
> something?).

Well yes; but then the client has no idea what address to send to unless it 
connects to that URI... interaction/address generation is done when that 
connection is made.

In short: I don't really think that this aliasing system should be concerning 
itself with preserving anonymity of the receiving party.  That is almost 
certainly already gone (I'm hardly likely to send money to someone I don't 
know unless I like gifting random cash).  The sending party loses a little 
anonymity because their IP is revealed when they connect to the aliasing 
system.  But there is very little anonymity in a supplier-client relationship 
anyway (you have to say what goods you want, and where you want them, and you 
had to interact with a website when you were ordering already).



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/74e9c385/attachment.sig>

From timon.elviejo at gmail.com  Thu Dec 15 11:08:13 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 15 Dec 2011 12:08:13 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
	<CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
	<CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
Message-ID: <CAGQP0AEep1RtaPm6chQh-fLB63tx7Eb9tGq_Obpp003PREt6zw@mail.gmail.com>

2011/12/15, Walter Stanish <walter at stani.sh>:
> Interaction is a requirement, since there seems to be a widely felt
> need to preserve anonymity through the use of temporary addresses.
> Generating a temporary address requires some actual processing to
> achieve, since the issuing of the new address cannot be done without
> interacting with the entity hosting the wallet (unless I'm missing
> something?).

I thought the interaction was just the server answering with an
address (maybe also amount and other details). But we don't have to
define how the server will get that address.
Some possibilities:

-A static address: less anonymity, but some people may not care. Say a
donation address.
-The servers stores the recipient private keys and generates a new one
for each payment.
-The server stores a set of addresses provided by the recipient and it
manages what address it gives in each request (like in the web service
I told you I can't find).

> It *is* true that under the current IIBAN proposal there would be one
> entity (IANA) in charge of issuing namespace portions ('institution
> codes' - probably best to rename these...), however:
>  ...

IANA reserves some namespace for bitcoin. All right.
The problem comes later.
"
* Systems such as [BITCOIN] have quirks that require slightly
      delayed settlement due to the nature of their decentralized,
      consensus-based approach to fiscal transfer.  Users requiring
      instant settlement MAY thus see benefit in the use of a
      centralized proxy system or organization as an instantaneous
      financial settlement provider (the 'institution').
"
As I understand it (probably I'm wrong, because I haven't read the
whole IIBAN draft) there would be a "bitcoin institution" that would
map bitcoin addresses to the bitcoin subspace of the IIBAN.

"    * IANA MAY delegate management of portions of the IIBAN name space
      through such institutions."

If we can find a deterministic method to map the subspace the all
possible bitcoin addresses, everything's fine again. But if that's not
possible, we would need a central institution to manage the mapping
and that would be a step back in decentralization.
I can't find the answer of Gavin's question "How is the mapping done?"
in your post. I'll re-read it though.



From decker.christian at gmail.com  Thu Dec 15 11:22:29 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 15 Dec 2011 12:22:29 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAGQP0AEep1RtaPm6chQh-fLB63tx7Eb9tGq_Obpp003PREt6zw@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
	<CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
	<CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
	<CAGQP0AEep1RtaPm6chQh-fLB63tx7Eb9tGq_Obpp003PREt6zw@mail.gmail.com>
Message-ID: <CALxbBHXHi=AR+AWWutbHX4XXr3vh18-Pi=V-1kvC7TKdr3ECNA@mail.gmail.com>

> But we don't have to
> define how the server will get that address.
> Some possibilities:
>
> -A static address: less anonymity, but some people may not care. Say a
> donation address.
> -The servers stores the recipient private keys and generates a new one
> for each payment.
> -The server stores a set of addresses provided by the recipient and it
> manages what address it gives in each request (like in the web service
> I told you I can't find).
>

Exactly, I think we should starting separating the minimal protocol that is
to be supported by everybody, and the rest can be summed up in a few best
practices, no need to standardize the part that to the user is transparent.
I was on the same lines as Andy, which is that in order to have require a
payment I probably have an order/transaction pending with my vendor or have
an account to be filled, so there's a 1-to-1 mapping between the details
page and the bitcoin address I have to send to.

As a further possibility we could use <meta> tags like the OpenID server
delegation mechanism. It would allow customers to open the transaction
details page, see that everything is ok, then paste the same URL into the
bitcoin client, the bitcoin client retrieves the URL, parses the meta tag
and knows what to send where. Alternatively the Bitcoin Client sends an
Accept header which tells the server to return just the address.

As for the format I'd say either a Bitcoin address or a Bitcoin URI [1]
which ought to be flexible enough as it includes amount and messages, for
the customer to be able to track transactions.

Regards,
Chris

[1] https://en.bitcoin.it/wiki/URI_Scheme
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/c44d2b60/attachment.html>

From rick at support-intelligence.com  Thu Dec 15 15:42:59 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Thu, 15 Dec 2011 07:42:59 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
Message-ID: <CAJ1JLts1KnhJbKfDv8Qu1iX6XNRS4ovgmvS2a5-CWLPR9sxDtg@mail.gmail.com>

Are we designing protocols or applications, its easier and better for all
involved if we design a protocol and then let the applications implement
it.

Lets stick to understanding how labels (dns) or URIs can be leveraged to
securly obtain a bitcoin address, rather than reviewing capabilities of
current applications.

-rick

On Wed, Dec 14, 2011 at 10:04 PM, Zell Faze <zellfaze at yahoo.com> wrote:

> It is a lot easier to set up an HTTP server to dynamically respond with
> addresses than a DNS record.  It is considered a good practice to use a
> different address for every payment.
>
> ------------------------
> "It stopped being just a website a long time ago. For many of us, most of
> us, Wikipedia has become an indispensable part of our daily lives."
> ? Jimmy Wales, *Founder of Wikipedia*
> <http://2e740a1a.qvvo.com/>
>
> Help protect it now. Please make a donation today:
> http://www.wikimediafoundation.org/wiki/Donate
>
>
> --- On *Wed, 12/14/11, Kyle Henderson <k at old.school.nz>* wrote:
>
>
> From: Kyle Henderson <k at old.school.nz>
>
> Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases
> To: "Zell Faze" <zellfaze at yahoo.com>
> Cc: "Luke-Jr" <luke at dashjr.org>, "Rick Wesson" <
> rick at support-intelligence.com>, bitcoin-development at lists.sourceforge.net
> Date: Wednesday, December 14, 2011, 11:56 PM
>
>
> Just so we're clear, what is the need for HTTP at all?
>
> A query for a string and an answer can all be handled via DNS.
>
> On Thu, Dec 15, 2011 at 4:57 PM, Zell Faze <zellfaze at yahoo.com<http://mc/compose?to=zellfaze at yahoo.com>
> > wrote:
>
> Could we combine this proposal and the HTTPS proposal?
>
> The DNSSEC TXT record could give instructions on how to query an HTTPS
> server to get the address.  Then we get the dynamism of HTTPS without
> having a rigid URL scheme for querying the server along with the advantages
> of DNSSEC.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/28f5a961/attachment.html>

From rick at support-intelligence.com  Thu Dec 15 15:44:58 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Thu, 15 Dec 2011 07:44:58 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
	<CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
Message-ID: <CAJ1JLtsdPDfTyX6zVbu0wmiKY6+rWZcnnRaCcBukvJrLg0-_3w@mail.gmail.com>

> Why don't just...
>
> bitcoin://url.without.explicitly.specifying.provider
> bitcoin://alias at provider
> bitcoin://IIBAN at authorizedBitcoinInstitution ??
>
> By the way, I don't like the fact that a single authorized institution
> needs to map the IIBANs to bitcoin addresses.

The IANA is a good institution to rely on for mapping things, much
history and wise execution there.

-rick



From gronager at ceptacle.com  Thu Dec 15 17:18:09 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 15 Dec 2011 18:18:09 +0100
Subject: [Bitcoin-development] CDataStream
Message-ID: <EC9F1E66-F4B7-4FCE-AF98-F1BAF43B39D9@ceptacle.com>

OK, I admit that this is *really* of little importance... 

But could someone with commit rights please update the CDataStream test table in the code. The arguments for the custom stream are just way off (stringstream wins by factor 10-20!). On OS X (g++) I get:

Further, if you get(got) bad stringstream numbers on e.g. windows (dikumware had some issues several years ago) you can improve just by changing the default allocation chunk size. So... speed is not a reason for reimplementing stringstream. (And perhaps this can motivate someone to revert bitcoin to stringstream ;-)

Cheers,

Michael

PS: Could be fun to see the output on other OS'es !

serialize.h (with TESTCDATASTREAM defined, i686-apple-darwin11-llvm-g++-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.1.00)):

CDataStream:
n=1000       0 seconds
n=2000       0 seconds
n=4000       0 seconds
n=8000       0 seconds
n=16000      0 seconds
n=32000      0 seconds
n=64000      1 seconds
n=128000     1 seconds
n=256000     2 seconds
n=512000     4 seconds
n=1024000    8 seconds
n=2048000    17 seconds
n=4096000    40 seconds
stringstream:
n=1000       0 seconds
n=2000       0 seconds
n=4000       0 seconds
n=8000       0 seconds
n=16000      0 seconds
n=32000      0 seconds
n=64000      0 seconds
n=128000     0 seconds
n=256000     0 seconds
n=512000     0 seconds
n=1024000    0 seconds
n=2048000    1 seconds
n=4096000    2 seconds




From theymos at mm.st  Thu Dec 15 19:59:07 2011
From: theymos at mm.st (theymos)
Date: Thu, 15 Dec 2011 13:59:07 -0600
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
Message-ID: <1323979147.27319.140661012141129@webmail.messagingengine.com>

Bitcoin already has code and a protocol for transactions to IP
addresses. Why not reuse that for dynamic address lookup? Just a few
changes are necessary to enable complete user at server.com handling:
- Extend the protocol so that "reply" messages can be signed by a fixed
  public key
- Extend "checkorder" messages so they can specify an account to
  send BTC to. Or standardize on how to put the account into the
  message field.
- Enable DNS lookups for IP transactions. The DNS-only proposals could
  also be used here to avoid having to use the IP transaction protocol
  sometimes. The public key for signing "reply" messages can be gotten
  from TXT records. This will be safe with DNSSEC and Namecoin. With
  plain DNS Bitcoin could take a SSH-like approach and ask the user to
  verify the public key the first time it is used, remembering it later.

DoS attacks are already handled by the IP transactions code: the same IP
address is always given the same bitcoin address until it pays to that
bitcoin address.



From zgenjix at yahoo.com  Thu Dec 15 23:56:02 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Thu, 15 Dec 2011 15:56:02 -0800 (PST)
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323979147.27319.140661012141129@webmail.messagingengine.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
Message-ID: <1323993362.62644.YahooMailNeo@web121002.mail.ne1.yahoo.com>

This is maybe the best idea. I added it:
https://en.bitcoin.it/wiki/BIP_0015#IP_Transactions

Things I like about this:
- IP transactions are useful, but have a security flaw. This mitigates their security problems.
- The code for IP transactions is already in Satoshi client. If other clients want to add IP transactions, then it can be done with minimal fuss/bloat.
I feel that for any protocol extension, less is more. The less code 
needed, the better the extension. Not always but generally we want to 
avoid bitcoin protocol bloat which *will* happen far in the future. The 
only way to mitigate how spaghettified the standard will be in the 
future, is by careful cautious planning now.

- We can have a proxy node running 24/7 for us, serving our public keys in lieu of us.



________________________________
 From: theymos <theymos at mm.st>
To: bitcoin-development at lists.sourceforge.net 
Sent: Thursday, December 15, 2011 7:59 PM
Subject: Re: [Bitcoin-development] [BIP 15] Aliases
 
Bitcoin already has code and a protocol for transactions to IP
addresses. Why not reuse that for dynamic address lookup? Just a few
changes are necessary to enable complete user at server.com handling:
- Extend the protocol so that "reply" messages can be signed by a fixed
? public key
- Extend "checkorder" messages so they can specify an account to
? send BTC to. Or standardize on how to put the account into the
? message field.
- Enable DNS lookups for IP transactions. The DNS-only proposals could
? also be used here to avoid having to use the IP transaction protocol
? sometimes. The public key for signing "reply" messages can be gotten
? from TXT records. This will be safe with DNSSEC and Namecoin. With
? plain DNS Bitcoin could take a SSH-like approach and ask the user to
? verify the public key the first time it is used, remembering it later.

DoS attacks are already handled by the IP transactions code: the same IP
address is always given the same bitcoin address until it pays to that
bitcoin address.

------------------------------------------------------------------------------
10 Tips for Better Server Consolidation
Server virtualization is being driven by many needs.? 
But none more important than the need to reduce IT complexity 
while improving strategic productivity.? Learn More! 
http://www.accelacomm.com/jaw/sdnl/114/51507609/
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111215/ea93e7ce/attachment.html>

From slush at centrum.cz  Fri Dec 16 00:07:58 2011
From: slush at centrum.cz (slush)
Date: Fri, 16 Dec 2011 01:07:58 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <201112131622.08158.andyparkins@gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
	<1323791208.31194.YahooMailNeo@web121013.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
Message-ID: <CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>

I really like this proposal with standard URLs. All other proposals like
DNS mapping or email aliases converted to URLs with some weird logic looks
strange to me.

Plain URLs (returning address in response body, redirecting to URI
"bitcoin:<address>" or anything else) are very clear solution, easy to
implement in clients and very easy to understand by people. It's also
extremely flexible - almost everybody can somewhere setup static file
containing his "personal" addresses or it's very easy to integrate such
solution with eshops (providing custom address for given order) etc. I'm
definitely for this solution.

Best,
slush

On Tue, Dec 13, 2011 at 5:22 PM, Andy Parkins <andyparkins at gmail.com> wrote:

> On 2011 December 13 Tuesday, Amir Taaki wrote:
>
> > Maybe I wasn't clear enough in the document, but this is the intent with
> > the HTTPS proposal.
>
> I don't like the idea of a hard-coded mapping at all.  We shouldn't be
> making
> choices on behalf of server operators.  It's up to them how they arrange
> their
> domain names and paths.
>
> I also agree that DNS is not the technology to use.  DNS is a nightmare.
>
> > genjix at foo.org
> >
> > Contacts https://foo.org/bitcoin-alias/?handle=genjix and the system
> > responds with a bitcoin address. Whether the system gives you a new
> > address from a pool of addresses, or contacts the merchant behind the
> > scenes is implementation defined.
> >
> > I'll clarify it later. This is the relevant line:
> >
> > string strRequestUrl = strDomain + "/bitcoin-alias/?handle=" +
> > pszEncodedNick;
> >
> > Between HTTPS service and server service, I lean slightly towards HTTPS
> > (automatic encrypted connection, CAs + all benefits of DNS). But still
> > interested in arguments in favour of a server service (daemon answering
> > queries).
>
> Why bother with an encoding scheme at all?  If the address
>
>  genjix at foo.org
>
> always maps to
>
>  https://foo.org/bitcoin-alias/?handle=genjix
>
> Then forget the hardcoding of "https" the hardcoding of "bitcoin-alias" and
> "?handle=" and the original email-looking "genjix at foo.org".  Just use the
> URL.
> Then the author of the service can use whatever they want.
>
>  "Can I pay you 10 BTC?"
>  "Sure, send it to 'https://bitcoinalias.foo.org/genjix/'"
>
> While I might implement my alias server like this:
>
>  "Sure, send it to 'https://google.com/bitcoin/?andyparkins'"
>  "Sure, send it to 'https://parkins.co.uk/"
>
> ... or any other URL they want -- any of which suit might suit me and my
> webserver better than whatever mapping would otherwise be hard-coded.  The
> world is already very familiar with URLs so this is no more scary than the
> email address.  What's more, the email address form looks _too much_ like
> an
> email address, and will only lead to confusion ... "send it to
> genjix at foo.org"
> "so I use outlook express for that, right?"  "erm, no, you put it in your
> bitcoin client".
>
> The URL form could easily be made to detect a browser connecting rather
> than a
> bitcoin client (and this is an area that would benefit from a standards
> document -- define the headers and user agent triggers that an alias server
> expects) and give them better instructions.
>
> https can be specified as the default, so  "https://" can be optional when
> they're typing.  If, in the future, bitcoin gets a distributed peer-to-peer
> alias system, then a new URL type can be added easily
> "bcalias://andyparkins"
> might automatically find my node in the network and query it for an address
> (or whatever).
>
> All of the above is exactly why OpenID chose to use URLs for ID.
>
>
>
> Andy
>
> --
> Dr Andy Parkins
> andyparkins at gmail.com
>
>
> ------------------------------------------------------------------------------
> Systems Optimization Self Assessment
> Improve efficiency and utilization of IT resources. Drive out cost and
> improve service delivery. Take 5 minutes to use this Systems Optimization
> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/c1446aa4/attachment.html>

From k at old.school.nz  Fri Dec 16 02:37:03 2011
From: k at old.school.nz (Kyle Henderson)
Date: Fri, 16 Dec 2011 15:37:03 +1300
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323979147.27319.140661012141129@webmail.messagingengine.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
Message-ID: <CA+QPp0qGohZO2o-a0D1kxOE==w8keX=uvO_PDcDRHbP=sTTN5w@mail.gmail.com>

This is the first proposal I've seen regarding mapping something like
user at host that actually makes sense to me.

Bitcoin itself is decentralised by design, in my opinion it seems obvious
that it needs to continue to maintain this feature.


On Fri, Dec 16, 2011 at 8:59 AM, theymos <theymos at mm.st> wrote:

> Bitcoin already has code and a protocol for transactions to IP
> addresses. Why not reuse that for dynamic address lookup? Just a few
> changes are necessary to enable complete user at server.com handling:
> - Extend the protocol so that "reply" messages can be signed by a fixed
>  public key
> - Extend "checkorder" messages so they can specify an account to
>  send BTC to. Or standardize on how to put the account into the
>  message field.
> - Enable DNS lookups for IP transactions. The DNS-only proposals could
>  also be used here to avoid having to use the IP transaction protocol
>  sometimes. The public key for signing "reply" messages can be gotten
>  from TXT records. This will be safe with DNSSEC and Namecoin. With
>  plain DNS Bitcoin could take a SSH-like approach and ask the user to
>  verify the public key the first time it is used, remembering it later.
>
> DoS attacks are already handled by the IP transactions code: the same IP
> address is always given the same bitcoin address until it pays to that
> bitcoin address.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/f86f05de/attachment.html>

From bitcoin-list at bluematt.me  Fri Dec 16 02:48:17 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 15 Dec 2011 21:48:17 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323979147.27319.140661012141129@webmail.messagingengine.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
Message-ID: <1324003697.3719.5.camel@BMThinkPad.lan.bluematt.me>

On Thu, 2011-12-15 at 13:59 -0600, theymos wrote:
> Bitcoin already has code and a protocol for transactions to IP
> addresses. Why not reuse that for dynamic address lookup? Just a few
> changes are necessary to enable complete user at server.com handling:
I'm not against this, but I think its way overcomplicated when compared
to the DNS or HTTPS methods.
> - Extend the protocol so that "reply" messages can be signed by a fixed
>   public key
> - Extend "checkorder" messages so they can specify an account to
>   send BTC to. Or standardize on how to put the account into the
>   message field.
OK, not too debatable, but considering how terrible bitcoind's account
handling is, the second might not be easy to get right...
> - Enable DNS lookups for IP transactions. The DNS-only proposals could
>   also be used here to avoid having to use the IP transaction protocol
>   sometimes. The public key for signing "reply" messages can be gotten
>   from TXT records. This will be safe with DNSSEC and Namecoin. With
>   plain DNS Bitcoin could take a SSH-like approach and ask the user to
>   verify the public key the first time it is used, remembering it later.
This is where I think this method becomes way overcomplicated.  Not only
do you have to update the IP-Transaction code, but now you have to
implement the full DNS System that is the other option as well.  Note
that to make this secure, we have to have a full DNSSEC-capable resolver
built-into bitcoind (there are libs, but it has to happen).  Yes you can
ask the user "does this fingerprint look right to you? Y/N" but that
always opens you up to a ton of users getting screwed out of coins and I
don't think it should be enabled, except in bitcoind, and since the main
target of this whole alias system is bitcoin-qt users, well...

Matt




From walter at stani.sh  Fri Dec 16 04:32:17 2011
From: walter at stani.sh (Walter Stanish)
Date: Fri, 16 Dec 2011 12:32:17 +0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CA+QPp0qGohZO2o-a0D1kxOE==w8keX=uvO_PDcDRHbP=sTTN5w@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<CA+QPp0qGohZO2o-a0D1kxOE==w8keX=uvO_PDcDRHbP=sTTN5w@mail.gmail.com>
Message-ID: <CACwuEiN1aWHW+srCPEf4dnyN=+W-QyRF6GgSd9PUjuNxZ1zLxA@mail.gmail.com>

> Bitcoin itself is decentralised by design, in my opinion it seems obvious
> that it needs to continue to maintain this feature.

What's the real issue?

 - People want to use alternate representations ('aliases') of bitcoin
addresses, for various reasons.
 - The blockchain is the only way to create distributed consensus
within the bitcoin network.
 - Very few people - even those who wish to have a permanent alias -
want to have it map to a permanent bitcoin address, since this
discloses their financial history (eg: income for a business) to the
public
 - Some people want throw-away (single use) aliases, others want
permanent ones.  This means many addresses.
 - Blockchain bloat is already acknowledged as an issue.
 - The blockchain is not really a good option.

Leaving out the blockchain, there are still ways to implement aliasing.

What is the core problem for an extra-blockchain aliasing system?

At the core is usability - people basically want aliases to make it
easier to type in or remember addresses.  So a solution that
sacrifices usability too far is a broken one.

Another requirement is absolute security.  A user of the aliasing
system is going to trust it to translate a particular alias to a
bitcoin address - ie: 'where my money goes with absolutely zero chance
(by default)  of getting it back if it's sent somewhere wrong by
accident'.  Such an accident might be mistyping an alias.  It might
also be a hijacking of the alias resolution system (eg: a DNS based
system without DNSSEC, etc.).  As a case in point, we already see very
well organized attacks by domain squatters in order to steal traffic
or effect phishing under the DNS system.

So... to help see which qualities are meaningful for such an alias
system, let's look at what types of solutions to these problems exist
within conventional (ie: mature) financial systems.

First, arbitrary aliases are not in use.  This means that memory-based
mnemonics are not subject to predictable squatting-style attacks.  For
our purposes, this means that if you are payments at business1.com, I
can't go and register payments at busines1.com and take a portion of your
inbound cash whenever a client tries to pay you and typos on the send
address.  Likewise, if you're 'someuser at hostedwalletservice.com' I
can't go and register as 'someuse at hostedwalletservice.com' and pull
the same heist. IIBAN is the only aliasing proposal I have seen
mentioned within this thread that adopts this strategy, the others all
maintain this vulnerability through DNS. HTTP relies on DNS.

Second, checksum systems detect transposition errors. This is a very
powerful feature, which (I can't be bothered googling for stats, but
just think about it) cuts out the vast majority of such errors
instantly, at the time of input, before money changes hands or
anything touches the financial settlement networks.  IIBAN adopts
exactly the same mature and proven MOD97-based two digit checksum
feature that is used within the IBAN standard, proposed by the
European Union with the benefit of decades of banking experience in
many member states and now growing rapidly in use around the world.
(For something as expensive and painful to implement as a
nationally-mandated banking standard affecting all member banks, a
growth rate of 'a few countries per year' is a pretty serious growth
curve!)  With checksums, it's even possible to auto-suggest
corrections based upon common transposition errors and help the user
to check those parts of the alias for common errors more quickly.

Third, conventional financial systems typically require recipient name
(and sometimes address, or business tax numbers in some countries'
domestic schemes) as part of the transaction.  This secondary data
facilitates error checking since an incorrectly supplied destination
address can be checked against these properties.  Of course, Bitcoin
presently has no such secondary input with which to verify the
destination of a transfer, and since blockchain bloat is an
acknowledged issue and very few bitcoin users would like to see their
names appear against their transactions within the blockchain (visible
to all, for eternity!) it also seems that this feature is not going to
be added and for good reason.  However, within an external (and not
necessarily bitcoin specific) higher-level 'transaction negotation'
protocol (alluded to in earlier posts as a logical extension of the
pre transaction alias resolution mechanism, and being a pre
transaction connection of some nature between a payer and payee, or
their proxying/representing institution, in the case of hosted
wallets/aliases), such external destination validation features could
be added. (Many types are possible... data-based as per name/address
validation, cryptographic validation schemes, etc.)

Finally, an increasing number of countries use an aliasing scheme
(IBAN) that is familiar to users.  Doing so for digital currencies
such as Bitcoin increases usability (by eliminating novelty, and in
the case of IIBAN which is not specific to any given currency, the
need to register, recall and manage yet another account identifier),
which was one of the original goals. None of the other proposals
mentioned have this property.

I won't go in to other benefits previously mentioned of the IIBAN
proposal, but I still cannot see any reason to either:
 - Include aliasing within bitcoind itself
 - Re-invent the wheel
 - Scare off non-technical users
 - Dodge the fact that there are unique properties of bitcoin that
will always remain and should perhaps simply be acknowledged and
worked around OUTSIDE of the codebase, rather than within.
Unix/internet philosophy is that it's usually best to keep code as
simple as possible, to 'do one thing' and 'do it well'. For bitcoind
(despite sharing a codebase with the GUI), that something is achieving
a distributed internet-based financial system that is free from legacy
centralized currencies. It is *not* worrying about making it look
pretty or easy to use, which can be achieved by layering totally
external systems through simply translating various alternate
representations ('aliases') to the well defined bitcoin addressing
scheme.

Just to avoid any notion of table-banging (Hah! A lost cause?), this
will be the last IIBAN-related post I will make on this thread, but
there will be some further announcements in the near future.

Keep up the good work everyone.

Regards,
Walter Stanish
Payward Inc.



From walter at stani.sh  Fri Dec 16 05:42:01 2011
From: walter at stani.sh (Walter Stanish)
Date: Fri, 16 Dec 2011 13:42:01 +0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAGQP0AEep1RtaPm6chQh-fLB63tx7Eb9tGq_Obpp003PREt6zw@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
	<CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
	<CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
	<CAGQP0AEep1RtaPm6chQh-fLB63tx7Eb9tGq_Obpp003PREt6zw@mail.gmail.com>
Message-ID: <CACwuEiM7aDE50yVvKXWikpxXE=ZF1MwsoYo-i4N9KKyFroF2-A@mail.gmail.com>

>> Interaction is a requirement, since there seems to be a widely felt
>> need to preserve anonymity through the use of temporary addresses.
>> Generating a temporary address requires some actual processing to
>> achieve, since the issuing of the new address cannot be done without
>> interacting with the entity hosting the wallet (unless I'm missing
>> something?).
>
> I thought the interaction was just the server answering with an
> address (maybe also amount and other details). But we don't have to
> define how the server will get that address.
> Some possibilities:
>
> -A static address: less anonymity, but some people may not care. Say a
> donation address.

Sure, but this falls short of requirements for most users.

> -The servers stores the recipient private keys and generates a new one
> for each payment.

Equivalent to hosted wallet, which is decentralization in a BIG way,
but apparently a very popular choice (for pragmatic reasons).
Probably not going away.

> -The server stores a set of addresses provided by the recipient and it
> manages what address it gives in each request (like in the web service
> I told you I can't find).

True.  However, probably a poor user experience for most users re:
provision of temporary addresses to the alias host.  Also the
knowledge of which entity for which inbound payment has been allocated
which temporary address would be a significant complexity in the alias
host / end user relationship that you gloss over.  This is important
for businesses, since inbound payments are only really possible to
track - AFAIK (correct me if I'm wrong, the two exceptions being the
edge case of people requesting inbound transactions where every single
transaction is of a unique amount and no 'partial payment' (2x
transactions for one inbound payment) and the case where every single
inbound payer's sending address is previously known) - by issuing
unique recipient addresses to each client.  In short, it's kind of
similar to hosted wallet as well, since you need to absolutely trust
your host (they could tell people wishing to make payments to you to
pay someone else instead!).

> IANA reserves some namespace for bitcoin. All right.
> The problem comes later.
> "
> * Systems such as [BITCOIN] have quirks that require slightly
>      delayed settlement due to the nature of their decentralized,
>      consensus-based approach to fiscal transfer.  Users requiring
>      instant settlement MAY thus see benefit in the use of a
>      centralized proxy system or organization as an instantaneous
>      financial settlement provider (the 'institution').
> "
> As I understand it (probably I'm wrong, because I haven't read the
> whole IIBAN draft) there would be a "bitcoin institution" that would
> map bitcoin addresses to the bitcoin subspace of the IIBAN.

Many people can get namespace management rights as
'institutions' (in the current draft's terminology), then manage
the assignement of IIBANs within that space as they wish.
There would be many institutions with many IIBANs.  The
association of a bitcoin address (or many addresses, or
the capacity to generate temporary addresses as required)
with an IIBAN would be the responsibility of either that
namespace manager ('institution') or the individual who
has acquired that IIBAN via that namespace manager
('insitution').

> "    * IANA MAY delegate management of portions of the IIBAN name space
>      through such institutions."
>
> If we can find a deterministic method to map the subspace the all
> possible bitcoin addresses, everything's fine again. But if that's not
> possible, we would need a central institution to manage the mapping
> and that would be a step back in decentralization.

Many institutions, many policies, no absolute centralization, though
admittedly increased centralization. However, this is a problem shared
with two of your proposals (the subset not disqualified as failing to
meet most user's requirements) when you consider that most users (if
you consider 'the whole world's mobile devices' a potential userbase,
as I prefer to do) do not have the technical skills to configure,
secure and manage their own 'always on' alias service hosts, nor the
capacity to host blockchain copies on those devices (either due to
space or bandwidth requirements. As an aside, this is a large part of
the unfortunate reality that is tending to push Bitcoin towards hosted
wallet solutions)

> I can't find the answer of Gavin's question "How is the mapping done?"
> in your post. I'll re-read it though.

Near the top, beginning "It seems a clarification is in order,
apologies for not being clearer."  (Re-reading, it's still not that
clear!)

Regards,
Walter Stanish
Payward, Inc.



From pieter.wuille at gmail.com  Fri Dec 16 08:35:38 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 16 Dec 2011 09:35:38 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
Message-ID: <20111216083536.GA20470@ulyssis.org>

On Mon, Dec 12, 2011 at 02:21:09PM -0800, Amir Taaki wrote:
> I wrote this pre-draft:
> 
> 
> https://en.bitcoin.it/wiki/BIP_0015
> 
> It's merely a starter for discussions.

Interesting discussion so far, with many nice ideas.

I'll try to give my opinion and comment on some in batch here.

First of all, I'm a big proponent of moving away from using base58 strings
as addresses. They are not flexible and not human-friendly. I did an own
proposal to improve the situation some time ago, see

  https://gist.github.com/1237788

There was little reaction, and maybe the reason is we shouldn't try to solve/fix
everything at once.

a) IP transactions-like system with DNS resolution

Not only does this give you nice identifiers, but it also moves the
responsibility of getting the transaction accepted by the network from the
sender to the receiver - the one who actually cares about getting his
money.

The authentication problem that was present in the original IP transactions
system can either be mitigated by trusting the existing SSL public-key
intrastructure (which not everyone may like) or (as Satoshi suggested) adding
bitcoin address-based authentication on top (separate from the address used in
the transaction itself). So you get an identifier like <url>$<btcaddress>, and
the communication to <url> would be authenticated using <btcaddress>. This
is obviously not useful as human-typable alias, but is no problem for
clickable URLs on websites that want to provide the additional security.

I'm not sure about using the bitcoin p2p protocol here - i think there are
easier (or at least more widely deployed) protocols like HTTP. So maybe ...

b) HTTPS Web Service

we can just use an HTTPS web service, that provides the bitcoin address to
be used in the transaction to a client that queries a URL. This immediately
makes the identifier double as a clickable URL, and a merchant could add
metadata to the URL to make the transaction easily trackable.

As for the possibility for spoofing: relying on DNSSEC is currently
difficult i believe (though i'm not entirely up-to-date about its
deployment). Again, alternatives are the SSL PKI, or bitcoin address-based
authentication (basically doing SSL but using bitcoin pubkeys to
authenticate)

c) user at hostname-like identifiers

These look very good, and conveniently match the e-mail system's identifiers.
However, I believe they are only useful for one purpose: user-to-user
payments. For anything somewhat more business-y you probably want to use
a clickable URL, and hide all address information entirely from the user.
Still, for user-to-user payments they are nice.

I'm not convinced about the hardcoding of the "https://" and
"/bitcoin-alias/?handle=" parts, though. These seem very arbitrarily
chosen to me, but if you consider an HTTPS-based variant of a bitcoin
ip-transactions-like system, the proposed "account" parameter to
checkorder would probably become a CGI parameter anyway...

d) DNS TXT lookups

I'm not entirely against this, but only allowing a fixed bitcoin address
to be returned would far too strongly encourage the use of fixed
addresses in transactions. If anything, it should be an identifier
for one of the other proposals (which do allow interaction, or at least
creation of a fresh bitcoin address) that is returned. 



To conclude: my suggestion would be to use URLs as address identifiers,
optionally suffixed with a bitcoin address for authentication.
This means my "address" would be either "sipa.be/pw.btc" or
"sipa.be/pw.btc$14TYdpodQQDKVgvUUcpaMzjJwhQ4KYsipa" (where "https://")
is an implicit default. Initiating a payment to either of these would
result in a GET of https://sipa.be/pw.btc. When a transaction is
constructed, it is POSTed back to that URL.

If we can agree on reasonable hardcoded mapping, pw at sipa.be could just
be a shorthand for either of these (though vulnerable to proofing...).

-- 
Pieter




From pieter.wuille at gmail.com  Fri Dec 16 08:46:33 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 16 Dec 2011 09:46:33 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
References: <CA+QPp0rAJz9wPcrf926q=_c45mCL_67JCyacvM79CWcic9AL2w@mail.gmail.com>
	<1323929094.37881.YahooMailClassic@web120902.mail.ne1.yahoo.com>
	<CACwuEiPbLdpgYCcTHH_GCHcwGcGj5HnOMFKkQf860D4Xn0mLsQ@mail.gmail.com>
	<CAGQP0AFD9q+=vZPod_n_LJjCjzVnVy5w3hq4N07JZRM6=Ly-FQ@mail.gmail.com>
	<CACwuEiMu1iMnrv2zubqUugSwxu_jWmNxJtPuhdNoqJPgRHhKhg@mail.gmail.com>
Message-ID: <20111216084631.GB20470@ulyssis.org>

On Thu, Dec 15, 2011 at 04:26:38PM +0800, Walter Stanish wrote:
> Interaction is a requirement, since there seems to be a widely felt
> need to preserve anonymity through the use of temporary addresses.
> Generating a temporary address requires some actual processing to
> achieve, since the issuing of the new address cannot be done without
> interacting with the entity hosting the wallet (unless I'm missing
> something?).

Just replying to this one comment: yes, some interaction is always
necessary, but not necessarily directly with the entity hosting the wallet.
There are some EC crypto tricks to do this (often mentioned under
"deterministic wallets" before):

The wallet-hosting entity has a private key x, with public key X.
The address-generating entity knows X, and generates a fresh private
key y for each transaction. For each, it calculates Z=y*X, and asks
the client to pay to hash160(Z). Afterwards, it can send a bunch of
y's to the wallet hosting service, which can reconstruct z=y*x for
each. Alternatively, the y's can be generated according to a predefined
scheme instead.

-- 
Pieter



From rick at support-intelligence.com  Fri Dec 16 15:52:14 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 16 Dec 2011 07:52:14 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
	<1323791208.31194.YahooMailNeo@web121013.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
	<CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
Message-ID: <CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>

On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:
> I really like this proposal with standard URLs. All other proposals like DNS
> mapping or email aliases converted to URLs with some weird logic looks
> strange to me.

wow, really. Maybe you could review some RFCs, there are thousands of
examples where some really smart engineers chose the exact opposite
path which you propose below.

-rick

> Plain URLs (returning address in response body, redirecting to URI
> "bitcoin:<address>" or anything else) are very clear solution, easy to
> implement in clients and very easy to understand by people. It's also
> extremely flexible - almost everybody can somewhere setup static file
> containing his "personal" addresses or it's very easy to integrate such
> solution with eshops (providing custom address for given order) etc. I'm
> definitely for this solution.
>
> Best,
> slush
>
> On Tue, Dec 13, 2011 at 5:22 PM, Andy Parkins <andyparkins at gmail.com> wrote:
>>
>> On 2011 December 13 Tuesday, Amir Taaki wrote:
>>
>> > Maybe I wasn't clear enough in the document, but this is the intent with
>> > the HTTPS proposal.
>>
>> I don't like the idea of a hard-coded mapping at all. ?We shouldn't be
>> making
>> choices on behalf of server operators. ?It's up to them how they arrange
>> their
>> domain names and paths.
>>
>> I also agree that DNS is not the technology to use. ?DNS is a nightmare.
>>
>> > genjix at foo.org
>> >
>> > Contacts https://foo.org/bitcoin-alias/?handle=genjix and the system
>> > responds with a bitcoin address. Whether the system gives you a new
>> > address from a pool of addresses, or contacts the merchant behind the
>> > scenes is implementation defined.
>> >
>> > I'll clarify it later. This is the relevant line:
>> >
>> > string strRequestUrl = strDomain + "/bitcoin-alias/?handle=" +
>> > pszEncodedNick;
>> >
>> > Between HTTPS service and server service, I lean slightly towards HTTPS
>> > (automatic encrypted connection, CAs + all benefits of DNS). But still
>> > interested in arguments in favour of a server service (daemon answering
>> > queries).
>>
>> Why bother with an encoding scheme at all? ?If the address
>>
>> ?genjix at foo.org
>>
>> always maps to
>>
>> ?https://foo.org/bitcoin-alias/?handle=genjix
>>
>> Then forget the hardcoding of "https" the hardcoding of "bitcoin-alias"
>> and
>> "?handle=" and the original email-looking "genjix at foo.org". ?Just use the
>> URL.
>> Then the author of the service can use whatever they want.
>>
>> ?"Can I pay you 10 BTC?"
>> ?"Sure, send it to 'https://bitcoinalias.foo.org/genjix/'"
>>
>> While I might implement my alias server like this:
>>
>> ?"Sure, send it to 'https://google.com/bitcoin/?andyparkins'"
>> ?"Sure, send it to 'https://parkins.co.uk/"
>>
>> ... or any other URL they want -- any of which suit might suit me and my
>> webserver better than whatever mapping would otherwise be hard-coded. ?The
>> world is already very familiar with URLs so this is no more scary than the
>> email address. ?What's more, the email address form looks _too much_ like
>> an
>> email address, and will only lead to confusion ... "send it to
>> genjix at foo.org"
>> "so I use outlook express for that, right?" ?"erm, no, you put it in your
>> bitcoin client".
>>
>> The URL form could easily be made to detect a browser connecting rather
>> than a
>> bitcoin client (and this is an area that would benefit from a standards
>> document -- define the headers and user agent triggers that an alias
>> server
>> expects) and give them better instructions.
>>
>> https can be specified as the default, so ?"https://" can be optional when
>> they're typing. ?If, in the future, bitcoin gets a distributed
>> peer-to-peer
>> alias system, then a new URL type can be added easily
>> "bcalias://andyparkins"
>> might automatically find my node in the network and query it for an
>> address
>> (or whatever).
>>
>> All of the above is exactly why OpenID chose to use URLs for ID.
>>
>>
>>
>> Andy
>>
>> --
>> Dr Andy Parkins
>> andyparkins at gmail.com
>>
>>
>> ------------------------------------------------------------------------------
>> Systems Optimization Self Assessment
>> Improve efficiency and utilization of IT resources. Drive out cost and
>> improve service delivery. Take 5 minutes to use this Systems Optimization
>> Self Assessment. http://www.accelacomm.com/jaw/sdnl/114/51450054/
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live! ?Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From rick at support-intelligence.com  Fri Dec 16 16:03:28 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 16 Dec 2011 08:03:28 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <20111216083536.GA20470@ulyssis.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<20111216083536.GA20470@ulyssis.org>
Message-ID: <CAJ1JLtsRGF8wQBE0Uym67baw4wWT6hGamGjSPWyuB_em479y9Q@mail.gmail.com>

On Fri, Dec 16, 2011 at 12:35 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Mon, Dec 12, 2011 at 02:21:09PM -0800, Amir Taaki wrote:
>> I wrote this pre-draft:

[snip]

>
> To conclude: my suggestion would be to use URLs as address identifiers,
> optionally suffixed with a bitcoin address for authentication.
> This means my "address" would be either "sipa.be/pw.btc" or
> "sipa.be/pw.btc$14TYdpodQQDKVgvUUcpaMzjJwhQ4KYsipa" (where "https://")
> is an implicit default. Initiating a payment to either of these would
> result in a GET of https://sipa.be/pw.btc. When a transaction is
> constructed, it is POSTed back to that URL.
>
> If we can agree on reasonable hardcoded mapping, pw at sipa.be could just
> be a shorthand for either of these (though vulnerable to proofing...).

I believe that any URI scheme will still leverage DNS and inherit any
base issues you would have with TXT records. I suggest looking at DANE
and reviewing their work on hardening certificate (x.509)
infrastructure as your HTTPS scheme will inherit the issues we
currently experience with CAs getting p0wned.

Hardening the protocols and usability are related. Please look at some
of the work done in the IETF which has a long history in addressing
many of the issues you are considering. Review some of the elegance in
the bitcoin protocols. The proposals in this thread are neither clear
nor elegant. If you can't reach nearly the same level of
sophistication then I suggest you rethink your scheme.

-rick



From pieter.wuille at gmail.com  Fri Dec 16 16:17:00 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 16 Dec 2011 17:17:00 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJ1JLtsRGF8wQBE0Uym67baw4wWT6hGamGjSPWyuB_em479y9Q@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<20111216083536.GA20470@ulyssis.org>
	<CAJ1JLtsRGF8wQBE0Uym67baw4wWT6hGamGjSPWyuB_em479y9Q@mail.gmail.com>
Message-ID: <20111216161653.GA11672@ulyssis.org>

On Fri, Dec 16, 2011 at 08:03:28AM -0800, Rick Wesson wrote:
> Hardening the protocols and usability are related. Please look at some
> of the work done in the IETF which has a long history in addressing
> many of the issues you are considering. Review some of the elegance in
> the bitcoin protocols. The proposals in this thread are neither clear
> nor elegant. If you can't reach nearly the same level of
> sophistication then I suggest you rethink your scheme.

That's why you use URI + bitcoin address pairs, and use SSL communication
authenticated using the respective bitcoin pubkey. They may spoof your DNS
server, they can't fake having the requested corresponding private key.

Obviously, this moves the problem to getting the URL + address securely
to the client that wants to interact with it, but that is inevitable if
you're not going to rely on a pre-trusted certificate authority and PKI.

Also, the client software can cache the address corresponding to a particular
server or URL, making it similar to an ssh client that caches host keys and
warns when they change.

-- 
Pieter



From rick at support-intelligence.com  Fri Dec 16 16:21:40 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 16 Dec 2011 08:21:40 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <20111216161653.GA11672@ulyssis.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<20111216083536.GA20470@ulyssis.org>
	<CAJ1JLtsRGF8wQBE0Uym67baw4wWT6hGamGjSPWyuB_em479y9Q@mail.gmail.com>
	<20111216161653.GA11672@ulyssis.org>
Message-ID: <CAJ1JLts0aFJsNue5VTuSQ8zRaZ=JemceK0CNn7TVD7tWJ0UzAA@mail.gmail.com>

On Fri, Dec 16, 2011 at 8:17 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Fri, Dec 16, 2011 at 08:03:28AM -0800, Rick Wesson wrote:
>> Hardening the protocols and usability are related. Please look at some
>> of the work done in the IETF which has a long history in addressing
>> many of the issues you are considering. Review some of the elegance in
>> the bitcoin protocols. The proposals in this thread are neither clear
>> nor elegant. If you can't reach nearly the same level of
>> sophistication then I suggest you rethink your scheme.
>
> That's why you use URI + bitcoin address pairs, and use SSL communication
> authenticated using the respective bitcoin pubkey. They may spoof your DNS
> server, they can't fake having the requested corresponding private key.

You are making my point (again) regarding usability and security.
Aliases are not a https secured URI+bitcoin address.

-rick



From slush at centrum.cz  Fri Dec 16 16:36:43 2011
From: slush at centrum.cz (slush)
Date: Fri, 16 Dec 2011 17:36:43 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
	<1323791208.31194.YahooMailNeo@web121013.mail.ne1.yahoo.com>
	<201112131622.08158.andyparkins@gmail.com>
	<CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
	<CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
Message-ID: <CAJna-HhuoTe3pn_S16UVLErP9iKTod6Jumy-_0cQ0=NqbrAupw@mail.gmail.com>

OK, I'm ignoring your sarcastic style, I just wanted to support the URL
idea, which is KISS attitude, in the oposite of everything else proposed
here. I'm really affraid of over-engineering the aliases, which will make
it hard to implement in clients. Somebody noticed account implementation in
standard client - yes, it's good example of fail.

I still don't see any serious issue with the URL proposals. And sipa's idea
of posting back the transaction ID is also interesting, prividing yet
another flexibility in implementation and possible usage.

Btw, Rick, feel free to provide me some relevant RFCs which are solving
similar problems like BIP 15. And no, it's not sarcasm, I really want to
learn something new. Until now I just feel we're reinventing wheel or
raping some stuff which we should not touch at all (DNS).

slush

On Fri, Dec 16, 2011 at 4:52 PM, Rick Wesson
<rick at support-intelligence.com>wrote:

> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:
> > I really like this proposal with standard URLs. All other proposals like
> DNS
> > mapping or email aliases converted to URLs with some weird logic looks
> > strange to me.
>
> wow, really. Maybe you could review some RFCs, there are thousands of
> examples where some really smart engineers chose the exact opposite
> path which you propose below.
>
> -rick
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/97352afb/attachment.html>

From andyparkins at gmail.com  Fri Dec 16 17:10:10 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 16 Dec 2011 17:10:10 +0000
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
	<CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
Message-ID: <201112161710.15165.andyparkins@gmail.com>

On 2011 December 16 Friday, Rick Wesson wrote:
> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:
> > I really like this proposal with standard URLs. All other proposals like
> > DNS mapping or email aliases converted to URLs with some weird logic
> > looks strange to me.
> 
> wow, really. Maybe you could review some RFCs, there are thousands of
> examples where some really smart engineers chose the exact opposite
> path which you propose below.

Could you point me at an example?


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/017b7ff8/attachment.sig>

From andyparkins at gmail.com  Fri Dec 16 17:21:11 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 16 Dec 2011 17:21:11 +0000
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJ1JLtsRGF8wQBE0Uym67baw4wWT6hGamGjSPWyuB_em479y9Q@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<20111216083536.GA20470@ulyssis.org>
	<CAJ1JLtsRGF8wQBE0Uym67baw4wWT6hGamGjSPWyuB_em479y9Q@mail.gmail.com>
Message-ID: <201112161721.11498.andyparkins@gmail.com>

On 2011 December 16 Friday, Rick Wesson wrote:

> I believe that any URI scheme will still leverage DNS and inherit any
> base issues you would have with TXT records. I suggest looking at DANE

HTTPS takes care of that.

> and reviewing their work on hardening certificate (x.509)
> infrastructure as your HTTPS scheme will inherit the issues we
> currently experience with CAs getting p0wned.

This is the only real problem with HTTPS: we would be centralising part of our 
otherwise decentralised system.  CAs are certainly a risk.

However, trust is needed somewhere in the communication.  There is no way to 
securely communicate between A and B without the use of some previously 
trusted secure channel -- in Joe Sixpack's case it's by assuming that the 
browser he downloaded came with an untainted CA list, and that the CAs are 
trustworthy.  Neither of which is guaranteed.  Until and unless we get PGP 
support in browsers, CAs are all that we have.

Worrying about CAs misses the point anyway; if we're being that paranoid -- 
how did A tell B the appropriate alias to use for a lookup?  Was that channel 
secure too?  I could set up a MITM server that simply looks for the alias 
"RICKWESSON at bitcoinaliases.org" and rewrites it to 
"ANDYPARKINS at bitcoinaliases.org".  When the answer to that problem is HTTPS 
(or some other system that requires a previously authorised secure channel for 
transfer of trust), then we're back where we started, and HTTPS is acceptable.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/c16ac4b7/attachment.sig>

From khal at dot-bit.org  Fri Dec 16 17:36:57 2011
From: khal at dot-bit.org (Khalahan)
Date: Fri, 16 Dec 2011 18:36:57 +0100
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>	<201112121841.39864.luke@dashjr.org>	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>	<CAGQP0AHRaaB6UC5Y-mW=K6BqrzTOj9saKJjo50ZzvTpZKntnww@mail.gmail.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
Message-ID: <4EEB81B9.5090201@dot-bit.org>

Namecoin is a peer-to-peer generic name/value datastore system.
Don't forget it's not limited to .bit usage ! So, directly mapping
things to .bit url would not be the optimal way of using namecoin.

Namecoin is specificaly designed to map things to names in a fully
decentralized way. So, it's the perfect starting point to map names to
other things (a public bitcoin address, an url, etc)
You won't have all the advantages of namecoin when using other systems
like DNS and HTTP(S) as the first entry point.

What is namecoin ?

* proven technology :
- do not mix the namecoin technology and the dot-bit namespace with .bit
domains (dot-bit domains needs dot-bit compatible dns servers or proxies
+ namecoin and have a small visibility due to the nature of
top-to-bottom domain name system controlled by ICANN, namecoin needs
only namecoin to store data !)
- as proven and secure as bitcoin
- merged mining provides a secure network

* decentralized :
- a lot of nodes, and you can have your own node
- everybody can register his own name, by itself with the namecoin
software (bitcoin could even allow registration directly from it,
easily) or by using a name provider
- everybody can become a name provider (register for your friends and
resell names).

* no single point of failure :
- DNS and HTTPS have several limitations (Man in the Middle attacks, no
reliable authority of certifications, domain seizure, ...)

* designed for that :
- namecoin uses a system of namespaces to separate each usages :
http://dot-bit.org/Main_Page#Namespaces.
For example, the "personal namespace" draft
(http://dot-bit.org/Personal_Namespace) could be extended to support
mapping to a bitcoin address, or a dedicated namespace can be used if
prefered (the "bitcoin/" or "alias/" or "map/" prefixes for example).

* easily connectable to bitcoin
- they both use RPC and json to exchange informations, so connecting one
to the other is really easy
- bitcoin could even allow registration of names by sending an RPC
request to namecoin

* extensible and not limited :
- you are not forced to store a bitcoin address directly in namecoin,
you can also store an url or a domain name
- allows additional security : add a certificate fingerprint combined
with an https url (so, using DNS or HTTP(S) is not a major problem
anymore if the first point of entry is really secure and configurable
[and you use and self-signed certificate])
- really easy to update
- simple for simple cases
- possibility to use a nick, an email address or a domain as name
- other methods to get bitcoins addresses can be added later, protocol
is extensible


Examples of possible registered names in namecoin with the "personal
namespace" (with the "p/" prefix) :

* An individual person with well known public addresses :
"p/khal":
{
    "email": "khal at dot-bit.org",
    "bitcoin": "1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T",
    "namecoin": "N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9"
}

* Another individual person with well known public addresses :
"p/khal at dot-bit.org":
{
    "bitcoin": "1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T",
    "namecoin": "N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9"
}

* A merchant accepting payments in bitcoin, namecoin, paypal or
othercoin (to show you how the whole namespace could be used) :
"p/mymerchant.com":
{
    "bitcoin": {
        "url": "https://payto.mymerchant.com/bitcoin/",
        "fpr": "54FFA829023FC4DEF26B9339E07F7A743DF9F926"
        "cert": "https://payto.mymerchant.com/certificate.pem",
    },
    "namecoin": {
        "url": "https://payto.mymerchant.com/namecoin/",
        "fpr": "54FFA829023FC4DEF26B9339E07F7A743DF9F926"
    },
    "paypal": "xxxxxx at yyyyyyyyy.zzz",
    "othercoin": "oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
}

* A merchant with a public address, an url to generate custom addresses
and a domain name (not sure if this case is really usefull, maybe as
fallback)
"p/mymerchant2":
{
    "bitcoin": {
        "url": "https://payto.mymerchant.com/bitcoin/",
        "fpr": "54FFA829023FC4DEF26B9339E07F7A743DF9F926",
        "dns": "_bitcoin.payto.mymerchant.com",
        "address": "1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T",
    }
}


* How to use it in bitcoin ?

Several possibilities of address syntax :
- khal, khal at dot-bit.org, mymerchant.com, mymerchant2 : no syntax limit
- mymerchant2 at bitcoin : will conflict with names already containing a @
- mymerchant2 at namecoin : same
- namecoin:mymerchant2 : strange syntax, confusing with the "uri scheme"
- namecoin://mymerchant2 : same
- other ?


Here is how things would be processed when people put an address to pay
to in the bitcoin client :

* address : khal
-> RPC to namecoin for "p/khal"
-> json processing for "p/khal->bitcoin"
-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T

* address : khal at dot-bit.org
-> RPC to namecoin for "p/khal at dot-bit.org"
-> json processing for "p/khal at dot-bit.org->bitcoin"
-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T

* address : mymerchant.com
-> RPC to namecoin for "p/mymerchant.com"
-> json processing for "p/mymerchant.com->bitcoin"
-> json processing for "p/mymerchant.com->bitcoin->url" and
"p/mymerchant.com->bitcoin->fpr"
-> https request to "https://payto.mymerchant.com/bitcoin/"
-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy

* address : mymerchant2
-> RPC to namecoin for "p/mymerchant2"
-> json processing for "p/mymerchant2->bitcoin"
-> json processing for "p/mymerchant2->bitcoin->url" and
"p/mymerchant2->bitcoin->fpr"
-> https request to "https://payto.mymerchant.com/bitcoin/"
-> result : error (website unavailable, page not found, timeout, etc)
-> json processing for "p/mymerchant2->bitcoin->dns"
-> dns request for "_bitcoin.payto.mymerchant.com"
-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy

Le 13/12/2011 14:06, Gavin Andresen a ?crit :
> I agree with Mike Hearn and Christian Decker-- paying to
> 'somebody at foo.com' should become, behind the scenes, a HTTPS query to
> https://foo.com/something. If you just want to (say) donate to
> eff.org, then paying to '@eff.org' aught to work nicely.
>
> And if namecoin ever takes off you'll pay to 'somebody at foo.bit'.
>
> It seems to me that if it was DNS-based, the address should be
> something like 'somebody.bitcoin.foo.com'. But I think it is unlikely
> people will setup and run a custom DNS server just to support bitcoin
> payments.
>


-- 
Best Regards,
Khalahan
http://dot-bit.org/




From khal at dot-bit.org  Fri Dec 16 17:23:36 2011
From: khal at dot-bit.org (Khalahan)
Date: Fri, 16 Dec 2011 18:23:36 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1323979147.27319.140661012141129@webmail.messagingengine.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
Message-ID: <4EEB7E98.8030006@dot-bit.org>

Namecoin is a peer-to-peer generic name/value datastore system.
Don't forget it's not limited to .bit usage ! So, directly mapping
things to .bit url would not be the optimal way of using namecoin.

Namecoin is *specificaly designed to map things to names* in a fully
decentralized way. So, it's the perfect starting point to map names to
other things (a public bitcoin address, an url, etc)
You won't have all the advantages of namecoin when using other systems
like DNS and HTTP(S) as the first entry point.

What is namecoin ?

* proven technology :
- do not mix the namecoin technology and the dot-bit namespace with .bit
domains (dot-bit domains needs dot-bit compatible dns servers or proxies
+ namecoin and have a small visibility due to the nature of
top-to-bottom domain name system controlled by ICANN, namecoin needs
only namecoin to store data !)
- as proven and secure as bitcoin
- merged mining provides a secure network

* decentralized :
- a lot of nodes, and you can have your own node
- everybody can register his own name, by itself with the namecoin
software (bitcoin could even allow registration directly from it,
easily) or by using a name provider
- everybody can become a name provider (register for your friends and
resell names).

* no single point of failure :
- DNS and HTTPS have several limitations (Man in the Middle attacks, no
reliable authority of certifications, domain seizure, ...)

* designed for that :
- namecoin uses a system of namespaces to separate each usages :
http://dot-bit.org/Main_Page#Namespaces.
For example, the "personal namespace" draft
(http://dot-bit.org/Personal_Namespace) could be extended to support
mapping to a bitcoin address, or a dedicated namespace can be used if
prefered (the "bitcoin/" or "alias/" or "map/" prefixes for example).

* easily connectable to bitcoin
- they both use RPC and json to exchange informations, so connecting one
to the other is really easy
- bitcoin could even allow registration of names by sending an RPC
request to namecoin

* extensible and not limited :
- you are not forced to store a bitcoin address directly in namecoin,
you can also store an url or a domain name
- allows additional security : add a certificate fingerprint combined
with an https url (so, using DNS or HTTP(S) is not a major problem
anymore if the first point of entry is really secure and configurable
[and you use and self-signed certificate])
- really easy to update
- simple for simple cases
- possibility to use a nick, an email address or a domain as name
- other methods to get bitcoins addresses can be added later, protocol
is extensible


Examples of possible registered names in namecoin with the "personal
namespace" (with the "p/" prefix) :

* An individual person with well known public addresses :
"p/*khal*":
{
    "email": "khal at dot-bit.org",
    "bitcoin": "1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T",
    "namecoin": "N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9"
}

* Another individual person with well known public addresses :
"p/*khal at dot-bit.org*":
{
    "bitcoin": "1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T",
    "namecoin": "N1KHAL5C1CRzy58NdJwp1tbLze3XrkFxx9"
}

* A merchant accepting payments in bitcoin, namecoin, paypal or
othercoin (to show you how the whole namespace could be used) :
"p/*mymerchant.com*":
{
    "bitcoin": {
        "url": "https://payto.mymerchant.com/bitcoin/",
        "fpr": "54FFA829023FC4DEF26B9339E07F7A743DF9F926"
        "cert": "https://payto.mymerchant.com/certificate.pem",
    },
    "namecoin": {
        "url": "https://payto.mymerchant.com/namecoin/",
        "fpr": "54FFA829023FC4DEF26B9339E07F7A743DF9F926"
    },
    "paypal": "xxxxxx at yyyyyyyyy.zzz",
    "othercoin": "oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
}

* A merchant with a public address, an url to generate custom addresses
and a domain name (not sure if this case is really usefull, maybe as
fallback)
"p/*mymerchant2*":
{
    "bitcoin": {
        "url": "https://payto.mymerchant.com/bitcoin/",
        "fpr": "54FFA829023FC4DEF26B9339E07F7A743DF9F926",
        "dns": "_bitcoin.payto.mymerchant.com",
        "address": "1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T",
    }
}


* How to use it in bitcoin ?

Several possibilities of address syntax :
- khal, khal at dot-bit.org, mymerchant.com, mymerchant2 : no syntax limit
- mymerchant2 at bitcoin : will conflict with names already containing a @
- mymerchant2 at namecoin : same
- namecoin:mymerchant2 : strange syntax, confusing with the "uri scheme"
- namecoin://mymerchant2 : same
- other ?


Here is how things would be processed when people put an address to pay
to in the bitcoin client :

* address : khal
-> RPC to namecoin for "p/khal"
-> json processing for "p/khal->bitcoin"
-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T

* address : khal at dot-bit.org
-> RPC to namecoin for "p/khal at dot-bit.org"
-> json processing for "p/khal at dot-bit.org->bitcoin"
-> result : 1KHAL8bUjnkMRMg9yd2dNrYnJgZGH8Nj6T

* address : mymerchant.com
-> RPC to namecoin for "p/mymerchant.com"
-> json processing for "p/mymerchant.com->bitcoin"
-> json processing for "p/mymerchant.com->bitcoin->url" and
"p/mymerchant.com->bitcoin->fpr"
-> https request to "https://payto.mymerchant.com/bitcoin/"
-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy

* address : mymerchant2
-> RPC to namecoin for "p/mymerchant2"
-> json processing for "p/mymerchant2->bitcoin"
-> json processing for "p/mymerchant2->bitcoin->url" and
"p/mymerchant2->bitcoin->fpr"
-> https request to "https://payto.mymerchant.com/bitcoin/"
-> result : error (website unavailable, page not found, timeout, etc)
-> json processing for "p/mymerchant2->bitcoin->dns"
-> dns request for "_bitcoin.payto.mymerchant.com"
-> result : 1xyxyxyxyxyxyxyxyxyxyxyxyxyxy


Le 15/12/2011 20:59, theymos a ?crit :
> Bitcoin already has code and a protocol for transactions to IP
> addresses. Why not reuse that for dynamic address lookup? Just a few
> changes are necessary to enable complete user at server.com handling:
> - Extend the protocol so that "reply" messages can be signed by a fixed
>   public key
> - Extend "checkorder" messages so they can specify an account to
>   send BTC to. Or standardize on how to put the account into the
>   message field.
> - Enable DNS lookups for IP transactions. The DNS-only proposals could
>   also be used here to avoid having to use the IP transaction protocol
>   sometimes. The public key for signing "reply" messages can be gotten
>   from TXT records. This will be safe with DNSSEC and Namecoin. With
>   plain DNS Bitcoin could take a SSH-like approach and ask the user to
>   verify the public key the first time it is used, remembering it later.
>
> DoS attacks are already handled by the IP transactions code: the same IP
> address is always given the same bitcoin address until it pays to that
> bitcoin address.
>
> ------------------------------------------------------------------------------
> 10 Tips for Better Server Consolidation
> Server virtualization is being driven by many needs.  
> But none more important than the need to reduce IT complexity 
> while improving strategic productivity.  Learn More! 
> http://www.accelacomm.com/jaw/sdnl/114/51507609/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Best Regards,
Khalahan
http://dot-bit.org/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/e4feca94/attachment.html>

From rick at support-intelligence.com  Fri Dec 16 17:41:25 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 16 Dec 2011 09:41:25 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <201112161710.15165.andyparkins@gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
	<CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
	<201112161710.15165.andyparkins@gmail.com>
Message-ID: <CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>

Its a negative example -- in that the IETF does not specify anything
in the PATH part of the URI. The scheme, sure, but not in the path,
there are many types of URI schemes ( start with RFC 2396 )

There is significant upside to having your own scheme and having apps
understand how to integrate with it. Frankly, having just one client
(I understand there are more) is an artifact that hinders acceptance
and participation. If you want to go the route of https then
specifying a scheme is your path forward

I still believe that it is experience that is leading this thread down
the rat-hole of CGI and HTTP requests. The stuff isn't magic, it is
just what you are used to. Review the bitcoin protocol, there is an
elegance there -- not found  in the https schemes proposed thus far.
CGI isn't a protocol, nor does it address usability/identity issues.

Providing a mapping from user at authority.tld addresses usability and
identity. I'd like to see an elegant transformation, specifically I
take to task anyone that advocates
https://authority/foo/user?tx=1zhd789632uilos as elegant.

-rick


On Fri, Dec 16, 2011 at 9:10 AM, Andy Parkins <andyparkins at gmail.com> wrote:
> On 2011 December 16 Friday, Rick Wesson wrote:
>> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:
>> > I really like this proposal with standard URLs. All other proposals like
>> > DNS mapping or email aliases converted to URLs with some weird logic
>> > looks strange to me.
>>
>> wow, really. Maybe you could review some RFCs, there are thousands of
>> examples where some really smart engineers chose the exact opposite
>> path which you propose below.
>
> Could you point me at an example?
>
>
> Andy
>
> --
> Dr Andy Parkins
> andyparkins at gmail.com



From gmaxwell at gmail.com  Fri Dec 16 17:48:33 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 16 Dec 2011 12:48:33 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <4EEB81B9.5090201@dot-bit.org>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAGQP0AGvq603oshSGiP79A+gqDqW_hHG+qZjaZccCmo+gd3W2A@mail.gmail.com>
	<201112121841.39864.luke@dashjr.org>
	<CAGQP0AGBKKEqhaJZj-Rw400AjrVHE9_EMve=RWdqoaOaDsTgtw@mail.gmail.com>
	<CAGQP0AGY32QP=rXyGftb5NbHA7fhcCne7W=pt5+onXp1Jbm98Q@mail.gmail.com>
	<1323736946.58149.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CANEZrP1oPaqAT+LCfrAXO9WBz+oC2uvbP=5vx2+DX2P0qFusgA@mail.gmail.com>
	<CALxbBHUgCOVMRxtnsmC2W-MaYfeDSzaftWMCCgcWsMBdZfzPQg@mail.gmail.com>
	<CAGQP0AHRaaB6UC5Y-mW=K6BqrzTOj9saKJjo50ZzvTpZKntnww@mail.gmail.com>
	<CABsx9T1wksXjLy=EC6dK1WtVFEayL-HgXWtENgSPXhU6Du2Srg@mail.gmail.com>
	<4EEB81B9.5090201@dot-bit.org>
Message-ID: <CAAS2fgTxk1UWDju+GbKFfA7+U+_pq5wDCXV8mnqgcn99iEOLuQ@mail.gmail.com>

On Fri, Dec 16, 2011 at 12:36 PM, Khalahan <khal at dot-bit.org> wrote:
> Namecoin is a peer-to-peer generic name/value datastore system.
> Don't forget it's not limited to .bit usage ! So, directly mapping
> things to .bit url would not be the optimal way of using namecoin.
>
> Namecoin is specificaly designed to map things to names in a fully
> decentralized way. So, it's the perfect starting point to map names to
> other things (a public bitcoin address, an url, etc)
> You won't have all the advantages of namecoin when using other systems
> like DNS and HTTP(S) as the first entry point.


How can one construct a zero-trust (or nearly zero trust) namecoin
resolver without having a copy of the ever growing complete namecoin
block chain?

The bitcoin lite node mechanism will not work because a peer could
return stale records or no-result and you would have no evidence of
their deception.  (In the case of lite bitcoin nodes, telling you
about old transactions is harmless because you control your own
transactions).



From zgenjix at yahoo.com  Fri Dec 16 18:29:37 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 16 Dec 2011 10:29:37 -0800 (PST)
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
	<CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
	<201112161710.15165.andyparkins@gmail.com>
	<CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>
Message-ID: <1324060177.10146.YahooMailNeo@web121006.mail.ne1.yahoo.com>

You have to be seriously joking to call the bitcoin protocol elegant. A message based system over TCP with constantly changing endians that needs to lookup its own IP address on several websites is not elegant. It is functioning, not elegant.

Also it is kind of dick to come guns blaring and start insulting slush who runs one of the biggest mining pools and is working on electrum, and sipa who develops the satoshi bitcoin.

Khalahan said:

> Namecoin is a peer-to-peer generic name/value datastore system

Namecoin has the same problem as DNS. From the document:

"The disadvantage of DNS TXT records is that updating a record takes 
time. This encourages people to not use new addresses per transaction 
which has certain security issues."


________________________________
 From: Rick Wesson <rick at support-intelligence.com>
To: Andy Parkins <andyparkins at gmail.com> 
Cc: bitcoin-development at lists.sourceforge.net 
Sent: Friday, December 16, 2011 5:41 PM
Subject: Re: [Bitcoin-development] Fwd: [BIP 15] Aliases
 
Its a negative example -- in that the IETF does not specify anything
in the PATH part of the URI. The scheme, sure, but not in the path,
there are many types of URI schemes ( start with RFC 2396 )

There is significant upside to having your own scheme and having apps
understand how to integrate with it. Frankly, having just one client
(I understand there are more) is an artifact that hinders acceptance
and participation. If you want to go the route of https then
specifying a scheme is your path forward

I still believe that it is experience that is leading this thread down
the rat-hole of CGI and HTTP requests. The stuff isn't magic, it is
just what you are used to. Review the bitcoin protocol, there is an
elegance there -- not found? in the https schemes proposed thus far.
CGI isn't a protocol, nor does it address usability/identity issues.

Providing a mapping from user at authority.tld addresses usability and
identity. I'd like to see an elegant transformation, specifically I
take to task anyone that advocates
https://authority/foo/user?tx=1zhd789632uilos as elegant.

-rick


On Fri, Dec 16, 2011 at 9:10 AM, Andy Parkins <andyparkins at gmail.com> wrote:
> On 2011 December 16 Friday, Rick Wesson wrote:
>> On Thu, Dec 15, 2011 at 4:07 PM, slush <slush at centrum.cz> wrote:
>> > I really like this proposal with standard URLs. All other proposals like
>> > DNS mapping or email aliases converted to URLs with some weird logic
>> > looks strange to me.
>>
>> wow, really. Maybe you could review some RFCs, there are thousands of
>> examples where some really smart engineers chose the exact opposite
>> path which you propose below.
>
> Could you point me at an example?
>
>
> Andy
>
> --
> Dr Andy Parkins
> andyparkins at gmail.com

------------------------------------------------------------------------------
Learn Windows Azure Live!? Tuesday, Dec 13, 2011
Microsoft is holding a special Learn Windows Azure training event for 
developers. It will provide a great way to learn Windows Azure and what it 
provides. You can attend the event by watching it streamed LIVE online.? 
Learn more at http://p.sf.net/sfu/ms-windowsazure
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/9780da73/attachment.html>

From gavinandresen at gmail.com  Fri Dec 16 19:06:52 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 16 Dec 2011 14:06:52 -0500
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <1324060177.10146.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
	<CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
	<201112161710.15165.andyparkins@gmail.com>
	<CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>
	<1324060177.10146.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <CABsx9T0pP4Wsxy0yMJTA0OSJY3EfeFQvqczfMdvu=j1iQmooag@mail.gmail.com>

First: everybody please try to focus on the issues/ideas, and try to
avoid this becoming a flame war.

Second: I think Walter Stanish made several good points that may have
been missed in all the long posts and discussion, the main one being:

The banking industry has been dealing with many of these issues for
years; I think we should not dismiss their experience.

I think there is also a huge public relations benefit to using a
standard like IIBAN instead of inventing our own. Having a Bitcoin
Payment Routing Address (or whatever it ends up being called) that
looks like the number issues by big financial institutions will give
people the warm fuzzies.

I don't really care what happens behind the scenes, as long as it is
as secure as an HTTPS connection (RE: CA pwnage:  there's no such
thing as perfect security, and until a more secure solution comes
along HTTPS is the best we've got).

And I'll reiterate that there doesn't have to be just one solution.

My only concern is that IIBAN is Yet Another Fledgling Standard, and
those little details that remain to be worked out could take years to
actually work out.

-- 
--
Gavin Andresen



From rick at support-intelligence.com  Fri Dec 16 19:22:19 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 16 Dec 2011 11:22:19 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CABsx9T0pP4Wsxy0yMJTA0OSJY3EfeFQvqczfMdvu=j1iQmooag@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<CAJna-HiR0qrOp2sG0hb=5bJ2H60y7QwC8BiHDVR9=kiV20W0vA@mail.gmail.com>
	<CAJ1JLttMWog=QSLmmM9HiZLQ2UU9sPmwAs2wVQoetW3yjMRPow@mail.gmail.com>
	<201112161710.15165.andyparkins@gmail.com>
	<CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>
	<1324060177.10146.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<CABsx9T0pP4Wsxy0yMJTA0OSJY3EfeFQvqczfMdvu=j1iQmooag@mail.gmail.com>
Message-ID: <CAJ1JLtta7-etBw=outQysuanEhZ7FzeVkBXpfzZNMQPs4Uz3cw@mail.gmail.com>

Agreed, I find measured dialog much more valuable. I also agree that
standards take time and are messy, though choosing a standard allows
additional participation and can drive interopability. One does not
need to accept IBANN but we should participate in the dialog in its
development. internet-drafts don't make it through the process
unchanged. IBANN is a starting point not the end of the discussion.

-rick

On Fri, Dec 16, 2011 at 11:06 AM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> First: everybody please try to focus on the issues/ideas, and try to
> avoid this becoming a flame war.
>
> Second: I think Walter Stanish made several good points that may have
> been missed in all the long posts and discussion, the main one being:
>
> The banking industry has been dealing with many of these issues for
> years; I think we should not dismiss their experience.
>
> I think there is also a huge public relations benefit to using a
> standard like IIBAN instead of inventing our own. Having a Bitcoin
> Payment Routing Address (or whatever it ends up being called) that
> looks like the number issues by big financial institutions will give
> people the warm fuzzies.
>
> I don't really care what happens behind the scenes, as long as it is
> as secure as an HTTPS connection (RE: CA pwnage: ?there's no such
> thing as perfect security, and until a more secure solution comes
> along HTTPS is the best we've got).
>
> And I'll reiterate that there doesn't have to be just one solution.
>
> My only concern is that IIBAN is Yet Another Fledgling Standard, and
> those little details that remain to be worked out could take years to
> actually work out.
>
> --
> --
> Gavin Andresen
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live! ?Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From slush at centrum.cz  Fri Dec 16 19:54:35 2011
From: slush at centrum.cz (slush)
Date: Fri, 16 Dec 2011 20:54:35 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <4EEB7E98.8030006@dot-bit.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<4EEB7E98.8030006@dot-bit.org>
Message-ID: <CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>

Khalahan, honestly, using namecoin for aliases is (for me) clean example of
over-engineering. I mean - it will definitely work if implemented properly.
I played with a namecoin a bit (as my pool was the first 'big' pool
supporting merged mining), but I think there's really long way to provide
such alias system in namecoin and *cleanly integrate it with bitcoin*.
Don't forget that people who want to do lookup need to maintain also
namecoin blockchain with their bitcoin client. It goes against my instinct
of keeping stuff easy.

For example, yesterday I implemented HTTPS lookup for addresses into my
fork of Electrum client. I did it in 15 minutes, it works as expected, it
does the job and the implementation is really transparent, becuase
implementation is 20 lines of code. There's no magic transformation, no
forced "?handle=" parameters or whatever. And I don't care if somebody
provide URL
https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True

And everybody can do the same in their clients, in their merchant
solutions, websites or whatever. Everybody can do HTTPS lookup. But try to
explain DNS, Namecoin, IIBAN, email aliases to other programmers...

Those IIBAN - well, why not. At least I see the potential in PR. So far I
understand it as some teoretic concept which is not supported by anything
else right now. Give it few years until it matures and then add IIBAN alias
to Bitcoin client too.

Maybe I'm repeating myself already, but the way to go is to make aliases as
easy as possible, so everybody can implement it in their own solution and
thus practially remove the need of using standard bitcoin addresses for
normal users. Using some superior technology, which is hard to implement or
even understand won't solve the situation, because it will ends up with
some reference implementation in standard client only and nobody else will
use it.

slush

On Fri, Dec 16, 2011 at 6:23 PM, Khalahan <khal at dot-bit.org> wrote:

> **
> Namecoin is a peer-to-peer generic name/value datastore system.
> Don't forget it's not limited to .bit usage ! So, directly mapping things
> to .bit url would not be the optimal way of using namecoin.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/d08d98b2/attachment.html>

From zgenjix at yahoo.com  Fri Dec 16 20:10:30 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 16 Dec 2011 12:10:30 -0800 (PST)
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<4EEB7E98.8030006@dot-bit.org>
	<CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
Message-ID: <1324066230.24980.YahooMailNeo@web121004.mail.ne1.yahoo.com>

I think IBANs are not such a good idea. Note that as someone who has spent the last year of my life dealing with hundreds of bank transactions a day and interacting with the banking system (both on a technical, systematic and personnel level), the entire system is a gigantic mess.

The banks are in fact looking to us for answers. That's why we (Bitcoin Consultancy) were invited to the SWIFT conference to join their panel on bank 2.0.

I don't even mind the maxim "take everything the banks have done and do the complete opposite" :)

I invite anyone who is skeptical to read the ECB's specification on SEPA payments. It really is an example of a system made to work alongside legacy systems that rely on inefficient people. The interchange fees are dependent on a totally arbitrary test of merchant indifference and various antitrust regulations.

These systems are usually built not by engineers or hackers, but by finance people. IBAN has no place in bitcoin IMO.

I don't mean to sound too critical, but I'm skeptical of its usefulness. Especially when we already have bitcoin addresses with their own checksums- what value do IBANs add? Nothing except negatives.



________________________________
 From: slush <slush at centrum.cz>
To: Khalahan <khal at dot-bit.org> 
Cc: bitcoin-development at lists.sourceforge.net 
Sent: Friday, December 16, 2011 7:54 PM
Subject: Re: [Bitcoin-development] [BIP 15] Aliases
 

Khalahan, honestly, using namecoin for aliases is (for me) clean example of over-engineering. I mean - it will definitely work if implemented properly. I played with a namecoin a bit (as my pool was the first 'big' pool supporting merged mining), but I think there's really long way to provide such alias system in namecoin and *cleanly integrate it with bitcoin*. Don't forget that people who want to do lookup need to maintain also namecoin blockchain with their bitcoin client. It goes against my instinct of keeping stuff easy.

For example, yesterday I implemented HTTPS lookup for addresses into my fork of Electrum client. I did it in 15 minutes, it works as expected, it does the job and the implementation is really transparent, becuase implementation is 20 lines of code. There's no magic transformation, no forced "?handle=" parameters or whatever. And I don't care if somebody provide URL https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True

And everybody can do the same in their clients, in their merchant solutions, websites or whatever. Everybody can do HTTPS lookup. But try to explain DNS, Namecoin, IIBAN, email aliases to other programmers...


Those IIBAN - well, why not. At least I see the potential in PR. So far I understand it as some teoretic concept which is not supported by anything else right now. Give it few years until it matures and then add IIBAN alias to Bitcoin client too.

Maybe I'm repeating myself already, but the way to go is to make aliases as easy as possible, so everybody can implement it in their own solution and thus practially remove the need of using standard bitcoin addresses for normal users. Using some superior technology, which is hard to implement or even understand won't solve the situation, because it will ends up with some reference implementation in standard client only and nobody else will use it.

slush


On Fri, Dec 16, 2011 at 6:23 PM, Khalahan <khal at dot-bit.org> wrote:

 
>Namecoin is a peer-to-peer generic name/value datastore system.
>Don't forget it's not limited to .bit usage ! So, directly mapping
    things to .bit url would not be the optimal way of using namecoin.
>
>
------------------------------------------------------------------------------
Learn Windows Azure Live!? Tuesday, Dec 13, 2011
Microsoft is holding a special Learn Windows Azure training event for 
developers. It will provide a great way to learn Windows Azure and what it 
provides. You can attend the event by watching it streamed LIVE online.? 
Learn more at http://p.sf.net/sfu/ms-windowsazure
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/6566d3c1/attachment.html>

From harald at schil.ly  Fri Dec 16 20:14:53 2011
From: harald at schil.ly (Harald Schilly)
Date: Fri, 16 Dec 2011 21:14:53 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <1324066230.24980.YahooMailNeo@web121004.mail.ne1.yahoo.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<4EEB7E98.8030006@dot-bit.org>
	<CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
	<1324066230.24980.YahooMailNeo@web121004.mail.ne1.yahoo.com>
Message-ID: <CAGG4CB6sirBDSRyDWm_Ez7VxwbO0ETjR+HNdJdk7ze_HA7i3uw@mail.gmail.com>

On Fri, Dec 16, 2011 at 21:10, Amir Taaki <zgenjix at yahoo.com> wrote:
> Especially when we already have bitcoin addresses with their own checksums-
> what value do IBANs add?

Well, I'm not an expert like you, but one benefit would be to be
compatible with existing software solutions that are based on using
IBANs.

H



From andyparkins at gmail.com  Fri Dec 16 20:54:50 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 16 Dec 2011 20:54:50 +0000
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<201112161710.15165.andyparkins@gmail.com>
	<CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>
Message-ID: <201112162054.51039.andyparkins@gmail.com>

On Friday 16 Dec 2011 17:41:25 Rick Wesson wrote:
> Its a negative example -- in that the IETF does not specify anything
> in the PATH part of the URI. The scheme, sure, but not in the path,
> there are many types of URI schemes ( start with RFC 2396 )

You seem to have jumped off the topic; you mentioned that there were 
thousands of RFCs that we should review over why we shouldn't use a URI; and 
you've pointed at an RFC that shows how a URI can be used.

While you're right that CGI and HTTP aren't magic; they are commonplace; and 
it's important when we want an infinitely expandable mapping system that 
people can use technology they are already familiar with. People already 
have web servers, people already understand URIs.  It's not "just what we 
are used to"; people who can cope with development of the bitcoin protocol 
aren't going to be worried about protocol complexity.  It is a concern about 
what the rest of the world will have to do to get a bitcoin alias.

> Providing a mapping from user at authority.tld addresses usability and

No it doesn't address usability at all, because it falls down on the first 
attempt: what if I want to supply a URI that allows my web service to link 
an invoice number to an issued bitcoin address?  You've forced every mapping 
service to be identical, and limited.

> identity. I'd like to see an elegant transformation, specifically I
> take to task anyone that advocates
> https://authority/foo/user?tx=1zhd789632uilos as elegant.

You've been unfair, the equivalent of your "user at authority.tld" is 
"https://authority.tld/user" or "https://user.authority.tld/" or 
"https://google.com/bitcoin/user" or any of an infinite number of other 
variations that _I_ as the mapper get to choose rather than whoever wrote 
the BIP; all of which are arguably no less "elegant" than that simple email.

There is no equivalent in the other direction though.  For someone who 
want's to supply the TX to their mapping server... where does it go in 
"user at authority.tld"?



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From andyparkins at gmail.com  Fri Dec 16 20:58:27 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 16 Dec 2011 20:58:27 +0000
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <CABsx9T0pP4Wsxy0yMJTA0OSJY3EfeFQvqczfMdvu=j1iQmooag@mail.gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<1324060177.10146.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<CABsx9T0pP4Wsxy0yMJTA0OSJY3EfeFQvqczfMdvu=j1iQmooag@mail.gmail.com>
Message-ID: <201112162058.28195.andyparkins@gmail.com>

On Friday 16 Dec 2011 19:06:52 Gavin Andresen wrote:

> I think there is also a huge public relations benefit to using a
> standard like IIBAN instead of inventing our own. Having a Bitcoin
> Payment Routing Address (or whatever it ends up being called) that
> looks like the number issues by big financial institutions will give
> people the warm fuzzies.

I can see the PR advantages, but isn't mapping from one massively long, 
multi-character, human-opaque number (IBAN) to another (bitcoin address) a 
bit of a waste of time?

Surely the point of all this is to provide at least the possibility of a 
human-readable name for a bitcoin-address?

Isn't there a possibility that one day we might want to be able to say "send 
me those bitcoins you owe me to bitcoin.yahoo.co.uk/andyparkins"?  Or 
similar?



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com



From rick at support-intelligence.com  Fri Dec 16 21:50:54 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 16 Dec 2011 13:50:54 -0800
Subject: [Bitcoin-development] Fwd: [BIP 15] Aliases
In-Reply-To: <201112162054.51039.andyparkins@gmail.com>
References: <1323731781.42953.YahooMailClassic@web120920.mail.ne1.yahoo.com>
	<201112161710.15165.andyparkins@gmail.com>
	<CAJ1JLts8JQ2J=DqJTD76gq2KB02ycqqeJjwaDyY2tPX8SJwvVA@mail.gmail.com>
	<201112162054.51039.andyparkins@gmail.com>
Message-ID: <CAJ1JLtv+Q-+tV+jSWRzK=jH0t2Fug=89KJymc2OC=+w01iRQ6w@mail.gmail.com>

On Fri, Dec 16, 2011 at 12:54 PM, Andy Parkins <andyparkins at gmail.com> wrote:

[snip]

>
> You've been unfair, the equivalent of your "user at authority.tld" is
> "https://authority.tld/user" or "https://user.authority.tld/" or
> "https://google.com/bitcoin/user" or any of an infinite number of other
> variations that _I_ as the mapper get to choose rather than whoever wrote
> the BIP; all of which are arguably no less "elegant" than that simple email.
>
> There is no equivalent in the other direction though. ?For someone who
> want's to supply the TX to their mapping server... where does it go in
> "user at authority.tld"?

actually there are many differences. Specifying a standard using a
HTTP(s) transport for a look-up isn't something that has been done in
the PATH portion of the URI and that I was pointing out that there is
*NO* RFC that specifies such for a look-up provide the inverse of many
protocol specifications that did *not* choose that methodology.

What has happened is various schemes are specified, developed and
deployed. I am sure you are familure with many. sip:// ftp:// etc://
many are described at http://en.wikipedia.org/wiki/URI_scheme

NAPTR records (see http://en.wikipedia.org/wiki/NAPTR_record) are
another area that deserves research for those that desire URI schemes.

Understand that I am mearly advocating that as a group this work be
done in standards development process, and that IBANN is one such
effort.

-rick



From khal at dot-bit.org  Fri Dec 16 21:52:04 2011
From: khal at dot-bit.org (Khalahan)
Date: Fri, 16 Dec 2011 22:52:04 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<4EEB7E98.8030006@dot-bit.org>
	<CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
Message-ID: <4EEBBD84.6020907@dot-bit.org>

The number of proposals <https://en.bitcoin.it/wiki/BIP_0015> is not
infinite, here are their problems :

- FirstBits : centralized
- DNS TXT Records : DNSSEC is required to have a minimum of security,
limits usage to engineers, limits usage to some domain names (i won't be
able to use a gmail address for example, because i don't control the
gmail.com domain)
- Server Service (DNS + a daemon) : Same as DNS TXT records
- HTTPS Web service : relies on HTTPS and CA, bitcoin needs to be able
to check the full certificate chain and access a list of up-to-date
certificate authorities (installed on the OS or provided with bitcoin).
And don't forget the CA model is not 100% reliable (several CA hacked
this year + possible government control...).
- IP Transactions : /This proposal seeks to enable DNS lookups for IP
transactions/ => same as above

I know that providing a namecoin daemon with bitcoin is not the lighter
solution, but, if a better one existed i guess it would have already
been integrated into bitcoin... (see in what state is my first attempt
with the HTTPS proposal : Send payments to emails, urls and domains in
GUI <https://github.com/bitcoin/bitcoin/pull/174> - /khalahan opened
this pull request April 20, 2011/)

So, what's next ?

Le 16/12/2011 20:54, slush a ?crit :
> Khalahan, honestly, using namecoin for aliases is (for me) clean
> example of over-engineering. I mean - it will definitely work if
> implemented properly. I played with a namecoin a bit (as my pool was
> the first 'big' pool supporting merged mining), but I think there's
> really long way to provide such alias system in namecoin and *cleanly
> integrate it with bitcoin*. Don't forget that people who want to do
> lookup need to maintain also namecoin blockchain with their bitcoin
> client. It goes against my instinct of keeping stuff easy.
>
> For example, yesterday I implemented HTTPS lookup for addresses into
> my fork of Electrum client. I did it in 15 minutes, it works as
> expected, it does the job and the implementation is really
> transparent, becuase implementation is 20 lines of code. There's no
> magic transformation, no forced "?handle=" parameters or whatever. And
> I don't care if somebody provide URL
> https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True
> <https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True>
>
> And everybody can do the same in their clients, in their merchant
> solutions, websites or whatever. Everybody can do HTTPS lookup. But
> try to explain DNS, Namecoin, IIBAN, email aliases to other programmers...
>
> Those IIBAN - well, why not. At least I see the potential in PR. So
> far I understand it as some teoretic concept which is not supported by
> anything else right now. Give it few years until it matures and then
> add IIBAN alias to Bitcoin client too.
>
> Maybe I'm repeating myself already, but the way to go is to make
> aliases as easy as possible, so everybody can implement it in their
> own solution and thus practially remove the need of using standard
> bitcoin addresses for normal users. Using some superior technology,
> which is hard to implement or even understand won't solve the
> situation, because it will ends up with some reference implementation
> in standard client only and nobody else will use it.
>
> slush

-- 
Best Regards,
Khalahan
http://dot-bit.org/

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111216/cb3fc4b4/attachment.html>

From rick at support-intelligence.com  Fri Dec 16 22:05:41 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 16 Dec 2011 14:05:41 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <4EEBBD84.6020907@dot-bit.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<4EEB7E98.8030006@dot-bit.org>
	<CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
	<4EEBBD84.6020907@dot-bit.org>
Message-ID: <CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>

On Fri, Dec 16, 2011 at 1:52 PM, Khalahan <khal at dot-bit.org> wrote:
> The number of proposals is not infinite, here are their problems :
>
> - FirstBits : centralized
> - DNS TXT Records : DNSSEC is required to have a minimum of security, limits
> usage to engineers, limits usage to some domain names (i won't be able to
> use a gmail address for example, because i don't control the gmail.com
> domain)

The same goes for http(s) one would not be able to use
http://google.com/user unless google offers the services.

ALSO look at DANE for getting around the certificate requirement for https

> - Server Service (DNS + a daemon) : Same as DNS TXT records

DNS TXT are not the only way forward, also registry/registrars can facilitate.

> - HTTPS Web service : relies on HTTPS and CA, bitcoin needs to be able to
> check the full certificate chain and access a list of up-to-date certificate
> authorities (installed on the OS or provided with bitcoin). And don't forget
> the CA model is not 100% reliable (several CA hacked this year + possible
> government control...).

This most likely relies on a paid, valid certificate (that expires),
no self signed certs. I admit that running a secured https server with
a valid CA signed  cet is as simple/hard as running a DNSSEC authority
zone.

using a x.509 certificate to secure a bitcoin transaction removes some
of the anonymity of the transaction by allowing the lookup to identify
the certification, ca, crl etc thus connecting a transaction/bitcoin
address to the cert and to its issuing authority. No matter the
frequency of the destination bitcoin address changing.

IMNSHO, leveraging CAs to secure http to provide a lookup translation
to a bitcoin address will only erode anonymity. While DNS is connected
to whois there are provision for hiding behind a proxy where to the
best of my knowledge there are no such provisions offered by CA's
issuing x.509 certificates.

Should self signed cers be "allowed" or encouraged only decreases
security. Clearly DANE would be the only way to mitigate this
situation but then you are back to relying on DNSSEC to bind the x.509
cert.

wash, rinse,  ...

-rick

> - IP Transactions : This proposal seeks to enable DNS lookups for IP
> transactions => same as above
>
> I know that providing a namecoin daemon with bitcoin is not the lighter
> solution, but, if a better one existed i guess it would have already been
> integrated into bitcoin... (see in what state is my first attempt with the
> HTTPS proposal : Send payments to emails, urls and domains in GUI - khalahan
> opened this pull request April 20, 2011)
>
> So, what's next ?
>
> Le 16/12/2011 20:54, slush a ?crit?:
>
> Khalahan, honestly, using namecoin for aliases is (for me) clean example of
> over-engineering. I mean - it will definitely work if implemented properly.
> I played with a namecoin a bit (as my pool was the first 'big' pool
> supporting merged mining), but I think there's really long way to provide
> such alias system in namecoin and *cleanly integrate it with bitcoin*. Don't
> forget that people who want to do lookup need to maintain also namecoin
> blockchain with their bitcoin client. It goes against my instinct of keeping
> stuff easy.
>
> For example, yesterday I implemented HTTPS lookup for addresses into my fork
> of Electrum client. I did it in 15 minutes, it works as expected, it does
> the job and the implementation is really transparent, becuase implementation
> is 20 lines of code. There's no magic transformation, no forced "?handle="
> parameters or whatever. And I don't care if somebody provide URL
> https://some.strange.domain/name-of-my-dog?myhandle=5678iop&anything_else=True
>
> And everybody can do the same in their clients, in their merchant solutions,
> websites or whatever. Everybody can do HTTPS lookup. But try to explain DNS,
> Namecoin, IIBAN, email aliases to other programmers...
>
> Those IIBAN - well, why not. At least I see the potential in PR. So far I
> understand it as some teoretic concept which is not supported by anything
> else right now. Give it few years until it matures and then add IIBAN alias
> to Bitcoin client too.
>
> Maybe I'm repeating myself already, but the way to go is to make aliases as
> easy as possible, so everybody can implement it in their own solution and
> thus practially remove the need of using standard bitcoin addresses for
> normal users. Using some superior technology, which is hard to implement or
> even understand won't solve the situation, because it will ends up with some
> reference implementation in standard client only and nobody else will use
> it.
>
> slush
>
>
> --
> Best Regards,
> Khalahan
> http://dot-bit.org/
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live! ?Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From luke at dashjr.org  Sat Dec 17 06:32:22 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 17 Dec 2011 01:32:22 -0500
Subject: [Bitcoin-development] Pubkey addresses
Message-ID: <201112170132.26201.luke@dashjr.org>

IMO, we should standardize and support public key addresses. While not ideal 
for humans, because of their length, it's a better fit for large QR Codes IMO.



From elombrozo at gmail.com  Sat Dec 17 07:41:56 2011
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 16 Dec 2011 23:41:56 -0800
Subject: [Bitcoin-development] Protocol extensions
Message-ID: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>

Hey, guys.

I haven't posted here before so I'll introduce myself. My name's Eric,
I've been developing cryptocurrency-related
software for several months now, I've implemented some libraries for
dealing with core bitcoin datastructures, made
some custom builds of bitcoind and interfaced it with a few apps I've written.

In doing so, I've come to appreciate just how little of the potential
for the bitcoin protocol is being exploited right now...
not only in terms of the script features but in terms of the potential
commands and node types that could exist.

For instance, the protocol spec at
https://en.bitcoin.it/wiki/Protocol_specification only has 16 commands
listed and
only one service type...despite having a full 12 bytes for a command
code and a full eight bytes for a services
type.

The fact that only one node service type is specified is probably due
to the fact that the satoshi client was written
to be a standalone monolithic app that took care of all the essential
needs for a network of peers.
i.e. block chain storage/management, transaction signing/verification,
key generation/wallet management, block mining, etc...
However, I think there's an urgent need for breaking up all these
different tasks into separate components that can run as independent
services on different types of devices.

One of the big issues I'm dealing with now pertains to block chain
storage. As of right now, it is implemented as sequential
disk files using Berkeley DB in the satoshi client. Then you have
other projects that have been using SQL tables, etc...
But I believe the direction this really needs to move towards is some
sort of distributed hash table...and the database queries
should be performed using the bitcoin protocol itself. Perhaps adding
a few more commands. As things stand right now,
the only way to query for transactions or blocks is by their hash. And
once a transaction gets incorporated into a block and
removed from the transaction pool, one can no longer query it by the
transaction hash without stepping outside the bitcoin protocol.
We need access to the disk file that stores the blocks whether it be
via Berkeley DB or SQL or whatever.

I propose an extension to the bitcoin protocol to provide methods for
performing more sophisticated queries, such as "Give me
an inventory of transactions involving this particular public key" or
"Give me an inventory all transactions in the last n blocks with
unredeemed outputs." This could be done by adding a few more commands.

Furthermore, I propose a new network services type for nodes that
serve as block chain/transaction pool storage.

Of couse, any peer that wishes to verify the integrity of the block
chain would still have to download at the very least
all the block headers...and to be completely sure, also all the blocks
themselves...and verify everything. But it would be
very nice to be able to run thin services that can rely on other
network peers to do this work. It is still possible to attain
a high level of confidence in the integrity by querying multiple peers
for similar objects and comparing. It is also possible
to run your own dedicated block chain storage servers which you trust.

There are other ideas I have for other types of services, too.

Anyhow, I'm just throwing this out there...if anyone's interested I'd
love to develop these ideas further and help put together some
specs.

-Eric Lombrozo



From timon.elviejo at gmail.com  Sat Dec 17 11:14:24 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 17 Dec 2011 12:14:24 +0100
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <201112170132.26201.luke@dashjr.org>
References: <201112170132.26201.luke@dashjr.org>
Message-ID: <CAGQP0AFg7dMK4Rzm9M1Ur-jeQmAp85nKbE_Ry5sXr+Pw=e3EQg@mail.gmail.com>

Don't know much about QR codes, but I thought they have a length limitation.
Why jav wants to use not just addresses but firstbits then?

"Allow a field "green_address_list" (short "gal") to specify
acceptable addresses in Firstbit format directly in the QR code and
only use the "green_address_details" mechanism when that starts to get
too long to fit comfortably into the QR code"

https://bitcointalk.org/index.php?topic=32818.msg422789#msg422789


2011/12/17, Luke-Jr <luke at dashjr.org>:
> IMO, we should standardize and support public key addresses. While not ideal
> for humans, because of their length, it's a better fit for large QR Codes
> IMO.
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n



From gronager at ceptacle.com  Sat Dec 17 13:13:02 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Sat, 17 Dec 2011 14:13:02 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
Message-ID: <82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>

Hey Eric,

Two comments.

1.
The ability to query for transactions belonging to pubkeys or bitcoin addresses is supported today by several implementations:
* blockexplorer.com
* bitcoin-js
* my own libBTC (will more on this soon)

To query for transactions you need to use json-rpc and not the bitcoin protocol, however. But still the purpose is the same: to be able to build thin clients that can rely on a server for storing the blockchain and keeping connected on the p2p network.

The reason for not having these queries part of the standard protocol (I think) are as they breaks anonymity, and that you would actually encourage people to participate in the p2p.

2. The second part you mention, to some how move the storage of the blockchain into a DHT based storage would be quite nice. The benefit of this is that it could be a way to integrate the smaller clients into the network without breaking the anonymity. But it should be thought out quite carefully. Further, if each client only store a fraction of the blockchain we should work out what fraction that need to be in order to ensure a similar service level. I would be happy to work with you on this.

Cheers,

Michael

On 17/12/2011, at 08:41, Eric Lombrozo wrote:

> Hey, guys.
> 
> I haven't posted here before so I'll introduce myself. My name's Eric,
> I've been developing cryptocurrency-related
> software for several months now, I've implemented some libraries for
> dealing with core bitcoin datastructures, made
> some custom builds of bitcoind and interfaced it with a few apps I've written.
> 
> In doing so, I've come to appreciate just how little of the potential
> for the bitcoin protocol is being exploited right now...
> not only in terms of the script features but in terms of the potential
> commands and node types that could exist.
> 
> For instance, the protocol spec at
> https://en.bitcoin.it/wiki/Protocol_specification only has 16 commands
> listed and
> only one service type...despite having a full 12 bytes for a command
> code and a full eight bytes for a services
> type.
> 
> The fact that only one node service type is specified is probably due
> to the fact that the satoshi client was written
> to be a standalone monolithic app that took care of all the essential
> needs for a network of peers.
> i.e. block chain storage/management, transaction signing/verification,
> key generation/wallet management, block mining, etc...
> However, I think there's an urgent need for breaking up all these
> different tasks into separate components that can run as independent
> services on different types of devices.
> 
> One of the big issues I'm dealing with now pertains to block chain
> storage. As of right now, it is implemented as sequential
> disk files using Berkeley DB in the satoshi client. Then you have
> other projects that have been using SQL tables, etc...
> But I believe the direction this really needs to move towards is some
> sort of distributed hash table...and the database queries
> should be performed using the bitcoin protocol itself. Perhaps adding
> a few more commands. As things stand right now,
> the only way to query for transactions or blocks is by their hash. And
> once a transaction gets incorporated into a block and
> removed from the transaction pool, one can no longer query it by the
> transaction hash without stepping outside the bitcoin protocol.
> We need access to the disk file that stores the blocks whether it be
> via Berkeley DB or SQL or whatever.
> 
> I propose an extension to the bitcoin protocol to provide methods for
> performing more sophisticated queries, such as "Give me
> an inventory of transactions involving this particular public key" or
> "Give me an inventory all transactions in the last n blocks with
> unredeemed outputs." This could be done by adding a few more commands.
> 
> Furthermore, I propose a new network services type for nodes that
> serve as block chain/transaction pool storage.
> 
> Of couse, any peer that wishes to verify the integrity of the block
> chain would still have to download at the very least
> all the block headers...and to be completely sure, also all the blocks
> themselves...and verify everything. But it would be
> very nice to be able to run thin services that can rely on other
> network peers to do this work. It is still possible to attain
> a high level of confidence in the integrity by querying multiple peers
> for similar objects and comparing. It is also possible
> to run your own dedicated block chain storage servers which you trust.
> 
> There are other ideas I have for other types of services, too.
> 
> Anyhow, I'm just throwing this out there...if anyone's interested I'd
> love to develop these ideas further and help put together some
> specs.
> 
> -Eric Lombrozo
> 
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for 
> developers. It will provide a great way to learn Windows Azure and what it 
> provides. You can attend the event by watching it streamed LIVE online.  
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From decker.christian at gmail.com  Sat Dec 17 13:37:21 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Sat, 17 Dec 2011 14:37:21 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
Message-ID: <CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>

A while back I had proposed a similar idea to the DHT, although my main
goal was to reduce the need for broadcasts.

My idea was to structure the network in a hypercube and use prefixes to
address different parts of the network, and use those prefixes also to find
the location where an item (transaction, block, ...) should be stored. Each
vertex in the hypercube is a small, highly connected, cluster of nodes. The
storage would be distributed, messages are routed on behalf of others,
which makes finding the origin of the query hard to find (think Tor), each
node would have to store only O(log(p)) items, with p being the prefix
length, maximum number of hops is equal to the dimension of the hypercube
O(log(n)).

Newly created transaction will be sent directly to the location they'll be
stored and miners retrieve new transactions at regular intervals. It might
increase delays to the confirmations, but it reduces the number of
broadcasts and storage requirements on nodes greatly.

Regards,
Chris


On Sat, Dec 17, 2011 at 2:13 PM, Michael Gr?nager <gronager at ceptacle.com>wrote:

> Hey Eric,
>
> Two comments.
>
> 1.
> The ability to query for transactions belonging to pubkeys or bitcoin
> addresses is supported today by several implementations:
> * blockexplorer.com
> * bitcoin-js
> * my own libBTC (will more on this soon)
>
> To query for transactions you need to use json-rpc and not the bitcoin
> protocol, however. But still the purpose is the same: to be able to build
> thin clients that can rely on a server for storing the blockchain and
> keeping connected on the p2p network.
>
> The reason for not having these queries part of the standard protocol (I
> think) are as they breaks anonymity, and that you would actually encourage
> people to participate in the p2p.
>
> 2. The second part you mention, to some how move the storage of the
> blockchain into a DHT based storage would be quite nice. The benefit of
> this is that it could be a way to integrate the smaller clients into the
> network without breaking the anonymity. But it should be thought out quite
> carefully. Further, if each client only store a fraction of the blockchain
> we should work out what fraction that need to be in order to ensure a
> similar service level. I would be happy to work with you on this.
>
> Cheers,
>
> Michael
>
> On 17/12/2011, at 08:41, Eric Lombrozo wrote:
>
> > Hey, guys.
> >
> > I haven't posted here before so I'll introduce myself. My name's Eric,
> > I've been developing cryptocurrency-related
> > software for several months now, I've implemented some libraries for
> > dealing with core bitcoin datastructures, made
> > some custom builds of bitcoind and interfaced it with a few apps I've
> written.
> >
> > In doing so, I've come to appreciate just how little of the potential
> > for the bitcoin protocol is being exploited right now...
> > not only in terms of the script features but in terms of the potential
> > commands and node types that could exist.
> >
> > For instance, the protocol spec at
> > https://en.bitcoin.it/wiki/Protocol_specification only has 16 commands
> > listed and
> > only one service type...despite having a full 12 bytes for a command
> > code and a full eight bytes for a services
> > type.
> >
> > The fact that only one node service type is specified is probably due
> > to the fact that the satoshi client was written
> > to be a standalone monolithic app that took care of all the essential
> > needs for a network of peers.
> > i.e. block chain storage/management, transaction signing/verification,
> > key generation/wallet management, block mining, etc...
> > However, I think there's an urgent need for breaking up all these
> > different tasks into separate components that can run as independent
> > services on different types of devices.
> >
> > One of the big issues I'm dealing with now pertains to block chain
> > storage. As of right now, it is implemented as sequential
> > disk files using Berkeley DB in the satoshi client. Then you have
> > other projects that have been using SQL tables, etc...
> > But I believe the direction this really needs to move towards is some
> > sort of distributed hash table...and the database queries
> > should be performed using the bitcoin protocol itself. Perhaps adding
> > a few more commands. As things stand right now,
> > the only way to query for transactions or blocks is by their hash. And
> > once a transaction gets incorporated into a block and
> > removed from the transaction pool, one can no longer query it by the
> > transaction hash without stepping outside the bitcoin protocol.
> > We need access to the disk file that stores the blocks whether it be
> > via Berkeley DB or SQL or whatever.
> >
> > I propose an extension to the bitcoin protocol to provide methods for
> > performing more sophisticated queries, such as "Give me
> > an inventory of transactions involving this particular public key" or
> > "Give me an inventory all transactions in the last n blocks with
> > unredeemed outputs." This could be done by adding a few more commands.
> >
> > Furthermore, I propose a new network services type for nodes that
> > serve as block chain/transaction pool storage.
> >
> > Of couse, any peer that wishes to verify the integrity of the block
> > chain would still have to download at the very least
> > all the block headers...and to be completely sure, also all the blocks
> > themselves...and verify everything. But it would be
> > very nice to be able to run thin services that can rely on other
> > network peers to do this work. It is still possible to attain
> > a high level of confidence in the integrity by querying multiple peers
> > for similar objects and comparing. It is also possible
> > to run your own dedicated block chain storage servers which you trust.
> >
> > There are other ideas I have for other types of services, too.
> >
> > Anyhow, I'm just throwing this out there...if anyone's interested I'd
> > love to develop these ideas further and help put together some
> > specs.
> >
> > -Eric Lombrozo
> >
> >
> ------------------------------------------------------------------------------
> > Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> > Microsoft is holding a special Learn Windows Azure training event for
> > developers. It will provide a great way to learn Windows Azure and what
> it
> > provides. You can attend the event by watching it streamed LIVE online.
> > Learn more at http://p.sf.net/sfu/ms-windowsazure
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111217/000eef2b/attachment.html>

From laanwj at gmail.com  Sat Dec 17 13:54:56 2011
From: laanwj at gmail.com (Wladimir)
Date: Sat, 17 Dec 2011 14:54:56 +0100
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <201112170132.26201.luke@dashjr.org>
References: <201112170132.26201.luke@dashjr.org>
Message-ID: <CA+s+GJAm9yBh=eu+KiN1kJou+0xQ39sSZ8JGM4nWsqt25gbK=g@mail.gmail.com>

I don't see reason why not. It could just be another, longer, address type.
The advantage being that it allows for shorter transactions in the block
chain (right?).

Wladimir

On Sat, Dec 17, 2011 at 7:32 AM, Luke-Jr <luke at dashjr.org> wrote:

> IMO, we should standardize and support public key addresses. While not
> ideal
> for humans, because of their length, it's a better fit for large QR Codes
> IMO.
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111217/f67c8cb3/attachment.html>

From bitcoin-list at bluematt.me  Sat Dec 17 16:15:46 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 17 Dec 2011 11:15:46 -0500
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <CAGQP0AFg7dMK4Rzm9M1Ur-jeQmAp85nKbE_Ry5sXr+Pw=e3EQg@mail.gmail.com>
References: <201112170132.26201.luke@dashjr.org>
	<CAGQP0AFg7dMK4Rzm9M1Ur-jeQmAp85nKbE_Ry5sXr+Pw=e3EQg@mail.gmail.com>
Message-ID: <1324138546.29801.3.camel@BMThinkPad.lan.bluematt.me>

On Sat, 2011-12-17 at 12:14 +0100, Jorge Tim?n wrote:
> Don't know much about QR codes, but I thought they have a length limitation.
> Why jav wants to use not just addresses but firstbits then?
Under no circumstances should the use of firstbits ever be supported.
It doesn't scale, not even close, especially as we (hopefully) move
towards SPV clients.  Also, it provides incentives for people to spam
the chain to get a firstbits address.  Never should that be supported.

Matt




From jordanmack at parhelic.com  Sat Dec 17 18:20:15 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Sat, 17 Dec 2011 10:20:15 -0800
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <1324138546.29801.3.camel@BMThinkPad.lan.bluematt.me>
References: <201112170132.26201.luke@dashjr.org>
	<CAGQP0AFg7dMK4Rzm9M1Ur-jeQmAp85nKbE_Ry5sXr+Pw=e3EQg@mail.gmail.com>
	<1324138546.29801.3.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <4EECDD5F.8030402@parhelic.com>

While I think firstbits is an interesting idea, I agree with Matt on 
this one. Firstbits, while being a clever idea, produces a less 
desirable solution in comparison to the current alias proposals.

In addition to Matt's reasons, I would like to add that it is still a 
block of random characters, just shorter. It creates the undesirable 
effect of having addresses short enough that people may try to type it 
in rather than pasting or scanning, which is more error prone.

One obvious scenario for potential exploitation would be if a large 
organization adopted a firstbits address for donations. Others could 
immediately try to collect similar addresses in hopes of a typo. A 
second would be if the organization published the firstbits address on a 
poster in a public location. Someone could easily secure a firstbits 
address which was one character longer, then stencil that extra 
character on to the poster.



On 12/17/2011 8:15 AM, Matt Corallo wrote:
> On Sat, 2011-12-17 at 12:14 +0100, Jorge Tim?n wrote:
>> Don't know much about QR codes, but I thought they have a length limitation.
>> Why jav wants to use not just addresses but firstbits then?
> Under no circumstances should the use of firstbits ever be supported.
> It doesn't scale, not even close, especially as we (hopefully) move
> towards SPV clients.  Also, it provides incentives for people to spam
> the chain to get a firstbits address.  Never should that be supported.
>
> Matt
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From gavinandresen at gmail.com  Sat Dec 17 19:06:56 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 17 Dec 2011 14:06:56 -0500
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com>
Message-ID: <CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com>

There was a discussion about using DHT's for transactions a while back
on the forums:
?https://bitcointalk.org/index.php?topic=723.msg7908#msg7908

If you can figure out a scheme that is secure from malicious Sybil
attacks then you're smarter than I am.

And additional protocol messages for lightweight clients is a good
idea, as long as they don't make it a lot easier to pull off a
denial-of-service attacks on a "full" node.

Although I do also wonder if we'll ever run into a problem with full
nodes refusing to answer requests from lightweight nodes (there might
be a tragedy-of-the-commons problem lurking there).

--
--
Gavin Andresen



From gmaxwell at gmail.com  Sat Dec 17 19:28:55 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 17 Dec 2011 14:28:55 -0500
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
Message-ID: <CAAS2fgRqabDpXBZ7M8BAdzDAsRwFED4BPzoQJkLkwLOeURuXLA@mail.gmail.com>

On Sat, Dec 17, 2011 at 8:37 AM, Christian Decker
<decker.christian at gmail.com> wrote:
> My idea was to structure the network in a hypercube and use prefixes to
> address different parts of the network, and use those prefixes also to find
> the location where an item (transaction, block, ...) should be stored. Each
> vertex in the hypercube is a small, highly connected, cluster of nodes.

I strongly advise people who are not me to use this sort of scheme, so
that I may enjoy the benefits of robbing you blind.


.... But really, saying "some sort of DHT" without basically
presenting a working implementation that demonstrates the feasibility
of solving the very difficulty attack resistance problems these
schemes have basically triggers my time-wasting-idiot filter.  (Or
likewise, presenting a fixed network structure that would have a nice
small and easily identifiable min-cut...)

I don't doubt I'm completely alone in this,  though perhaps I'm more
of a jerk about it.   Even if your actual proposal might have some
merit you should be aware that every fool who has operated a
bittorrent client has heard of "DHT" and, although they may not even
understand what a hash table is, many have no reservation going around
suggesting them for _every_ distributed systems problem. Want to scale
matrix multiples? DHT! Want to validate bitcoin blocks? DHT! Network
syncup slow (because It's bound on validation related local IO)? DHT!
I suggest people solve the real problems first, then worry what name
to give the solutions. ;)

To address gavin's tragedy of the commons concern, one useful feature
would being able to mutually authenticate a peer... then full nodes
could pick and choose which lite nodes they're willing to do (a lot
of) hard work for. This would also be valuable because some modes of
lite operation require non-zero trust of the full node being queried.



From decker.christian at gmail.com  Sat Dec 17 20:34:14 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Sat, 17 Dec 2011 21:34:14 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CAAS2fgRqabDpXBZ7M8BAdzDAsRwFED4BPzoQJkLkwLOeURuXLA@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<CAAS2fgRqabDpXBZ7M8BAdzDAsRwFED4BPzoQJkLkwLOeURuXLA@mail.gmail.com>
Message-ID: <CALxbBHWvJwOvnpGjN+A3MpzxrvzFGuJ0JBv6z_zz99Hvs0T+yg@mail.gmail.com>

Criticism accepted, although I'd appreciate it if you supply some reasons
about why it's such a bad idea :-)
The idea was never really popular and before starting work on a real
implementation I wanted to test the water, and should it turn out it's
complete non-sense I'm happy to accept that.

I don't want to have a DHT for the DHTs sake, I was more interested in
reducing the number of messages that need to be sent around the network,
since network load is going to be a major problem if we ever grow beyond a
certain point.

Just wanting to brainstorm.

Regards,
Chris
On Sat, Dec 17, 2011 at 8:28 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Sat, Dec 17, 2011 at 8:37 AM, Christian Decker
> <decker.christian at gmail.com> wrote:
> > My idea was to structure the network in a hypercube and use prefixes to
> > address different parts of the network, and use those prefixes also to
> find
> > the location where an item (transaction, block, ...) should be stored.
> Each
> > vertex in the hypercube is a small, highly connected, cluster of nodes.
>
> I strongly advise people who are not me to use this sort of scheme, so
> that I may enjoy the benefits of robbing you blind.
>
>
> .... But really, saying "some sort of DHT" without basically
> presenting a working implementation that demonstrates the feasibility
> of solving the very difficulty attack resistance problems these
> schemes have basically triggers my time-wasting-idiot filter.  (Or
> likewise, presenting a fixed network structure that would have a nice
> small and easily identifiable min-cut...)
>
> I don't doubt I'm completely alone in this,  though perhaps I'm more
> of a jerk about it.   Even if your actual proposal might have some
> merit you should be aware that every fool who has operated a
> bittorrent client has heard of "DHT" and, although they may not even
> understand what a hash table is, many have no reservation going around
> suggesting them for _every_ distributed systems problem. Want to scale
> matrix multiples? DHT! Want to validate bitcoin blocks? DHT! Network
> syncup slow (because It's bound on validation related local IO)? DHT!
> I suggest people solve the real problems first, then worry what name
> to give the solutions. ;)
>
> To address gavin's tragedy of the commons concern, one useful feature
> would being able to mutually authenticate a peer... then full nodes
> could pick and choose which lite nodes they're willing to do (a lot
> of) hard work for. This would also be valuable because some modes of
> lite operation require non-zero trust of the full node being queried.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111217/6edf419e/attachment.html>

From theymos at mm.st  Sat Dec 17 21:49:18 2011
From: theymos at mm.st (theymos)
Date: Sat, 17 Dec 2011 15:49:18 -0600
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com><82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com><CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com><CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com>
	<CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com>
Message-ID: <1324158558.26106.140661012932641@webmail.messagingengine.com>

On Sat, Dec 17, 2011, at 02:06 PM, Gavin Andresen wrote:
> Although I do also wonder if we'll ever run into a problem with full
> nodes refusing to answer requests from lightweight nodes (there might
> be a tragedy-of-the-commons problem lurking there).

This seems likely. Also, even if many full nodes are willing to donate
resources, there may simply be too few full nodes to handle the load.

My preferred solution for handling scalability in the future is to
have lightweight clients download only headers and Merkle trees (which
are both small and easy to distribute), and then require senders to
contact recipients directly in order to transmit their transactions.
Then lightweight clients never need full blocks to build their
balances, and full nodes don't have to handle expensive queries from
lightweight clients.

Under this scheme, the current broadcast system could be used among full
nodes for a long time. Since clients wouldn't ever need to talk to full
nodes, they could form a separate network with less reliable
broadcasting and perhaps a fancier network architecture. Members of the
full network would connect to the most reliable members of the client
network in order to broadcast headers and Merkle trees and receive
transactions. Full nodes would *not* answer any client queries, so
dealing with the client network would not require many resources, and
miners would probably have an incentive to do it. (Creating a "separate"
network like this can be done by using the services field.)

I don't think requiring senders to email some data to the recipient
would be too burdensome, though it's probably also possible to design a
system where even offline recipients can receive transactions through
the Bitcoin network.



From luke at dashjr.org  Sat Dec 17 21:52:19 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 17 Dec 2011 16:52:19 -0500
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <201112170132.26201.luke@dashjr.org>
References: <201112170132.26201.luke@dashjr.org>
Message-ID: <201112171652.22148.luke@dashjr.org>

I propose that full public key addresses be required to be "compact" (length 
33), and use version 21 (begins with '4', and is redundant with ver 20 for 20-
byte data). Any reason this wouldn't be workable?



From gmaxwell at gmail.com  Sat Dec 17 23:46:34 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 17 Dec 2011 18:46:34 -0500
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <201112171652.22148.luke@dashjr.org>
References: <201112170132.26201.luke@dashjr.org>
	<201112171652.22148.luke@dashjr.org>
Message-ID: <CAAS2fgSjbkS03x+e21pRvA9jswy7OdKP4Qe3uBLe_kTbBdv77g@mail.gmail.com>

On Sat, Dec 17, 2011 at 4:52 PM, Luke-Jr <luke at dashjr.org> wrote:
> I propose that full public key addresses be required to be "compact" (length
> 33), and use version 21 (begins with '4', and is redundant with ver 20 for 20-
> byte data). Any reason this wouldn't be workable?

Would introduce yet another address type that services will have to cope with.

No currently deployed sofware knows how to spend it.

No currently deployed software knows how to receive it.

All pay-to-pubkey schemes (point compressed or otherwise) shift
storage to TXN _output_ scripts which are the least prunable place, so
for nodes which are pruning any pay to pubkey scheme will result in
more storage than pay to address.

Ignoring pruning, pay-to-address + key recovery is quite a bit smaller
than pay-to-compressed pubkey.

The downsides to op-eval2+recovery were the lack of software, but
we're in an equal boat with this.

Excitement over key recovery fell was diminished when it was pointed
out that it only saves space in input scripts which wasn't so
important because they're quickly prunable.  If you accept that
pruning will someday be common on many nodes then you should prefer
pay to address (since its smallest in that case).  If you assume they
won't be, you should prefer pay to address plus key recovery (since
its the smallest without pruning).

Pay to non-compressed pubkey is smaller than
pay-to-address-without-recovery assuming you don't prune, and its more
deployable because nodes can already recieve it.  It's larger if you
do prune, and it's larger than recovery either way.  Pay-to-compressed
has all the disadvantages, it still larger than recovery and doesn't
have the advantage of already deployed software.

Sorry to be curt? I'm a little irritated that discussion on recovery
in OP_EVAL was dropped because "input script size doesn't matter
because of pruning" and now people are talking about adding another
address type which creates seriously bloated transactions where there
is pruning, because its slightly smaller in the no-pruning case (and
again, still not as small for key recovery).



From luke at dashjr.org  Sun Dec 18 00:28:12 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 17 Dec 2011 19:28:12 -0500
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <CAAS2fgSjbkS03x+e21pRvA9jswy7OdKP4Qe3uBLe_kTbBdv77g@mail.gmail.com>
References: <201112170132.26201.luke@dashjr.org>
	<201112171652.22148.luke@dashjr.org>
	<CAAS2fgSjbkS03x+e21pRvA9jswy7OdKP4Qe3uBLe_kTbBdv77g@mail.gmail.com>
Message-ID: <201112171928.13504.luke@dashjr.org>

On Saturday, December 17, 2011 6:46:34 PM Gregory Maxwell wrote:
> Sorry to be curt? I'm a little irritated that discussion on recovery
> in OP_EVAL was dropped because "input script size doesn't matter
> because of pruning" and now people are talking about adding another
> address type which creates seriously bloated transactions where there
> is pruning, because its slightly smaller in the no-pruning case (and
> again, still not as small for key recovery).

I missed that bit. I'm willing to defer full OP_EVAL support on Eligius in 
order to enable key recovery...



From luke at dashjr.org  Sun Dec 18 00:39:32 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 17 Dec 2011 19:39:32 -0500
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <201112171928.13504.luke@dashjr.org>
References: <201112170132.26201.luke@dashjr.org>
	<CAAS2fgSjbkS03x+e21pRvA9jswy7OdKP4Qe3uBLe_kTbBdv77g@mail.gmail.com>
	<201112171928.13504.luke@dashjr.org>
Message-ID: <201112171939.33235.luke@dashjr.org>

On Saturday, December 17, 2011 7:28:12 PM Luke-Jr wrote:
> On Saturday, December 17, 2011 6:46:34 PM Gregory Maxwell wrote:
> > Sorry to be curt? I'm a little irritated that discussion on recovery
> > in OP_EVAL was dropped because "input script size doesn't matter
> > because of pruning" and now people are talking about adding another
> > address type which creates seriously bloated transactions where there
> > is pruning, because its slightly smaller in the no-pruning case (and
> > again, still not as small for key recovery).
> 
> I missed that bit. I'm willing to defer full OP_EVAL support on Eligius in
> order to enable key recovery...

In fact, as long as we have this opportunity to enable new opcodes, maybe we 
should spend some time revisiting what doors that opens...



From jordanmack at parhelic.com  Sun Dec 18 00:44:58 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Sat, 17 Dec 2011 16:44:58 -0800
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <1324158558.26106.140661012932641@webmail.messagingengine.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com><82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com><CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com><CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com>
	<CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com>
	<1324158558.26106.140661012932641@webmail.messagingengine.com>
Message-ID: <4EED378A.8090303@parhelic.com>

While using DHT for storage of the block chain is an intriguing concept, 
I do not see how it is feasible. As Gavin noted, DHT is a system that is 
difficult to impossible to guarantee against data loss or manipulation.

Even if we found a way to store the block chain in DHT, how would 
transactions be verified? As Gavin noted, you could ask the network, but 
cannot necessarily trust the peers you are connected to. Verification of 
the full block chain allows the client to trust no one.

I also do not see how DHT would solve the problem of scalability in 
regards to broadcast messages, although I am definitely interested in 
the concept.



From jordanmack at parhelic.com  Sun Dec 18 01:27:10 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Sat, 17 Dec 2011 17:27:10 -0800
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <1324158558.26106.140661012932641@webmail.messagingengine.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com><82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com><CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com><CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com>
	<CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com>
	<1324158558.26106.140661012932641@webmail.messagingengine.com>
Message-ID: <4EED416E.3010902@parhelic.com>

theymos' full node and lite node write up got me thinking.

There are two problems here that we are trying to solve:
- The scalability of broadcast messages.
- The resources required to sync and verify the block chain.

I see three distinct groups of clients:
- Miners (dedicated servers & desktops)
- Full (desktops)
- Lite (mobile devices)

To address scalability of broadcasting, there could be three separate 
modes of operation (or client types). Mining nodes would retain the 
complete block chain, and share all messages between other mining nodes. 
Full nodes would retain the complete block chain, receive new block 
information from mining nodes, and share block data between each other. 
Lite clients would not contain the block chain, or any broadcast 
messages, and would query against a full client for all actions.

Mining nodes would handle the brunt of the barrage of messages. All 
block and transaction messages would have to be broadcast across all 
mining nodes. This would be essentially the same as all clients 
currently operate today.

A full client would be one step down from a mining client. They only 
need new block data, and new transactions that pertain to them (for 
instant notification). All other broadcast data is irrelevant to them. 
They would get new block data from connections to mining nodes, or from 
other peer nodes. The transaction submission could be sent directly to a 
connected mining node, or bounced through other connected full nodes, 
with a random number hops. This would disassociate the IP from the 
transaction, similarly to Tor.

To address the need for instant transaction notification, without 
broadcasting to to everyone, notification messages would be sent 
directly from one full client to the other. This is where aliases come 
in. When an alias is resolved, it includes both a Bitcoin address, and a 
list of IPs to notify of the transaction. This reveals the IP of the 
sender and receiver to each other. If the sender or receiver wishes to 
remain anonymous, then they could opt out of notification, and wait for 
the transaction to appear in the block chain.

A lite client would connect to a "trusted" full client over an encrypted 
connection. This would essentially function as a remote control to a 
full client, and allow a user to send, receive, and confirm normally, 
but without the overhead. A full client could reside on the home 
computer or server, which is owned by the user. A hosted wallet could 
also be used just as easily.

I don't like the idea of a header only client, unless this is just an 
interim action until the full block chain is downloaded in the 
background. Development of these types of clients is probably 
inevitable, but I believe that this breaks the most fundamental aspects 
of Bitcoin's security model. If a client has only headers, it cannot do 
full verification, and it is trusting the data from random anonymous peers.





From jgarzik at exmulti.com  Sun Dec 18 01:07:55 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 17 Dec 2011 20:07:55 -0500
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EED378A.8090303@parhelic.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com>
	<CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com>
	<1324158558.26106.140661012932641@webmail.messagingengine.com>
	<4EED378A.8090303@parhelic.com>
Message-ID: <CA+8xBpc5ke2W7kc8NQr6nWrvNmB-AmBTC2uTTW3H+KqJLUpBcg@mail.gmail.com>

On Sat, Dec 17, 2011 at 7:44 PM, Jordan Mack <jordanmack at parhelic.com> wrote:
> While using DHT for storage of the block chain is an intriguing concept,
> I do not see how it is feasible. As Gavin noted, DHT is a system that is
> difficult to impossible to guarantee against data loss or manipulation.
>
> Even if we found a way to store the block chain in DHT, how would
> transactions be verified? As Gavin noted, you could ask the network, but
> cannot necessarily trust the peers you are connected to. Verification of
> the full block chain allows the client to trust no one.

Well, the block chain data itself is internally self-validating.  As
long as you know the latest block's hash -- a big "if" -- there is no
problem downloading all other block chain data from DHT or any other
untrusted source.

In a malicious case, you would notice latest-hash differs from
non-malicious and wind up downloading multiple chains, when walking
hashes backwards through a DHT/lookup table.  So, a bit more work but
nothing fundamentally less secure _on a trust basis_.

Of course, I was focusing on data validation, which ignores other
factors such as DoS'ing the DHT.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From timon.elviejo at gmail.com  Sun Dec 18 12:15:26 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 18 Dec 2011 13:15:26 +0100
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <4EECDD5F.8030402@parhelic.com>
References: <201112170132.26201.luke@dashjr.org>
	<CAGQP0AFg7dMK4Rzm9M1Ur-jeQmAp85nKbE_Ry5sXr+Pw=e3EQg@mail.gmail.com>
	<1324138546.29801.3.camel@BMThinkPad.lan.bluematt.me>
	<4EECDD5F.8030402@parhelic.com>
Message-ID: <CAGQP0AE-OkJroyAN5jga_a-s8i_SSub9uSgTQBZDrQQfzC=bSg@mail.gmail.com>

2011/12/17, Jordan Mack <jordanmack at parhelic.com>:
> While I think firstbits is an interesting idea, I agree with Matt on
> this one. Firstbits, while being a clever idea, produces a less
> desirable solution in comparison to the current alias proposals.

I'm just saying is useful for the "green address" particular case.
People don't have to write or memorize the firstbit address, it's just
to have a shorter string to put it in the QR code. In this particular
case you don't really care about "squatting" or typographic errors
because the users are bot going to write or even see the firstbit
address. I think aliases are a better solution for the "memorizing use
case".

But anyway, reading some comments I feel I'm missing something about
this proposal. How can you save space by putting the whole public key
instead of just the address (a hash of the public key) with each
output?
Is this what it's being proposed?



From luke at dashjr.org  Sun Dec 18 14:03:33 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Dec 2011 09:03:33 -0500
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <CAGQP0AE-OkJroyAN5jga_a-s8i_SSub9uSgTQBZDrQQfzC=bSg@mail.gmail.com>
References: <201112170132.26201.luke@dashjr.org>
	<4EECDD5F.8030402@parhelic.com>
	<CAGQP0AE-OkJroyAN5jga_a-s8i_SSub9uSgTQBZDrQQfzC=bSg@mail.gmail.com>
Message-ID: <201112180903.34398.luke@dashjr.org>

On Sunday, December 18, 2011 7:15:26 AM Jorge Tim?n wrote:
> I'm just saying is useful for the "green address" particular case.

"Green addresses" are also a broken-by-design feature and should be 
discouraged.



From andyparkins at gmail.com  Sun Dec 18 14:16:08 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Sun, 18 Dec 2011 14:16:08 +0000
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EED416E.3010902@parhelic.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<1324158558.26106.140661012932641@webmail.messagingengine.com>
	<4EED416E.3010902@parhelic.com>
Message-ID: <201112181416.10034.andyparkins@gmail.com>

On Sunday 18 Dec 2011 01:27:10 Jordan Mack wrote:

> I don't like the idea of a header only client, unless this is just an
> interim action until the full block chain is downloaded in the
> background. Development of these types of clients is probably
> inevitable, but I believe that this breaks the most fundamental aspects
> of Bitcoin's security model. If a client has only headers, it cannot do
> full verification, and it is trusting the data from random anonymous
> peers.

I'm working on (slowly) making a client able to download-on-demand.  That is 
to say that the block chain headers would be downloaded and maintained, but 
the block bodies would be downloaded as needed for full verification.  It's 
certainly not possible with the current protocol; but it's certainly a 
conceivable application.  I suppose it slots between headers-only and full 
client conceptually.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From timon.elviejo at gmail.com  Sun Dec 18 14:28:36 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 18 Dec 2011 15:28:36 +0100
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <201112180903.34398.luke@dashjr.org>
References: <201112170132.26201.luke@dashjr.org>
	<4EECDD5F.8030402@parhelic.com>
	<CAGQP0AE-OkJroyAN5jga_a-s8i_SSub9uSgTQBZDrQQfzC=bSg@mail.gmail.com>
	<201112180903.34398.luke@dashjr.org>
Message-ID: <CAGQP0AF92xh_SSGOryTfedfPhVdjR3B7hcp9SM9t7Gj=syxs-w@mail.gmail.com>

I see it as a good start for POS payments. I don't know what flaw
you're referring to.

Back on topic, is actually putting the whole pub key in each output
what you're proposing?


2011/12/18, Luke-Jr <luke at dashjr.org>:
> On Sunday, December 18, 2011 7:15:26 AM Jorge Tim?n wrote:
>> I'm just saying is useful for the "green address" particular case.
>
> "Green addresses" are also a broken-by-design feature and should be
> discouraged.
>


-- 
Jorge Tim?n



From luke at dashjr.org  Sun Dec 18 14:34:37 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Dec 2011 09:34:37 -0500
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <CAGQP0AF92xh_SSGOryTfedfPhVdjR3B7hcp9SM9t7Gj=syxs-w@mail.gmail.com>
References: <201112170132.26201.luke@dashjr.org>
	<201112180903.34398.luke@dashjr.org>
	<CAGQP0AF92xh_SSGOryTfedfPhVdjR3B7hcp9SM9t7Gj=syxs-w@mail.gmail.com>
Message-ID: <201112180934.38718.luke@dashjr.org>

On Sunday, December 18, 2011 9:28:36 AM Jorge Tim?n wrote:
> Back on topic, is actually putting the whole pub key in each output
> what you're proposing?

Yes, just like is already done for generation, since it is more efficient 
*overall* for the block chain. sipa's key extraction is a MUCH better 
solution, however, so if we can get that without a block chain fork, I'm 
inclined to favour it.



From pieter.wuille at gmail.com  Sun Dec 18 15:42:06 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 18 Dec 2011 16:42:06 +0100
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <CAGQP0AE-OkJroyAN5jga_a-s8i_SSub9uSgTQBZDrQQfzC=bSg@mail.gmail.com>
References: <201112170132.26201.luke@dashjr.org>
	<CAGQP0AFg7dMK4Rzm9M1Ur-jeQmAp85nKbE_Ry5sXr+Pw=e3EQg@mail.gmail.com>
	<1324138546.29801.3.camel@BMThinkPad.lan.bluematt.me>
	<4EECDD5F.8030402@parhelic.com>
	<CAGQP0AE-OkJroyAN5jga_a-s8i_SSub9uSgTQBZDrQQfzC=bSg@mail.gmail.com>
Message-ID: <20111218154205.GA5304@ulyssis.org>

On Sun, Dec 18, 2011 at 01:15:26PM +0100, Jorge Tim?n wrote:
> But anyway, reading some comments I feel I'm missing something about
> this proposal. How can you save space by putting the whole public key
> instead of just the address (a hash of the public key) with each
> output?
> Is this what it's being proposed?

Yes. The reason is that currently a send-to-address puts the address in the
output script, while redeeming requires the full pubkey plus the signature
to be placed in the input script. Overall, this requires more space than a
send-to-pubkey, where the output contains the pubkey, and the input the
signature.

There are several possible improvements however, and they may not all have
been explained in this thread. To summarize:
* compressed public keys (33 byte pubkeys instead of 65 bytes)
* compact signatures (66 bytes instead of 72, including hash type byte)
* pubkey recovery (allows the public key to be derived from a compact signature)

The first is very easy to implement (see pull #649). Compact signatures 
and pubkey recovery require a change to the scripting language (though are
already implemented, as they are used for message signing).

These result in several combinations that could be proposed:
1) send-to-pubkeys-hash
   - currently the default addres type
2) send-to-recovered-pubkeys-hash-with-compact-signature-inside-op_eval
   - extend the scripting language inside OP_EVAL, as described in
     https://gist.github.com/1262449
   - use compact signatures
   - use key recovery, and never put a pubkey in the blockchain data
3) send-to-pubkey
   - traditional transaction type
4) send-to-compressed-pubkey
   - what Luke proposes as new address type
5) send-to-compressed-pubkeys-hash
   - what pull #649 would bring

Gregory Maxwell made a small table to compare these options:

  http://people.xiph.org/~greg/addr.compare.html

If you don't consider pruning, everything is better than send-to-pubkeys-hash
as we have now. Both using pubkeys instead of hashes, using compressed pubkeys
instead of full ones improve the situation independently, and using key
recovery is even better.

If you do consider pruning, the advantages are smaller, but it is far from
clear to me how pruning will be implemented in the future (as a pruning
node cannot function as a NODE_NETWORK service anymore).

-- 
Pieter



From theymos at mm.st  Sun Dec 18 17:09:39 2011
From: theymos at mm.st (theymos)
Date: Sun, 18 Dec 2011 11:09:39 -0600
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EED416E.3010902@parhelic.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com><82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com><CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com><CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com><CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com><1324158558.26106.140661012932641@webmail.messagingengine.com>
	<4EED416E.3010902@parhelic.com>
Message-ID: <1324228179.7053.140661013136581@webmail.messagingengine.com>

On Sat, Dec 17, 2011, at 05:27 PM, Jordan Mack wrote:
> I don't like the idea of a header only client, unless this is just an
> interim action until the full block chain is downloaded in the
> background. Development of these types of clients is probably
> inevitable, but I believe that this breaks the most fundamental
> aspects of Bitcoin's security model. If a client has only headers, it
> cannot do full verification, and it is trusting the data from random
> anonymous peers.

A headers-only client is much better than trusting anyone, since an
attacker needs >50% of the network's computational power to trick
such clients.

For everyone to keep being a full node, hardware costs would need to
constantly go down enough for all nodes to be able to handle enough
transactions to meet demand. If hardware doesn't become cheap enough
quickly enough, either some people would be unable to handle being full
nodes, or the max block size wouldn't rise enough to meet demand and
transaction fees would become noncompetitive.



From etotheipi at gmail.com  Sun Dec 18 18:06:09 2011
From: etotheipi at gmail.com (Alan Reiner)
Date: Sun, 18 Dec 2011 13:06:09 -0500
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <1324228179.7053.140661013136581@webmail.messagingengine.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com><82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com><CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com><CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com><CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com><1324158558.26106.140661012932641@webmail.messagingengine.com>	<4EED416E.3010902@parhelic.com>
	<1324228179.7053.140661013136581@webmail.messagingengine.com>
Message-ID: <4EEE2B91.1050908@gmail.com>

The whole point of having headers built at a constant size and 
generation rate is to minimize the amount of data needed to "understand" 
of the blockchain while simultaneously maximizing integrity/security in 
the presence of untrusted nodes.  Barring the 50%-attack, you only need 
a couple honest nodes out of 50 to stay safe (as long as you're waiting 
for your 6 confirmations).   In fact, I would argue that a full node 
(Satoshi client), has the same level of security as a headers-only 
client... because they both base *all* their verification decisions on 
computations that end with comparing hashes to the longest-chain headers.

In the case that an attacker figures out how to isolate your node 
entirely and start feeing you poisoned blocks, then you are vulnerable 
with any kind of node, full or lightweight.  I don't see where the 
reduced security is.

The only issue I see is that a truly light-weight, headers-only node 
will be having to download an entire block to get one transaction it 
needs.  This would be significantly alleviated if nodes can start 
requesting merkle-trees directly, even without merkle-branch-pruning.   
If a node can ask for a tx and the tx-hash-list of the block that 
incorporated that tx,  he can easily verify his tx against his 
no-need-to-trust-anyone headers, and doesn't have to download MBs for 
every one.

As for blockchain pruning... I think it's absolutely critical to find a 
way to do this, /for all nodes/.  I am swayed by Dan Kaminsky's 
scalability warnings, and my instinct tells me that leaving full 
verification to a select few deep-pockets nodes in the future opens up 
all sorts of centralization/power-corporation issues that is contrary to 
the Bitcoin concept.  It is in everyone's best interest to make it as 
easy as possible for /anyone/ to act as a full node (if possible).  As 
such, I believe that the current system of minimizing TxOut size is the 
right one.  TxIns take up 0 bytes space in the long-run when taking into 
account any blockchain pruning/snapshot idea (except for nLocktime/seq 
transactions where the TxIn might have to be saved).

-Alan





On 12/18/2011 12:09 PM, theymos wrote:
> On Sat, Dec 17, 2011, at 05:27 PM, Jordan Mack wrote:
>> I don't like the idea of a header only client, unless this is just an
>> interim action until the full block chain is downloaded in the
>> background. Development of these types of clients is probably
>> inevitable, but I believe that this breaks the most fundamental
>> aspects of Bitcoin's security model. If a client has only headers, it
>> cannot do full verification, and it is trusting the data from random
>> anonymous peers.
> A headers-only client is much better than trusting anyone, since an
> attacker needs>50% of the network's computational power to trick
> such clients.
>
> For everyone to keep being a full node, hardware costs would need to
> constantly go down enough for all nodes to be able to handle enough
> transactions to meet demand. If hardware doesn't become cheap enough
> quickly enough, either some people would be unable to handle being full
> nodes, or the max block size wouldn't rise enough to meet demand and
> transaction fees would become noncompetitive.
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111218/e262a49a/attachment.html>

From zgenjix at yahoo.com  Sun Dec 18 18:47:54 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 18 Dec 2011 10:47:54 -0800 (PST)
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EEE2B91.1050908@gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com><82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com><CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com><CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com><CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com><1324158558.26106.140661012932641@webmail.messagingengine.com>
	<4EED416E.3010902@parhelic.com>
	<1324228179.7053.140661013136581@webmail.messagingengine.com>
	<4EEE2B91.1050908@gmail.com>
Message-ID: <1324234074.548.YahooMailNeo@web121006.mail.ne1.yahoo.com>

Has anyone considered 'snapshot' frames (blocks).

Message to node:

getsnapshot: hash

Node responds with a 'block' message.

Then the hash for that particular snapshot is hardcoded into the sourcecode. It would replace the checkpoints and use the last hash in that list.

Validating blocks is pretty fast right up until block 135k, which is where time taken balloons and starts become exponentially slower. As blockchain grows linearly, resources needed grows exponentially if you think about it.



________________________________
 From: Alan Reiner <etotheipi at gmail.com>
To: bitcoin-development at lists.sourceforge.net 
Sent: Sunday, December 18, 2011 6:06 PM
Subject: Re: [Bitcoin-development] Protocol extensions
 

The whole point of having headers built at a constant size and generation rate is to minimize the amount of data needed to "understand" of the blockchain while simultaneously maximizing integrity/security in the presence of untrusted nodes.? Barring the 50%-attack, you only need a couple honest nodes out of 50 to stay safe (as long as you're waiting for your 6 confirmations).?? In fact, I would argue that a full node (Satoshi client), has the same level of security as a headers-only client... because they both base all their verification decisions on computations that end with comparing hashes to the longest-chain headers.

In the case that an attacker figures out how to isolate your node
    entirely and start feeing you poisoned blocks, then you are
    vulnerable with any kind of node, full or lightweight.? I don't see
    where the reduced security is.? 

The only issue I see is that a truly light-weight, headers-only node
    will be having to download an entire block to get one transaction it
    needs.? This would be significantly alleviated if nodes can start
    requesting merkle-trees directly, even without
    merkle-branch-pruning. ? If a node can ask for a tx and the
    tx-hash-list of the block that incorporated that tx,? he can easily
    verify his tx against his no-need-to-trust-anyone headers, and
    doesn't have to download MBs for every one.? 

As for blockchain pruning... I think it's absolutely critical to
    find a way to do this, for all nodes.? I am swayed by Dan Kaminsky's scalability warnings, and my instinct tells me that leaving full verification to a select few deep-pockets nodes in the future opens up all sorts of centralization/power-corporation issues that is contrary to the Bitcoin concept.? It is in everyone's best interest to make it as easy as possible for anyone to act as a full node (if possible).? As such, I believe that the current system of minimizing TxOut size is the right one.? TxIns take up 0 bytes space in the long-run when taking into account any blockchain pruning/snapshot idea (except for nLocktime/seq transactions where the TxIn might have to be saved).? 

-Alan





On 12/18/2011 12:09 PM, theymos wrote: 
On Sat, Dec 17, 2011, at 05:27 PM, Jordan Mack wrote: 
>I don't like the idea of a header only client, unless this is just an
interim action until the full block chain is downloaded in the
background. Development of these types of clients is probably
inevitable, but I believe that this breaks the most fundamental
aspects of Bitcoin's security model. If a client has only headers, it
cannot do full verification, and it is trusting the data from random
anonymous peers. 
>A headers-only client is much better than trusting anyone, since an
attacker needs >50% of the network's computational power to trick
such clients. For everyone to keep being a full node, hardware costs would need to
constantly go down enough for all nodes to be able to handle enough
transactions to meet demand. If hardware doesn't become cheap enough
quickly enough, either some people would be unable to handle being full
nodes, or the max block size wouldn't rise enough to meet demand and
transaction fees would become noncompetitive. ------------------------------------------------------------------------------
Learn Windows Azure Live!  Tuesday, Dec 13, 2011
Microsoft is holding a special Learn Windows Azure training event for 
developers. It will provide a great way to learn Windows Azure and what it 
provides. You can attend the event by watching it streamed LIVE online.  
Learn more at http://p.sf.net/sfu/ms-windowsazure
_______________________________________________
Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development 

------------------------------------------------------------------------------
Learn Windows Azure Live!? Tuesday, Dec 13, 2011
Microsoft is holding a special Learn Windows Azure training event for 
developers. It will provide a great way to learn Windows Azure and what it 
provides. You can attend the event by watching it streamed LIVE online.? 
Learn more at http://p.sf.net/sfu/ms-windowsazure
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111218/3d1108f0/attachment.html>

From timon.elviejo at gmail.com  Sun Dec 18 19:37:16 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 18 Dec 2011 20:37:16 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <1324228179.7053.140661013136581@webmail.messagingengine.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<CABsx9T0puk3CWH1cfNHMSVEoCPaLJJWNJ+H5ObCERZrzMbrTyA@mail.gmail.com>
	<CABsx9T06-GA5+KNdr_XzP_M4Av8nEsnMXL29tk078wooZg=RZw@mail.gmail.com>
	<1324158558.26106.140661012932641@webmail.messagingengine.com>
	<4EED416E.3010902@parhelic.com>
	<1324228179.7053.140661013136581@webmail.messagingengine.com>
Message-ID: <CAGQP0AGAgPWpfjDouRcOR3Gu1LWSEJgWxB-JK5Qq0wiP25_CdQ@mail.gmail.com>

2011/12/17, theymos <theymos at mm.st>:
> My preferred solution for handling scalability in the future is to
> have lightweight clients download only headers and Merkle trees (which
> are both small and easy to distribute), and then require senders to
> contact recipients directly in order to transmit their transactions.
> Then lightweight clients never need full blocks to build their
> balances, and full nodes don't have to handle expensive queries from
> lightweight clients.

This idea is really interesting. Is there any drawback I don't see?



From timon.elviejo at gmail.com  Sun Dec 18 19:50:13 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 18 Dec 2011 20:50:13 +0100
Subject: [Bitcoin-development] Pubkey addresses
In-Reply-To: <20111218154205.GA5304@ulyssis.org>
References: <201112170132.26201.luke@dashjr.org>
	<CAGQP0AFg7dMK4Rzm9M1Ur-jeQmAp85nKbE_Ry5sXr+Pw=e3EQg@mail.gmail.com>
	<1324138546.29801.3.camel@BMThinkPad.lan.bluematt.me>
	<4EECDD5F.8030402@parhelic.com>
	<CAGQP0AE-OkJroyAN5jga_a-s8i_SSub9uSgTQBZDrQQfzC=bSg@mail.gmail.com>
	<20111218154205.GA5304@ulyssis.org>
Message-ID: <CAGQP0AH5okBuGxDeFPJ8diCs_h5s-1g+em72O6jXg+Mmxcxy=g@mail.gmail.com>

Now I get it. Thank you.
You save space by having shorter scripts in transactions.



From timon.elviejo at gmail.com  Sun Dec 18 21:05:11 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 18 Dec 2011 22:05:11 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<4EEB7E98.8030006@dot-bit.org>
	<CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
	<4EEBBD84.6020907@dot-bit.org>
	<CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
Message-ID: <CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>

If we chose the simple URI proposal namecoin can still be integrated
to map the IP of the server by those who want to.
Does it removes the necessity of the certificates?
If so, we should let people decide between HTTP, HTTPS, namecoin or
whatever they trust.

Shouldn't we be also discussing the valid format of the answered
message? I mean fields like "amount", "concept" and such.



From jordanmack at parhelic.com  Sun Dec 18 21:18:58 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Sun, 18 Dec 2011 13:18:58 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<1323979147.27319.140661012141129@webmail.messagingengine.com>
	<4EEB7E98.8030006@dot-bit.org>
	<CAJna-HjXp4XEHnbmX0HKsMDmnxoWQQMmqujN+D9nLV0Zz_omcg@mail.gmail.com>
	<4EEBBD84.6020907@dot-bit.org>
	<CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
	<CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
Message-ID: <4EEE58C2.1040908@parhelic.com>

I can't speak for Namecoin. As for the HTTPS requirement, I'm on the 
fence. Without it, the resolution is open to a man in the middle attack. 
Perhaps HTTPS should be required, and if HTTP is used, a large warning 
message is displayed.

As for the answered message format, is JSON the assumed structure that 
would be used?


On 12/18/2011 1:05 PM, Jorge Tim?n wrote:
> If we chose the simple URI proposal namecoin can still be integrated
> to map the IP of the server by those who want to.
> Does it removes the necessity of the certificates?
> If so, we should let people decide between HTTP, HTTPS, namecoin or
> whatever they trust.
>
> Shouldn't we be also discussing the valid format of the answered
> message? I mean fields like "amount", "concept" and such.
>



From moon at justmoon.de  Sun Dec 18 21:19:06 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Sun, 18 Dec 2011 22:19:06 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
Message-ID: <4EEE58CA.5090902@justmoon.de>

Hey Chris,

> The storage would be distributed, messages are routed on behalf of 
> others, which makes finding the origin of the query hard to find 
> (think Tor)

This type of intermediate routing makes Tor slow 
<https://svn.torproject.org/svn/projects/roadmaps/2009-03-11-performance.pdf>. 
Bitcoin does not and imho should not make anonymity guarantees. Many 
users do not need them.

Let those who want anonymity connect through Tor, Freenet, etc. It's 
easy to add anonymity via an extra layer, but it is impossible to add 
performance on top of a slow system.

That's really the only thing I wanted to point out - if you do DHTs, 
focus on performance, not anonymity. :)

Cheers,

Stefan

On 12/17/2011 2:37 PM, Christian Decker wrote:
> A while back I had proposed a similar idea to the DHT, although my 
> main goal was to reduce the need for broadcasts.
>
> My idea was to structure the network in a hypercube and use prefixes 
> to address different parts of the network, and use those prefixes also 
> to find the location where an item (transaction, block, ...) should be 
> stored. Each vertex in the hypercube is a small, highly connected, 
> cluster of nodes. The storage would be distributed, messages are 
> routed on behalf of others, which makes finding the origin of the 
> query hard to find (think Tor), each node would have to store only 
> O(log(p)) items, with p being the prefix length, maximum number of 
> hops is equal to the dimension of the hypercube O(log(n)).
>
> Newly created transaction will be sent directly to the location 
> they'll be stored and miners retrieve new transactions at regular 
> intervals. It might increase delays to the confirmations, but it 
> reduces the number of broadcasts and storage requirements on nodes 
> greatly.
>
> Regards,
> Chris
>
>
> On Sat, Dec 17, 2011 at 2:13 PM, Michael Gr?nager 
> <gronager at ceptacle.com <mailto:gronager at ceptacle.com>> wrote:
>
>     Hey Eric,
>
>     Two comments.
>
>     1.
>     The ability to query for transactions belonging to pubkeys or
>     bitcoin addresses is supported today by several implementations:
>     * blockexplorer.com <http://blockexplorer.com>
>     * bitcoin-js
>     * my own libBTC (will more on this soon)
>
>     To query for transactions you need to use json-rpc and not the
>     bitcoin protocol, however. But still the purpose is the same: to
>     be able to build thin clients that can rely on a server for
>     storing the blockchain and keeping connected on the p2p network.
>
>     The reason for not having these queries part of the standard
>     protocol (I think) are as they breaks anonymity, and that you
>     would actually encourage people to participate in the p2p.
>
>     2. The second part you mention, to some how move the storage of
>     the blockchain into a DHT based storage would be quite nice. The
>     benefit of this is that it could be a way to integrate the smaller
>     clients into the network without breaking the anonymity. But it
>     should be thought out quite carefully. Further, if each client
>     only store a fraction of the blockchain we should work out what
>     fraction that need to be in order to ensure a similar service
>     level. I would be happy to work with you on this.
>
>     Cheers,
>
>     Michael
>
>     On 17/12/2011, at 08:41, Eric Lombrozo wrote:
>
>     > Hey, guys.
>     >
>     > I haven't posted here before so I'll introduce myself. My name's
>     Eric,
>     > I've been developing cryptocurrency-related
>     > software for several months now, I've implemented some libraries for
>     > dealing with core bitcoin datastructures, made
>     > some custom builds of bitcoind and interfaced it with a few apps
>     I've written.
>     >
>     > In doing so, I've come to appreciate just how little of the
>     potential
>     > for the bitcoin protocol is being exploited right now...
>     > not only in terms of the script features but in terms of the
>     potential
>     > commands and node types that could exist.
>     >
>     > For instance, the protocol spec at
>     > https://en.bitcoin.it/wiki/Protocol_specification only has 16
>     commands
>     > listed and
>     > only one service type...despite having a full 12 bytes for a command
>     > code and a full eight bytes for a services
>     > type.
>     >
>     > The fact that only one node service type is specified is
>     probably due
>     > to the fact that the satoshi client was written
>     > to be a standalone monolithic app that took care of all the
>     essential
>     > needs for a network of peers.
>     > i.e. block chain storage/management, transaction
>     signing/verification,
>     > key generation/wallet management, block mining, etc...
>     > However, I think there's an urgent need for breaking up all these
>     > different tasks into separate components that can run as independent
>     > services on different types of devices.
>     >
>     > One of the big issues I'm dealing with now pertains to block chain
>     > storage. As of right now, it is implemented as sequential
>     > disk files using Berkeley DB in the satoshi client. Then you have
>     > other projects that have been using SQL tables, etc...
>     > But I believe the direction this really needs to move towards is
>     some
>     > sort of distributed hash table...and the database queries
>     > should be performed using the bitcoin protocol itself. Perhaps
>     adding
>     > a few more commands. As things stand right now,
>     > the only way to query for transactions or blocks is by their
>     hash. And
>     > once a transaction gets incorporated into a block and
>     > removed from the transaction pool, one can no longer query it by the
>     > transaction hash without stepping outside the bitcoin protocol.
>     > We need access to the disk file that stores the blocks whether it be
>     > via Berkeley DB or SQL or whatever.
>     >
>     > I propose an extension to the bitcoin protocol to provide
>     methods for
>     > performing more sophisticated queries, such as "Give me
>     > an inventory of transactions involving this particular public
>     key" or
>     > "Give me an inventory all transactions in the last n blocks with
>     > unredeemed outputs." This could be done by adding a few more
>     commands.
>     >
>     > Furthermore, I propose a new network services type for nodes that
>     > serve as block chain/transaction pool storage.
>     >
>     > Of couse, any peer that wishes to verify the integrity of the block
>     > chain would still have to download at the very least
>     > all the block headers...and to be completely sure, also all the
>     blocks
>     > themselves...and verify everything. But it would be
>     > very nice to be able to run thin services that can rely on other
>     > network peers to do this work. It is still possible to attain
>     > a high level of confidence in the integrity by querying multiple
>     peers
>     > for similar objects and comparing. It is also possible
>     > to run your own dedicated block chain storage servers which you
>     trust.
>     >
>     > There are other ideas I have for other types of services, too.
>     >
>     > Anyhow, I'm just throwing this out there...if anyone's
>     interested I'd
>     > love to develop these ideas further and help put together some
>     > specs.
>     >
>     > -Eric Lombrozo
>     >
>     >
>     ------------------------------------------------------------------------------
>     > Learn Windows Azure Live!  Tuesday, Dec 13, 2011
>     > Microsoft is holding a special Learn Windows Azure training
>     event for
>     > developers. It will provide a great way to learn Windows Azure
>     and what it
>     > provides. You can attend the event by watching it streamed LIVE
>     online.
>     > Learn more at http://p.sf.net/sfu/ms-windowsazure
>     > _______________________________________________
>     > Bitcoin-development mailing list
>     > Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>     ------------------------------------------------------------------------------
>     Learn Windows Azure Live!  Tuesday, Dec 13, 2011
>     Microsoft is holding a special Learn Windows Azure training event for
>     developers. It will provide a great way to learn Windows Azure and
>     what it
>     provides. You can attend the event by watching it streamed LIVE
>     online.
>     Learn more at http://p.sf.net/sfu/ms-windowsazure
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111218/2b6112bd/attachment.html>

From luke at dashjr.org  Sun Dec 18 21:44:43 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Dec 2011 16:44:43 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
	<CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
Message-ID: <201112181644.44134.luke@dashjr.org>

On Sunday, December 18, 2011 4:05:11 PM Jorge Tim?n wrote:
> If we chose the simple URI proposal namecoin can still be integrated
> to map the IP of the server by those who want to.
> Does it removes the necessity of the certificates?
> If so, we should let people decide between HTTP, HTTPS, namecoin or
> whatever they trust.

How are you going to authenticate the host? Certificates from CAs are how 
HTTPS does it. HTTP is vulnerable. If the URI contains an address (eg, 
bitcoin://remotehost/base58key), the remote host could sign its (self-signed) 
SSL key with the ECDSA key to prove authenticity. DNSSEC/namecoin presumably 
has some way to do this as well.

> Shouldn't we be also discussing the valid format of the answered
> message? I mean fields like "amount", "concept" and such.

At some point, a proper protocol to negotiate payment is needed for anything 
like this.



From slush at centrum.cz  Sun Dec 18 23:58:37 2011
From: slush at centrum.cz (slush)
Date: Mon, 19 Dec 2011 00:58:37 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112181644.44134.luke@dashjr.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
	<CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
	<201112181644.44134.luke@dashjr.org>
Message-ID: <CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>

Maybe I'm retarded, but where's the point in providing alliases containing
yet another hash in URL?

slush

On Sun, Dec 18, 2011 at 10:44 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Sunday, December 18, 2011 4:05:11 PM Jorge Tim?n wrote:
> > If we chose the simple URI proposal namecoin can still be integrated
> > to map the IP of the server by those who want to.
> > Does it removes the necessity of the certificates?
> > If so, we should let people decide between HTTP, HTTPS, namecoin or
> > whatever they trust.
>
> How are you going to authenticate the host? Certificates from CAs are how
> HTTPS does it. HTTP is vulnerable. If the URI contains an address (eg,
> bitcoin://remotehost/base58key), the remote host could sign its
> (self-signed)
> SSL key with the ECDSA key to prove authenticity. DNSSEC/namecoin
> presumably
> has some way to do this as well.
>
> > Shouldn't we be also discussing the valid format of the answered
> > message? I mean fields like "amount", "concept" and such.
>
> At some point, a proper protocol to negotiate payment is needed for
> anything
> like this.
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/b86751c7/attachment.html>

From luke at dashjr.org  Mon Dec 19 01:13:57 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Dec 2011 20:13:57 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<201112181644.44134.luke@dashjr.org>
	<CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>
Message-ID: <201112182013.58588.luke@dashjr.org>

On Sunday, December 18, 2011 6:58:37 PM slush wrote:
> Maybe I'm retarded, but where's the point in providing alliases containing
> yet another hash in URL?

The point of the extended URI is to allow the server to negotiate payment 
details (payment/order information, fees, new privacy address, etc) rather 
than merely sending a simple payment to a single fixed address.

I am not convinced *aliases* are practical, without CA trust. An organization 
that wants to trust a CA with all their funds can leave off the address 
portion, to provide more human-friendly URIs.



From pieter.wuille at gmail.com  Mon Dec 19 01:14:20 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 19 Dec 2011 02:14:20 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
	<CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
	<201112181644.44134.luke@dashjr.org>
	<CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>
Message-ID: <20111219011417.GA16815@ulyssis.org>

On Mon, Dec 19, 2011 at 12:58:37AM +0100, slush wrote:
> Maybe I'm retarded, but where's the point in providing alliases containing
> yet another hash in URL?

Any DNS-based alias system is vulnerable to spoofing. If I can make people's
DNS server believe that mining.cz points to my IP, I'll receive payments to
you...

If no trusted CA is used to authenticate the communication, there is no way
to be sure the one you are asking how to pay, is the person you want to pay.
Therefore, one solution is to put a bitcoin address in the identification
string itself, and requiring SSL communication authenticated using the
respective key.

This makes the identification strings obviously less useful as aliases,
but pure aliases in the sense of human-typable strings have imho
limited usefulness anyway - in most cases these identification strings
will be communicated through other electronic means anyway.

Furthermore, the embedded bitcoin address could be hidden from the user:
retrieved when first connecting, and stored together with the URI in
an address book. Like ssh, it could warn the user if the key changes
(which wil be ignored by most users anyway, but what do you do about
that?)

-- 
Pieter



From luke at dashjr.org  Mon Dec 19 01:43:47 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Dec 2011 20:43:47 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <20111219011417.GA16815@ulyssis.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>
	<20111219011417.GA16815@ulyssis.org>
Message-ID: <201112182043.48064.luke@dashjr.org>

On Sunday, December 18, 2011 8:14:20 PM Pieter Wuille wrote:
> Furthermore, the embedded bitcoin address could be hidden from the user:
> retrieved when first connecting, and stored together with the URI in
> an address book. Like ssh, it could warn the user if the key changes
> (which wil be ignored by most users anyway, but what do you do about
> that?)

Like SSH, don't make it easy to ignore.
eg, to ignore it, you need to manually go in and remove it from the URI.



From slush at centrum.cz  Mon Dec 19 01:44:42 2011
From: slush at centrum.cz (slush)
Date: Mon, 19 Dec 2011 02:44:42 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <20111219011417.GA16815@ulyssis.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
	<CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
	<201112181644.44134.luke@dashjr.org>
	<CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>
	<20111219011417.GA16815@ulyssis.org>
Message-ID: <CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>

Pieter, it was more rhetorical question than asking for explanation, but
thanks anyway. As an Internet application developer, I of course understand
security issues while using HTTPS and CA.

I have a gut feeling that there simply does not exist any single solution
which is both easy to use and secure enough. At least nobody mentioned it
yet. And if I need to choose between easy solution or secure solution for
aliases, I'll pick that easy one. I mean - we need some solution which will
be easy enough for daily use; it is something what we currently don't have.
But if I want to be really really sure I'm using correct destination for
paying $1mil for a house, I can every time ask for real bitcoin addresses,
this is that secure way which we currently have.

slush

On Mon, Dec 19, 2011 at 2:14 AM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Mon, Dec 19, 2011 at 12:58:37AM +0100, slush wrote:
> > Maybe I'm retarded, but where's the point in providing alliases
> containing
> > yet another hash in URL?
>
> Any DNS-based alias system is vulnerable to spoofing. If I can make
> people's
> DNS server believe that mining.cz points to my IP, I'll receive payments
> to
> you...
>
> If no trusted CA is used to authenticate the communication, there is no way
> to be sure the one you are asking how to pay, is the person you want to
> pay.
> Therefore, one solution is to put a bitcoin address in the identification
> string itself, and requiring SSL communication authenticated using the
> respective key.
>
> This makes the identification strings obviously less useful as aliases,
> but pure aliases in the sense of human-typable strings have imho
> limited usefulness anyway - in most cases these identification strings
> will be communicated through other electronic means anyway.
>
> Furthermore, the embedded bitcoin address could be hidden from the user:
> retrieved when first connecting, and stored together with the URI in
> an address book. Like ssh, it could warn the user if the key changes
> (which wil be ignored by most users anyway, but what do you do about
> that?)
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/d492945b/attachment.html>

From timon.elviejo at gmail.com  Mon Dec 19 07:56:09 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Mon, 19 Dec 2011 08:56:09 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJ1JLtuhwdBC8jJsmS3pTUixdLwh0haB-Gq_CdEmEWYN0-z+QA@mail.gmail.com>
	<CAGQP0AH+J5Jo524o+EL9zNdHgpfTorTsyB+Ut4x0W-d9x84JZQ@mail.gmail.com>
	<201112181644.44134.luke@dashjr.org>
	<CAJna-Hhg9DO4jeuU3nEL2jJGPyxZXpeOLTQe1w8zjT6wqi+kXQ@mail.gmail.com>
	<20111219011417.GA16815@ulyssis.org>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
Message-ID: <CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>

Ok, so HTTP is not an option unless it shows a huge warning. I don't
know the HTTPS possible attack, but maybe it needs a warning message
too, from what you people are saying. Although using namecoin to
identify hosts may be the more secure option, it's integration with
the client seems more difficult and probably most clients won't
support it. Using namecoin to directly specify the payment address
seems a bad idea for most cases for the reasons that have been said.

For the "answer format" JSON seems ok, but I mean a "negotiating
protocol" like luke-jr says. I'd even include green addresses there
but probably many of you don't like the idea.

2011/12/19, slush <slush at centrum.cz>:
> And if I need to choose between easy solution or secure solution for
> aliases, I'll pick that easy one. I mean - we need some solution which will
> be easy enough for daily use; it is something what we currently don't have.
> But if I want to be really really sure I'm using correct destination for
> paying $1mil for a house, I can every time ask for real bitcoin addresses,
> this is that secure way which we currently have.

I agree.



From andyparkins at gmail.com  Mon Dec 19 11:44:59 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Mon, 19 Dec 2011 11:44:59 +0000
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
Message-ID: <201112191145.02427.andyparkins@gmail.com>

On 2011 December 19 Monday, Jorge Tim?n wrote:
> Ok, so HTTP is not an option unless it shows a huge warning. I don't
> know the HTTPS possible attack, but maybe it needs a warning message
> too, from what you people are saying. Although using namecoin to

The problems with HTTPS have been social rather than technical.  Multiple CAs 
have been strong-armed by governments or tricked into issuing fake 
certificates by scammers.  There is no technical measure around that.  By 
using the CA certificate we are saying to the system "here is someone I trust 
to issue a certificate".  So far, with a large number of CAs, that trust is 
misplaced.

I'm of the opinion though that this problem is outside the remit of bitcoin to 
solve.

Perhaps we should be more strict about which CA certificates are trusted by 
the bitcoin client: say restrict it to those who have demonstrably good 
practices for verifying identity; rather than the ridiculous amount of trust 
that comes pre-installed for me in my browser.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/b557a325/attachment.sig>

From solar at heliacal.net  Mon Dec 19 14:46:12 2011
From: solar at heliacal.net (solar)
Date: Mon, 19 Dec 2011 14:46:12 +0000
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112191145.02427.andyparkins@gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191145.02427.andyparkins@gmail.com>
Message-ID: <F5367391-7CC5-4BCB-9AC4-4E38707DAF81@heliacal.net>

I think HTTPS, and more specifically x.509 PKI certs and CAs are generally a good idea and (historical implementation bugs aside) the concept is technically sound and secure.  What is a bad idea (in my opinion) is to trust a software vendor to decide who you should trust.. thus it is a bad idea for bitcoin software to promise any trust.

The part where the concept becomes flawed is trusting 3rd parties who have no relationship with you, to serve your interests.  Now I'm just generalizing here and this is not universally true.. but internet CAs just want to sell certificates - they generally don't care beyond that, and they abuse the certificate validity dates to charge more money.  All this is done under the guise of wanting to provide a secure experience to users without a prior relationship to the entity being identified.  I propose that trying to follow this paradigm in bitcoin alias resolution is a bad idea because it tries to solve 2 problems at once, one of which does not have any 'good' solution, and forces a specific policy.

First, we need to resolve an alias to a bitcoin address somehow.. but secondly we need to establish trust with the entity doing the alias resolution - to make sure that we can trust the response.

When resolving an alias you will have to query an untrusted server, possibly being proxied by an 'attacker'.  Presumably, an x.509 certificate will be presented, possibly self signed or chained off a self generated CA or whatever else.. but if it's your first contact then there is no possible way to know if it's correct or not.  You would have to retrieve the correct public key of the CA to compare to first, possibly out of band.  Get it from my website, compare it to my business card, send me an email and I'll send it to you, or get it from some other source using some other pre existing trust (a centralized and possibly private directory perhaps).  The point is, the reason there is so much disagreement is because there is no good way to trust the resolver if you don't create that trust relationship prior to resolving an alias from it.

I think that having to pre-trust the resolver would be an acceptable solution to all.. Those whose policy requires a simpler process can get a 3rd party CA list, much like the ones provided with web browsers and operating systems.  Those with strict verification policies can choose to pre verify every public key.. and these processes are familiar to many organizations using PKI for other things already.  In a client, presenting the usual certificate detail dialog, showing the public key, subject, issuer, and thumbprint would be sufficient to allow users to implement their own policies without forcing it one way or another.

Please consider that while some organizations or users might require strong anonymity and pre existing trust, there are others who may want to do the opposite and that is just as valid, even if you or 'everyone else' disagrees with that.  In the case of bitcoin, it will be used as part of a larger system, and whatever concerns are created by 'insecure' alias resolution may well be addressed in another part of the system.  The most successful standards and implementations are the ones which provide the most flexibility - primarily because that allows users to extend them in ways the original designers didn't necessarily plan for.

Thanks,
Laszlo



On Dec 19, 2011, at 11:44 AM, Andy Parkins wrote:

> On 2011 December 19 Monday, Jorge Tim?n wrote:
>> Ok, so HTTP is not an option unless it shows a huge warning. I don't
>> know the HTTPS possible attack, but maybe it needs a warning message
>> too, from what you people are saying. Although using namecoin to
> 
> The problems with HTTPS have been social rather than technical.  Multiple CAs 
> have been strong-armed by governments or tricked into issuing fake 
> certificates by scammers.  There is no technical measure around that.  By 
> using the CA certificate we are saying to the system "here is someone I trust 
> to issue a certificate".  So far, with a large number of CAs, that trust is 
> misplaced.
> 
> I'm of the opinion though that this problem is outside the remit of bitcoin to 
> solve.
> 
> Perhaps we should be more strict about which CA certificates are trusted by 
> the bitcoin client: say restrict it to those who have demonstrably good 
> practices for verifying identity; rather than the ridiculous amount of trust 
> that comes pre-installed for me in my browser.
> 
> 
> 
> Andy
> 
> -- 
> Dr Andy Parkins
> andyparkins at gmail.com
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for 
> developers. It will provide a great way to learn Windows Azure and what it 
> provides. You can attend the event by watching it streamed LIVE online.  
> Learn more at http://p.sf.net/sfu/ms-windowsazure_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From rick at support-intelligence.com  Mon Dec 19 15:35:51 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Mon, 19 Dec 2011 07:35:51 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <F5367391-7CC5-4BCB-9AC4-4E38707DAF81@heliacal.net>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191145.02427.andyparkins@gmail.com>
	<F5367391-7CC5-4BCB-9AC4-4E38707DAF81@heliacal.net>
Message-ID: <CAJ1JLtvQ-jF4kUO3eZ4aExCJVOQrtB42fwmbCT4yeaiZoQPXSw@mail.gmail.com>

You are describing the problem DANE addresses, see
http://tools.ietf.org/html/draft-ietf-dane-protocol-12


Using Secure DNS to Associate Certificates with Domain Names For TLS

Abstract

   TLS and DTLS use PKIX certificates for authenticating the server.
   Users want their applications to verify that the certificate provided
   by the TLS server is in fact associated with the domain name they
   expect.  TLSA provides bindings of keys to domains that are asserted
   not by external entities, but by the entities that operate the DNS.
   This document describes how to use secure DNS to associate the TLS
   server's certificate with the intended domain name.


For those of you against DNSSEC, DANE leverages it significantly.

The point I have been attempting to make is if one to rely on HTTPS,
leveraging DANE will allow you to mitigate CAs and use self signed
cers but you will need to leverage DNSSEC to bind the self signed cert
using DANE and if you are going to rely on DNSSEC for DANE to support
HTTPS, why not short-circut this madness and just publish your
identifiers and secure the zone via DNSSEC and link in a stub resolver
in the client.

Short story: transform user at authority.tld  --> _btc.user.athority.tld TXT 1z....

A short i-d is probably a better way to explain, so I will task myself
to do that.

-rick


On Mon, Dec 19, 2011 at 6:46 AM, solar <solar at heliacal.net> wrote:
> I think HTTPS, and more specifically x.509 PKI certs and CAs are generally a good idea and (historical implementation bugs aside) the concept is technically sound and secure. ?What is a bad idea (in my opinion) is to trust a software vendor to decide who you should trust.. thus it is a bad idea for bitcoin software to promise any trust.
>
> The part where the concept becomes flawed is trusting 3rd parties who have no relationship with you, to serve your interests. ?Now I'm just generalizing here and this is not universally true.. but internet CAs just want to sell certificates - they generally don't care beyond that, and they abuse the certificate validity dates to charge more money. ?All this is done under the guise of wanting to provide a secure experience to users without a prior relationship to the entity being identified. ?I propose that trying to follow this paradigm in bitcoin alias resolution is a bad idea because it tries to solve 2 problems at once, one of which does not have any 'good' solution, and forces a specific policy.
>
> First, we need to resolve an alias to a bitcoin address somehow.. but secondly we need to establish trust with the entity doing the alias resolution - to make sure that we can trust the response.
>
> When resolving an alias you will have to query an untrusted server, possibly being proxied by an 'attacker'. ?Presumably, an x.509 certificate will be presented, possibly self signed or chained off a self generated CA or whatever else.. but if it's your first contact then there is no possible way to know if it's correct or not. ?You would have to retrieve the correct public key of the CA to compare to first, possibly out of band. ?Get it from my website, compare it to my business card, send me an email and I'll send it to you, or get it from some other source using some other pre existing trust (a centralized and possibly private directory perhaps). ?The point is, the reason there is so much disagreement is because there is no good way to trust the resolver if you don't create that trust relationship prior to resolving an alias from it.
>
> I think that having to pre-trust the resolver would be an acceptable solution to all.. Those whose policy requires a simpler process can get a 3rd party CA list, much like the ones provided with web browsers and operating systems. ?Those with strict verification policies can choose to pre verify every public key.. and these processes are familiar to many organizations using PKI for other things already. ?In a client, presenting the usual certificate detail dialog, showing the public key, subject, issuer, and thumbprint would be sufficient to allow users to implement their own policies without forcing it one way or another.
>
> Please consider that while some organizations or users might require strong anonymity and pre existing trust, there are others who may want to do the opposite and that is just as valid, even if you or 'everyone else' disagrees with that. ?In the case of bitcoin, it will be used as part of a larger system, and whatever concerns are created by 'insecure' alias resolution may well be addressed in another part of the system. ?The most successful standards and implementations are the ones which provide the most flexibility - primarily because that allows users to extend them in ways the original designers didn't necessarily plan for.
>
> Thanks,
> Laszlo
>
>
>
> On Dec 19, 2011, at 11:44 AM, Andy Parkins wrote:
>
>> On 2011 December 19 Monday, Jorge Tim?n wrote:
>>> Ok, so HTTP is not an option unless it shows a huge warning. I don't
>>> know the HTTPS possible attack, but maybe it needs a warning message
>>> too, from what you people are saying. Although using namecoin to
>>
>> The problems with HTTPS have been social rather than technical. ?Multiple CAs
>> have been strong-armed by governments or tricked into issuing fake
>> certificates by scammers. ?There is no technical measure around that. ?By
>> using the CA certificate we are saying to the system "here is someone I trust
>> to issue a certificate". ?So far, with a large number of CAs, that trust is
>> misplaced.
>>
>> I'm of the opinion though that this problem is outside the remit of bitcoin to
>> solve.
>>
>> Perhaps we should be more strict about which CA certificates are trusted by
>> the bitcoin client: say restrict it to those who have demonstrably good
>> practices for verifying identity; rather than the ridiculous amount of trust
>> that comes pre-installed for me in my browser.
>>
>>
>>
>> Andy
>>
>> --
>> Dr Andy Parkins
>> andyparkins at gmail.com
>> ------------------------------------------------------------------------------
>> Learn Windows Azure Live! ?Tuesday, Dec 13, 2011
>> Microsoft is holding a special Learn Windows Azure training event for
>> developers. It will provide a great way to learn Windows Azure and what it
>> provides. You can attend the event by watching it streamed LIVE online.
>> Learn more at http://p.sf.net/sfu/ms-windowsazure_______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ------------------------------------------------------------------------------
> Learn Windows Azure Live! ?Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for
> developers. It will provide a great way to learn Windows Azure and what it
> provides. You can attend the event by watching it streamed LIVE online.
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From luke at dashjr.org  Mon Dec 19 16:30:41 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 19 Dec 2011 11:30:41 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
Message-ID: <201112191130.43721.luke@dashjr.org>

On Monday, December 19, 2011 2:56:09 AM Jorge Tim?n wrote:
> For the "answer format" JSON seems ok,

I'd prefer we stick to simple standards.
HTTP alone should really be fine to build on...

JSON in particular has very poor language support, and cannot reasonably 
represent binary data (such as a custom output script). The HTTP 
specification, however, allows binary data in multipart content just fine.



From luke at dashjr.org  Mon Dec 19 16:35:32 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 19 Dec 2011 11:35:32 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112191145.02427.andyparkins@gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191145.02427.andyparkins@gmail.com>
Message-ID: <201112191135.34080.luke@dashjr.org>

On Monday, December 19, 2011 6:44:59 AM Andy Parkins wrote:
> Perhaps we should be more strict about which CA certificates are trusted by
> the bitcoin client: say restrict it to those who have demonstrably good
> practices for verifying identity; rather than the ridiculous amount of
> trust that comes pre-installed for me in my browser.

Accepted CAs is/should be a property of your *operating system*, not any 
particular software. Anyhow, restricting this further just makes it even more 
unusable. Already there is only 1 or 2 CAs that will provide a gratis 
certificate for personal/small users. If you only allow high-class CAs, I 
imagine that will restrict "no key in the URI" aliases to those who will fork 
over a lot of money.



From jordanmack at parhelic.com  Mon Dec 19 17:04:34 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Mon, 19 Dec 2011 09:04:34 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112191130.43721.luke@dashjr.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191130.43721.luke@dashjr.org>
Message-ID: <4EEF6EA2.4060709@parhelic.com>

I still think HTTPS should be used, at the minimum. Using HTTPS is 
standard to every website out there that deals with financials, even if 
it is not a perfect system. Why should Bitcoin adopt a more lax policy 
than everyone else?

I thought that JSON support was fairly common these days. I personally 
prefer XML in most cases, but since JSON is already used with the RPC, 
it seemed like a natural fit here. Binary data can be base64 encoded, 
although I'm not sure why you would need to send back binary in an alias 
response.

What exactly do you mean by "custom output script"?


On 12/19/2011 8:30 AM, Luke-Jr wrote:
> I'd prefer we stick to simple standards.
> HTTP alone should really be fine to build on...
>
> JSON in particular has very poor language support, and cannot reasonably
> represent binary data (such as a custom output script). The HTTP
> specification, however, allows binary data in multipart content just fine.



From slush at centrum.cz  Mon Dec 19 17:09:16 2011
From: slush at centrum.cz (slush)
Date: Mon, 19 Dec 2011 18:09:16 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <4EEF6EA2.4060709@parhelic.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191130.43721.luke@dashjr.org> <4EEF6EA2.4060709@parhelic.com>
Message-ID: <CAJna-HgjkC95pt+REmLi2tUh7MVmP-nYwLgzCzrK78qBmEcE_Q@mail.gmail.com>

I agree with Luke that HTTP standard has everything necessary and bloating
payload with json/xml is not necessary.

Btw that argument "we have json in client already" seems pretty wrong,
because json in server rpc solves another problem (and solve it in wrong
way, because of data type issues, but it's another story).

slush

On Mon, Dec 19, 2011 at 6:04 PM, Jordan Mack <jordanmack at parhelic.com>wrote:

> I thought that JSON support was fairly common these days. I personally
> prefer XML in most cases, but since JSON is already used with the RPC,
> it seemed like a natural fit here. Binary data can be base64 encoded,
> although I'm not sure why you would need to send back binary in an alias
> response.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/fabde08e/attachment.html>

From solar at heliacal.net  Mon Dec 19 17:13:14 2011
From: solar at heliacal.net (solar)
Date: Mon, 19 Dec 2011 17:13:14 +0000
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112191135.34080.luke@dashjr.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191145.02427.andyparkins@gmail.com>
	<201112191135.34080.luke@dashjr.org>
Message-ID: <64F593B6-CF1C-4FF1-87B9-5C1E7A667A4B@heliacal.net>

Using commercial CAs to establish trust is a site local administrative policy..

Bitcoin and operating systems have no technical need to concern themselves with this.  It is a shame that the system has been abused by CAs paying off operating system and web browser vendors but this is not the only way to use it.. my policy may be (as an example) to require each party I deal with to generate their own self signed cert or their own CA cert (same thing really) and then I can trust that and only that.  Obviously, commercial CAs will sell a certificate to anyone which means you trust anyone that is their customer.  This is a valid site policy but not for everyone.

Rick Wesson's suggestion about DNSSEC and such is interesting since it would provide a system for that 'first contact' exchange where you can more reliably retrieve the certificate, if the site supports it.  Some policies may not require this however - you can always get the trust established another way like downloading a cert file from a website or whatever else you consider adequately secure for your organization.

I think 3rd party CA lists and the DNSSEC/DANE idea are both useful ways to automatically establish trust out of band, but this is independent of the actual implementation of alias resolution, which happens after a trusted connection is made.  Automatically establishing trust with the alias resolver is perhaps a useful feature, but not a requirement for either side to support alias resolution.

In any case, it sounds like using HTTPS and x.509 certs would allow many of these automatic trust establishment systems to be implemented on top, allowing flexible policy configuration, which seems to be important to several people in this thread of discussion.

I think using JSON would be ok but like it's been said, you either have to serialize your binary data into some text format like base64/UUencode or represent it as an integer array, both of which are inefficient.. probably cancelling out any benefit of using JSON in the first place :)

Maybe there is no need for binary data for alias resolution though.. I imagine it would be as simple as submitting a name to resolve, and giving back a base58 address string, perhaps along with a textual comment or other extra, information data.

Being strict or lax or anything else is not really a concern for alias resolution - establishing trust is an administrative issue with a lot of different solutions and not every site or application requires trust.  HTTPS and mutual authentication may be desirable for general cases, however HTTP should work just as well if trust is established another way and thus SSL/TLS is not a requirement for the HTTP exchange to work.  As an example use case, I may be using IPsec or any number of other systems external to bitcoin and alias resolution itself.

Laszlo



On Dec 19, 2011, at 4:35 PM, Luke-Jr wrote:

> On Monday, December 19, 2011 6:44:59 AM Andy Parkins wrote:
>> Perhaps we should be more strict about which CA certificates are trusted by
>> the bitcoin client: say restrict it to those who have demonstrably good
>> practices for verifying identity; rather than the ridiculous amount of
>> trust that comes pre-installed for me in my browser.
> 
> Accepted CAs is/should be a property of your *operating system*, not any 
> particular software. Anyhow, restricting this further just makes it even more 
> unusable. Already there is only 1 or 2 CAs that will provide a gratis 
> certificate for personal/small users. If you only allow high-class CAs, I 
> imagine that will restrict "no key in the URI" aliases to those who will fork 
> over a lot of money.
> 
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for 
> developers. It will provide a great way to learn Windows Azure and what it 
> provides. You can attend the event by watching it streamed LIVE online.  
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From jordanmack at parhelic.com  Mon Dec 19 18:13:08 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Mon, 19 Dec 2011 10:13:08 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-HgjkC95pt+REmLi2tUh7MVmP-nYwLgzCzrK78qBmEcE_Q@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191130.43721.luke@dashjr.org>
	<4EEF6EA2.4060709@parhelic.com>
	<CAJna-HgjkC95pt+REmLi2tUh7MVmP-nYwLgzCzrK78qBmEcE_Q@mail.gmail.com>
Message-ID: <4EEF7EB4.6070800@parhelic.com>

With all due respect, I continue to disagree on the topic of using HTTP 
for data interchange.

Yes, an HTTP multipart response will accomplish the need for multiple 
named resources. The problem is that parsing of a multipart response 
isn't simple, and library support is weak across many languages. The 
widely adopted cURL library does not support multipart response parsing 
at all.

JSON is widely adopted, human readable, and has parsing libraries 
available for every major language. There is a bit of additional bloat, 
but I believe it is warranted in this case because of the convenience 
and ease it brings to developers.

If the idea is to "KISS", and provide a method that is both quick and 
easy to implement for the average developer, then JSON is a stand out 
option. Using HTTP for the data interchange will make things difficult 
for a lot of developers if multipart responses are used. JSON will be 
greeted with open arms.



On 12/19/2011 9:09 AM, slush wrote:
> I agree with Luke that HTTP standard has everything necessary and
> bloating payload with json/xml is not necessary.
>
> Btw that argument "we have json in client already" seems pretty wrong,
> because json in server rpc solves another problem (and solve it in wrong
> way, because of data type issues, but it's another story).




From luke at dashjr.org  Mon Dec 19 18:15:24 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 19 Dec 2011 13:15:24 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <4EEF6EA2.4060709@parhelic.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<201112191130.43721.luke@dashjr.org>
	<4EEF6EA2.4060709@parhelic.com>
Message-ID: <201112191315.25857.luke@dashjr.org>

On Monday, December 19, 2011 12:04:34 PM Jordan Mack wrote:
> I still think HTTPS should be used, at the minimum. Using HTTPS is
> standard to every website out there that deals with financials, even if
> it is not a perfect system. Why should Bitcoin adopt a more lax policy
> than everyone else?

Sure, I meant HTTP as the underlying protocol.
TLS/SSL should of course be required in some form.

> I thought that JSON support was fairly common these days. I personally
> prefer XML in most cases, but since JSON is already used with the RPC,
> it seemed like a natural fit here. 

JSON-RPC won't go on forever. In any case, bitcoind's use of JSON-RPC is 
exactly why I (and many other developers) have come to the realization how 
poorly supported JSON really is. Most of the common languages do have a 
library, but almost all of them have one issue or another (particularly around 
the very undefined Number type).

XML shares the same binary-data problem as JSON, too.
As slush mentioned, no additional serialization is necessary anyway.

> Binary data can be base64 encoded, although I'm not sure why you would need
> to send back binary in an alias response.

Because computers work with binary. I don't think anyone wants to implement a 
fully functional script assembler just to send funds.

> What exactly do you mean by "custom output script"?

This suggests you need to learn more about how Bitcoin works ;)
https://en.bitcoin.it/wiki/Script



From slush at centrum.cz  Mon Dec 19 18:17:55 2011
From: slush at centrum.cz (slush)
Date: Mon, 19 Dec 2011 19:17:55 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <4EEF7EB4.6070800@parhelic.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191130.43721.luke@dashjr.org> <4EEF6EA2.4060709@parhelic.com>
	<CAJna-HgjkC95pt+REmLi2tUh7MVmP-nYwLgzCzrK78qBmEcE_Q@mail.gmail.com>
	<4EEF7EB4.6070800@parhelic.com>
Message-ID: <CAJna-Hgq2CLq+bKxHweGtH4ujjYoNtbBY25XwdQXOd4GNdEnyg@mail.gmail.com>

In my opinion, there's not necessary any payload format (json, xml,
multipart). In keeping stuff KISS, everything we need is just an address in
response + potentially some stuff like HTTP redirects (for providing
additional compatibility for proposal of bitcoin URIs with "amount",
"label" and other parts). I don't see reason why we need some extra payload
yet.

slush

On Mon, Dec 19, 2011 at 7:13 PM, Jordan Mack <jordanmack at parhelic.com>wrote:

> If the idea is to "KISS", and provide a method that is both quick and
> easy to implement for the average developer, then JSON is a stand out
> option. Using HTTP for the data interchange will make things difficult
> for a lot of developers if multipart responses are used. JSON will be
> greeted with open arms.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111219/33ea8eb3/attachment.html>

From timon.elviejo at gmail.com  Mon Dec 19 18:50:01 2011
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Mon, 19 Dec 2011 19:50:01 +0100
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-Hgq2CLq+bKxHweGtH4ujjYoNtbBY25XwdQXOd4GNdEnyg@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191130.43721.luke@dashjr.org>
	<4EEF6EA2.4060709@parhelic.com>
	<CAJna-HgjkC95pt+REmLi2tUh7MVmP-nYwLgzCzrK78qBmEcE_Q@mail.gmail.com>
	<4EEF7EB4.6070800@parhelic.com>
	<CAJna-Hgq2CLq+bKxHweGtH4ujjYoNtbBY25XwdQXOd4GNdEnyg@mail.gmail.com>
Message-ID: <CAGQP0AGWs2A0aNRjggoOF8V1TVx+gC_w4o2OLueUJ43_XGyD7A@mail.gmail.com>

I don't have a strong position for or against JSON but...What about
protocol buffers?
Would it be too much too? Would it be simple enough for developers?



From jordanmack at parhelic.com  Mon Dec 19 18:52:54 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Mon, 19 Dec 2011 10:52:54 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112191315.25857.luke@dashjr.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<201112191130.43721.luke@dashjr.org>
	<4EEF6EA2.4060709@parhelic.com>
	<201112191315.25857.luke@dashjr.org>
Message-ID: <4EEF8806.6070707@parhelic.com>

I believe I'm missing something here. I was under the interpretation 
that alias resolution was going the KISS route, of basically a single 
HTTP request and response. How do you see binary data fitting into this?

I'm not going to pretend that I know all the details of the difficulties 
that were encountered with JSON-RPC. But in the argument of developer 
accessibility, it still serves a purpose. If JSON-RPC support is 
removed, you will immediately lose a large pool of high level language 
developers. I would hope that support would not be dropped, even if it 
only remains as a secondary protocol with limited capability. Most high 
level developers are only going to use it for basic functions anyhow.



On 12/19/2011 10:15 AM, Luke-Jr wrote:
> Because computers work with binary. I don't think anyone wants to implement a
> fully functional script assembler just to send funds.
>
> JSON-RPC won't go on forever. In any case, bitcoind's use of JSON-RPC is
> exactly why I (and many other developers) have come to the realization how
> poorly supported JSON really is. Most of the common languages do have a
> library, but almost all of them have one issue or another (particularly around
> the very undefined Number type).




From luke at dashjr.org  Mon Dec 19 19:16:54 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 19 Dec 2011 14:16:54 -0500
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <4EEF8806.6070707@parhelic.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<201112191315.25857.luke@dashjr.org>
	<4EEF8806.6070707@parhelic.com>
Message-ID: <201112191416.56029.luke@dashjr.org>

On Monday, December 19, 2011 1:52:54 PM Jordan Mack wrote:
> I believe I'm missing something here. I was under the interpretation
> that alias resolution was going the KISS route, of basically a single
> HTTP request and response. How do you see binary data fitting into this?

Bitcoin is a binary system. Not all payment outputs are necessarily 
serializable into addresses, and assuming they are would be broken-by-design.
In other words, why send the user's *software* "pay to address foo" just to 
have it turn that into a script (of limited subset), when you can send the 
script itself and avoid all the possible problems? Doing this right also means 
that if the user's client doesn't support version 255 addresses, it still 
works fine.

> I'm not going to pretend that I know all the details of the difficulties
> that were encountered with JSON-RPC. But in the argument of developer
> accessibility, it still serves a purpose. If JSON-RPC support is
> removed, you will immediately lose a large pool of high level language
> developers.

JSON isn't problem-free at high-level either. To summarize one of the issues, 
almost every implementation of JSON treats Numbers differently based on 
whether they have a '.' in them or not.

MIME has been around much longer, and should have sufficient support in every 
language by now. For some reason, Python calls the module 'email'.



From jordanmack at parhelic.com  Mon Dec 19 19:22:59 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Mon, 19 Dec 2011 11:22:59 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAJna-Hgq2CLq+bKxHweGtH4ujjYoNtbBY25XwdQXOd4GNdEnyg@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191130.43721.luke@dashjr.org>
	<4EEF6EA2.4060709@parhelic.com>
	<CAJna-HgjkC95pt+REmLi2tUh7MVmP-nYwLgzCzrK78qBmEcE_Q@mail.gmail.com>
	<4EEF7EB4.6070800@parhelic.com>
	<CAJna-Hgq2CLq+bKxHweGtH4ujjYoNtbBY25XwdQXOd4GNdEnyg@mail.gmail.com>
Message-ID: <4EEF8F13.70508@parhelic.com>

If alias resolution was guaranteed to always be just the address, then 
yes, I would opt for no serialization at all. A simple plain text 
response of an address is about as simple as it can get.

There are already a lot of good ideas floating around about how the 
alias protocol could be extended. Is it really going to stay that simple 
for long? I would personally much just have a serialized response 
upfront, rather than having to worry about backward compatibility in the 
future.

On 12/19/2011 10:17 AM, slush wrote:
> In my opinion, there's not necessary any payload format (json, xml,
> multipart). In keeping stuff KISS, everything we need is just an address
> in response + potentially some stuff like HTTP redirects (for providing
> additional compatibility for proposal of bitcoin URIs with "amount",
> "label" and other parts). I don't see reason why we need some extra
> payload yet.



From jordanmack at parhelic.com  Mon Dec 19 20:03:09 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Mon, 19 Dec 2011 12:03:09 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <201112191416.56029.luke@dashjr.org>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<201112191315.25857.luke@dashjr.org>
	<4EEF8806.6070707@parhelic.com>
	<201112191416.56029.luke@dashjr.org>
Message-ID: <4EEF987D.7060404@parhelic.com>

I wish that was the case. It would have made my life a lot easier in the 
past. A lot of the MIME libraries out there are extremely buggy. MIME is 
just difficult to work with, and support is still weak.

Undefined content length + text based boundaries = pain in the ass.

It is in the e-mail module because that's all MIME was originally 
intended for. It's now grown beyond that now, but you will find the MIME 
functions still live in the e-mail libraries. When dealing with raw MIME 
encoded data, e-mail is still the most common case.


On 12/19/2011 11:16 AM, Luke-Jr wrote:
> MIME has been around much longer, and should have sufficient support in every
> language by now. For some reason, Python calls the module 'email'.



From jordanmack at parhelic.com  Mon Dec 19 20:03:29 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Mon, 19 Dec 2011 12:03:29 -0800
Subject: [Bitcoin-development] [BIP 15] Aliases
In-Reply-To: <CAGQP0AGWs2A0aNRjggoOF8V1TVx+gC_w4o2OLueUJ43_XGyD7A@mail.gmail.com>
References: <1323728469.78044.YahooMailNeo@web121012.mail.ne1.yahoo.com>
	<CAJna-HjyZv2y9grNdnKKG8k6tn7jdW=zL=vtrALpeW8jkuzV6Q@mail.gmail.com>
	<CAGQP0AEEzOjc2ayOJYgs_oh4RG91Dp4JSHUjyPX=qdp+ri6oSg@mail.gmail.com>
	<201112191130.43721.luke@dashjr.org>
	<4EEF6EA2.4060709@parhelic.com>
	<CAJna-HgjkC95pt+REmLi2tUh7MVmP-nYwLgzCzrK78qBmEcE_Q@mail.gmail.com>
	<4EEF7EB4.6070800@parhelic.com>
	<CAJna-Hgq2CLq+bKxHweGtH4ujjYoNtbBY25XwdQXOd4GNdEnyg@mail.gmail.com>
	<CAGQP0AGWs2A0aNRjggoOF8V1TVx+gC_w4o2OLueUJ43_XGyD7A@mail.gmail.com>
Message-ID: <4EEF9891.5060202@parhelic.com>

I don't think protocol buffers are as simple to implement as some would 
like. I would still opt for it over MIME though.


On 12/19/2011 10:50 AM, Jorge Tim?n wrote:
> I don't have a strong position for or against JSON but...What about
> protocol buffers?
> Would it be too much too? Would it be simple enough for developers?



From jordanmack at parhelic.com  Mon Dec 19 21:43:23 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Mon, 19 Dec 2011 13:43:23 -0800
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EEE58CA.5090902@justmoon.de>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
Message-ID: <4EEFAFFB.10508@parhelic.com>

On 12/18/2011 1:19 PM, Stefan Thomas wrote:
 > Let those who want anonymity connect through Tor, Freenet, etc. It's
 > easy to add anonymity via an extra layer, but it is impossible to add
 > performance on top of a slow system.

That's a very good point. This is needless complication at the protocol 
level. Alternatives, like Tor, could be used to provide the desired 
effect. Developers could even choose to integrate Tor functionality into 
the client itself at some point.



From gmaxwell at gmail.com  Mon Dec 19 22:29:34 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 19 Dec 2011 17:29:34 -0500
Subject: [Bitcoin-development] BIP language on normative behavior
Message-ID: <CAAS2fgQpMWYLoT_1Za5AxvgNaXvEuJOZ2BjE94o09=t+LyfM5A@mail.gmail.com>

I've been arguing with Luke-JR on IRC about the interpenetration of
BIP_0014?  Gavin's recent commit uses the same version string for the
GUI interface and the daemon mode.

Luke believes this is a _violation_ of BIP_0014 and an error in
judgement on Gavin's part, and a failure to conform to the community
adopted standard. I believe Luke is mistaken: that BIP_0014 actually
don't have mandatory requirements for what you put in the version
field and even if it did, that they are in fact the same software and
should have the same name.

I don't think an agreement is likely on the second point, but the
first point highlights some ambiguity in the interpretation of BIP
language. E.g. What is permitted vs encouraged vs required.

There is well established standard language for this purpose:

https://www.ietf.org/rfc/rfc2119.txt

I strongly recommend that all BIPs be written using the RFC2119
keywords where appropriate.



From luke at dashjr.org  Mon Dec 19 22:36:44 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 19 Dec 2011 17:36:44 -0500
Subject: [Bitcoin-development] Lying about User Agent (was: BIP language on
	normative behavior)
In-Reply-To: <CAAS2fgQpMWYLoT_1Za5AxvgNaXvEuJOZ2BjE94o09=t+LyfM5A@mail.gmail.com>
References: <CAAS2fgQpMWYLoT_1Za5AxvgNaXvEuJOZ2BjE94o09=t+LyfM5A@mail.gmail.com>
Message-ID: <201112191736.45948.luke@dashjr.org>

On Monday, December 19, 2011 5:29:34 PM Gregory Maxwell wrote:
> I've been arguing with Luke-JR on IRC about the interpenetration of
> BIP_0014?  Gavin's recent commit uses the same version string for the
> GUI interface and the daemon mode.
> 
> Luke believes this is a _violation_ of BIP_0014 and an error in
> judgement on Gavin's part, and a failure to conform to the community
> adopted standard. 

To clarify, I believe LYING about the client is a violation. Specifically, 
Gavin's commit intentionally reports "bitcoin-qt" for bitcoind. A common name 
for the codebase is compliant, and I don't see anything that says a version 
*must* be reported at all, let alone for a specific component, so it *could* 
comply by leaving that part off. But if there is a common part, it certainly 
isn't Bitcoin-Qt.

https://github.com/bitcoin/bitcoin/pull/715 contains a fix that should fulfil 
everyone's desires (Gavin wants security by obscurity by making bitcoind and 
Bitcoin-Qt indistinguishable; this is the default with pull #715).



From laanwj at gmail.com  Tue Dec 20 09:10:23 2011
From: laanwj at gmail.com (Wladimir)
Date: Tue, 20 Dec 2011 10:10:23 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EEFAFFB.10508@parhelic.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de> <4EEFAFFB.10508@parhelic.com>
Message-ID: <CA+s+GJAcLa9o9H7GfEGeer0+HQE7g7_5EA=Fiii94hxeJiTqkw@mail.gmail.com>

On Mon, Dec 19, 2011 at 10:43 PM, Jordan Mack <jordanmack at parhelic.com>wrote:

> On 12/18/2011 1:19 PM, Stefan Thomas wrote:
>  > Let those who want anonymity connect through Tor, Freenet, etc. It's
>  > easy to add anonymity via an extra layer, but it is impossible to add
>  > performance on top of a slow system.
>
> That's a very good point. This is needless complication at the protocol
> level. Alternatives, like Tor, could be used to provide the desired
>

Agreed. Please don't roll your own onion network. It is very non-trivial to
get security and anonymity to an acceptable level. Securing cryptocurrency
itself is a big enough challenge already.

Another reason it is better to use Tor is because of the mixing effect. A
bitcoin-specific onion network would be subject to easy traffic analysis if
it only carries Bitcoin messages.

effect. Developers could even choose to integrate Tor functionality into
> the client itself at some point.
>

Yes, good idea. I've thought about making a "bitcoin tor bundle", analogous
to the firefox Tor bundle that is available from the Tor site itself.

Probably would need to package the block chain with it, as downloading that
over Tor takes ages and causes unnecessary load on the network...

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/5d6c4c2e/attachment.html>

From molec at gmx.de  Tue Dec 20 10:44:35 2011
From: molec at gmx.de (Nicolas Fischer)
Date: Tue, 20 Dec 2011 11:44:35 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CA+s+GJAcLa9o9H7GfEGeer0+HQE7g7_5EA=Fiii94hxeJiTqkw@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de> <4EEFAFFB.10508@parhelic.com>
	<CA+s+GJAcLa9o9H7GfEGeer0+HQE7g7_5EA=Fiii94hxeJiTqkw@mail.gmail.com>
Message-ID: <20111220114435.8a73a039.molec@gmx.de>

On Tue, 20 Dec 2011 10:10:23 +0100
Wladimir <laanwj at gmail.com> wrote:

> Probably would need to package the block chain with it, as downloading that
> over Tor takes ages and causes unnecessary load on the network...

I actually started a freenet plugin for blockchain distribution in summer (first rough steps only). Freenet seems really fit for this purpose since its mechanisms to provide wider storage (and thus faster requesting) for much-requested keys should help a lot here. Also freenet storage is decentralized, so that's another plus that goes hand-in-hand with bitcoin principles.

There's already a specification for "btcfn" which was done in 2010: https://bitcointalk.org/index.php?topic=55089.msg655410#msg655410

I stopped work on this because other people were supposedly working on it. I asked da2ce7 about it at the conference and he said progress was "slow".

I totally agree with the sentiment that these features should not be implemented in the bitcoin node itself but outsourced to the established systems, both because it's hard and also for "hiding traffic in the masses".

-- 
Nicolas Fischer <molec at gmx.de>



From gavinandresen at gmail.com  Tue Dec 20 20:49:16 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 20 Dec 2011 15:49:16 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled into
	HEAD
Message-ID: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>

FYI for anybody who doesn't hang out in IRC:

I've been busy pulling patches into git HEAD for a Bitcoin version
0.6, with the goal of having a Release Candidate 1 out in a couple of
weeks.

So if you've done all your Christmas shopping and have time to help
test, code review, etc. now would be the time.

-- 
--
Gavin Andresen



From tlperkins at rgbdaily.com  Tue Dec 20 21:07:17 2011
From: tlperkins at rgbdaily.com (Travell Perkins)
Date: Tue, 20 Dec 2011 16:07:17 -0500
Subject: [Bitcoin-development] Unsubsribe
Message-ID: <CAF1gzOoZsg4Ub+X94509HVq8dbYbyEKEoUj3JvqP4Qj0UpWJ+w@mail.gmail.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/8d327603/attachment.html>

From k at old.school.nz  Wed Dec 21 00:47:23 2011
From: k at old.school.nz (Kyle Henderson)
Date: Wed, 21 Dec 2011 13:47:23 +1300
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EEFAFFB.10508@parhelic.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de> <4EEFAFFB.10508@parhelic.com>
Message-ID: <CA+QPp0pDWxq73uah72Y1ShbRS4FksU6VJFznDh6uSyh7G5mbhg@mail.gmail.com>

> Developers could even choose to integrate Tor functionality into the
> client itself at some point.
>

The "satoshi" bitcoin client already supports use over TOR with the proxy
option - I think this was something Satoshi made regular use of.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/1d579878/attachment.html>

From zgenjix at yahoo.com  Wed Dec 21 00:59:00 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Tue, 20 Dec 2011 16:59:00 -0800 (PST)
Subject: [Bitcoin-development] BIP language on normative behavior
In-Reply-To: <CAAS2fgQpMWYLoT_1Za5AxvgNaXvEuJOZ2BjE94o09=t+LyfM5A@mail.gmail.com>
References: <CAAS2fgQpMWYLoT_1Za5AxvgNaXvEuJOZ2BjE94o09=t+LyfM5A@mail.gmail.com>
Message-ID: <1324429140.3740.YahooMailNeo@web121001.mail.ne1.yahoo.com>

A few weeks back I was in discussion with the IANA on getting a bitcoin URI accepted in the standard. As a prerequisite I had to read 5 huge documents. I did not end up writing that RFC.

Skilled developers have even less time than I do. While this particular RFC is really nice for keeping ambiguity at bay, it is one of many small rules that bring marginal improvements. "Rule creep" (like feature creep) starts off with good intentions but degenerates into a situation like Wikipedia or any other system with a heavy bureaucracy that can use the rules for lawyering against you.

We want to encourage skilled developers to help set the standards and participate in discussions. Beyond using good grammar and using the correct formatting (and I even help with those), I defer on the site of trusting common sense and human judgement :)

However this is a good RFC, and I will advise any future BIP contributors to read it. It offers good suggestions.

About what Luke says:

I kind of agree with him. The intention was to specify software stacks rather than end applications. This allows us to more carefully track software evolution and behaviour throughout the network. bitcoin-qt need not be tied to the Satoshi code-base and may in the future use other core systems through its intermediary layer. BitcoinJava has given rise to a bunch of other application like Android Bitcoin and MultiBit- however they are both BitcoinJava derivatives.

However BIPs are a community consensus thing. It depends on the mutual consent of everybody and if there is a commonly agreed sentiment against the wording of an Accepted (or even Active) BIP then it can be amended ad-hoc.

The purpose of BIPs is to enhance development by 1. providing a stable system environment for programmers to work towards an accepted standard 2. serve as an equaliser for smaller groups (the third party clients vs the current behemoth client) by giving them a voice or platform.

And they can only function by those who want them to function.

But personally, I really do think splitting bitcoin-qt into XXX and bitcoin-qt is a smart idea. Starting from lowest to top part of the system is smart: http://www.useragentstring.com/pages/Firefox/

Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110613 Firefox/6.0a2

Mozilla is the application suite (Mozilla Thunderbird, Mozilla Firefox, ...)

Gecko is the rendering engine
Firefox is the end application

In the original intention for BIP_0014, that would map to:

/Gecko:20110613/Firefox:6.0a2/Mozilla:5.0/

With something like WebKit, it becomes easy to see why that would be useful. You can suddenly do a network wide scan of all browsers using WebKit, rather than having to maintain a database of all WebKit enabled browsers.

So if this is contentious.

Then discuss. I'll update the BIP according to what everyone decides they like.


:)



________________________________
 From: Gregory Maxwell <gmaxwell at gmail.com>
To: Bitcoin Development <bitcoin-development at lists.sourceforge.net> 
Sent: Monday, December 19, 2011 10:29 PM
Subject: [Bitcoin-development] BIP language on normative behavior
 
I've been arguing with Luke-JR on IRC about the interpenetration of
BIP_0014?? Gavin's recent commit uses the same version string for the
GUI interface and the daemon mode.

Luke believes this is a _violation_ of BIP_0014 and an error in
judgement on Gavin's part, and a failure to conform to the community
adopted standard. I believe Luke is mistaken: that BIP_0014 actually
don't have mandatory requirements for what you put in the version
field and even if it did, that they are in fact the same software and
should have the same name.

I don't think an agreement is likely on the second point, but the
first point highlights some ambiguity in the interpretation of BIP
language. E.g. What is permitted vs encouraged vs required.

There is well established standard language for this purpose:

https://www.ietf.org/rfc/rfc2119.txt

I strongly recommend that all BIPs be written using the RFC2119
keywords where appropriate.

------------------------------------------------------------------------------
Write once. Port to many.
Get the SDK and tools to simplify cross-platform app development. Create 
new or port existing apps to sell to consumers worldwide. Explore the 
Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
http://p.sf.net/sfu/intel-appdev
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/eb203e2a/attachment.html>

From zgenjix at yahoo.com  Wed Dec 21 01:14:10 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Tue, 20 Dec 2011 17:14:10 -0800 (PST)
Subject: [Bitcoin-development] BIP language on normative behavior
In-Reply-To: <201112202007.49399.luke@dashjr.org>
References: <CAAS2fgQpMWYLoT_1Za5AxvgNaXvEuJOZ2BjE94o09=t+LyfM5A@mail.gmail.com>
	<1324429140.3740.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<201112202007.49399.luke@dashjr.org>
Message-ID: <1324430050.21731.YahooMailNeo@web121001.mail.ne1.yahoo.com>

OK, give me a shout on IRC. It is a lot of work though, so be prepared. Bring bags of patience :)



________________________________
 From: Luke-Jr <luke at dashjr.org>
To: Amir Taaki <zgenjix at yahoo.com> 
Sent: Wednesday, December 21, 2011 1:07 AM
Subject: Re: [Bitcoin-development] BIP language on normative behavior
 
On Tuesday, December 20, 2011 7:59:00 PM Amir Taaki wrote:
> A few weeks back I was in discussion with the IANA on getting a bitcoin URI
> accepted in the standard. As a prerequisite I had to read 5 huge
> documents. I did not end up writing that RFC.

I also contacted the IANA about getting the bitcoin URI spec accepted on their 
index, however never heard back. If you want, please have whoever you 
discussed it with get in touch with me. Either way, please be sure whatever 
they index is compliant with the spec on the wiki as-is (especially not being 
BTC unit specific, as this is clearly non-scalable).

Luke
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111220/90b3ac38/attachment.html>

From luke at dashjr.org  Wed Dec 21 01:46:41 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 20 Dec 2011 20:46:41 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
	into HEAD
In-Reply-To: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
Message-ID: <201112202046.42905.luke@dashjr.org>

On Tuesday, December 20, 2011 3:49:16 PM Gavin Andresen wrote:
> I've been busy pulling patches into git HEAD for a Bitcoin version
> 0.6, with the goal of having a Release Candidate 1 out in a couple of
> weeks.

I've rebuilt my 'next' and 'next-test' branches...
    git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git

Accepted for 0.6:
* 81807c3 Merge branch 'coinbaser' into next
* 6ea6db3 Merge remote branch 'laanwj/ui_copy_amount' into next
* a6ef83e Merge 'QR Code generation via libqrencode' into next
* e0673bd Merge branch 'signmessage_gui' into next

Ready for acceptance?
* 4783528 Merge remote branch 'matt/keepnode' into next-test
* 5a11d0f Merge branch 'force_send' into next-test
* 2cddc71 Merge remote branch 'sipa/comprpubkey' into next-test
* 73a8ca6 Merge remote branch 'matt/uri' into next-test
* 9314427 Merge remote branch 'gavin/testnetdifficulty' into next-test
* 1360e43 Merge branch 'stdint' into next-test

Needs review:
* 6ee82ff Merge branch 'forceresendtx' into next-test
* 8a82ba6 Merge branch 'blknotify' into next-test
* 674f1a6 Merge 'Temporarily disable "minimize to tray" in the startup phase
          if the "-min" option is specified' into next-test
* 5afd4de Merge branch 'bugfix_client_name' into next-test

Cannot be merged cleanly (at least not into next-test at this point):
* Pull 556 txinfo
* Pull 568 JSON-RPC multithreading + rpc_keepalive
* Pull 457 IPv6 JSON-RPC
* Pull 427 IPv6
* Pull 565 optimize_FastGetWork
* Pull 430 joelkatz optimizations
* Pull 562 optimize_ToHex
* Pull 452 JSON-RPC API versioning

Not yet written:
* Treat generation (almost) like normal receive
* JSON-RPC with integer amounts



From elombrozo at gmail.com  Wed Dec 21 06:19:46 2011
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Tue, 20 Dec 2011 22:19:46 -0800
Subject: [Bitcoin-development] Protocol extensions
Message-ID: <CABr1YTcq+q6jUSqPqNAqYYQHZO-FZx9ffCNNu_2nV8rcvzd9Uw@mail.gmail.com>

There are other issues besides IP address anonymization that would
need to be addressed. I'm sure at least a good number of you have read
http://arxiv.org/abs/1107.4524 and have seen Dan Kaminsky's
slideshows.

i.e. all fund aggregations (transactions with multiple inputs using
different public keys) make it easy to associate all the public keys
to a single entity. Large movements of bitcoin to addresses that
haven't been seen before are often interesting events. Then you can
correlate transactions with trades on exchanges or with other data
sources for time and amount.

However, going back to what had been said earlier, the bitcoin
protocol itself is not really designed to address these issues. It is
designed with the goal of rapidly propagating transactions over a
network and getting a bunch of peers to be able to independently
verify that they occurred in a particular order and that the
signatures are valid.

The subject of how to anonymize cryptocurrencies is a separate one,
IMHO...and one which needs to address not only how to hide the
identity of those who relay transactions but also how to organize and
manipulate wallets as to thwart attempts at block chain analysis. And
these topics, although interesting in and of themselves, was not what
this thread was intended to address. This thread was intended to
address the issue of extending the protocol to allow for independently
running thin or specialized services that can all interface via the
bitcoin protocol without requiring one to step outside the protocol
with special gateway access.



From gronager at ceptacle.com  Wed Dec 21 08:50:17 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 21 Dec 2011 09:50:17 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EEE58CA.5090902@justmoon.de>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
Message-ID: <67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>

DHTs and Bitcoin:

First, lets define the problem we want to solve: scalability - when bitcoin takes over all credit card transactions (!), and even before that, we will meet a scalability problem. The blockchain will grow rapidly, (1MB/10min or 50GB/yr) and we will constantly have transactions pending to get into a block. Further, the clients will turn into toasters just from validating all transactions. At the same time we have a level of validation and block chain distribution that we really don't need - today txes are validated by 100k clients in the future that could be 100M clients, and they are stored at way more locations than they are today. So... all this calls for a partition of the transaction/block space, and for a more flexible than 1MB / block setup.

First things first. The partitioning of the tx space. One way to partition the tx space is through a partition in hash, namely the DHT approach. There might be other schemes, but as we already have both the ability to share addresses and maintain a hash space it seems obvious.

So we would like a scheme that provides distributed validation and storage keeping a similar level of trust and security as we have today. We hence need to be able to query another node for validation and ensure it is not pulling our leg (Sybil...).

There are two important aspects of bitcoin:
1. transaction signing / validation
2. to avoid double spending

1. Is a a simple and inclusive problem to solve, 2 is more complex and exclusive. 1. can to a large extend be solved by asking for transactions and validating these against the block chain - it is hard to cheat as you can match blocks containing your transaction with the block chain headers, requiring a false node to perform heavy proof of work tasks.
If we on the other hand query other nodes for 2. just blocking an answer would be enough to enable a double spend. (at least seen from the one node querying).

Today you can, assuming you have en up to date block chain, only block pending tx'es which gives you an approximate 10 minutes scale for cheating by double spending. If we create a setup where we distribute the block index and the block chain, we can fake any older transaction as well, and leave a node to believe that a tx has not been spend. The obvious way around it is to ensure a high level of connectedness and to query several geographically distributed nodes if a tx has already been spend. But this can be quite hard and also, you don't want to flood the network with to many extra commands.

If we design the system based on the above conclusions we get:

1. A client is, based on the hash of its ip:port assigned to serve a part of the block chain, a part of the block index and possibly also a part of the bitcoin addresses (hash160).

2. Further, the client can announce that it also serves any other hashspace fractions - e.g. to enable notification of payments to its bitcoin address or use of its coins (txouts).

3. On validation of a tx, the txins are queried for at the clients serving these and a possible double spend can be monitored. We need to query more clients to ensure we are not cheated by one. And we need to maintain the requirement that they come from separate A.B address spaces (so they don't just setup a matching hash from playing with C.D and ports).

4. The proper nodes are found using Chord DHT scheme (other schemes might be suitable as well).

Thin clients keep their spendable coins to a minimum and use only one bitcoin address, that way they will only serve and listen to 3 hash fractions. If we split the current space into 4096 parts we get roughly 100 clients for each hash space.

The (only?) new attack vector, compared to the current system is the possibility that a client has only evil peers within one hash range and hence can be fooled into believing an old tx can be spend again.

The new scheme will scale well as each client will only serve a part of the hashspace and hence the number of validations and block storage can be kept at a minimum. Further, it scales well for thin clients vs more full clients as you can add as many or as few (down to 1-3) hash space parts as you want, so the new scheme includes the old scheme in the limit of subscribing to all hash space parts.

I might have overlooked something - so please fill in some comments...

Cheers,

Michael


On 18/12/2011, at 22:19, Stefan Thomas wrote:

> Hey Chris,
> 
>> The storage would be distributed, messages are routed on behalf of others, which makes finding the origin of the query hard to find (think Tor)
> 
> This type of intermediate routing makes Tor slow. Bitcoin does not and imho should not make anonymity guarantees. Many users do not need them.
> 
> Let those who want anonymity connect through Tor, Freenet, etc. It's easy to add anonymity via an extra layer, but it is impossible to add performance on top of a slow system.
> 
> That's really the only thing I wanted to point out - if you do DHTs, focus on performance, not anonymity. :)
> 
> Cheers,
> 
> Stefan
> 
> On 12/17/2011 2:37 PM, Christian Decker wrote:
>> A while back I had proposed a similar idea to the DHT, although my main goal was to reduce the need for broadcasts.
>> 
>> My idea was to structure the network in a hypercube and use prefixes to address different parts of the network, and use those prefixes also to find the location where an item (transaction, block, ...) should be stored. Each vertex in the hypercube is a small, highly connected, cluster of nodes. The storage would be distributed, messages are routed on behalf of others, which makes finding the origin of the query hard to find (think Tor), each node would have to store only O(log(p)) items, with p being the prefix length, maximum number of hops is equal to the dimension of the hypercube O(log(n)).
>> 
>> Newly created transaction will be sent directly to the location they'll be stored and miners retrieve new transactions at regular intervals. It might increase delays to the confirmations, but it reduces the number of broadcasts and storage requirements on nodes greatly.
>> 
>> Regards,
>> Chris
>> 
>> 
>> On Sat, Dec 17, 2011 at 2:13 PM, Michael Gr?nager <gronager at ceptacle.com> wrote:
>> Hey Eric,
>> 
>> Two comments.
>> 
>> 1.
>> The ability to query for transactions belonging to pubkeys or bitcoin addresses is supported today by several implementations:
>> * blockexplorer.com
>> * bitcoin-js
>> * my own libBTC (will more on this soon)
>> 
>> To query for transactions you need to use json-rpc and not the bitcoin protocol, however. But still the purpose is the same: to be able to build thin clients that can rely on a server for           storing the blockchain and keeping connected on the p2p network.
>> 
>> The reason for not having these queries part of the standard protocol (I think) are as they breaks anonymity, and that you would actually encourage people to participate in the p2p.
>> 
>> 2. The second part you mention, to some how move the storage of the blockchain into a DHT based storage would be quite nice. The benefit of this is that it could be a way to integrate the smaller clients into the network without breaking the anonymity. But it should be thought out quite carefully. Further, if each client only store a fraction of the blockchain we should work out what fraction that need to be in order to ensure a similar service level. I would be           happy to work with you on this.
>> 
>> Cheers,
>> 
>> Michael
>> 
>> On 17/12/2011, at 08:41, Eric Lombrozo wrote:
>> 
>>> Hey, guys.
>>> 
>>> I haven't posted here before so I'll introduce myself. My name's Eric,
>>> I've been developing cryptocurrency-related
>>> software for several months now, I've implemented some libraries for
>>> dealing with core bitcoin datastructures, made
>>> some custom builds of bitcoind and interfaced it with a few apps I've written.
>>> 
>>> In doing so, I've come to appreciate just how little of the potential
>>> for the bitcoin protocol is being exploited right now...
>>> not only in terms of the script features but in terms of the potential
>>> commands and node types that could exist.
>>> 
>>> For instance, the protocol spec at
>>> https://en.bitcoin.it/wiki/Protocol_specification only has 16 commands
>>> listed and
>>> only one service type...despite having a full 12 bytes for a command
>>> code and a full eight bytes for a services
>>> type.
>>> 
>>> The fact that only one node service type is specified is probably due
>>> to the fact that the satoshi client was written
>>> to be a standalone monolithic app that took care of all the essential
>>> needs for a network of peers.
>>> i.e. block chain storage/management, transaction signing/verification,
>>> key generation/wallet management, block mining, etc...
>>> However, I think there's an urgent need for breaking up all these
>>> different tasks into separate components that can run as independent
>>> services on different types of devices.
>>> 
>>> One of the big issues I'm dealing with now pertains to block chain
>>> storage. As of right now, it is implemented as sequential
>>> disk files using Berkeley DB in the satoshi client. Then you have
>>> other projects that have been using SQL tables, etc...
>>> But I believe the direction this really needs to move towards is some
>>> sort of distributed hash table...and the database queries
>>> should be performed using the bitcoin protocol itself. Perhaps adding
>>> a few more commands. As things stand right now,
>>> the only way to query for transactions or blocks is by their hash. And
>>> once a transaction gets incorporated into a block and
>>> removed from the transaction pool, one can no longer query it by the
>>> transaction hash without stepping outside the bitcoin protocol.
>>> We need access to the disk file that stores the blocks whether it be
>>> via Berkeley DB or SQL or whatever.
>>> 
>>> I propose an extension to the bitcoin protocol to provide methods for
>>> performing more sophisticated queries, such as "Give me
>>> an inventory of transactions involving this particular public key" or
>>> "Give me an inventory all transactions in the last n blocks with
>>> unredeemed outputs." This could be done by adding a few more commands.
>>> 
>>> Furthermore, I propose a new network services type for nodes that
>>> serve as block chain/transaction pool storage.
>>> 
>>> Of couse, any peer that wishes to verify the integrity of the block
>>> chain would still have to download at the very least
>>> all the block headers...and to be completely sure, also all the blocks
>>> themselves...and verify everything. But it would be
>>> very nice to be able to run thin services that can rely on other
>>> network peers to do this work. It is still possible to attain
>>> a high level of confidence in the integrity by querying multiple peers
>>> for similar objects and comparing. It is also possible
>>> to run your own dedicated block chain storage servers which you trust.
>>> 
>>> There are other ideas I have for other types of services, too.
>>> 
>>> Anyhow, I'm just throwing this out there...if anyone's interested I'd
>>> love to develop these ideas further and help put together some
>>> specs.
>>> 
>>> -Eric Lombrozo
>>> 
>>> ------------------------------------------------------------------------------
>>> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
>>> Microsoft is holding a special Learn Windows Azure training event for
>>> developers. It will provide a great way to learn Windows Azure and what it
>>> provides. You can attend the event by watching it streamed LIVE online.
>>> Learn more at http://p.sf.net/sfu/ms-windowsazure
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
>> Microsoft is holding a special Learn Windows Azure training event for
>> developers. It will provide a great way to learn Windows Azure and what it
>> provides. You can attend the event by watching it streamed LIVE online.
>> Learn more at http://p.sf.net/sfu/ms-windowsazure
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
>> Microsoft is holding a special Learn Windows Azure training event for 
>> developers. It will provide a great way to learn Windows Azure and what it 
>> provides. You can attend the event by watching it streamed LIVE online.  
>> Learn more at 
>> http://p.sf.net/sfu/ms-windowsazure
>> 
>> 
>> _______________________________________________
>> Bitcoin-development mailing list
>> 
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> Learn Windows Azure Live!  Tuesday, Dec 13, 2011
> Microsoft is holding a special Learn Windows Azure training event for 
> developers. It will provide a great way to learn Windows Azure and what it 
> provides. You can attend the event by watching it streamed LIVE online.  
> Learn more at http://p.sf.net/sfu/ms-windowsazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From andyparkins at gmail.com  Wed Dec 21 09:27:05 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 21 Dec 2011 09:27:05 +0000
Subject: [Bitcoin-development] BIP language on normative behavior
In-Reply-To: <1324429140.3740.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <CAAS2fgQpMWYLoT_1Za5AxvgNaXvEuJOZ2BjE94o09=t+LyfM5A@mail.gmail.com>
	<1324429140.3740.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <201112210927.11979.andyparkins@gmail.com>

On 2011 December 21 Wednesday, Amir Taaki wrote:

> In the original intention for BIP_0014, that would map to:
> 
> /Gecko:20110613/Firefox:6.0a2/Mozilla:5.0/
> 
> With something like WebKit, it becomes easy to see why that would be
> useful. You can suddenly do a network wide scan of all browsers using
> WebKit, rather than having to maintain a database of all WebKit enabled
> browsers.

This seems excellent to me.

I think most developers want to do the right thing when it comes to standards, 
and it is only the inflexibility or ambiguity of a standard that means they 
don't.

This heirarchical method lets every client supply all the information they 
have -- nobody has to make a decision to leave something out.  The internal 
debate they would have "is my gui version more important than my protocol 
engine version?" is unnecessary.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/c7b379b6/attachment.sig>

From mike at plan99.net  Wed Dec 21 10:12:07 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 21 Dec 2011 11:12:07 +0100
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
 into HEAD
In-Reply-To: <201112202046.42905.luke@dashjr.org>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
	<201112202046.42905.luke@dashjr.org>
Message-ID: <CANEZrP0fNUPLPoSb4m9ASyk-1Y+roArNxWu+AKGOgRQN9Ew1TQ@mail.gmail.com>

Thanks for this summary Luke.

Git does not produce very helpful summaries when every commit is a merge.
Is there a way to fix that? You have to guess what a change does based on
the name of the topic branch currently.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/334ef2b9/attachment.html>

From laanwj at gmail.com  Wed Dec 21 10:30:59 2011
From: laanwj at gmail.com (Wladimir)
Date: Wed, 21 Dec 2011 11:30:59 +0100
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
 into HEAD
In-Reply-To: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
Message-ID: <CA+s+GJD7L6PDu5=EQw_zf5vcOyqE3KrBvY=einAdeCZStC5xGQ@mail.gmail.com>

Woohoo, 0.6.0 merging time!

I'll merge some GUI pull requests for 0.6.x this/next week.

Wladimir

On Tue, Dec 20, 2011 at 9:49 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> FYI for anybody who doesn't hang out in IRC:
>
> I've been busy pulling patches into git HEAD for a Bitcoin version
> 0.6, with the goal of having a Release Candidate 1 out in a couple of
> weeks.
>
> So if you've done all your Christmas shopping and have time to help
> test, code review, etc. now would be the time.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Write once. Port to many.
> Get the SDK and tools to simplify cross-platform app development. Create
> new or port existing apps to sell to consumers worldwide. Explore the
> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
> http://p.sf.net/sfu/intel-appdev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/2ea0dfbd/attachment.html>

From elombrozo at gmail.com  Wed Dec 21 11:42:40 2011
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 21 Dec 2011 03:42:40 -0800
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
	<67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
Message-ID: <CABr1YTdUQeAuw2vwZS=VvDU1dTrN+eqjHRXMsZp2axcxbTsO8A@mail.gmail.com>

Is it just me or does it seem inevitable that at some point supernodes
will emerge that other nodes trust to validate transactions for them?
Supernodes needn't even store the entire block chain and transaction
pool...it would be sufficient that they keep lists of IP addresses of
other trustworthy nodes and partition them into a hashspace.

Anonymous peers have no reputation to defend...but a trusted supernode
would, which could provide just enough incentive for the supernode to
do its best to ensure the nodes it vouches for are indeed legit. Of
course, unless the supernode is validating the entire block chain and
transaction pool itself, it could only assess the trustworthiness of
other nodes by performing random sampling.

Michael, I really like your ideas and the clarity you bring to the
issue. Regarding the potential attack vector you mention, would it be
possible to partition the hashspace to minimize the risk that an
attacker can manage to disproportionately gain control over a part of
the hashspace?



From elombrozo at gmail.com  Wed Dec 21 11:50:47 2011
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 21 Dec 2011 03:50:47 -0800
Subject: [Bitcoin-development] Why are my posts being put in new threads?
Message-ID: <CABr1YTf_s06Z4QgWLOSwjznLPrbGGVRk0=DxKTcGs6t6MZcMFw@mail.gmail.com>

I've made a couple recent posts that were intended for the Protocol
extensions thread but have been put in new threads. What part of the
email message is used to identify the thread to which it belongs? I
would have thought the subject, but apparently it isn't.



From gronager at ceptacle.com  Wed Dec 21 12:41:51 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 21 Dec 2011 13:41:51 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CABr1YTdUQeAuw2vwZS=VvDU1dTrN+eqjHRXMsZp2axcxbTsO8A@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
	<67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
	<CABr1YTdUQeAuw2vwZS=VvDU1dTrN+eqjHRXMsZp2axcxbTsO8A@mail.gmail.com>
Message-ID: <028C9CB5-A7C9-4042-BC00-269046E2DD19@ceptacle.com>

I find it likely that we will at some point have supernodes. If we have browser based wallets then the server for these automatically becomes supernodes. Further, if we move along that direction, it becomes much simpler to use both the scheme I proposed or to use a a lot of other schemes for sharing the validation work on a farm constituting the supernode.

However, if we want to keep bitcoin in a real p2p setup and enable scalability in terms of ensuring both thin and fat client to connect then we need to go along the path I propose.

Actually, after thinking a bit more about the possible new attack vector I don't find it that alarming - if you still require 7 confirmations of any bigger transaction before you, as receiver accepts the transaction as payed you will not risk anything. The question is then if it is sufficiently easy to fake small transaction to e.g. gain access to micropayment based web services. I would again say no - the requirement that you have ok from e.g. 8 different A.B nodes will make it extremely difficult to cheat, and that would even require you to gain some level of control over the network that the service you want to cheat is connected through.

This means that you should not divide the hash space more finely than you would at all times be able to find 8 different A.B nodes. As the number of clients grows you can then divide the hash space further. (with 100000 nodes today and a division into 512 parts you would have approx 200 nodes to choose from).

Cheers,

M



On 21/12/2011, at 12:42, Eric Lombrozo wrote:

> Is it just me or does it seem inevitable that at some point supernodes
> will emerge that other nodes trust to validate transactions for them?
> Supernodes needn't even store the entire block chain and transaction
> pool...it would be sufficient that they keep lists of IP addresses of
> other trustworthy nodes and partition them into a hashspace.
> 
> Anonymous peers have no reputation to defend...but a trusted supernode
> would, which could provide just enough incentive for the supernode to
> do its best to ensure the nodes it vouches for are indeed legit. Of
> course, unless the supernode is validating the entire block chain and
> transaction pool itself, it could only assess the trustworthiness of
> other nodes by performing random sampling.
> 
> Michael, I really like your ideas and the clarity you bring to the
> issue. Regarding the potential attack vector you mention, would it be
> possible to partition the hashspace to minimize the risk that an
> attacker can manage to disproportionately gain control over a part of
> the hashspace?
> 
> ------------------------------------------------------------------------------
> Write once. Port to many.
> Get the SDK and tools to simplify cross-platform app development. Create 
> new or port existing apps to sell to consumers worldwide. Explore the 
> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
> http://p.sf.net/sfu/intel-appdev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development







From luke at dashjr.org  Wed Dec 21 15:44:53 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 21 Dec 2011 10:44:53 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
	into HEAD
In-Reply-To: <CANEZrP0fNUPLPoSb4m9ASyk-1Y+roArNxWu+AKGOgRQN9Ew1TQ@mail.gmail.com>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
	<201112202046.42905.luke@dashjr.org>
	<CANEZrP0fNUPLPoSb4m9ASyk-1Y+roArNxWu+AKGOgRQN9Ew1TQ@mail.gmail.com>
Message-ID: <201112211044.54602.luke@dashjr.org>

On Wednesday, December 21, 2011 5:12:07 AM Mike Hearn wrote:
> Git does not produce very helpful summaries when every commit is a merge.
> Is there a way to fix that? You have to guess what a change does based on
> the name of the topic branch currently.

Not sure what you mean. Maybe `git log --no-merges` ?



From luke at dashjr.org  Wed Dec 21 15:46:35 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 21 Dec 2011 10:46:35 -0500
Subject: [Bitcoin-development] Why are my posts being put in new threads?
In-Reply-To: <CABr1YTf_s06Z4QgWLOSwjznLPrbGGVRk0=DxKTcGs6t6MZcMFw@mail.gmail.com>
References: <CABr1YTf_s06Z4QgWLOSwjznLPrbGGVRk0=DxKTcGs6t6MZcMFw@mail.gmail.com>
Message-ID: <201112211046.36439.luke@dashjr.org>

On Wednesday, December 21, 2011 6:50:47 AM Eric Lombrozo wrote:
> I've made a couple recent posts that were intended for the Protocol
> extensions thread but have been put in new threads. What part of the
> email message is used to identify the thread to which it belongs? I
> would have thought the subject, but apparently it isn't.

http://cr.yp.to/immhf/thread.html



From decker.christian at gmail.com  Wed Dec 21 16:10:45 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 21 Dec 2011 17:10:45 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <028C9CB5-A7C9-4042-BC00-269046E2DD19@ceptacle.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
	<67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
	<CABr1YTdUQeAuw2vwZS=VvDU1dTrN+eqjHRXMsZp2axcxbTsO8A@mail.gmail.com>
	<028C9CB5-A7C9-4042-BC00-269046E2DD19@ceptacle.com>
Message-ID: <CALxbBHW4v2FohtaFi0MRey5RoBQodEK5kPsGCAv5xVmmDOOjZQ@mail.gmail.com>

For the future evolution without considering DHTs:
While I think we will sooner or later have supernodes, I don't think they
will need to be trusted too much.
Supernodes will be those nodes that verify all transactions and make them
available to miners. Since miners will become more and more specialized
these supernodes are likely to be owned by the miners themself. To be a
miner either you need to verify all the transactions you include (otherwise
others might be able to find an error in your block and thus drop it) or
have someone that verifies them for you. In the end I think we'll end up
with a hierarchical network, with the miners/supernodes tighly
interconnected at the top and the lightweight clients that simply verify
transactions (or their inputs to be precise) that are destined for them at
the bottom.

As for the DHT we had a few brainstorming sessions a while back on the
forum http://bit.ly/sc2RLZ (gmaxwell didn't like it then either :D)
Forcing someone to participate in a fixed position in the block storage
network is a good way to reduce the risk of a sybil attack as Michael said.
The hash should include only information that cannot be changed by the
user, so IP can be used, but including the port is risky.

Broadcasting the transactions would not need to be done, since miners fetch
them from their storage place, alternatively we could use the inv broadcast
to notify peers about a new block/transaction and let it retrieve them from
the permanent storage (DHT or block storage network). If we route traffic
internally in the DHT we could even start caching at nodes leading to the
real location, since announcements would lead to flashcrowds, putting heavy
load on the responsible nodes. Caching is not a risk since the hash of the
object to be retrieved is already known.

Regards,
Chris

On Wed, Dec 21, 2011 at 1:41 PM, Michael Gr?nager <gronager at ceptacle.com>wrote:

> I find it likely that we will at some point have supernodes. If we have
> browser based wallets then the server for these automatically becomes
> supernodes. Further, if we move along that direction, it becomes much
> simpler to use both the scheme I proposed or to use a a lot of other
> schemes for sharing the validation work on a farm constituting the
> supernode.
>
> However, if we want to keep bitcoin in a real p2p setup and enable
> scalability in terms of ensuring both thin and fat client to connect then
> we need to go along the path I propose.
>
> Actually, after thinking a bit more about the possible new attack vector I
> don't find it that alarming - if you still require 7 confirmations of any
> bigger transaction before you, as receiver accepts the transaction as payed
> you will not risk anything. The question is then if it is sufficiently easy
> to fake small transaction to e.g. gain access to micropayment based web
> services. I would again say no - the requirement that you have ok from e.g.
> 8 different A.B nodes will make it extremely difficult to cheat, and that
> would even require you to gain some level of control over the network that
> the service you want to cheat is connected through.
>
> This means that you should not divide the hash space more finely than you
> would at all times be able to find 8 different A.B nodes. As the number of
> clients grows you can then divide the hash space further. (with 100000
> nodes today and a division into 512 parts you would have approx 200 nodes
> to choose from).
>
> Cheers,
>
> M
>
>
>
> On 21/12/2011, at 12:42, Eric Lombrozo wrote:
>
> > Is it just me or does it seem inevitable that at some point supernodes
> > will emerge that other nodes trust to validate transactions for them?
> > Supernodes needn't even store the entire block chain and transaction
> > pool...it would be sufficient that they keep lists of IP addresses of
> > other trustworthy nodes and partition them into a hashspace.
> >
> > Anonymous peers have no reputation to defend...but a trusted supernode
> > would, which could provide just enough incentive for the supernode to
> > do its best to ensure the nodes it vouches for are indeed legit. Of
> > course, unless the supernode is validating the entire block chain and
> > transaction pool itself, it could only assess the trustworthiness of
> > other nodes by performing random sampling.
> >
> > Michael, I really like your ideas and the clarity you bring to the
> > issue. Regarding the potential attack vector you mention, would it be
> > possible to partition the hashspace to minimize the risk that an
> > attacker can manage to disproportionately gain control over a part of
> > the hashspace?
> >
> >
> ------------------------------------------------------------------------------
> > Write once. Port to many.
> > Get the SDK and tools to simplify cross-platform app development. Create
> > new or port existing apps to sell to consumers worldwide. Explore the
> > Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
> > http://p.sf.net/sfu/intel-appdev
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
>
>
> ------------------------------------------------------------------------------
> Write once. Port to many.
> Get the SDK and tools to simplify cross-platform app development. Create
> new or port existing apps to sell to consumers worldwide. Explore the
> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
> http://p.sf.net/sfu/intel-appdev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111221/c8347296/attachment.html>

From luke at dashjr.org  Wed Dec 21 16:45:42 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 21 Dec 2011 11:45:42 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
	into HEAD
In-Reply-To: <201112202046.42905.luke@dashjr.org>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
	<201112202046.42905.luke@dashjr.org>
Message-ID: <201112211145.43900.luke@dashjr.org>

On Tuesday, December 20, 2011 8:46:41 PM Luke-Jr wrote:
> On Tuesday, December 20, 2011 3:49:16 PM Gavin Andresen wrote:
> > I've been busy pulling patches into git HEAD for a Bitcoin version
> > 0.6, with the goal of having a Release Candidate 1 out in a couple of
> > weeks.
> 
> I've rebuilt my 'next' and 'next-test' branches...
>     git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git

And here's yet another update, this time with a total of 21 branches merged. 
Anyone want to make binaries to get these branches some wider testing?

Accepted for 0.6:
* 81807c3 (pull 719) Coinbaser
* 6ea6db3 (pull 683) Context menu updates for TransactionView and...
* a6ef83e (pull 629) QR Code generation via libqrencode
* e0673bd (pull 582) Bitcoin-Qt signmessage GUI

Ready for acceptance?
* 4783528 (pull 454) Add -keepnode which attempts to -addnode and keep a...
* 5a11d0f (pull 570) Specify fees explicitly via JSON-RPC
* 2cddc71 (pull 649) Compressed pubkeys
* 73a8ca6 (pull 593) Full URL Support in bitcoin-qt
* 27a2460 (pull 721) 'getmininginfo' method
* e57ccf4 (pull 686) Testnet difficulty calculation changes, to take effect...
* 5b4a18d (pull 720) Use standard C99 (and Qt) types for 64-bit integers

Needs review:
* c7ee97d (pull 421) added option -forceresendtx
* cff2c28 (pull 714) Execute a command when best block changes...
* 3ca784f (pull 691) Temporarily disable "minimize to tray" in the startup...
* 59842f5 (pull 568) Multithreaded JSON-RPC with HTTP 1.1 Keep-Alive support
* d08e8fd (pull 565) FastGetWork optimization
* 0dc52ac (pull 715) Bugfix: comply with BIP 0014 ...
* f88dddc (pull 559) -acceptnonstdtxn option to skip "non-standard...
* 95d3e7e (pull 552) Typo-tolerant (optimized) Base58 parser
* 45beffe (pull 553) Parse URIs with non-BTC amounts
* 74439a5 (pull 562) Optimized binary-to-hex converter (ToHex)

Cannot be merged cleanly (at least not into next-test at this point):
*         (pull 430) joelkatz optimizations
*         (pull 452) JSON-RPC API versioning
*         (pull 457) IPv6 JSON-RPC
*         (pull 427) IPv6

Not yet written:
*                    Treat generation (almost) like normal receive
*                    JSON-RPC with integer amounts



From jgarzik at exmulti.com  Wed Dec 21 17:12:43 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 21 Dec 2011 12:12:43 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
 into HEAD
In-Reply-To: <201112211145.43900.luke@dashjr.org>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
	<201112202046.42905.luke@dashjr.org>
	<201112211145.43900.luke@dashjr.org>
Message-ID: <CA+8xBpfdGM0QNhc=sJ5qZQuf6PxsO1aHOrJ331WsQ_kwVWcR2g@mail.gmail.com>

On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:
> Accepted for 0.6:
> * 81807c3 (pull 719) Coinbaser

This is not "accepted" as discussed yesterday on IRC.  You need to
find buy-in from some other miners to make sure this is what "they"
want, rather than just what "you" want.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From luke at dashjr.org  Wed Dec 21 17:14:00 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 21 Dec 2011 12:14:00 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
	into HEAD
In-Reply-To: <CA+8xBpfdGM0QNhc=sJ5qZQuf6PxsO1aHOrJ331WsQ_kwVWcR2g@mail.gmail.com>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
	<201112211145.43900.luke@dashjr.org>
	<CA+8xBpfdGM0QNhc=sJ5qZQuf6PxsO1aHOrJ331WsQ_kwVWcR2g@mail.gmail.com>
Message-ID: <201112211214.02046.luke@dashjr.org>

On Wednesday, December 21, 2011 12:12:43 PM Jeff Garzik wrote:
> On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:
> > Accepted for 0.6:
> > * 81807c3 (pull 719) Coinbaser
> 
> This is not "accepted" as discussed yesterday on IRC.  You need to
> find buy-in from some other miners to make sure this is what "they"
> want, rather than just what "you" want.

It was per Gavin on IRC before yesterday. And there is already buy-in from 
other miners.



From jordanmack at parhelic.com  Wed Dec 21 17:17:01 2011
From: jordanmack at parhelic.com (Jordan Mack)
Date: Wed, 21 Dec 2011 09:17:01 -0800
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
	<67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
Message-ID: <4EF2148D.40801@parhelic.com>

I think it would be a lot more than that. According to the Scalability 
page (https://en.bitcoin.it/wiki/Scalability) if Bitcoin took over all 
credit card transactions, that would be about 1.14GB per block. I 
believe that is 58.5PB per year. (6*24*365*1.14/1024) This would also 
mean the distribution of 2MB of block data per second, which doesn't 
include broadcast overhead.

On 12/21/2011 12:50 AM, Michael Gr?nager wrote:
> when bitcoin takes over all credit card transactions (!), and even before that,
 > we will meet a scalability problem. The blockchain will grow rapidly,
> (1MB/10min  or 50GB/yr)



From jgarzik at exmulti.com  Wed Dec 21 17:17:57 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 21 Dec 2011 12:17:57 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
 into HEAD
In-Reply-To: <201112211214.02046.luke@dashjr.org>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
	<201112211145.43900.luke@dashjr.org>
	<CA+8xBpfdGM0QNhc=sJ5qZQuf6PxsO1aHOrJ331WsQ_kwVWcR2g@mail.gmail.com>
	<201112211214.02046.luke@dashjr.org>
Message-ID: <CA+8xBpexr66ahs_+NtuGFNmQvmkp2J5HMCt3j2ysHL=1N-mS3w@mail.gmail.com>

On Wed, Dec 21, 2011 at 12:14 PM, Luke-Jr <luke at dashjr.org> wrote:
> On Wednesday, December 21, 2011 12:12:43 PM Jeff Garzik wrote:
>> On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:
>> > Accepted for 0.6:
>> > * 81807c3 (pull 719) Coinbaser
>>
>> This is not "accepted" as discussed yesterday on IRC. ?You need to
>> find buy-in from some other miners to make sure this is what "they"
>> want, rather than just what "you" want.
>
> It was per Gavin on IRC before yesterday.

Quoting IRC yesterday,
<gavinandresen> jgarzik:  I defer to your judgement on coinbaser, I don't care.

> And there is already buy-in from
> other miners.

Then post data backing up that vague statement.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From luke at dashjr.org  Wed Dec 21 17:37:39 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 21 Dec 2011 12:37:39 -0500
Subject: [Bitcoin-development] Changes for version 0.6 are being pulled
	into HEAD
In-Reply-To: <CA+8xBpexr66ahs_+NtuGFNmQvmkp2J5HMCt3j2ysHL=1N-mS3w@mail.gmail.com>
References: <CABsx9T3u5onesvWr46ZnKCsYAnxxoLn38PuL6K7RrYqmX8pQHw@mail.gmail.com>
	<201112211214.02046.luke@dashjr.org>
	<CA+8xBpexr66ahs_+NtuGFNmQvmkp2J5HMCt3j2ysHL=1N-mS3w@mail.gmail.com>
Message-ID: <201112211237.40206.luke@dashjr.org>

On Wednesday, December 21, 2011 12:17:57 PM Jeff Garzik wrote:
> On Wed, Dec 21, 2011 at 12:14 PM, Luke-Jr <luke at dashjr.org> wrote:
> > On Wednesday, December 21, 2011 12:12:43 PM Jeff Garzik wrote:
> >> On Wed, Dec 21, 2011 at 11:45 AM, Luke-Jr <luke at dashjr.org> wrote:
> >> > Accepted for 0.6:
> >> > * 81807c3 (pull 719) Coinbaser
> >> 
> >> This is not "accepted" as discussed yesterday on IRC.  You need to
> >> find buy-in from some other miners to make sure this is what "they"
> >> want, rather than just what "you" want.
> > 
> > It was per Gavin on IRC before yesterday.
> 
> Quoting IRC yesterday,
> <gavinandresen> jgarzik:  I defer to your judgement on coinbaser, I don't
> care.

[Friday, December 02, 2011] [1:57:14 PM] <gavinandresen> luke-jr: ok-- there 
seems to be general consensus to pull coinbaser for 0.6, so I'll probably pull 
it before op_eval and rework the op_eval code to use coinbaser.

> > And there is already buy-in from other miners.
> 
> Then post data backing up that vague statement.

At least Eclipse (235 GH/s) is using it, and slush (1.3 TH/s) intends to.



From gronager at ceptacle.com  Thu Dec 22 09:18:52 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 22 Dec 2011 10:18:52 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CALxbBHW4v2FohtaFi0MRey5RoBQodEK5kPsGCAv5xVmmDOOjZQ@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
	<67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
	<CABr1YTdUQeAuw2vwZS=VvDU1dTrN+eqjHRXMsZp2axcxbTsO8A@mail.gmail.com>
	<028C9CB5-A7C9-4042-BC00-269046E2DD19@ceptacle.com>
	<CALxbBHW4v2FohtaFi0MRey5RoBQodEK5kPsGCAv5xVmmDOOjZQ@mail.gmail.com>
Message-ID: <84C7327F-4149-4F69-8D7A-F5B3BBE96FA4@ceptacle.com>

> 
> As for the DHT we had a few brainstorming sessions a while back on the forum http://bit.ly/sc2RLZ (gmaxwell didn't like it then either :D)
> Forcing someone to participate in a fixed position in the block storage network is a good way to reduce the risk of a sybil attack as Michael said. The hash should include only information that cannot be changed by the user, so IP can be used, but including the port is risky.

Agree, that is why we need to keep the different A.B segment requirement as is also imposed in the client today.

> 
> Broadcasting the transactions would not need to be done, since miners fetch them from their storage place, alternatively we could use the inv broadcast to notify peers about a new block/transaction and let it retrieve them from the permanent storage (DHT or block storage network). If we route traffic internally in the DHT we could even start caching at nodes leading to the real location, since announcements would lead to flashcrowds, putting heavy load on the responsible nodes. Caching is not a risk since the hash of the object to be retrieved is already known.

I agree that in practice the thinner nodes would most likely just serve as cache, but they need notification on tx'es involving some of their tx outs or involving some of theirs bitcoin addresses. Today there are some designs that operate with a thin client that connects to a (web)server and subscribe to listen for transactions involving a specific bitcoin address. By letting that be a part of the hash space including that address you would not reveal your address to the server and we would keep a true p2p setup.

Best regards,

Michael

> 
> Regards,
> Chris
> 
> On Wed, Dec 21, 2011 at 1:41 PM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> I find it likely that we will at some point have supernodes. If we have browser based wallets then the server for these automatically becomes supernodes. Further, if we move along that direction, it becomes much simpler to use both the scheme I proposed or to use a a lot of other schemes for sharing the validation work on a farm constituting the supernode.
> 
> However, if we want to keep bitcoin in a real p2p setup and enable scalability in terms of ensuring both thin and fat client to connect then we need to go along the path I propose.
> 
> Actually, after thinking a bit more about the possible new attack vector I don't find it that alarming - if you still require 7 confirmations of any bigger transaction before you, as receiver accepts the transaction as payed you will not risk anything. The question is then if it is sufficiently easy to fake small transaction to e.g. gain access to micropayment based web services. I would again say no - the requirement that you have ok from e.g. 8 different A.B nodes will make it extremely difficult to cheat, and that would even require you to gain some level of control over the network that the service you want to cheat is connected through.
> 
> This means that you should not divide the hash space more finely than you would at all times be able to find 8 different A.B nodes. As the number of clients grows you can then divide the hash space further. (with 100000 nodes today and a division into 512 parts you would have approx 200 nodes to choose from).
> 
> Cheers,
> 
> M
> 
> 
> 
> On 21/12/2011, at 12:42, Eric Lombrozo wrote:
> 
>> Is it just me or does it seem inevitable that at some point supernodes
>> will emerge that other nodes trust to validate transactions for them?
>> Supernodes needn't even store the entire block chain and transaction
>> pool...it would be sufficient that they keep lists of IP addresses of
>> other trustworthy nodes and partition them into a hashspace.
>> 
>> Anonymous peers have no reputation to defend...but a trusted supernode
>> would, which could provide just enough incentive for the supernode to
>> do its best to ensure the nodes it vouches for are indeed legit. Of
>> course, unless the supernode is validating the entire block chain and
>> transaction pool itself, it could only assess the trustworthiness of
>> other nodes by performing random sampling.
>> 
>> Michael, I really like your ideas and the clarity you bring to the
>> issue. Regarding the potential attack vector you mention, would it be
>> possible to partition the hashspace to minimize the risk that an
>> attacker can manage to disproportionately gain control over a part of
>> the hashspace?
>> 
>> ------------------------------------------------------------------------------
>> Write once. Port to many.
>> Get the SDK and tools to simplify cross-platform app development. Create
>> new or port existing apps to sell to consumers worldwide. Explore the
>> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
>> http://p.sf.net/sfu/intel-appdev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Write once. Port to many.
> Get the SDK and tools to simplify cross-platform app development. Create
> new or port existing apps to sell to consumers worldwide. Explore the
> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
> http://p.sf.net/sfu/intel-appdev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From gronager at ceptacle.com  Thu Dec 22 09:19:30 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 22 Dec 2011 10:19:30 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <4EF2148D.40801@parhelic.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<82659F61-0449-47BB-88DC-497E0D02F8A1@ceptacle.com>
	<CALxbBHUXEJLRDZ=RS1vuvkm7rDjFUPir0sU__f6TJXiTTQxWzA@mail.gmail.com>
	<4EEE58CA.5090902@justmoon.de>
	<67FAA76C-1734-471D-A3D8-31E5216DD512@ceptacle.com>
	<4EF2148D.40801@parhelic.com>
Message-ID: <08D50310-D91D-480B-A324-F68E25609D63@ceptacle.com>

Agree, but even before that, we will meet problems of the current 1MB/10min limit.

The calculations from the scalability link surely indicates that there are 2 options for scalability either go for trusted supernodes backed by huge hardware resources or something else would be needed. The supernode approach is simple and easy to implement, but it also breaks a lot of the nice features about bitcoin. So if we want bitcoin to stay p2p we need to deploy other strategies. The hash space partitioning is one of them. And the nice thing is that it can be made to scale even for a javascript based validating and fully connected client running on a smartphone in a bitcoin future with billions of clients and transactions, and still it does not exclude you from running a trusted supernode either. 

Cheers,

M

On 21/12/2011, at 18:17, Jordan Mack wrote:

> I think it would be a lot more than that. According to the Scalability 
> page (https://en.bitcoin.it/wiki/Scalability) if Bitcoin took over all 
> credit card transactions, that would be about 1.14GB per block. I 
> believe that is 58.5PB per year. (6*24*365*1.14/1024) This would also 
> mean the distribution of 2MB of block data per second, which doesn't 
> include broadcast overhead.
> 
> On 12/21/2011 12:50 AM, Michael Gr?nager wrote:
>> when bitcoin takes over all credit card transactions (!), and even before that,
>> we will meet a scalability problem. The blockchain will grow rapidly,
>> (1MB/10min  or 50GB/yr)
> 
> ------------------------------------------------------------------------------
> Write once. Port to many.
> Get the SDK and tools to simplify cross-platform app development. Create 
> new or port existing apps to sell to consumers worldwide. Explore the 
> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
> http://p.sf.net/sfu/intel-appdev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From andyparkins at gmail.com  Thu Dec 22 10:12:48 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 22 Dec 2011 10:12:48 +0000
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <CALxbBHW4v2FohtaFi0MRey5RoBQodEK5kPsGCAv5xVmmDOOjZQ@mail.gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<028C9CB5-A7C9-4042-BC00-269046E2DD19@ceptacle.com>
	<CALxbBHW4v2FohtaFi0MRey5RoBQodEK5kPsGCAv5xVmmDOOjZQ@mail.gmail.com>
Message-ID: <201112221012.55565.andyparkins@gmail.com>

On 2011 December 21 Wednesday, Christian Decker wrote:

> Supernodes will be those nodes that verify all transactions and make them
> available to miners. Since miners will become more and more specialized
> these supernodes are likely to be owned by the miners themself. To be a
> miner either you need to verify all the transactions you include (otherwise
> others might be able to find an error in your block and thus drop it) or
> have someone that verifies them for you. In the end I think we'll end up
> with a hierarchical network, with the miners/supernodes tighly
> interconnected at the top and the lightweight clients that simply verify
> transactions (or their inputs to be precise) that are destined for them at
> the bottom.

A thought occurred to me.  We already run a decentralised system, but it's 
done by making everyone duplicate all other work.  There is no fundamental 
reason why all work needs to be duplicated though.  What about this: every 
node randomly chooses whether to verify any particular transaction.  If we 
assume the network is large and the random factor is correctly chosen, then we 
can still guarantee that every transaction is verified.  Then, we simply add a 
protocol message that is a negative-announce transaction.  That is to say, we 
give nodes a way of telling other nodes that they think a transaction is 
invalid.  The other nodes are then free to verify _that_ assertion and forward 
the negative-announce.

Miners can then listen for negative-announcements and use them to decide were 
to dedicate their verification efforts.  They then don't need to verify all 
(or perhaps even any) transactions themselves and can dedicate their 
processing power to mining.

(I've actually mentioned this idea before, but that time I was using it as a 
double-spend prevention method).



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/b2825251/attachment.sig>

From gronager at ceptacle.com  Thu Dec 22 10:27:32 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 22 Dec 2011 11:27:32 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <201112221012.55565.andyparkins@gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<028C9CB5-A7C9-4042-BC00-269046E2DD19@ceptacle.com>
	<CALxbBHW4v2FohtaFi0MRey5RoBQodEK5kPsGCAv5xVmmDOOjZQ@mail.gmail.com>
	<201112221012.55565.andyparkins@gmail.com>
Message-ID: <23F92B83-4E96-401B-8A1C-3E6FE9DD8A8B@ceptacle.com>

It is analog to getting assigned a random part (based on IP) of the hashspace and then only verify transactions within this fraction.

But, there is in fact a subtle difference: If anyone can choose to verify at random, you will see lazy implementations where random means none, and as it is random you cannot, from the outside, judge if a node is taking part in the validation work or if it just benefitting from others announcements. In the hash space part, you can monitor peers and see if they did not tell you about a failed validation and then disconnect from them as they are either malicious or lazy.

Besides from that, I like a setup where we scream about failed verifications, but keep a low profile on things that actually verifies...

/M


On 22/12/2011, at 11:12, Andy Parkins wrote:

> On 2011 December 21 Wednesday, Christian Decker wrote:
> 
>> Supernodes will be those nodes that verify all transactions and make them
>> available to miners. Since miners will become more and more specialized
>> these supernodes are likely to be owned by the miners themself. To be a
>> miner either you need to verify all the transactions you include (otherwise
>> others might be able to find an error in your block and thus drop it) or
>> have someone that verifies them for you. In the end I think we'll end up
>> with a hierarchical network, with the miners/supernodes tighly
>> interconnected at the top and the lightweight clients that simply verify
>> transactions (or their inputs to be precise) that are destined for them at
>> the bottom.
> 
> A thought occurred to me.  We already run a decentralised system, but it's 
> done by making everyone duplicate all other work.  There is no fundamental 
> reason why all work needs to be duplicated though.  What about this: every 
> node randomly chooses whether to verify any particular transaction.  If we 
> assume the network is large and the random factor is correctly chosen, then we 
> can still guarantee that every transaction is verified.  Then, we simply add a 
> protocol message that is a negative-announce transaction.  That is to say, we 
> give nodes a way of telling other nodes that they think a transaction is 
> invalid.  The other nodes are then free to verify _that_ assertion and forward 
> the negative-announce.
> 
> Miners can then listen for negative-announcements and use them to decide were 
> to dedicate their verification efforts.  They then don't need to verify all 
> (or perhaps even any) transactions themselves and can dedicate their 
> processing power to mining.
> 
> (I've actually mentioned this idea before, but that time I was using it as a 
> double-spend prevention method).
> 
> 
> 
> Andy
> 
> -- 
> Dr Andy Parkins
> andyparkins at gmail.com





From andyparkins at gmail.com  Thu Dec 22 11:52:38 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 22 Dec 2011 11:52:38 +0000
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <23F92B83-4E96-401B-8A1C-3E6FE9DD8A8B@ceptacle.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<201112221012.55565.andyparkins@gmail.com>
	<23F92B83-4E96-401B-8A1C-3E6FE9DD8A8B@ceptacle.com>
Message-ID: <201112221152.38639.andyparkins@gmail.com>

On 2011 December 22 Thursday, Michael Gr?nager wrote:

> But, there is in fact a subtle difference: If anyone can choose to verify
> at random, you will see lazy implementations where random means none, and
> as it is random you cannot, from the outside, judge if a node is taking
> part in the validation work or if it just benefitting from others
> announcements. In the hash space part, you can monitor peers and see if
> they did not tell you about a failed validation and then disconnect from
> them as they are either malicious or lazy.

Why should they have to?  Joining the network as a node is very low cost to 
the other nodes.  You can't force any node not to be lazy, since their option 
is to disconnect themselves.  As to maliciousness, that is defended against 
because when a node negative announces a transaction, that transaction is 
going to be checked (note that there is still no implicit trust) -- if a node 
is incorrectly negative-announcing then it can justifiably be kicked.

> Besides from that, I like a setup where we scream about failed
> verifications, but keep a low profile on things that actually verifies...

Me too.  It's important though to distinguish between "you must be verifying" 
and "if you do verify, you must be honest about it".  No node should be forced 
to do any work it doesn't want to; but they should be forced to be truthful 
about the work they choose to do.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/c6e7a6da/attachment.sig>

From joel.kaartinen at gmail.com  Thu Dec 22 12:14:43 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Thu, 22 Dec 2011 14:14:43 +0200
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <201112221152.38639.andyparkins@gmail.com>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<201112221012.55565.andyparkins@gmail.com>
	<23F92B83-4E96-401B-8A1C-3E6FE9DD8A8B@ceptacle.com>
	<201112221152.38639.andyparkins@gmail.com>
Message-ID: <1324556083.30850.13.camel@mei>

On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:
> Why should they have to?  Joining the network as a node is very low cost to 
> the other nodes.  You can't force any node not to be lazy, since their option 
> is to disconnect themselves.  As to maliciousness, that is defended against 
> because when a node negative announces a transaction, that transaction is 
> going to be checked (note that there is still no implicit trust) -- if a node 
> is incorrectly negative-announcing then it can justifiably be kicked.

a node that is not doing any checking themselves can not reliably
forward failed verifications without getting the blame for doing faulty
work. Those nodes would then have the incentive not to relay the failed
verifications. This ends up making it important to know which nodes will
be checking transactions or not so you don't isolate yourself from other
nodes that are also checking transactions.

- Joel




From decker.christian at gmail.com  Thu Dec 22 12:26:07 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 22 Dec 2011 13:26:07 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <1324556083.30850.13.camel@mei>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<201112221012.55565.andyparkins@gmail.com>
	<23F92B83-4E96-401B-8A1C-3E6FE9DD8A8B@ceptacle.com>
	<201112221152.38639.andyparkins@gmail.com>
	<1324556083.30850.13.camel@mei>
Message-ID: <CALxbBHVjujLfwNEcnm3XLZqeeARkr0N6j2zQgVFodTBeAr5WFw@mail.gmail.com>

At first the idea of using negative announces seems attractive, but
remember that a malicious node might trigger verification for every
transaction, which may lead to a DoS.

Regards,
Chris

On Thu, Dec 22, 2011 at 1:14 PM, Joel Joonatan Kaartinen <
joel.kaartinen at gmail.com> wrote:

> On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:
> > Why should they have to?  Joining the network as a node is very low cost
> to
> > the other nodes.  You can't force any node not to be lazy, since their
> option
> > is to disconnect themselves.  As to maliciousness, that is defended
> against
> > because when a node negative announces a transaction, that transaction is
> > going to be checked (note that there is still no implicit trust) -- if a
> node
> > is incorrectly negative-announcing then it can justifiably be kicked.
>
> a node that is not doing any checking themselves can not reliably
> forward failed verifications without getting the blame for doing faulty
> work. Those nodes would then have the incentive not to relay the failed
> verifications. This ends up making it important to know which nodes will
> be checking transactions or not so you don't isolate yourself from other
> nodes that are also checking transactions.
>
> - Joel
>
>
>
> ------------------------------------------------------------------------------
> Write once. Port to many.
> Get the SDK and tools to simplify cross-platform app development. Create
> new or port existing apps to sell to consumers worldwide. Explore the
> Intel AppUpSM program developer opportunity. appdeveloper.intel.com/join
> http://p.sf.net/sfu/intel-appdev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/8c9c7828/attachment.html>

From gronager at ceptacle.com  Thu Dec 22 12:42:08 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 22 Dec 2011 13:42:08 +0100
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <1324556083.30850.13.camel@mei>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<201112221012.55565.andyparkins@gmail.com>
	<23F92B83-4E96-401B-8A1C-3E6FE9DD8A8B@ceptacle.com>
	<201112221152.38639.andyparkins@gmail.com>
	<1324556083.30850.13.camel@mei>
Message-ID: <9E0AD741-A670-469D-9F50-5F1564A0E7C6@ceptacle.com>

Just adding to Joels comment:

The only one with an incentive to do validations are miners (otherwise they could risk having their mined blocks invalidated later by less lazy miners) and the ones who are to send and accept a transaction. In a distributed stored and validated block chain setup, you would hence need to ask some miners if the inputs to a transaction is valid or download all the chain yourselves.

The latter is what we do today and will not scale, the former is the logical consequence of a non-enforced random validation approach - so this will give us super nodes, namely miners, and at some point they could choose to also charge for the validations. It might be the direction we are moving towards, but then the p2p network is only for the miners and the rest of us can connect through https and use json-rpc to post transactions etc to them. I do, however, prefer a setup where we keep everything really distributed...

/M

On 22/12/2011, at 13:14, Joel Joonatan Kaartinen wrote:

> On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:
>> Why should they have to?  Joining the network as a node is very low cost to 
>> the other nodes.  You can't force any node not to be lazy, since their option 
>> is to disconnect themselves.  As to maliciousness, that is defended against 
>> because when a node negative announces a transaction, that transaction is 
>> going to be checked (note that there is still no implicit trust) -- if a node 
>> is incorrectly negative-announcing then it can justifiably be kicked.
> 
> a node that is not doing any checking themselves can not reliably
> forward failed verifications without getting the blame for doing faulty
> work. Those nodes would then have the incentive not to relay the failed
> verifications. This ends up making it important to know which nodes will
> be checking transactions or not so you don't isolate yourself from other
> nodes that are also checking transactions.
> 
> - Joel
> 

Michael Gronager, PhD
Owner Ceptacle / NDGF Director, NORDUnet A/S
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 62 14 01
E-mail: gronager at ceptacle.com





From andyparkins at gmail.com  Thu Dec 22 14:46:54 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 22 Dec 2011 14:46:54 +0000
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <1324556083.30850.13.camel@mei>
References: <CABr1YTebhitO4g-SarZ7H=aoG9a8zW1wd0rfR32o8i0vODbLJw@mail.gmail.com>
	<201112221152.38639.andyparkins@gmail.com>
	<1324556083.30850.13.camel@mei>
Message-ID: <201112221446.54526.andyparkins@gmail.com>

On 2011 December 22 Thursday, Joel Joonatan Kaartinen wrote:
> On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins wrote:
> > Why should they have to?  Joining the network as a node is very low cost
> > to the other nodes.  You can't force any node not to be lazy, since
> > their option is to disconnect themselves.  As to maliciousness, that is
> > defended against because when a node negative announces a transaction,
> > that transaction is going to be checked (note that there is still no
> > implicit trust) -- if a node is incorrectly negative-announcing then it
> > can justifiably be kicked.
> 
> a node that is not doing any checking themselves can not reliably
> forward failed verifications without getting the blame for doing faulty
> work. Those nodes would then have the incentive not to relay the failed
> verifications. This ends up making it important to know which nodes will
> be checking transactions or not so you don't isolate yourself from other
> nodes that are also checking transactions.

Yes; I appreciate that.  It's the very point I'm making.  A node can choose 
what work to do, and should have a way of forwarding the results of that work 
to other nodes.  Transaction verifification is the main one.

Once a negative-announce message exists, it wouldn't be hard to have the other 
two you need as well: positive-announce and neutral-announce.  At present we 
have only neutral-announce.  However, as the need for super nodes and 
distributed verification gets bigger, having the forwarder able to offer an 
opinion on the quality of a transaction seems ideal to me.  Dishonesty will 
get you isolated pretty quickly if you use positive-announce and negative-
announce to lie.

The problem with this is that it requires a web of trust as well as a web of 
connections.  The only way to gain an advantage from this classified 
forwarding is if you have some way of assigning enough trust so that you can 
forward a classified transaction _without_ checking it yourself.  That doesn't 
sound like an easy problem though.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111222/49edfc8b/attachment.sig>

From zellfaze at yahoo.com  Sun Dec 25 02:55:08 2011
From: zellfaze at yahoo.com (Zell Faze)
Date: Sat, 24 Dec 2011 18:55:08 -0800 (PST)
Subject: [Bitcoin-development] Protocol extensions
In-Reply-To: <201112221446.54526.andyparkins@gmail.com>
Message-ID: <1324781708.61136.YahooMailClassic@web120905.mail.ne1.yahoo.com>

I may be missing something, but perhaps the simplistic method is the best.  

Start all nodes off with a certain level of trust.  Lets choose an arbitrary number 5.
If a node's trust level is high enough (lets say 10) forward transactions it sends you without checking them.
If a node's trust level is low enough (lets say 0) discard any transactions they send you (i.e. don't forward them on).
For nodes with a trust level between 1 and 9, forward without checking between 1 and 9 out of every 10 transactions.  Check the others, if they are valid, increase the trust level by 1, if they are invalid decrease the trust level by 3.

All of the numbers mentioned here (1-10, 1, 10, 1, 5, and 3) are arbitrary numbers that should be determined by the client or user-preferences instead of the protocol.  This would allow for clients to have varying amounts of initial trust/paranoia about their peers.

By decreasing the amount of trust faster than we increase it, we make it harder for untrustworthy clients to cheat us.  By having a cut off point, we make it so that untrustworthy clients can not DDoS us.  By randomly verifying some transactions in the beginning, we make it harder for a new client from DDoSing us, and we prevent our own trust level from being hurt too much for forwarding on invalid transactions.

The only problem I can personally see with this system is that if Node A trusts Node B with a 10 and Node C connects to Node A, then Node C can send  transactions that are invalid to Node C via Node A without Node C being any the wiser.  This would be stopped fairly quickly as Node B would catch on and stop forwarding transactions, but it would be a problem for new Nodes.

This could be fixed (somewhat) by having a message that says not to trust a particular node.

--Zell Faze



--- On Thu, 12/22/11, Andy Parkins <andyparkins at gmail.com> wrote:

> From: Andy Parkins <andyparkins at gmail.com>
> Subject: Re: [Bitcoin-development] Protocol extensions
> To: "Joel Joonatan Kaartinen" <joel.kaartinen at gmail.com>
> Cc: bitcoin-development at lists.sourceforge.net
> Date: Thursday, December 22, 2011, 9:46 AM
> On 2011 December 22 Thursday, Joel
> Joonatan Kaartinen wrote:
> > On Thu, 2011-12-22 at 11:52 +0000, Andy Parkins
> wrote:
> > > Why should they have to?? Joining the
> network as a node is very low cost
> > > to the other nodes.? You can't force any
> node not to be lazy, since
> > > their option is to disconnect themselves.?
> As to maliciousness, that is
> > > defended against because when a node negative
> announces a transaction,
> > > that transaction is going to be checked (note
> that there is still no
> > > implicit trust) -- if a node is incorrectly
> negative-announcing then it
> > > can justifiably be kicked.
> > 
> > a node that is not doing any checking themselves can
> not reliably
> > forward failed verifications without getting the blame
> for doing faulty
> > work. Those nodes would then have the incentive not to
> relay the failed
> > verifications. This ends up making it important to
> know which nodes will
> > be checking transactions or not so you don't isolate
> yourself from other
> > nodes that are also checking transactions.
> 
> Yes; I appreciate that.? It's the very point I'm
> making.? A node can choose 
> what work to do, and should have a way of forwarding the
> results of that work 
> to other nodes.? Transaction verifification is the
> main one.
> 
> Once a negative-announce message exists, it wouldn't be
> hard to have the other 
> two you need as well: positive-announce and
> neutral-announce.? At present we 
> have only neutral-announce.? However, as the need for
> super nodes and 
> distributed verification gets bigger, having the forwarder
> able to offer an 
> opinion on the quality of a transaction seems ideal to
> me.? Dishonesty will 
> get you isolated pretty quickly if you use
> positive-announce and negative-
> announce to lie.
> 
> The problem with this is that it requires a web of trust as
> well as a web of 
> connections.? The only way to gain an advantage from
> this classified 
> forwarding is if you have some way of assigning enough
> trust so that you can 
> forward a classified transaction _without_ checking it
> yourself.? That doesn't 
> sound like an easy problem though.
> 
> 
> 
> Andy
> 
> -- 
> Dr Andy Parkins
> andyparkins at gmail.com
> 
> -----Inline Attachment Follows-----
> 
> ------------------------------------------------------------------------------
> Write once. Port to many.
> Get the SDK and tools to simplify cross-platform app
> development. Create 
> new or port existing apps to sell to consumers worldwide.
> Explore the 
> Intel AppUpSM program developer opportunity.
> appdeveloper.intel.com/join
> http://p.sf.net/sfu/intel-appdev
> -----Inline Attachment Follows-----
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From gavinandresen at gmail.com  Sun Dec 25 16:05:42 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sun, 25 Dec 2011 11:05:42 -0500
Subject: [Bitcoin-development] IMPORTANT: if you are running latest git HEAD
Message-ID: <CABsx9T0AQMYxBh_Bq3ZfviU94CbszP264eKJHwj5akQNbTTrNA@mail.gmail.com>

Reposted from the forums:

makomk reported a remote vulnerability that I pulled into the master
bitcoin/bitcoin tree on December 20. If you are running git-HEAD code
on the production network you should pull the latest code to get the
bug fixed.

This affects only anybody who has pulled and compiled their own
bitcoind/bitcoin-qt from the source tree in the last 5 days.

Gory details:

I made a mistake.  I refactored the ConnectInputs() function into two
pieces (FetchInputs() and ConnectInputs()), and should have duplicated
a check in ConnectInputs for an out-of-range
previous-transaction-output in the FetchInputs() method.  The result
was a new method I wrote to help prevent a possible OP_EVAL-related
denial-of-service attack (AreInputsStandard()) could crash with an
out-of-bounds memory access if given an invalid transaction.

The bug-fix puts a check in FetchInputs and an assertion in
AreInputsStandard. This does not affect the back-ported "mining only"
code I wrote that some miners and pools have started using.

The good news is this was found and reported before binaries with the
vulnerability were released; the bad news is this was not found before
the code was pulled and could have made it into the next release if
makomk had not been testing some unrelated code.

Before releasing 0.6, I would like to have an "intelligent,
bitcoin-specific fuzzing tool" that automatically finds this type of
bug that we can run before every release. If anybody already has one,
please speak up!

-- 
--
Gavin Andresen



From bitcoin-list at bluematt.me  Sun Dec 25 21:15:22 2011
From: bitcoin-list at bluematt.me (bitcoin-list at bluematt.me)
Date: Sun, 25 Dec 2011 13:15:22 -0800
Subject: [Bitcoin-development] IMPORTANT: if you are running latest git
	HEAD
In-Reply-To: <CABsx9T0AQMYxBh_Bq3ZfviU94CbszP264eKJHwj5akQNbTTrNA@mail.gmail.com>
References: <CABsx9T0AQMYxBh_Bq3ZfviU94CbszP264eKJHwj5akQNbTTrNA@mail.gmail.com>
Message-ID: <ed6f69e1-0374-4a64-b4d5-5ea3d4d96a0d@email.android.com>

Couldn't your net testing code be modified to do that to some extent?

Gavin Andresen <gavinandresen at gmail.com> wrote:

>Reposted from the forums:
>
>makomk reported a remote vulnerability that I pulled into the master
>bitcoin/bitcoin tree on December 20. If you are running git-HEAD code
>on the production network you should pull the latest code to get the
>bug fixed.
>
>This affects only anybody who has pulled and compiled their own
>bitcoind/bitcoin-qt from the source tree in the last 5 days.
>
>Gory details:
>
>I made a mistake.  I refactored the ConnectInputs() function into two
>pieces (FetchInputs() and ConnectInputs()), and should have duplicated
>a check in ConnectInputs for an out-of-range
>previous-transaction-output in the FetchInputs() method.  The result
>was a new method I wrote to help prevent a possible OP_EVAL-related
>denial-of-service attack (AreInputsStandard()) could crash with an
>out-of-bounds memory access if given an invalid transaction.
>
>The bug-fix puts a check in FetchInputs and an assertion in
>AreInputsStandard. This does not affect the back-ported "mining only"
>code I wrote that some miners and pools have started using.
>
>The good news is this was found and reported before binaries with the
>vulnerability were released; the bad news is this was not found before
>the code was pulled and could have made it into the next release if
>makomk had not been testing some unrelated code.
>
>Before releasing 0.6, I would like to have an "intelligent,
>bitcoin-specific fuzzing tool" that automatically finds this type of
>bug that we can run before every release. If anybody already has one,
>please speak up!
>
>-- 
>--
>Gavin Andresen
>
>------------------------------------------------------------------------------
>Write once. Port to many.
>Get the SDK and tools to simplify cross-platform app development.
>Create 
>new or port existing apps to sell to consumers worldwide. Explore the 
>Intel AppUpSM program developer opportunity.
>appdeveloper.intel.com/join
>http://p.sf.net/sfu/intel-appdev
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From dpc at ucore.info  Mon Dec 26 13:13:42 2011
From: dpc at ucore.info (dpc at ucore.info)
Date: Mon, 26 Dec 2011 14:13:42 +0100
Subject: [Bitcoin-development] [announce] gobtc -- Bitcoin library and
 reference client in Go programming language
Message-ID: <CAHzZGEyMii3aw=k+iDWHUvs-_1_UdWzGFu5MwYCTo1_6A8yCjg@mail.gmail.com>

Hi,

I thought that it will not harm to share the project I've just began
to work on: gobtc

gobtc aim is to build a flexible FLOSS Bitcoin peer implementation,
that people could use in their applications to directly participate in
Bitcoin network.

Project home: http://github.com/dpc/gobtc

As this is a crosspost to bitcoin-dev and go-nuts  mailinglist, for
unfaimiliar with any of the terms

Bitcoin: http://bitcoin.org/
Go Language: http://golang.org/

Rationale is: Go language seems perfectly fitted for writing efficient
networking applications, and is providing build in standard library
support for a lot technologies used in Bitcoin.

If anyone is interested in participating, I'm encouraging to get in
touch with me. I'm already in touch with one person who is willing to
share some working code.

Regards,
-- 
Dawid Ci??arkiewicz



From roconnor at theorem.ca  Thu Dec 29 06:55:03 2011
From: roconnor at theorem.ca (roconnor at theorem.ca)
Date: Thu, 29 Dec 2011 01:55:03 -0500 (EST)
Subject: [Bitcoin-development] Alternative to OP_EVAL
Message-ID: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>

Gavin asked me to come up with an alternative to OP_EVAL, so here is my 
proposal.

OP_CODEHASH Initial Proposal

The idea is to add third "codehash" stack to the scripting engine (or 
alternatively a codehash state variable) and have OP_CODESEPARATOR in 
addition to its current behaviour push the hash of the remaining code in 
the script onto the codehash stack (or alternatively set the codehash 
state variable).

Then we add a new OP_CODEHASH operator that pops the codehash stack and 
pushes it onto the main stack (or alternatively push the value of the 
codehash state variable onto the mainstack which is initialized using the 
hash of the sigScript).

The new send-to-script transaction would be:

OP_CODEHASH OP_HASH160 {20-byte-hash-value} OP_EQUAL

Which can be redeemed by

{20-byte-code-hash} signatures OP_CODESEPARATOR code


When run the code will consume all the signatures leaving the 
20-byte-code-hash on the stack.  When OP_CODEHASH is interpreted as a NOP 
it is skipped, then the hash is hashed and compared to the 
20-byte-hash-value and a match is required to succeed.

When OP_CODEHASH is interpreted by a new client it pops the codehash stack 
and pushes the value onto the main stack, which in this standard 
transaction pushes a value identical to the existing {20-byte-code-hash} 
on the stack. Then again this hash is hashed and compared to to 
{20-byte-code-hash}.


This proposal covers all the desired behaviour from OP_EVAL proposal but 
with a less radical change:
   (1) you get send-to-script addresses
   (2) you cannot redeem with the old client without knowing the hash of the script

OP_CODEHASH has no dynamically generated code that is executed.  The 
language remains a weak stack based language which is clearly terminating. 
The number of operations executed is still bounded by the number of 
operations occurring in the script.  With the OP_EVAL proposal the script 
language becomes essentially Turing complete, with only an artificial 
limit on recursion depth preventing arbitrary computation and there is no 
way to know what code will run without executing it.  With the OP_EVAL 
proposal there is no way to statically analyze the script (say to count 
the number of uses of OP_CHECKSIG or OP_MULTICHECKSIG or other analysis) 
without actually executing the script.

This is just an initial proposal there are clearly some variations that 
could be done that would work just as well.

Thanks goes to luke-jr and others for their thoughts on this proposal.

Good night everyone.

-- 
Russell O'Connor                                      <http://r6.ca/>
``All talk about `theft,''' the general counsel of the American Graphophone
Company wrote, ``is the merest claptrap, for there exists no property in
ideas musical, literary or artistic, except as defined by statute.''



From theymos at mm.st  Thu Dec 29 08:44:19 2011
From: theymos at mm.st (theymos)
Date: Thu, 29 Dec 2011 02:44:19 -0600
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
Message-ID: <1325148259.14431.140661016987461@webmail.messagingengine.com>

On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca wrote:
> The number of operations executed is still bounded by the number of
> operations occurring in the script.  With the OP_EVAL proposal the
> script language becomes essentially Turing complete, with only an
> artificial limit on recursion depth preventing arbitrary computation
> and there is no way to know what code will run without executing it.

Even if OP_EVAL allowed infinite depth, you'd still need to explicitly
specify all operations performed, since there is no way of looping.

I think that something like OP_EVAL will eventually be used to improve
Script in a backward-compatible way (enable the disabled math ops, fix
bugs, etc.), so the mechanism might as well be used now. The only
advantage I see with OP_CODEHASH is that script ops won't need to be in
Script "strings".



From gavinandresen at gmail.com  Thu Dec 29 16:23:56 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 29 Dec 2011 11:23:56 -0500
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
Message-ID: <CABsx9T06H29R4CpL9hXF_yyB4chko1YdkhbCZ8rdwo1gLmF1BQ@mail.gmail.com>

First, thanks very much to Russell for looking more closely at both
BIP 12 and the patch than anybody else-- he's found two bugs and two
things the BIP isn't clear enough on (so far).

And I've got to say, I'm very sympathetic to the "OP_EVAL starts down
the code-as-data path, and There Be Dragons" argument.

But:

I don't think the proposed alternative would be, in practice, any
better.  I see two main disadvantages over OP_EVAL:

  about 20-bytes larger

  it means going back to where we were two months ago, writing more
code, reviewing it, finding bugs in it, backporting it so miners
running old software can support it, etc.

... and some other minor disadvantages:

  'standard' scripts will need to be slightly different in the
scriptSig and the scriptPubKey
   (e.g. <signature> CHECKSIG  becomes  <signature> CHECKSIGVERIFY
with OP_CODEHASH)

  OP_EVALs are not executed, and so the code associated with them does
not have to be part of the transaction, if they are in the
non-executed branch of an OP_IF. That could be good for privacy, and
could be good for reducing block-chain size.

----------------------

In discussions in IRC yesterday, we talked a little about possible
changes to the OP_EVAL BIP to make it less subject to abuse. In
particular, the big can of worms is allowing arithmetic or bit
operations on the serialized script that will be EVAL'ed:
  <serialized script> <other_data> OP_ADD OP_EVAL  <-- Look! Dragons!

If <serialized script> is more than 4 bytes, that is actually illegal
right now (all of the arithmetic operations are limited to operating
on numbers that are 4 bytes of less, and I believe we could prove that
no series of operations will ever produce a value more than 5 bytes
big given the current limitations).

Which leads me to suggest that BIP 12 be amended to state that:
  OP_EVAL shall cause script validation to fail if the top item on the
stack is less than 8 bytes long.

I'm tempted to propose a rule:
  OP_EVAL shall fail if the top item on the stack is the result of any
calculation

... but I don't think the extra code it would take to implement that
(keep track of which items on the stack were the results of
OP_ADD/etc) is worth it.


On the "you can't tell how many CHECKSIG operations will be performed
before executing the script" issue:

That is already true, because the parameters to CHECKMULTISIG that
determine how many signatures it checks might be computed.

Finally, I would echo theymos' observation that I think we'll
eventually do something very much like OP_EVAL in the future-- maybe
to support (in a backwards-compatible way) a
quantum-computing-resistant signature algorithm or SHA3. When that is
done, I think it might make sense to do a bottom-up redesign of Script
based on what we've learned.

-- 
--
Gavin Andresen



From roconnor at theorem.ca  Thu Dec 29 16:42:56 2011
From: roconnor at theorem.ca (roconnor at theorem.ca)
Date: Thu, 29 Dec 2011 11:42:56 -0500 (EST)
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <1325148259.14431.140661016987461@webmail.messagingengine.com>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
Message-ID: <alpine.LRH.2.00.1112291135040.22327@theorem.ca>

On Thu, 29 Dec 2011, theymos wrote:

> On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca wrote:
>> The number of operations executed is still bounded by the number of
>> operations occurring in the script.  With the OP_EVAL proposal the
>> script language becomes essentially Turing complete, with only an
>> artificial limit on recursion depth preventing arbitrary computation
>> and there is no way to know what code will run without executing it.
>
> Even if OP_EVAL allowed infinite depth, you'd still need to explicitly
> specify all operations performed, since there is no way of looping.

That's not true.  Gavin himself showed how to use OP_EVAL to loop:
OP_PUSHDATA {OP_DUP OP_EVAL} OP_DUP OP_EVAL.

Basically OP_DUP lets you duplicate the code on the stack and that is the 
key to looping.  I'm pretty sure from here we get get Turing completeness. 
Using the stack operations I expect you can implement the SK-calculus 
given an OP_EVAL that allows arbitrary depth.

OP_EVAL adds dangerously expressive power to the scripting language.

-- 
Russell O'Connor                                      <http://r6.ca/>
``All talk about `theft,''' the general counsel of the American Graphophone
Company wrote, ``is the merest claptrap, for there exists no property in
ideas musical, literary or artistic, except as defined by statute.''



From roconnor at theorem.ca  Thu Dec 29 17:01:20 2011
From: roconnor at theorem.ca (roconnor at theorem.ca)
Date: Thu, 29 Dec 2011 12:01:20 -0500 (EST)
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <CABsx9T06H29R4CpL9hXF_yyB4chko1YdkhbCZ8rdwo1gLmF1BQ@mail.gmail.com>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<CABsx9T06H29R4CpL9hXF_yyB4chko1YdkhbCZ8rdwo1gLmF1BQ@mail.gmail.com>
Message-ID: <alpine.LRH.2.00.1112291143220.22327@theorem.ca>

Good morning everyone.

On Thu, 29 Dec 2011, Gavin Andresen wrote:

> First, thanks very much to Russell for looking more closely at both
> BIP 12 and the patch than anybody else-- he's found two bugs and two
> things the BIP isn't clear enough on (so far).
>
> And I've got to say, I'm very sympathetic to the "OP_EVAL starts down
> the code-as-data path, and There Be Dragons" argument.
>
> But:
>
> I don't think the proposed alternative would be, in practice, any
> better.  I see two main disadvantages over OP_EVAL:
>
>  about 20-bytes larger
>
>  it means going back to where we were two months ago, writing more
> code, reviewing it, finding bugs in it, backporting it so miners
> running old software can support it, etc.

Well, given the state that the OP_EVAL proposal was in when I looked at it 
this week, all your code reviews you have done so far are not adequate 
anyways.

Gavin, push the OP_EVAL date back 2 months.  OP_EVAL just is not ready 
yet.

> ... and some other minor disadvantages:
>
>  'standard' scripts will need to be slightly different in the
> scriptSig and the scriptPubKey
>   (e.g. <signature> CHECKSIG  becomes  <signature> CHECKSIGVERIFY
> with OP_CODEHASH)
>
>  OP_EVALs are not executed, and so the code associated with them does
> not have to be part of the transaction, if they are in the
> non-executed branch of an OP_IF. That could be good for privacy, and
> could be good for reducing block-chain size.

I don't understand the above paragraph.

> ----------------------
>
> In discussions in IRC yesterday, we talked a little about possible
> changes to the OP_EVAL BIP to make it less subject to abuse. In
> particular, the big can of worms is allowing arithmetic or bit
> operations on the serialized script that will be EVAL'ed:
>  <serialized script> <other_data> OP_ADD OP_EVAL  <-- Look! Dragons!
>
> If <serialized script> is more than 4 bytes, that is actually illegal
> right now (all of the arithmetic operations are limited to operating
> on numbers that are 4 bytes of less, and I believe we could prove that
> no series of operations will ever produce a value more than 5 bytes
> big given the current limitations).

This is not adequate: <data> OP_SHA256 OP_EVAL runs random code that is 
more than 5 bytes.

> Which leads me to suggest that BIP 12 be amended to state that:
>  OP_EVAL shall cause script validation to fail if the top item on the
> stack is less than 8 bytes long.
>
> I'm tempted to propose a rule:
>  OP_EVAL shall fail if the top item on the stack is the result of any
> calculation
>
> ... but I don't think the extra code it would take to implement that
> (keep track of which items on the stack were the results of
> OP_ADD/etc) is worth it.
>
> On the "you can't tell how many CHECKSIG operations will be performed
> before executing the script" issue:
>
> That is already true, because the parameters to CHECKMULTISIG that
> determine how many signatures it checks might be computed.

Yes, but maybe there is other static analysis miners may want to do.  I 
can't imagine every scenario.

> Finally, I would echo theymos' observation that I think we'll
> eventually do something very much like OP_EVAL in the future-- maybe
> to support (in a backwards-compatible way) a
> quantum-computing-resistant signature algorithm or SHA3. When that is
> done, I think it might make sense to do a bottom-up redesign of Script
> based on what we've learned.

IMHO I think the above observation is not very relevant to the merits of 
the existing OP_EVAL proposal on the table.

-- 
Russell O'Connor                                      <http://r6.ca/>
``All talk about `theft,''' the general counsel of the American Graphophone
Company wrote, ``is the merest claptrap, for there exists no property in
ideas musical, literary or artistic, except as defined by statute.''



From luke at dashjr.org  Thu Dec 29 17:06:42 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 29 Dec 2011 12:06:42 -0500
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112291143220.22327@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<CABsx9T06H29R4CpL9hXF_yyB4chko1YdkhbCZ8rdwo1gLmF1BQ@mail.gmail.com>
	<alpine.LRH.2.00.1112291143220.22327@theorem.ca>
Message-ID: <201112291206.43476.luke@dashjr.org>

On Thursday, December 29, 2011 12:01:20 PM roconnor at theorem.ca wrote:
> This is not adequate: <data> OP_SHA256 OP_EVAL runs random code that is
> more than 5 bytes.

So what? Why shouldn't I be able to run random code? I could always put that 
random code in the script verbatim, after all.



From gavinandresen at gmail.com  Thu Dec 29 18:00:23 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 29 Dec 2011 13:00:23 -0500
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112291143220.22327@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<CABsx9T06H29R4CpL9hXF_yyB4chko1YdkhbCZ8rdwo1gLmF1BQ@mail.gmail.com>
	<alpine.LRH.2.00.1112291143220.22327@theorem.ca>
Message-ID: <CABsx9T1Hu7Yg-gWUZsRirpNjzYayySJvaVihKGnuntF2rBdmBA@mail.gmail.com>

RE: preventing OP_EVAL from executing the result of calculations:

> This is not adequate: <data> OP_SHA256 OP_EVAL runs random code that is more> than 5 bytes.
Good point, the rule should be "OP_EVAL shall fail if asked to execute
8 or fewer bytes."

RE: this minor disadvantage:

>> ?OP_EVALs are not executed, and so the code associated with them does
>> not have to be part of the transaction, if they are in the
>> non-executed branch of an OP_IF. That could be good for privacy, and
>> could be good for reducing block-chain size.

> I don't understand the above paragraph.

It is the "Either This or That can redeem" case that motivated me to
allow 2-deep EVAL recursion.

Start with the most straightforward code for doing "this or that" (in
pseudocode):

scriptSig:  <sigs> <either the code for This or the code for That>
scriptPuKey:
  IF <hash of code> EQUALS hash of This or hash of That:
    EVAL
  ELSE
    fail validation
  ENDIF

That can be done with CODESEPARATOR/CODEHASH.

But if you want to then bundle that up so the scriptPubKey is a
standard 'pay to script', you get:

scriptSig:  <sigs> <either the code for This or the code for That>
<serialized IF... code from above>
scriptPubKey:  ... standard DUP HASH160 <> EQUALVERIFY EVAL

To be backwards compatible with old clients the scriptSig would have to be:

<hash1> <hash2> <sigs> CODESEPARATOR this_or_that_code
 CODEHASH
 CODESEPARATOR
 IF <hash of code> does not equal hash2:
   fail verification
 ENDIF

That could only be done if the definition of CODEHASH was modified to
hash only the stuff between CODESEPARATORS instead of hashing from
CODESEPARATOR to the end of the scriptSig.

RE: static analysis:

> Yes, but maybe there is other static analysis miners may want to do. ?I
> can't imagine every scenario.

The vast majority of miners are "discouraging" (not relaying or
putting into blocks) anything besides 'standard' transaction types.

Until somebody smarter than me (like Russell) has done a deep analysis
of Script and all of its opcodes, I don't think that should change.
The standard transaction types are easy to reason about, and the
standard types extended with OP_EVAL are also easy to reason about--
you can template-match them to find out how many ECDSA operations a
CHECKMULTISIG will do, etc.

Again, in practice, I don't think EVAL as proposed is a danger.

RE: delaying EVAL rollout:  I could live with rolling out just BIP 11
(up-to-3-signature-CHECKMULTISIG as 'standard' transactions) and
delaying EVAL rollout on the main network, but I worry that will just
encourage people to delay thoroughly reviewing/testing for a couple of
months, and we'll be right back here at the beginning of March.

-- 
--
Gavin Andresen



From pieter.wuille at gmail.com  Thu Dec 29 19:08:39 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 29 Dec 2011 20:08:39 +0100
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
Message-ID: <20111229190838.GA29609@ulyssis.org>

On Thu, Dec 29, 2011 at 01:55:03AM -0500, roconnor at theorem.ca wrote:
> Gavin asked me to come up with an alternative to OP_EVAL, so here is my 
> proposal.
> 
> OP_CODEHASH Initial Proposal

If we're again brainstorming about alternatives for OP_EVAL, I'll do my own.

It is called OP_CHECKEDEVAL, and is specified as follows:
* It looks at the two elements most recently (in code position) pushed by a literal,
  and not yet consumed by another OP_CHECKEDEVAL. These are S (the serialized script),
  and H (its hash). This implies it defines its own literal-only stack, where all
  literals push to, and only OP_CHECKEDEVAL pops from. This special stack has the
  advantage of allowing static analysis - one does not need to execute any operations
  to find out which data will end up on it. Note that "skipped" code (inside the
  ignored part of an IF-THEN-ELSE) can still push to the literal stack.
* For the "outer script", it does not have any effect at all, except for:
  * 2 elements popped from the literal-only stack
  * potentially causing failure
  It does not touch the main stack, alt stack or any other part of the execution state
  not listed above.
* Failure is caused when either of these conditions hold:
  * No two elements remain on the literal-only stack
  * The Hash(S) != H
  * The inner script execution caused failure
* For the execution of the inner script:
  * It is executed in a completely new and independent execution environnement
  * It executes the deserialized S
  * It inherits the main stack and alt stack (without the serialized script and the hash
    themselves) from the outer execution.

This requires OP_CHECKEDEVAL to immediately follow the push of script and hash,
so the code in the pair < <script> OP_CHECKEDEVAL > can be parsed and interpreted as code, 
allowing static analysis.

As OP_CHECKEDEVAL has absolutely no effects except for potentially causing failure, it
is very similar to the OP_NOPx it would replace, and guarantees that interpreting
OP_CHECKEDEVAL as OP_NOPx can never cause the script to become invalid if it wasn't
already.

A basic pay-to-script-hash scriptPubKey is very short:
  
  <scriptHash> OP_CHECKEDEVAL

And it is redeemed using:

  <script inputs> <script>

Furthermore, the implementation is very similar to what was already done for
OP_EVAL. Modifications:
* EvalScriptInner needs less by-ref arguments, as it cannot modify the parent's state.
* A literal-only stack needs to be maintained.


I believe this combines all advantages:
* Easy spend-to-script-hash (shorter than OP_EVAL)
* Backward compatible (guaranteed by construction, instead of separately enforced like with OP_EVAL)
* Statically analyzable (though it requires deserializing the script data).
* Possibility to introduce a new language inside (not done in this proposal)

Only disadvantages:
* Slightly less flexible than OP_EVAL, as it disallows dynamic interation with serialized scripts.
* Static code analyzers need to deserialize script data.

Credits: gmaxwell for the idea of a literal-only stack

-- 
Pieter



From moon at justmoon.de  Thu Dec 29 19:54:28 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Thu, 29 Dec 2011 20:54:28 +0100
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <CABsx9T1Hu7Yg-gWUZsRirpNjzYayySJvaVihKGnuntF2rBdmBA@mail.gmail.com>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<CABsx9T06H29R4CpL9hXF_yyB4chko1YdkhbCZ8rdwo1gLmF1BQ@mail.gmail.com>
	<alpine.LRH.2.00.1112291143220.22327@theorem.ca>
	<CABsx9T1Hu7Yg-gWUZsRirpNjzYayySJvaVihKGnuntF2rBdmBA@mail.gmail.com>
Message-ID: <4EFCC574.1030901@justmoon.de>

> RE: delaying EVAL rollout:  I could live with rolling out just BIP 11
> (up-to-3-signature-CHECKMULTISIG as 'standard' transactions) and
> delaying EVAL rollout on the main network, but I worry that will just
> encourage people to delay thoroughly reviewing/testing for a couple of
> months, and we'll be right back here at the beginning of March.

How about releasing it on testnet first? If you want "less smart" people 
such as myself to help test, well I don't think I would get anywhere if 
I tried to abstractly reason about every possibility. Low-level testing 
is certainly important, but for me "thorough testing" requires an actual 
network of nodes (running different clients) and applications capable of 
creating and verifying real OP_EVAL transactions.

My suggestion would be: Deploy OP_EVAL on testnet quickly, let's build 
some real-life applications and if it works well, /then /let's pull the 
trigger for mainnet. If some issues or improvements arise, we'll have a 
chance to adjust it and try again.

I don't think this is too conservative or paranoid. I think this is a 
textbook use case for testnet.


On 12/29/2011 7:00 PM, Gavin Andresen wrote:
> RE: preventing OP_EVAL from executing the result of calculations:
>
>> This is not adequate:<data>  OP_SHA256 OP_EVAL runs random code that is more>  than 5 bytes.
> Good point, the rule should be "OP_EVAL shall fail if asked to execute
> 8 or fewer bytes."
>
> RE: this minor disadvantage:
>
>>>   OP_EVALs are not executed, and so the code associated with them does
>>> not have to be part of the transaction, if they are in the
>>> non-executed branch of an OP_IF. That could be good for privacy, and
>>> could be good for reducing block-chain size.
>> I don't understand the above paragraph.
> It is the "Either This or That can redeem" case that motivated me to
> allow 2-deep EVAL recursion.
>
> Start with the most straightforward code for doing "this or that" (in
> pseudocode):
>
> scriptSig:<sigs>  <either the code for This or the code for That>
> scriptPuKey:
>    IF<hash of code>  EQUALS hash of This or hash of That:
>      EVAL
>    ELSE
>      fail validation
>    ENDIF
>
> That can be done with CODESEPARATOR/CODEHASH.
>
> But if you want to then bundle that up so the scriptPubKey is a
> standard 'pay to script', you get:
>
> scriptSig:<sigs>  <either the code for This or the code for That>
> <serialized IF... code from above>
> scriptPubKey:  ... standard DUP HASH160<>  EQUALVERIFY EVAL
>
> To be backwards compatible with old clients the scriptSig would have to be:
>
> <hash1>  <hash2>  <sigs>  CODESEPARATOR this_or_that_code
>   CODEHASH
>   CODESEPARATOR
>   IF<hash of code>  does not equal hash2:
>     fail verification
>   ENDIF
>
> That could only be done if the definition of CODEHASH was modified to
> hash only the stuff between CODESEPARATORS instead of hashing from
> CODESEPARATOR to the end of the scriptSig.
>
> RE: static analysis:
>
>> Yes, but maybe there is other static analysis miners may want to do.  I
>> can't imagine every scenario.
> The vast majority of miners are "discouraging" (not relaying or
> putting into blocks) anything besides 'standard' transaction types.
>
> Until somebody smarter than me (like Russell) has done a deep analysis
> of Script and all of its opcodes, I don't think that should change.
> The standard transaction types are easy to reason about, and the
> standard types extended with OP_EVAL are also easy to reason about--
> you can template-match them to find out how many ECDSA operations a
> CHECKMULTISIG will do, etc.
>
> Again, in practice, I don't think EVAL as proposed is a danger.
>
> RE: delaying EVAL rollout:  I could live with rolling out just BIP 11
> (up-to-3-signature-CHECKMULTISIG as 'standard' transactions) and
> delaying EVAL rollout on the main network, but I worry that will just
> encourage people to delay thoroughly reviewing/testing for a couple of
> months, and we'll be right back here at the beginning of March.
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111229/6e7f0034/attachment.html>

From pieter.wuille at gmail.com  Thu Dec 29 21:00:26 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 29 Dec 2011 22:00:26 +0100
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <20111229190838.GA29609@ulyssis.org>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<20111229190838.GA29609@ulyssis.org>
Message-ID: <20111229210022.GA29974@ulyssis.org>

On Thu, Dec 29, 2011 at 08:08:38PM +0100, Pieter Wuille wrote:
> On Thu, Dec 29, 2011 at 01:55:03AM -0500, roconnor at theorem.ca wrote:
> > Gavin asked me to come up with an alternative to OP_EVAL, so here is my 
> > proposal.
> > 
> > OP_CODEHASH Initial Proposal
> 
> If we're again brainstorming about alternatives for OP_EVAL, I'll do my own.
> 
> It is called OP_CHECKEDEVAL, and is specified as follows:

I realized this may have been needlessly complicated. All is required to achieve the
same properties (plus win half-verification by old clients) is a somewhat more
restricted OP_EVAL which:
* Does not touch the stack or altstack - it looks at the last (code-position wise)
  literal pushed (and not yet consumed by another OP_EVAL) on the stack and uses
  that as script to be executed.
* Executes its subscript in an independent environment, which inherits only the
  main stack (this allows the outer script to hide information from the
  inner script by moving it temporarily to the alt stack).
* OP_EVAL is an effective no-op for the execution state of the outer script,
  except for:
  * potentially causing failure (if the subscript doesn't parse or doesn't
    terminate succesfully)
  * popping an element from the literal-only stack

A pay-to-script-hash becomes:

  OP_EVAL OP_HASH160 <scriptHash> OP_EQUAL

and is redeemed using

  [script input] <<script>>

-- 
Pieter  



From etotheipi at gmail.com  Thu Dec 29 21:31:11 2011
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 29 Dec 2011 16:31:11 -0500
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <20111229190838.GA29609@ulyssis.org>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<20111229190838.GA29609@ulyssis.org>
Message-ID: <CALf2ePzoC85=16h63ngn-KaEHDSYFqAOkW7UWqB_Jgd2F_pkTQ@mail.gmail.com>

I haven't been much a part of these brainstorming discussions, and so I'm
really looking at this from a bird's eye view, without any bias towards any
particular idea.

I do see what appears to be relevant concerns, brought up just before new,
powerful functionality is injected into 50%+ of the nodes on the network.
 I cannot tell from my position if there is/has been consistent concern for
OP_EVAL proposal, or if it's mostly a transient response to hearing about
recursion in the scripting engine, etc (like myself, originally).  I
haven't debated this topic much, so I'm not in a position to personally
comment on any proposals.  (Though, this all feels very similar to the
problem of hash-table collisions in HTTP
POST<http://www.securityweek.com/hash-table-collision-attacks-could-trigger-ddos-massive-scale>
).

However, I would like to remind everyone that we/you are messing with a
$20+ million dollar *thing*.  There's more than just a piece of software at
stake -- whatever goes in needs to be as hard as diamond.  If we open up a
hole that allows someone to satisfy arbitrary scripts, or create one-packet
DoS/crash attacks, that could be devastating for Bitcoin.  Roconner is
persuasive enough to make *me* think that not all corners of this
functional space has been explored properly.  And while my opinion doesn't
matter, I'm concerned that others may feel too invested in the current
design path to want to "go backwards."  Again, I don't know one way or
another, I just want to warn against pride getting priority over security.


At the very least, you should consider consequences and recovery path of
such unanticipated problems.  If the things that could go wrong are
devastating, let's lean towards a more conservative solution (like
sandboxing the sub-scripting engine).   Remember, the network is working
just fine *without *OP_EVAL, and while OP_EVAL provides some really nice
benefits, I don't think the benefits over regular multi-sig are worth the
consequences of making a mistake in this multi-million dollar beast.

Okay, back to your regularly-scheduled debating...
-Alan

On Thu, Dec 29, 2011 at 2:08 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Thu, Dec 29, 2011 at 01:55:03AM -0500, roconnor at theorem.ca wrote:
> > Gavin asked me to come up with an alternative to OP_EVAL, so here is my
> > proposal.
> >
> > OP_CODEHASH Initial Proposal
>
> If we're again brainstorming about alternatives for OP_EVAL, I'll do my
> own.
>
> It is called OP_CHECKEDEVAL, and is specified as follows:
> * It looks at the two elements most recently (in code position) pushed by
> a literal,
>  and not yet consumed by another OP_CHECKEDEVAL. These are S (the
> serialized script),
>  and H (its hash). This implies it defines its own literal-only stack,
> where all
>  literals push to, and only OP_CHECKEDEVAL pops from. This special stack
> has the
>  advantage of allowing static analysis - one does not need to execute any
> operations
>  to find out which data will end up on it. Note that "skipped" code
> (inside the
>  ignored part of an IF-THEN-ELSE) can still push to the literal stack.
> * For the "outer script", it does not have any effect at all, except for:
>  * 2 elements popped from the literal-only stack
>  * potentially causing failure
>  It does not touch the main stack, alt stack or any other part of the
> execution state
>  not listed above.
> * Failure is caused when either of these conditions hold:
>  * No two elements remain on the literal-only stack
>  * The Hash(S) != H
>  * The inner script execution caused failure
> * For the execution of the inner script:
>  * It is executed in a completely new and independent execution
> environnement
>  * It executes the deserialized S
>  * It inherits the main stack and alt stack (without the serialized script
> and the hash
>    themselves) from the outer execution.
>
> This requires OP_CHECKEDEVAL to immediately follow the push of script and
> hash,
> so the code in the pair < <script> OP_CHECKEDEVAL > can be parsed and
> interpreted as code,
> allowing static analysis.
>
> As OP_CHECKEDEVAL has absolutely no effects except for potentially causing
> failure, it
> is very similar to the OP_NOPx it would replace, and guarantees that
> interpreting
> OP_CHECKEDEVAL as OP_NOPx can never cause the script to become invalid if
> it wasn't
> already.
>
> A basic pay-to-script-hash scriptPubKey is very short:
>
>  <scriptHash> OP_CHECKEDEVAL
>
> And it is redeemed using:
>
>  <script inputs> <script>
>
> Furthermore, the implementation is very similar to what was already done
> for
> OP_EVAL. Modifications:
> * EvalScriptInner needs less by-ref arguments, as it cannot modify the
> parent's state.
> * A literal-only stack needs to be maintained.
>
>
> I believe this combines all advantages:
> * Easy spend-to-script-hash (shorter than OP_EVAL)
> * Backward compatible (guaranteed by construction, instead of separately
> enforced like with OP_EVAL)
> * Statically analyzable (though it requires deserializing the script data).
> * Possibility to introduce a new language inside (not done in this
> proposal)
>
> Only disadvantages:
> * Slightly less flexible than OP_EVAL, as it disallows dynamic interation
> with serialized scripts.
> * Static code analyzers need to deserialize script data.
>
> Credits: gmaxwell for the idea of a literal-only stack
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex
> infrastructure or vast IT resources to deliver seamless, secure access to
> virtual desktops. With this all-in-one solution, easily deploy virtual
> desktops for less than the cost of PCs and save 60% on VDI infrastructure
> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111229/46ff339a/attachment.html>

From gronager at ceptacle.com  Thu Dec 29 22:05:55 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 29 Dec 2011 23:05:55 +0100
Subject: [Bitcoin-development] Trickle in CNode::SendMessages
Message-ID: <AB205206-AC96-4A95-B100-E8F4461B08C5@ceptacle.com>

In CNode::SendMessages there is a trickle algorithm. Judging from the comments it is supposed to:

* at each update round a new (random) trickle node is chosen, with 120 nodes and an average round time of 100ms (the sleep) we will have moved through roughly all nodes every 12-15 seconds.
* when a node is the trickle node it will get to send all its pending addresses to its corresponding peer.
* when a node is not trickle node (the rest of the nodes) we send transaction-invs, however, only 1/4 of them - the rest is pushed to wait for the next round and would eventually get sent.

However, the way the 1/4 of the invs are chosen is by: 
	(inv.getHash() ^ hashSalt) & 3 == 0

As hashSalt is a constant (static, generated on start up) and as the hash of an inv is constant for the inv too, the other 3/4 will never get sent and hence it does not make sense to carry them around from round to round:
	if (fTrickleWait) vInvWait.push_back(inv); 
and:
	pto->vInventoryToSend = vInvWait;

The hashSalt will be different for each node in the peer-to-peer network and hence as long as we have much more than 4 nodes all tx'es will be sent around.

Ironically, this (wrong?) implementation divides the inv forwarding hash space into 4, along the same lines as we discussed last week for DHTs...

I suggest to either keep the algorithm as is, but remove the redundant vInvWait stuff, or to change the algorithm to e.g. push the tx'es into a multimap (invHash^hashSalt, invHash) and choose the first 25% in each round. 

The last alternative is that I have misunderstood the code... - if so please correct me ;)

Happy New Year!

Michael




From gronager at ceptacle.com  Fri Dec 30 07:38:22 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 30 Dec 2011 08:38:22 +0100
Subject: [Bitcoin-development] Trickle in CNode::SendMessages
In-Reply-To: <AB205206-AC96-4A95-B100-E8F4461B08C5@ceptacle.com>
References: <AB205206-AC96-4A95-B100-E8F4461B08C5@ceptacle.com>
Message-ID: <E986F3D9-1FAF-4BEF-8B16-2BEF3897243D@ceptacle.com>

Small correction - if the node is the trickle node it gets all invs, not just the special quarter.  This means that everything get distributed everywhere every 12-15seconds, but a special quarter of the hash space is treated earlier, so there is a meaning for vInvWait, but there is still a mismatch between comments and code.

Cheers,

M


On 29/12/2011, at 23:05, Michael Gr?nager wrote:

> In CNode::SendMessages there is a trickle algorithm. Judging from the comments it is supposed to:
> 
> * at each update round a new (random) trickle node is chosen, with 120 nodes and an average round time of 100ms (the sleep) we will have moved through roughly all nodes every 12-15 seconds.
> * when a node is the trickle node it will get to send all its pending addresses to its corresponding peer.
> * when a node is not trickle node (the rest of the nodes) we send transaction-invs, however, only 1/4 of them - the rest is pushed to wait for the next round and would eventually get sent.
> 
> However, the way the 1/4 of the invs are chosen is by: 
> 	(inv.getHash() ^ hashSalt) & 3 == 0
> 
> As hashSalt is a constant (static, generated on start up) and as the hash of an inv is constant for the inv too, the other 3/4 will never get sent and hence it does not make sense to carry them around from round to round:
> 	if (fTrickleWait) vInvWait.push_back(inv); 
> and:
> 	pto->vInventoryToSend = vInvWait;
> 
> The hashSalt will be different for each node in the peer-to-peer network and hence as long as we have much more than 4 nodes all tx'es will be sent around.
> 
> Ironically, this (wrong?) implementation divides the inv forwarding hash space into 4, along the same lines as we discussed last week for DHTs...
> 
> I suggest to either keep the algorithm as is, but remove the redundant vInvWait stuff, or to change the algorithm to e.g. push the tx'es into a multimap (invHash^hashSalt, invHash) and choose the first 25% in each round. 
> 
> The last alternative is that I have misunderstood the code... - if so please correct me ;)
> 
> Happy New Year!
> 
> Michael
> 
> 
> ------------------------------------------------------------------------------
> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex
> infrastructure or vast IT resources to deliver seamless, secure access to
> virtual desktops. With this all-in-one solution, easily deploy virtual 
> desktops for less than the cost of PCs and save 60% on VDI infrastructure 
> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Owner Ceptacle / NDGF Director, NORDUnet A/S
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 62 14 01
E-mail: gronager at ceptacle.com





From zgenjix at yahoo.com  Fri Dec 30 08:57:16 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 30 Dec 2011 00:57:16 -0800 (PST)
Subject: [Bitcoin-development] upnp isnt working
Message-ID: <1325235436.4059.YahooMailNeo@web121006.mail.ne1.yahoo.com>

hey,

so sipa/gmaxwell proposed on irc that maybe upnp is not working anymore but there isnt any way to test.

well i made an alternate chain, and ran the daemon on my vps.

sometimes it accepts connections, sometimes not. It's all very patchy.

anyway just putting this out there




From bitcoin-list at bluematt.me  Fri Dec 30 09:02:22 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 30 Dec 2011 01:02:22 -0800
Subject: [Bitcoin-development] upnp isnt working
In-Reply-To: <1325235436.4059.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1325235436.4059.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <1325235742.2976.0.camel@BMThinkPad.lan.bluematt.me>

On Fri, 2011-12-30 at 00:57 -0800, Amir Taaki wrote:
> hey,
> 
> so sipa/gmaxwell proposed on irc that maybe upnp is not working anymore but there isnt any way to test.
> 
> well i made an alternate chain, and ran the daemon on my vps.
> 
> sometimes it accepts connections, sometimes not. It's all very patchy.
> 
> anyway just putting this out there

I believe the issue isn't lack of working, but lack of re announcing to
the router that the port needs to remain open.

Matt




From chris.double at double.co.nz  Fri Dec 30 12:01:53 2011
From: chris.double at double.co.nz (Chris Double)
Date: Sat, 31 Dec 2011 01:01:53 +1300
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112291135040.22327@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
	<alpine.LRH.2.00.1112291135040.22327@theorem.ca>
Message-ID: <CALn1vHHjY6Qq0zEUcWaNzm_eP_JekjrK26zMXfcrfPSydwSKig@mail.gmail.com>

On Fri, Dec 30, 2011 at 5:42 AM,  <roconnor at theorem.ca> wrote:
> Basically OP_DUP lets you duplicate the code on the stack and that is the
> key to looping. ?I'm pretty sure from here we get get Turing completeness.
> Using the stack operations I expect you can implement the SK-calculus
> given an OP_EVAL that allows arbitrary depth.
>
> OP_EVAL adds dangerously expressive power to the scripting language.

If you look at the archives of the concatenative programming mailing
list [1] you'll see lots of examples of people creating stack
languages with minimal operations that exploit similar functionality
to reduce the required built in operations. The discussion on the list
is mostly about stack based languages where programs can be pushed on
the stack and executed (eg. Joy [2]/Factor/Some Forths).

I don't think the scripting engine in bitcoin has the ability to
concatenate, append or otherwise manipulate scripts on the stack to be
eval'd though does it?

[1] http://tech.groups.yahoo.com/group/concatenative
[2] http://tunes.org/~iepos/joy.html

Chris.
-- 
http://www.bluishcoder.co.nz



From roconnor at theorem.ca  Fri Dec 30 17:19:24 2011
From: roconnor at theorem.ca (roconnor at theorem.ca)
Date: Fri, 30 Dec 2011 12:19:24 -0500 (EST)
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <CALn1vHHjY6Qq0zEUcWaNzm_eP_JekjrK26zMXfcrfPSydwSKig@mail.gmail.com>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
	<alpine.LRH.2.00.1112291135040.22327@theorem.ca>
	<CALn1vHHjY6Qq0zEUcWaNzm_eP_JekjrK26zMXfcrfPSydwSKig@mail.gmail.com>
Message-ID: <alpine.LRH.2.00.1112301214380.9419@theorem.ca>

On Sat, 31 Dec 2011, Chris Double wrote:

> On Fri, Dec 30, 2011 at 5:42 AM,  <roconnor at theorem.ca> wrote:
>> Basically OP_DUP lets you duplicate the code on the stack and that is the
>> key to looping. ?I'm pretty sure from here we get get Turing completeness.
>> Using the stack operations I expect you can implement the SK-calculus
>> given an OP_EVAL that allows arbitrary depth.
>>
>> OP_EVAL adds dangerously expressive power to the scripting language.
>
> If you look at the archives of the concatenative programming mailing
> list [1] you'll see lots of examples of people creating stack
> languages with minimal operations that exploit similar functionality
> to reduce the required built in operations. The discussion on the list
> is mostly about stack based languages where programs can be pushed on
> the stack and executed (eg. Joy [2]/Factor/Some Forths).
>
> I don't think the scripting engine in bitcoin has the ability to
> concatenate, append or otherwise manipulate scripts on the stack to be
> eval'd though does it?

It will limited ability manipulate scripts on the stack through the use of 
arithmetic and hashing operations, and if OP_CAT, OP_SUBSTR and friends 
are ever restored, it will have even more abilities.

-- 
Russell O'Connor                                      <http://r6.ca/>
``All talk about `theft,''' the general counsel of the American Graphophone
Company wrote, ``is the merest claptrap, for there exists no property in
ideas musical, literary or artistic, except as defined by statute.''

From joel.kaartinen at gmail.com  Sat Dec 31 09:54:13 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Sat, 31 Dec 2011 11:54:13 +0200
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112291135040.22327@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
	<alpine.LRH.2.00.1112291135040.22327@theorem.ca>
Message-ID: <1325325253.2800.3.camel@mei>

Wouldn't it work to restrict the number of executions of OP_EVAL allowed
per transaction? That way it wouldn't allow for unlimited looping. If
there's too many OP_EVAL executions during the transaction evaluation,
just consider the transaction illegal. 3 would be enough for the
purposes people have been planning for here I think.

- Joel

On Thu, 2011-12-29 at 11:42 -0500, roconnor at theorem.ca wrote:
> On Thu, 29 Dec 2011, theymos wrote:
> 
> > On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca wrote:
> >> The number of operations executed is still bounded by the number of
> >> operations occurring in the script.  With the OP_EVAL proposal the
> >> script language becomes essentially Turing complete, with only an
> >> artificial limit on recursion depth preventing arbitrary computation
> >> and there is no way to know what code will run without executing it.
> >
> > Even if OP_EVAL allowed infinite depth, you'd still need to explicitly
> > specify all operations performed, since there is no way of looping.
> 
> That's not true.  Gavin himself showed how to use OP_EVAL to loop:
> OP_PUSHDATA {OP_DUP OP_EVAL} OP_DUP OP_EVAL.
> 
> Basically OP_DUP lets you duplicate the code on the stack and that is the 
> key to looping.  I'm pretty sure from here we get get Turing completeness. 
> Using the stack operations I expect you can implement the SK-calculus 
> given an OP_EVAL that allows arbitrary depth.
> 
> OP_EVAL adds dangerously expressive power to the scripting language.
> 





From zellfaze at yahoo.com  Sat Dec 31 17:28:58 2011
From: zellfaze at yahoo.com (Zell Faze)
Date: Sat, 31 Dec 2011 09:28:58 -0800 (PST)
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <1325325253.2800.3.camel@mei>
Message-ID: <1325352538.2068.YahooMailClassic@web120904.mail.ne1.yahoo.com>

I agree with Joel.  I think someone brought this up earlier as well.   Most OP_EVAL transactions won't be complex enough to require more than a few loops.

--Zell

------------------------
"It stopped being just a website a long time ago. For many of us, most of us, Wikipedia has become an indispensable part of our daily lives."
? Jimmy Wales, Founder of Wikipedia 
Help protect it now. Please make a donation today: http://www.wikimediafoundation.org/wiki/Donate



--- On Sat, 12/31/11, Joel Joonatan Kaartinen <joel.kaartinen at gmail.com> wrote:

> From: Joel Joonatan Kaartinen <joel.kaartinen at gmail.com>
> Subject: Re: [Bitcoin-development] Alternative to OP_EVAL
> To: roconnor at theorem.ca
> Cc: bitcoin-development at lists.sourceforge.net
> Date: Saturday, December 31, 2011, 4:54 AM
> Wouldn't it work to restrict the
> number of executions of OP_EVAL allowed
> per transaction? That way it wouldn't allow for unlimited
> looping. If
> there's too many OP_EVAL executions during the transaction
> evaluation,
> just consider the transaction illegal. 3 would be enough
> for the
> purposes people have been planning for here I think.
> 
> - Joel
> 
> On Thu, 2011-12-29 at 11:42 -0500, roconnor at theorem.ca
> wrote:
> > On Thu, 29 Dec 2011, theymos wrote:
> > 
> > > On Thu, Dec 29, 2011, at 01:55 AM, roconnor at theorem.ca
> wrote:
> > >> The number of operations executed is still
> bounded by the number of
> > >> operations occurring in the script.?
> With the OP_EVAL proposal the
> > >> script language becomes essentially Turing
> complete, with only an
> > >> artificial limit on recursion depth
> preventing arbitrary computation
> > >> and there is no way to know what code will
> run without executing it.
> > >
> > > Even if OP_EVAL allowed infinite depth, you'd
> still need to explicitly
> > > specify all operations performed, since there is
> no way of looping.
> > 
> > That's not true.? Gavin himself showed how to use
> OP_EVAL to loop:
> > OP_PUSHDATA {OP_DUP OP_EVAL} OP_DUP OP_EVAL.
> > 
> > Basically OP_DUP lets you duplicate the code on the
> stack and that is the 
> > key to looping.? I'm pretty sure from here we get
> get Turing completeness. 
> > Using the stack operations I expect you can implement
> the SK-calculus 
> > given an OP_EVAL that allows arbitrary depth.
> > 
> > OP_EVAL adds dangerously expressive power to the
> scripting language.
> > 
> 
> 
> 
> ------------------------------------------------------------------------------
> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't
> need a complex
> infrastructure or vast IT resources to deliver seamless,
> secure access to
> virtual desktops. With this all-in-one solution, easily
> deploy virtual 
> desktops for less than the cost of PCs and save 60% on VDI
> infrastructure 
> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From zgenjix at yahoo.com  Sat Dec 31 21:38:43 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sat, 31 Dec 2011 13:38:43 -0800 (PST)
Subject: [Bitcoin-development] version::addr_recv/addrMe does what?
Message-ID: <1325367523.48215.YahooMailNeo@web121004.mail.ne1.yahoo.com>

Hi,

What is the purpose for this field? Can I safely ignore it? Currently it isn't used and I can't imagine it being too useful.

If you want to discover your own IP address from it, then that's ripe for abuse. Maybe it could be used in conjuction with your own IP lookup mechanism kind of how the clock works.

What is the main reason for this field existing?




