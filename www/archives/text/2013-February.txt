From mike at plan99.net  Wed Feb  6 16:33:10 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 6 Feb 2013 17:33:10 +0100
Subject: [Bitcoin-development] Draft BIP for Bloom filtering
In-Reply-To: <CANEZrP1iV8K7_GQkRw6gNSXr+22MWmwuiu5651sK+QtupBSZtg@mail.gmail.com>
References: <CANEZrP0XALwBFJyZTzYd5xBp4MRrjv0s_y2tOXbO7UgjWF2HzA@mail.gmail.com>
	<20121121151534.GA5540@vps7135.xlshosting.net>
	<1353523117.1085.14.camel@localhost.localdomain>
	<20121127211019.GA22701@vps7135.xlshosting.net>
	<CANEZrP0w052ebao-04H4Wduerm86o6RKBY=ObnJXBX22k--zMA@mail.gmail.com>
	<1357876751.1740.4.camel@localhost.localdomain>
	<CA+8xBpcB6kXWyRbeUknK6gkcrFMV6YtrDk0c938q1_32U6GtRw@mail.gmail.com>
	<CANEZrP2k30UsWFYSZ7Bh5Hm4LJ9vEAMEUgYSrYkcXcDTY2Z79Q@mail.gmail.com>
	<CANEZrP3KKGOPM7BzWAr1xGqh96iEzJ+Ki2hdUTe0Gvv51pJ23w@mail.gmail.com>
	<CANEZrP2q=Kvk8DRRjB7mtw7QF8xDTAFYPVRCDW60tJn4A67LYQ@mail.gmail.com>
	<1358348447.1048.0.camel@localhost.localdomain>
	<CANEZrP0HPgNKaNUMbFQS4Hj+gBQ6c7gatoeUXEiRSCA0wBkenA@mail.gmail.com>
	<CANEZrP1iV8K7_GQkRw6gNSXr+22MWmwuiu5651sK+QtupBSZtg@mail.gmail.com>
Message-ID: <CANEZrP3WGbm9sZa7HnA1gHWNdMbREsvnTiU=bRR0hx+5=9BELA@mail.gmail.com>

Can somebody please unlock the BIP wiki page? I don't know why it was
locked but it's stale.


On Wed, Jan 30, 2013 at 12:13 PM, Mike Hearn <mike at plan99.net> wrote:

> Sorry, to clarify, these are test builds available here:
>
>
> https://code.google.com/p/bitcoin-wallet/downloads/detail?name=bitcoin-wallet-2.39_bitcoinj0.7.apk&can=2&q=
>
> It's not on the Play store yet. It probably makes sense to release after
> some more testing and after Bitcoin 0.8 comes out, as otherwise there's a
> risk that 0.7 snapshot nodes will get overloaded.
>
>
> On Wed, Jan 30, 2013 at 12:09 PM, Mike Hearn <mike at plan99.net> wrote:
>
>> Andreas has uploaded Android builds that use the new bloom filtering and
>> peer selection code (also, dependency analysis of transactions).
>>
>> The performance gain is very cool. The app feels dramatically faster to
>> start up and sync. Because the app syncs on charge when I opened it around
>> lunchtime it had only 7 hours of data to sync (42 blocks) and it brought up
>> 6 peer connections, found a 0.7.99 node and synced all in <2 seconds. That
>> was on wifi.
>>
>> The next lowest hanging perf fruit is almost certainly to optimize disk
>> accesses. Flash on Android devices seems to be much slower than laptop
>> flash storage, and current bitcoinj is very inefficient in how it writes
>> (one write per block header!). This matters a lot when doing fast catchup
>> for first time users.
>>
>> The BIP is now a little bit stale, but only slightly.
>>
>>
>> On Wed, Jan 16, 2013 at 4:00 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:
>>
>>> Actually, there is one more minor algorithmic change I would like to
>>> make to the way the hash function is computed really quick before it
>>> gets merged, I'll have that finished up by the end of today.
>>>
>>> Matt
>>>
>>> On Wed, 2013-01-16 at 11:43 +0100, Mike Hearn wrote:
>>> > Matts latest code has been tested by Andreas and seems to work
>>> > correctly. He had to extend the client a bit to refresh the filter
>>> > every 25k blocks because even with the extra flag, eventually the
>>> > filter degrades into uselessness, but it did still improve the
>>> > situation quite a bit.
>>> >
>>> > Because it's unit tested, been reviewed by me several times, has an
>>> > interoperable implementation that has also been tested by Andreas in a
>>> > build of his smartphone app,  I'm going to ACK the current code and
>>> > request that it be merged in to 0.8. What do you say Gavin?
>>> >
>>> > The next step after that would be profiling. It's a big performance
>>> > improvement for SPV clients already, but not as much as I anticipated.
>>> > I suspect there's a simple bottleneck or missed optimization
>>> > somewhere. But that can obviously come post-0.8
>>>
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130206/3463754f/attachment.html>

From gmaxwell at gmail.com  Wed Feb  6 16:45:13 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 6 Feb 2013 08:45:13 -0800
Subject: [Bitcoin-development] Draft BIP for Bloom filtering
In-Reply-To: <CANEZrP3WGbm9sZa7HnA1gHWNdMbREsvnTiU=bRR0hx+5=9BELA@mail.gmail.com>
References: <CANEZrP0XALwBFJyZTzYd5xBp4MRrjv0s_y2tOXbO7UgjWF2HzA@mail.gmail.com>
	<20121121151534.GA5540@vps7135.xlshosting.net>
	<1353523117.1085.14.camel@localhost.localdomain>
	<20121127211019.GA22701@vps7135.xlshosting.net>
	<CANEZrP0w052ebao-04H4Wduerm86o6RKBY=ObnJXBX22k--zMA@mail.gmail.com>
	<1357876751.1740.4.camel@localhost.localdomain>
	<CA+8xBpcB6kXWyRbeUknK6gkcrFMV6YtrDk0c938q1_32U6GtRw@mail.gmail.com>
	<CANEZrP2k30UsWFYSZ7Bh5Hm4LJ9vEAMEUgYSrYkcXcDTY2Z79Q@mail.gmail.com>
	<CANEZrP3KKGOPM7BzWAr1xGqh96iEzJ+Ki2hdUTe0Gvv51pJ23w@mail.gmail.com>
	<CANEZrP2q=Kvk8DRRjB7mtw7QF8xDTAFYPVRCDW60tJn4A67LYQ@mail.gmail.com>
	<1358348447.1048.0.camel@localhost.localdomain>
	<CANEZrP0HPgNKaNUMbFQS4Hj+gBQ6c7gatoeUXEiRSCA0wBkenA@mail.gmail.com>
	<CANEZrP1iV8K7_GQkRw6gNSXr+22MWmwuiu5651sK+QtupBSZtg@mail.gmail.com>
	<CANEZrP3WGbm9sZa7HnA1gHWNdMbREsvnTiU=bRR0hx+5=9BELA@mail.gmail.com>
Message-ID: <CAAS2fgTaq1bf8Gyihzg=-TGZ9dfeKPpHsDfy7jEzg4voaptOdQ@mail.gmail.com>

On Wed, Feb 6, 2013 at 8:33 AM, Mike Hearn <mike at plan99.net> wrote:
> Can somebody please unlock the BIP wiki page? I don't know why it was locked
> but it's stale.

I asked for permissions to unlock it but haven't heard back? will prod.



From petr at praus.net  Fri Feb  8 02:44:44 2013
From: petr at praus.net (Petr Praus)
Date: Thu, 7 Feb 2013 20:44:44 -0600
Subject: [Bitcoin-development] Implementing trading across chains
In-Reply-To: <CACezXZ_1TjtPtm_PXF+f63NvtR92+UtsXDizS05wXWP+YOrp_g@mail.gmail.com>
References: <CACezXZ_1TjtPtm_PXF+f63NvtR92+UtsXDizS05wXWP+YOrp_g@mail.gmail.com>
Message-ID: <CACezXZ85Bzw1jAFtnGXdp49dTYSoRL5cEjFtVPMxc1KTd0Vb+w@mail.gmail.com>

Hi,

I intend to implement trading across chains in a P2P manner (as described
by Mike Hearn in
https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).
Note, this is indended more as an alternative chain development, I don't
have any plans for merging it back into main client (not because I don't
want to, but because I think it wouldn't be accepted). Before I dive into
it, I thought it might be a good idea to ask here if the community has any
useful ideas or comments on this topic?

Thanks to Gary Rowe I know about Open
Transactions<https://github.com/FellowTraveler/Open-Transactions>.
They can do "multicurrency trading" too, but it's objectives are quite
ambitious and I'm looking at making relatively small changes in the
mainline Bitcoin client rather than diving into something entirely new.

A little background on why am I doing this, can be found
here<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.
In short it's part of research towards my Master's thesis (more precisely,
an excuse to hack on Bitcoin and sell it as research :)) which should be
about multicurrency (alternative chains) in Bitcoin.

Thanks,
Petr

PS: I hope I'm not too off topic here, but
this<https://bitcointalk.org/index.php?topic=15527.0> thread
indicates it should be fine to post alternative development questions on
this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130207/a3d922f8/attachment.html>

From timo.hanke at web.de  Fri Feb  8 10:03:54 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Fri, 8 Feb 2013 11:03:54 +0100
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
Message-ID: <20130208100354.GA26627@crunch>

There have been proposals to use the blockchain to establish
"identities". firstbits is a simple example. I would like to announce a
project that extends this idea to turn the blockchain into a "root CA"
that can sign arbitrary certificates. The purpose is to use these
certificates in the payment protocol, where some might consider
traditional centralized root CAs unsatisfactory. 

Code is here: https://github.com/bcpki

Technical specification and full-length examples are found in the wiki.
I therefore spare myself from repeating the details here, even though,
of course, discussion about those details is welcome on this list.

Excerpt from README.md follows:

First, we have drafted a quite general specification for bitcoin certificates (protobuf messages) that allow for a variety of payment protocols (e.g. static as well as customer-side-generated payment addresses).
This part has surely been done elsewhere as well and is orthogonal to the goal of this project.
What is new here is the signatures _under_ the certificates.

We have patched the bitcoind to handle certificates, submit signatures to the blockchain, verify certificates against the blockchain, pay directly to certificates (with various payment methods), revoke certificates.
Signatures in the blockchain are stored entirely in the UTXO set (i.e. the unspend, unprunable outputs). 
This seems to make signature lookup and verification reasonably fast: 
it took us 10s in the mainnet test we performed (lookup is instant on the testnet, of course).

Payment methods include: static bitcoin addresses, client-side derived
payment addresses (pay-to-contract), pay-to-contract with multisig destinations (P2SH)

Full-length real-world examples for all payment methods are provided in the tutorial pages.
These examples have actually been carried out on testnet3.

For further details and specifications see the wiki.

timo hanke



From pete at petertodd.org  Fri Feb  8 11:01:08 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 8 Feb 2013 06:01:08 -0500
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
In-Reply-To: <20130208100354.GA26627@crunch>
References: <20130208100354.GA26627@crunch>
Message-ID: <20130208110108.GA6893@savin>

On Fri, Feb 08, 2013 at 11:03:54AM +0100, Timo Hanke wrote:
> First, we have drafted a quite general specification for bitcoin certificates (protobuf messages) that allow for a variety of payment protocols (e.g. static as well as customer-side-generated payment addresses).
> This part has surely been done elsewhere as well and is orthogonal to the goal of this project.
> What is new here is the signatures _under_ the certificates.
> 
> We have patched the bitcoind to handle certificates, submit signatures to the blockchain, verify certificates against the blockchain, pay directly to certificates (with various payment methods), revoke certificates.
> Signatures in the blockchain are stored entirely in the UTXO set (i.e. the unspend, unprunable outputs). 
> This seems to make signature lookup and verification reasonably fast: 
> it took us 10s in the mainnet test we performed (lookup is instant on the testnet, of course).

Why don't you use namecoin or another alt-chain for this?

The UTXO set is the most expensive part of the blockchain because it
must be stored in memory with fast access times. It's good that you have
designed the system so that the addresses can be revoked, removing them
from the UTXO set, but it still will encourage the exact same type of
ugly squatting behavior we've already seen with first-bits, and again
it'll have a significant cost to the network going forward for purposes
that do not need to be done on the block chain.

In https://github.com/bcpki/bitcoin/wiki/Technical you say that you have
a minimum amount required for an outpoint to be valid, set at 0.05BTC.
That's a nice touch, and sort of works because this is a consensus
protocol, but if the exchange rate climbs significantly there will be a
lot of pressure to reduce that value. (setting minimum value by chain
height) What will happen then is there will be a mad rush to squat on
previously unaffordable domains, further disrupting Bitcoin's purpose as
a financial network.

In addition you'll also have a second problem: squatting of subsequent
transactions, particularly for valuable bcvalues. Basically if someone
already has "microsoft" insert bcvalues after their tx in case they
accidentally spend it. Of course, this will be done by people buying
bcvalues as well. Again, all this further clogs up the UTXO set.

I also can't figure out why you say signature lookup and verification
takes 10s - this should be an O(1) operation if you maintain a mapping
of candidate pubkeys to linked-lists of sorted applicable transactions.

Finally, why is this implemented within the reference client? Use the
raw transaction API and make up your own database. If you want, create a
RPC command that allows you to query the UTXO set directly; this would
be a useful feature to have. This patch will never be accepted to the
reference client, so you'll just wind up having to maintain a fork. Even
for a prototype this approach is ill-advised - prototypes have a bad way
of turning into production code.


In short, please don't do this.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130208/8b7a97fa/attachment.sig>

From gavinandresen at gmail.com  Fri Feb  8 23:49:09 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 8 Feb 2013 18:49:09 -0500
Subject: [Bitcoin-development] 0.8.0rc1 status
Message-ID: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>

Linux builds of 0.8.0rc1 are in good shape; easily gitian-reproduceable.

Windows builds are varying with every compile, and I think I finally
figured out why: we are not passing the -frandom-seed flag down into
the leveldb build (I used objdump to dump two different binaries, and
they differed only in the names of some leveldb objects). That should
be an easy makefile fix.

The OSX build is in pretty good shape, but needs
https://github.com/bitcoin/bitcoin/pull/2286 to compile.

So: I think the path forward is to announce 0.8.0rc1 with the binaries
we've got, to get more testing.

Then before final release (or rc2, if that is needed) pull #2286 and
create and pull a patch to fix the windows non-determinism problem.

I'm done for today, but should have time to sign the windows setup.exe
and send out a rc1 announcement tomorrow.

-- 
--
Gavin Andresen



From luke at dashjr.org  Sat Feb  9 01:29:16 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 9 Feb 2013 01:29:16 +0000
Subject: [Bitcoin-development] 0.8.0rc1 status
In-Reply-To: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>
References: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>
Message-ID: <201302090129.17999.luke@dashjr.org>

On Friday, February 08, 2013 11:49:09 PM Gavin Andresen wrote:
> Windows builds are varying with every compile, and I think I finally
> figured out why: we are not passing the -frandom-seed flag down into
> the leveldb build (I used objdump to dump two different binaries, and
> they differed only in the names of some leveldb objects). That should
> be an easy makefile fix.

FWIW, this should be already mostly-fixed in pull #2243 I submitted 9 days 
ago... only thing not in that pull is changing gitian to use the standard 
CXXFLAGS rather than our non-standard DEBUGFLAGS (whether DEBUGFLAGS should be 
propagated to LevelDB or not is another conversation I guess).

Luke



From grarpamp at gmail.com  Sat Feb  9 04:11:22 2013
From: grarpamp at gmail.com (grarpamp)
Date: Fri, 8 Feb 2013 23:11:22 -0500
Subject: [Bitcoin-development] 0.8.0rc1 status
In-Reply-To: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>
References: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>
Message-ID: <CAD2Ti2_QPACgF61nPLTDrBad1ext3pKfXYF68gYctMQJQFugUA@mail.gmail.com>

> Linux builds of 0.8.0rc1 are in good shape; easily gitian-reproduceable.
> Windows builds are varying with every compile, and I think I finally
> The OSX build is in pretty good shape, but needs
> So: I think the path forward is to announce 0.8.0rc1 with the binaries
> we've got, to get more testing.

With this new minor bump, I'd like to encourage the project to perform
a build check on FreeBSD 8.3 (gcc), and 9.1 (should be clang/llvm).
I'll try to get to 8.x but may not be able to in time.



From pieter.wuille at gmail.com  Sat Feb  9 06:10:34 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 9 Feb 2013 07:10:34 +0100
Subject: [Bitcoin-development] 0.8.0rc1 status
In-Reply-To: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>
References: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>
Message-ID: <CAPg+sBiGHnT1-W7m8RCt93-cZbpz0vxm+YQcnpFNXv7f-mrBXg@mail.gmail.com>

On 9 Feb 2013 00:50, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> Then before final release (or rc2, if that is needed) pull #2286 and
> create and pull a patch to fix the windows non-determinism problem.

#2243 should fix that, I think.

-- 
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130209/8416e7ec/attachment.html>

From robbak at robbak.com  Sat Feb  9 07:58:33 2013
From: robbak at robbak.com (Robert Backhaus)
Date: Sat, 9 Feb 2013 17:58:33 +1000
Subject: [Bitcoin-development] 0.8.0rc1 status
In-Reply-To: <CAPg+sBiGHnT1-W7m8RCt93-cZbpz0vxm+YQcnpFNXv7f-mrBXg@mail.gmail.com>
References: <CABsx9T1D08uOenXch7ZwrEaCeOdFCFOtzK8ochN8z3REGm0mLQ@mail.gmail.com>
	<CAPg+sBiGHnT1-W7m8RCt93-cZbpz0vxm+YQcnpFNXv7f-mrBXg@mail.gmail.com>
Message-ID: <CA+i0-i-0Q9EnMJvajEfUtPf7jGa3Aw5qn0RqwMqjP4nOASsO0g@mail.gmail.com>

I have done test builds on FreeBSD.

Clean builds using gcc and clang, building both the qt gui and the command
line daemon, and the tests run clean as well. The qt gui runs, and cleanly
reindexed and caught up. I have no problems to report.

I am not doing any adjustments apart from applying the needed changes to
the include directory statements.


On 9 February 2013 16:10, Pieter Wuille <pieter.wuille at gmail.com> wrote:

>
> On 9 Feb 2013 00:50, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> > Then before final release (or rc2, if that is needed) pull #2286 and
> > create and pull a patch to fix the windows non-determinism problem.
>
> #2243 should fix that, I think.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> Free Next-Gen Firewall Hardware Offer
> Buy your Sophos next-gen firewall before the end March 2013
> and get the hardware for free! Learn more.
> http://p.sf.net/sfu/sophos-d2d-feb
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130209/bd8aa490/attachment.html>

From timo.hanke at web.de  Sat Feb  9 14:33:25 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Sat, 9 Feb 2013 15:33:25 +0100
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
In-Reply-To: <20130208110108.GA6893@savin>
References: <20130208100354.GA26627@crunch>
 <20130208110108.GA6893@savin>
Message-ID: <20130209143325.GA3998@crunch>

On Fri, Feb 08, 2013 at 06:01:08AM -0500, Peter Todd wrote:
> On Fri, Feb 08, 2013 at 11:03:54AM +0100, Timo Hanke wrote:
> > First, we have drafted a quite general specification for bitcoin certificates (protobuf messages) that allow for a variety of payment protocols (e.g. static as well as customer-side-generated payment addresses).
> > This part has surely been done elsewhere as well and is orthogonal to the goal of this project.
> > What is new here is the signatures _under_ the certificates.
> > 
> > We have patched the bitcoind to handle certificates, submit signatures to the blockchain, verify certificates against the blockchain, pay directly to certificates (with various payment methods), revoke certificates.
> > Signatures in the blockchain are stored entirely in the UTXO set (i.e. the unspend, unprunable outputs). 
> > This seems to make signature lookup and verification reasonably fast: 
> > it took us 10s in the mainnet test we performed (lookup is instant on the testnet, of course).
> 
> Why don't you use namecoin or another alt-chain for this?

Because namcoin tries to solve a different problem, DNS, whereas I want
to establish an identity for a payment protocol. Your incoming payments
will land on addresses that are derived (regardless which way) from this
idenity. This makes your identity as important (securitywise) as
anything else involved in the bitcoin protocol. Therefore I would not
want to have payment-ids rely on anything _less_ than bitcoin's own
blockchain. In particular not on PKI with centralized root CAs. But also
not on namecoin or any other (weaker) alt-chains.

You can argue that alt-chains _can_ be as strong as bitcoin, but they
don't _have to_ be. There is no guarantee how many people will
cross-mine. The alt-chain could even disappear at some point. If at some
point your alt-chain is no longer being worked on, then how do you prove
that some old bitcoin transaction went to an address for which there was
a valid id/certificate at the time of sending? If the certificate is
based inside bitcoin's blockchain then you will have a proof for the
correct destinations of all your old transactions as long as bitcoin
exists.

Besides all this, as you mentioned namecoin specifically, that is
overkill if you just want to link two hashes together. A single 2-of-2
multisig output would suffice for that. 

> The UTXO set is the most expensive part of the blockchain because it
> must be stored in memory with fast access times. It's good that you have
> designed the system so that the addresses can be revoked, removing them
> from the UTXO set, but it still will encourage the exact same type of
> ugly squatting behavior we've already seen with first-bits, and again
> it'll have a significant cost to the network going forward for purposes
> that do not need to be done on the block chain.

You are probably right that storing this in the _spent outputs_ would be
better. There doesn't seem to be any type of client out there that would
benefit from having to search UTXO only. 

Timo



From gavinandresen at gmail.com  Sat Feb  9 15:50:34 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 9 Feb 2013 10:50:34 -0500
Subject: [Bitcoin-development] Version 0.8.0rc1 ready for testing
Message-ID: <CABsx9T2hp69Copv50G1pdbRcp4zG_FaNmRPuhh4mBBg_Ujo_LQ@mail.gmail.com>

Bitcoin version 0.8.0 release candidate 1 is now available from:
  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.0/test

This is a major release designed to improve performance and handle the
increasing volume of transactions on the network.

Please report bugs using the issue tracker at github:
  https://github.com/bitcoin/bitcoin/issues

Release-candidate 1 notes:

The OSX binary reports its version as "0.8.0rc1-1-gba1d080-beta" due to
issue https://github.com/bitcoin/bitcoin/issues/2285 . This will be fixed
before the final 0.8.0 release.

The Windows binaries could not be reproducibly built, due to issue
https://github.com/bitcoin/bitcoin/issues/2288 . This will also be fixed
before the final 0.8.0 release.



How to Upgrade
--------------

If you are running an older version, shut it down. Wait
until it has completely shut down (which might take a few minutes for older
versions), then run the installer (on Windows) or just copy over
/Applications/Bitcoin-Qt (on Mac) or bitcoin-qt (on Linux).

The first time you run after the upgrade a re-indexing process will be
started that will take anywhere from 30 minutes to several hours,
depending on the speed of your machine. If you have enough
memory, running with the -dbcache setting (e.g. -dbcache=1000 )
may make re-indexing faster.

Special notes for release candidate 1:
--------------------------------------

If you helped test pre-release versions, there are two changes that you
should be aware of:

1. Subdirectories in the data directory changed names; to avoid re-indexing
the blockchain, rename:
  mv $DATADIR/blktree $DATADIR/blocks/index
  mv $DATADIR/coins $DATADIR/chainstate

2. The "undo file" format changed; if you see errors at startup during block
validation re-run with the -reindex flag to fix them.

Incompatible Changes
--------------------

This release no longer maintains a full index of historical transaction ids
by default, so looking up an arbitrary transaction using the getrawtransaction
RPC call will not work. If you need that functionality, you must run once
with -txindex=1 -reindex=1 to rebuild block-chain indices (see below for more
details).

Improvements
------------

Mac and Windows binaries are signed with certificates owned by the Bitcoin
Foundation, to be compatible with the new security features in OSX 10.8 and
Windows 8.

LevelDB, a fast, open-source, non-relational database from Google, is
now used to store transaction and block indices.  LevelDB works much better
on machines with slow I/O and is faster in general. Berkeley DB is now only
used for the wallet.dat file (public and private wallet keys and transactions
relevant to you).

Pieter Wuille implemented many optimizations to the way transactions are
verified, so a running, synchronized node uses much less memory and does
much less I/O. He also implemented parallel signature checking, so if you
have a multi-CPU machine all CPUs will be used to verify transactions.

New Features
------------

"Bloom filter" support in the network protocol for sending only
relevant transactions to
lightweight clients.

contrib/verifysfbinaries is a shell-script to verify that the binary downloads
at sourceforge have not been tampered with. If you are able, you can help make
everybody's downloads more secure by running this occasionally to check PGP
signatures against download file checksums.

contrib/spendfrom is a python-language command-line utility that demonstrates
how to use the "raw transactions" JSON-RPC api to send coins received
from particular
addresses (also known as "coin control").

New/changed settings (command-line or bitcoin.conf file)
--------------------------------------------------------

dbcache : now controls LevelDB memory usage. Running with (for
example) -dbcache=1000
will use a gigabyte of memory and might make the initial blockchain
download faster.

par : controls how many threads to use to validate transactions.
Defaults to the number
of CPUs on your machine, use -par=1 to limit to a single CPU.

txindex : maintains an extra index of old, spent transaction ids so
they will be found
by the getrawtransaction JSON-RPC method.

reindex : rebuild block and transaction indices from the downloaded block data.

New JSON-RPC API Features
-------------------------

lockunspent / listlockunspent allow locking transaction outputs for a
period of time so
they will not be spent by other processes that might be accessing the
same wallet.

addnode / getaddednodeinfo methods, to connect to specific peers
without restarting.

importprivkey now takes an optional boolean parameter (default true)
to control whether
or not to rescan the blockchain for transactions after importing a new
private key.

Important Bug Fixes
-------------------

Privacy leak: the position of the "change" output in most transactions
was not being
properly randomized, making network analysis of the transaction graph
to identify
users' wallets easier.

Zero-confirmation transaction vulnerability: accepting
zero-confirmation transactions
(transactions that have not yet been included in a block) from
somebody you do not
trust is still not recommended, because there will always be ways for
attackers to
double-spend zero-confirmation transactions. However, this release
includes a bug
fix that makes it a little bit more difficult for attackers to double-spend a
certain type ("lockTime in the future") of zero-confirmation transaction.

Dependency Changes
------------------

Qt 4.8.3 (compiling against older versions of Qt 4 should continue to work)


Thanks to everybody who contributed to this release:
----------------------------------------------------

Alexander Kjeldaas
Andrey Alekseenko
Arnav Singh
Christian von Roques
Eric Lombrozo
Forrest Voight
Gavin Andresen
Gregory Maxwell
Jeff Garzik
Luke Dashjr
Matt Corallo
Mike Cassano
Mike Hearn
Peter Todd
Philip Kaufmann
Pieter Wuille
Richard Schwab
Robert Backhaus
Rune K. Svendsen
Sanjay Ghemawat
Sergio Demian Lerner
Wladimir J. van der Laan
burger2
default
fanquake
grimd34th
justmoon
redshark1802
tucenaber
xanatos



From luke at dashjr.org  Sat Feb  9 19:01:48 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 9 Feb 2013 19:01:48 +0000
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
In-Reply-To: <20130209143325.GA3998@crunch>
References: <20130208100354.GA26627@crunch> <20130208110108.GA6893@savin>
	<20130209143325.GA3998@crunch>
Message-ID: <201302091901.49930.luke@dashjr.org>

On Saturday, February 09, 2013 2:33:25 PM Timo Hanke wrote:
> > Why don't you use namecoin or another alt-chain for this?
> 
> Because namcoin tries to solve a different problem, DNS, whereas I want
> to establish an identity for a payment protocol.

What is the technical difference here? Namecoin ties names to data; DNS is a 
specific namespace in it. There is no reason I know of that this identity 
stuff cannot be a new namespace.

> You can argue that alt-chains _can_ be as strong as bitcoin, but they
> don't _have to_ be. There is no guarantee how many people will
> cross-mine.

This is true of namecoin, but it does not have to be true of new merged-mined 
data. You could very well require the Bitcoin proof-of-work to be valid and 
the master header to be in the Bitcoin blockchain.

> The alt-chain could even disappear at some point. If at some point your alt-
> chain is no longer being worked on, then how do you prove that some old
> bitcoin transaction went to an address for which there was a valid
> id/certificate at the time of sending? If the certificate is based inside
> bitcoin's blockchain then you will have a proof for the correct destinations
> of all your old transactions as long as bitcoin exists.

Yes, if people stop using your system, it won't work. Consider that a "this 
idea failed" scenario, where it doesn't matter.

Luke



From jtimonmv at gmail.com  Mon Feb 11 11:03:01 2013
From: jtimonmv at gmail.com (=?ISO-8859-1?B?CUpvcmdlIFRpbfNu?=)
Date: Mon, 11 Feb 2013 12:03:01 +0100
Subject: [Bitcoin-development] Implementing trading across chains
In-Reply-To: <CACezXZ85Bzw1jAFtnGXdp49dTYSoRL5cEjFtVPMxc1KTd0Vb+w@mail.gmail.com>
References: <CACezXZ_1TjtPtm_PXF+f63NvtR92+UtsXDizS05wXWP+YOrp_g@mail.gmail.com>
	<CACezXZ85Bzw1jAFtnGXdp49dTYSoRL5cEjFtVPMxc1KTd0Vb+w@mail.gmail.com>
Message-ID: <CABOyFfprYJ3B+6QxKUcaj1cbQT7LrsPBYhqRhXH5iKAjtF0okQ@mail.gmail.com>

Hi, you may be interested in a couple of related projects.

Colored coins uses satoshis to represent smart property, shares, IOUs
of another currency...Colored coins can be atomically traded for
bitcoin. If you implement the trade across chains contract they would
also be tradeable for another chain currencies like namecoin or
freicoin.

http://www.bitcoinx.org/

Ripple is a concept by which people that trust each other on a network
are able to pay with IOUs transitively. It has a new p2p
implementation  that is still on development. The new implementation
is very similar to bitcoin in certain senses but it has no mining.
Bitcoin IOUs can be traded there.

https://ripple.com/

Good luck with the implementation, this is a good feature to have,
even if it's not on the main client.


On 2/8/13, Petr Praus <petr at praus.net> wrote:
> Hi,
>
> I intend to implement trading across chains in a P2P manner (as described
> by Mike Hearn in
> https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).
> Note, this is indended more as an alternative chain development, I don't
> have any plans for merging it back into main client (not because I don't
> want to, but because I think it wouldn't be accepted). Before I dive into
> it, I thought it might be a good idea to ask here if the community has any
> useful ideas or comments on this topic?
>
> Thanks to Gary Rowe I know about Open
> Transactions<https://github.com/FellowTraveler/Open-Transactions>.
> They can do "multicurrency trading" too, but it's objectives are quite
> ambitious and I'm looking at making relatively small changes in the
> mainline Bitcoin client rather than diving into something entirely new.
>
> A little background on why am I doing this, can be found
> here<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.
> In short it's part of research towards my Master's thesis (more precisely,
> an excuse to hack on Bitcoin and sell it as research :)) which should be
> about multicurrency (alternative chains) in Bitcoin.
>
> Thanks,
> Petr
>
> PS: I hope I'm not too off topic here, but
> this<https://bitcointalk.org/index.php?topic=15527.0> thread
> indicates it should be fine to post alternative development questions on
> this.
>


-- 
Jorge Tim?n

http://freico.in/
http://archive.ripple-project.org/



From pete at petertodd.org  Mon Feb 11 11:21:03 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Feb 2013 06:21:03 -0500
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
In-Reply-To: <20130209143325.GA3998@crunch>
References: <20130208100354.GA26627@crunch> <20130208110108.GA6893@savin>
	<20130209143325.GA3998@crunch>
Message-ID: <20130211112103.GA7346@savin>

On Sat, Feb 09, 2013 at 03:33:25PM +0100, Timo Hanke wrote:
> > Why don't you use namecoin or another alt-chain for this?
> 
> Because namcoin tries to solve a different problem, DNS, whereas I want
> to establish an identity for a payment protocol. Your incoming payments
> will land on addresses that are derived (regardless which way) from this
> idenity. This makes your identity as important (securitywise) as
> anything else involved in the bitcoin protocol. Therefore I would not
> want to have payment-ids rely on anything _less_ than bitcoin's own
> blockchain. In particular not on PKI with centralized root CAs. But also
> not on namecoin or any other (weaker) alt-chains.

In what way are you not solving the same problem as DNS? I don't mean
the Luke-Jr's (quite correct) technical point about key-value maps, I
mean the human problem that I have these unique numbers that I can't
memorize, and I have some non-unique names that I can.

By creating Yet Another Totally Different System you are just creating
another way that users can be confused into thinking some name snatched
up by some scammers in some little-used PKI system is who they are
supposed to be communicating with. Fortunately your PKI system isn't
actually used and probably never will be, so it's not a big deal yet,
but ultimately you are adding to the problem.

Go work on namecoin and make it more usable. Then add some PKI to it
using the *same* domain names so when I see a PKI certificate for "foo"
I know it must be the same "foo" website I just visited and the same
"foo at foo" I just emailed.

> You can argue that alt-chains _can_ be as strong as bitcoin, but they
> don't _have to_ be. There is no guarantee how many people will
> cross-mine. The alt-chain could even disappear at some point. If at some
> point your alt-chain is no longer being worked on, then how do you prove
> that some old bitcoin transaction went to an address for which there was
> a valid id/certificate at the time of sending? If the certificate is
> based inside bitcoin's blockchain then you will have a proof for the
> correct destinations of all your old transactions as long as bitcoin
> exists.

Alt-chains don't have to be based on mining you know. Your proof-of-work
can be replaced by proof-of-sacrifice, specifically Bitcoins. A
particularly nice scheme is to use transaction fees and Bitcoin block
height. Specifically every block in your alt-chain will have a merkle
path to a transaction in a Bitcoin block. Of course there can be more
than one such block, so you introduce a tie-breaker rule: the
transaction with the highest mining fee wins.

The reason why this is nice is because it becomes really easy to be sure
that a better chain won't turn up after the fact - make sure the
transaction linking the alt-chain to the Bitcoin block has the highest
fee in the block. Thus if you want to, say, register a domain name, do
so in the alt-chain, then "mine" the block by creating a suitable
transaction. Make sure it's the biggest fee, wait a few confirmations,
and you're good to go with the same level of security as Bitcoin proper.

Because the rule is that a merkle *path* exists, multiple alt-chains can
use this mechanism at the same time, with the exact same security
guarantee re: max fees. (note that you're chain needs to store copies of
the txin's for the tx sacrificing the fee, transactions by themselves do
not prove fees) Multiple parties can also colaborate to create the
transaction, each providing, and signing for, an input for their portion
of the total fee.


There is the problem that miners get to keep the fee, thus they can
create these special proof-of-sacrifice transactions at low cost, and
potentially make it difficult to get a block mined, or to be sure a
block won't be undone later. This problem can be solved with my
"two-step sacrifice" protocol.(1) Essentially you create a transaction
that is invalid until some time in the future and sacrifices Bitcoins to
mining fees, then create a second transaction that includes the first
one as data. You publish the second in the block chain, proving the
whole world had an opportunity to mine it. Eventually the first is in
fact mined, thus sacrificing Bitcoins to a miner you have no control
over. For a alt-chain you would consider the sacrifice to be a "balance"
and then spend that balance as required in later blocks in a way that is
guaranteed to be public so you can still check the security guarantee of
knowing your tx had the max fee. For instance with the contract protocol
I describe in (1), shave off what ever percentage of the original
sacrifice, linking the merkle-root of the merkel tree of alt-chains at
the same time. Anyone can still monitor the set of all two-step
sacrifices and associated contract movements and check that their one in
a block was the largest possible. Finally if you want to be nice, modify
the contract value rules so only the successful max contract value tx
has it's balance decreased.

1) https://github.com/petertodd/trustbits/blob/master/fidelitybond.md

Actually, you know gmaxwell, the above would be a great way to run the
alt-chain I'm probably going to need for the fraud proofs in Trustbits.
Although it does have the minor problem of being ludicrously complex...

> > The UTXO set is the most expensive part of the blockchain because it
> > must be stored in memory with fast access times. It's good that you have
> > designed the system so that the addresses can be revoked, removing them
> > from the UTXO set, but it still will encourage the exact same type of
> > ugly squatting behavior we've already seen with first-bits, and again
> > it'll have a significant cost to the network going forward for purposes
> > that do not need to be done on the block chain.
> 
> You are probably right that storing this in the _spent outputs_ would be
> better. There doesn't seem to be any type of client out there that would
> benefit from having to search UTXO only. 

The blockchain grows at a maximum rate of 55GiB/year. Do you think your
users will all want to have that available just to validate some PKI
certificates?

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130211/5aef0b59/attachment.sig>

From timo.hanke at web.de  Mon Feb 11 19:12:59 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Mon, 11 Feb 2013 20:12:59 +0100
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
In-Reply-To: <201302091901.49930.luke@dashjr.org>
References: <20130208100354.GA26627@crunch> <20130208110108.GA6893@savin>
	<20130209143325.GA3998@crunch> <201302091901.49930.luke@dashjr.org>
Message-ID: <20130211191259.GA22257@crunch>

On Sat, Feb 09, 2013 at 07:01:48PM +0000, Luke-Jr wrote:
> On Saturday, February 09, 2013 2:33:25 PM Timo Hanke wrote:
> > namcoin tries to solve a different problem, DNS, whereas I want
> > to establish an identity for a payment protocol.
> 
> What is the technical difference here? Namecoin ties names to data; DNS is a 
> specific namespace in it. There is no reason I know of that this identity 
> stuff cannot be a new namespace.

It's not about technical differences, but about the different use or
purpose, which can result in different security demands. I argue that
DNS has a lower demand in this respect than payment ids have. So DNS
data can be in a chain with a hashrate lower than bitcoin's hashrate but
payment ids _for_ bitcoin have to be in a chain with equal hashrate.

> > You can argue that alt-chains _can_ be as strong as bitcoin, but they
> > don't _have to_ be. There is no guarantee how many people will
> > cross-mine.
> 
> This is true of namecoin, but it does not have to be true of new merged-mined 
> data. You could very well require the Bitcoin proof-of-work to be valid and 
> the master header to be in the Bitcoin blockchain.

Ok, true. This does the trick. If few miners merge-mine then the new
chain just becomes slower. But is this still an alt-chain? It is not
independently verifiable anymore, like the alt-chains described in the
wiki are. Instead, you need to refer to the bitcoin's chain to see if
the target is correct. Not sure if I got you right on this. But it seems
to be essentially a more efficient version of what I proposed, rather
than a true alt-chain.

I suppose you suggest to place the master header hash into the coinbase.
A drawback may be that it puts miners at a great advantage over regular
users. This could (but doesn't have to) become relevant depending on
your counter-measures against excessive alias registration. I think
Peter addressed this (below). 

On Fri, Feb 08, 2013 at 06:01:08AM -0500, Peter Todd wrote:
> Finally, why is this implemented within the reference client? Use the
> raw transaction API and make up your own database. If you want, create a
> RPC command that allows you to query the UTXO set directly; this would
> be a useful feature to have. This patch will never be accepted to the
> reference client, so you'll just wind up having to maintain a fork. Even
> for a prototype this approach is ill-advised - prototypes have a bad way
> of turning into production code.

This was not intended to be a prototype and will certainly not be
maintained. It is a demo to be run on the testnet to get a feel of how
the user interface (RPC) and the "work flow" could look like, starting
from the creation of a certificate all the way to paying to a
customer-derived payment addresses (pay-to-contract) when the merchant's
base address is defined in the certificate. There's an appeal to be able
to issue
./bitcoind sendtoalias foo deadbeef 10
and being sure that 10 BTC go, e.g., to a unique P2SH multisig address
that is derived for order number 'deadbeef' from the two pubkeys that
foo defined in his certificate. And having the certificate verification
happen automatically in the background. The demo is in the reference
client a) to simulate this feel, b) because it was the fastest way to
code it. Apart from that, it could have just as well been separate, and
an UTXO query-RPC would certainly be nice.  

Another reason for this demo was the fun of devising a certificate that
can handle all this. 

BTW, I'm sure that some form of certificate handling will find its way
directly into the reference client. The user will want to trust only one
piece of software running on one piece of dedicated hardware. 

On Mon, Feb 11, 2013 at 06:21:03AM -0500, Peter Todd wrote:
> In what way are you not solving the same problem as DNS? I don't mean
> the Luke-Jr's (quite correct) technical point about key-value maps, I
> mean the human problem that I have these unique numbers that I can't
> memorize, and I have some non-unique names that I can.
> 
> By creating Yet Another Totally Different System you are just creating
> another way that users can be confused into thinking some name snatched
> up by some scammers in some little-used PKI system is who they are
> supposed to be communicating with. Fortunately your PKI system isn't
> actually used and probably never will be, so it's not a big deal yet,
> but ultimately you are adding to the problem.

What exactly is the problem, the "little-used"? Otherwise it's the same
as it is now, you pick up an interesting domain name on the street, type
it in, and start communicating with who you think it is, and maybe even
pay them. The EV that centralized PKI offers prevents only some attacks,
and may even create a false sense of security.

> Go work on namecoin and make it more usable. Then add some PKI to it
> using the *same* domain names so when I see a PKI certificate for "foo"
> I know it must be the same "foo" website I just visited and the same
> "foo at foo" I just emailed.

No. I outlined above why I think namecoin is unsuitable (but Luke's
suggestion for a new alt-chain may be). BTW, if you want to link aliases
of some "bitcoin PKI" and "domain names", they should not correspond
bijectively to each other. The "bitcoin alias" corresponds to a payment
base address, which I see as a more universal identifier than a domain
name. First, bitcoin alias foo can have several domains foo.com,
foo.co.uk, etc. but still only one "bitcoin certificate". This can be
achieved by either writing the domain names directly into the
certificate, or better, by having the "bitcoin certificate" sign an SSL
sub-certificate and tell your browser to ask bitcoind to verify it.
Second, a bitcoin alias can be meaningful without any domain names, e.g.
it can be a certificate for all vending machines of a certain seller,
with who you interact directly, say NFC. To summarize, I would either
not link bitcoin aliases with domain names, or put SSL certificates
"below" bitcoin certificates in the verification chain.

Also BTW, it is the beauty of the pay-to-contract principle that
authenticated communication is not even required. This means that if you
know you have the correct "bitcoin certificate" stored with your
bitcoind and you pay to it, then it doesn't matter if you ordered on a
wrong or fake website. The worst-case scenario is that you have to call
in via another channel and re-submit your order, but funds are never
lost.

> Alt-chains don't have to be based on mining you know. Your proof-of-work
> can be replaced by proof-of-sacrifice, specifically Bitcoins. 
> [...]
> 1) https://github.com/petertodd/trustbits/blob/master/fidelitybond.md

Yes, I already read your discussing of sacrifice-methods after your
first reply and found it interesting.. The problem I see is to
dynamically (and automatically) adjust the minimum sacrifice amount. A
strict limit on the number of registrations like namecoin has is not
desirable. A constant sacrifice, as you mentioned earlier, is also
undesirable. A good measure could be the average transaction fee taken
over several blocks. Maybe the minimum sacrifice should be a constant
times that. 

> > You are probably right that storing this in the _spent outputs_
> > would be better [than UTXO]. There doesn't seem to be any type of
> > client out there that would benefit from having to search UTXO only. 
> 
> The blockchain grows at a maximum rate of 55GiB/year. Do you think your
> users will all want to have that available just to validate some PKI
> certificates?

Actually yes. They are also willing to do that to verify their payments,
so why not for the certificate? But true, this was the reason why I
thought of putting it in the UTXO. To enable some future dedicated
"hardware wallet" to keep only the UTXO and to verify against it. Where
would you store you alt-chain block header hashes? UTXO? 

BTW, suppose you avoid any squatting (there would certainly be ways to
do that). Then with my original proposal of one transaction per
registration you would grow the UTXO by O(n), n is the number of users.
Each user would create a small constant number of aliases. This number
will certainly be dwarfed by the number of unspend outputs that each
user keeps anyway as a result of their regular transactions. So it would
not present a problem for the UTXO. Actually, anything above the dust
threshold should not be a problem, or the system is misdesigned.  But of
course the alt-chain header hashes would only take O(1), much better.

Timo




From gmaxwell at gmail.com  Mon Feb 11 19:21:25 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 11 Feb 2013 11:21:25 -0800
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
In-Reply-To: <20130211191259.GA22257@crunch>
References: <20130208100354.GA26627@crunch> <20130208110108.GA6893@savin>
	<20130209143325.GA3998@crunch> <201302091901.49930.luke@dashjr.org>
	<20130211191259.GA22257@crunch>
Message-ID: <CAAS2fgST69zZAWPbkuLGPCY36SNOiNFVjSmp-HRVRHF+wcZqYg@mail.gmail.com>

On Mon, Feb 11, 2013 at 11:12 AM, Timo Hanke <timo.hanke at web.de> wrote:
> It's not about technical differences, but about the different use or
> purpose, which can result in different security demands. I argue that
> DNS has a lower demand in this respect than payment ids have. So DNS
> data can be in a chain with a hashrate lower than bitcoin's hashrate but
> payment ids _for_ bitcoin have to be in a chain with equal hashrate.

It seems you're not very well informed about what namecoin does? it's
a multiple namespace key-value store. And, as Peter pointed out? a
non-parasitic system can have exactly the same POW hashpower. Namecoin
chose a model which made it so that namecoin could survive even if
Bitcoin failed, but you don't have to.

I strongly recommend you listen to Peter and Luke? externalizing the
costs of your services onto people who do not care about them is not
going to produce good results for anyone. It's possible to accomplish
what you want to accomplish without taking resources from the users of
the Bitcoin currency without their consent? and you have people here
who are willing to help you figure out how.



From rick at support-intelligence.com  Mon Feb 11 19:39:03 2013
From: rick at support-intelligence.com (Rick Wesson)
Date: Mon, 11 Feb 2013 11:39:03 -0800
Subject: [Bitcoin-development] Blockchain as root CA for payment protocol
In-Reply-To: <20130208100354.GA26627@crunch>
References: <20130208100354.GA26627@crunch>
Message-ID: <CAJ1JLtsAC5mxAXCdGBh_6byuLmjxc5kBrK6HMeDWwbXCRc5UWw@mail.gmail.com>

I prefer to leverage the signing of the (.) root in the DNS tree. The
amount of effort in signing the root holds more weight than building a CA
off the bitcoin blockchain.

If you want to associate identifiers for payment addresses I suggest
putting those in DNSSEC signed records in the DNS.

For routing around x.509 CAs I suggest participating in the DANE working
group in the IETF.

-rick


On Fri, Feb 8, 2013 at 2:03 AM, Timo Hanke <timo.hanke at web.de> wrote:

> There have been proposals to use the blockchain to establish
> "identities". firstbits is a simple example. I would like to announce a
> project that extends this idea to turn the blockchain into a "root CA"
> that can sign arbitrary certificates. The purpose is to use these
> certificates in the payment protocol, where some might consider
> traditional centralized root CAs unsatisfactory.
>
> Code is here: https://github.com/bcpki
>
> Technical specification and full-length examples are found in the wiki.
> I therefore spare myself from repeating the details here, even though,
> of course, discussion about those details is welcome on this list.
>
> Excerpt from README.md follows:
>
> First, we have drafted a quite general specification for bitcoin
> certificates (protobuf messages) that allow for a variety of payment
> protocols (e.g. static as well as customer-side-generated payment
> addresses).
> This part has surely been done elsewhere as well and is orthogonal to the
> goal of this project.
> What is new here is the signatures _under_ the certificates.
>
> We have patched the bitcoind to handle certificates, submit signatures to
> the blockchain, verify certificates against the blockchain, pay directly to
> certificates (with various payment methods), revoke certificates.
> Signatures in the blockchain are stored entirely in the UTXO set (i.e. the
> unspend, unprunable outputs).
> This seems to make signature lookup and verification reasonably fast:
> it took us 10s in the mainnet test we performed (lookup is instant on the
> testnet, of course).
>
> Payment methods include: static bitcoin addresses, client-side derived
> payment addresses (pay-to-contract), pay-to-contract with multisig
> destinations (P2SH)
>
> Full-length real-world examples for all payment methods are provided in
> the tutorial pages.
> These examples have actually been carried out on testnet3.
>
> For further details and specifications see the wiki.
>
> timo hanke
>
>
> ------------------------------------------------------------------------------
> Free Next-Gen Firewall Hardware Offer
> Buy your Sophos next-gen firewall before the end March 2013
> and get the hardware for free! Learn more.
> http://p.sf.net/sfu/sophos-d2d-feb
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130211/079342ad/attachment.html>

From raphfrk at gmail.com  Tue Feb 12 13:49:56 2013
From: raphfrk at gmail.com (Raph Frank)
Date: Tue, 12 Feb 2013 13:49:56 +0000
Subject: [Bitcoin-development] Incorporating block validation rule
	modifications into the block chain
Message-ID: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>

Has this been considered?

If made sufficiently general, older clients could support any
extension of the rules.

Various "hard" parameters within the protocol are defined in main.h of
the official client.

In BIP-34, there is a suggested way to make changes, based on consensus.
https://en.bitcoin.it/wiki/BIP_0034

These could be made into a rule for changing the parameters directly.

The process for updating could be handled by adding a new field to the
coinbase transaction, in the same way the height was added in BIP-34.

Something like
- miner proposed a change by by including proposal in a block (name of
parameter and new value)
- seconded by at least 6 of the next 10 blocks (proposal dies otherwise)
- active if 750 of the last 1000 blocks voted yes, or 950 of any
successive 1000 previous blocks voted yes (with reduced thresholds on
testnet)
- dies if more than 500 of the previous 1000 voted No
- blocks which don't reference the proposal are considered to abstain

This could also be used to update NOPs.  Complex signing algorithms
could be incorporated.  However, that would require a more complex
scripting language for defining opcode functions.  The proposal would
have opcode number + script description of algorithm.  This would also
allow methods <method name> + <script code>.  Once of the NOPs could
be "call method".

The rule would require that the script is valid under the current
rules (NOPs as nops) and under the latest rules.  This prevents
needing to try all possible permutations.  However, it reduces
security.

An compromise would be to have each new opcode change could as a
version and scripts must be valid under all versions in the chain, so
far.

Once an op-code is accepted, new clients implementations would
probably create dedicated functions for performing the calculation.
Older clients would have to perform the calculations using the
scripting language.



From pete at petertodd.org  Tue Feb 12 15:11:08 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 12 Feb 2013 10:11:08 -0500
Subject: [Bitcoin-development] RFC: empty scriptPubKeys and OP_RETURN for
	marking unspendable txouts
Message-ID: <20130212151108.GA639@savin>

In my fidelity bond protocol (1) I'm proposing the use of two possible
new features:

The first is the use of OP_RETURN at the end of a scriptPubKey to
designate that the txout can be immediately pruned as it is obviously
unspendable. My use-case is the publish part of the two-step
publish-sacrifice protocol. I specifically want to use OP_RETURN rather
than a spendable scriptPubKey like <serialized tx> <pubkey> OP_CHECKSIG
so that implementors can not get lazy and fail to actually write the
code to spend the non-standard outputs created, thus polluting the UTXO
set. Simply using <serialized tx> by itself as the scriptPubKey -
spendable with an empty scriptSig - is another possiblity, but I suspect
no-one will want to spend the tx fees to clean up those txouts; note how
long it took for someone to bother doing that with p2pools share chain
hash txout, and the effort(2) seems to have been a one-time experiment.
Of course, P2Pool itself could use this mechanism too.

OP_RETURN marks the script as invalid upon execution, and since a script
is invalid if an OP_IF or OP_ELSE is not terminated with OP_ENDIF it is
guaranteed to execute. (there is no op-code that marks a script as valid
and returns immediately) OP_FALSE is another possibility too; I don't
see clear advantages for one or the other modulo OP_FALSE's more
intuitive name.

Finally OP_VERIF and OP_VERNOTIF say that "Transaction is invalid even
when occuring in an unexecuted OP_IF branch" on the wiki, although a
look at EvalScript() leaves me less than convinced this is true.  More
to the point, the mechanism should be something that is as unlikely as
possible to have different behavior in alternate implementations.
(remember that often only valid transactions are put in unittests by
lazy implementors)

OP_RETURN doesn't need any special support in the reference client yet
nor am I suggesting to make it a standard transaction type, but I would
like some feedback on if the idea itself is reasonable.


The second idea is the use of an empty scriptPubKey to create trivially
spendable outputs; provide the the scriptKey OP_TRUE or similar. For
fidelity bonds the advantage is to create a mechanism where even
non-miners have a chance at taking the funds sacrificed, and thus
increase the incentive to scan the blockchain for sacrifices and makes
it more likely for the sacrifice to be a true sacrifice of value. An
additional advantage is you avoid having to provide the txin to prove
the value of the mining fee. The advantage over just using a pubkey with
a known secret key is that the transaction size is shorter; remember
that the sacrifice transaction has to be published as serialized data in
a prior transaction.

In the future another use would be as a way of multiple parties to
collectively sign an assurance contract(3) donating to miners. This is
effectively a mining fee because miners who chose to include the
transaction can always chose to include an additional transfer from the
txout to a scriptPubKey only they can spend.

For the purpose of fidelity bonds ideally an empty scriptPubKey spent by
the scriptSig OP_TRUE would be made a standard transaction type to make
collecting the funds as easy as possible until miners start doing so
themselves. Having it a standard transaction type would also make it
easier for miners to implement the code to do this themselves; in
particular this discourages them from just allowing all non-standard
transactions. The main disadvantage I see is that it makes it easier for
people with buggy custom transaction code to accidentally lose their
funds.

Again, thoughts?


1) https://github.com/petertodd/trustbits/blob/master/fidelitybond.md
2) See the transactions associated with 1HfA1KHC7bT1hnPPCjpj9CB4koLM4Hz8Va
3) https://en.bitcoin.it/wiki/Contracts#Example_3:_Assurance_contracts

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130212/c1200d14/attachment.sig>

From gmaxwell at gmail.com  Tue Feb 12 15:49:43 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 12 Feb 2013 07:49:43 -0800
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
Message-ID: <CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>

On Tue, Feb 12, 2013 at 5:49 AM, Raph Frank <raphfrk at gmail.com> wrote:
> Has this been considered?
>
> If made sufficiently general, older clients could support any
> extension of the rules.
>
> Various "hard" parameters within the protocol are defined in main.h of
> the official client.
>
> In BIP-34, there is a suggested way to make changes, based on consensus.
> https://en.bitcoin.it/wiki/BIP_0034

You misunderstand what BIP_0034 is doing? it's not gauging consensus,
it's making sure that the change is safe to enforce. This is a subtle
but important difference.  The mechanism happens to be the same, but
we're not asking for anyone's approval there? the change is needed to
make Bitcoin as secure as people previously believed it to be, there
have been no serious alternatives tendered. As far as I can tell the
proposal has always had universal agreement from anyone who's thought
about it.  The only open question was if it was safe to deploy, and
thats what that process solves.

Bitcoin is not a democracy? it quite intentionally uses the consensus
mechanism _only_ the one thing that nodes can not autonomously and
interdependently validate (the ordering of transactions). This
protects the users of Bitcoin by making most of the system largely
nonvolatile "constitutional" rules instead of being controlled by
popular whim where 'two wolves may vote to have the one sheep for
dinner'. If it were possible to run the whole thing autonomously it
would be, but alas...

Even if you accept the premise that voting is a just way of making
decisions (it isn't; it's just often the least unjust when something
must be done), mining is not a particularly just way of voting:
'Hashpower isn't people', and currently the authority to control the
majority of the hashpower is vested in a only a half dozen people.
Moreover, the incentives to abuse hashpower are sharply curtailed by
its limited authority (all one can do with it is reorder
transactions... which is powerful but still finite) and allowing
arbitrary rule changes would vastly increase that power.

There are some more subtle issues? if the acceptance of chain B
depends on if you've seen orthogonal chains A or A' first then there
can be a carefully timed announcement of A and A' which forever
prevents global convergence (thanks to a finite speed of light an
attacker can make sure some nodes see A first, some A').  If a rule
change can be reorged out, then it's not really a rule? any actual
rule prohibits otherwise valid blocks that violate it (and without
this distinction you might as well implement the 'rule' as miner
preferences). Additionally there is the very hard software engineering
QA problem for a sufficiently complex rule language? script isn't
turing complete and look at all the issues it has had.

In summary? this sort of thing, which has come up before, is
technically interesting and fun to think about but it would make for
substantial engineering challenges and would not be obviously
compatible with the economic motivations which make Bitcoin secure nor
would it be morally compatible with the social contract embedded in
the system today.



From gavinandresen at gmail.com  Tue Feb 12 17:42:37 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 12 Feb 2013 12:42:37 -0500
Subject: [Bitcoin-development] RFC: empty scriptPubKeys and OP_RETURN
 for marking unspendable txouts
In-Reply-To: <20130212151108.GA639@savin>
References: <20130212151108.GA639@savin>
Message-ID: <CABsx9T1P=OC7amNeZivTVcQSb0+=FSKhvAB-XjDzkqq6bc07-g@mail.gmail.com>

On Tue, Feb 12, 2013 at 10:11 AM, Peter Todd <pete at petertodd.org> wrote:

> .... Again, thoughts?
>

First: I really like the fidelity bond concept, and want to see it happen.

RE: OP_RETURN : I've got a knee-jerk opposition to the OP_RETURN opcode,
because it was the cause of the nastiest bug ever Bitcoin history. So I'd
be more comfortable using either OP_FALSE or OP_INVALIDOPCODE for the
"provably unspendable" transaction.


RE: anyone-can-spend transactions:  Thinking aloud... I wonder if we might
inadvertently cause "spend storms" on the network; if suddenly there are 11
BTC sitting in an anybody-can-spend txout, I could imagine EVERYBODY on the
network trying to race each other to spend it (maybe assuming that there
are a few miners on old versions of the software who are too dumb to claim
it for themselves).


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130212/bce6eded/attachment.html>

From pete at petertodd.org  Wed Feb 13 04:12:09 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 12 Feb 2013 23:12:09 -0500
Subject: [Bitcoin-development] RFC: empty scriptPubKeys and OP_RETURN
 for marking unspendable txouts
In-Reply-To: <CABsx9T1P=OC7amNeZivTVcQSb0+=FSKhvAB-XjDzkqq6bc07-g@mail.gmail.com>
References: <20130212151108.GA639@savin>
	<CABsx9T1P=OC7amNeZivTVcQSb0+=FSKhvAB-XjDzkqq6bc07-g@mail.gmail.com>
Message-ID: <20130213041209.GA28202@savin>

On Tue, Feb 12, 2013 at 12:42:37PM -0500, Gavin Andresen wrote:
> On Tue, Feb 12, 2013 at 10:11 AM, Peter Todd <pete at petertodd.org> wrote:
> 
> > .... Again, thoughts?
> >
> 
> First: I really like the fidelity bond concept, and want to see it happen.
> 
> RE: OP_RETURN : I've got a knee-jerk opposition to the OP_RETURN opcode,
> because it was the cause of the nastiest bug ever Bitcoin history. So I'd

So what exactly was the OP_RETURN bug anyway? I know it has something to
do with not executing the scriptSig and scriptPubKey separately
(https://bitcointalk.org/index.php?topic=58579.msg691432#msg691432) but
commit 7f7f07 that you reference isn't in the tree, nor is 0.3.5 tagged.

> be more comfortable using either OP_FALSE or OP_INVALIDOPCODE for the
> "provably unspendable" transaction.

You know, come to think of it, OP_FALSE doesn't get used by standard
transactions either, and it's behavior is a little odd in how it does
push to the stack. So lets make the standard OP_INVALIDOPCODE,
specifically 0xFF, and put it at the start of the scriptPubKey.

> RE: anyone-can-spend transactions:  Thinking aloud... I wonder if we might
> inadvertently cause "spend storms" on the network; if suddenly there are 11
> BTC sitting in an anybody-can-spend txout, I could imagine EVERYBODY on the
> network trying to race each other to spend it (maybe assuming that there
> are a few miners on old versions of the software who are too dumb to claim
> it for themselves).

That's a good point. It would encourage efforts to identify as many
Bitcoin nodes as possible, particularly miners, and I don't think we
really want to incentivise that. It's not a problem unique to this
proposal - compromised private keys and SIGHASH_NONE (1) - but
fidelity bonds will give people incentive to develop the infrastructure
to exploit it.

    1) Speaking of, maybe I'm missing something, but if I have a
    transaction with one or more txin's and sign every signature with
    SIGHASH_SINGLE, what stops an attacker from adding their own txout
    at the end and diverting the mining fee to themselves?

Having said that, if we both make empty scriptPubKeys standard, and add
code so that miners will always try to spend the outputs for themselves
at the same time, we can get rid of this problem by removing the
incentive. It would also still make non-fidelity-bond uses viable as
well.

Of course, if you want to go down that path, we might as well add code
to detect and spend fidelity bonds too, and make the publish
transactions IsStandard(). Basically for every script in a confirmed
block check if any pushdata op happens to be a script that we would be
willing to add to the mempool at nBlockHeight + N. (assuming current
utxo set) If so, add it to the mempool now. N should be at least 100
blocks I think for the same reason that coinbase tx's take 100 blocks to
spend. The limit also means the size of the mempool can't get larger
than MAX_BLOCK_SIZE * N. Meanwhile IsStandard() would allow the
scriptPubKey OP_INVALIDOPCODE <valid serialized tx>

P2SH already treats data as scripts, so treating data as entire tx's
isn't that big of a leap. Also since the txout is unspendable, the
Satoshi criteria that block-reorgs should not make child tx's vanish is
still met. (though tx mutability sort of breaks this anyway)


We would however open quite a few cans of worms:

1) We just made non-final !IsStandard() for a reason.

2) What if there are transactions already in the mempool that spend the
txin's of the sacrifice? If we ignore them, we've just created another
way to double-spend unconfirmed transactions. On the other hand, if we
don't ignore them, we've just created a way to give us a chance to mine
the sacrifice for ourselves.

Personally I'm with you Gavin and think assuming miners are greedy is
best, but lets just say I probably shouldn't write an implementation
with a function named IsTxOutStealable()?

2a) What if multiple sacrifice publications exist spending the same
txin's? We should have deterministic behavior and mine the most valuable
one. If you don't do that, the attackers effective hashpower is
increased. (and thus the true sacrifice value of the bond decreases)

2b) ...but this is actually an annoying optmization problem. You could
create a whole bunch of sacrifices, each spending two or more inputs,
one small, one large. Then create one large sacrifice, that spends all
the *small* inputs. If the value of the large sacrifice is less than the
combined totals of the smaller sacrifices, you should be mining the
small ones rather than the large for maximum return.

3) With the 10KB limit on scripts, a naive IsStandard() could wind up
recursing about 200 times; we probably should say recursive publish
transactions are non-standard.

3b) ...on the other hand, if they are non-standard, implementations that
use fidelity bonds better make sure they don't accept such monsters.

We probably should just define one standard sacrifice tx form with one
txin, one txout, and a standard P2SH scriptPubKey, but miners can still
do their own thing and cause problems in determining the true value
sacrificed if they don't get the optimization problem right.

Fidelity bonds needs a lot more thought, and a testnet implementation...

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130212/373103cc/attachment.sig>

From mike at plan99.net  Wed Feb 13 10:00:35 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 13 Feb 2013 11:00:35 +0100
Subject: [Bitcoin-development] RFC: empty scriptPubKeys and OP_RETURN
 for marking unspendable txouts
In-Reply-To: <20130213041209.GA28202@savin>
References: <20130212151108.GA639@savin>
	<CABsx9T1P=OC7amNeZivTVcQSb0+=FSKhvAB-XjDzkqq6bc07-g@mail.gmail.com>
	<20130213041209.GA28202@savin>
Message-ID: <CANEZrP3qgo-VC5YHTSLOH5rGdv5PP4e2V6qECQVfvMgJXFbx-g@mail.gmail.com>

> So what exactly was the OP_RETURN bug anyway? I know it has something to
> do with not executing the scriptSig and scriptPubKey separately
> (https://bitcointalk.org/index.php?topic=58579.msg691432#msg691432) but
> commit 7f7f07 that you reference isn't in the tree, nor is 0.3.5 tagged.
>

It was fixed by Satoshi long ago, back when we used CVS I think.

The problem was how scripts were executed. They were concatenated together
and then run as a single unit. The now obsolete OP_CODESEPARATOR was put
between them to control what was hashed and what wasn't.

The obvious problem with that arrangement being that scriptSig ran first
(it has to, to push the signatures onto the stack), so nothing stopped you
setting a scriptSig to OP_RETURN and making the script evaluate to true,
always. A pretty amazing oversight given the thought and care that went
into Bitcoin generally, and its robustness since then.

The fix was to move to the current system whereby the two scripts are
executed independently but sharing a stack, and it's only the return value
of the scriptPubKey that matters.

The scripting system always struck me as a rather late addition to the
design. Satoshi admitted as much when he said that he added it after
encountering an explosion of special cases as he designed various types of
contracts. The fact that there's an obvious bug in CHECKMULTISIG is more
evidence of this part being a general rush job, along with Satoshis
willingness to disable much of its functionality later with the IsStandard
checks. Also the design of CHECKSIG is an obvious retrofit, it would have
made far more sense to decompose it, and we never found a use case for 99%
of the opcodes despite having successfully designed (redesigned?) all the
contract types he ever mentioned.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/de524999/attachment.html>

From raphfrk at gmail.com  Wed Feb 13 14:58:09 2013
From: raphfrk at gmail.com (Raph Frank)
Date: Wed, 13 Feb 2013 14:58:09 +0000
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
Message-ID: <CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>

On Tue, Feb 12, 2013 at 3:49 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> You misunderstand what BIP_0034 is doing? it's not gauging consensus,
> it's making sure that the change is safe to enforce. This is a subtle
> but important difference.

Sounds reasonable.

The change in BIP-34 doesn't cause old client to reject the main chain.

The increase to the maximum block size would be rejected by old
clients, so is different.

Adding new opcodes (as long as they act like a NOP on success) also
doesn't cause a disagreement about what is the longest chain, in the
end.  Miners might end up mining chains which are guaranteed to be
orphaned at worst.

> Bitcoin is not a democracy? it quite intentionally uses the consensus
> mechanism _only_ the one thing that nodes can not autonomously and
> interdependently validate (the ordering of transactions).

So, how is max block size to be decided then?



From gmaxwell at gmail.com  Wed Feb 13 15:42:07 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 13 Feb 2013 07:42:07 -0800
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
Message-ID: <CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>

On Wed, Feb 13, 2013 at 6:58 AM, Raph Frank <raphfrk at gmail.com> wrote:
>> Bitcoin is not a democracy? it quite intentionally uses the consensus
>> mechanism _only_ the one thing that nodes can not autonomously and
>> interdependently validate (the ordering of transactions).
> So, how is max block size to be decided then?

In one sense it already is decided? there is a protocol rule
implementing a hard maximum, and soft rules for lower targets.  If
it's to be changed it would only be by it being obvious to almost
everyone that it should _and_ must be.  Since, in the long run,
Bitcoin can't meet its security and decenteralization promises without
blockspace scarcity to drive non-trivial fees and without scaling
limits to keep it decenteralized? it's not a change that could be made
more lightly than changing the supply of coin.

I hope that should it become necessary to do so that correct path will
be obvious to everyone, otherwise there is a grave risk of undermining
the justification for the confidence in the immutability of any of the
rules of the system.



From gavinandresen at gmail.com  Wed Feb 13 21:02:16 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 13 Feb 2013 16:02:16 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
Message-ID: <CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>

On Wed, Feb 13, 2013 at 10:42 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:

>  Since, in the long run,
> Bitcoin can't meet its security and decenteralization promises without
> blockspace scarcity to drive non-trivial fees and without scaling
> limits to keep it decenteralized? it's not a change that could be made
> more lightly than changing the supply of coin.
>

I disagree with Gregory on this.  I believe that Bitcoin CAN meet its
security and decentralization promises without any hard limit on block
size.

I had a fruitful discussion about this with an economist friend this
weekend, and I'll eventually getting around to writing up why I believe
raising the block size limit will not be a problem.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/d0f63490/attachment.html>

From gmaxwell at gmail.com  Wed Feb 13 21:05:27 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 13 Feb 2013 13:05:27 -0800
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
Message-ID: <CAAS2fgSkneUYRQ20G7x6EXF4V-bSTa4qd8VWtExdDz8naE7EGQ@mail.gmail.com>

On Wed, Feb 13, 2013 at 1:02 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> On Wed, Feb 13, 2013 at 10:42 AM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
>>  Since, in the long run,
>> Bitcoin can't meet its security and decenteralization promises without
>> blockspace scarcity to drive non-trivial fees and without scaling
>> limits to keep it decenteralized? it's not a change that could be made
>> more lightly than changing the supply of coin.
> I disagree with Gregory on this.  I believe that Bitcoin CAN meet its
> security and decentralization promises without any hard limit on block size.
>
> I had a fruitful discussion about this with an economist friend this
> weekend, and I'll eventually getting around to writing up why I believe
> raising the block size limit will not be a problem.

That would be fantastic.



From petr at praus.net  Wed Feb 13 21:42:17 2013
From: petr at praus.net (Petr Praus)
Date: Wed, 13 Feb 2013 15:42:17 -0600
Subject: [Bitcoin-development] Implementing trading across chains
In-Reply-To: <CABOyFfprYJ3B+6QxKUcaj1cbQT7LrsPBYhqRhXH5iKAjtF0okQ@mail.gmail.com>
References: <CACezXZ_1TjtPtm_PXF+f63NvtR92+UtsXDizS05wXWP+YOrp_g@mail.gmail.com>
	<CACezXZ85Bzw1jAFtnGXdp49dTYSoRL5cEjFtVPMxc1KTd0Vb+w@mail.gmail.com>
	<CABOyFfprYJ3B+6QxKUcaj1cbQT7LrsPBYhqRhXH5iKAjtF0okQ@mail.gmail.com>
Message-ID: <CACezXZ_qqZkg6zN6OFVZYjV_hfkhKgFH2foAqMqwjCAAQCN9QQ@mail.gmail.com>

Jorge, thanks for bitcoinx tip, I didn't know about it and it's certainly
related. I'll have a closer look
Regarding Ripple, I tried it but as far as I can tell, it doesn't have any
contract enforcement (by technical means) built in.


On 11 February 2013 05:03, Jorge Tim?n <jtimonmv at gmail.com> wrote:

> Hi, you may be interested in a couple of related projects.
>
> Colored coins uses satoshis to represent smart property, shares, IOUs
> of another currency...Colored coins can be atomically traded for
> bitcoin. If you implement the trade across chains contract they would
> also be tradeable for another chain currencies like namecoin or
> freicoin.
>
> http://www.bitcoinx.org/
>
> Ripple is a concept by which people that trust each other on a network
> are able to pay with IOUs transitively. It has a new p2p
> implementation  that is still on development. The new implementation
> is very similar to bitcoin in certain senses but it has no mining.
> Bitcoin IOUs can be traded there.
>
> https://ripple.com/
>
> Good luck with the implementation, this is a good feature to have,
> even if it's not on the main client.
>
>
> On 2/8/13, Petr Praus <petr at praus.net> wrote:
> > Hi,
> >
> > I intend to implement trading across chains in a P2P manner (as described
> > by Mike Hearn in
> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).
> > Note, this is indended more as an alternative chain development, I don't
> > have any plans for merging it back into main client (not because I don't
> > want to, but because I think it wouldn't be accepted). Before I dive into
> > it, I thought it might be a good idea to ask here if the community has
> any
> > useful ideas or comments on this topic?
> >
> > Thanks to Gary Rowe I know about Open
> > Transactions<https://github.com/FellowTraveler/Open-Transactions>.
> > They can do "multicurrency trading" too, but it's objectives are quite
> > ambitious and I'm looking at making relatively small changes in the
> > mainline Bitcoin client rather than diving into something entirely new.
> >
> > A little background on why am I doing this, can be found
> > here<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.
> > In short it's part of research towards my Master's thesis (more
> precisely,
> > an excuse to hack on Bitcoin and sell it as research :)) which should be
> > about multicurrency (alternative chains) in Bitcoin.
> >
> > Thanks,
> > Petr
> >
> > PS: I hope I'm not too off topic here, but
> > this<https://bitcointalk.org/index.php?topic=15527.0> thread
> > indicates it should be fine to post alternative development questions on
> > this.
> >
>
>
> --
> Jorge Tim?n
>
> http://freico.in/
> http://archive.ripple-project.org/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/ff7b335a/attachment.html>

From jtimonmv at gmail.com  Wed Feb 13 21:49:50 2013
From: jtimonmv at gmail.com (=?ISO-8859-1?B?CUpvcmdlIFRpbfNu?=)
Date: Wed, 13 Feb 2013 22:49:50 +0100
Subject: [Bitcoin-development] Implementing trading across chains
In-Reply-To: <CACezXZ_qqZkg6zN6OFVZYjV_hfkhKgFH2foAqMqwjCAAQCN9QQ@mail.gmail.com>
References: <CACezXZ_1TjtPtm_PXF+f63NvtR92+UtsXDizS05wXWP+YOrp_g@mail.gmail.com>
	<CACezXZ85Bzw1jAFtnGXdp49dTYSoRL5cEjFtVPMxc1KTd0Vb+w@mail.gmail.com>
	<CABOyFfprYJ3B+6QxKUcaj1cbQT7LrsPBYhqRhXH5iKAjtF0okQ@mail.gmail.com>
	<CACezXZ_qqZkg6zN6OFVZYjV_hfkhKgFH2foAqMqwjCAAQCN9QQ@mail.gmail.com>
Message-ID: <CABOyFfoRq3Kqx8baw4zGkYEFRLabMdVWDRdvw4sy5RrH=TjLKQ@mail.gmail.com>

Well, if it's even possible to trade across "chains" with Ripple (and
I don't know of any reason shouldn't be), you will have to wait to the
release of the full node (validator) code, for now only a javascript
web client is open sourced. But it seems they at least have plans for
contracts judging from the wiki:

https://ripple.com/wiki/Contracts


On 2/13/13, Petr Praus <petr at praus.net> wrote:
> Jorge, thanks for bitcoinx tip, I didn't know about it and it's certainly
> related. I'll have a closer look
> Regarding Ripple, I tried it but as far as I can tell, it doesn't have any
> contract enforcement (by technical means) built in.
>
>
> On 11 February 2013 05:03, Jorge Tim?n <jtimonmv at gmail.com> wrote:
>
>> Hi, you may be interested in a couple of related projects.
>>
>> Colored coins uses satoshis to represent smart property, shares, IOUs
>> of another currency...Colored coins can be atomically traded for
>> bitcoin. If you implement the trade across chains contract they would
>> also be tradeable for another chain currencies like namecoin or
>> freicoin.
>>
>> http://www.bitcoinx.org/
>>
>> Ripple is a concept by which people that trust each other on a network
>> are able to pay with IOUs transitively. It has a new p2p
>> implementation  that is still on development. The new implementation
>> is very similar to bitcoin in certain senses but it has no mining.
>> Bitcoin IOUs can be traded there.
>>
>> https://ripple.com/
>>
>> Good luck with the implementation, this is a good feature to have,
>> even if it's not on the main client.
>>
>>
>> On 2/8/13, Petr Praus <petr at praus.net> wrote:
>> > Hi,
>> >
>> > I intend to implement trading across chains in a P2P manner (as
>> > described
>> > by Mike Hearn in
>> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).
>> > Note, this is indended more as an alternative chain development, I
>> > don't
>> > have any plans for merging it back into main client (not because I
>> > don't
>> > want to, but because I think it wouldn't be accepted). Before I dive
>> > into
>> > it, I thought it might be a good idea to ask here if the community has
>> any
>> > useful ideas or comments on this topic?
>> >
>> > Thanks to Gary Rowe I know about Open
>> > Transactions<https://github.com/FellowTraveler/Open-Transactions>.
>> > They can do "multicurrency trading" too, but it's objectives are quite
>> > ambitious and I'm looking at making relatively small changes in the
>> > mainline Bitcoin client rather than diving into something entirely new.
>> >
>> > A little background on why am I doing this, can be found
>> > here<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.
>> > In short it's part of research towards my Master's thesis (more
>> precisely,
>> > an excuse to hack on Bitcoin and sell it as research :)) which should
>> > be
>> > about multicurrency (alternative chains) in Bitcoin.
>> >
>> > Thanks,
>> > Petr
>> >
>> > PS: I hope I'm not too off topic here, but
>> > this<https://bitcointalk.org/index.php?topic=15527.0> thread
>> > indicates it should be fine to post alternative development questions
>> > on
>> > this.
>> >
>>
>>
>> --
>> Jorge Tim?n
>>
>> http://freico.in/
>> http://archive.ripple-project.org/
>>
>


-- 
Jorge Tim?n

http://freico.in/
http://archive.ripple-project.org/



From gmaxwell at gmail.com  Thu Feb 14 00:28:41 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 13 Feb 2013 16:28:41 -0800
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
	<CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
Message-ID: <CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>

On Wed, Feb 13, 2013 at 3:10 PM, Stephen Pair <stephen at bitpay.com> wrote:
> If you've already validated the majority of transactions in a block, isn't validating the block not all that compute intensive?  Thus, it's really not blocks that should be used to impose any sort of scarcity, but rather it's the costs associated with the validation and propagation of the transactions themselves...which is the way it should be.

The cost to whom?  This is important because the cost of validating
blocks is borne by all the participants in Bitcoin? or at least all
the participants who haven't given up on the decenteralized trustless
stuff and are simply trusting someone else.   Even a small cost
becomes large when hundreds of thousands.

And perhaps you don't lament people delegating their trust to large
entities? but keep in mind: Bitcoin was created for the express
purpose of creating a money system which didn't require trust because
it was based on cryptographic proof? mathematical law? instead of
politics and human law.  Take that away and you have a really poorly
understood inefficient system operated by entities which are less
trustworthy and rightfully entitled to authority than the ones
operating the established major currencies.

> When I think about issues like this, I like to remind myself that the mesh network isn't really an essential part of Bitcoin.

Thats absolutely true? but I don't know that it's relevant in this case.

> Nodes can at some point start to charge fees to collect and distribute transactions and blocks.

They can? but doing so would radically undermine Bitcoin.

A refresher:

If you combine digital signatures with simple transaction rules you
can have a purely autonomous monetary system based entirely on math.
It would be perfect, anonymous, scalable ...  except for the problem
of double spending.  To solve double spending the participants must
agree on which of a set of duplicated payments is one the
authoritative one. Coming to this agreement is fundamentally hard just
at the basics of physics? a result of relativity is that observers
will perceive events in different orders depending on the observer's
and the events relative locations. If no observer is privileged (a
decenteralized system) you have to have a way of reaching a consensus.

This kind of efficient consensus we need? which which participants can
join or enter at any time, which doesn't require exponential
communication, and which is robust against sock-puppet participants?
was long believed to be practically impossible.  Bitcoin solved the
problem by using hashcash to vote? because real resources were forever
expended in the process the sock-puppet problem is solved.  But the
vote only works if everyone can see the results of it: We assume that
the majority of hashpower isn't a dishonest party, and that honest
nodes can't be prevented from hearing the honest history. Nodes choose
then rules-valid history that has the most work (votes) expended on
it... but they can only choose among what they know of.  As Satoshi,
wrote: "[Bitcoin] takes advantage of the nature of information being
easy to spread but hard to stifle".

The requirement for everyone to hear the history doesn't get talked
about much? at least with reasonably sized blocks and today's
technical and common political climates the assumption that
information is easy to spread but hard to stifle is a very sound one.
It's a good thing, because this assumption is even more important than
the hash-power honesty assumption (a malicious party with a simple
majority of hashpower is much weaker than one who can partition the
network).  ... but that all goes out the window if communicating
blocks is costly enough that the only way to sustain it is to
jealously guard and charge for access/forwarding.

The consequence of such a change is that the Bitcoin consensus
algorithm would be handicapped. How long must you wait before you know
that the history you have won't get replaced by a more authoritative
one?  Today an hour or two seems relatively solid.  In a world with
non-uniform block forwarding perhaps it takes days? if ever? before
any participant is confident that there isn't a better history
lurking.

All doubly so if the bookkeeping required for this payment ends up
necessitating additional transactions and adds to the load.

[This is also the flaw in the 'Red Balloons' paper, making
transactions a dozen times longer just to attach credit for forwarding
doesn't seem wise compared to keep transactions so cheap to transmit
that even a small number of altruists make the equilibrium state be
liberally-forwarding]

> They would also charge for the propagation of blocks based on the work required to validate them.

Large miners would obviously locate and connect to each other. Even
enormous blocks are no problems for big industrial players.

Don't want to pay the cost to get their big blocks from them?  Your
loss:  If you don't take their blocks and they constitute the longest
history, you'll be believing the wrong history until such a time as
you wise up and pay the piper.  Your transactions will be reversed and
you'll lose money.

You can hypothesize some cartel behavior external to the rules of the
system? where by some consensus mechanism (????) some super large mass
of participants agree to reject blocks according 'extrajudicial
rules', some rule existing outside of Bitcoin itself? but there must
be a consensus because rejecting blocks by yourself only gets you
ripped off.

I don't see how this works? it basically embeds another hard consensus
problem (what is the criteria for blocks to be valid?) inside our
solution to a hard consensus problem (which are the best valid
blocks?),  but doesn't benefit from the same incentive structure?
locally-greedy miners obviously want to produce the largest blocks
possible? and in hashpower consensus non-miners don't have a voice.
That might be acceptable for ordering, but now you're deciding on the
rules of the system which all non-trusting participants must validate.

You could instead solve that consensus problem with politically
stipulated regulation or industry cartels, or good old-fashion kneecap
busting or whathave you. But then Bitcoin loses the transparency and
determinism that make it worthwhile.

I sure hope to hear something better than that.

This is basically the gap:   Right now I could afford hardware that
could process multiple gigabyte blocks? maybe it only costs as much as
a small house which is not an insane cost for a large business. But
the cost would be decidedly non-negligible and it would be rational
for me to let someone else take it. Applied to everyone, you end up
with a small number of the most vested parties doing all the
validation, and so they have full ability to manipulate like today's
central banks.

For a great many to perform validation? keeping the system honest and
decentralized as it was envisioned? without worrying about the cost
requires that the cost be almost unnoticeable. A tiny fraction of what
some industrial player? who profit from consolidation and
manipulation? could easily handle.  I'm skeptical about the system
internally self-regulating the size because of what gets called
"evaporative cooling" in social sciences? the cost goes up, some
people cross their "hey, I'm better off if I externalize the cost of
keeping Bitcoin secure by not participating" boundary and lose their
voice.

There is probably some equilibrium where Bitcoin is compromised
frequently enough that more validators spin up (and ignore past rule
violations which can't be undone without economic Armageddon), and eat
the costs even though there is an insane amount of freeloading going
on.  The trustworthiness of today's monetary systems suggests to me
that if there is an equilibrium point here it isn't a very trustworthy
one.  There is an even stronger equilibrium state available too: don't
use Bitcoin at at all.  If you want a system which is dominated by
political whim and expedience and large industrial players and is, as
a result, only somewhat trustworthy you can just use government issued
currencies? they're well established and have a lot less overhead than
this decentralized stuff.

(And generally? Security makes for a terrible market, security is
naturally a lemon market. The need is only clear in hindsight. In our
case it would be one with an enormous freeloading problem)

> P.S. such a fee structure would address the spam issue with economics rather than rules about spammy transactions

Our current anti-spam one is primarily an economic one? transactions
prioritized based on fee per KB in scarce blocks or priority (another
scarce commodity), the only really non-very-economic part is the
very-small-output heuristic.  I would argue that our economic
anti-spam mechanisms are currently failing at their job:  Various
parties are engaging in transaction patterns with near pessimal
efficiency? using a dozen (? sometimes thousands) of transactions
where one or two would be adequate. This isn't limited to just one or
two sites? many parties are using inefficient transaction patterns?
creating externalized costs on all future Bitcoin users?, simply
because there is hardly any incentive not to.

Though much discussion among technical people, no one has come up with
any reparametrizations that seem likely to achieve the desired
incentive alignment in the near term.  Of all the elements of the
anti-spam policy, it seems to me that the least economic? the minimum
output size? is actually the most effective (most spam suppression
relative to efficient usage suppression), especially as we move to
focusing on the UTXO set size. (The minimum output value requirement
discourages the creation of UTXOs which will never be economically
rational to redeem).



From stephen at bitpay.com  Wed Feb 13 23:10:21 2013
From: stephen at bitpay.com (Stephen Pair)
Date: Wed, 13 Feb 2013 18:10:21 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
Message-ID: <CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>

On Wed, Feb 13, 2013 at 4:02 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Wed, Feb 13, 2013 at 10:42 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>
>>  Since, in the long run,
>> Bitcoin can't meet its security and decenteralization promises without
>> blockspace scarcity to drive non-trivial fees and without scaling
>> limits to keep it decenteralized? it's not a change that could be made
>> more lightly than changing the supply of coin.
>>
>
> I disagree with Gregory on this.  I believe that Bitcoin CAN meet its
> security and decentralization promises without any hard limit on block
> size.
>
> I had a fruitful discussion about this with an economist friend this
> weekend, and I'll eventually getting around to writing up why I believe
> raising the block size limit will not be a problem.


If you've already validated the majority of transactions in a block, isn't
validating the block not all that compute intensive?  Thus, it's really not
blocks that should be used to impose any sort of scarcity, but rather it's
the costs associated with the validation and propagation of the
transactions themselves...which is the way it should be.

When I think about issues like this, I like to remind myself that the mesh
network isn't really an essential part of Bitcoin.  It is a way to
disseminate transactions and blocks, but it's by no means the only possible
way and could certainly be improved in various ways.  Nodes can at some
point start to charge fees to collect and distribute transactions and
blocks.  Collectives of such nodes could pool together fees to ensure
connected nodes can propagate and hear about transactions and blocks.
 These nodes would charge based on the bandwidth and the work required to
validate transactions.  They would also charge for the propagation of
blocks based on the work required to validate them.  Miners would of course
have a lot of incentive to pay for such services since they will want to
get access to as many fee bearing transactions as possible (and filter out
the transactions they don't want to include in blocks).  They will also
want the blocks to ensure they're always building on the latest valid
block.  That in turn would give these relay nodes a window into the fees
needed to ensure fast inclusion into the block chain (something that
wallets could use to automatically set fees on transactions).

Note, I think the bitcoin protocol might actually be ideally suited for
this type of thing...nodes would broadcast INV messages all day long, but
as soon as one of your peers wants the actual transaction or block, well,
then you have to pay up.  Two relay nodes sending transactions between each
other would pay each other when they have to download the transaction
body...if they trade roughly equal amounts of transactions, they wouldn't
end up owing each other anything...for a given transaction they would pull
the data exactly, but would then turn around and provide that transaction
to many connected peers, earning a fee for each delivery.

P.S. such a fee structure would address the spam issue with economics
rather than rules about spammy transactions

P.P.S. micropayment channels could be used as the payment method for nodes
that validate and relay transactions...this would actually be a very good
first use of that technology (people have talked about micropayment
channels for renting bandwidth...why not use them to pay for the bandwidth
and CPU needed to validate and relay transactions)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/a4103e2a/attachment.html>

From gmaxwell at gmail.com  Thu Feb 14 01:02:39 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 13 Feb 2013 17:02:39 -0800
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
Message-ID: <CAAS2fgQGb1Tb=cma8_20_gWUQ+60v9v=UTt52RMGnztOx5-E3w@mail.gmail.com>

On Wed, Feb 13, 2013 at 7:42 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> I hope that should it become necessary to do so that correct path will
> be obvious to everyone, otherwise there is a grave risk of undermining
> the justification for the confidence in the immutability of any of the
> rules of the system.

With all I wrote on the gloom side? I thought I should elaborate how I
think that would work, assuming that my gloom isn't convincingly
disproven.

It's the year 2043? the Y2038 problem is behind us and everyone is
beginning to forget how terrible it turned out to be?  By some amazing
chance Bitcoin still exists and is widely used.  Off-chain system like
fidelity bonded banks are vibrant and widely used providing scalable
instant and completely private transactions to millions of people.

Someone posts to the infrequently used IETF Bitcoin working group with
a new draft? It points out that the transaction load is high enough
that even with a 100x increase in block size completion for fees would
hardly be impacted and that? because computers are 2^20 times faster
per unit cost than they were in 2013? and networks had made similar
gains, so even a common wristwatch (the personal computer embedded in
everyone's wrist at birth) could easily keep up with 100 megabyte
blocks.... so the size should be increased as of block 2,047,500.

The only objections are filed by some bearded hippy at the museum of
internet trolling (their authentic reconstruction of Diablo-D3's
desktop exhibit couldn't keep up), and by some dictatorship who again
insists that their communist PeoplesCoin should be used instead? the
usual suspects.  And so, after a couple years of upgrades, it is so.

Or perhaps more likely? it would get revised along side a hardforking
cryptosystem upgrade (e.g. replacing sha256 in the hash trees with
SHA-4-512), thus amortizing out all the migration costs...

The trickiness and risk of changing it? of economic problems, of the
risk of undermining trust in the immutability of the system's rules?
only exists if there is genuine, considered, and honest controversy
about the parameters.  At the moment any increase would be sure to be
controversial: common hardware and networks would not obviously keep
up with our current maximum size, and our current transaction load
doesn't produce a usable fees market.  This cannot remain true
forever.



From stephen at bitpay.com  Thu Feb 14 02:44:11 2013
From: stephen at bitpay.com (Stephen Pair)
Date: Wed, 13 Feb 2013 21:44:11 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
	<CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
	<CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>
Message-ID: <CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>

On Wed, Feb 13, 2013 at 7:28 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> <bunch of stuff>
>

I understand your arguments, but don't agree with many of your conclusions.

The requirement for everyone to hear the history doesn't get talked
> about much


One of the beauties of bitcoin is that the miners have a very strong
incentive to distribute as widely and as quickly as possible the blocks
they find...they also have a very strong incentive to hear about the blocks
that others find.  There will not be an issue with blocks being "jealously
guarded"...what miners will want is a good feed of transactions that they
want to mine.  They will be willing to pay for those feeds (either by
sharing the proceeds with highly connected "relay" nodes or by operating
highly connected nodes themselves).  Because miners will only want to pay
to get a feed of profitable transactions, they will not pay to receive
transactions whose miner fee does not cover the "relay" fee (by which I
mean the fee or cost associated with the bandwidth and validation that a
transaction requires) with some amount of profit.  This means that the
relay node will not fetch and propagate those transactions whose fee is too
small (unless there was some other fee structure outside the miners fee).

These are relatively easy businesses to operate...which means there will be
a lot of them and they'll compete on fees (with wallets automatically
discovering the cheapest of the services).  If the businesses of relaying
and mining ever became too centralized, other businesses with a vested
interest in the success of bitcoin would take the necessary steps to ensure
there remained adequate decentralization.

It's important to remember that the centralization that currently exists in
the fiat currency world benefits one set of businesses to the detriment of
many others.  Having a functioning and trustworthy payment system benefits
far more people and businesses than a centralized system would.

It is good to be wary of these potential issues, but I don't see how the
economics are likely to yield the outcome you fear.  And, really, there's
not a lot that can be done to prevent economics from dictating the ultimate
outcome.  In fact, what I write above is not so much about what I think
*should* be built, it's more about what I *predict* will be built.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/d63cb57c/attachment.html>

From gmaxwell at gmail.com  Thu Feb 14 03:38:31 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 13 Feb 2013 19:38:31 -0800
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
	<CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
	<CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>
	<CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>
Message-ID: <CAAS2fgTNQZkUo3k4Uke7sLrZd1=o2TO1BLtdA6_Q7hUegHRQHQ@mail.gmail.com>

On Wed, Feb 13, 2013 at 6:44 PM, Stephen Pair <stephen at bitpay.com> wrote:
> One of the beauties of bitcoin is that the miners have a very strong incentive to distribute as widely and as quickly as possible the blocks they find...they also have a very strong incentive to hear about the blocks that others find.  There will not be an issue with blocks being "jealously guarded"

Then perhaps I totally misunderstood what you were suggesting.  I
believed you were saying blocksize would be controlled by people
having to pay to receive and pay to have blocks forwarded.

>(by which I mean the fee or cost associated with the bandwidth and validation that a transaction requires) with some amount of profit.  This means that the relay node will not fetch and propagate those transactions whose fee is too small (unless there was some other fee structure outside the miners fee).

The only fee-or-cost they're worrying about is their own marginal
costs.  This says nothing about the externalized cost of the hundreds
of thousands of other nodes which also must validate the block they
produce, many of which are not miners? if we are well distributed? and
thus don't have any way to monetize fees.  And even if they are all
miners for some reason,  if these fees are paying the ever growing
validation/storage costs what expenditure is left for the proof of
work that makes Bitcoin resistant to reversal?

If the cost is soaked up by validation/forwarding then the capacity to
run a validating node ends up being the barrier to entry and
difficulty would be very low... which sounds fine until you realize
that an attacker doesn't have validation costs, and that selfish
("optimally rational") miners could just eschew validation (who cares
if you lose some blocks to invalidity if you're producing them so much
cheaper than the honest players?).

> It is good to be wary of these potential issues, but I don't see how the economics are likely to yield the outcome you fear.  And, really, there's not a lot that can be done to prevent economics from dictating the ultimate outcome.  In fact, what I write above is not so much about what I think *should* be built, it's more about what I *predict* will be built.

What I want is for economics to dictate a positive outcome. They can
do this how the system is currently constructed where the economics of
using the system are clearly aligned with securing it.



From stephen at bitpay.com  Thu Feb 14 05:36:09 2013
From: stephen at bitpay.com (Stephen Pair)
Date: Thu, 14 Feb 2013 00:36:09 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAAS2fgTNQZkUo3k4Uke7sLrZd1=o2TO1BLtdA6_Q7hUegHRQHQ@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
	<CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
	<CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>
	<CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>
	<CAAS2fgTNQZkUo3k4Uke7sLrZd1=o2TO1BLtdA6_Q7hUegHRQHQ@mail.gmail.com>
Message-ID: <CADb9v0JAhJG_KBcuDC2Vr-01wgaQzH5+gXD+LCKr+QqSaKdjPg@mail.gmail.com>

On Wed, Feb 13, 2013 at 10:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:

> On Wed, Feb 13, 2013 at 6:44 PM, Stephen Pair <stephen at bitpay.com> wrote:
>  >(by which I mean the fee or cost associated with the bandwidth and
> validation that a transaction requires) with some amount of profit.  This
> means that the relay node will not fetch and propagate those transactions
> whose fee is too small (unless there was some other fee structure outside
> the miners fee).
>
> The only fee-or-cost they're worrying about is their own marginal
> costs.  This says nothing about the externalized cost of the hundreds
> of thousands of other nodes which also must validate the block they
> produce, many of which are not miners? if we are well distributed? and
> thus don't have any way to monetize fees.


But this is exactly the point I'm making...the thousands of other nodes do
have a way to monetize the work they do in relaying and validating
transactions.  Miners will pay them for the prompt delivery of profitable
transactions.  So, in effect, the block reward and transactions fees will
be paying not only for the mining work, but also the validation and
relaying work.  Such nodes would get paid in micro transactions from the
miners for that service.  This would be one way that full nodes could
operate profitably (there may be many other indirect ways).  I think
decentralization is pretty much guaranteed because anyone with profitable
transactions would only deliver them to miners or other peers that are
willing to pay for them.  This is in effect a rebate of a portion of the
transaction fee to the network for delivering the transaction to the miner.
 Wallet software might cut out the middle men and submit directly to
miners...other nodes with access to a large amounts of transactions and
good infrastructure might be able to reduce the infrastructure a miner has
to maintain and deliver a larger volume of fee bearing transactions.  And
everyone would have a very good sense of the market price for transaction
fees for a given level of service (speed of block inclusion).

The other side of it is that wallets will need to receive valid, wallet
relevant transactions.  They may also need to connect with multiple nodes
for independent verification of the validity of their transactions.  But I
think that cost would be more than covered with fees they include in any
transactions they originate (but if they rarely originate fee bearing
transactions, they might need to pay something to keep receiving an
incoming transaction feed...it could be as simple as an artificial
transaction they pay to themselves, but that includes a fee).

A while back everyone was worried that a tragedy of the commons situation
would develop whereby all transactions that carried any fee at all would
get included by miners, thus destroying the mining business as the block
reward diminished...but I think the cost involved in relaying and
validating transactions ensures that situation won't develop...mining nodes
will have to only connect to relaying and validating nodes such that they
can filter down the volume to something that's profitable for them...and
relaying and validating nodes will ignore transactions with fees that are
too low to be profitable.

It will be a few years before we see the kinds of volumes that will force
this infrastructure to evolve...I don't think there is an issue with
lifting or even eliminating the block size limit...there may be a point at
which the volume is sufficient enough that full nodes start dropping
offline...and the nodes that do remain will have to increasingly find ways
to cover their costs...which will be a forcing function for solutions
similar to these.  There is no doubt that Bitcoin will be a lot more
valuable if it can handle very large volumes of transactions.

Also, Mike Hearn has done some analysis that suggests that even at Visa
scales, the hardware requirements to do full validation and relay may not
all that substantial (enabling lots of small, but profitable, node
operators and low transactions fees...the key to profitability would be
access to a sufficient number of original transactions bearing fees).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/185feabb/attachment.html>

From pete at petertodd.org  Thu Feb 14 06:07:44 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 14 Feb 2013 01:07:44 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
	<CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
	<CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>
	<CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>
Message-ID: <20130214060744.GA15157@savin>

On Wed, Feb 13, 2013 at 09:44:11PM -0500, Stephen Pair wrote:
> One of the beauties of bitcoin is that the miners have a very strong
> incentive to distribute as widely and as quickly as possible the blocks
> they find...they also have a very strong incentive to hear about the blocks
> that others find.  There will not be an issue with blocks being "jealously

The idea that miners have a strong incentive to distribute blocks as
widely and as quickly as possible is a serious misconception. The
optimal situation for a miner is if they can guarantee their blocks
would reach just over 50% of the overall hashing power, but no more. The
reason is orphans.

Here's an example that makes this clear: suppose Alice, Bob, Charlie and
David are the only Bitcoin miners, and each of them has exactly the same
amount of hashing power. We will also assume that every block they mine
is exactly the same size, 1MiB. However, Alice and Bob both have pretty
fast internet connections, 2MiB/s and 1MiB/s respectively. Charlie isn't
so lucky, he's on an average internet connection for the US,
0.25MiB/second. Finally David lives in country with a failing currency,
and his local government is trying to ban Bitcoin, so he has to mine
behind Tor and can only reliably transfer 50KiB/second.

Now the transactions themselves aren't a problem, 1MiB/10minutes is just
1.8KiB/second average. However, what happens when someone finds a block?

So Alice finds one, and with her 1MiB/second connection she
simultaneously transfers her new found block to her three peers. She has
enough bandwidth that she can do all three at once, so Bob has it in 1
second, Charlie 4 seconds, and finally David in 20 seconds. The thing
is, David has effectively spent that 20 seconds doing nothing. Even if
he found a new block in that time he wouldn't be able to upload it to
his other peers fast enough to beat Alices block. In addition, there was
also a probabalistic time window *before* Alice found her block, where
even if David found a block, he couldn't get it to the majority of
hashing power fast enough to matter. Basically we can say David spent
about 30 seconds doing nothing, and thus his effective hash power is now
down by 5%


However, it gets worse. Lets say a rolling average mechanism to
determine maximum block sizes has been implemented, and since demand is
high enough that every block is at the maximum, the rolling average lets
the blocks get bigger. Lets say we're now at 10MiB blocks. Average
transaction volume is now 18KiB/second, so David just has 32KiB/second
left, and a 1MiB block takes 5.3 minutes to download. Including the time
window when David finds a new block but can't upload it he's down to
doing useful mining a bit over 3 minutes/block on average.

Alice on the other hand now has 15% less competition, so she's actually
clearly benefited from the fact that her blocks can't propegate quickly
to 100% of the installed hashing power.


Now I know you are going to complain that this is BS because obviously
we don't need to actually transmit the full block; everyone already has
the transactions so you just need to transfer the tx hashes, roughly a
10x reduction in bandwidth. But it doesn't change the fundemental
principle: instead of David being pushed off-line at 10MiB blocks, he'll
be pushed off-line at 100MiB blocks. Either way, the incentives are to
create blocks so large that they only reliably propegate to a bit over
50% of the hashing power, *not* 100%

Of course, who's to say Alice and Bob are mining blocks full of
transactions known to the network anyway? Right now the block reward is
still high, and tx fees low. If there isn't actually 10MiB/second of
transactions on the network it still makes sense for them to pad their
blocks to that size anyway to force David out of the mining business.
They would gain from the reduced hashing power, and get the tx fees he
would have collected. Finally since there are now just three miners, for
Alice and Bob whether or not their blocks ever get to Charlie is now
totally irrelevant; they have every reason to make their blocks even
bigger.

Would this happen in the real world? With pools chances are people would
quit mining solo or via P2Pool and switch to central pools. Then as the
block sizes get large enough they would quit pools with higher stale
rates in preference for pools with lower ones, and eventually the pools
with lower stale rates would probably wind up clustering geographically
so that the cost of the high-bandwidth internet connections between them
would be cheaper. Already miners are very sensitive to orphan rates, and
will switch pools because of small differences in that rate.

Ultimately the reality is miners have very, very perverse incentives
when it comes to block size. If you assume malice, these perverse
incentives lead to nasty outcomes, and even if you don't assume malice,
for pool operators the natural effects of the cycle of slightly reduced
profitability leading to less ability invest in and maintain fast
network connections, leading to more orphans, less miners, and finally
further reduced profitability due to higher overhead will inevitably
lead to centralization of mining capacity.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/ca84c238/attachment.sig>

From pete at petertodd.org  Thu Feb 14 06:39:01 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 14 Feb 2013 01:39:01 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CAAS2fgQGb1Tb=cma8_20_gWUQ+60v9v=UTt52RMGnztOx5-E3w@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CAAS2fgQGb1Tb=cma8_20_gWUQ+60v9v=UTt52RMGnztOx5-E3w@mail.gmail.com>
Message-ID: <20130214063901.GB15157@savin>

On Wed, Feb 13, 2013 at 05:02:39PM -0800, Gregory Maxwell wrote:
> It's the year 2043? the Y2038 problem is behind us and everyone is
> beginning to forget how terrible it turned out to be?  By some amazing
> chance Bitcoin still exists and is widely used.  Off-chain system like
> fidelity bonded banks are vibrant and widely used providing scalable
> instant and completely private transactions to millions of people.

Speaking of fidelity bonded banks I think it needs to be made clear that
really trustworthy bonded banks require the maximum block size to be
kept limited. The problem is that even if you don't create any
transactions on the chain yourself, you still need to be able to keep
watch the chain to keep track of what the bank is doing. For instance if
you are trying to decide if you can trust the bank with a 1BTC deposit,
and they've purchased a 1000BTC fidelity bond, you still need to be able
to determine if all the unspent transaction outputs in the blockchain
that the bank could spend, in addition to all the unspen transactions in
the mempool, are less than the value of their fidelity bond. With 1MiB
blocks that will be practical on smartphones with wireless internet
connectivity without having to trust anyone else. With 1GiB blocks that
just won't be true and you'll be forced to trust the relatively few
nodes out there with the hardware to deal with the blockchain. You'll
pay for it too.

Potentially the various UTXO proposals will help, but they will need to
be quite sophisticated; we'll need sums of all txout values by
scriptPubKey and a fraud notice system for instance. All of this stuff
is at best many months away from even beginning to be deployed on the
network, and probably years away from getting to the point where it is
truely trustworthy. Maybe it'll never become trustworthy, either because
miners just don't bother, the code doesn't get written, or a flaw in the
whole idea is found. We're just not going to know until these
technologies are implemented and tested, and without them, large blocks
force us into trusting miners blindly and make many valuable
applications impossible.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/7245af95/attachment.sig>

From stephen at bitpay.com  Thu Feb 14 12:59:04 2013
From: stephen at bitpay.com (Stephen Pair)
Date: Thu, 14 Feb 2013 07:59:04 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <20130214060744.GA15157@savin>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
	<CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
	<CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>
	<CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>
	<20130214060744.GA15157@savin>
Message-ID: <CADb9v0L53kZfiBYtzCLtCsBVdeZz5CHtwBsM1CBDcCh9v-T=HA@mail.gmail.com>

On Thu, Feb 14, 2013 at 1:07 AM, Peter Todd <pete at petertodd.org> wrote:

> On Wed, Feb 13, 2013 at 09:44:11PM -0500, Stephen Pair wrote:
> > One of the beauties of bitcoin is that the miners have a very strong
> > incentive to distribute as widely and as quickly as possible the blocks
> > they find...they also have a very strong incentive to hear about the
> blocks
> > that others find.  There will not be an issue with blocks being
> "jealously
>
> The idea that miners have a strong incentive to distribute blocks as
> widely and as quickly as possible is a serious misconception. The
> optimal situation for a miner is if they can guarantee their blocks
> would reach just over 50% of the overall hashing power, but no more. The
> reason is orphans.
>

Perhaps, but a miner trying to target just over 50% of the network will run
the very real risk that they'll only reach 49%.

What about the case for centralization if the block size remains capped?  I
see a far greater risk of centralization in that scenario than if the cap
were to be removed.  The reason is very simple, bitcoin would ultimately
become useful only for very high value, settlement transactions.  Only the
mega corporations and banks would be using it directly, everyone else would
be doing daily transacting in centrally issued currencies of one form or
another.  As the banks and mega corps learned about the utility of bitcoin
and began to use it en masse, they would start to take the whole network
off the public internet and put it on a higher speed and more reliable
backbone.  Those corporations would establish mining agreements among
themselves to ensure none of the participants could take over the system
and compromise it, while at the same time keeping the operational costs to
a minimum.  Bitcoin is now a great alternative to the wire transfer system,
but has no value to the average person wanted to have cheap and private
transactions over the Internet.  Maybe Litecoin starts to fill that niche.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/8701efdd/attachment.html>

From petr at praus.net  Thu Feb 14 21:02:25 2013
From: petr at praus.net (Petr Praus)
Date: Thu, 14 Feb 2013 15:02:25 -0600
Subject: [Bitcoin-development] Implementing trading across chains
In-Reply-To: <CABOyFfoRq3Kqx8baw4zGkYEFRLabMdVWDRdvw4sy5RrH=TjLKQ@mail.gmail.com>
References: <CACezXZ_1TjtPtm_PXF+f63NvtR92+UtsXDizS05wXWP+YOrp_g@mail.gmail.com>
	<CACezXZ85Bzw1jAFtnGXdp49dTYSoRL5cEjFtVPMxc1KTd0Vb+w@mail.gmail.com>
	<CABOyFfprYJ3B+6QxKUcaj1cbQT7LrsPBYhqRhXH5iKAjtF0okQ@mail.gmail.com>
	<CACezXZ_qqZkg6zN6OFVZYjV_hfkhKgFH2foAqMqwjCAAQCN9QQ@mail.gmail.com>
	<CABOyFfoRq3Kqx8baw4zGkYEFRLabMdVWDRdvw4sy5RrH=TjLKQ@mail.gmail.com>
Message-ID: <CACezXZ_DbSsBwChB-uoSu+VcWnBJOuvzV3eim5aKTYCZos+_RQ@mail.gmail.com>

Ah, I missed this, thanks.


On 13 February 2013 15:49, Jorge Tim?n <jtimonmv at gmail.com> wrote:

> Well, if it's even possible to trade across "chains" with Ripple (and
> I don't know of any reason shouldn't be), you will have to wait to the
> release of the full node (validator) code, for now only a javascript
> web client is open sourced. But it seems they at least have plans for
> contracts judging from the wiki:
>
> https://ripple.com/wiki/Contracts
>
>
> On 2/13/13, Petr Praus <petr at praus.net> wrote:
> > Jorge, thanks for bitcoinx tip, I didn't know about it and it's certainly
> > related. I'll have a closer look
> > Regarding Ripple, I tried it but as far as I can tell, it doesn't have
> any
> > contract enforcement (by technical means) built in.
> >
> >
> > On 11 February 2013 05:03, Jorge Tim?n <jtimonmv at gmail.com> wrote:
> >
> >> Hi, you may be interested in a couple of related projects.
> >>
> >> Colored coins uses satoshis to represent smart property, shares, IOUs
> >> of another currency...Colored coins can be atomically traded for
> >> bitcoin. If you implement the trade across chains contract they would
> >> also be tradeable for another chain currencies like namecoin or
> >> freicoin.
> >>
> >> http://www.bitcoinx.org/
> >>
> >> Ripple is a concept by which people that trust each other on a network
> >> are able to pay with IOUs transitively. It has a new p2p
> >> implementation  that is still on development. The new implementation
> >> is very similar to bitcoin in certain senses but it has no mining.
> >> Bitcoin IOUs can be traded there.
> >>
> >> https://ripple.com/
> >>
> >> Good luck with the implementation, this is a good feature to have,
> >> even if it's not on the main client.
> >>
> >>
> >> On 2/8/13, Petr Praus <petr at praus.net> wrote:
> >> > Hi,
> >> >
> >> > I intend to implement trading across chains in a P2P manner (as
> >> > described
> >> > by Mike Hearn in
> >> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains
> ).
> >> > Note, this is indended more as an alternative chain development, I
> >> > don't
> >> > have any plans for merging it back into main client (not because I
> >> > don't
> >> > want to, but because I think it wouldn't be accepted). Before I dive
> >> > into
> >> > it, I thought it might be a good idea to ask here if the community has
> >> any
> >> > useful ideas or comments on this topic?
> >> >
> >> > Thanks to Gary Rowe I know about Open
> >> > Transactions<https://github.com/FellowTraveler/Open-Transactions>.
> >> > They can do "multicurrency trading" too, but it's objectives are quite
> >> > ambitious and I'm looking at making relatively small changes in the
> >> > mainline Bitcoin client rather than diving into something entirely
> new.
> >> >
> >> > A little background on why am I doing this, can be found
> >> > here<
> https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.
> >> > In short it's part of research towards my Master's thesis (more
> >> precisely,
> >> > an excuse to hack on Bitcoin and sell it as research :)) which should
> >> > be
> >> > about multicurrency (alternative chains) in Bitcoin.
> >> >
> >> > Thanks,
> >> > Petr
> >> >
> >> > PS: I hope I'm not too off topic here, but
> >> > this<https://bitcointalk.org/index.php?topic=15527.0> thread
> >> > indicates it should be fine to post alternative development questions
> >> > on
> >> > this.
> >> >
> >>
> >>
> >> --
> >> Jorge Tim?n
> >>
> >> http://freico.in/
> >> http://archive.ripple-project.org/
> >>
> >
>
>
> --
> Jorge Tim?n
>
> http://freico.in/
> http://archive.ripple-project.org/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/fabe60ea/attachment.html>

From pete at petertodd.org  Mon Feb 18 16:22:35 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 18 Feb 2013 11:22:35 -0500
Subject: [Bitcoin-development] Incorporating block validation rule
 modifications into the block chain
In-Reply-To: <CADb9v0L53kZfiBYtzCLtCsBVdeZz5CHtwBsM1CBDcCh9v-T=HA@mail.gmail.com>
References: <CAN1xFdrX61HsRxsXxXW+i0FzjQkoNVRaDG-2yJNOfYUi5FnsPA@mail.gmail.com>
	<CAAS2fgTwjXCGFS-N8a8Ro80ahxXT01dCfqWYOqmwCkdRramaMg@mail.gmail.com>
	<CAN1xFdrGiWmn_EaBNMXXZAV38oeqP14YiMzMZQrkA+WL9QEMfA@mail.gmail.com>
	<CAAS2fgR5=nLTBQUBzjZQs91AVw5XSTiqe-KB_T9R9wKfBrOq6Q@mail.gmail.com>
	<CABsx9T2RWamFxebVJExo_4NT4WPPE=Fd4deG1AFmT=GqjD=vwQ@mail.gmail.com>
	<CADb9v0L9RgfK8=FaM-tZm7AcYMhP6+OAyWu4x+3pLrrQ8yoeLw@mail.gmail.com>
	<CAAS2fgQRineAXRs9uaLRv-YaXMfjd+ietzd1aRmYV98N0y=OuQ@mail.gmail.com>
	<CADb9v0Kf1TfzWnUb3J8YNsLUxsbkeFX2nZXRnW5JJnmfDV9psQ@mail.gmail.com>
	<20130214060744.GA15157@savin>
	<CADb9v0L53kZfiBYtzCLtCsBVdeZz5CHtwBsM1CBDcCh9v-T=HA@mail.gmail.com>
Message-ID: <20130218162235.GA17224@savin>

On Thu, Feb 14, 2013 at 07:59:04AM -0500, Stephen Pair wrote:
> > The idea that miners have a strong incentive to distribute blocks as
> > widely and as quickly as possible is a serious misconception. The
> > optimal situation for a miner is if they can guarantee their blocks
> > would reach just over 50% of the overall hashing power, but no more. The
> > reason is orphans.
> >
> 
> Perhaps, but a miner trying to target just over 50% of the network will run
> the very real risk that they'll only reach 49%.

Then don't be so agressive; target 90% as I suggested and the miner
still comes out ahead by having 10% less hashing power to compete with.
50% is only a maximum because when more than 50% of the network does not
see your blocks the majority will inevitably create a longer chain than
you, but less than 50% and your part of the network will inevitably
create a longer chain than them.

> What about the case for centralization if the block size remains capped?  I
> see a far greater risk of centralization in that scenario than if the cap
> were to be removed.  The reason is very simple, bitcoin would ultimately
> become useful only for very high value, settlement transactions.  Only the
> mega corporations and banks would be using it directly, everyone else would
> be doing daily transacting in centrally issued currencies of one form or
> another.  As the banks and mega corps learned about the utility of bitcoin
> and began to use it en masse, they would start to take the whole network
> off the public internet and put it on a higher speed and more reliable
> backbone.  Those corporations would establish mining agreements among
> themselves to ensure none of the participants could take over the system
> and compromise it, while at the same time keeping the operational costs to
> a minimum.  Bitcoin is now a great alternative to the wire transfer system,
> but has no value to the average person wanted to have cheap and private
> transactions over the Internet.  Maybe Litecoin starts to fill that niche.

What you are describing is either *voluntary* centralization, or won't
happen. Nothing in your scenario will stop people from transacting on
the Bitcoin network directly, it will just make it more expensive. For
instance suppose fees rose to the point where the value of the fees was
10x the value of the block reward today; miners would be taking in
$972,000/day, or $6750/block. At 1MiB/block that implies transaction
fees of $6.75/KiB, or about $2 per transaction. Even if the fees were
$20 per transaction that'd be pretty cheap for direct access to the
worlds bank-to-bank financial network; I can still transfer an unlimited
amount of money across the planet, and no-one can stop me. Importantly
there will be plenty of demand to have transactions mined from people
other than banks and large corporations.

Because there will continue to be demand, and because 1MiB blocks means
running a relay node is trivial enough that people can do it just for
fun, banks won't be able to force people to use their "high-speed
backbone". Not to say they won't create one, but it won't have any real
advantage over something that can be run in your basement.

On the mining side with 1MiB blocks the fixed costs for setting up a
mining operation are just a moderately powered computer with a bunch of
harddrive space and a slow internet connection. The marginal costs are
still there of course, but the cost of power and cooling are lower at
small scale than at larger industrial scales; power is often available
for free in small amounts, and cooling isn't a problem in small setups.
Because small-scale miners will still exist, there will still be a
market for "consumer" mining gear, and trying to regulate mining
equipment will just turn it into a black-market good. Small blocks let
you setup a mining operation anywhere in the world - good luck
controlling that. Mining also will remain a way to import Bitcoins into
places.

Banks can try setting up exclusive mining contracts, but unless they
control more than 50% of the network they'll still have to accept blocks
found by these highly decentralized, small-scale miners. They'd be
better off broadcasting their transactions to those miners as well so
they don't get double-spent. Thus decentralized miners still can profit
from transaction fees, and still have an incentive to mine. Doesn't
sound like centralization to me at all.

On the other land, with large blocks, not only is mining solo
unprofitable due to the huge fixed costs required to process the blocks,
miners on pools can't effectively secure the network because they can't
independently verify that the blocks they are mining are valid. It would
be easy then to co-opt the relatively small number of pools, a number
that is not particularly large even now. Transaction relay nodes would
also be very expensive to run, and again the small number of them makes
them targets for control. Sure transactions will be cheap, but that
doesn't do you any good if the small number of miners out there are all
regulated and ignore your transactions.

Sounds like centralization to me.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130218/bd6fab3b/attachment.sig>

From gavinandresen at gmail.com  Tue Feb 19 19:27:50 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 19 Feb 2013 14:27:50 -0500
Subject: [Bitcoin-development] Bitcoin-Qt / bitcoind version 0.8.0 released
Message-ID: <CABsx9T0okOLprP1-S3mOY6mBLF-x-d-3Nc7Ci7ZKDG-2mAeNFA@mail.gmail.com>

Bitcoin-Qt version 0.8.0 are now available from:
  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.0/

This is a major release designed to improve performance and handle the
increasing volume of transactions on the network.

Please report bugs using the issue tracker at github:
  https://github.com/bitcoin/bitcoin/issues

How to Upgrade
--------------

If you are running an older version, shut it down. Wait
until it has completely shut down (which might take a few minutes for older
versions), then run the installer (on Windows) or just copy over
/Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

The first time you run after the upgrade a re-indexing process will be
started that will take anywhere from 30 minutes to several hours,
depending on the speed of your machine.

Incompatible Changes
--------------------

This release no longer maintains a full index of historical transaction ids
by default, so looking up an arbitrary transaction using the
getrawtransaction
RPC call will not work. If you need that functionality, you must run once
with -txindex=1 -reindex=1 to rebuild block-chain indices (see below for
more
details).

Improvements
------------

Mac and Windows binaries are signed with certificates owned by the Bitcoin
Foundation, to be compatible with the new security features in OSX 10.8 and
Windows 8.

LevelDB, a fast, open-source, non-relational database from Google, is
now used to store transaction and block indices.  LevelDB works much better
on machines with slow I/O and is faster in general. Berkeley DB is now only
used for the wallet.dat file (public and private wallet keys and
transactions
relevant to you).

Pieter Wuille implemented many optimizations to the way transactions are
verified, so a running, synchronized node uses less working memory and does
much less I/O. He also implemented parallel signature checking, so if you
have a multi-CPU machine all CPUs will be used to verify transactions.

New Features
------------

"Bloom filter" support in the network protocol for sending only relevant
transactions to
lightweight clients.

contrib/verifysfbinaries is a shell-script to verify that the binary
downloads
at sourceforge have not been tampered with. If you are able, you can help
make
everybody's downloads more secure by running this occasionally to check PGP
signatures against download file checksums.

contrib/spendfrom is a python-language command-line utility that
demonstrates
how to use the "raw transactions" JSON-RPC api to send coins received from
particular
addresses (also known as "coin control").

New/changed settings (command-line or bitcoin.conf file)
--------------------------------------------------------

dbcache : controls LevelDB memory usage.

par : controls how many threads to use to validate transactions. Defaults
to the number
of CPUs on your machine, use -par=1 to limit to a single CPU.

txindex : maintains an extra index of old, spent transaction ids so they
will be found
by the getrawtransaction JSON-RPC method.

reindex : rebuild block and transaction indices from the downloaded block
data.

New JSON-RPC API Features
-------------------------

lockunspent / listlockunspent allow locking transaction outputs for a
period of time so
they will not be spent by other processes that might be accessing the same
wallet.

addnode / getaddednodeinfo methods, to connect to specific peers without
restarting.

importprivkey now takes an optional boolean parameter (default true) to
control whether
or not to rescan the blockchain for transactions after importing a new
private key.

Important Bug Fixes
-------------------

Privacy leak: the position of the "change" output in most transactions was
not being
properly randomized, making network analysis of the transaction graph to
identify
users' wallets easier.

Zero-confirmation transaction vulnerability: accepting zero-confirmation
transactions
(transactions that have not yet been included in a block) from somebody you
do not
trust is still not recommended, because there will always be ways for
attackers to
double-spend zero-confirmation transactions. However, this release includes
a bug
fix that makes it a little bit more difficult for attackers to double-spend
a
certain type ("lockTime in the future") of zero-confirmation transaction.

Dependency Changes
------------------

Qt 4.8.3 (compiling against older versions of Qt 4 should continue to work)


Thanks to everybody who contributed to this release:
----------------------------------------------------

Alexander Kjeldaas
Andrey Alekseenko
Arnav Singh
Christian von Roques
Eric Lombrozo
Forrest Voight
Gavin Andresen
Gregory Maxwell
Jeff Garzik
Luke Dashjr
Matt Corallo
Mike Cassano
Mike Hearn
Peter Todd
Philip Kaufmann
Pieter Wuille
Richard Schwab
Robert Backhaus
Rune K. Svendsen
Sergio Demian Lerner
Wladimir J. van der Laan
burger2
default
fanquake
grimd34th
justmoon
redshark1802
tucenaber
xanatos
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130219/147dfa98/attachment.html>

From mike at plan99.net  Tue Feb 19 22:26:21 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 19 Feb 2013 23:26:21 +0100
Subject: [Bitcoin-development] bitcoinj 0.7 released
Message-ID: <CANEZrP30LFDHmJ11JBC5LzY-3fc6ME+bVgBMGcS7zwmj5zcptg@mail.gmail.com>

I'm pleased to announce the release of version 0.7 of the bitcoinj Java
library for working with Bitcoin. Bitcoinj forms the foundation of
MultiBit, Bitcoin Wallet for Android, SatoshiDice and more.

To get bitcoinj 0.7, check out our source from git and then run *git reset
--hard a9bd8631b904*. This will place you on the 0.7 release in a secure
manner. This paragraph was written on Tuesday 19th February 2013 and is
signed with the following key, which will be used in all release
announcements in future: 16vSNFP5Acsa6RBbjEA7QYCCRDRGXRFH4m.

Signature for the last
paragraph: IMvY1FsQobjU2t83ztQL3CTA+V+7WWKBFwMC+UWKCOMyTKA+73iSsFnCHdbFjAOEFMQH/NvJMTgGeVCSV/F9hfs=

If you want to, you can check that the original announcement mail sent to
bitcoinj at googlegroups.com is correctly signed with the google.com DKIM key,
to establish a full chain of trust.

*Release notes*

   - Thanks to Matt Corallo, we now support a* fully verifying mode* in
   addition to simplified verification. This is a tremendous amount of work
   that wouldn't have happened without Matt! Right now, we strongly discourage
   anyone from using it for mining (which is not supported out of the box
   anyway). Use it in a production environment only if you know what you're
   doing and are willing to risk losing money. If you do use it, let us know
   so we can contact you when problems are discovered. Read the documentation
   carefully before you begin.
   - Also thanks to Matt, *Bloom filtering* is now implemented and
   activated by default. When bitcoinj connects to a peer that supports Bloom
   filtering, only transactions relevant to the wallet will be downloaded
   which makes bandwidth usage scale with the size of your wallet, not global
   system activity. A configurable false positive ratio allows you to trade
   off bandwidth vs privacy. App developers don't need to do anything to take
   advantage of this, it is enabled automatically.
   - PeerGroup now pings its peers and calculates moving averages of the
   ping times. Ping time, versions and block heights are taken into account
   when selecting the peer to download the chain from.
   - You can now customize which outputs the wallet uses to create spends.
   The new default coin selector object allows you to spend unconfirmed change
   as long as it's been seen propagating across the network, addressing a
   common end-user pain point in wallet apps.
   - Optimized networking code for faster startup.
   - A new PeerMonitor example app shows how to put properties of connected
   peers into a GUI.
   - The Wallet is now decoupled from the BlockChain using the new
   BlockChainListener interface. This will simplify the development of some
   apps that want to process transactions but not maintain an actual wallet.
   - The dependencies of broadcast transactions are now downloaded and risk
   analyzed. At the moment they are only being checked for having a timelock.
   In future we may also analyze tree depth. The goal is to make certain kinds
   of protocol abuse harder. Wallets will reject timelocked transactions by
   default, this can be overridden via a property.
   - You can now create timelocked transactions with
WalletTool?<http://code.google.com/p/bitcoinj/w/edit/WalletTool> if
   you want to.
   - Compressed public keys are now used by default.
   - Support testnet3
   - Support bitcoin-qt compatible message signing and verification.
   - ECDSA key recovery is now implemented and allows you to obtain the
   public key from an extended signature. If the signature is not extended
   then there are multiple key possibilities returned.
   - Many bugfixes and minor improvements

API changes:

   - ECKey.sign() now takes a Sha256Hash as an argument and returns an
   ECDSASignature object in response. To get DER encoded signatures, use
   the encodeToDER() method of ECDSASignature.
   - ECKey.publicKeyFromPrivate now takes an additional compressed
   parameter.
   - PeerGroup.start()/PeerGroup.shutDown() now run asynchronously and
   return futures you can use to wait for them. You cannot restart a
   PeerGroup once it has been shut down any more.

*Credits*
*
*
Thanks to Matt Corallo (a.k.a. BlueMatt) for his huge contributions to this
release.

As always, thanks to Andreas Schildbach for his thorough testing, ideas and
high volume of quality bug reports. Also thanks to Jim Burton for the same
reasons.

Finally thanks to Ben (piuk) of blockchain.info for funding the ECDSA key
recovery feature.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130219/fcfa24c1/attachment.html>

From mike at plan99.net  Wed Feb 20 12:44:56 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 20 Feb 2013 13:44:56 +0100
Subject: [Bitcoin-development] Draft BIP for Bloom filtering
In-Reply-To: <CAAS2fgTaq1bf8Gyihzg=-TGZ9dfeKPpHsDfy7jEzg4voaptOdQ@mail.gmail.com>
References: <CANEZrP0XALwBFJyZTzYd5xBp4MRrjv0s_y2tOXbO7UgjWF2HzA@mail.gmail.com>
	<20121121151534.GA5540@vps7135.xlshosting.net>
	<1353523117.1085.14.camel@localhost.localdomain>
	<20121127211019.GA22701@vps7135.xlshosting.net>
	<CANEZrP0w052ebao-04H4Wduerm86o6RKBY=ObnJXBX22k--zMA@mail.gmail.com>
	<1357876751.1740.4.camel@localhost.localdomain>
	<CA+8xBpcB6kXWyRbeUknK6gkcrFMV6YtrDk0c938q1_32U6GtRw@mail.gmail.com>
	<CANEZrP2k30UsWFYSZ7Bh5Hm4LJ9vEAMEUgYSrYkcXcDTY2Z79Q@mail.gmail.com>
	<CANEZrP3KKGOPM7BzWAr1xGqh96iEzJ+Ki2hdUTe0Gvv51pJ23w@mail.gmail.com>
	<CANEZrP2q=Kvk8DRRjB7mtw7QF8xDTAFYPVRCDW60tJn4A67LYQ@mail.gmail.com>
	<1358348447.1048.0.camel@localhost.localdomain>
	<CANEZrP0HPgNKaNUMbFQS4Hj+gBQ6c7gatoeUXEiRSCA0wBkenA@mail.gmail.com>
	<CANEZrP1iV8K7_GQkRw6gNSXr+22MWmwuiu5651sK+QtupBSZtg@mail.gmail.com>
	<CANEZrP3WGbm9sZa7HnA1gHWNdMbREsvnTiU=bRR0hx+5=9BELA@mail.gmail.com>
	<CAAS2fgTaq1bf8Gyihzg=-TGZ9dfeKPpHsDfy7jEzg4voaptOdQ@mail.gmail.com>
Message-ID: <CANEZrP3r=29gL1z-ME4rHS2yooxpM1MnZkq4=1FuOSXGT7NMyg@mail.gmail.com>

I paid the new anti-spam deposit and updated the BIP 37 page to the latest
version of the protocol, then marked it as accepted. High fives all round,
but especially to Matt for doing the heavy lifting on this feature.


On Wed, Feb 6, 2013 at 5:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Feb 6, 2013 at 8:33 AM, Mike Hearn <mike at plan99.net> wrote:
> > Can somebody please unlock the BIP wiki page? I don't know why it was
> locked
> > but it's stale.
>
> I asked for permissions to unlock it but haven't heard back? will prod.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130220/cd1e8897/attachment.html>

From roy at gnomon.org.uk  Fri Feb 22 23:08:51 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Fri, 22 Feb 2013 23:08:51 +0000
Subject: [Bitcoin-development] Key retirement and key compromise
Message-ID: <20130222230851.GO2030@giles.gnomon.org.uk>

Has anyone been thinking about providing tools to allow users to cope
with key compromise - or more generally, to manage key retirement etc?

atm, if you suspect that your keys may be liable to compromise then
what would you have to do?  You'd have to create a new wallet (on a
new computer?  or is it easy to have two coexisting installs on one
computer?)  And then you'd have to make one or more payments from the
old wallet to the new wallet, to transfer the coins.  It's a pain, and
you've lost your address book, your transaction history, etc.  And
unless you keep the old wallet about, too, you're a bit stuck if
someone makes a payment to one of the old addresses.  It's something
that most users would baulk at unless they're really sure they're at
significant risk.

Of course, there are a spectrum of scenarios, ranging from having an
unencrypted wallet stolen by someone who knows what it is, through to
deciding that the passphrase you used to use when you only had a few
dollars worth of BTC maybe isn't good enough now you've got tens of
thousands of dollars worth of coins.  Or maybe you have no reason to
suspect there is a risk of compromise, but just have a corporate key
management policy that recommends retiring keys after a period of
time.

What would be really nice is for bitcoin to have a big key compromise
button, which would automatically transfer all coins to newly
generated addresses (optionally with a pause between generation and
transaction - to allow for a new wallet backup).  Optionally, too, the
compromised/retired addresses could be marked with a flag such that if
someone sends coins to that address bitcoind immediately generates a
transaction to transfer the coins to address(es) which are good.

I know deterministic wallets have many proponents - but personally I
like having a bag of keys - with the idea that over a period of time,
old keys will routinely be retired and their balances automatically
transfered to newly generated keys.  If someone really manages to
crack the passphrase on that 10-year-old wallet backup they got hold
of, then if would be nice to minimise the damage they could do...

And, of course, I want a big panic button that allows me to
automatically transfer all my coins to new addresses ASAP if I
suddenly do something stupid, like accidentally type my passphrase
into my IRC window :-)

Thoughts?  Is this functionality that there is any interest in
developing within the official client?  If there is any interest in
this then obviously the first step would be to specify exactly what
functionality is wanted...

roy



From pete at petertodd.org  Sun Feb 24 01:06:51 2013
From: pete at petertodd.org (Peter Todd)
Date: Sat, 23 Feb 2013 20:06:51 -0500
Subject: [Bitcoin-development] How small blocks make delibrate orphan mining
	costly
Message-ID: <20130224010651.GA22686@savin>

In the low-subsidy future fees will be the main source of income for
miners. Thus in some circumstances large miners may even have a reason
to delibrately try to mine a block that would orphan the current best
block. A simple example would be what would happen if a 1000BTC fee tx
was created, but more realistic examples would be just due to a large
number of tx's with decent fees.

However, with limited block-sizes such a strategy runs into a problem at
a point: you can't fit more tx's into your block so you can't increase
the fees collected by it even if you wanted too. Best strategy will soon
be to accept it and move on.


The second thing that could help defeat that strategy is if clients use
nLockTime by default. Clients should always create their transactions
with nLockTime set such that only the next block can include the
transaction, or if the transaction isn't time sensitive, possibly even
farther in the future.

Remember that to get ahead, you need to mine two blocks, and with
nLockTime the first block could only gain the transactions in the block
it orphans, so any further transactions could only go in the second.
With limited blocksizes that creates even more pressure in that the
block becomes full.

I don't see any reason why nLockTime in this fashion would harm clients,
so I think it's a perfectly reasonable thing to do and provides some
nice benefits down the road.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130223/95941f0d/attachment.sig>

From gmaxwell at gmail.com  Sun Feb 24 00:56:48 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 23 Feb 2013 16:56:48 -0800
Subject: [Bitcoin-development] How small blocks make delibrate orphan
 mining costly
In-Reply-To: <20130224010651.GA22686@savin>
References: <20130224010651.GA22686@savin>
Message-ID: <CAAS2fgSHi3Ms17JSkxirE5RkH4BEg6GP5SKLuCj6c39k0OQnhg@mail.gmail.com>

On Sat, Feb 23, 2013 at 5:06 PM, Peter Todd <pete at petertodd.org> wrote:
> In the low-subsidy future fees will be the main source of income for
> miners. Thus in some circumstances large miners may even have a reason
> to delibrately try to mine a block that would orphan the current best
> block. A simple example would be what would happen if a 1000BTC fee tx
> was created, but more realistic examples would be just due to a large
> number of tx's with decent fees.

It's come up a number of times in the past that when there is no
subsidy we might expect slow convergence as miners try to orphan each
other instead in order to fee snipe.   What Peter pointed out here
that I had not previously considered and find interesting is was that
if there is a sufficient backlog (or nlocktime immature) of
transactions with fees beyond the maximum block size the incentive to
orphan blocks to take their fees is greatly reduced or eliminated.



From jtimonmv at gmail.com  Mon Feb 25 09:41:26 2013
From: jtimonmv at gmail.com (=?ISO-8859-1?B?CUpvcmdlIFRpbfNu?=)
Date: Mon, 25 Feb 2013 10:41:26 +0100
Subject: [Bitcoin-development] Key retirement and key compromise
In-Reply-To: <20130222230851.GO2030@giles.gnomon.org.uk>
References: <20130222230851.GO2030@giles.gnomon.org.uk>
Message-ID: <CABOyFfpy7WEYKKhdoFbEHriCYoHt8hr_5BO992yb_GRV35TmmA@mail.gmail.com>

Just create a new wallet and send everything to a new address.
I don't think additional tools for this are needed.


On 2/23/13, Roy Badami <roy at gnomon.org.uk> wrote:
> Has anyone been thinking about providing tools to allow users to cope
> with key compromise - or more generally, to manage key retirement etc?
>
> atm, if you suspect that your keys may be liable to compromise then
> what would you have to do?  You'd have to create a new wallet (on a
> new computer?  or is it easy to have two coexisting installs on one
> computer?)  And then you'd have to make one or more payments from the
> old wallet to the new wallet, to transfer the coins.  It's a pain, and
> you've lost your address book, your transaction history, etc.  And
> unless you keep the old wallet about, too, you're a bit stuck if
> someone makes a payment to one of the old addresses.  It's something
> that most users would baulk at unless they're really sure they're at
> significant risk.
>
> Of course, there are a spectrum of scenarios, ranging from having an
> unencrypted wallet stolen by someone who knows what it is, through to
> deciding that the passphrase you used to use when you only had a few
> dollars worth of BTC maybe isn't good enough now you've got tens of
> thousands of dollars worth of coins.  Or maybe you have no reason to
> suspect there is a risk of compromise, but just have a corporate key
> management policy that recommends retiring keys after a period of
> time.
>
> What would be really nice is for bitcoin to have a big key compromise
> button, which would automatically transfer all coins to newly
> generated addresses (optionally with a pause between generation and
> transaction - to allow for a new wallet backup).  Optionally, too, the
> compromised/retired addresses could be marked with a flag such that if
> someone sends coins to that address bitcoind immediately generates a
> transaction to transfer the coins to address(es) which are good.
>
> I know deterministic wallets have many proponents - but personally I
> like having a bag of keys - with the idea that over a period of time,
> old keys will routinely be retired and their balances automatically
> transfered to newly generated keys.  If someone really manages to
> crack the passphrase on that 10-year-old wallet backup they got hold
> of, then if would be nice to minimise the damage they could do...
>
> And, of course, I want a big panic button that allows me to
> automatically transfer all my coins to new addresses ASAP if I
> suddenly do something stupid, like accidentally type my passphrase
> into my IRC window :-)
>
> Thoughts?  Is this functionality that there is any interest in
> developing within the official client?  If there is any interest in
> this then obviously the first step would be to specify exactly what
> functionality is wanted...
>
> roy
>
> ------------------------------------------------------------------------------
> Everyone hates slow websites. So do we.
> Make your web apps faster with AppDynamics
> Download AppDynamics Lite for free today:
> http://p.sf.net/sfu/appdyn_d2d_feb
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n

http://freico.in/
http://archive.ripple-project.org/



From peter at coinlab.com  Mon Feb 25 19:44:02 2013
From: peter at coinlab.com (Peter Vessenes)
Date: Mon, 25 Feb 2013 11:44:02 -0800
Subject: [Bitcoin-development] Key retirement and key compromise
In-Reply-To: <CABOyFfpy7WEYKKhdoFbEHriCYoHt8hr_5BO992yb_GRV35TmmA@mail.gmail.com>
References: <20130222230851.GO2030@giles.gnomon.org.uk>
	<CABOyFfpy7WEYKKhdoFbEHriCYoHt8hr_5BO992yb_GRV35TmmA@mail.gmail.com>
Message-ID: <CAMGNxUusTxVBbp7L0v5fC9d2ERQaMMBzX5-T70risVF3jd1tVg@mail.gmail.com>

We've been toying with the idea of a 'dead' button, one that issues a bunch
of pre-generated txs sending stuff out to a previously secured 'backup' set
of addresses (we don't think in terms of wallets, just keypairs).

In this scenario, you have a long-term storage address (or set of them),
and if you need to hit the panic button, previously signed transactions
send value over to your emergency storage.

If you've mucked around sending / receiving with your long-term storage,
you'd only catch some BTC, not necessarily all, but what's nice is the
panic transaction leaking has lower security requirements than your private
keys -- worst case it's out, and you've got to deal with stuff in emergency
storage, as opposed to losing all your coins.

You could pair this with a server that checks if 'safe' addresses have
'unauthorized' transactions showing up on the blockchain, and you'd have a
reasonable automated security layer. Maybe. :)

I'm interested in thoughts on this approach as well.

Jorge -- I respectfully disagree with you, there are a number of enterprise
scenarios where your method is not appropriate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130225/c4c50ba1/attachment.html>

From pete at petertodd.org  Tue Feb 26 02:44:58 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 25 Feb 2013 21:44:58 -0500
Subject: [Bitcoin-development] Fidelity-bonded ledgers
Message-ID: <20130226024458.GA25903@savin>

Lets suppose we take away everything but the transaction/scripting
system from Bitcoin. What is left is basically a way for to prove that a
set of pubkeys authorized the movement of coins from one place to
another. Of course, such a system is flawed as a currency because of the
double spend problem - specifically the need to know that there exists
global consensus on what particular set of transactions is the accepted
state.

However, in the event that a party commits double-spend fraud, it is
trivial to prove to others that they did so. Thus if a way to punish
that party can be found, we can give them an incentive to behave
honestly.

Consider the following new opcode and scriptPubKey:

    <genesis hash> n <ledger pubkeys> m CHECK_DOUBLE_SPEND_PROOF

spent with the following scriptSig:

    {transaction 1} {transaction 2}

where where both transactions are part of the block chain starting at
the given genesis hash, and whose blocks are signed by n of m ledger
pubkeys; the ledger is the entity entrusted to keep the ledger accurate
and not allow double-spends to occur.

Anyone with proof of a double-spend attempt made in the blockchain
starting at a given genesis hash can collect a reward. In essence, the
txout is the fidelity bond holding the ledger accountable.

Of course, the devil's in the details...


Transactions and blocks
-----------------------

Transactions themselves can follow the Bitcoin system of scripts,
scriptPubKeys, and scriptSigs and re-use the existing validation
machinery.

A so-called block however is reduced to the simpliest possible form:

    <signatures> <block hash> <transaction>

where the signatures are that of the ledger. The block hash is optional
and provides a way to further link a block into some sort of system to
make double-spend fraud detectable. Importantly the Bitcoin validation
machinery itself only needs to know that the double-spend happened at
all, not how it was detected.

Note how had the string manipulation opcodes not been disabled, in
particular SUBSTR, and had CHECKSIG not been designed as a single
opcode, it might have even been possible to create the double-spend
detector using the existing scripting system. Equally with just a set of
ECDSA opcodes one could probably construct a double-spend detector using
non-Bitcoin compatible transactions, but alas, things didn't work out
that way.


Moving funds in and out of fidelity-bonded ledgers
--------------------------------------------------

First the depositor informs the ledger of the amount they wish to
deposit, and one txin that will be used for that deposit.

Nex the ledger first creates a ledger-only transaction with the the
following scriptPubKey:

    <confirmations> <value> <txin hash> <scriptPubKey hash> CHECK_PAYMENT VERIFY <pubkey> CHECKSIG

spendable with the following scriptSig:

    <signature> <transaction> <merkle path to block header>

The CHECK_PAYMENT opcode returns true if provided with a proof that a
transaction with a txout of the correct value and scriptPubKey spending
the given txin exists in the Bitcoin blockchain. The ledger should
ensure that a different scriptSig is created for every deposit. The txin
is provided to allow the ledger to use the same scriptPubKey for all
deposits and thus make external audits easier. (note that an UTXO merkle
sum proof system is most likely to index by scriptPubKey)

The ledger gives the depositor the fully signed transaction, and the
depositor makes it valid by broadcasting that transaction and getting it
confirmed in the block chain.

Withdrawls from the ledger to the blockchain proper can happen the same
way, but this time it's the ledger that provides the transaction, and
the transaction owner that spends the transaction to an address of the
ledger's choosing.


Detecting double-spends
-----------------------

From the point of view of the Bitcoin validation machinery, double-spend
detection is undefined. Thus multiple systems are possible without
changing the validation rules.

One simple method would be for the ledger to maintain a publicly
accessible website, in particular publically accessible over Tor.
Transactions would be incorporated into a single log, and clients would
expect to be able to get copies of that log at any time anonymously. If
their transaction did not appear in the log, they could immediately
prove the double spend. (going as far back as the genesis block) The
optional block hash signed by every transaction would be incorporated
into the audit logs.

Equally trusted computing technologies can also be used instead of, or
in conjunction with, the ledger audit logs.


Ensuring the bond can-not be collected by the ledger
----------------------------------------------------

The simplistic scriptPubKey presented in the introduction allows for the
ledger to create their own fraud proof and run with the funds. What we
actually need is a way to constrain the destination of those spend
funds. Consider the following scriptPubKey:

    {bond ops omitted} <txouts hash> GET_TXOUTS HASH160 EQUAL

GET_TXOUTS would put a serialized version of each scriptPubKey, value,
and so on on the stack. (ideally using the existing CHECKSIG machinery;
CHECKSIG decomposed) Thus the txouts of any transaction allowed to spend
the scriptPubKey are constrained.

The scriptPubKey of the allowed transaction output can include a
mechanism such as the following:

    n GET_BLOCKS_SINCE_TXIN LESSTHAN

Essentially the number of blocks that have been confirmed since the transaction input was
confirmed in the chain are put on the stack, and the scriptPubKey is
only spendable if that number is sufficiently large. Essentially it's
the same underlying idea as publish-commit fidelity bond sacrifices, but
done with explicit scripting support.

As an aside, all these GET_FOO opcodes would use a lot of opcode space,
thus they should all be combined into a single GET_INFO opcode, which
would take a single argument specifying what information should be
placed onto the stack.


Chaum Token Support
-------------------

Auditing chuam token creating and redemption is made difficult by the
fact that the two acts are separated from each other. However, while it
isn't possible to audit any particular token issue/redemption, it is
possible to audit the sum of all tokens issued.

Specifically now every transaction involving tokens contains a number V,
which represents the total value of all tokens of that denomination. A
token creation transaction would look like the following:

    <ledger signature> <prev hash> V+1 <inputs> <blinded token>

with the rule that if two transactions exist with the same prev hash,
both creating a token, fraud has occured. Equally if the total token
value is not incremented, fraud has also occured. Similarly token
redemption can look like the following:

    <ledger signature> <token signature> <prev hash> V-1 <unblinded token> <outputs>

Note that here tokens themselves are pubkeys, which authorize their own
redemption.

Token to token transactions do not change V, but they still require
signatures, and thus still can be used as fraud proofs.

Of course the ledger can still run with all the funds deposited, but if
clients never deposit more funds than the fidelity bond is worth, the
ledger is still unable to profit from fraud as any client can show that
either their redemption request has not been honored, or that the value
of outstanding tokens does not match up.


Forcing redemptions
-------------------

There needs to be some way of forcing the ledger to redeem a withdrawl
request, on pain of losing their fidelity bond. This can be done by
allowing the creation of a special unspent txout, which can only be
spent by the creation of the requested txout, thus transfering the funds
to the rightful owner. Clients would scan the UTXO set to ensure that
no outstanding UTXO's of that special form exist before depositing funds
with the ledger. This solution could also be combined with time-lock
mechanisms that return funds to their owners, perhaps combined with some
sort of replacement mechanism.

Further work needs to be done here.


Summary
-------

Bitcoin provides an excellent transferable proof of work that can be
used to make certain actions expensive, including fraud. By the addition
of a relatively small number of opcodes to the existing scripting
language, opcodes that can be used for other purposes, we can create a
ledger built on top of Bitcoin whose honesty and performance are
incentivised by the prospect of losing something of value.



Extending the scripting language
--------------------------------

I'm not sure the following has been proposed before; my apologies if it
has.

Invalid opcodes do not make a transaction invalid if they are part of an
unexecuted IF/ELSE/ENDIF block. Previously it has been proposed to
carefully use the ten NOP opcodes as a way to extend the scripting
language - remember that an extension is a soft fork only if existing
clients consider the transaction valid - however we can instead redefine
just one NOP opcode to get access to all of the invalid opcodes.
Specifically consider the following scriptPubKey:

    <version> CHECK_SCRIPT_VERSION NOTIF <ops> ENDIF

The CHECK_SCRIPT_VERSION, NOP10, would essentially put the supported
script version on the stack, followed by the LESSTHANOREQUAL opcode.
Thus if the script version is supported, zero is placed on the stack,
and the NOTIF/ENDIF block is executed. Otherwise non-zero is left on the
stack, and the block is not executed, resulting in the script succeeding
unconditionally. Equally for non-supporting miners, the NOP10 does
nothing, non-zero is left on the stack, and the script succeeds.

Alternatively the comparison could be done as an XOR, and the "version"
actually being a set of capabilities. This has the advantage that
different versions could use the same invalid opcodes for different
purposes. (the context would remain until the end of the ENDIF block)
However I'm not sure that allowing a full-on "flag" system is worth the
complexity, and in any case if versions are assigned sequentially
essentially the same idea can be done later anyway.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130225/8d005f68/attachment.sig>

From pete at petertodd.org  Tue Feb 26 02:49:10 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 25 Feb 2013 21:49:10 -0500
Subject: [Bitcoin-development] Fidelity-bonded ledgers
In-Reply-To: <20130226024458.GA25903@savin>
References: <20130226024458.GA25903@savin>
Message-ID: <20130226024910.GA9315@savin>

On Mon, Feb 25, 2013 at 09:44:58PM -0500, Peter Todd wrote:
> Lets suppose we take away everything but the transaction/scripting

One last thing: credit goes to Gregory Maxwell for his ideas about
adding unspent-chaum-token redemption op-codes to Bitcoin proper that
lead me down the path to the more general Fidelity-Bonded Ledger idea.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130225/20b626a3/attachment.sig>

