From mike at plan99.net  Tue Jul  1 08:18:48 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 1 Jul 2014 10:18:48 +0200
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>
	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
Message-ID: <CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>

>
> ?However it's not ideal at the moment. Basically the main problem is that
> in the BIP72 there is no way to provide a fallback alternative URI for
> payment request fetch if client wallet supports BIP70 but doesn't not
> support fetching over bluetooth or bluetooth connection fails for any
> reason.
>

So the idea here is that the recipient wallet both uploads to the internet
and exposes the payment request over Bluetooth simultaneously, then let's
the sending wallet pick whatever radio layer works best in its current
conditions?

I think having multiple r= params is reasonable, but the Bluetooth support
is not specced in any BIP anyway. And if it were to be, people would point
out the lack of link-layer encryption.

So this is a bit tricky, overall. Right now I'd say things are kinda half
baked: not only is bluetooth not standardised nor encrypted (my fault, I
prototyped this code during a hackathon), but Bitcoin Wallet doesn't
properly implement BIP 72 either. To push this work forward I think we need
to sit down and do some more spec and implementation work :/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/1df7dba9/attachment.html>

From andreas at schildbach.de  Tue Jul  1 09:48:44 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 01 Jul 2014 11:48:44 +0200
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>	<20140320215208.GC88006@giles.gnomon.org.uk>	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>	<20140326224826.GE62995@giles.gnomon.org.uk>	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>	<lgvnc2$eu4$1@ger.gmane.org>	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>
Message-ID: <lou05t$2ra$1@ger.gmane.org>

On 07/01/2014 10:18 AM, Mike Hearn wrote:
>     ?However it's not ideal at the moment. Basically the main problem is
>     that in the BIP72 there is no way to provide a fallback alternative
>     URI for payment request fetch if client wallet supports BIP70 but
>     doesn't not support fetching over bluetooth or bluetooth connection
>     fails for any reason. 

I think the way to go here is using multiple r= parameters.

> So the idea here is that the recipient wallet both uploads to the
> internet and exposes the payment request over Bluetooth simultaneously,
> then let's the sending wallet pick whatever radio layer works best in
> its current conditions?

Either that, or just use the other ones as a fallback. Currently,
Bitcoin Wallet just falls back to BIP21 if fetching the PR via the r=
URL fails.

> I think having multiple r= params is reasonable, but the Bluetooth
> support is not specced in any BIP anyway. And if it were to be, people
> would point out the lack of link-layer encryption.

Its "specced" in code and implemented by several parties. I think its
clear that link-layer encryption has to be an add-on to the current
unencrypted connection, just like HTTPS is on top of HTTP. Anyway,
that's unrelated to the question of how to provide fallback URLs.

One more thought: We have a similar problem with the BIP70 payment URL.
It doesn't allow for fallbacks either. I brought this issue up in the
discussion phase of BIP70, but it was dismissed I think because of
"let's not get too complex for the first version". The fallback here is
to send the transaction via the P2P network.

(I think BIP70 via P2P radio will get used more often in future. I plan
to look into Bluetooth 4 LE as soon as I have devices and wanted to try
WIFI Direct again also. I hope we can skip BIP72 for both of those, but
lets see.)





From mw at osfda.org  Tue Jul  1 10:42:33 2014
From: mw at osfda.org (Michael Wozniak)
Date: Tue, 1 Jul 2014 06:42:33 -0400
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lou05t$2ra$1@ger.gmane.org>
References: <leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>	<20140320215208.GC88006@giles.gnomon.org.uk>	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>	<20140326224826.GE62995@giles.gnomon.org.uk>	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>	<lgvnc2$eu4$1@ger.gmane.org>	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>
	<lou05t$2ra$1@ger.gmane.org>
Message-ID: <D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>

I think it makes more sense to not add a duplicate parameter.  Current implementations will break if multiple r parameters are used (either reject the URI completely, or do something undefined).  If a new parameter is used, then the current implementations will just ignore it if they don?t support it.

-
Michael Wozniak

On Jul 1, 2014, at 5:48 AM, Andreas Schildbach <andreas at schildbach.de> wrote:

> On 07/01/2014 10:18 AM, Mike Hearn wrote:
>>    ?However it's not ideal at the moment. Basically the main problem is
>>    that in the BIP72 there is no way to provide a fallback alternative
>>    URI for payment request fetch if client wallet supports BIP70 but
>>    doesn't not support fetching over bluetooth or bluetooth connection
>>    fails for any reason. 
> 
> I think the way to go here is using multiple r= parameters.
> 
>> So the idea here is that the recipient wallet both uploads to the
>> internet and exposes the payment request over Bluetooth simultaneously,
>> then let's the sending wallet pick whatever radio layer works best in
>> its current conditions?
> 
> Either that, or just use the other ones as a fallback. Currently,
> Bitcoin Wallet just falls back to BIP21 if fetching the PR via the r=
> URL fails.
> 
>> I think having multiple r= params is reasonable, but the Bluetooth
>> support is not specced in any BIP anyway. And if it were to be, people
>> would point out the lack of link-layer encryption.
> 
> Its "specced" in code and implemented by several parties. I think its
> clear that link-layer encryption has to be an add-on to the current
> unencrypted connection, just like HTTPS is on top of HTTP. Anyway,
> that's unrelated to the question of how to provide fallback URLs.
> 
> One more thought: We have a similar problem with the BIP70 payment URL.
> It doesn't allow for fallbacks either. I brought this issue up in the
> discussion phase of BIP70, but it was dismissed I think because of
> "let's not get too complex for the first version". The fallback here is
> to send the transaction via the P2P network.
> 
> (I think BIP70 via P2P radio will get used more often in future. I plan
> to look into Bluetooth 4 LE as soon as I have devices and wanted to try
> WIFI Direct again also. I hope we can skip BIP72 for both of those, but
> lets see.)
> 
> 
> 
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From alexykot at gmail.com  Tue Jul  1 13:03:52 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Tue, 1 Jul 2014 14:03:52 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>
	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>
	<lou05t$2ra$1@ger.gmane.org>
	<D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>
Message-ID: <CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>

In my mind it's not like the client's phone is going all directions at the
same time. There should be a priority method and fallback method(s). ?And I
?see p2p radio as priority, and web as fallback, and BIP21 in the end as
always-working-default.

?So I'm keeping support for it all while want to be able to provide best
user experience.
Mike, a while ago in ?this thread you've described contactless cards user
experience. I'm also using contactless cards often, and what I'm aiming at
is creating same level of user experience for Bitcoin users.

Encryption over bluetooth is a matter to worry about, and we will introduce
that, but we need to sort out more low level problems first before coming
into that stage.


So, the backwards compatibility is a good issue Michael pointed out.
While processing of multiple "r" parameters is indeed uncertain (since
there is no RFC for that various implementations may behave differently),
the array solution is somewhat better. The array parameter name is "
r%5B1%5D=", i.e. it's not "r=", and we can add plain "r=" alongside. And if
particular implementation understands the array construct - it will use it,
otherwise it will ignore the "r%5B1%5D=" and use only usual "r=".

This doens't work though for cases where particular implementation
understands array construct but doesn't work well with repeating
parameters, since it will see two repeating "r" - an array and a string. I
don't have a solution for that atm.


If add completely new parameter to solve this we will need to make it an
array straight away to address upcoming issues with accommodating other
protocols.
And then I would also modify existing BIP72 to strictly define "r=" as
"http(s)" ?only ?parameter, while all other protocols (bluetooth, WiFi
Direct, ultrasound, chirp etc) should go to the new array parameter.


?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/3d587442/attachment.html>

From andreas at schildbach.de  Tue Jul  1 14:59:07 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 01 Jul 2014 16:59:07 +0200
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>	<20140320215208.GC88006@giles.gnomon.org.uk>	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>	<20140326224826.GE62995@giles.gnomon.org.uk>	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>	<lgvnc2$eu4$1@ger.gmane.org>	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>	<lou05t$2ra$1@ger.gmane.org>	<D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>
	<CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>
Message-ID: <louibr$8gc$1@ger.gmane.org>

Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd
advocate for a simple array parameter name, like rs= ("plural" of r).
Length really does matter for QR codes.

I'm fine with either multiple r= params or exactly one r= plus zero to
many r[]= params. Although I think it is a violation of the (current)
spec to choke on more than one r= parameters, I admit that bitcoinj is
currently implemented that way. (We could however fix this in a
maintenance release.)

However, r= should also allow all other protocols, exactly like any of
the r[]= params. I don't think we should do a distinction here. Also
because of backwards compatibility to the status quo.


On 07/01/2014 03:03 PM, Alex Kotenko wrote:
> In my mind it's not like the client's phone is going all directions at
> the same time. There should be a priority method and fallback method(s).
> ?And I ?see p2p radio as priority, and web as fallback, and BIP21 in the
> end as always-working-default.
> 
> ?So I'm keeping support for it all while want to be able to provide best
> user experience. 
> Mike, a while ago in ?this thread you've described contactless cards
> user experience. I'm also using contactless cards often, and what I'm
> aiming at is creating same level of user experience for Bitcoin users. 
> 
> Encryption over bluetooth is a matter to worry about, and we will
> introduce that, but we need to sort out more low level problems first
> before coming into that stage. 
> 
> 
> So, the backwards compatibility is a good issue Michael pointed out. 
> While processing of multiple "r" parameters is indeed uncertain (since
> there is no RFC for that various implementations may behave
> differently), the array solution is somewhat better. The array parameter
> name is "r%5B1%5D=", i.e. it's not "r=", and we can add plain "r="
> alongside. And if particular implementation understands the array
> construct - it will use it, otherwise it will ignore the "r%5B1%5D=" and
> use only usual "r=". 
> 
> This doens't work though for cases where particular implementation
> understands array construct but doesn't work well with repeating
> parameters, since it will see two repeating "r" - an array and a string.
> I don't have a solution for that atm. 
> 
> 
> If add completely new parameter to solve this we will need to make it an
> array straight away to address upcoming issues with accommodating other
> protocols. 
> And then I would also modify existing BIP72 to strictly define "r=" as
> "http(s)" ?only ?parameter, while all other protocols (bluetooth, WiFi
> Direct, ultrasound, chirp etc) should go to the new array parameter.
> 
> 
> ?
> 
> 
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mw at osfda.org  Tue Jul  1 15:07:23 2014
From: mw at osfda.org (Michael Wozniak)
Date: Tue, 1 Jul 2014 11:07:23 -0400
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <louibr$8gc$1@ger.gmane.org>
References: <leuunm$tjk$1@ger.gmane.org>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>	<20140320215208.GC88006@giles.gnomon.org.uk>	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>	<20140326224826.GE62995@giles.gnomon.org.uk>	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>	<lgvnc2$eu4$1@ger.gmane.org>	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>	<lou05t$2ra$1@ger.gmane.org>	<D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>
	<CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>
	<louibr$8gc$1@ger.gmane.org>
Message-ID: <1016E2A3-C678-46FA-B80E-F9D86FDEA213@osfda.org>

Multiple parameters is currently undefined as far as I can tell.  Should the client take the first, last, or ignore it completely if there are multiple of any parameter?  I think that?s the point of the parameter pollution discussion, which will define it one way or the other.

I?m only familiar with the Electrum implementation, which is currently checking for any duplicate parameters and treating the entire URI as invalid if duplicate parameters exist (following the parameter pollution suggestions).

-
Michael Wozniak

On Jul 1, 2014, at 10:59 AM, Andreas Schildbach <andreas at schildbach.de> wrote:

> Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd
> advocate for a simple array parameter name, like rs= ("plural" of r).
> Length really does matter for QR codes.
> 
> I'm fine with either multiple r= params or exactly one r= plus zero to
> many r[]= params. Although I think it is a violation of the (current)
> spec to choke on more than one r= parameters, I admit that bitcoinj is
> currently implemented that way. (We could however fix this in a
> maintenance release.)
> 
> However, r= should also allow all other protocols, exactly like any of
> the r[]= params. I don't think we should do a distinction here. Also
> because of backwards compatibility to the status quo.
> 
> 
> On 07/01/2014 03:03 PM, Alex Kotenko wrote:
>> In my mind it's not like the client's phone is going all directions at
>> the same time. There should be a priority method and fallback method(s).
>> ?And I ?see p2p radio as priority, and web as fallback, and BIP21 in the
>> end as always-working-default.
>> 
>> ?So I'm keeping support for it all while want to be able to provide best
>> user experience. 
>> Mike, a while ago in ?this thread you've described contactless cards
>> user experience. I'm also using contactless cards often, and what I'm
>> aiming at is creating same level of user experience for Bitcoin users. 
>> 
>> Encryption over bluetooth is a matter to worry about, and we will
>> introduce that, but we need to sort out more low level problems first
>> before coming into that stage. 
>> 
>> 
>> So, the backwards compatibility is a good issue Michael pointed out. 
>> While processing of multiple "r" parameters is indeed uncertain (since
>> there is no RFC for that various implementations may behave
>> differently), the array solution is somewhat better. The array parameter
>> name is "r%5B1%5D=", i.e. it's not "r=", and we can add plain "r="
>> alongside. And if particular implementation understands the array
>> construct - it will use it, otherwise it will ignore the "r%5B1%5D=" and
>> use only usual "r=". 
>> 
>> This doens't work though for cases where particular implementation
>> understands array construct but doesn't work well with repeating
>> parameters, since it will see two repeating "r" - an array and a string.
>> I don't have a solution for that atm. 
>> 
>> 
>> If add completely new parameter to solve this we will need to make it an
>> array straight away to address upcoming issues with accommodating other
>> protocols. 
>> And then I would also modify existing BIP72 to strictly define "r=" as
>> "http(s)" ?only ?parameter, while all other protocols (bluetooth, WiFi
>> Direct, ultrasound, chirp etc) should go to the new array parameter.
>> 
>> 
>> ?
>> 
>> 
>> ------------------------------------------------------------------------------
>> Open source business process management suite built on Java and Eclipse
>> Turn processes into business applications with Bonita BPM Community Edition
>> Quickly connect people, data, and systems into organized workflows
>> Winner of BOSSIE, CODIE, OW2 and Gartner awards
>> http://p.sf.net/sfu/Bonitasoft
>> 
>> 
>> 
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From andreas at schildbach.de  Tue Jul  1 15:39:42 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 01 Jul 2014 17:39:42 +0200
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <1016E2A3-C678-46FA-B80E-F9D86FDEA213@osfda.org>
References: <leuunm$tjk$1@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>	<20140320215208.GC88006@giles.gnomon.org.uk>	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>	<20140326224826.GE62995@giles.gnomon.org.uk>	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>	<lgvnc2$eu4$1@ger.gmane.org>	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>	<lou05t$2
	ra$1@ger.gmane.org>	<D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>	<CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>	<louibr$8gc$1@ger.gmane.org>
	<1016E2A3-C678-46FA-B80E-F9D86FDEA213@osfda.org>
Message-ID: <louknu$7ja$1@ger.gmane.org>

Ok, one more idea:
r= is used for the first URL, and we *think* of it as r0=
additional URLs are appended as
r1=
r2=
and so on. This would also define an ordering in case we need it.


On 07/01/2014 05:07 PM, Michael Wozniak wrote:
> Multiple parameters is currently undefined as far as I can tell.  Should the client take the first, last, or ignore it completely if there are multiple of any parameter?  I think that?s the point of the parameter pollution discussion, which will define it one way or the other.
> 
> I?m only familiar with the Electrum implementation, which is currently checking for any duplicate parameters and treating the entire URI as invalid if duplicate parameters exist (following the parameter pollution suggestions).
> 
> -
> Michael Wozniak
> 
> On Jul 1, 2014, at 10:59 AM, Andreas Schildbach <andreas at schildbach.de> wrote:
> 
>> Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd
>> advocate for a simple array parameter name, like rs= ("plural" of r).
>> Length really does matter for QR codes.
>>
>> I'm fine with either multiple r= params or exactly one r= plus zero to
>> many r[]= params. Although I think it is a violation of the (current)
>> spec to choke on more than one r= parameters, I admit that bitcoinj is
>> currently implemented that way. (We could however fix this in a
>> maintenance release.)
>>
>> However, r= should also allow all other protocols, exactly like any of
>> the r[]= params. I don't think we should do a distinction here. Also
>> because of backwards compatibility to the status quo.
>>
>>
>> On 07/01/2014 03:03 PM, Alex Kotenko wrote:
>>> In my mind it's not like the client's phone is going all directions at
>>> the same time. There should be a priority method and fallback method(s).
>>> ?And I ?see p2p radio as priority, and web as fallback, and BIP21 in the
>>> end as always-working-default.
>>>
>>> ?So I'm keeping support for it all while want to be able to provide best
>>> user experience. 
>>> Mike, a while ago in ?this thread you've described contactless cards
>>> user experience. I'm also using contactless cards often, and what I'm
>>> aiming at is creating same level of user experience for Bitcoin users. 
>>>
>>> Encryption over bluetooth is a matter to worry about, and we will
>>> introduce that, but we need to sort out more low level problems first
>>> before coming into that stage. 
>>>
>>>
>>> So, the backwards compatibility is a good issue Michael pointed out. 
>>> While processing of multiple "r" parameters is indeed uncertain (since
>>> there is no RFC for that various implementations may behave
>>> differently), the array solution is somewhat better. The array parameter
>>> name is "r%5B1%5D=", i.e. it's not "r=", and we can add plain "r="
>>> alongside. And if particular implementation understands the array
>>> construct - it will use it, otherwise it will ignore the "r%5B1%5D=" and
>>> use only usual "r=". 
>>>
>>> This doens't work though for cases where particular implementation
>>> understands array construct but doesn't work well with repeating
>>> parameters, since it will see two repeating "r" - an array and a string.
>>> I don't have a solution for that atm. 
>>>
>>>
>>> If add completely new parameter to solve this we will need to make it an
>>> array straight away to address upcoming issues with accommodating other
>>> protocols. 
>>> And then I would also modify existing BIP72 to strictly define "r=" as
>>> "http(s)" ?only ?parameter, while all other protocols (bluetooth, WiFi
>>> Direct, ultrasound, chirp etc) should go to the new array parameter.
>>>
>>>
>>> ?
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Open source business process management suite built on Java and Eclipse
>>> Turn processes into business applications with Bonita BPM Community Edition
>>> Quickly connect people, data, and systems into organized workflows
>>> Winner of BOSSIE, CODIE, OW2 and Gartner awards
>>> http://p.sf.net/sfu/Bonitasoft
>>>
>>>
>>>
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Open source business process management suite built on Java and Eclipse
>> Turn processes into business applications with Bonita BPM Community Edition
>> Quickly connect people, data, and systems into organized workflows
>> Winner of BOSSIE, CODIE, OW2 and Gartner awards
>> http://p.sf.net/sfu/Bonitasoft
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From alexykot at gmail.com  Tue Jul  1 17:18:23 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Tue, 1 Jul 2014 18:18:23 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <louknu$7ja$1@ger.gmane.org>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>
	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>
	<D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>
	<CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>
	<louibr$8gc$1@ger.gmane.org>
	<1016E2A3-C678-46FA-B80E-F9D86FDEA213@osfda.org>
	<louknu$7ja$1@ger.gmane.org>
Message-ID: <CALDj+BZveYWed4Redvncdf=h3pEvBYosgAO3stUvhN2gxbb1UQ@mail.gmail.com>

Hmm, r1, r2 etc is actually interesting. It takes less chars then array
(yes, array brackets have to be escaped) and provides unlimited number of
options, uniformed approach and priority definition. I'd say that is the
way to go. Any objections?
On 1 Jul 2014 16:39, "Andreas Schildbach" <andreas at schildbach.de> wrote:

> Ok, one more idea:
> r= is used for the first URL, and we *think* of it as r0=
> additional URLs are appended as
> r1=
> r2=
> and so on. This would also define an ordering in case we need it.
>
>
> On 07/01/2014 05:07 PM, Michael Wozniak wrote:
> > Multiple parameters is currently undefined as far as I can tell.  Should
> the client take the first, last, or ignore it completely if there are
> multiple of any parameter?  I think that?s the point of the parameter
> pollution discussion, which will define it one way or the other.
> >
> > I?m only familiar with the Electrum implementation, which is currently
> checking for any duplicate parameters and treating the entire URI as
> invalid if duplicate parameters exist (following the parameter pollution
> suggestions).
> >
> > -
> > Michael Wozniak
> >
> > On Jul 1, 2014, at 10:59 AM, Andreas Schildbach <andreas at schildbach.de>
> wrote:
> >
> >> Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd
> >> advocate for a simple array parameter name, like rs= ("plural" of r).
> >> Length really does matter for QR codes.
> >>
> >> I'm fine with either multiple r= params or exactly one r= plus zero to
> >> many r[]= params. Although I think it is a violation of the (current)
> >> spec to choke on more than one r= parameters, I admit that bitcoinj is
> >> currently implemented that way. (We could however fix this in a
> >> maintenance release.)
> >>
> >> However, r= should also allow all other protocols, exactly like any of
> >> the r[]= params. I don't think we should do a distinction here. Also
> >> because of backwards compatibility to the status quo.
> >>
> >>
> >> On 07/01/2014 03:03 PM, Alex Kotenko wrote:
> >>> In my mind it's not like the client's phone is going all directions at
> >>> the same time. There should be a priority method and fallback
> method(s).
> >>> ?And I ?see p2p radio as priority, and web as fallback, and BIP21 in
> the
> >>> end as always-working-default.
> >>>
> >>> ?So I'm keeping support for it all while want to be able to provide
> best
> >>> user experience.
> >>> Mike, a while ago in ?this thread you've described contactless cards
> >>> user experience. I'm also using contactless cards often, and what I'm
> >>> aiming at is creating same level of user experience for Bitcoin users.
> >>>
> >>> Encryption over bluetooth is a matter to worry about, and we will
> >>> introduce that, but we need to sort out more low level problems first
> >>> before coming into that stage.
> >>>
> >>>
> >>> So, the backwards compatibility is a good issue Michael pointed out.
> >>> While processing of multiple "r" parameters is indeed uncertain (since
> >>> there is no RFC for that various implementations may behave
> >>> differently), the array solution is somewhat better. The array
> parameter
> >>> name is "r%5B1%5D=", i.e. it's not "r=", and we can add plain "r="
> >>> alongside. And if particular implementation understands the array
> >>> construct - it will use it, otherwise it will ignore the "r%5B1%5D="
> and
> >>> use only usual "r=".
> >>>
> >>> This doens't work though for cases where particular implementation
> >>> understands array construct but doesn't work well with repeating
> >>> parameters, since it will see two repeating "r" - an array and a
> string.
> >>> I don't have a solution for that atm.
> >>>
> >>>
> >>> If add completely new parameter to solve this we will need to make it
> an
> >>> array straight away to address upcoming issues with accommodating other
> >>> protocols.
> >>> And then I would also modify existing BIP72 to strictly define "r=" as
> >>> "http(s)" ?only ?parameter, while all other protocols (bluetooth, WiFi
> >>> Direct, ultrasound, chirp etc) should go to the new array parameter.
> >>>
> >>>
> >>> ?
> >>>
> >>>
> >>>
> ------------------------------------------------------------------------------
> >>> Open source business process management suite built on Java and Eclipse
> >>> Turn processes into business applications with Bonita BPM Community
> Edition
> >>> Quickly connect people, data, and systems into organized workflows
> >>> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> >>> http://p.sf.net/sfu/Bonitasoft
> >>>
> >>>
> >>>
> >>> _______________________________________________
> >>> Bitcoin-development mailing list
> >>> Bitcoin-development at lists.sourceforge.net
> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>
> >>
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >> Open source business process management suite built on Java and Eclipse
> >> Turn processes into business applications with Bonita BPM Community
> Edition
> >> Quickly connect people, data, and systems into organized workflows
> >> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> >> http://p.sf.net/sfu/Bonitasoft
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >
> ------------------------------------------------------------------------------
> > Open source business process management suite built on Java and Eclipse
> > Turn processes into business applications with Bonita BPM Community
> Edition
> > Quickly connect people, data, and systems into organized workflows
> > Winner of BOSSIE, CODIE, OW2 and Gartner awards
> > http://p.sf.net/sfu/Bonitasoft
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/f3b7f78d/attachment.html>

From mike at plan99.net  Tue Jul  1 17:59:45 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 1 Jul 2014 19:59:45 +0200
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BZveYWed4Redvncdf=h3pEvBYosgAO3stUvhN2gxbb1UQ@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>
	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>
	<D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>
	<CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>
	<louibr$8gc$1@ger.gmane.org>
	<1016E2A3-C678-46FA-B80E-F9D86FDEA213@osfda.org>
	<louknu$7ja$1@ger.gmane.org>
	<CALDj+BZveYWed4Redvncdf=h3pEvBYosgAO3stUvhN2gxbb1UQ@mail.gmail.com>
Message-ID: <CANEZrP1=Z+DPDFiLsE2sqYQ7gYSm2U6gmFNfCoLpkuR1M7qaAQ@mail.gmail.com>

Nope, r1/r2 sounds good to me. BTW we should update the spec to reflect
that escaping is largely unnecessary in many cases.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/6f10e06c/attachment.html>

From alexykot at gmail.com  Wed Jul  2 08:49:10 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Wed, 2 Jul 2014 09:49:10 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP1=Z+DPDFiLsE2sqYQ7gYSm2U6gmFNfCoLpkuR1M7qaAQ@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>
	<CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>
	<CANEZrP1HvKAg6d7tTcnY3BJr0_5LuCN1FGYQvQ1+RpL1B6cwHw@mail.gmail.com>
	<D4B82FD9-8078-48B2-9F91-8A3AB23AEAA7@osfda.org>
	<CALDj+BZ8_YB0DHiaGZPq4MB-dvkRqJhBFazcfnrrPX4EvRxbeQ@mail.gmail.com>
	<louibr$8gc$1@ger.gmane.org>
	<1016E2A3-C678-46FA-B80E-F9D86FDEA213@osfda.org>
	<louknu$7ja$1@ger.gmane.org>
	<CALDj+BZveYWed4Redvncdf=h3pEvBYosgAO3stUvhN2gxbb1UQ@mail.gmail.com>
	<CANEZrP1=Z+DPDFiLsE2sqYQ7gYSm2U6gmFNfCoLpkuR1M7qaAQ@mail.gmail.com>
Message-ID: <CALDj+BZ-_4XMB5ZAKX6ZSNeWRj71Mo0w4-bR-gYNGPv14rWKng@mail.gmail.com>

Ok, agreed. I will submit a pull request to BIP72 then.
Not sure about escaping though. It is indeed not critical for bitcoin URIs,
but still it is a part of RFC, don't think we should go against it.

Andreas, we will implement this on our side, with bluetooth on r= and web
address on r1=.


2014-07-01 18:59 GMT+01:00 Mike Hearn <mike at plan99.net>:

> Nope, r1/r2 sounds good to me. BTW we should update the spec to reflect
> that escaping is largely unnecessary in many cases.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140702/8da22f48/attachment.html>

From cryptocurrencies at quidecco.de  Thu Jul  3 01:21:31 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Thu,  3 Jul 2014 03:21:31 +0200 (CEST)
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <53AC0439.9070501@googlemail.com>
Message-ID: <20140703012131.1A3D9E00A82@quidecco.de>

Hello Krzysztof,

[...]
> As before, it can be found under:
>
> http://enetium.com/resources/Bitcoin.pdf
>
> I hope it will prove useful to the community and thank in advance
> for any further improvement proposals.
>

I think it's great work and provides a good reference for those
who want to get some insight into Bitcoin's design.

Have you considered putting the document source under version control,
which may facilitate tracking future protocol improvements in the
document easily?

Best regards,

Isidor



From gavinandresen at gmail.com  Thu Jul  3 15:56:11 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 3 Jul 2014 11:56:11 -0400
Subject: [Bitcoin-development] Building from git on OSX
Message-ID: <CABsx9T2_o4HDb_7_Of=Xp6Y0LPgGsaWHR0CYuF9BuTYERPnzVg@mail.gmail.com>

Just FYI for anybody else building on OSX:

libtool is a new dependency, so if you update to git HEAD and have trouble
building:

brew install libtool
  (or port install libtool -- see doc/build-osx.md for all the dependencies)
./autogen.sh
./configure  .... etc, whatever configure options you use. I develop with:
./configure --disable-hardening --disable-silent-rules CXXFLAGS='-g3 -O0
-DDEBUG_LOCKORDER'



-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140703/31d5d271/attachment.html>

From gubatron at gmail.com  Thu Jul  3 16:21:50 2014
From: gubatron at gmail.com (Angel Leon)
Date: Thu, 3 Jul 2014 12:21:50 -0400
Subject: [Bitcoin-development] Building from git on OSX
In-Reply-To: <CABsx9T2_o4HDb_7_Of=Xp6Y0LPgGsaWHR0CYuF9BuTYERPnzVg@mail.gmail.com>
References: <CABsx9T2_o4HDb_7_Of=Xp6Y0LPgGsaWHR0CYuF9BuTYERPnzVg@mail.gmail.com>
Message-ID: <CADZB0_Y1jLH4qxCGpeMEMwGws3V7uikUKyg6wLyjUmEeM3qayg@mail.gmail.com>

a million thanks for this FYI

http://twitter.com/gubatron


On Thu, Jul 3, 2014 at 11:56 AM, Gavin Andresen <gavinandresen at gmail.com>
wrote:

> Just FYI for anybody else building on OSX:
>
> libtool is a new dependency, so if you update to git HEAD and have trouble
> building:
>
> brew install libtool
>   (or port install libtool -- see doc/build-osx.md for all the
> dependencies)
> ./autogen.sh
> ./configure  .... etc, whatever configure options you use. I develop with:
> ./configure --disable-hardening --disable-silent-rules CXXFLAGS='-g3 -O0
> -DDEBUG_LOCKORDER'
>
>
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140703/38500348/attachment.html>

From laanwj at gmail.com  Fri Jul  4 07:15:31 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 4 Jul 2014 09:15:31 +0200
Subject: [Bitcoin-development] Anyone still using SOCKS4?
In-Reply-To: <CA+s+GJDSPS=zsM64wHaG1CucHVkO==L1QkHYiciUo9iJ-RADng@mail.gmail.com>
References: <CA+s+GJDSPS=zsM64wHaG1CucHVkO==L1QkHYiciUo9iJ-RADng@mail.gmail.com>
Message-ID: <CA+s+GJAei15doCg-h2BK6tEvfwy5m5YHPhg_+8b=G4ew41Mqjw@mail.gmail.com>

On Wed, Jun 11, 2014 at 5:39 PM, Wladimir <laanwj at gmail.com> wrote:

> If no one screams fire, we plan on removing support for it in the next
> major release, for two reasons:
>
> - It would remove some crufty, hardly tested code paths
>
> - SOCKS5 offers better privacy as it allows DNS redirection

Another one:

- SOCKS5 supports IPv6

Last call...

Wladimir



From drak at zikula.org  Fri Jul  4 07:28:26 2014
From: drak at zikula.org (Drak)
Date: Fri, 4 Jul 2014 08:28:26 +0100
Subject: [Bitcoin-development] Anyone still using SOCKS4?
In-Reply-To: <CA+s+GJAei15doCg-h2BK6tEvfwy5m5YHPhg_+8b=G4ew41Mqjw@mail.gmail.com>
References: <CA+s+GJDSPS=zsM64wHaG1CucHVkO==L1QkHYiciUo9iJ-RADng@mail.gmail.com>
	<CA+s+GJAei15doCg-h2BK6tEvfwy5m5YHPhg_+8b=G4ew41Mqjw@mail.gmail.com>
Message-ID: <CANAnSg3UqaW4_RJ56xsgj+Tr7soKCsoxguNSA8e9ZkPvdTUZVQ@mail.gmail.com>

*watches the tumble weed blow by*

I think it's pretty safe to remove it...


On 4 July 2014 08:15, Wladimir <laanwj at gmail.com> wrote:

> On Wed, Jun 11, 2014 at 5:39 PM, Wladimir <laanwj at gmail.com> wrote:
>
> > If no one screams fire, we plan on removing support for it in the next
> > major release, for two reasons:
> >
> > - It would remove some crufty, hardly tested code paths
> >
> > - SOCKS5 offers better privacy as it allows DNS redirection
>
> Another one:
>
> - SOCKS5 supports IPv6
>
> Last call...
>
> Wladimir
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140704/3c7d956e/attachment.html>

From andyparkins at gmail.com  Fri Jul  4 10:27:51 2014
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 04 Jul 2014 11:27:51 +0100
Subject: [Bitcoin-development] ASIC-proof mining
Message-ID: <10566815.3CllqoMfON@momentum>

Hello,

I had a thought after reading Mike Hearn's blog about it being impossible to 
have an ASIC-proof proof of work algorithm.

Perhaps I'm being dim, but I thought I'd mention my thought anyway.

It strikes me that he's right that it's impossible for any algorithm to exist 
that can't be implemented in an ASIC.  However, that's only because it's 
trying to pick an algorithm that is CPU bound.  You could protect against ASCI 
mining (or rather, make it irrelevant that it was being used) by making the 
algorithm IO-bound rather than CPU-bound.

For example, what if the proof-of-work hash for a block were no longer just 
"hash of block", which contains the hash of the parent block, but instead were 
hash of 

   [NEW_BLOCK] [ALL_PREVIOUS_BLOCKS] [NEW_BLOCK]

[ALL_PREVIOUS_BLOCKS] is now 20GB (from memory) and growing.  By prefixing and 
suffixing the new block, you have to feed every byte of the blockchain through 
the hashing engine (the prefix prevents you caching the intermediate result).  
Whatever bus you're using to feed your high speed hashing engine, it will 
always be faster than the bus -- hence you're now IO-bound, not CPU-bound, and 
any hashing engine will, effectively, be the same.

I'm making the assumption that SHA-256 is not cacheable from the middle 
outwards, so the whole block-chain _has_ to be transferred for every hash.

Apologies in advance if this is a stupid idea.



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com




From etotheipi at gmail.com  Fri Jul  4 10:53:47 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Fri, 04 Jul 2014 06:53:47 -0400
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <10566815.3CllqoMfON@momentum>
References: <10566815.3CllqoMfON@momentum>
Message-ID: <53B687BB.9010103@gmail.com>

Just a thought on this -- I'm not saying this is a good idea or a bad
idea, because I have spent about zero time thinking about it, but
something did come to mind as I read this.  Reading 20 GB of data for
every hash might be a bit excessive.  And as the blockchain grows, it
will become infeasible to continue.  However, what comes to mind is the
ROMix algorithm defined by Colin Percival, which was the pre-cursor to
scrypt.  Which is actually what Armory uses for key stretching because
it's far simpler than scrypt itself while maintaining the memory-hard
properties (the downside is that it's much less flexible in allowing the
user to trade-off compute time vs memory usage).

ROMix works by taking N sequential hashes and storing the results into a
single N*32 byte lookup table.   So if N is 1,000,000, you are going to
compute 1,000,000 and store the results into 32,000,000 sequential bytes
of RAM.  Then you are going to do 1,000,000 lookup operations on that
table, using the hash of the previous lookup result, to determine the
location of next lookup (within that 32,000,000 bytes).  Assuming a
strong hash function, this means its impossible to know in advance what
needs to be available in RAM to lookup, and it's easiest if you simply
hold all 32,000,000 bytes in RAM.

Something similar could be applied to your idea.  We use the hash of a
prevBlockHash||nonce as the starting point for 1,000,000 lookup
operations.  The output of the previous lookup is used to determine
which block and tx (perhaps which chunk of 32 bytes within that tx) is
used for the next lookup operation.   This means that in order to do the
hashing, you need the entire blockchain available to you, even though
you'll only be using a small fraction of it for each "hash".  This might
achieve what you're describing without actually requiring the full 20 GB
of reading on ever hash.

-Alan



On 07/04/2014 06:27 AM, Andy Parkins wrote:
> Hello,
>
> I had a thought after reading Mike Hearn's blog about it being impossible to 
> have an ASIC-proof proof of work algorithm.
>
> Perhaps I'm being dim, but I thought I'd mention my thought anyway.
>
> It strikes me that he's right that it's impossible for any algorithm to exist 
> that can't be implemented in an ASIC.  However, that's only because it's 
> trying to pick an algorithm that is CPU bound.  You could protect against ASCI 
> mining (or rather, make it irrelevant that it was being used) by making the 
> algorithm IO-bound rather than CPU-bound.
>
> For example, what if the proof-of-work hash for a block were no longer just 
> "hash of block", which contains the hash of the parent block, but instead were 
> hash of 
>
>    [NEW_BLOCK] [ALL_PREVIOUS_BLOCKS] [NEW_BLOCK]
>
> [ALL_PREVIOUS_BLOCKS] is now 20GB (from memory) and growing.  By prefixing and 
> suffixing the new block, you have to feed every byte of the blockchain through 
> the hashing engine (the prefix prevents you caching the intermediate result).  
> Whatever bus you're using to feed your high speed hashing engine, it will 
> always be faster than the bus -- hence you're now IO-bound, not CPU-bound, and 
> any hashing engine will, effectively, be the same.
>
> I'm making the assumption that SHA-256 is not cacheable from the middle 
> outwards, so the whole block-chain _has_ to be transferred for every hash.
>
> Apologies in advance if this is a stupid idea.
>
>
>
> Andy




From andyparkins at gmail.com  Fri Jul  4 11:15:35 2014
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 04 Jul 2014 12:15:35 +0100
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <53B687BB.9010103@gmail.com>
References: <10566815.3CllqoMfON@momentum> <53B687BB.9010103@gmail.com>
Message-ID: <2734024.vxftdBi7Ll@momentum>

On Friday 04 July 2014 06:53:47 Alan Reiner wrote:

> ROMix works by taking N sequential hashes and storing the results into a
> single N*32 byte lookup table.   So if N is 1,000,000, you are going to
> compute 1,000,000 and store the results into 32,000,000 sequential bytes
> of RAM.  Then you are going to do 1,000,000 lookup operations on that
> table, using the hash of the previous lookup result, to determine the
> location of next lookup (within that 32,000,000 bytes).  Assuming a
> strong hash function, this means its impossible to know in advance what
> needs to be available in RAM to lookup, and it's easiest if you simply
> hold all 32,000,000 bytes in RAM.

My idea wasn't to make hashing memory hungry; it was to make it IO-hungry.  It 
wouldn't be too hard to make an ASIC with 32MB of RAM.  Especially if it 
gained you a 1000x advantage over the other miners.  It seems that sort of 
solution is exactly the one that Mike Hearn was warning against in his blog.

> you'll only be using a small fraction of it for each "hash".  This might
> achieve what you're describing without actually requiring the full 20 GB
> of reading on ever hash.

But we want that read.  Remember the actual hash rate isn't important, what 
matters is how hard it is to reproduce.  If we make it 1000x harder to do one 
hash for everybody, we're still just as secure.  The difficulty adjustment 
algorithm ensures blocks come at 10 minutes, regardless of hash rate.  So we 
can make it harder by picking a harder algorithm -- SCRYPT or BLOWFISH, or 
just by upping the size of the data that needs hashing.  The advantage of 
upping the size of the input is that, unlike an algorithm change, you can't 
build a better ASIC to reduce the size.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com




From etotheipi at gmail.com  Fri Jul  4 11:22:19 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Fri, 04 Jul 2014 07:22:19 -0400
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <2734024.vxftdBi7Ll@momentum>
References: <10566815.3CllqoMfON@momentum> <53B687BB.9010103@gmail.com>
	<2734024.vxftdBi7Ll@momentum>
Message-ID: <53B68E6B.6090602@gmail.com>


On 07/04/2014 07:15 AM, Andy Parkins wrote:
> On Friday 04 July 2014 06:53:47 Alan Reiner wrote:
>
>> ROMix works by taking N sequential hashes and storing the results into a
>> single N*32 byte lookup table.   So if N is 1,000,000, you are going to
>> compute 1,000,000 and store the results into 32,000,000 sequential bytes
>> of RAM.  Then you are going to do 1,000,000 lookup operations on that
>> table, using the hash of the previous lookup result, to determine the
>> location of next lookup (within that 32,000,000 bytes).  Assuming a
>> strong hash function, this means its impossible to know in advance what
>> needs to be available in RAM to lookup, and it's easiest if you simply
>> hold all 32,000,000 bytes in RAM.
> My idea wasn't to make hashing memory hungry; it was to make it IO-hungry.  It 
> wouldn't be too hard to make an ASIC with 32MB of RAM.  Especially if it 
> gained you a 1000x advantage over the other miners.  It seems that sort of 
> solution is exactly the one that Mike Hearn was warning against in his blog.

I think you misundersood....  using ROMix-like algorithm, each hash
requires a different 32 MB of the blockchain.  Uniformly distributed
throughout the blockchain, and no way to predict which 32 MB until you
have actually executed it.   If the difficulty is high enough, your
miner is likely to end up going through the entire X GB blockchain while
searching for a good hash, but other nodes will only need to do 32 MB
worth of disk accesses to verify your answer (and it will be unknown
which 32 MB until they do the 1,000,000 hash+lookup operations on their
X GB blockchain).

I think that strikes a good compromise of needing access to 100% of the
blockchain, without requiring reading 20 GB to verify a block.

(Replace N=1,000,000, 32 MB and 20 GB with the appropriately calibrated
numbers in the future)



From eugen at leitl.org  Fri Jul  4 11:08:34 2014
From: eugen at leitl.org (Eugen Leitl)
Date: Fri, 4 Jul 2014 13:08:34 +0200
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <53B687BB.9010103@gmail.com>
References: <10566815.3CllqoMfON@momentum>
 <53B687BB.9010103@gmail.com>
Message-ID: <20140704110833.GM26986@leitl.org>

On Fri, Jul 04, 2014 at 06:53:47AM -0400, Alan Reiner wrote:

> Something similar could be applied to your idea.  We use the hash of a
> prevBlockHash||nonce as the starting point for 1,000,000 lookup
> operations.  The output of the previous lookup is used to determine
> which block and tx (perhaps which chunk of 32 bytes within that tx) is
> used for the next lookup operation.   This means that in order to do the
> hashing, you need the entire blockchain available to you, even though
> you'll only be using a small fraction of it for each "hash".  This might
> achieve what you're describing without actually requiring the full 20 GB
> of reading on ever hash.

Anything involving lots of unpredictable memory accesses to a large
chunk of fast memory is unASICable. That data vector could be derived
by the same means as an one time pad, and loaded and locked into
memory after boot. If you make it large enough it won't profit from
embedded RAM bandwidth/speedup. The only way to speed up would be clustering,
which doesn't offer economies of scale.



From andyparkins at gmail.com  Fri Jul  4 11:28:08 2014
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 04 Jul 2014 12:28:08 +0100
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <53B68E6B.6090602@gmail.com>
References: <10566815.3CllqoMfON@momentum> <2734024.vxftdBi7Ll@momentum>
	<53B68E6B.6090602@gmail.com>
Message-ID: <2403605.jQQrFQc91a@momentum>

On Friday 04 July 2014 07:22:19 Alan Reiner wrote:

> I think you misundersood....  using ROMix-like algorithm, each hash

I did.  Sorry.

> requires a different 32 MB of the blockchain.  Uniformly distributed
> throughout the blockchain, and no way to predict which 32 MB until you
> have actually executed it.   If the difficulty is high enough, your
> miner is likely to end up going through the entire X GB blockchain while
> searching for a good hash, but other nodes will only need to do 32 MB
> worth of disk accesses to verify your answer (and it will be unknown
> which 32 MB until they do the 1,000,000 hash+lookup operations on their
> X GB blockchain).

Excellent.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com




From gmaxwell at gmail.com  Fri Jul  4 11:37:26 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 4 Jul 2014 04:37:26 -0700
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <10566815.3CllqoMfON@momentum>
References: <10566815.3CllqoMfON@momentum>
Message-ID: <CAAS2fgRrAOgEv7Hq4BofS5UoDPsJy3hEt34od54pY6vtEq0Agw@mail.gmail.com>

On Fri, Jul 4, 2014 at 3:27 AM, Andy Parkins <andyparkins at gmail.com> wrote:
> Hello,
>
> I had a thought after reading Mike Hearn's blog about it being impossible to
> have an ASIC-proof proof of work algorithm.
>
> Perhaps I'm being dim, but I thought I'd mention my thought anyway.

Thanks for sharing. Ideas similar to what you're describing have come
up a number of times before.

I believe the particular formulation you're suggesting is not workable
for a number of reasons.

If I understand what you're proposing correctly, it that it has very
high (nearly symmetrical) verification costs, all the verifiers have
to also hash all of that information to check the result. It is
imperative for the system that the proof of work be cheap to verify,
since every system needs to verify it and have no incentive to skip
verifying it, needs to use it to block DOS attacks, etc.

I believe this design would also completely preclude lite nodes (SPV
nodes, section 8 of https://bitcoin.org/bitcoin.pdf), which are the
most popular Bitcoin wallets. SPV wallets do not need to store the
blockchain, in fact they technically need no storage at all? and are
secure, given some assumptions about the decentralization and honesty
of mining. It would make Bitcoin more or less infeasible to use on
mobile devices and force many people using wallets onto centralized
services providers which they'd have to trust to process their
transactions.

Another longer term side effect of making verification costly is that
it makes it much less reasonable to provide zero knoweldge proofs for
data in Bitcoin? closing off a whole set of useful tools like strongly
private proofs of solvency, and strongly private bitcoin-backed
pseudonymous identities.

I also believe this would also break pruning (section 7 of
bitcoin.pdf): Right now a fully validating node can be created that
uses only on the order of 1GB of disk space, without pruning the
number is 25 GB and the gap is just going to grow over time. The
elimiating of pruning would be a major scalability hit.

A smaller, but potentially still important issue is that the proposed
proof of work function would be expensive to run even once. This may
result in it not being effectively progress free? if a miner would
typically only make a small number of tries before success then it
would make mining like a race where faster miners would have a
super-linear advantage over others instead of statistically rewarding
miners fairly.

There are ways to make what I think you're trying to accomplish work
with fewer tradeoffs that have been suggested before (see
https://en.bitcoin.it/wiki/User:Gmaxwell/alt_ideas "POW which involves
queries against the UTXO set")... the general idea there is that the
candidate block header is used to randomly select one or a few random
entries in the set of spendable coins (UTXO set), which are then
included in the hashing. If the UTXO set is also committed in every
block via a hash tree when the miner finds a solution he can also
extract a compact membership proof that shows the UTXO he included in
his hashing were the right ones.  This way the work can still be
verified by systems that don't have the blockchain (though they may
use 10x more bandwidth? unfortunate on its own and perhaps enough to
still make zero knoweldge proofs less practical), and because the
queries are against the UTXO set instead of the whole blockchain it's
not incompatible with pruning.

Though even with those fixes, I am far from sure that this would be
helpful: It would not preclude specialized high efficiency hardware
for mining (see https://download.wpsoftware.net/bitcoin/asic-faq.pdf
for set of general arguments in this space), and the hardware that
existed may not be actually useful for validation in much the same way
that you cannot use existing mining hardware as a general sha256
accelerator.

This specialized hardware might look more like an massively parallel
flash or dram array with integrated computation (e.g.
http://www.eecg.toronto.edu/~dunc/cram/ )? and these differences may
not all be good: by shifting costs from operating energy to gate-count
it moves the total costs into hardware which is one-time and amortized
over use (generally for modern process, compute bound equipment costs
more in energy than the marginal costs in fabrication after a month or
two of operation), potentially creating an advantage for
earlier/larger participants. Plus a CRAM like design might also have
massive throughput advantages compared to commodity hardware operating
in a bus limited mode its hard to say until millions have been sunk in
trying to optimize it, but even if it does not? one of the arguments
made in asic-faq.pdf is because mining should be, in theory, nearly
perfect competition even the small advantage in costs from eliminating
unneeded peripherals can basically drive everyone without that
advantage out.

As an aside, there is an altcoin "boolberry" that implements something
where 2MB of data is extracted from the blockchain and then mined one.
But because the extraction is not in the inner-loop mining pools just
send it out to miners... and of course it could be uploaded to a
dedicated mining coprocessor (or FPGA, or GPU) if anyone ever got
around to doing the optimizations... it also has most of the other
issues I raised above relative to your proposal. It's still too new to
see what failure modes it suffers the most from first, and the
altcoins that it is mostly competing with suffer from their own ill
advised (_very slow_) POW.

> Apologies in advance if this is a stupid idea.

No need to be sorry? talking about these things is how people learn.
While I don't think this idea is good, and I'm even skeptical about
fixed versions? I promise you many other people were thinking similar
or even less useful things and will find the discussion interesting.



From andyparkins at gmail.com  Fri Jul  4 12:01:33 2014
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 04 Jul 2014 13:01:33 +0100
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <CAAS2fgRrAOgEv7Hq4BofS5UoDPsJy3hEt34od54pY6vtEq0Agw@mail.gmail.com>
References: <10566815.3CllqoMfON@momentum>
	<CAAS2fgRrAOgEv7Hq4BofS5UoDPsJy3hEt34od54pY6vtEq0Agw@mail.gmail.com>
Message-ID: <5408721.UFIVL0MiXs@momentum>

On Friday 04 July 2014 04:37:26 Gregory Maxwell wrote:

[excellent explanation removed for brevity]

> > Apologies in advance if this is a stupid idea.
> 
> No need to be sorry? talking about these things is how people learn.
> While I don't think this idea is good, and I'm even skeptical about
> fixed versions? I promise you many other people were thinking similar
> or even less useful things and will find the discussion interesting.

Thank you for the very thorough and courteous response.  I'm sorry that I 
suggested something that had been thought of before (seems to be the case on 
every great idea I have for Bitcoin) and was not practical; but I'm glad to 
have had your response which was certainly educational for me.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com




From mike at plan99.net  Fri Jul  4 15:20:23 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 4 Jul 2014 17:20:23 +0200
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <5408721.UFIVL0MiXs@momentum>
References: <10566815.3CllqoMfON@momentum>
	<CAAS2fgRrAOgEv7Hq4BofS5UoDPsJy3hEt34od54pY6vtEq0Agw@mail.gmail.com>
	<5408721.UFIVL0MiXs@momentum>
Message-ID: <CANEZrP3tRWuoUv8Xw5OgXRsfw4WEpTWp=UEOe-Xjt8LAr_fEPw@mail.gmail.com>

Yup, no need to apologise. If nothing else the conversations get archived
where other people can use them to get up to speed faster. A lot of these
discussions get spread across forums, lists and IRC so it can be hard to
know what the current state of the art thinking is.

Recall the second prong of my opening argument - if you could beat ASICs,
you'd end up with botnets. I prefer having the chain be dominated by a
single pool for a while than having one with a major botnet presence, given
their history of doing things like mining empty blocks and giving random
people enormous electricity bills.

I think we can make good head way if we just optimise a lot and finish
things off, to be honest. I'm not sure we need an algorithmic silver
bullet. Remember you can always outsource mining by just not having any
hardware at all, CEX style, so trying to prevent outsourcing using clever
hacks seems ultimately doomed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140704/1f440eab/attachment.html>

From bitcoin-devel at jerviss.org  Fri Jul  4 16:50:00 2014
From: bitcoin-devel at jerviss.org (kjj)
Date: Fri, 04 Jul 2014 11:50:00 -0500
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <10566815.3CllqoMfON@momentum>
References: <10566815.3CllqoMfON@momentum>
Message-ID: <53B6DB38.7010709@jerviss.org>

Just some general comments on this topic/discussion.

I suspect that there exist no algorithms which cannot be done better in 
an application-specific device than in a general purpose computer.  And 
if there is such a thing, then it must necessarily perform best on one 
specific platform, making that platform the de facto application 
specific device.

I'm not sure how one would go about proving or disproving that, but it 
seems very likely to be true.

IO-bound is exactly the same as memory bound, for devices that have 
enough memory.  20 GB is already trivial today, and you don't really get 
into ask-the-wife-for-permission money until you cross 128 GB. The 
exception would be if the IO was to an oracle outside of the device's 
control, and artificially limited in throughput.  Such a centralized 
oracle would be contrary to the goals usually stated by people thinking 
about anti-ASIC designs, so there isn't much point.

Keeping the algorithm simple, and ASIC-easy, has one other advantage.  
Just about anyone can sit down and design an ASIC for SHA, for example, 
leading to diversity in the marketplace.  A harder algorithm can still 
be made into an ASIC (or more generally into an ASD), but will require 
more skilled designers, more expensive fabrication, etc.  This actually 
concentrates the ASIC advantage into the hands of fewer people, which 
again, is contrary to the stated goals.



From ronaldbelliott at gmail.com  Fri Jul  4 18:39:07 2014
From: ronaldbelliott at gmail.com (Ron Elliott)
Date: Fri, 4 Jul 2014 11:39:07 -0700
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <53B6DB38.7010709@jerviss.org>
References: <10566815.3CllqoMfON@momentum>
	<53B6DB38.7010709@jerviss.org>
Message-ID: <CAMEND1ijTGfLw3ZJGXwnBXFjHdoePuR1DMmYRVHnVEiBSydeSg@mail.gmail.com>

I feel everyone should re-read that last paragraph as it carries the most
weight IMO.


On Fri, Jul 4, 2014 at 9:50 AM, kjj <bitcoin-devel at jerviss.org> wrote:

> Just some general comments on this topic/discussion.
>
> I suspect that there exist no algorithms which cannot be done better in
> an application-specific device than in a general purpose computer.  And
> if there is such a thing, then it must necessarily perform best on one
> specific platform, making that platform the de facto application
> specific device.
>
> I'm not sure how one would go about proving or disproving that, but it
> seems very likely to be true.
>
> IO-bound is exactly the same as memory bound, for devices that have
> enough memory.  20 GB is already trivial today, and you don't really get
> into ask-the-wife-for-permission money until you cross 128 GB. The
> exception would be if the IO was to an oracle outside of the device's
> control, and artificially limited in throughput.  Such a centralized
> oracle would be contrary to the goals usually stated by people thinking
> about anti-ASIC designs, so there isn't much point.
>
> Keeping the algorithm simple, and ASIC-easy, has one other advantage.
> Just about anyone can sit down and design an ASIC for SHA, for example,
> leading to diversity in the marketplace.  A harder algorithm can still
> be made into an ASIC (or more generally into an ASD), but will require
> more skilled designers, more expensive fabrication, etc.  This actually
> concentrates the ASIC advantage into the hands of fewer people, which
> again, is contrary to the stated goals.
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
- Ron
end of line.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140704/99018773/attachment.html>

From voisine at gmail.com  Fri Jul  4 19:54:37 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Fri, 4 Jul 2014 12:54:37 -0700
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <CAMEND1ijTGfLw3ZJGXwnBXFjHdoePuR1DMmYRVHnVEiBSydeSg@mail.gmail.com>
References: <10566815.3CllqoMfON@momentum> <53B6DB38.7010709@jerviss.org>
	<CAMEND1ijTGfLw3ZJGXwnBXFjHdoePuR1DMmYRVHnVEiBSydeSg@mail.gmail.com>
Message-ID: <CACq0ZD79GFPBK3_Evt36tQMuhAe3NDoUAd=EP9+HJRE_w5LgRQ@mail.gmail.com>

Agreed. If the POW is most efficient on general purpose CPUs, that
means Intel, AMD and maybe IBM would be the only entities capable of
producing competitive mining equipment.

Aaron


Aaron Voisine
breadwallet.com


On Fri, Jul 4, 2014 at 11:39 AM, Ron Elliott <ronaldbelliott at gmail.com> wrote:
> I feel everyone should re-read that last paragraph as it carries the most
> weight IMO.
>
>
> On Fri, Jul 4, 2014 at 9:50 AM, kjj <bitcoin-devel at jerviss.org> wrote:
>>
>> Just some general comments on this topic/discussion.
>>
>> I suspect that there exist no algorithms which cannot be done better in
>> an application-specific device than in a general purpose computer.  And
>> if there is such a thing, then it must necessarily perform best on one
>> specific platform, making that platform the de facto application
>> specific device.
>>
>> I'm not sure how one would go about proving or disproving that, but it
>> seems very likely to be true.
>>
>> IO-bound is exactly the same as memory bound, for devices that have
>> enough memory.  20 GB is already trivial today, and you don't really get
>> into ask-the-wife-for-permission money until you cross 128 GB. The
>> exception would be if the IO was to an oracle outside of the device's
>> control, and artificially limited in throughput.  Such a centralized
>> oracle would be contrary to the goals usually stated by people thinking
>> about anti-ASIC designs, so there isn't much point.
>>
>> Keeping the algorithm simple, and ASIC-easy, has one other advantage.
>> Just about anyone can sit down and design an ASIC for SHA, for example,
>> leading to diversity in the marketplace.  A harder algorithm can still
>> be made into an ASIC (or more generally into an ASD), but will require
>> more skilled designers, more expensive fabrication, etc.  This actually
>> concentrates the ASIC advantage into the hands of fewer people, which
>> again, is contrary to the stated goals.
>>
>>
>> ------------------------------------------------------------------------------
>> Open source business process management suite built on Java and Eclipse
>> Turn processes into business applications with Bonita BPM Community
>> Edition
>> Quickly connect people, data, and systems into organized workflows
>> Winner of BOSSIE, CODIE, OW2 and Gartner awards
>> http://p.sf.net/sfu/Bonitasoft
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> --
> - Ron
> end of line.
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jtimon at monetize.io  Fri Jul  4 20:21:42 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 4 Jul 2014 22:21:42 +0200
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <53B6DB38.7010709@jerviss.org>
References: <10566815.3CllqoMfON@momentum>
	<53B6DB38.7010709@jerviss.org>
Message-ID: <CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>

On 7/4/14, kjj <bitcoin-devel at jerviss.org> wrote:
> I suspect that there exist no algorithms which cannot be done better in
> an application-specific device than in a general purpose computer.  And
> if there is such a thing, then it must necessarily perform best on one
> specific platform, making that platform the de facto application
> specific device.
>
> I'm not sure how one would go about proving or disproving that, but it
> seems very likely to be true.

I assumed this was obvious and self-evident for anyone who knows what
a Turing machine is, but judging from the number of smart people
wasting their time on the pursue of the "anti-ASIC" myth (also known
as pow wankery) it seems I was wrong.
Anything you can do with software you can do with hardware and
viceversa (you can even do it with ropes and fire in Minecraft!!)
Does this really need any proof?
I think it's the hard-pow cultists who have to provide a counterexample.

Very often you just need to query-replace "ASIC" with "specialized
hardware" to prove that what they're saying makes no sense.

> Keeping the algorithm simple, and ASIC-easy, has one other advantage.
> Just about anyone can sit down and design an ASIC for SHA, for example,
> leading to diversity in the marketplace.  A harder algorithm can still
> be made into an ASIC (or more generally into an ASD), but will require
> more skilled designers, more expensive fabrication, etc.  This actually
> concentrates the ASIC advantage into the hands of fewer people, which
> again, is contrary to the stated goals.

Yep, I think this is the strongest argument against "hard-pow".
But unfortunately you even find people that want "anti-ASIC without
being anti-GPU", which is funny because GPU just has Nvidia and AMD
and because unlike "anti-ASIC", anti-GPU is actually possible (despite
Litecoin's Scrypt having miserably failed on both accounts).

Interestingly enough, Greg Maxwell told me that the energetc advantage
of memory-hard pow ASICs is even greater than the advantage for SHA
ASICs.

Anyway, I'm working on a branch to encapsulate the proof of work that
should serve people to more easily experiment with alternate proofs on
top of bitcoind's code. I plan to use it for private chains ("proof of
signature" or "proof of script" if you prefer), and although it's not
ready yet, some people may be interested or may want to give some
feedback:

https://github.com/jtimon/bitcoin/tree/proof

I don't know if it will make it into master, but by specializing
ProofOfWork with TestnetProofOfWork we could remove
Params().AllowMinDifficultyBlocks() and its checks.

-- 
Jorge Tim?n



From luke at dashjr.org  Fri Jul  4 20:38:30 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 4 Jul 2014 20:38:30 +0000
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>
References: <10566815.3CllqoMfON@momentum> <53B6DB38.7010709@jerviss.org>
	<CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>
Message-ID: <201407042038.30993.luke@dashjr.org>

On Friday, July 04, 2014 8:21:42 PM Jorge Tim?n wrote:
> On 7/4/14, kjj <bitcoin-devel at jerviss.org> wrote:
> > I suspect that there exist no algorithms which cannot be done better in
> > an application-specific device than in a general purpose computer.  And
> > if there is such a thing, then it must necessarily perform best on one
> > specific platform, making that platform the de facto application
> > specific device.
> > 
> > I'm not sure how one would go about proving or disproving that, but it
> > seems very likely to be true.
> 
> I assumed this was obvious and self-evident for anyone who knows what
> a Turing machine is, but judging from the number of smart people
> wasting their time on the pursue of the "anti-ASIC" myth (also known
> as pow wankery) it seems I was wrong.
> Anything you can do with software you can do with hardware and
> viceversa (you can even do it with ropes and fire in Minecraft!!)
> Does this really need any proof?
> I think it's the hard-pow cultists who have to provide a counterexample.

Really, if people want to pursue a goal anything like this, they should be 
looking for "ASIC already widely owned" as the property rather than "anti-
ASIC". Thus, a sufficiently memory-hard PoW would really be "RAM is the ASIC". 
Whether it's possible to make this or not, is another question. And then we 
get back to "is is really a desirable property to have people capable of 
mining who have not given any indication of interest?"



From randi at codehalo.com  Fri Jul  4 20:55:04 2014
From: randi at codehalo.com (Randi Joseph)
Date: Fri, 04 Jul 2014 16:55:04 -0400
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>
References: <10566815.3CllqoMfON@momentum>	<53B6DB38.7010709@jerviss.org>
	<CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>
Message-ID: <53B714A8.1080603@codehalo.com>

Hi All,

This is a bit tangential to the conversation, but since the genesis of 
this conversation is Mike's decentralization blog post, I decided to 
post here.

Perhaps the solution to the mining problem lies in the reward structure 
rather than in the proof of work/asics.

Is it possible instead to allocate a portion of the reward to " a # of 
runner up(s)" even though the runner-up(s) block will be orphaned? For 
example, X% of the block reward goes to Y number of runner-ups based on 
some type of criteria?

This will appear to be a bit like a tax on the winner, but it could 
potentially solve the problem, since a large pool would not want to 
split the pool up to solve multiple blocks.

There are some possible downsides, like probably having to keep those 
orphaned blocks around in the future, etc.

If this is possible, the question that remains then, what would be the 
criteria for the X% payout/allocation?

-Randi



From mike at plan99.net  Sat Jul  5 08:43:05 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 5 Jul 2014 10:43:05 +0200
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <53B714A8.1080603@codehalo.com>
References: <10566815.3CllqoMfON@momentum> <53B6DB38.7010709@jerviss.org>
	<CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>
	<53B714A8.1080603@codehalo.com>
Message-ID: <CANEZrP3v3Racyt-b9_DLMKuQ8UMBkgEa8kfGmPjcSssmrDHkhA@mail.gmail.com>

>
> Is it possible instead to allocate a portion of the reward to " a # of
> runner up(s)" even though the runner-up(s) block will be orphaned?
>

There's really no concept of a "runner up" because hashing is progress
free. It's unintuitive and often trips people up. There's no concept that
everyone is 95% of the way to finding a solution and then someone pips you
to the post. It's more like playing the lottery over and over again.
Doesn't matter how many times you did it before, the next time your chances
are the same.

A better concept is of rewarding "near miss" solutions which is what we
already do of course, via pools, which pay you for shares which don't quite
meet the difficulty target but almost do. So the question is how can we
implement pools which have this reward structure (which obviously works
well) without miners simultaneously giving up their right to block creation
either due to technical problems or sheer lazyness.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140705/1d09c441/attachment.html>

From randi at codehalo.com  Mon Jul  7 00:20:38 2014
From: randi at codehalo.com (Randi Joseph)
Date: Sun, 06 Jul 2014 20:20:38 -0400
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <CANEZrP3v3Racyt-b9_DLMKuQ8UMBkgEa8kfGmPjcSssmrDHkhA@mail.gmail.com>
References: <10566815.3CllqoMfON@momentum>	<53B6DB38.7010709@jerviss.org>	<CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>	<53B714A8.1080603@codehalo.com>
	<CANEZrP3v3Racyt-b9_DLMKuQ8UMBkgEa8kfGmPjcSssmrDHkhA@mail.gmail.com>
Message-ID: <53B9E7D6.2050703@codehalo.com>

Thanks Mike.

Indeed, I am aware of current approach, which is why I was suggesting 
this as an alternative.
I haven't thought about it enough, and perhaps it was too radical a 
rethinking - just wanted to see what the smarter minds thought.

Thanks again.

-Randi

On 7/5/14, 4:43 AM, Mike Hearn wrote:
>
>     Is it possible instead to allocate a portion of the reward to " a # of
>     runner up(s)" even though the runner-up(s) block will be orphaned?
>
>
> There's really no concept of a "runner up" because hashing is progress 
> free. It's unintuitive and often trips people up. There's no concept 
> that everyone is 95% of the way to finding a solution and then someone 
> pips you to the post. It's more like playing the lottery over and over 
> again. Doesn't matter how many times you did it before, the next time 
> your chances are the same.
>
> A better concept is of rewarding "near miss" solutions which is what 
> we already do of course, via pools, which pay you for shares which 
> don't quite meet the difficulty target but almost do. So the question 
> is how can we implement pools which have this reward structure (which 
> obviously works well) without miners simultaneously giving up their 
> right to block creation either due to technical problems or sheer 
> lazyness.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140706/1936adfc/attachment.html>

From odinn.cyberguerrilla at riseup.net  Mon Jul  7 06:12:42 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Sun, 6 Jul 2014 23:12:42 -0700
Subject: [Bitcoin-development] ASIC-proof mining
In-Reply-To: <53B9E7D6.2050703@codehalo.com>
References: <10566815.3CllqoMfON@momentum> <53B6DB38.7010709@jerviss.org>
	<CAC1+kJOSAoz_BBaFnv4u-Dng7Y4h2tqOHSFRfuKvY87eBR71Gw@mail.gmail.com>
	<53B714A8.1080603@codehalo.com>
	<CANEZrP3v3Racyt-b9_DLMKuQ8UMBkgEa8kfGmPjcSssmrDHkhA@mail.gmail.com>
	<53B9E7D6.2050703@codehalo.com>
Message-ID: <68ffba5f8bc28bb7a9c2f4f7f15ee683.squirrel@fruiteater.riseup.net>

Just as an aside to this lengthy convo, the Cryptonote-based BCN recently
had some interesting updates which made it easier for ordinary computers
(nothing special) to handle it.

I realize that's not Bitcoin, but I thought I'd throw it out there.

> Thanks Mike.
>
> Indeed, I am aware of current approach, which is why I was suggesting
> this as an alternative.
> I haven't thought about it enough, and perhaps it was too radical a
> rethinking - just wanted to see what the smarter minds thought.
>
> Thanks again.
>
> -Randi
>
> On 7/5/14, 4:43 AM, Mike Hearn wrote:
>>
>>     Is it possible instead to allocate a portion of the reward to " a #
>> of
>>     runner up(s)" even though the runner-up(s) block will be orphaned?
>>
>>
>> There's really no concept of a "runner up" because hashing is progress
>> free. It's unintuitive and often trips people up. There's no concept
>> that everyone is 95% of the way to finding a solution and then someone
>> pips you to the post. It's more like playing the lottery over and over
>> again. Doesn't matter how many times you did it before, the next time
>> your chances are the same.
>>
>> A better concept is of rewarding "near miss" solutions which is what
>> we already do of course, via pools, which pay you for shares which
>> don't quite meet the difficulty target but almost do. So the question
>> is how can we implement pools which have this reward structure (which
>> obviously works well) without miners simultaneously giving up their
>> right to block creation either due to technical problems or sheer
>> lazyness.
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community
> Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From odinn.cyberguerrilla at riseup.net  Mon Jul  7 06:34:53 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Sun, 6 Jul 2014 23:34:53 -0700
Subject: [Bitcoin-development] Anyone still using SOCKS4?
In-Reply-To: <CA+s+GJAei15doCg-h2BK6tEvfwy5m5YHPhg_+8b=G4ew41Mqjw@mail.gmail.com>
References: <CA+s+GJDSPS=zsM64wHaG1CucHVkO==L1QkHYiciUo9iJ-RADng@mail.gmail.com>
	<CA+s+GJAei15doCg-h2BK6tEvfwy5m5YHPhg_+8b=G4ew41Mqjw@mail.gmail.com>
Message-ID: <4f55608991d5377117ecf1728cd8db0c.squirrel@fruiteater.riseup.net>

Wait, I thought SOCKS4 was supposed to help somehow in terms of prevention
of leaking of information?

Or maybe I am misremembering.  Here's what I'm thinking of...
1) https://trac.torproject.org/projects/tor/wiki/doc/Preventing_Tor_DNS_Leaks

2) More regarding TOR,
"

I keep seeing these warnings about SOCKS and DNS information leaks. Should
I worry?

The warning is:

Your application (using socks5 on port %d) is giving Tor only an IP
address. Applications that do DNS resolves themselves may leak
information. Consider using Socks4A (e.g. via Polipo or socat) instead.

https://www.torproject.org/docs/faq#WarningsAboutSOCKSandDNSInformationLeaks

I'm not sure that means I'm screaming fire or anything, but isn't there
some good reason for SOCKS4 and SOCKS4A?
Or maybe another way to ask this is:  Looking at an example in which
someone is running Tor, Privoxy, I2P, and FoxyProxy together while running
Bitcoin Core, would there be a problem with having a setting for SOCKS4A
for traffic in such a setup given the changes proposed to remove SOCKS4 as
suggested in bitcoin-development?

Probably there is just a simple answer to that last question, like "no."
But I thought I'd ask.

> On Wed, Jun 11, 2014 at 5:39 PM, Wladimir <laanwj at gmail.com> wrote:
>
>> If no one screams fire, we plan on removing support for it in the next
>> major release, for two reasons:
>>
>> - It would remove some crufty, hardly tested code paths
>>
>> - SOCKS5 offers better privacy as it allows DNS redirection
>
> Another one:
>
> - SOCKS5 supports IPv6
>
> Last call...
>
> Wladimir
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community
> Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From laanwj at gmail.com  Mon Jul  7 06:47:22 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 7 Jul 2014 08:47:22 +0200
Subject: [Bitcoin-development] Anyone still using SOCKS4?
In-Reply-To: <4f55608991d5377117ecf1728cd8db0c.squirrel@fruiteater.riseup.net>
References: <CA+s+GJDSPS=zsM64wHaG1CucHVkO==L1QkHYiciUo9iJ-RADng@mail.gmail.com>
	<CA+s+GJAei15doCg-h2BK6tEvfwy5m5YHPhg_+8b=G4ew41Mqjw@mail.gmail.com>
	<4f55608991d5377117ecf1728cd8db0c.squirrel@fruiteater.riseup.net>
Message-ID: <CA+s+GJDPnz-JYbhTZw2cLVb1QrerrHVim9GRBdgVPsOeTLFJ+Q@mail.gmail.com>

On Mon, Jul 7, 2014 at 8:34 AM, Odinn Cyberguerrilla
<odinn.cyberguerrilla at riseup.net> wrote:
> Wait, I thought SOCKS4 was supposed to help somehow in terms of prevention
> of leaking of information?

SOCKS4a (unlike SOCKS4) supports doing DNS lookups on the server, but
it is not supported by bitcoin core. So it is not part of this
discussion.

And SOCKS5 can do all of that just as well. But if you feel like
contributing SOCKS4a support that's fine with me.

Wladimir



From odinn.cyberguerrilla at riseup.net  Mon Jul  7 06:54:23 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Sun, 6 Jul 2014 23:54:23 -0700
Subject: [Bitcoin-development] Anyone still using SOCKS4?
In-Reply-To: <CA+s+GJDPnz-JYbhTZw2cLVb1QrerrHVim9GRBdgVPsOeTLFJ+Q@mail.gmail.com>
References: <CA+s+GJDSPS=zsM64wHaG1CucHVkO==L1QkHYiciUo9iJ-RADng@mail.gmail.com>
	<CA+s+GJAei15doCg-h2BK6tEvfwy5m5YHPhg_+8b=G4ew41Mqjw@mail.gmail.com>
	<4f55608991d5377117ecf1728cd8db0c.squirrel@fruiteater.riseup.net>
	<CA+s+GJDPnz-JYbhTZw2cLVb1QrerrHVim9GRBdgVPsOeTLFJ+Q@mail.gmail.com>
Message-ID: <482f7271864acb611912b0ed901ad601.squirrel@fruiteater.riseup.net>

> On Mon, Jul 7, 2014 at 8:34 AM, Odinn Cyberguerrilla
> <odinn.cyberguerrilla at riseup.net> wrote:
>> Wait, I thought SOCKS4 was supposed to help somehow in terms of
>> prevention
>> of leaking of information?
>
> SOCKS4a (unlike SOCKS4) supports doing DNS lookups on the server, but
> it is not supported by bitcoin core. So it is not part of this
> discussion.
>
> And SOCKS5 can do all of that just as well. But if you feel like
> contributing SOCKS4a support that's fine with me.
>
> Wladimir
>

OK, thanks Wladimir.




From colonizare at gmail.com  Mon Jul  7 17:57:46 2014
From: colonizare at gmail.com (JMOlmos GMail)
Date: Mon, 7 Jul 2014 14:57:46 -0300
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CANVdSAqEyqavSHea3uhzVWGKQU0UHGZDVqEiF3Ox2XkhwM=zpA@mail.gmail.com>
References: <53AC0439.9070501@googlemail.com>
	<20140703012131.1A3D9E00A82@quidecco.de>
	<CANVdSAqEyqavSHea3uhzVWGKQU0UHGZDVqEiF3Ox2XkhwM=zpA@mail.gmail.com>
Message-ID: <CANVdSAp_1wBYuh2+hcR_HCtOjmwDm8EJdWLdJ4ZWcd5PARVW6A@mail.gmail.com>

And for translation's facility :P


2014-07-07 14:57 GMT-03:00 JMOlmos GMail <colonizare at gmail.com>:

> And for translation's facility :P
>
>
> 2014-07-02 22:21 GMT-03:00 Isidor Zeuner <cryptocurrencies at quidecco.de>:
>
> Hello Krzysztof,
>>
>> [...]
>> > As before, it can be found under:
>> >
>> > http://enetium.com/resources/Bitcoin.pdf
>> >
>> > I hope it will prove useful to the community and thank in advance
>> > for any further improvement proposals.
>> >
>>
>> I think it's great work and provides a good reference for those
>> who want to get some insight into Bitcoin's design.
>>
>> Have you considered putting the document source under version control,
>> which may facilitate tracking future protocol improvements in the
>> document easily?
>>
>> Best regards,
>>
>> Isidor
>>
>>
>> ------------------------------------------------------------------------------
>> Open source business process management suite built on Java and Eclipse
>> Turn processes into business applications with Bonita BPM Community
>> Edition
>> Quickly connect people, data, and systems into organized workflows
>> Winner of BOSSIE, CODIE, OW2 and Gartner awards
>> http://p.sf.net/sfu/Bonitasoft
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140707/71be7580/attachment.html>

From chris.dcosta at meek.io  Tue Jul  8 15:29:09 2014
From: chris.dcosta at meek.io (Chris D'Costa)
Date: Tue, 8 Jul 2014 17:29:09 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CANVdSAp_1wBYuh2+hcR_HCtOjmwDm8EJdWLdJ4ZWcd5PARVW6A@mail.gmail.com>
References: <53AC0439.9070501@googlemail.com>
	<20140703012131.1A3D9E00A82@quidecco.de>
	<CANVdSAqEyqavSHea3uhzVWGKQU0UHGZDVqEiF3Ox2XkhwM=zpA@mail.gmail.com>
	<CANVdSAp_1wBYuh2+hcR_HCtOjmwDm8EJdWLdJ4ZWcd5PARVW6A@mail.gmail.com>
Message-ID: <CAC0TF=kuC9zdyvJXKiBzV=5anAt5szcD-Otp1EeoD5ukm-W1Uw@mail.gmail.com>

This is probably the best, most complete resource available for those who
don't want to (or don't know how to) wade through the code. Well done.


On 7 July 2014 19:57, JMOlmos GMail <colonizare at gmail.com> wrote:

> And for translation's facility :P
>
>
> 2014-07-07 14:57 GMT-03:00 JMOlmos GMail <colonizare at gmail.com>:
>
>> And for translation's facility :P
>>
>>
>> 2014-07-02 22:21 GMT-03:00 Isidor Zeuner <cryptocurrencies at quidecco.de>:
>>
>> Hello Krzysztof,
>>>
>>> [...]
>>> > As before, it can be found under:
>>> >
>>> > http://enetium.com/resources/Bitcoin.pdf
>>> >
>>> > I hope it will prove useful to the community and thank in advance
>>> > for any further improvement proposals.
>>> >
>>>
>>> I think it's great work and provides a good reference for those
>>> who want to get some insight into Bitcoin's design.
>>>
>>> Have you considered putting the document source under version control,
>>> which may facilitate tracking future protocol improvements in the
>>> document easily?
>>>
>>> Best regards,
>>>
>>> Isidor
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Open source business process management suite built on Java and Eclipse
>>> Turn processes into business applications with Bonita BPM Community
>>> Edition
>>> Quickly connect people, data, and systems into organized workflows
>>> Winner of BOSSIE, CODIE, OW2 and Gartner awards
>>> http://p.sf.net/sfu/Bonitasoft
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140708/7230fa17/attachment.html>

From bip at mattwhitlock.name  Tue Jul  8 20:04:19 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Tue, 08 Jul 2014 16:04:19 -0400
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CAC0TF=kuC9zdyvJXKiBzV=5anAt5szcD-Otp1EeoD5ukm-W1Uw@mail.gmail.com>
References: <53AC0439.9070501@googlemail.com>
	<CANVdSAp_1wBYuh2+hcR_HCtOjmwDm8EJdWLdJ4ZWcd5PARVW6A@mail.gmail.com>
	<CAC0TF=kuC9zdyvJXKiBzV=5anAt5szcD-Otp1EeoD5ukm-W1Uw@mail.gmail.com>
Message-ID: <2098096.PBWFJaSQzq@crushinator>

Is anyone working on a similar specification document for Satoshi's P2P protocol?  I know how blocks and transactions are structured and verified, but I'm interested in knowing how they're communicated over the network.



From voisine at gmail.com  Tue Jul  8 21:08:52 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Tue, 8 Jul 2014 14:08:52 -0700
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <2098096.PBWFJaSQzq@crushinator>
References: <53AC0439.9070501@googlemail.com>
	<CANVdSAp_1wBYuh2+hcR_HCtOjmwDm8EJdWLdJ4ZWcd5PARVW6A@mail.gmail.com>
	<CAC0TF=kuC9zdyvJXKiBzV=5anAt5szcD-Otp1EeoD5ukm-W1Uw@mail.gmail.com>
	<2098096.PBWFJaSQzq@crushinator>
Message-ID: <CACq0ZD5F-8JOctxh1qm=HRg9_fXdyDT5sgzuU5N9r9mt7YCC+Q@mail.gmail.com>

I wrote down a really short description in code comments for
breadwallet, based on what I figured out:

https://github.com/voisine/breadwallet/blob/master/BreadWallet/BRPeer.m#L318


Aaron Voisine
breadwallet.com


On Tue, Jul 8, 2014 at 1:04 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> Is anyone working on a similar specification document for Satoshi's P2P protocol?  I know how blocks and transactions are structured and verified, but I'm interested in knowing how they're communicated over the network.
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From jtimon at monetize.io  Tue Jul  8 22:40:00 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 9 Jul 2014 00:40:00 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <2098096.PBWFJaSQzq@crushinator>
References: <53AC0439.9070501@googlemail.com>
	<CANVdSAp_1wBYuh2+hcR_HCtOjmwDm8EJdWLdJ4ZWcd5PARVW6A@mail.gmail.com>
	<CAC0TF=kuC9zdyvJXKiBzV=5anAt5szcD-Otp1EeoD5ukm-W1Uw@mail.gmail.com>
	<2098096.PBWFJaSQzq@crushinator>
Message-ID: <CAC1+kJMf_LChQ-39B4tXQ1YePvEBFNiYw=J2QvD5f952+45B4A@mail.gmail.com>

There's this (not sure how complete it is):
https://en.bitcoin.it/wiki/Protocol_specification

Also there's a good introduction to technical details here:

https://bitcointalk.org/index.php?topic=375524.0

I hope that is useful.


On 7/8/14, Matt Whitlock <bip at mattwhitlock.name> wrote:
> Is anyone working on a similar specification document for Satoshi's P2P
> protocol?  I know how blocks and transactions are structured and verified,
> but I'm interested in knowing how they're communicated over the network.
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n



From k.okupski at googlemail.com  Wed Jul  9 09:34:42 2014
From: k.okupski at googlemail.com (Krzysztof Okupski)
Date: Wed, 09 Jul 2014 11:34:42 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
Message-ID: <53BD0CB2.5020509@googlemail.com>

Dear all,

thank you for your words of encouragement. I'll upload
the raw .tex files on github shortly. If you have any other
proposals, please let me know. Especially if there are any
suggestions on how the signature section can be revised.

More information on network functionality can be found on:
https://en.bitcoin.it/wiki/Network

Details can be found here:
https://en.bitcoin.it/wiki/Satoshi_Client_Block_Exchange
https://en.bitcoin.it/wiki/Satoshi_Client_Transaction_Exchange
https://en.bitcoin.it/wiki/Satoshi_Client_Initialization_and_Startup
https://en.bitcoin.it/wiki/Satoshi_Client_Node_Discovery
https://en.bitcoin.it/wiki/Satoshi_Client_Node_Connectivity
https://en.bitcoin.it/wiki/Satoshi_Client_Sockets_and_Messages


Warm greetings,
Krzysztof



From mike at plan99.net  Wed Jul  9 11:57:58 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 9 Jul 2014 13:57:58 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <2098096.PBWFJaSQzq@crushinator>
References: <53AC0439.9070501@googlemail.com>
	<CANVdSAp_1wBYuh2+hcR_HCtOjmwDm8EJdWLdJ4ZWcd5PARVW6A@mail.gmail.com>
	<CAC0TF=kuC9zdyvJXKiBzV=5anAt5szcD-Otp1EeoD5ukm-W1Uw@mail.gmail.com>
	<2098096.PBWFJaSQzq@crushinator>
Message-ID: <CANEZrP1uuPReuOR=0PS5bff43umk-PP9OgYd-MTycFLsqnTp9g@mail.gmail.com>

On Tue, Jul 8, 2014 at 10:04 PM, Matt Whitlock <bip at mattwhitlock.name>
wrote:

> Is anyone working on a similar specification document for Satoshi's P2P
> protocol?  I know how blocks and transactions are structured and verified,
> but I'm interested in knowing how they're communicated over the network.


There's a high level guide here:

https://bitcoin.org/en/developer-guide#p2p-network

It's not a protocol specification however, more a lay-of-the-land type
description. The protocol is not very complicated however. The wiki page
describes it adequately. It's basically just a framing mechanism with
excessively aggressive checksumming, a version handshake, an inventory
mechanism to cut down on bandwidth usage, the alerts, and that's about it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140709/b2fb0530/attachment.html>

From mike at plan99.net  Thu Jul 10 14:29:12 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 10 Jul 2014 16:29:12 +0200
Subject: [Bitcoin-development] Draft BIP for geutxos message
Message-ID: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>

I opened up a pull req for a draft BIP for getutxo.

   https://github.com/bitcoin/bips/pull/88

I include a rendering below for your reading convenience. If you'd like to
comment on design/security/etc then please first familiarise yourself with
the long discussions that were already had here:

   https://github.com/bitcoin/bitcoin/pull/4351


  BIP: 45
  Title: getutxo message
  Author: Mike Hearn <hearn at vinumeris.com>
  Status: Draft
  Type: Standards Track
  Created: 2014-06-10

Table of Contents

   - Abstract
      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Abstract>
      - Motivation
      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Motivation>
      - Specification
      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Specification>
      - Backward compatibility
      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Backward_compatibility>
      - Authentication
      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Authentication>
      - Implementation
      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Implementation>

<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#abstract>
Abstract

This document describes a small P2P protocol extension that performs UTXO
lookups given a set of outpoints.
<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#motivation>
Motivation

All full Bitcoin nodes maintain a database called the unspent transaction
output set. This set is how double spending is checked for: to be valid a
transaction must identify unspent outputs in this set using an identifier
called an "outpoint", which is merely the hash of the output's containing
transaction plus an index.

The ability to query this can sometimes be useful for a lightweight/SPV
client which does not have the full UTXO set at hand. For example, it can
be useful in applications implementing assurance contracts to do a quick
check when a new pledge becomes visible to test whether that pledge was
already revoked via a double spend. Although this message is not strictly
necessary because e.g. such an app could be implemented by fully
downloading and storing the block chain, it is useful for obtaining
acceptable performance and resolving various UI cases.

Another example of when this data can be useful is for performing floating
fee calculations in an SPV wallet. This use case requires some other
changes to the Bitcoin protocol however, so we will not dwell on it here.
<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#specification>
Specification

Two new messages are defined. The "getutxos" message has the following
structure:

Field SizeDescriptionData typeComments1check mempoolboolWhether to apply
mempool transactions during the calculation, thus exposing their UTXOs and
removing outputs that they spend.?outpointsvectorThe list of outpoints to
be queried. Each outpoint is serialized in the same way it is in a tx
message.

The response message "utxos" has the following structure:

Field SizeDescriptionData typeComments4chain heightuint32The height of the
chain at the moment the result was calculated.32chain tip hashuint256Block
hash of the top of the chain at the moment the result was calculated.?hit
bitmapbyte[]An array of bytes encoding one bit for each outpoint queried.
Each bit indicates whether the queried outpoint was found in the UTXO set
or not.?result utxosresult[]A list of result objects (defined below), one
for each outpoint that is unspent (i.e. has a bit set in the bitmap).

The result object is defined as:

Field SizeDescriptionData typeComments4tx versionuint32The version number
of the transaction the UTXO was found in.4heightuint256The height of the
block containing the defining transaction, or 0x7FFFFFFF if the tx is in
the mempool.?outputCTxOutThe output itself, serialized in the same way as
in a tx message.
<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#backward-compatibility>Backward
compatibility

Nodes indicate support by advertising a protocol version above 70003 and by
setting a new NODE_GETUTXO flag in their nServices field, which has a value
of 2 (1
<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#authentication>
Authentication

The UTXO set is not currently authenticated by anything. There are
proposals to resolve this by introducing a new consensus rule that commits
to a root hash of the UTXO set in blocks, however this feature is not
presently available in the Bitcoin protocol. Once it is, the utxos message
could be upgraded to include Merkle branches showing inclusion of the UTXOs
in the committed sets.

If the requesting client is looking up outputs for a signed transaction
that they have locally, the client can partly verify the returned output by
running the input scripts with it. Currently this verifies only that the
script is correct. A future version of the Bitcoin protocol is likely to
also allow the value to be checked in this way. It does not show that the
output is really unspent or was ever actually created in the block chain
however.

If the requesting client has a mapping of chain heights to block hashes in
the best chain e.g. obtained via getheaders, then they can obtain a proof
that the output did at one point exist by requesting the block and
searching for the output within it. When combined with Bloom filtering this
can be reasonably efficient.

Note that even when the outputs are being checked against something this
protocol has the same security model as Bloom filtering: a remote node can
lie through omission by claiming the requested UTXO does not exist / was
already spent (they are the same, from the perspective of a full node).
Querying multiple nodes and combining their answers can be a partial
solution to this, although as nothing authenticates the Bitcoin P2P network
a man in the middle could still yield incorrect results.
<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#implementation>
Implementation

https://github.com/bitcoin/bitcoin/pull/4351/files
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140710/d173eed7/attachment.html>

From mike at plan99.net  Thu Jul 10 14:44:11 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 10 Jul 2014 16:44:11 +0200
Subject: [Bitcoin-development] Draft BIP for geutxos message
In-Reply-To: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
References: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
Message-ID: <CANEZrP3++BPQsX_oxw-BTOgOhf5Gt1oaGz=hJ_iBcwVCzrS+ZA@mail.gmail.com>

I took the number out, it is now just "the getutxo bip" until a number is
assigned.


On Thu, Jul 10, 2014 at 4:29 PM, Mike Hearn <mike at plan99.net> wrote:

> I opened up a pull req for a draft BIP for getutxo.
>
>    https://github.com/bitcoin/bips/pull/88
>
> I include a rendering below for your reading convenience. If you'd like to
> comment on design/security/etc then please first familiarise yourself with
> the long discussions that were already had here:
>
>    https://github.com/bitcoin/bitcoin/pull/4351
>
>
>   BIP: 45
>   Title: getutxo message
>   Author: Mike Hearn <hearn at vinumeris.com>
>   Status: Draft
>   Type: Standards Track
>   Created: 2014-06-10
>
>  Table of Contents
>
>    - Abstract
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Abstract>
>       - Motivation
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Motivation>
>       - Specification
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Specification>
>       - Backward compatibility
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Backward_compatibility>
>       - Authentication
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Authentication>
>       - Implementation
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Implementation>
>
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#abstract>
> Abstract
>
> This document describes a small P2P protocol extension that performs UTXO
> lookups given a set of outpoints.
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#motivation>
> Motivation
>
> All full Bitcoin nodes maintain a database called the unspent transaction
> output set. This set is how double spending is checked for: to be valid a
> transaction must identify unspent outputs in this set using an identifier
> called an "outpoint", which is merely the hash of the output's containing
> transaction plus an index.
>
> The ability to query this can sometimes be useful for a lightweight/SPV
> client which does not have the full UTXO set at hand. For example, it can
> be useful in applications implementing assurance contracts to do a quick
> check when a new pledge becomes visible to test whether that pledge was
> already revoked via a double spend. Although this message is not strictly
> necessary because e.g. such an app could be implemented by fully
> downloading and storing the block chain, it is useful for obtaining
> acceptable performance and resolving various UI cases.
>
> Another example of when this data can be useful is for performing floating
> fee calculations in an SPV wallet. This use case requires some other
> changes to the Bitcoin protocol however, so we will not dwell on it here.
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#specification>
> Specification
>
> Two new messages are defined. The "getutxos" message has the following
> structure:
>
>  Field Size DescriptionData typeComments 1check mempoolbool Whether to
> apply mempool transactions during the calculation, thus exposing their
> UTXOs and removing outputs that they spend. ?outpointsvector The list of
> outpoints to be queried. Each outpoint is serialized in the same way it is
> in a tx message.
>
> The response message "utxos" has the following structure:
>
>  Field Size DescriptionData typeComments 4chain heightuint32 The height
> of the chain at the moment the result was calculated. 32chain tip hash
> uint256 Block hash of the top of the chain at the moment the result was
> calculated. ?hit bitmapbyte[] An array of bytes encoding one bit for each
> outpoint queried. Each bit indicates whether the queried outpoint was found
> in the UTXO set or not. ?result utxosresult[] A list of result objects
> (defined below), one for each outpoint that is unspent (i.e. has a bit set
> in the bitmap).
>
> The result object is defined as:
>
>  Field Size DescriptionData typeComments 4tx versionuint32 The version
> number of the transaction the UTXO was found in. 4heightuint256 The
> height of the block containing the defining transaction, or 0x7FFFFFFF if
> the tx is in the mempool. ?outputCTxOut The output itself, serialized in
> the same way as in a tx message.
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#backward-compatibility>Backward
> compatibility
>
> Nodes indicate support by advertising a protocol version above 70003 and
> by setting a new NODE_GETUTXO flag in their nServices field, which has a
> value of 2 (1
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#authentication>
> Authentication
>
> The UTXO set is not currently authenticated by anything. There are
> proposals to resolve this by introducing a new consensus rule that commits
> to a root hash of the UTXO set in blocks, however this feature is not
> presently available in the Bitcoin protocol. Once it is, the utxos message
> could be upgraded to include Merkle branches showing inclusion of the UTXOs
> in the committed sets.
>
> If the requesting client is looking up outputs for a signed transaction
> that they have locally, the client can partly verify the returned output by
> running the input scripts with it. Currently this verifies only that the
> script is correct. A future version of the Bitcoin protocol is likely to
> also allow the value to be checked in this way. It does not show that the
> output is really unspent or was ever actually created in the block chain
> however.
>
> If the requesting client has a mapping of chain heights to block hashes in
> the best chain e.g. obtained via getheaders, then they can obtain a proof
> that the output did at one point exist by requesting the block and
> searching for the output within it. When combined with Bloom filtering this
> can be reasonably efficient.
>
> Note that even when the outputs are being checked against something this
> protocol has the same security model as Bloom filtering: a remote node can
> lie through omission by claiming the requested UTXO does not exist / was
> already spent (they are the same, from the perspective of a full node).
> Querying multiple nodes and combining their answers can be a partial
> solution to this, although as nothing authenticates the Bitcoin P2P network
> a man in the middle could still yield incorrect results.
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#implementation>
> Implementation
>
> https://github.com/bitcoin/bitcoin/pull/4351/files
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140710/35e305eb/attachment.html>

From harald.schilly at gmail.com  Sat Jul 12 21:05:36 2014
From: harald.schilly at gmail.com (Harald Schilly)
Date: Sat, 12 Jul 2014 23:05:36 +0200
Subject: [Bitcoin-development] floating fees statistics
Message-ID: <CAGG4CB4kJUKYDH-gGqvyEh6A7d7ETkZrQeas1kyEjUzYaB65Yg@mail.gmail.com>

Hi

I've looked into this new floating fees algorithm. What I've started
is an ipython notebook to gather data and look into some statistics.
Right now it's probably not so exciting because the rules aren't
active, but maybe someone is interested in this or wants to extend it
a bit.

notebook:
http://nbviewer.ipython.org/github/haraldschilly/bitcoin-floating-fee-statistics/blob/master/estimatefee.ipynb

source:
https://github.com/haraldschilly/bitcoin-floating-fee-statistics/

The probably most interesting graph is the one attached. It's the time
series of the estimated fees per confirmation level over the course of
4 hours. The vertical green lines indicate where new blocks have been
found.

Harald
-------------- next part --------------
A non-text attachment was scrubbed...
Name: index.png
Type: image/png
Size: 18631 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140712/e839d797/attachment.png>

From me at ricmoo.com  Sun Jul 13 23:32:51 2014
From: me at ricmoo.com (Richard Moore)
Date: Sun, 13 Jul 2014 19:32:51 -0400
Subject: [Bitcoin-development] Self-dependency transaction question...
Message-ID: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>

Hey all,

I'm working on the UTXO database for my Python implementation of bitcoind and have found a situation I did not realize was valid, but since it seems to be, had a quick question.

If you look at block #546 the 4th transaction's first input uses its own block's 3rd transaction as an input.
https://blockchain.info/block/000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6

My question is, would the other way be valid, that is, could the 3rd transaction of a block, use the 4th transaction from the same block as an input? Or are transactions processed strictly top to bottom?

Thanks,
RicMoo

P.S. If it is valid, another question; what would happen if a transaction was self-referencing? I realize it would be very difficult to find one, but if I could find a transaction X whose input was X and had an output Y, would Y be a new valid utxo, without being a generation transaction input?

.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140713/8ed59da4/attachment.html>

From voisine at gmail.com  Mon Jul 14 02:25:51 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Sun, 13 Jul 2014 19:25:51 -0700
Subject: [Bitcoin-development] Self-dependency transaction question...
In-Reply-To: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>
References: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>
Message-ID: <CACq0ZD6Mo0uVMM8HU3VrYORQgme7z084B45Cap8GYVwi-xs6vA@mail.gmail.com>

I believe tx have to be ordered sequentially within a block. Also
since a tx is referenced by it's hash, it's practically impossible to
make a self referential tx.

Aaron Voisine
breadwallet.com


On Sun, Jul 13, 2014 at 4:32 PM, Richard Moore <me at ricmoo.com> wrote:
> Hey all,
>
> I'm working on the UTXO database for my Python implementation of bitcoind
> and have found a situation I did not realize was valid, but since it seems
> to be, had a quick question.
>
> If you look at block #546 the 4th transaction's first input uses its own
> block's 3rd transaction as an input.
> https://blockchain.info/block/000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6
>
> My question is, would the other way be valid, that is, could the 3rd
> transaction of a block, use the 4th transaction from the same block as an
> input? Or are transactions processed strictly top to bottom?
>
> Thanks,
> RicMoo
>
> P.S. If it is valid, another question; what would happen if a transaction
> was self-referencing? I realize it would be very difficult to find one, but
> if I could find a transaction X whose input was X and had an output Y, would
> Y be a new valid utxo, without being a generation transaction input?
>
> .???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>
>
> Richard Moore ~ Founder
> Genetic Mistakes Software inc.
> phone: (778) 882-6125
> email: ricmoo at geneticmistakes.com
> www: http://GeneticMistakes.com
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck&#174;
> Code Sight&#153; - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jgarzik at bitpay.com  Mon Jul 14 02:51:50 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sun, 13 Jul 2014 22:51:50 -0400
Subject: [Bitcoin-development] Self-dependency transaction question...
In-Reply-To: <CACq0ZD6Mo0uVMM8HU3VrYORQgme7z084B45Cap8GYVwi-xs6vA@mail.gmail.com>
References: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>
	<CACq0ZD6Mo0uVMM8HU3VrYORQgme7z084B45Cap8GYVwi-xs6vA@mail.gmail.com>
Message-ID: <CAJHLa0OOBK8+eiU5jGaaicVzi9L5bY6W1XyfY2Mcv1C1DBCA0A@mail.gmail.com>

On Sun, Jul 13, 2014 at 10:25 PM, Aaron Voisine <voisine at gmail.com> wrote:
> I believe tx have to be ordered sequentially within a block. Also
> since a tx is referenced by it's hash, it's practically impossible to
> make a self referential tx.

Correct.  A TX will not reference a later TX in the same block (or itself).

This would be a good invalid-block test to add to the test suite.  Any
volunteers?

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From k.okupski at googlemail.com  Mon Jul 14 09:54:08 2014
From: k.okupski at googlemail.com (Krzysztof Okupski)
Date: Mon, 14 Jul 2014 11:54:08 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
Message-ID: <53C3A8C0.5070608@googlemail.com>

Dear all,

thank you for your invaluable feedback. As requested, the spec
will from now on be under version control. It can be found under:

https://github.com/minium/Bitcoin-Spec

The old link to the PDF will be, just in case, kept updated as well.


Warm greetings,
Krzysztof Okupski
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/fe48b82f/attachment.html>

From sickpig at gmail.com  Mon Jul 14 10:41:26 2014
From: sickpig at gmail.com (sickpig at gmail.com)
Date: Mon, 14 Jul 2014 12:41:26 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <53C3A8C0.5070608@googlemail.com>
References: <53C3A8C0.5070608@googlemail.com>
Message-ID: <CA+c4ZozwhQ_FXN1iVY3BJYphvqFYumRvFXqE7bPFLZ9TO_yA1w@mail.gmail.com>

On Mon, Jul 14, 2014 at 11:54 AM, Krzysztof Okupski
<k.okupski at googlemail.com> wrote:
> Dear all,
>
> thank you for your invaluable feedback. As requested, the spec
> will from now on be under version control. It can be found under:
>
> https://github.com/minium/Bitcoin-Spec
>
> The old link to the PDF will be, just in case, kept updated as well.
>
>
> Warm greetings,
> Krzysztof Okupski

many many thanks Krzysztof.

This was badly needed.

This is a way to get more people to understand
the whole system, hence increasing the number
of bitcoin devs on the long term.



From mike at plan99.net  Mon Jul 14 11:18:22 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 14 Jul 2014 13:18:22 +0200
Subject: [Bitcoin-development] Self-dependency transaction question...
In-Reply-To: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>
References: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>
Message-ID: <CANEZrP3RfYRoiwg_f9K0sf=vvpY=Wx78Q97Qp8uosK1GPV9QRg@mail.gmail.com>

Conceptually all transactions in the block chain lie on a single timeline.
The fact that we quantise that timeline into blocks is in many ways neither
here nor there - it's still a strict line.

What *can* happen and you must be aware of is duplicated transactions.
Satoshi sort of assumed this could never happen because everything is hash
based, but forgot that duplicating coinbases is possible and at one point
this did happen. It was banned by a rule change afterwards but you still
must be able to process the older parts of the chain that have this. There
is a BIP that covers the new rule.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/fabf40f4/attachment.html>

From mike at plan99.net  Mon Jul 14 11:26:19 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 14 Jul 2014 13:26:19 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <53C3A8C0.5070608@googlemail.com>
References: <53C3A8C0.5070608@googlemail.com>
Message-ID: <CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>

Nice work, but please don't call it the "Bitcoin protocol spec". Your
document is not a spec. It is an attempt to describe in English the Bitcoin
protocol, but anyone who implemented it based on your description would get
it wrong. For example you didn't mention the SIGHASH_SINGLE bug and many
other important areas like the difficulty transitions are also left
unspecified.

As a loose description of the protocol for newbies it's an invaluable
resource and perhaps we should link to it from the developer guide. As
something that claims to be a specification it is quite possibly dangerous
- the only spec that matters is the C++ original.


On Mon, Jul 14, 2014 at 11:54 AM, Krzysztof Okupski <
k.okupski at googlemail.com> wrote:

>  Dear all,
>
> thank you for your invaluable feedback. As requested, the spec
> will from now on be under version control. It can be found under:
>
> https://github.com/minium/Bitcoin-Spec
>
> The old link to the PDF will be, just in case, kept updated as well.
>
>
> Warm greetings,
> Krzysztof Okupski
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck&#174;
> Code Sight&#153; - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/a01c5941/attachment.html>

From laanwj at gmail.com  Mon Jul 14 11:41:07 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 14 Jul 2014 13:41:07 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>
References: <53C3A8C0.5070608@googlemail.com>
	<CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>
Message-ID: <CA+s+GJDzxVDcS0wmzm0e+xG8yDgKDWbtyTVX2Lzhc8A26pcJdQ@mail.gmail.com>

> As a loose description of the protocol for newbies it's an invaluable
> resource and perhaps we should link to it from the developer guide.

It has already been linked from the developer guide for quite a while,
under Additional Resources.

Wladimir



From mike at plan99.net  Mon Jul 14 11:49:16 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 14 Jul 2014 13:49:16 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CA+s+GJDzxVDcS0wmzm0e+xG8yDgKDWbtyTVX2Lzhc8A26pcJdQ@mail.gmail.com>
References: <53C3A8C0.5070608@googlemail.com>
	<CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>
	<CA+s+GJDzxVDcS0wmzm0e+xG8yDgKDWbtyTVX2Lzhc8A26pcJdQ@mail.gmail.com>
Message-ID: <CANEZrP2cV16VWXupW6wQSrpR0T07Ts42H00=U5QoHoM5Okn0yw@mail.gmail.com>

Ah, that's great. Still, it would be good to be careful with the word
"specification".


On Mon, Jul 14, 2014 at 1:41 PM, Wladimir <laanwj at gmail.com> wrote:

> > As a loose description of the protocol for newbies it's an invaluable
> > resource and perhaps we should link to it from the developer guide.
>
> It has already been linked from the developer guide for quite a while,
> under Additional Resources.
>
> Wladimir
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/e4d1fd3b/attachment.html>

From sickpig at gmail.com  Mon Jul 14 12:25:54 2014
From: sickpig at gmail.com (sickpig at gmail.com)
Date: Mon, 14 Jul 2014 14:25:54 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>
References: <53C3A8C0.5070608@googlemail.com>
	<CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>
Message-ID: <CA+c4Zoy-O_MkRZDVjHysDMhZnx8mo7XAAw7iJQYHrm9f4OsEUQ@mail.gmail.com>

On Mon, Jul 14, 2014 at 1:26 PM, Mike Hearn <mike at plan99.net> wrote:
> Nice work, but please don't call it the "Bitcoin protocol spec". Your
> document is not a spec.

fair objection, fwiw.

> It is an attempt to describe in English the Bitcoin
> protocol, but anyone who implemented it based on your description would get
> it wrong. For example you didn't mention the SIGHASH_SINGLE bug and many
> other important areas like the difficulty transitions are also left
> unspecified.

at the end of the day it's opensource so it could always be improved via pull
request on github.

Krzysztof, in that regard I would add a licence file to make
integration of changes
made by others smoother.

> As a loose description of the protocol for newbies it's an invaluable
> resource and perhaps we should link to it from the developer guide. As
> something that claims to be a specification it is quite possibly dangerous -
> the only spec that matters is the C++ original.

just out of curiosity, do you think it will be possible to create any
other proper
protocol specifications rather than the C++  original?

> On Mon, Jul 14, 2014 at 11:54 AM, Krzysztof Okupski
> <k.okupski at googlemail.com> wrote:
>>
>> Dear all,
>>
>> thank you for your invaluable feedback. As requested, the spec
>> will from now on be under version control. It can be found under:
>>
>> https://github.com/minium/Bitcoin-Spec
>>
>> The old link to the PDF will be, just in case, kept updated as well.
>>
>>
>> Warm greetings,
>> Krzysztof Okupski



From mike at plan99.net  Mon Jul 14 12:37:13 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 14 Jul 2014 14:37:13 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CA+c4Zoy-O_MkRZDVjHysDMhZnx8mo7XAAw7iJQYHrm9f4OsEUQ@mail.gmail.com>
References: <53C3A8C0.5070608@googlemail.com>
	<CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>
	<CA+c4Zoy-O_MkRZDVjHysDMhZnx8mo7XAAw7iJQYHrm9f4OsEUQ@mail.gmail.com>
Message-ID: <CANEZrP1FZjqpoOgJuNa4=_bar61=PCTeT8MqG9FGnpdKS=SCbw@mail.gmail.com>

>
> just out of curiosity, do you think it will be possible to create any
> other proper protocol specifications rather than the C++  original?


Well it's a finite code base so yes, it should be possible.

The only problem is .... so far everyone who tried it, didn't succeed :)
Heck even people who tried to reimplement it by reading the code keep
getting subtle details wrong.

So it should definitely be possible one day, assuming Bitcoin doesn't
become radically more complex, but it's a minefield.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/26b4c960/attachment.html>

From info at mahalamobile.co.za  Mon Jul 14 11:27:15 2014
From: info at mahalamobile.co.za (neil)
Date: Mon, 14 Jul 2014 11:27:15 +0000 (UTC)
Subject: [Bitcoin-development] Building BDB on MingW
References: <1330121737.13951.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <loom.20140714T132614-934@post.gmane.org>

got same error, did you manage to fix this?






From k.okupski at googlemail.com  Mon Jul 14 14:44:32 2014
From: k.okupski at googlemail.com (Krzysztof Okupski)
Date: Mon, 14 Jul 2014 16:44:32 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
Message-ID: <53C3ECD0.2000809@googlemail.com>

I've renamed it to "Bitcoin Developer Specification" a little while ago.
Maybe it should rather be named "Bitcoin Developer Reference"? Either
way, creating a good description of Bitcoin is an incremental process
and there are certainly many quirks I'm not aware of. I hope that
together we will soon be able to fill in the missing gaps.

Warm greetings,
Krzysztof Okupski

On 07/14/2014 01:26 PM, Mike Hearn wrote:

> Nice work, but please don't call it the "Bitcoin protocol spec". Your
> document is not a spec. It is an attempt to describe in English the Bitcoin
> protocol, but anyone who implemented it based on your description would get
> it wrong. For example you didn't mention the SIGHASH_SINGLE bug and many
> other important areas like the difficulty transitions are also left
> unspecified.
>
> As a loose description of the protocol for newbies it's an invaluable
> resource and perhaps we should link to it from the developer guide. As
> something that claims to be a specification it is quite possibly dangerous
> - the only spec that matters is the C++ original.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/1e6b0dce/attachment.html>

From jgarzik at bitpay.com  Mon Jul 14 17:16:12 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 14 Jul 2014 13:16:12 -0400
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <53C3ECD0.2000809@googlemail.com>
References: <53C3ECD0.2000809@googlemail.com>
Message-ID: <CAJHLa0NHtFF58o7yG_r9gEWC=p7_E=i7Ed2C5eMBSEB078h+aQ@mail.gmail.com>

On Mon, Jul 14, 2014 at 10:44 AM, Krzysztof Okupski
<k.okupski at googlemail.com> wrote:
> I've renamed it to "Bitcoin Developer Specification" a little while ago.
> Maybe it should rather be named "Bitcoin Developer Reference"? Either
> way, creating a good description of Bitcoin is an incremental process
> and there are certainly many quirks I'm not aware of. I hope that
> together we will soon be able to fill in the missing gaps.

Firstly, it is an excellent document, and it should be useful in
educating others.

I do agree that "specification" is not a good word to use.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From bip at mattwhitlock.name  Mon Jul 14 20:51:43 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Mon, 14 Jul 2014 16:51:43 -0400
Subject: [Bitcoin-development] Self-dependency transaction question...
In-Reply-To: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>
References: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>
Message-ID: <1886579.D2AT3hXWca@crushinator>

On Sunday, 13 July 2014, at 7:32 pm, Richard Moore wrote:
> P.S. If it is valid, another question; what would happen if a transaction was self-referencing? I realize it would be very difficult to find one, but if I could find a transaction X whose input was X and had an output Y, would Y be a new valid utxo, without being a generation transaction input?

Even if you could find such a transaction that contained its own digest, and even if such a transaction were valid, it still couldn't conjure new coins into existence. The sum of the outputs must be less than or equal to the sum of the inputs (except in the case of a coinbase transaction). If a transaction were to spend its own output, then the input would be completely used up by the output, leaving no balance for a second output.



From sickpig at gmail.com  Mon Jul 14 20:51:35 2014
From: sickpig at gmail.com (sickpig at gmail.com)
Date: Mon, 14 Jul 2014 22:51:35 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
In-Reply-To: <CANEZrP1FZjqpoOgJuNa4=_bar61=PCTeT8MqG9FGnpdKS=SCbw@mail.gmail.com>
References: <53C3A8C0.5070608@googlemail.com>
	<CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA@mail.gmail.com>
	<CA+c4Zoy-O_MkRZDVjHysDMhZnx8mo7XAAw7iJQYHrm9f4OsEUQ@mail.gmail.com>
	<CANEZrP1FZjqpoOgJuNa4=_bar61=PCTeT8MqG9FGnpdKS=SCbw@mail.gmail.com>
Message-ID: <CA+c4ZoxQPwMsA7N+s0C9+snnPEoL-N_GsmfFfDHNMyahWpqyvg@mail.gmail.com>

On Mon, Jul 14, 2014 at 2:37 PM, Mike Hearn <mike at plan99.net> wrote:

> just out of curiosity, do you think it will be possible to create any
>>  other proper protocol specifications rather than the C++  original?
>
>
> Well it's a finite code base so yes, it should be possible.
>
> The only problem is .... so far everyone who tried it, didn't succeed :)
> Heck even people who tried to reimplement it by reading the code keep
> getting subtle details wrong.
>
> So it should definitely be possible one day, assuming Bitcoin doesn't
> become radically more complex, but it's a minefield.
>

thank for the frank reply
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/2f891d6a/attachment.html>

From rdwnj at yahoo.com  Tue Jul 15 03:34:42 2014
From: rdwnj at yahoo.com (Ron)
Date: Mon, 14 Jul 2014 20:34:42 -0700
Subject: [Bitcoin-development] "Bitcoin Protocol Guide"
In-Reply-To: <mailman.253891.1405338074.2207.bitcoin-development@lists.sourceforge.net>
References: <mailman.253891.1405338074.2207.bitcoin-development@lists.sourceforge.net>
Message-ID: <1405395282.75933.YahooMailNeo@web164501.mail.gq1.yahoo.com>


________________________________
Message: 6
Date: Mon, 14 Jul 2014 13:26:19 +0200
From: Mike Hearn <mike at plan99.net>
Subject: Re: [Bitcoin-development] Bitcoin Protocol Specification
To: Krzysztof Okupski <k.okupski at googlemail.com>
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Message-ID:
??? <CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA at mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

Nice work, but please don't call it the "Bitcoin protocol spec". Your
document is not a spec. It is an attempt to describe in English the Bitcoin
protocol, but anyone who implemented it based on your description would get
it wrong. For example you didn't mention the SIGHASH_SINGLE bug and many
other important areas like the difficulty transitions are also left
unspecified.

As a loose description of the protocol for newbies it's an invaluable
resource and perhaps we should link to it from the developer guide. As
something that claims to be a specification it is quite possibly dangerous
- the only spec that matters is the C++ original.
...

Hello Mike,

What C++ original might that be?? Version 0.1.0? 0.9.x? 0.8.6?? And what parts of which version?

Ron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/e6af2665/attachment.html>

From jgarzik at bitpay.com  Tue Jul 15 08:00:41 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 04:00:41 -0400
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
Message-ID: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>

Proxying another's idea, from CoinSummit.

The request:   It would be useful to limit the lifetime of a bitcoin
address.  Intentionally prevent (somehow) bitcoins being sent to a
pubkey/pkh after the key expires.

You could append "don't ["permit"|confirm] after X [time|block]"  to
the address I suppose.  The metadata would not be digitally signed,
but it would be hash-sealed.  As "address" is a client-side notion,
wallet clients would be the ones enforcing such a rule.

Bitcoin protocol of course knows about keys, and key expiration is a
well known and useful concept in public key cryptography.  The best
insertion point in the protocol for key expiration is an open
question, if it's even a good idea at that level at all.  Some flag
"no more TxOuts exactly like this [after X block?]"?

I readily admit I don't have good answers, but it does seem valuable IMO to
* Prevent users from accidentally sending to an "expired" TxOut/pkh.
This happens in the field.
* Discourage address reuse
* Enable sites that generate lots of keys to rotate ancient keys off
their core systems.  (HD wallets mitigate this)

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Tue Jul 15 08:19:13 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 15 Jul 2014 10:19:13 +0200
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
Message-ID: <CA+s+GJCJ77FkRGzTNLxOaJifKWLeC2wJ5usYf571MVOOugtMRQ@mail.gmail.com>

On Tue, Jul 15, 2014 at 10:00 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> Proxying another's idea, from CoinSummit.
>
> The request:   It would be useful to limit the lifetime of a bitcoin
> address.  Intentionally prevent (somehow) bitcoins being sent to a
> pubkey/pkh after the key expires.

Payment request expiration was meant to address this.

Adding an optional expiration timestamp to addresses would be
possible, however, it would be a non-backward-compatible change and
lots of software would have to be changed at this point.

In my opinion encouraging the use of the payment protocol and
deprecating the use of addresses is the best way forward, and not just
for this reason.

Wladimir



From pete at petertodd.org  Tue Jul 15 08:20:20 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 15 Jul 2014 04:20:20 -0400
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
Message-ID: <20140715082020.GA22936@petertodd.org>

On Tue, Jul 15, 2014 at 04:00:41AM -0400, Jeff Garzik wrote:
> Proxying another's idea, from CoinSummit.
> 
> The request:   It would be useful to limit the lifetime of a bitcoin
> address.  Intentionally prevent (somehow) bitcoins being sent to a
> pubkey/pkh after the key expires.
> 
> You could append "don't ["permit"|confirm] after X [time|block]"  to
> the address I suppose.  The metadata would not be digitally signed,
> but it would be hash-sealed.  As "address" is a client-side notion,
> wallet clients would be the ones enforcing such a rule.

Note that "digitally signed" has no value here without some kind of
PKI/WoT/something else to know what key is doing the signing. I believe
Jeff is really referring to the checksum by "hash-sealed" here, which is
as good as is worth getting.

> Bitcoin protocol of course knows about keys, and key expiration is a
> well known and useful concept in public key cryptography.  The best
> insertion point in the protocol for key expiration is an open
> question, if it's even a good idea at that level at all.  Some flag
> "no more TxOuts exactly like this [after X block?]"?
> 
> I readily admit I don't have good answers, but it does seem valuable IMO to
> * Prevent users from accidentally sending to an "expired" TxOut/pkh.
> This happens in the field.
> * Discourage address reuse
> * Enable sites that generate lots of keys to rotate ancient keys off
> their core systems.  (HD wallets mitigate this)

A few months ago I looked into what low-level details it'd take to add
Bitcoin addresses to OpenPGP keys a few months ago; one of the
requirements we came up with was to make sure the standard OpenPGP
expiration machinery would still work. Basically in that model the
Bitcoin address - most likely a stealth address for privacy - is added
to the key as signed data. All signatures in OpenPGP have optional
expiration times, and additionally they can be revoked after the fact if
needed as well.

Of course, such ideas aren't limited to OpenPGP - all payment protocols
should consider adopting them.


As for protocol level hacks, keep in mind that anything that makes a
transaction invalid because of the presence of a specific scriptPubKey
in a txout has the potential to make a whole chain of transactions
become invalid during a reorg. Adding such protection in the form of
IsStandard() policy would be ok, but as a protocol rule it'd be pretty
dangerous. IMO much better to just solve the problem at the UI level.

-- 
'peter'[:-1]@petertodd.org
000000000000000032d9d8942fe9461cce9db22a6cd86eacb5c18b415ebb649d
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/801ea8d0/attachment.sig>

From jgarzik at bitpay.com  Tue Jul 15 08:23:40 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 04:23:40 -0400
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CA+s+GJCJ77FkRGzTNLxOaJifKWLeC2wJ5usYf571MVOOugtMRQ@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<CA+s+GJCJ77FkRGzTNLxOaJifKWLeC2wJ5usYf571MVOOugtMRQ@mail.gmail.com>
Message-ID: <CAJHLa0OskyEbsEmhrUayshg56Cr_q_6O4edRmdM5jDh3Pb=WGA@mail.gmail.com>

On Tue, Jul 15, 2014 at 4:19 AM, Wladimir <laanwj at gmail.com> wrote:
> In my opinion encouraging the use of the payment protocol and
> deprecating the use of addresses is the best way forward, and not just
> for this reason.

There are major gaps that the payment protocol doesn't cover.

There are several deployed use cases where you are provided/request an
address, an API provides one, and one or more incoming payments arrive
as the user sends them over minutes/hours/days/weeks.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Tue Jul 15 08:48:12 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 15 Jul 2014 10:48:12 +0200
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0OskyEbsEmhrUayshg56Cr_q_6O4edRmdM5jDh3Pb=WGA@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<CA+s+GJCJ77FkRGzTNLxOaJifKWLeC2wJ5usYf571MVOOugtMRQ@mail.gmail.com>
	<CAJHLa0OskyEbsEmhrUayshg56Cr_q_6O4edRmdM5jDh3Pb=WGA@mail.gmail.com>
Message-ID: <CA+s+GJABgJ0XCovZ+UW1ckSpdM_Yet2xaNx2-MGXMLaATN3hyQ@mail.gmail.com>

On Tue, Jul 15, 2014 at 10:23 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> On Tue, Jul 15, 2014 at 4:19 AM, Wladimir <laanwj at gmail.com> wrote:
> There are major gaps that the payment protocol doesn't cover.
>
> There are several deployed use cases where you are provided/request an
> address, an API provides one, and one or more incoming payments arrive
> as the user sends them over minutes/hours/days/weeks.

Couldn't these services return a payment message instead of an address?

I agree that there is currently an UI issue here: there is no way in
current wallets to store a payment message and pay to it later. We
will need something like that for recurring payments as well.

Bitcoin addresses were never designed with extensibility in mind.
Before the payment protocol there have been lots of ideas to add
functionality to them, but the underlying idea that they have to be
handled by users manually means that they have to be as short as
possible, which is a conflicting aim with extensibility...

Wladimir



From jeremy at taplink.co  Tue Jul 15 08:31:29 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 15 Jul 2014 01:31:29 -0700
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0OskyEbsEmhrUayshg56Cr_q_6O4edRmdM5jDh3Pb=WGA@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<CA+s+GJCJ77FkRGzTNLxOaJifKWLeC2wJ5usYf571MVOOugtMRQ@mail.gmail.com>
	<CAJHLa0OskyEbsEmhrUayshg56Cr_q_6O4edRmdM5jDh3Pb=WGA@mail.gmail.com>
Message-ID: <op.xi05yrpfyldrnw@laptop-air>

Payment Protocol would probably be the communication format for any new  
meta-data.

What's the likelihood of something like this every making it on the  
blockchain?




From mike at plan99.net  Tue Jul 15 10:25:02 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 15 Jul 2014 12:25:02 +0200
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
Message-ID: <CANEZrP1dWHtEEF7QDdfJe+kb8G+66cHd3-6UpAwkbOF9+sWEcw@mail.gmail.com>

>
> The request:   It would be useful to limit the lifetime of a bitcoin
> address.


Not only useful but essential! Otherwise mobile clients can run out of RAM
and have to cycle around and reuse addresses.

Which is indeed why BIP70 has this feature. It was thought about quite some
time ago. Addresses are an evolutionary dead end, they will never do
everything we need them to do. If there's somewhere that's using addresses,
that's somewhere we will eventually need to upgrade to use BIP70 instead.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/81e23d3e/attachment.html>

From mike at plan99.net  Tue Jul 15 12:03:36 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 15 Jul 2014 14:03:36 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
Message-ID: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>

[+cc aaron]

We recently added an implementation of BIP 38 (password protected private
keys) to bitcoinj. It came to my attention that the third test vector may
be broken. It gives a hex version of what the NFC normalised version of the
input string should be, but this does not match the results of the Java
unicode normaliser, and in fact I can't even get Python to print the names
of the characters past the embedded null. I'm curious where this normalised
version came from.

Given that "pile of poo" is not a character I think any sane user would put
into a passphrase, I question the value of this test vector. NFC form is
intended to collapse things like umlaut control characters onto their prior
code point, but here we're feeding the algorithm what is basically garbage
so I'm not totally surprised that different implementations appear to
disagree on the outcome.

Proposed action: we remove this test vector as it does not represent any
real world usage of the spec, or if we desperately need to verify NFC
normalisation I suggest using a different, more realistic test string, like
Z?rich, or something written in Thai.



Test 3:

   - Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
   UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING ACUTE ACCENT
   <http://codepoints.net/U+0301>, NULL <http://codepoints.net/U+0000>, DESERET
   CAPITAL LETTER LONG I <http://codepoints.net/U+10400>, PILE OF POO
   <http://codepoints.net/U+1F4A9>)
   - Encrypted key:
   6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
   - Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
   - Unencrypted private key (WIF):
   5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
   - *Note:* The non-standard UTF-8 characters in this passphrase should be
   NFC normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before
   further processing
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/e3dc3ed9/attachment.html>

From enwiner at gmail.com  Tue Jul 15 13:07:47 2014
From: enwiner at gmail.com (Eric Winer)
Date: Tue, 15 Jul 2014 09:07:47 -0400
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
Message-ID: <CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>

I don't know for sure if the test vector is correct NFC form.  But for what
it's worth, the Pile of Poo character is pretty easily accessible on the
iPhone and Android keyboards, and in this string it's already in NFC form
(f09f92a9 in the test result).  I've certainly seen it in usernames around
the internet, and wouldn't be surprised to see it in passphrases entered on
smartphones, especially if the author of a BIP38-compatible app includes a
(possibly ill-advised) suggestion to have your passphrase "include special
characters".

I haven't seen the NULL character on any smartphone keyboards, though - I
assume the iOS and Android developers had the foresight to know how much
havoc that would wreak on systems assuming null-terminated strings.  It
seems unlikely that NULL would be in a real-world passphrase entered by a
sane user.


On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:

> [+cc aaron]
>
> We recently added an implementation of BIP 38 (password protected private
> keys) to bitcoinj. It came to my attention that the third test vector may
> be broken. It gives a hex version of what the NFC normalised version of the
> input string should be, but this does not match the results of the Java
> unicode normaliser, and in fact I can't even get Python to print the names
> of the characters past the embedded null. I'm curious where this normalised
> version came from.
>
> Given that "pile of poo" is not a character I think any sane user would
> put into a passphrase, I question the value of this test vector. NFC form
> is intended to collapse things like umlaut control characters onto their
> prior code point, but here we're feeding the algorithm what is basically
> garbage so I'm not totally surprised that different implementations appear
> to disagree on the outcome.
>
> Proposed action: we remove this test vector as it does not represent any
> real world usage of the spec, or if we desperately need to verify NFC
> normalisation I suggest using a different, more realistic test string, like
> Z?rich, or something written in Thai.
>
>
>
> Test 3:
>
>    - Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
>    UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING ACUTE
>    ACCENT <http://codepoints.net/U+0301>, NULL
>    <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I
>    <http://codepoints.net/U+10400>, PILE OF POO
>    <http://codepoints.net/U+1F4A9>)
>    - Encrypted key:
>    6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
>    - Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>    - Unencrypted private key (WIF):
>    5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>    - *Note:* The non-standard UTF-8 characters in this passphrase should
>    be NFC normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before
>    further processing
>
>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/6bed40c7/attachment.html>

From andreas at schildbach.de  Tue Jul 15 13:19:29 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 15 Jul 2014 15:19:29 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
Message-ID: <lq39p1$gff$1@ger.gmane.org>

I think generally control-characters (such as \u0000) should be
disallowed in passphrases. (Even the use of whitespaces is very
questionable.)

I'm ok with allowing pile-of-poo's. On mobile phones there is keyboards
just containing emoticons -- why not allow those? Assuming NFC works of
course.


On 07/15/2014 03:07 PM, Eric Winer wrote:
> I don't know for sure if the test vector is correct NFC form.  But for
> what it's worth, the Pile of Poo character is pretty easily accessible
> on the iPhone and Android keyboards, and in this string it's already in
> NFC form (f09f92a9 in the test result).  I've certainly seen it in
> usernames around the internet, and wouldn't be surprised to see it in
> passphrases entered on smartphones, especially if the author of a
> BIP38-compatible app includes a (possibly ill-advised) suggestion to
> have your passphrase "include special characters".
> 
> I haven't seen the NULL character on any smartphone keyboards, though -
> I assume the iOS and Android developers had the foresight to know how
> much havoc that would wreak on systems assuming null-terminated strings.
>  It seems unlikely that NULL would be in a real-world passphrase entered
> by a sane user.
> 
> 
> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net
> <mailto:mike at plan99.net>> wrote:
> 
>     [+cc aaron]
> 
>     We recently added an implementation of BIP 38 (password protected
>     private keys) to bitcoinj. It came to my attention that the third
>     test vector may be broken. It gives a hex version of what the NFC
>     normalised version of the input string should be, but this does not
>     match the results of the Java unicode normaliser, and in fact I
>     can't even get Python to print the names of the characters past the
>     embedded null. I'm curious where this normalised version came from.
> 
>     Given that "pile of poo" is not a character I think any sane user
>     would put into a passphrase, I question the value of this test
>     vector. NFC form is intended to collapse things like umlaut control
>     characters onto their prior code point, but here we're feeding the
>     algorithm what is basically garbage so I'm not totally surprised
>     that different implementations appear to disagree on the outcome.
> 
>     Proposed action: we remove this test vector as it does not represent
>     any real world usage of the spec, or if we desperately need to
>     verify NFC normalisation I suggest using a different, more realistic
>     test string, like Z?rich, or something written in Thai.
> 
> 
> 
>     Test 3:
> 
>       * Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
>         UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING
>         ACUTE ACCENT <http://codepoints.net/U+0301>, NULL
>         <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I
>         <http://codepoints.net/U+10400>, PILE OF POO
>         <http://codepoints.net/U+1F4A9>)
>       * Encrypted key:
>         6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
>       * Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>       * Unencrypted private key (WIF):
>         5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>       * /Note:/ The non-standard UTF-8 characters in this passphrase
>         should be NFC normalized to result in a passphrase
>         of0xcf9300f0909080f09f92a9 before further processing
> 
> 
> 
> 
>     ------------------------------------------------------------------------------
>     Want fast and easy access to all the code in your enterprise? Index and
>     search up to 200,000 lines of code with a free copy of Black Duck
>     Code Sight - the same software that powers the world's largest code
>     search on Ohloh, the Black Duck Open Hub! Try it now.
>     http://p.sf.net/sfu/bds
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mw at osfda.org  Tue Jul 15 13:32:01 2014
From: mw at osfda.org (Michael Wozniak)
Date: Tue, 15 Jul 2014 09:32:01 -0400
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <lq39p1$gff$1@ger.gmane.org>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<lq39p1$gff$1@ger.gmane.org>
Message-ID: <365F4709-54A6-4E14-BA6F-BCFB36DBAA96@osfda.org>

I have a python implementation that seems to pass this test vector:

https://github.com/wozz/electrum/blob/bip38_import/lib/bip38.py#L299



On Jul 15, 2014, at 9:19 AM, Andreas Schildbach <andreas at schildbach.de> wrote:

> I think generally control-characters (such as \u0000) should be
> disallowed in passphrases. (Even the use of whitespaces is very
> questionable.)
> 
> I'm ok with allowing pile-of-poo's. On mobile phones there is keyboards
> just containing emoticons -- why not allow those? Assuming NFC works of
> course.
> 
> 
> On 07/15/2014 03:07 PM, Eric Winer wrote:
>> I don't know for sure if the test vector is correct NFC form.  But for
>> what it's worth, the Pile of Poo character is pretty easily accessible
>> on the iPhone and Android keyboards, and in this string it's already in
>> NFC form (f09f92a9 in the test result).  I've certainly seen it in
>> usernames around the internet, and wouldn't be surprised to see it in
>> passphrases entered on smartphones, especially if the author of a
>> BIP38-compatible app includes a (possibly ill-advised) suggestion to
>> have your passphrase "include special characters".
>> 
>> I haven't seen the NULL character on any smartphone keyboards, though -
>> I assume the iOS and Android developers had the foresight to know how
>> much havoc that would wreak on systems assuming null-terminated strings.
>> It seems unlikely that NULL would be in a real-world passphrase entered
>> by a sane user.
>> 
>> 
>> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net
>> <mailto:mike at plan99.net>> wrote:
>> 
>>    [+cc aaron]
>> 
>>    We recently added an implementation of BIP 38 (password protected
>>    private keys) to bitcoinj. It came to my attention that the third
>>    test vector may be broken. It gives a hex version of what the NFC
>>    normalised version of the input string should be, but this does not
>>    match the results of the Java unicode normaliser, and in fact I
>>    can't even get Python to print the names of the characters past the
>>    embedded null. I'm curious where this normalised version came from.
>> 
>>    Given that "pile of poo" is not a character I think any sane user
>>    would put into a passphrase, I question the value of this test
>>    vector. NFC form is intended to collapse things like umlaut control
>>    characters onto their prior code point, but here we're feeding the
>>    algorithm what is basically garbage so I'm not totally surprised
>>    that different implementations appear to disagree on the outcome.
>> 
>>    Proposed action: we remove this test vector as it does not represent
>>    any real world usage of the spec, or if we desperately need to
>>    verify NFC normalisation I suggest using a different, more realistic
>>    test string, like Z?rich, or something written in Thai.
>> 
>> 
>> 
>>    Test 3:
>> 
>>      * Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
>>        UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING
>>        ACUTE ACCENT <http://codepoints.net/U+0301>, NULL
>>        <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I
>>        <http://codepoints.net/U+10400>, PILE OF POO
>>        <http://codepoints.net/U+1F4A9>)
>>      * Encrypted key:
>>        6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
>>      * Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>>      * Unencrypted private key (WIF):
>>        5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>>      * /Note:/ The non-standard UTF-8 characters in this passphrase
>>        should be NFC normalized to result in a passphrase
>>        of0xcf9300f0909080f09f92a9 before further processing
>> 
>> 
>> 
>> 
>>    ------------------------------------------------------------------------------
>>    Want fast and easy access to all the code in your enterprise? Index and
>>    search up to 200,000 lines of code with a free copy of Black Duck
>>    Code Sight - the same software that powers the world's largest code
>>    search on Ohloh, the Black Duck Open Hub! Try it now.
>>    http://p.sf.net/sfu/bds
>>    _______________________________________________
>>    Bitcoin-development mailing list
>>    Bitcoin-development at lists.sourceforge.net
>>    <mailto:Bitcoin-development at lists.sourceforge.net>
>>    https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> 
>> 
>> 
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From jgarzik at bitpay.com  Tue Jul 15 14:02:40 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 10:02:40 -0400
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CANEZrP1dWHtEEF7QDdfJe+kb8G+66cHd3-6UpAwkbOF9+sWEcw@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<CANEZrP1dWHtEEF7QDdfJe+kb8G+66cHd3-6UpAwkbOF9+sWEcw@mail.gmail.com>
Message-ID: <CAJHLa0P97vqzXdk0-P+XEeo1S0xjc-Dsm8K+GjYxGE_O1TmPcQ@mail.gmail.com>

BIP70 does not work well for unknown number of future payments of
unknown, unpredictable value.


On Tue, Jul 15, 2014 at 6:25 AM, Mike Hearn <mike at plan99.net> wrote:
>> The request:   It would be useful to limit the lifetime of a bitcoin
>> address.
>
>
> Not only useful but essential! Otherwise mobile clients can run out of RAM
> and have to cycle around and reuse addresses.
>
> Which is indeed why BIP70 has this feature. It was thought about quite some
> time ago. Addresses are an evolutionary dead end, they will never do
> everything we need them to do. If there's somewhere that's using addresses,
> that's somewhere we will eventually need to upgrade to use BIP70 instead.
>
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pmlyon at hotmail.ca  Tue Jul 15 13:56:20 2014
From: pmlyon at hotmail.ca (Paul Lyon)
Date: Tue, 15 Jul 2014 10:56:20 -0300
Subject: [Bitcoin-development] Self-dependency transaction question...
In-Reply-To: <CANEZrP3RfYRoiwg_f9K0sf=vvpY=Wx78Q97Qp8uosK1GPV9QRg@mail.gmail.com>
References: <35E6FF51-F9C4-4973-8489-B364E7C27C14@ricmoo.com>,
	<CANEZrP3RfYRoiwg_f9K0sf=vvpY=Wx78Q97Qp8uosK1GPV9QRg@mail.gmail.com>
Message-ID: <BLU170-W39B40D1EFE92850D2AE3B6A5F60@phx.gbl>

Thankfully those two duplicated transactions were never spent when they first appeared. Because of that, I chose to not not add them to the UTXO at all when they first appear. When the duplicates appear they get added to the UTXO successfully because the earlier, conflicting versions are not present. That way you can carry on assuming that all transaction hashes are unique, and enforce that rule over the entire blockchain.

Date: Mon, 14 Jul 2014 13:18:22 +0200
From: mike at plan99.net
To: me at ricmoo.com
CC: bitcoin-development at lists.sourceforge.net
Subject: Re: [Bitcoin-development] Self-dependency transaction question...

Conceptually all transactions in the block chain lie on a single timeline. The fact that we quantise that timeline into blocks is in many ways neither here nor there - it's still a strict line. 

What can happen and you must be aware of is duplicated transactions. Satoshi sort of assumed this could never happen because everything is hash based, but forgot that duplicating coinbases is possible and at one point this did happen. It was banned by a rule change afterwards but you still must be able to process the older parts of the chain that have this. There is a BIP that covers the new rule.



------------------------------------------------------------------------------
Want fast and easy access to all the code in your enterprise? Index and
search up to 200,000 lines of code with a free copy of Black Duck?
Code Sight? - the same software that powers the world's largest code
search on Ohloh, the Black Duck Open Hub! Try it now.
http://p.sf.net/sfu/bds
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development 		 	   		  
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/c82730dd/attachment.html>

From mike at plan99.net  Tue Jul 15 14:27:26 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 15 Jul 2014 16:27:26 +0200
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0P97vqzXdk0-P+XEeo1S0xjc-Dsm8K+GjYxGE_O1TmPcQ@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<CANEZrP1dWHtEEF7QDdfJe+kb8G+66cHd3-6UpAwkbOF9+sWEcw@mail.gmail.com>
	<CAJHLa0P97vqzXdk0-P+XEeo1S0xjc-Dsm8K+GjYxGE_O1TmPcQ@mail.gmail.com>
Message-ID: <CANEZrP1vZ6ZEazViMa3BwBTbu0ihmDJk7ueHUSHJSe9GA9zMhg@mail.gmail.com>

On Tue, Jul 15, 2014 at 4:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> BIP70 does not work well for unknown number of future payments of
> unknown, unpredictable value.


You can specify zero as an output value, in which case it's the same as "no
value specified". You can then just reuse the PaymentRequest until it
expires. So I think it provides the same functionality already.

Now sure, you'll get address reuse in this scenario, but that's no worse
than with an extended textual address.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/04f1df81/attachment.html>

From luke at dashjr.org  Tue Jul 15 14:48:55 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 15 Jul 2014 14:48:55 +0000
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
Message-ID: <201407151448.57223.luke@dashjr.org>

On Tuesday, July 15, 2014 8:00:41 AM Jeff Garzik wrote:
> Proxying another's idea, from CoinSummit.
> 
> The request:   It would be useful to limit the lifetime of a bitcoin
> address.  Intentionally prevent (somehow) bitcoins being sent to a
> pubkey/pkh after the key expires.
> 
> You could append "don't ["permit"|confirm] after X [time|block]"  to
> the address I suppose.  The metadata would not be digitally signed,
> but it would be hash-sealed.  As "address" is a client-side notion,
> wallet clients would be the ones enforcing such a rule.

I agree this would be useful for the "permit" case, but not the "confirm" case 
- it's important that transactions valid in block X also be equally valid in 
block X+1 to avoid reorg issues.

> Bitcoin protocol of course knows about keys, and key expiration is a
> well known and useful concept in public key cryptography.  The best
> insertion point in the protocol for key expiration is an open
> question, if it's even a good idea at that level at all.  Some flag
> "no more TxOuts exactly like this [after X block?]"?

This would force every wallet to keep an index of all TXOs ever.

> I readily admit I don't have good answers, but it does seem valuable IMO to
> * Prevent users from accidentally sending to an "expired" TxOut/pkh.
> This happens in the field.
> * Discourage address reuse

Actually, I think this may make address reuse easier, as with base58 adding 
data will make it impossible to tell at a glance when someone is reusing a key 
with just a different expiration... I suppose something other than base58 
*could* be used to resolve this, however.

> * Enable sites that generate lots of keys to rotate ancient keys off
> their core systems.  (HD wallets mitigate this)

They can already do this. It's perfectly valid for wallets/services to ignore 
(and not consider as payment) transactions using an address more than once. 
There might be race attacks if this is implemented in an immediate fashon 
(attacker transaction gets mined first to kill a payment), but should be 
pretty safe after a few blocks.

Luke



From jgarzik at bitpay.com  Tue Jul 15 15:11:25 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 11:11:25 -0400
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <201407151448.57223.luke@dashjr.org>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<201407151448.57223.luke@dashjr.org>
Message-ID: <CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>

On Tue, Jul 15, 2014 at 10:48 AM, Luke Dashjr <luke at dashjr.org> wrote:
> They can already do this. It's perfectly valid for wallets/services to ignore
> (and not consider as payment) transactions using an address more than once.
> There might be race attacks if this is implemented in an immediate fashon
> (attacker transaction gets mined first to kill a payment), but should be
> pretty safe after a few blocks.

Sure it's valid.  However, few users will appreciate "you ignored my
deposit" as a feature.

Payment protocol just doesn't well the use cases of,
* an on-going payment stream from, e.g. Eligius to coinbase
* deposit addresses and deposit situations

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Tue Jul 15 15:17:04 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 11:17:04 -0400
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
Message-ID: <CAJHLa0MMaQU7Xu=vo0Z2C5h5M-Oa9_a648yDRrw6UR=r81X66w@mail.gmail.com>

Unicode guarantees that null-terminated strings still work.  U+0000
terminates a unicode (or C) string.  strlen() gets the string byte
count.  mbstowcs() gets the character count.

Whitespace can be problematic, but should be allowed.  Control
characters should be filtered.  Emoticons probably cannot be filtered
without substandard approaches such as character blacklists, a road
you do not want to travel.

(all this is simply standard practice)


On Tue, Jul 15, 2014 at 9:07 AM, Eric Winer <enwiner at gmail.com> wrote:
> I don't know for sure if the test vector is correct NFC form.  But for what
> it's worth, the Pile of Poo character is pretty easily accessible on the
> iPhone and Android keyboards, and in this string it's already in NFC form
> (f09f92a9 in the test result).  I've certainly seen it in usernames around
> the internet, and wouldn't be surprised to see it in passphrases entered on
> smartphones, especially if the author of a BIP38-compatible app includes a
> (possibly ill-advised) suggestion to have your passphrase "include special
> characters".
>
> I haven't seen the NULL character on any smartphone keyboards, though - I
> assume the iOS and Android developers had the foresight to know how much
> havoc that would wreak on systems assuming null-terminated strings.  It
> seems unlikely that NULL would be in a real-world passphrase entered by a
> sane user.
>
>
> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:
>>
>> [+cc aaron]
>>
>> We recently added an implementation of BIP 38 (password protected private
>> keys) to bitcoinj. It came to my attention that the third test vector may be
>> broken. It gives a hex version of what the NFC normalised version of the
>> input string should be, but this does not match the results of the Java
>> unicode normaliser, and in fact I can't even get Python to print the names
>> of the characters past the embedded null. I'm curious where this normalised
>> version came from.
>>
>> Given that "pile of poo" is not a character I think any sane user would
>> put into a passphrase, I question the value of this test vector. NFC form is
>> intended to collapse things like umlaut control characters onto their prior
>> code point, but here we're feeding the algorithm what is basically garbage
>> so I'm not totally surprised that different implementations appear to
>> disagree on the outcome.
>>
>> Proposed action: we remove this test vector as it does not represent any
>> real world usage of the spec, or if we desperately need to verify NFC
>> normalisation I suggest using a different, more realistic test string, like
>> Z?rich, or something written in Thai.
>>
>>
>>
>> Test 3:
>>
>> Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK UPSILON
>> WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER LONG I, PILE
>> OF POO)
>> Encrypted key: 6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>> Unencrypted private key (WIF):
>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>> Note: The non-standard UTF-8 characters in this passphrase should be NFC
>> normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before
>> further processing
>>
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Tue Jul 15 15:18:26 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 15 Jul 2014 17:18:26 +0200
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<201407151448.57223.luke@dashjr.org>
	<CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>
Message-ID: <CANEZrP30PLQAebOkoLUphR+6wnwyE7K_BX=bszF8T5UPvai-Lg@mail.gmail.com>

>
> Payment protocol just doesn't well the use cases of,
> * an on-going payment stream from, e.g. Eligius to coinbase
> * deposit addresses and deposit situations


This seems to be the key point of disagreement here. Wladimir and I think
it satisfies your requirement just fine. You disagree. Let's get to the
bottom of that.

A PaymentRequest with a zero valued pay-to-address output and an expiration
time, base58 encoded, would look very much like your extended address form.
I don't suggest anyone actually represents PaymentRequest's using base58
but it helps to see the conceptual analogue. There'd be a bit more stuff in
there like some varint and wiretype codes but we're talking a handful of
bytes. Functionally, it'd be identical.

Places like protocols or APIs that require a piece of text and cannot
handle a piece of binary data could be retrofitted into the new world by
accepting base58 encoded PaymentRequest's. This would be kind of silly
because it's fundamentally binary data, but we already do this so it's at
least consistently silly :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/f3bb77d8/attachment.html>

From mike at plan99.net  Tue Jul 15 15:20:00 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 15 Jul 2014 17:20:00 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CAJHLa0MMaQU7Xu=vo0Z2C5h5M-Oa9_a648yDRrw6UR=r81X66w@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CAJHLa0MMaQU7Xu=vo0Z2C5h5M-Oa9_a648yDRrw6UR=r81X66w@mail.gmail.com>
Message-ID: <CANEZrP1ee5wnekmoA-R+x30XB13bfhHcdyKS96BXac8POfPoNg@mail.gmail.com>

>
> Unicode guarantees that null-terminated strings still work.


UTF-8 guarantees that. Other encodings do not, you can have null bytes in
UTF-16 strings for example. Indeed most languages that use pascal-style
encodings internally allow null characters in strings, it's just not a good
idea to exploit that fact ...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/db5f1b26/attachment.html>

From andreas at schildbach.de  Tue Jul 15 15:32:59 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 15 Jul 2014 17:32:59 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CAJHLa0MMaQU7Xu=vo0Z2C5h5M-Oa9_a648yDRrw6UR=r81X66w@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CAJHLa0MMaQU7Xu=vo0Z2C5h5M-Oa9_a648yDRrw6UR=r81X66w@mail.gmail.com>
Message-ID: <lq3hjc$s4a$1@ger.gmane.org>

Can you provide the rationale for standard practice? For example, why
should whitespace be allowed? I regularly use trim() on any passphrase
(or other input ftm).

So what's the action point? Should we amend the spec to filter control
characters? That would get rid of the \u0000 problem.


On 07/15/2014 05:17 PM, Jeff Garzik wrote:
> Unicode guarantees that null-terminated strings still work.  U+0000
> terminates a unicode (or C) string.  strlen() gets the string byte
> count.  mbstowcs() gets the character count.
> 
> Whitespace can be problematic, but should be allowed.  Control
> characters should be filtered.  Emoticons probably cannot be filtered
> without substandard approaches such as character blacklists, a road
> you do not want to travel.
> 
> (all this is simply standard practice)
> 
> 
> On Tue, Jul 15, 2014 at 9:07 AM, Eric Winer <enwiner at gmail.com> wrote:
>> I don't know for sure if the test vector is correct NFC form.  But for what
>> it's worth, the Pile of Poo character is pretty easily accessible on the
>> iPhone and Android keyboards, and in this string it's already in NFC form
>> (f09f92a9 in the test result).  I've certainly seen it in usernames around
>> the internet, and wouldn't be surprised to see it in passphrases entered on
>> smartphones, especially if the author of a BIP38-compatible app includes a
>> (possibly ill-advised) suggestion to have your passphrase "include special
>> characters".
>>
>> I haven't seen the NULL character on any smartphone keyboards, though - I
>> assume the iOS and Android developers had the foresight to know how much
>> havoc that would wreak on systems assuming null-terminated strings.  It
>> seems unlikely that NULL would be in a real-world passphrase entered by a
>> sane user.
>>
>>
>> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:
>>>
>>> [+cc aaron]
>>>
>>> We recently added an implementation of BIP 38 (password protected private
>>> keys) to bitcoinj. It came to my attention that the third test vector may be
>>> broken. It gives a hex version of what the NFC normalised version of the
>>> input string should be, but this does not match the results of the Java
>>> unicode normaliser, and in fact I can't even get Python to print the names
>>> of the characters past the embedded null. I'm curious where this normalised
>>> version came from.
>>>
>>> Given that "pile of poo" is not a character I think any sane user would
>>> put into a passphrase, I question the value of this test vector. NFC form is
>>> intended to collapse things like umlaut control characters onto their prior
>>> code point, but here we're feeding the algorithm what is basically garbage
>>> so I'm not totally surprised that different implementations appear to
>>> disagree on the outcome.
>>>
>>> Proposed action: we remove this test vector as it does not represent any
>>> real world usage of the spec, or if we desperately need to verify NFC
>>> normalisation I suggest using a different, more realistic test string, like
>>> Z?rich, or something written in Thai.
>>>
>>>
>>>
>>> Test 3:
>>>
>>> Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK UPSILON
>>> WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER LONG I, PILE
>>> OF POO)
>>> Encrypted key: 6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
>>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>>> Unencrypted private key (WIF):
>>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>>> Note: The non-standard UTF-8 characters in this passphrase should be NFC
>>> normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before
>>> further processing
>>>
>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Want fast and easy access to all the code in your enterprise? Index and
>>> search up to 200,000 lines of code with a free copy of Black Duck
>>> Code Sight - the same software that powers the world's largest code
>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>> http://p.sf.net/sfu/bds
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> 





From jgarzik at bitpay.com  Tue Jul 15 15:35:03 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 11:35:03 -0400
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CANEZrP30PLQAebOkoLUphR+6wnwyE7K_BX=bszF8T5UPvai-Lg@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<201407151448.57223.luke@dashjr.org>
	<CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>
	<CANEZrP30PLQAebOkoLUphR+6wnwyE7K_BX=bszF8T5UPvai-Lg@mail.gmail.com>
Message-ID: <CAJHLa0Nxav0+VUZoJuiBKXAMMFv1GeGTq0kSn_qeBTizsFRCSQ@mail.gmail.com>

This is a well known problem of BIP 70 from day one, because BIP 70
functions at too-low a level.

What needs to be negotiated between parties is a _payment
relationship_ that exchanges HD wallet data. This is what is necessary
to establish and maintain an ongoing payment relationship.

BIP 70 is focused on singular payments with specific outputs and
values.  BIP 70 wants to transmit an actual transaction.  That does
not fit the use cases described.

Adding in a hack that makes zero-valued outputs behave different does
not change the granularity at which BIP 70 operates.

This is a key reason why I have not just ACK'd the BIP 70 subscription
stuff.  Subscriptions are another example of a longer term payment
relationship.  For such case, you want to exchange HD wallet payment
details.  You do not send or receive outputs.  You might not send
transactions directly to the party (coming instead asynchronously &
unpredictably via blockchain).

BIP 70 marries the _relationship_ with payment transmittal, and the
subscription extension does not change that.

Our "contract" language must get a bit smarter, and include HD wallet
payment details, not necessarily focus on outputs.


On Tue, Jul 15, 2014 at 11:18 AM, Mike Hearn <mike at plan99.net> wrote:
>> Payment protocol just doesn't well the use cases of,
>> * an on-going payment stream from, e.g. Eligius to coinbase
>> * deposit addresses and deposit situations
>
>
> This seems to be the key point of disagreement here. Wladimir and I think it
> satisfies your requirement just fine. You disagree. Let's get to the bottom
> of that.
>
> A PaymentRequest with a zero valued pay-to-address output and an expiration
> time, base58 encoded, would look very much like your extended address form.
> I don't suggest anyone actually represents PaymentRequest's using base58 but
> it helps to see the conceptual analogue. There'd be a bit more stuff in
> there like some varint and wiretype codes but we're talking a handful of
> bytes. Functionally, it'd be identical.
>
> Places like protocols or APIs that require a piece of text and cannot handle
> a piece of binary data could be retrofitted into the new world by accepting
> base58 encoded PaymentRequest's. This would be kind of silly because it's
> fundamentally binary data, but we already do this so it's at least
> consistently silly :)



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From luke at dashjr.org  Tue Jul 15 15:41:52 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 15 Jul 2014 15:41:52 +0000
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<201407151448.57223.luke@dashjr.org>
	<CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>
Message-ID: <201407151541.53342.luke@dashjr.org>

On Tuesday, July 15, 2014 3:11:25 PM Jeff Garzik wrote:
> On Tue, Jul 15, 2014 at 10:48 AM, Luke Dashjr <luke at dashjr.org> wrote:
> > They can already do this. It's perfectly valid for wallets/services to
> > ignore (and not consider as payment) transactions using an address more
> > than once. There might be race attacks if this is implemented in an
> > immediate fashon (attacker transaction gets mined first to kill a
> > payment), but should be pretty safe after a few blocks.
> 
> Sure it's valid.  However, few users will appreciate "you ignored my
> deposit" as a feature.
> 
> Payment protocol just doesn't well the use cases of,
> * an on-going payment stream from, e.g. Eligius to coinbase

https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#Serialization_format

> * deposit addresses and deposit situations

There's no reason deposits cannot use a unique payment request or address 
every time...



From jgarzik at bitpay.com  Tue Jul 15 15:53:36 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 11:53:36 -0400
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <lq3hjc$s4a$1@ger.gmane.org>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CAJHLa0MMaQU7Xu=vo0Z2C5h5M-Oa9_a648yDRrw6UR=r81X66w@mail.gmail.com>
	<lq3hjc$s4a$1@ger.gmane.org>
Message-ID: <CAJHLa0PieYWVC798NeXWG25hhid9iYbNyzm2cK-yEdTb1W39Sw@mail.gmail.com>

On whitespace:  Security UX testing I've seen shows it is mentally
easier for some users to memorize and use longer passphrases, if they
are permitted spaces.  I've not seen anything written on use of
tabs/NLs/FFs in passphrases.

I can see the logic of some systems, that convert \s+ into ' ' for
purposes of password hashing, even though that might frustrate a
security nerd or two.
http://security.stackexchange.com/questions/32691/why-not-allow-spaces-in-a-password

I do think control characters should be filtered.

On Tue, Jul 15, 2014 at 11:32 AM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> Can you provide the rationale for standard practice? For example, why
> should whitespace be allowed? I regularly use trim() on any passphrase
> (or other input ftm).
>
> So what's the action point? Should we amend the spec to filter control
> characters? That would get rid of the \u0000 problem.
>
>
> On 07/15/2014 05:17 PM, Jeff Garzik wrote:
>> Unicode guarantees that null-terminated strings still work.  U+0000
>> terminates a unicode (or C) string.  strlen() gets the string byte
>> count.  mbstowcs() gets the character count.
>>
>> Whitespace can be problematic, but should be allowed.  Control
>> characters should be filtered.  Emoticons probably cannot be filtered
>> without substandard approaches such as character blacklists, a road
>> you do not want to travel.
>>
>> (all this is simply standard practice)
>>
>>
>> On Tue, Jul 15, 2014 at 9:07 AM, Eric Winer <enwiner at gmail.com> wrote:
>>> I don't know for sure if the test vector is correct NFC form.  But for what
>>> it's worth, the Pile of Poo character is pretty easily accessible on the
>>> iPhone and Android keyboards, and in this string it's already in NFC form
>>> (f09f92a9 in the test result).  I've certainly seen it in usernames around
>>> the internet, and wouldn't be surprised to see it in passphrases entered on
>>> smartphones, especially if the author of a BIP38-compatible app includes a
>>> (possibly ill-advised) suggestion to have your passphrase "include special
>>> characters".
>>>
>>> I haven't seen the NULL character on any smartphone keyboards, though - I
>>> assume the iOS and Android developers had the foresight to know how much
>>> havoc that would wreak on systems assuming null-terminated strings.  It
>>> seems unlikely that NULL would be in a real-world passphrase entered by a
>>> sane user.
>>>
>>>
>>> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:
>>>>
>>>> [+cc aaron]
>>>>
>>>> We recently added an implementation of BIP 38 (password protected private
>>>> keys) to bitcoinj. It came to my attention that the third test vector may be
>>>> broken. It gives a hex version of what the NFC normalised version of the
>>>> input string should be, but this does not match the results of the Java
>>>> unicode normaliser, and in fact I can't even get Python to print the names
>>>> of the characters past the embedded null. I'm curious where this normalised
>>>> version came from.
>>>>
>>>> Given that "pile of poo" is not a character I think any sane user would
>>>> put into a passphrase, I question the value of this test vector. NFC form is
>>>> intended to collapse things like umlaut control characters onto their prior
>>>> code point, but here we're feeding the algorithm what is basically garbage
>>>> so I'm not totally surprised that different implementations appear to
>>>> disagree on the outcome.
>>>>
>>>> Proposed action: we remove this test vector as it does not represent any
>>>> real world usage of the spec, or if we desperately need to verify NFC
>>>> normalisation I suggest using a different, more realistic test string, like
>>>> Z?rich, or something written in Thai.
>>>>
>>>>
>>>>
>>>> Test 3:
>>>>
>>>> Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK UPSILON
>>>> WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER LONG I, PILE
>>>> OF POO)
>>>> Encrypted key: 6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
>>>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>>>> Unencrypted private key (WIF):
>>>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>>>> Note: The non-standard UTF-8 characters in this passphrase should be NFC
>>>> normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before
>>>> further processing
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> Want fast and easy access to all the code in your enterprise? Index and
>>>> search up to 200,000 lines of code with a free copy of Black Duck
>>>> Code Sight - the same software that powers the world's largest code
>>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>> http://p.sf.net/sfu/bds
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Want fast and easy access to all the code in your enterprise? Index and
>>> search up to 200,000 lines of code with a free copy of Black Duck
>>> Code Sight - the same software that powers the world's largest code
>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>> http://p.sf.net/sfu/bds
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Tue Jul 15 15:55:43 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 15 Jul 2014 11:55:43 -0400
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <201407151541.53342.luke@dashjr.org>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<201407151448.57223.luke@dashjr.org>
	<CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>
	<201407151541.53342.luke@dashjr.org>
Message-ID: <CAJHLa0M9UC+7D+5NK7eHMPMPJb+K-eqpGC77t4ikKLz76GtVPw@mail.gmail.com>

On Tue, Jul 15, 2014 at 11:41 AM, Luke Dashjr <luke at dashjr.org> wrote:
> There's no reason deposits cannot use a unique payment request or address
> every time...

Actually, and this is key, there _are_ reasons why deposits might not
be able to use PaymentRequests.  Payments happen even when
wallets/computers are offline.

If you have negotiated HD wallet details, you can use a new address
every time, as mentioned.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Tue Jul 15 16:26:15 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 15 Jul 2014 18:26:15 +0200
Subject: [Bitcoin-development] Bitcoin address TTL & key expiration?
In-Reply-To: <CAJHLa0M9UC+7D+5NK7eHMPMPJb+K-eqpGC77t4ikKLz76GtVPw@mail.gmail.com>
References: <CAJHLa0M7iEUQnJ9M4A3ev3EQqxUVQG85qucRamvMb0n-CztOFA@mail.gmail.com>
	<201407151448.57223.luke@dashjr.org>
	<CAJHLa0Nj2f4mSKNggGH4sXZTLYNwdVGO7uMSzN7V_vVKU-6w9Q@mail.gmail.com>
	<201407151541.53342.luke@dashjr.org>
	<CAJHLa0M9UC+7D+5NK7eHMPMPJb+K-eqpGC77t4ikKLz76GtVPw@mail.gmail.com>
Message-ID: <CANEZrP1n+oK1_OH2njmYy0S9J1qLb9MqHF2HY6NONovwB9bC0A@mail.gmail.com>

>
> Actually, and this is key, there _are_ reasons why deposits might not
> be able to use PaymentRequests.  Payments happen even when
> wallets/computers are offline.
>

I don't understand this point. It's the *sender* that is parsing the
PaymentRequest and following the instructions. By definition the sender
must be online. A computer that is switched off cannot sign a transaction
at all.


> If you have negotiated HD wallet details, you can use a new address
> every time, as mentioned.


Yes, and an extension to BIP 70 to allow for this (or stealth addresses or
whatever) has been discussed several times.

This thread started by proposing (I think) an expiry time for addresses.
BIP70 satisfies this use case, I think we all agree on that. Now for cases
where someone can't use BIP70 for whatever reason, or it's suboptimal,
absolutely we should design extensions to fix that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/3528ace8/attachment.html>

From boydb at midnightdesign.ws  Tue Jul 15 15:13:44 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Tue, 15 Jul 2014 10:13:44 -0500
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
Message-ID: <CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>

I was part of adding in that test vector, and I think it's a good test
vector since it is an extreme edge-case of the current definition: If the
BIP38 proposal allows any password that can be in UTF-8, NFC normalized
form, those characters cover the various edge cases (combining characters,
null character, astral range) that if your implementation doesn't handle,
then it can't really be said to be "BIP38-compatible/compliant", right?

The "passphrase" in the test vector is NOT in NFC form; that's the point.
Whatever implementation gets designed has to assume the input is not
already NFC-normalized and needs to handle/sanitize that input before
further processing. To test your implementation for compliance, you should
not be inputting the NFC-normalized bytestring as the password input, you
should be entering the original passphrase as the test. My original pull
request for this change (https://github.com/bitcoin/bips/pull/29) shows a
Python and a NodeJS way to input that test vector password as intended.

Some input devices may already handle the input as NFC, which is great, but
per the BIP38 proposal, that shouldn't be assumed, so various
implementations are cross-compatible. If one implementation assumes the
input is already NFC, they may encode/decode the password incorrectly, and
lock a user out of their wallet. Android allows different user keyboards to
be used, so I'm guessing there's one somewhere that allows manual entry of
unicode codepoints that could be used to enter a null character, and with
the next version of iOS, Apple devices will also get custom keyboard
options, too, so even if the default Apple keyboard does NFC-form properly,
other developers' keyboards may not. So while it is an extreme edge case,
that is not very likely to be used as a "real password" by any user, that's
what test vectors are for: to test for the edge case that you might not
have expected and handled in your implementation.

Brooks


On Tue, Jul 15, 2014 at 8:07 AM, Eric Winer <enwiner at gmail.com> wrote:

> I don't know for sure if the test vector is correct NFC form.  But for
> what it's worth, the Pile of Poo character is pretty easily accessible on
> the iPhone and Android keyboards, and in this string it's already in NFC
> form (f09f92a9 in the test result).  I've certainly seen it in usernames
> around the internet, and wouldn't be surprised to see it in passphrases
> entered on smartphones, especially if the author of a BIP38-compatible app
> includes a (possibly ill-advised) suggestion to have your passphrase
> "include special characters".
>
> I haven't seen the NULL character on any smartphone keyboards, though - I
> assume the iOS and Android developers had the foresight to know how much
> havoc that would wreak on systems assuming null-terminated strings.  It
> seems unlikely that NULL would be in a real-world passphrase entered by a
> sane user.
>
>
> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> [+cc aaron]
>>
>> We recently added an implementation of BIP 38 (password protected private
>> keys) to bitcoinj. It came to my attention that the third test vector may
>> be broken. It gives a hex version of what the NFC normalised version of the
>> input string should be, but this does not match the results of the Java
>> unicode normaliser, and in fact I can't even get Python to print the names
>> of the characters past the embedded null. I'm curious where this normalised
>> version came from.
>>
>> Given that "pile of poo" is not a character I think any sane user would
>> put into a passphrase, I question the value of this test vector. NFC form
>> is intended to collapse things like umlaut control characters onto their
>> prior code point, but here we're feeding the algorithm what is basically
>> garbage so I'm not totally surprised that different implementations appear
>> to disagree on the outcome.
>>
>> Proposed action: we remove this test vector as it does not represent any
>> real world usage of the spec, or if we desperately need to verify NFC
>> normalisation I suggest using a different, more realistic test string, like
>> Z?rich, or something written in Thai.
>>
>>
>>
>> Test 3:
>>
>>    - Passphrase ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
>>    UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING ACUTE
>>    ACCENT <http://codepoints.net/U+0301>, NULL
>>    <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I
>>    <http://codepoints.net/U+10400>, PILE OF POO
>>    <http://codepoints.net/U+1F4A9>)
>>    - Encrypted key:
>>    6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn
>>    - Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>>    - Unencrypted private key (WIF):
>>    5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>>    - *Note:* The non-standard UTF-8 characters in this passphrase should
>>    be NFC normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before
>>    further processing
>>
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/298353e5/attachment.html>

From mike at plan99.net  Tue Jul 15 18:20:13 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 15 Jul 2014 20:20:13 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
Message-ID: <CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>

Yes, we know, Andreas' code is indeed doing normalisation.

However it appears the output bytes end up being different. What I get back
is:

cf9300*01*303430300166346139

vs

cf9300*f0*909080f09f92a9

from the spec.

I'm not sure why. It appears this is due to the character from the astral
planes. Java is old and uses 16 bit characters internally - it wouldn't
surprise me if there's some weirdness that means it doesn't/won't support
this kind of thing.

I recommend instead that any implementation that wishes to be compatible
with JVM based wallets (I suspect Android is the same) just refuse any
passphrase that includes characters outside the BMP. At least unless
someone can find a fix. I somehow doubt this will really hurt anyone.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/fe65167b/attachment.html>

From voisine at gmail.com  Tue Jul 15 22:23:13 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Tue, 15 Jul 2014 15:23:13 -0700
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
Message-ID: <CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>

If the user creates a password on an iOS device with an astral
character and then can't enter that password on a JVM wallet, that
sucks. If JVMs really can't support unicode NFC then that's a strong
case to limit the spec to the subset of unicode that all popular
platforms can support, but it sounds like it might just be a JVM
string library bug that could hopefully be reported and fixed. I get
the same result as in the test case using apple's
CFStringNormalize(passphrase, kCFStringNormalizationFormC);

Aaron Voisine
breadwallet.com


On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:
> Yes, we know, Andreas' code is indeed doing normalisation.
>
> However it appears the output bytes end up being different. What I get back
> is:
>
> cf930001303430300166346139
>
> vs
>
> cf9300f0909080f09f92a9
>
> from the spec.
>
> I'm not sure why. It appears this is due to the character from the astral
> planes. Java is old and uses 16 bit characters internally - it wouldn't
> surprise me if there's some weirdness that means it doesn't/won't support
> this kind of thing.
>
> I recommend instead that any implementation that wishes to be compatible
> with JVM based wallets (I suspect Android is the same) just refuse any
> passphrase that includes characters outside the BMP. At least unless someone
> can find a fix. I somehow doubt this will really hurt anyone.
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From mike at plan99.net  Wed Jul 16 09:12:26 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 16 Jul 2014 11:12:26 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
Message-ID: <CANEZrP0wQa1s3CsKrnWc5fmBOwO6V7Ly7L7OLwad-yr0OnnRUw@mail.gmail.com>

I'm all for fixing bugs, but I know from bitter experience that outside the
BMP dragons lurk. Browsers don't even expose Unicode APIs at all. You end
up needing to ship an entire pure-js implementation, which can be too large
for some use cases (too much time sunk on that issue in my last job).

I'm hoping BIP 38 doesn't get widely used anyway, to be frank. People
moving private keys around by hand has caused quite a few problems in the
past, sometimes people lost money. It's better to work at the level of a
wallet and ideally ask people to move money using regular transactions. Way
less potential for errors.

Regardless, I'll file a JVM bug and see what the outcome is.


On Wed, Jul 16, 2014 at 12:23 AM, Aaron Voisine <voisine at gmail.com> wrote:

> If the user creates a password on an iOS device with an astral
> character and then can't enter that password on a JVM wallet, that
> sucks. If JVMs really can't support unicode NFC then that's a strong
> case to limit the spec to the subset of unicode that all popular
> platforms can support, but it sounds like it might just be a JVM
> string library bug that could hopefully be reported and fixed. I get
> the same result as in the test case using apple's
> CFStringNormalize(passphrase, kCFStringNormalizationFormC);
>
> Aaron Voisine
> breadwallet.com
>
>
> On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:
> > Yes, we know, Andreas' code is indeed doing normalisation.
> >
> > However it appears the output bytes end up being different. What I get
> back
> > is:
> >
> > cf930001303430300166346139
> >
> > vs
> >
> > cf9300f0909080f09f92a9
> >
> > from the spec.
> >
> > I'm not sure why. It appears this is due to the character from the astral
> > planes. Java is old and uses 16 bit characters internally - it wouldn't
> > surprise me if there's some weirdness that means it doesn't/won't support
> > this kind of thing.
> >
> > I recommend instead that any implementation that wishes to be compatible
> > with JVM based wallets (I suspect Android is the same) just refuse any
> > passphrase that includes characters outside the BMP. At least unless
> someone
> > can find a fix. I somehow doubt this will really hurt anyone.
> >
> >
> ------------------------------------------------------------------------------
> > Want fast and easy access to all the code in your enterprise? Index and
> > search up to 200,000 lines of code with a free copy of Black Duck
> > Code Sight - the same software that powers the world's largest code
> > search on Ohloh, the Black Duck Open Hub! Try it now.
> > http://p.sf.net/sfu/bds
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/c9ab11cb/attachment.html>

From andreas at schildbach.de  Wed Jul 16 09:17:44 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Wed, 16 Jul 2014 11:17:44 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
Message-ID: <lq5fvo$4s6$1@ger.gmane.org>

Guys, you are always talking about the Unicode astral plane, but in fact
its a plain old (ASCII) control character where this problem starts and
likely ends: \u0000.

Let's ban/filter ISO control characters and be done with it. Most
control characters will never be enterable by any keyboard into a
password field. Of course I assume that Character.isISOControl() works
consistently across platforms.

http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29


On 07/16/2014 12:23 AM, Aaron Voisine wrote:
> If the user creates a password on an iOS device with an astral
> character and then can't enter that password on a JVM wallet, that
> sucks. If JVMs really can't support unicode NFC then that's a strong
> case to limit the spec to the subset of unicode that all popular
> platforms can support, but it sounds like it might just be a JVM
> string library bug that could hopefully be reported and fixed. I get
> the same result as in the test case using apple's
> CFStringNormalize(passphrase, kCFStringNormalizationFormC);
> 
> Aaron Voisine
> breadwallet.com
> 
> 
> On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:
>> Yes, we know, Andreas' code is indeed doing normalisation.
>>
>> However it appears the output bytes end up being different. What I get back
>> is:
>>
>> cf930001303430300166346139
>>
>> vs
>>
>> cf9300f0909080f09f92a9
>>
>> from the spec.
>>
>> I'm not sure why. It appears this is due to the character from the astral
>> planes. Java is old and uses 16 bit characters internally - it wouldn't
>> surprise me if there's some weirdness that means it doesn't/won't support
>> this kind of thing.
>>
>> I recommend instead that any implementation that wishes to be compatible
>> with JVM based wallets (I suspect Android is the same) just refuse any
>> passphrase that includes characters outside the BMP. At least unless someone
>> can find a fix. I somehow doubt this will really hurt anyone.
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> 





From mike at plan99.net  Wed Jul 16 09:29:16 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 16 Jul 2014 11:29:16 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <lq5fvo$4s6$1@ger.gmane.org>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
	<lq5fvo$4s6$1@ger.gmane.org>
Message-ID: <CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>

Yes sorry, you're right, the issue starts with the null code point. Python
seems to have problems starting there too. It might work if we took that
out.


On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach <andreas at schildbach.de>
wrote:

> Guys, you are always talking about the Unicode astral plane, but in fact
> its a plain old (ASCII) control character where this problem starts and
> likely ends: \u0000.
>
> Let's ban/filter ISO control characters and be done with it. Most
> control characters will never be enterable by any keyboard into a
> password field. Of course I assume that Character.isISOControl() works
> consistently across platforms.
>
>
> http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
>
>
> On 07/16/2014 12:23 AM, Aaron Voisine wrote:
> > If the user creates a password on an iOS device with an astral
> > character and then can't enter that password on a JVM wallet, that
> > sucks. If JVMs really can't support unicode NFC then that's a strong
> > case to limit the spec to the subset of unicode that all popular
> > platforms can support, but it sounds like it might just be a JVM
> > string library bug that could hopefully be reported and fixed. I get
> > the same result as in the test case using apple's
> > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
> >
> > Aaron Voisine
> > breadwallet.com
> >
> >
> > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:
> >> Yes, we know, Andreas' code is indeed doing normalisation.
> >>
> >> However it appears the output bytes end up being different. What I get
> back
> >> is:
> >>
> >> cf930001303430300166346139
> >>
> >> vs
> >>
> >> cf9300f0909080f09f92a9
> >>
> >> from the spec.
> >>
> >> I'm not sure why. It appears this is due to the character from the
> astral
> >> planes. Java is old and uses 16 bit characters internally - it wouldn't
> >> surprise me if there's some weirdness that means it doesn't/won't
> support
> >> this kind of thing.
> >>
> >> I recommend instead that any implementation that wishes to be compatible
> >> with JVM based wallets (I suspect Android is the same) just refuse any
> >> passphrase that includes characters outside the BMP. At least unless
> someone
> >> can find a fix. I somehow doubt this will really hurt anyone.
> >>
> >>
> ------------------------------------------------------------------------------
> >> Want fast and easy access to all the code in your enterprise? Index and
> >> search up to 200,000 lines of code with a free copy of Black Duck
> >> Code Sight - the same software that powers the world's largest code
> >> search on Ohloh, the Black Duck Open Hub! Try it now.
> >> http://p.sf.net/sfu/bds
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> ------------------------------------------------------------------------------
> > Want fast and easy access to all the code in your enterprise? Index and
> > search up to 200,000 lines of code with a free copy of Black Duck
> > Code Sight - the same software that powers the world's largest code
> > search on Ohloh, the Black Duck Open Hub! Try it now.
> > http://p.sf.net/sfu/bds
> >
>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/3019d571/attachment.html>

From andreas at schildbach.de  Wed Jul 16 10:46:02 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Wed, 16 Jul 2014 12:46:02 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>	<lq5fvo$4s6$1@ger.gmane.org>
	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>
Message-ID: <lq5l5a$4fl$1@ger.gmane.org>

I will change the bitcoinj implementation and propose a new test vector.



On 07/16/2014 11:29 AM, Mike Hearn wrote:
> Yes sorry, you're right, the issue starts with the null code point.
> Python seems to have problems starting there too. It might work if we
> took that out.
> 
> 
> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach
> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> 
>     Guys, you are always talking about the Unicode astral plane, but in fact
>     its a plain old (ASCII) control character where this problem starts and
>     likely ends: \u0000.
> 
>     Let's ban/filter ISO control characters and be done with it. Most
>     control characters will never be enterable by any keyboard into a
>     password field. Of course I assume that Character.isISOControl() works
>     consistently across platforms.
> 
>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
> 
> 
>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:
>     > If the user creates a password on an iOS device with an astral
>     > character and then can't enter that password on a JVM wallet, that
>     > sucks. If JVMs really can't support unicode NFC then that's a strong
>     > case to limit the spec to the subset of unicode that all popular
>     > platforms can support, but it sounds like it might just be a JVM
>     > string library bug that could hopefully be reported and fixed. I get
>     > the same result as in the test case using apple's
>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
>     >
>     > Aaron Voisine
>     > breadwallet.com <http://breadwallet.com>
>     >
>     >
>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net
>     <mailto:mike at plan99.net>> wrote:
>     >> Yes, we know, Andreas' code is indeed doing normalisation.
>     >>
>     >> However it appears the output bytes end up being different. What
>     I get back
>     >> is:
>     >>
>     >> cf930001303430300166346139
>     >>
>     >> vs
>     >>
>     >> cf9300f0909080f09f92a9
>     >>
>     >> from the spec.
>     >>
>     >> I'm not sure why. It appears this is due to the character from
>     the astral
>     >> planes. Java is old and uses 16 bit characters internally - it
>     wouldn't
>     >> surprise me if there's some weirdness that means it doesn't/won't
>     support
>     >> this kind of thing.
>     >>
>     >> I recommend instead that any implementation that wishes to be
>     compatible
>     >> with JVM based wallets (I suspect Android is the same) just
>     refuse any
>     >> passphrase that includes characters outside the BMP. At least
>     unless someone
>     >> can find a fix. I somehow doubt this will really hurt anyone.
>     >>
>     >>
>     ------------------------------------------------------------------------------
>     >> Want fast and easy access to all the code in your enterprise?
>     Index and
>     >> search up to 200,000 lines of code with a free copy of Black Duck
>     >> Code Sight - the same software that powers the world's largest code
>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
>     >> http://p.sf.net/sfu/bds
>     >> _______________________________________________
>     >> Bitcoin-development mailing list
>     >> Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >>
>     >
>     >
>     ------------------------------------------------------------------------------
>     > Want fast and easy access to all the code in your enterprise?
>     Index and
>     > search up to 200,000 lines of code with a free copy of Black Duck
>     > Code Sight - the same software that powers the world's largest code
>     > search on Ohloh, the Black Duck Open Hub! Try it now.
>     > http://p.sf.net/sfu/bds
>     >
> 
> 
> 
>     ------------------------------------------------------------------------------
>     Want fast and easy access to all the code in your enterprise? Index and
>     search up to 200,000 lines of code with a free copy of Black Duck
>     Code Sight - the same software that powers the world's largest code
>     search on Ohloh, the Black Duck Open Hub! Try it now.
>     http://p.sf.net/sfu/bds
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From andreas at schildbach.de  Wed Jul 16 11:04:08 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Wed, 16 Jul 2014 13:04:08 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <lq5l5a$4fl$1@ger.gmane.org>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>	<lq5fvo$4s6$1@ger.gmane.org>	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>
	<lq5l5a$4fl$1@ger.gmane.org>
Message-ID: <lq5m78$j23$1@ger.gmane.org>

Damn, I just realized that I implement only the decoding side of BIP38.
So I cannot propose a complete test vector. Here is what I have:


Passphrase: ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER
LONG I, PILE OF POO)

Passphrase bytes after removing ISO control characters and NFC
normalization: 0xcf933034303066346139

Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF

Unencrypted private key (WIF):
5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4


Can someone calculate the encrypted key from it (using whatever
implementation) and I will verify it decodes properly in bitcoinj?



On 07/16/2014 12:46 PM, Andreas Schildbach wrote:
> I will change the bitcoinj implementation and propose a new test vector.
> 
> 
> 
> On 07/16/2014 11:29 AM, Mike Hearn wrote:
>> Yes sorry, you're right, the issue starts with the null code point.
>> Python seems to have problems starting there too. It might work if we
>> took that out.
>>
>>
>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach
>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
>>
>>     Guys, you are always talking about the Unicode astral plane, but in fact
>>     its a plain old (ASCII) control character where this problem starts and
>>     likely ends: \u0000.
>>
>>     Let's ban/filter ISO control characters and be done with it. Most
>>     control characters will never be enterable by any keyboard into a
>>     password field. Of course I assume that Character.isISOControl() works
>>     consistently across platforms.
>>
>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
>>
>>
>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:
>>     > If the user creates a password on an iOS device with an astral
>>     > character and then can't enter that password on a JVM wallet, that
>>     > sucks. If JVMs really can't support unicode NFC then that's a strong
>>     > case to limit the spec to the subset of unicode that all popular
>>     > platforms can support, but it sounds like it might just be a JVM
>>     > string library bug that could hopefully be reported and fixed. I get
>>     > the same result as in the test case using apple's
>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
>>     >
>>     > Aaron Voisine
>>     > breadwallet.com <http://breadwallet.com>
>>     >
>>     >
>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net
>>     <mailto:mike at plan99.net>> wrote:
>>     >> Yes, we know, Andreas' code is indeed doing normalisation.
>>     >>
>>     >> However it appears the output bytes end up being different. What
>>     I get back
>>     >> is:
>>     >>
>>     >> cf930001303430300166346139
>>     >>
>>     >> vs
>>     >>
>>     >> cf9300f0909080f09f92a9
>>     >>
>>     >> from the spec.
>>     >>
>>     >> I'm not sure why. It appears this is due to the character from
>>     the astral
>>     >> planes. Java is old and uses 16 bit characters internally - it
>>     wouldn't
>>     >> surprise me if there's some weirdness that means it doesn't/won't
>>     support
>>     >> this kind of thing.
>>     >>
>>     >> I recommend instead that any implementation that wishes to be
>>     compatible
>>     >> with JVM based wallets (I suspect Android is the same) just
>>     refuse any
>>     >> passphrase that includes characters outside the BMP. At least
>>     unless someone
>>     >> can find a fix. I somehow doubt this will really hurt anyone.
>>     >>
>>     >>
>>     ------------------------------------------------------------------------------
>>     >> Want fast and easy access to all the code in your enterprise?
>>     Index and
>>     >> search up to 200,000 lines of code with a free copy of Black Duck
>>     >> Code Sight - the same software that powers the world's largest code
>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
>>     >> http://p.sf.net/sfu/bds
>>     >> _______________________________________________
>>     >> Bitcoin-development mailing list
>>     >> Bitcoin-development at lists.sourceforge.net
>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>     >>
>>     >
>>     >
>>     ------------------------------------------------------------------------------
>>     > Want fast and easy access to all the code in your enterprise?
>>     Index and
>>     > search up to 200,000 lines of code with a free copy of Black Duck
>>     > Code Sight - the same software that powers the world's largest code
>>     > search on Ohloh, the Black Duck Open Hub! Try it now.
>>     > http://p.sf.net/sfu/bds
>>     >
>>
>>
>>
>>     ------------------------------------------------------------------------------
>>     Want fast and easy access to all the code in your enterprise? Index and
>>     search up to 200,000 lines of code with a free copy of Black Duck
>>     Code Sight - the same software that powers the world's largest code
>>     search on Ohloh, the Black Duck Open Hub! Try it now.
>>     http://p.sf.net/sfu/bds
>>     _______________________________________________
>>     Bitcoin-development mailing list
>>     Bitcoin-development at lists.sourceforge.net
>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> 





From jgarzik at bitpay.com  Wed Jul 16 12:11:39 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 16 Jul 2014 08:11:39 -0400
Subject: [Bitcoin-development] Draft BIP for geutxos message
In-Reply-To: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
References: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
Message-ID: <CAJHLa0NhZ=RuUMts19EUhY6C1+dy1yaje3Hb5Lfm+AqjRRL5uw@mail.gmail.com>

Thanks Mike.  The BIPS process is ideally an implementation & draft BIP,
like IETF RFCs.  Thanks for being a model citizen.  :)  Having an idea is
good; having an implementation is better.

Reviewing the code at the pull request, it appears OK, and I did give it a
quick test.  I have a few minor nits that I'll put in the PR, that are not
worth mentioning here.

Being able to query UTXOs is obviously useful.  Many existing applications
have been built on top of bitcoind (gettxout RPC), insight and other
existing tools that make this query available.  This is not a new feature.
That effectively reduces our evaluation to

     1. Why implement in P2P protocol, versus RPC or external API?

Neither your pull request nor email addresses this much.  I do understand
your app uses "getutxos"  But it is entirely fair and reasonable to ask why
all bitcoind users should carry this feature.

Turning to the protocol itself, "getutxos" does what is expected:  Return
that node's view of the UTXO set.  This bring us to the main issue I and
others raised in the pull request,

     2. This view of UTXO is entirely untrusted, may be malicious or
wrong.  Why export potentially dangerous information to victims?  What are
the consequences to the victims of receiving targeted, maliciously wrong
returned data?

Let us assume for the sake of progress that #2 is answered to
satisfaction.  In my view, the BIP (and implementation? haven't looked at
lighthouse) is missing

     3. An explicit solution to #2.

If one implements your BIP in a naive manner -- simply find a node, and
issue a single query -- they are dangerously exposed to malicious
information.  The BIP should describe this major security issue, and
describe at least one method of solving it (ditto implementation, if
lighthouse has not already solved this).

Comparison between this and BIP 35 (mempool command) are not apt, as miners
and full nodes treat "mempool" returned data just like any other randomly
solicited "tx" command on the network.  Unlike "mempool" cmd, this
"getutxos" cmd proffers post-verification trusted data.

I fear that this addition will lead to people building insecure apps, when
they could have just as easily queried a
slightly-more-trusted-than-just-a-random-P2P-peer network of N bitcoind's
or N Insight servers running somewhere (akin to Electrum servers).








On Thu, Jul 10, 2014 at 10:29 AM, Mike Hearn <mike at plan99.net> wrote:

> I opened up a pull req for a draft BIP for getutxo.
>
>    https://github.com/bitcoin/bips/pull/88
>
> I include a rendering below for your reading convenience. If you'd like to
> comment on design/security/etc then please first familiarise yourself with
> the long discussions that were already had here:
>
>    https://github.com/bitcoin/bitcoin/pull/4351
>
>
>
>   BIP: 45
>   Title: getutxo message
>   Author: Mike Hearn <hearn at vinumeris.com>
>   Status: Draft
>   Type: Standards Track
>   Created: 2014-06-10
>
>  Table of Contents
>
>    - Abstract
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Abstract>
>       - Motivation
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Motivation>
>       - Specification
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Specification>
>       - Backward compatibility
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Backward_compatibility>
>       - Authentication
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Authentication>
>       - Implementation
>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Implementation>
>
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#abstract>
> Abstract
>
> This document describes a small P2P protocol extension that performs UTXO
> lookups given a set of outpoints.
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#motivation>
> Motivation
>
> All full Bitcoin nodes maintain a database called the unspent transaction
> output set. This set is how double spending is checked for: to be valid a
> transaction must identify unspent outputs in this set using an identifier
> called an "outpoint", which is merely the hash of the output's containing
> transaction plus an index.
>
> The ability to query this can sometimes be useful for a lightweight/SPV
> client which does not have the full UTXO set at hand. For example, it can
> be useful in applications implementing assurance contracts to do a quick
> check when a new pledge becomes visible to test whether that pledge was
> already revoked via a double spend. Although this message is not strictly
> necessary because e.g. such an app could be implemented by fully
> downloading and storing the block chain, it is useful for obtaining
> acceptable performance and resolving various UI cases.
>
> Another example of when this data can be useful is for performing floating
> fee calculations in an SPV wallet. This use case requires some other
> changes to the Bitcoin protocol however, so we will not dwell on it here.
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#specification>
> Specification
>
> Two new messages are defined. The "getutxos" message has the following
> structure:
>
>  Field Size DescriptionData typeComments 1check mempoolbool Whether to
> apply mempool transactions during the calculation, thus exposing their
> UTXOs and removing outputs that they spend. ?outpointsvector The list of
> outpoints to be queried. Each outpoint is serialized in the same way it is
> in a tx message.
>
> The response message "utxos" has the following structure:
>
>  Field Size DescriptionData typeComments 4chain heightuint32 The height
> of the chain at the moment the result was calculated. 32chain tip hash
> uint256 Block hash of the top of the chain at the moment the result was
> calculated. ?hit bitmapbyte[] An array of bytes encoding one bit for each
> outpoint queried. Each bit indicates whether the queried outpoint was found
> in the UTXO set or not. ?result utxosresult[] A list of result objects
> (defined below), one for each outpoint that is unspent (i.e. has a bit set
> in the bitmap).
>
> The result object is defined as:
>
>  Field Size DescriptionData typeComments 4tx versionuint32 The version
> number of the transaction the UTXO was found in. 4heightuint256 The
> height of the block containing the defining transaction, or 0x7FFFFFFF if
> the tx is in the mempool. ?outputCTxOut The output itself, serialized in
> the same way as in a tx message.
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#backward-compatibility>Backward
> compatibility
>
> Nodes indicate support by advertising a protocol version above 70003 and
> by setting a new NODE_GETUTXO flag in their nServices field, which has a
> value of 2 (1
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#authentication>
> Authentication
>
> The UTXO set is not currently authenticated by anything. There are
> proposals to resolve this by introducing a new consensus rule that commits
> to a root hash of the UTXO set in blocks, however this feature is not
> presently available in the Bitcoin protocol. Once it is, the utxos message
> could be upgraded to include Merkle branches showing inclusion of the UTXOs
> in the committed sets.
>
> If the requesting client is looking up outputs for a signed transaction
> that they have locally, the client can partly verify the returned output by
> running the input scripts with it. Currently this verifies only that the
> script is correct. A future version of the Bitcoin protocol is likely to
> also allow the value to be checked in this way. It does not show that the
> output is really unspent or was ever actually created in the block chain
> however.
>
> If the requesting client has a mapping of chain heights to block hashes in
> the best chain e.g. obtained via getheaders, then they can obtain a proof
> that the output did at one point exist by requesting the block and
> searching for the output within it. When combined with Bloom filtering this
> can be reasonably efficient.
>
> Note that even when the outputs are being checked against something this
> protocol has the same security model as Bloom filtering: a remote node can
> lie through omission by claiming the requested UTXO does not exist / was
> already spent (they are the same, from the perspective of a full node).
> Querying multiple nodes and combining their answers can be a partial
> solution to this, although as nothing authenticates the Bitcoin P2P network
> a man in the middle could still yield incorrect results.
>
> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#implementation>
> Implementation
>
> https://github.com/bitcoin/bitcoin/pull/4351/files
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/3bfd6f03/attachment.html>

From mike at plan99.net  Wed Jul 16 12:37:35 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 16 Jul 2014 14:37:35 +0200
Subject: [Bitcoin-development] Draft BIP for geutxos message
In-Reply-To: <CAJHLa0NhZ=RuUMts19EUhY6C1+dy1yaje3Hb5Lfm+AqjRRL5uw@mail.gmail.com>
References: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
	<CAJHLa0NhZ=RuUMts19EUhY6C1+dy1yaje3Hb5Lfm+AqjRRL5uw@mail.gmail.com>
Message-ID: <CANEZrP20E5R3D+Em4hordpSpe-e88iyHwyq=WdffsTCpTm+RVA@mail.gmail.com>

Thanks Jeff.

I do feel like a lot of this is covered in the writeup I attached to the
implementation pull request, and I went over it again in the ensuing
discussion, and also in the BIP.

The discussion of how to make it secure is covered in the "Upgrade" section
of the writeup and in the "Authentication" section of the BIP. Please do
let me know if these sections are missing something. The ideas discussed
there are not implemented in this pull request because outside of some
special cases, it is a very large project that involves a chain fork. You
can see the start of a solution here:

https://github.com/bitcoin/bitcoin/pull/3977


> If one implements your BIP in a naive manner -- simply find a node, and
> issue a single query -- they are dangerously exposed to malicious
> information.  The BIP should describe this major security issue, and
> describe at least one method of solving it (ditto implementation, if
> lighthouse has not already solved this).
>

The BIP already does discuss this, in the authentication section.
Suggestions for how to make it better are welcome.


> Comparison between this and BIP 35 (mempool command) are not apt, as
> miners and full nodes treat "mempool" returned data just like any other
> randomly solicited "tx" command on the network.  Unlike "mempool" cmd, this
> "getutxos" cmd proffers post-verification trusted data.
>

I don't think it does proffer that, but if a part of the BIP could be read
as doing so, let me know which part and I'll fix it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/21762d74/attachment.html>

From laanwj at gmail.com  Wed Jul 16 12:38:05 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 16 Jul 2014 14:38:05 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
	<lq5fvo$4s6$1@ger.gmane.org>
	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>
Message-ID: <CA+s+GJA2HnGstykSvy0qbVeek-3EGS2rjF=6G=U5Wpkt=317UA@mail.gmail.com>

On Wed, Jul 16, 2014 at 11:29 AM, Mike Hearn <mike at plan99.net> wrote:
> Yes sorry, you're right, the issue starts with the null code point. Python
> seems to have problems starting there too. It might work if we took that
> out.

Forbidding control characters, at least anything < 32 makes a lot of
sense to me. Carriage returns, linefeeds, formfeeds, null characters,
I see no valid reason to allow them and lots of reasons they could
cause havoc.

PILE OF POO or GRINNING CAT FACE WITH SMILING EYES should be allowed
in this day and age though.

Wladimir



From jgarzik at bitpay.com  Wed Jul 16 14:25:17 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 16 Jul 2014 10:25:17 -0400
Subject: [Bitcoin-development] Draft BIP for geutxos message
In-Reply-To: <CANEZrP20E5R3D+Em4hordpSpe-e88iyHwyq=WdffsTCpTm+RVA@mail.gmail.com>
References: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
	<CAJHLa0NhZ=RuUMts19EUhY6C1+dy1yaje3Hb5Lfm+AqjRRL5uw@mail.gmail.com>
	<CANEZrP20E5R3D+Em4hordpSpe-e88iyHwyq=WdffsTCpTm+RVA@mail.gmail.com>
Message-ID: <CAJHLa0NcFcRhczf9WWGj+4fYBdYCUBb7Zm__Y5+qhprXL21wUA@mail.gmail.com>

On the specific issue I raised, the BIP only says "Querying multiple
nodes and combining their answers can be a partial solution to this"
which is not very helpful advice.  That's a partial answer to my
question #2 with zero response for question #3.

This sort of thing really needs a warning label like "use only if you
don't have a trusted solution" and discussion of that choice is
completely absent (question #1).


On Wed, Jul 16, 2014 at 8:37 AM, Mike Hearn <mike at plan99.net> wrote:
> Thanks Jeff.
>
> I do feel like a lot of this is covered in the writeup I attached to the
> implementation pull request, and I went over it again in the ensuing
> discussion, and also in the BIP.
>
> The discussion of how to make it secure is covered in the "Upgrade" section
> of the writeup and in the "Authentication" section of the BIP. Please do let
> me know if these sections are missing something. The ideas discussed there
> are not implemented in this pull request because outside of some special
> cases, it is a very large project that involves a chain fork. You can see
> the start of a solution here:
>
> https://github.com/bitcoin/bitcoin/pull/3977
>
>>
>> If one implements your BIP in a naive manner -- simply find a node, and
>> issue a single query -- they are dangerously exposed to malicious
>> information.  The BIP should describe this major security issue, and
>> describe at least one method of solving it (ditto implementation, if
>> lighthouse has not already solved this).
>
>
> The BIP already does discuss this, in the authentication section.
> Suggestions for how to make it better are welcome.
>
>>
>> Comparison between this and BIP 35 (mempool command) are not apt, as
>> miners and full nodes treat "mempool" returned data just like any other
>> randomly solicited "tx" command on the network.  Unlike "mempool" cmd, this
>> "getutxos" cmd proffers post-verification trusted data.
>
>
> I don't think it does proffer that, but if a part of the BIP could be read
> as doing so, let me know which part and I'll fix it.



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Wed Jul 16 14:39:53 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 16 Jul 2014 16:39:53 +0200
Subject: [Bitcoin-development] Draft BIP for geutxos message
In-Reply-To: <CAJHLa0NcFcRhczf9WWGj+4fYBdYCUBb7Zm__Y5+qhprXL21wUA@mail.gmail.com>
References: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
	<CAJHLa0NhZ=RuUMts19EUhY6C1+dy1yaje3Hb5Lfm+AqjRRL5uw@mail.gmail.com>
	<CANEZrP20E5R3D+Em4hordpSpe-e88iyHwyq=WdffsTCpTm+RVA@mail.gmail.com>
	<CAJHLa0NcFcRhczf9WWGj+4fYBdYCUBb7Zm__Y5+qhprXL21wUA@mail.gmail.com>
Message-ID: <CANEZrP1r8eGcMRA6oQnsBC9C8grW+Rpzx2JyFTq92ce1eV53pQ@mail.gmail.com>

>
> On the specific issue I raised, the BIP only says "Querying multiple
> nodes and combining their answers can be a partial solution to this"
> which is not very helpful advice.  That's a partial answer to my
> question #2 with zero response for question #3.
>

I'm sorry you think it's unhelpful. It is nonetheless the best that can be
done within the constraints of the current Bitcoin protocol.


> This sort of thing really needs a warning label like "use only if you
> don't have a trusted solution" and discussion of that choice is
> completely absent (question #1).
>

It's absent for the same reason it's absent for all the other protocol
BIPs: the ability to use a trusted third party is always present and a
possible answer for any problem in Bitcoin. So I figured it didn't need
stating.

How about adding the following sentence:

"If the above constraints are insufficient for your use case, you can
alternatively query a block explorer or other trusted third party to obtain
the same information".

Would that make the BIP clearer?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/24562488/attachment.html>

From gmaxwell at gmail.com  Wed Jul 16 14:57:06 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 16 Jul 2014 07:57:06 -0700
Subject: [Bitcoin-development] Draft BIP for geutxos message
In-Reply-To: <CAJHLa0NcFcRhczf9WWGj+4fYBdYCUBb7Zm__Y5+qhprXL21wUA@mail.gmail.com>
References: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
	<CAJHLa0NhZ=RuUMts19EUhY6C1+dy1yaje3Hb5Lfm+AqjRRL5uw@mail.gmail.com>
	<CANEZrP20E5R3D+Em4hordpSpe-e88iyHwyq=WdffsTCpTm+RVA@mail.gmail.com>
	<CAJHLa0NcFcRhczf9WWGj+4fYBdYCUBb7Zm__Y5+qhprXL21wUA@mail.gmail.com>
Message-ID: <CAAS2fgTA9dmMeSmkMCa0AKpn8VMU8HDOCJQB3zfyb-E4Tmo8rQ@mail.gmail.com>

On Wed, Jul 16, 2014 at 7:25 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> On the specific issue I raised, the BIP only says "Querying multiple
> nodes and combining their answers can be a partial solution to this"
> which is not very helpful advice.  That's a partial answer to my
> question #2 with zero response for question #3.
>
> This sort of thing really needs a warning label like "use only if you
> don't have a trusted solution" and discussion of that choice is
> completely absent (question #1).

In IETF documents there is a required security considerations section,
see http://tools.ietf.org/html/bcp72

In many of our documents the whole thing is a security consideration
but for ones like these we should probably always document the
weaknesses as set out from the rest of the document.  See how BIP32
enumerates the one-private-key-breaks the chain.

On this point the getutxos document is doing well.  Perhaps breaking
some things out of the auth section into a security /
security-limitations section.  In particular, can this document
specifically call out that a local network attacker can MITM all the
peers.

(If Mike would prefer, I can send a diff with proposed changes)



From mike at plan99.net  Wed Jul 16 15:01:20 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 16 Jul 2014 17:01:20 +0200
Subject: [Bitcoin-development] Draft BIP for geutxos message
In-Reply-To: <CAAS2fgTA9dmMeSmkMCa0AKpn8VMU8HDOCJQB3zfyb-E4Tmo8rQ@mail.gmail.com>
References: <CANEZrP1t3Pz3FOgxkxsj+sSgyQhPxfUTdCGXTC7=yxeZkGt-DQ@mail.gmail.com>
	<CAJHLa0NhZ=RuUMts19EUhY6C1+dy1yaje3Hb5Lfm+AqjRRL5uw@mail.gmail.com>
	<CANEZrP20E5R3D+Em4hordpSpe-e88iyHwyq=WdffsTCpTm+RVA@mail.gmail.com>
	<CAJHLa0NcFcRhczf9WWGj+4fYBdYCUBb7Zm__Y5+qhprXL21wUA@mail.gmail.com>
	<CAAS2fgTA9dmMeSmkMCa0AKpn8VMU8HDOCJQB3zfyb-E4Tmo8rQ@mail.gmail.com>
Message-ID: <CANEZrP1TRVt1Vs035du50uLwq9V-T37aB916OtTq6bPbdBe+pw@mail.gmail.com>

>
> In particular, can this document
> specifically call out that a local network attacker can MITM all the
> peers.


It already does, last sentence of the authentication section is:

Querying multiple nodes and combining their answers can be a partial
solution to this, although as nothing authenticates the Bitcoin P2P network
a man in the middle could still yield incorrect results



> (If Mike would prefer, I can send a diff with proposed changes)
>

Yes please.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/36c2bbd0/attachment.html>

From jlrubin at MIT.EDU  Wed Jul 16 17:56:54 2014
From: jlrubin at MIT.EDU (Jeremy)
Date: Wed, 16 Jul 2014 13:56:54 -0400
Subject: [Bitcoin-development] Pay to MultiScript hash:
Message-ID: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>

Hey all,

I had an idea for a new transaction type. The base idea is that it is
matching on script hashes much like pay to script hash, but checks for one
of N scripts.

A motivating case is for "permission groups". Let's say I want to have a
single "root user" script, a 2 of 3 group, and a 2 of 2 group able to spend
a utxo. This would allow for any one of these permission groups to spend.

Right now, this could be expressed multiple ways (ie, using an op_dup if
then else chain) , but all would incur additional costs in terms of
complicated control flows. Instead, I would propose:

OP_HASH160 [20-byte-hash-value 1]...[20-byte-hash-value N] OP_N
OP_MULTISCRIPTHASHVERIFY


could be spent with

...signatures... {serialized script}


?And the alternative formulation: (more complex!)?

?OP_HASH160 OP_DUP [20-byte-hash-value 1]?
? OP_IF OP_EQUAL?
? OP_VERIFY OP_ELSE   <OP_DUP  [20-byte-hash-value 2]??  OP_IF......>
OP_ENDIF?



Of course, the permission group example is just one use case, there could
be other interesting combinations as well
?.


There is an implication in terms of increased utxo pool bloat, but also an
implication in terms of increased txn complexity (each 20 byte hash allows
for a 500 byte script, only one of the 500 byte scripts has to be
permanently stored on blockchain).


Looking forward to your feedback -- the idea is a bit preliminary, but I
think it could be exciting.

Best,

Jeremy




-- 
Jeremy Rubin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/a960cd3a/attachment.html>

From voisine at gmail.com  Wed Jul 16 21:06:41 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Wed, 16 Jul 2014 14:06:41 -0700
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <lq5m78$j23$1@ger.gmane.org>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
	<lq5fvo$4s6$1@ger.gmane.org>
	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>
	<lq5l5a$4fl$1@ger.gmane.org> <lq5m78$j23$1@ger.gmane.org>
Message-ID: <CACq0ZD6Nib4kU8kAo6jdXamw7NTTd5_JwO4x1fsVOMP2-F1=cA@mail.gmail.com>

If I first remove \u0000, so the non-normalized passphrase is
"\u03D2\u0301\U00010400\U0001F4A9", and then NFC normalize it, it
becomes "\u03D3\U00010400\U0001F4A9"

UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what
you got, Andreas!)

Encoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
with this passphrase, I get a BIP38 key of:
6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ

I recommend rather than simply removing control characters from the
password that instead the spec require that passwords containing
control characters are invalid. We don't want people trying to be
clever and putting them in thinking they are adding to the password
entropy.

Also for UI compatibility across many platforms, I'm also in favor
disallowing any character below U+0020 (space)

I can submit a PR once we figure out why Andreas's passphrase was
different than what I got.

Aaron Voisine
breadwallet.com


On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> Damn, I just realized that I implement only the decoding side of BIP38.
> So I cannot propose a complete test vector. Here is what I have:
>
>
> Passphrase: ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER
> LONG I, PILE OF POO)
>
> Passphrase bytes after removing ISO control characters and NFC
> normalization: 0xcf933034303066346139
>
> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>
> Unencrypted private key (WIF):
> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>
>
> Can someone calculate the encrypted key from it (using whatever
> implementation) and I will verify it decodes properly in bitcoinj?
>
>
>
> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:
>> I will change the bitcoinj implementation and propose a new test vector.
>>
>>
>>
>> On 07/16/2014 11:29 AM, Mike Hearn wrote:
>>> Yes sorry, you're right, the issue starts with the null code point.
>>> Python seems to have problems starting there too. It might work if we
>>> took that out.
>>>
>>>
>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach
>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
>>>
>>>     Guys, you are always talking about the Unicode astral plane, but in fact
>>>     its a plain old (ASCII) control character where this problem starts and
>>>     likely ends: \u0000.
>>>
>>>     Let's ban/filter ISO control characters and be done with it. Most
>>>     control characters will never be enterable by any keyboard into a
>>>     password field. Of course I assume that Character.isISOControl() works
>>>     consistently across platforms.
>>>
>>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
>>>
>>>
>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:
>>>     > If the user creates a password on an iOS device with an astral
>>>     > character and then can't enter that password on a JVM wallet, that
>>>     > sucks. If JVMs really can't support unicode NFC then that's a strong
>>>     > case to limit the spec to the subset of unicode that all popular
>>>     > platforms can support, but it sounds like it might just be a JVM
>>>     > string library bug that could hopefully be reported and fixed. I get
>>>     > the same result as in the test case using apple's
>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
>>>     >
>>>     > Aaron Voisine
>>>     > breadwallet.com <http://breadwallet.com>
>>>     >
>>>     >
>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net
>>>     <mailto:mike at plan99.net>> wrote:
>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.
>>>     >>
>>>     >> However it appears the output bytes end up being different. What
>>>     I get back
>>>     >> is:
>>>     >>
>>>     >> cf930001303430300166346139
>>>     >>
>>>     >> vs
>>>     >>
>>>     >> cf9300f0909080f09f92a9
>>>     >>
>>>     >> from the spec.
>>>     >>
>>>     >> I'm not sure why. It appears this is due to the character from
>>>     the astral
>>>     >> planes. Java is old and uses 16 bit characters internally - it
>>>     wouldn't
>>>     >> surprise me if there's some weirdness that means it doesn't/won't
>>>     support
>>>     >> this kind of thing.
>>>     >>
>>>     >> I recommend instead that any implementation that wishes to be
>>>     compatible
>>>     >> with JVM based wallets (I suspect Android is the same) just
>>>     refuse any
>>>     >> passphrase that includes characters outside the BMP. At least
>>>     unless someone
>>>     >> can find a fix. I somehow doubt this will really hurt anyone.
>>>     >>
>>>     >>
>>>     ------------------------------------------------------------------------------
>>>     >> Want fast and easy access to all the code in your enterprise?
>>>     Index and
>>>     >> search up to 200,000 lines of code with a free copy of Black Duck
>>>     >> Code Sight - the same software that powers the world's largest code
>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>     >> http://p.sf.net/sfu/bds
>>>     >> _______________________________________________
>>>     >> Bitcoin-development mailing list
>>>     >> Bitcoin-development at lists.sourceforge.net
>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>     >>
>>>     >
>>>     >
>>>     ------------------------------------------------------------------------------
>>>     > Want fast and easy access to all the code in your enterprise?
>>>     Index and
>>>     > search up to 200,000 lines of code with a free copy of Black Duck
>>>     > Code Sight - the same software that powers the world's largest code
>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.
>>>     > http://p.sf.net/sfu/bds
>>>     >
>>>
>>>
>>>
>>>     ------------------------------------------------------------------------------
>>>     Want fast and easy access to all the code in your enterprise? Index and
>>>     search up to 200,000 lines of code with a free copy of Black Duck
>>>     Code Sight - the same software that powers the world's largest code
>>>     search on Ohloh, the Black Duck Open Hub! Try it now.
>>>     http://p.sf.net/sfu/bds
>>>     _______________________________________________
>>>     Bitcoin-development mailing list
>>>     Bitcoin-development at lists.sourceforge.net
>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Want fast and easy access to all the code in your enterprise? Index and
>>> search up to 200,000 lines of code with a free copy of Black Duck
>>> Code Sight - the same software that powers the world's largest code
>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>> http://p.sf.net/sfu/bds
>>>
>>>
>>>
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From andreas at schildbach.de  Wed Jul 16 22:02:45 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 17 Jul 2014 00:02:45 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CACq0ZD6Nib4kU8kAo6jdXamw7NTTd5_JwO4x1fsVOMP2-F1=cA@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>	<lq5fvo$4s6$1@ger.gmane.org>	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>	<lq5l5a$4fl$1@ger.gmane.org>
	<lq5m78$j23$1@ger.gmane.org>
	<CACq0ZD6Nib4kU8kAo6jdXamw7NTTd5_JwO4x1fsVOMP2-F1=cA@mail.gmail.com>
Message-ID: <lq6sq5$71h$1@ger.gmane.org>

Please excuse me. I had a more thorough look at the original problem and
found that the only problem with the original test case was that you
cannot specify codepoints from the SMP using \u in Java. I always tried
\u010400 but that doesn't work.

Here is a fix for bitcoinj. The test now passes.

https://github.com/bitcoinj/bitcoinj/pull/143

We can (and probably should) still need to filter control chars, I'll
have a look at that now again.


On 07/16/2014 11:06 PM, Aaron Voisine wrote:
> If I first remove \u0000, so the non-normalized passphrase is
> "\u03D2\u0301\U00010400\U0001F4A9", and then NFC normalize it, it
> becomes "\u03D3\U00010400\U0001F4A9"
> 
> UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what
> you got, Andreas!)
> 
> Encoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
> with this passphrase, I get a BIP38 key of:
> 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ
> 
> I recommend rather than simply removing control characters from the
> password that instead the spec require that passwords containing
> control characters are invalid. We don't want people trying to be
> clever and putting them in thinking they are adding to the password
> entropy.
> 
> Also for UI compatibility across many platforms, I'm also in favor
> disallowing any character below U+0020 (space)
> 
> I can submit a PR once we figure out why Andreas's passphrase was
> different than what I got.
> 
> Aaron Voisine
> breadwallet.com
> 
> 
> On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach
> <andreas at schildbach.de> wrote:
>> Damn, I just realized that I implement only the decoding side of BIP38.
>> So I cannot propose a complete test vector. Here is what I have:
>>
>>
>> Passphrase: ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
>> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER
>> LONG I, PILE OF POO)
>>
>> Passphrase bytes after removing ISO control characters and NFC
>> normalization: 0xcf933034303066346139
>>
>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>>
>> Unencrypted private key (WIF):
>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>>
>>
>> Can someone calculate the encrypted key from it (using whatever
>> implementation) and I will verify it decodes properly in bitcoinj?
>>
>>
>>
>> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:
>>> I will change the bitcoinj implementation and propose a new test vector.
>>>
>>>
>>>
>>> On 07/16/2014 11:29 AM, Mike Hearn wrote:
>>>> Yes sorry, you're right, the issue starts with the null code point.
>>>> Python seems to have problems starting there too. It might work if we
>>>> took that out.
>>>>
>>>>
>>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach
>>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
>>>>
>>>>     Guys, you are always talking about the Unicode astral plane, but in fact
>>>>     its a plain old (ASCII) control character where this problem starts and
>>>>     likely ends: \u0000.
>>>>
>>>>     Let's ban/filter ISO control characters and be done with it. Most
>>>>     control characters will never be enterable by any keyboard into a
>>>>     password field. Of course I assume that Character.isISOControl() works
>>>>     consistently across platforms.
>>>>
>>>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
>>>>
>>>>
>>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:
>>>>     > If the user creates a password on an iOS device with an astral
>>>>     > character and then can't enter that password on a JVM wallet, that
>>>>     > sucks. If JVMs really can't support unicode NFC then that's a strong
>>>>     > case to limit the spec to the subset of unicode that all popular
>>>>     > platforms can support, but it sounds like it might just be a JVM
>>>>     > string library bug that could hopefully be reported and fixed. I get
>>>>     > the same result as in the test case using apple's
>>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
>>>>     >
>>>>     > Aaron Voisine
>>>>     > breadwallet.com <http://breadwallet.com>
>>>>     >
>>>>     >
>>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net
>>>>     <mailto:mike at plan99.net>> wrote:
>>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.
>>>>     >>
>>>>     >> However it appears the output bytes end up being different. What
>>>>     I get back
>>>>     >> is:
>>>>     >>
>>>>     >> cf930001303430300166346139
>>>>     >>
>>>>     >> vs
>>>>     >>
>>>>     >> cf9300f0909080f09f92a9
>>>>     >>
>>>>     >> from the spec.
>>>>     >>
>>>>     >> I'm not sure why. It appears this is due to the character from
>>>>     the astral
>>>>     >> planes. Java is old and uses 16 bit characters internally - it
>>>>     wouldn't
>>>>     >> surprise me if there's some weirdness that means it doesn't/won't
>>>>     support
>>>>     >> this kind of thing.
>>>>     >>
>>>>     >> I recommend instead that any implementation that wishes to be
>>>>     compatible
>>>>     >> with JVM based wallets (I suspect Android is the same) just
>>>>     refuse any
>>>>     >> passphrase that includes characters outside the BMP. At least
>>>>     unless someone
>>>>     >> can find a fix. I somehow doubt this will really hurt anyone.
>>>>     >>
>>>>     >>
>>>>     ------------------------------------------------------------------------------
>>>>     >> Want fast and easy access to all the code in your enterprise?
>>>>     Index and
>>>>     >> search up to 200,000 lines of code with a free copy of Black Duck
>>>>     >> Code Sight - the same software that powers the world's largest code
>>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>     >> http://p.sf.net/sfu/bds
>>>>     >> _______________________________________________
>>>>     >> Bitcoin-development mailing list
>>>>     >> Bitcoin-development at lists.sourceforge.net
>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>     >>
>>>>     >
>>>>     >
>>>>     ------------------------------------------------------------------------------
>>>>     > Want fast and easy access to all the code in your enterprise?
>>>>     Index and
>>>>     > search up to 200,000 lines of code with a free copy of Black Duck
>>>>     > Code Sight - the same software that powers the world's largest code
>>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>     > http://p.sf.net/sfu/bds
>>>>     >
>>>>
>>>>
>>>>
>>>>     ------------------------------------------------------------------------------
>>>>     Want fast and easy access to all the code in your enterprise? Index and
>>>>     search up to 200,000 lines of code with a free copy of Black Duck
>>>>     Code Sight - the same software that powers the world's largest code
>>>>     search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>     http://p.sf.net/sfu/bds
>>>>     _______________________________________________
>>>>     Bitcoin-development mailing list
>>>>     Bitcoin-development at lists.sourceforge.net
>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> Want fast and easy access to all the code in your enterprise? Index and
>>>> search up to 200,000 lines of code with a free copy of Black Duck
>>>> Code Sight - the same software that powers the world's largest code
>>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>> http://p.sf.net/sfu/bds
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Want fast and easy access to all the code in your enterprise? Index and
>>> search up to 200,000 lines of code with a free copy of Black Duck
>>> Code Sight - the same software that powers the world's largest code
>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>> http://p.sf.net/sfu/bds
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From andreas at schildbach.de  Wed Jul 16 22:22:57 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 17 Jul 2014 00:22:57 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <lq6sq5$71h$1@ger.gmane.org>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>	<lq5fvo$4s6$1@ger.gmane.org>	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>	<lq5l5a$4fl$1@ger.gmane.org>	<lq5m78$j23$1@ger.gmane.org>	<CACq0ZD6Nib4kU8kAo6jdXamw7NTTd5_JwO4x1fsVOMP2-F1=cA@mail.gmail.com>
	<lq6sq5$71h$1@ger.gmane.org>
Message-ID: <lq6u01$lfi$1@ger.gmane.org>

Ok, I just fixed the String filtering so that it can handle SMP chars
and my implementation behaves exactly like in your modified testcase
quoted below.

Bitcoinj code available on this branch, in case we decide to change the
spec:

https://github.com/schildbach/bitcoinj/commits/bip38-normalize-control-characters



On 07/17/2014 12:02 AM, Andreas Schildbach wrote:
> Please excuse me. I had a more thorough look at the original problem and
> found that the only problem with the original test case was that you
> cannot specify codepoints from the SMP using \u in Java. I always tried
> \u010400 but that doesn't work.
> 
> Here is a fix for bitcoinj. The test now passes.
> 
> https://github.com/bitcoinj/bitcoinj/pull/143
> 
> We can (and probably should) still need to filter control chars, I'll
> have a look at that now again.
> 
> 
> On 07/16/2014 11:06 PM, Aaron Voisine wrote:
>> If I first remove \u0000, so the non-normalized passphrase is
>> "\u03D2\u0301\U00010400\U0001F4A9", and then NFC normalize it, it
>> becomes "\u03D3\U00010400\U0001F4A9"
>>
>> UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what
>> you got, Andreas!)
>>
>> Encoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>> with this passphrase, I get a BIP38 key of:
>> 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ
>>
>> I recommend rather than simply removing control characters from the
>> password that instead the spec require that passwords containing
>> control characters are invalid. We don't want people trying to be
>> clever and putting them in thinking they are adding to the password
>> entropy.
>>
>> Also for UI compatibility across many platforms, I'm also in favor
>> disallowing any character below U+0020 (space)
>>
>> I can submit a PR once we figure out why Andreas's passphrase was
>> different than what I got.
>>
>> Aaron Voisine
>> breadwallet.com
>>
>>
>> On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach
>> <andreas at schildbach.de> wrote:
>>> Damn, I just realized that I implement only the decoding side of BIP38.
>>> So I cannot propose a complete test vector. Here is what I have:
>>>
>>>
>>> Passphrase: ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
>>> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER
>>> LONG I, PILE OF POO)
>>>
>>> Passphrase bytes after removing ISO control characters and NFC
>>> normalization: 0xcf933034303066346139
>>>
>>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>>>
>>> Unencrypted private key (WIF):
>>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>>>
>>>
>>> Can someone calculate the encrypted key from it (using whatever
>>> implementation) and I will verify it decodes properly in bitcoinj?
>>>
>>>
>>>
>>> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:
>>>> I will change the bitcoinj implementation and propose a new test vector.
>>>>
>>>>
>>>>
>>>> On 07/16/2014 11:29 AM, Mike Hearn wrote:
>>>>> Yes sorry, you're right, the issue starts with the null code point.
>>>>> Python seems to have problems starting there too. It might work if we
>>>>> took that out.
>>>>>
>>>>>
>>>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach
>>>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
>>>>>
>>>>>     Guys, you are always talking about the Unicode astral plane, but in fact
>>>>>     its a plain old (ASCII) control character where this problem starts and
>>>>>     likely ends: \u0000.
>>>>>
>>>>>     Let's ban/filter ISO control characters and be done with it. Most
>>>>>     control characters will never be enterable by any keyboard into a
>>>>>     password field. Of course I assume that Character.isISOControl() works
>>>>>     consistently across platforms.
>>>>>
>>>>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
>>>>>
>>>>>
>>>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:
>>>>>     > If the user creates a password on an iOS device with an astral
>>>>>     > character and then can't enter that password on a JVM wallet, that
>>>>>     > sucks. If JVMs really can't support unicode NFC then that's a strong
>>>>>     > case to limit the spec to the subset of unicode that all popular
>>>>>     > platforms can support, but it sounds like it might just be a JVM
>>>>>     > string library bug that could hopefully be reported and fixed. I get
>>>>>     > the same result as in the test case using apple's
>>>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
>>>>>     >
>>>>>     > Aaron Voisine
>>>>>     > breadwallet.com <http://breadwallet.com>
>>>>>     >
>>>>>     >
>>>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net
>>>>>     <mailto:mike at plan99.net>> wrote:
>>>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.
>>>>>     >>
>>>>>     >> However it appears the output bytes end up being different. What
>>>>>     I get back
>>>>>     >> is:
>>>>>     >>
>>>>>     >> cf930001303430300166346139
>>>>>     >>
>>>>>     >> vs
>>>>>     >>
>>>>>     >> cf9300f0909080f09f92a9
>>>>>     >>
>>>>>     >> from the spec.
>>>>>     >>
>>>>>     >> I'm not sure why. It appears this is due to the character from
>>>>>     the astral
>>>>>     >> planes. Java is old and uses 16 bit characters internally - it
>>>>>     wouldn't
>>>>>     >> surprise me if there's some weirdness that means it doesn't/won't
>>>>>     support
>>>>>     >> this kind of thing.
>>>>>     >>
>>>>>     >> I recommend instead that any implementation that wishes to be
>>>>>     compatible
>>>>>     >> with JVM based wallets (I suspect Android is the same) just
>>>>>     refuse any
>>>>>     >> passphrase that includes characters outside the BMP. At least
>>>>>     unless someone
>>>>>     >> can find a fix. I somehow doubt this will really hurt anyone.
>>>>>     >>
>>>>>     >>
>>>>>     ------------------------------------------------------------------------------
>>>>>     >> Want fast and easy access to all the code in your enterprise?
>>>>>     Index and
>>>>>     >> search up to 200,000 lines of code with a free copy of Black Duck
>>>>>     >> Code Sight - the same software that powers the world's largest code
>>>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>>     >> http://p.sf.net/sfu/bds
>>>>>     >> _______________________________________________
>>>>>     >> Bitcoin-development mailing list
>>>>>     >> Bitcoin-development at lists.sourceforge.net
>>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>>     >>
>>>>>     >
>>>>>     >
>>>>>     ------------------------------------------------------------------------------
>>>>>     > Want fast and easy access to all the code in your enterprise?
>>>>>     Index and
>>>>>     > search up to 200,000 lines of code with a free copy of Black Duck
>>>>>     > Code Sight - the same software that powers the world's largest code
>>>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>>     > http://p.sf.net/sfu/bds
>>>>>     >
>>>>>
>>>>>
>>>>>
>>>>>     ------------------------------------------------------------------------------
>>>>>     Want fast and easy access to all the code in your enterprise? Index and
>>>>>     search up to 200,000 lines of code with a free copy of Black Duck
>>>>>     Code Sight - the same software that powers the world's largest code
>>>>>     search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>>     http://p.sf.net/sfu/bds
>>>>>     _______________________________________________
>>>>>     Bitcoin-development mailing list
>>>>>     Bitcoin-development at lists.sourceforge.net
>>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>>
>>>>>
>>>>>
>>>>>
>>>>> ------------------------------------------------------------------------------
>>>>> Want fast and easy access to all the code in your enterprise? Index and
>>>>> search up to 200,000 lines of code with a free copy of Black Duck
>>>>> Code Sight - the same software that powers the world's largest code
>>>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>> http://p.sf.net/sfu/bds
>>>>>
>>>>>
>>>>>
>>>>> _______________________________________________
>>>>> Bitcoin-development mailing list
>>>>> Bitcoin-development at lists.sourceforge.net
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>>
>>>>
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> Want fast and easy access to all the code in your enterprise? Index and
>>>> search up to 200,000 lines of code with a free copy of Black Duck
>>>> Code Sight - the same software that powers the world's largest code
>>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>> http://p.sf.net/sfu/bds
>>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Want fast and easy access to all the code in your enterprise? Index and
>>> search up to 200,000 lines of code with a free copy of Black Duck
>>> Code Sight - the same software that powers the world's largest code
>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>> http://p.sf.net/sfu/bds
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From jgarzik at bitpay.com  Thu Jul 17 04:52:14 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 17 Jul 2014 00:52:14 -0400
Subject: [Bitcoin-development] Pay to MultiScript hash:
In-Reply-To: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>
References: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>
Message-ID: <CAJHLa0OFEDQp5umz=6_LUx5oJJmiKJoF90W7nvJPv0CtML+ftA@mail.gmail.com>

On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:
> Right now, this could be expressed multiple ways (ie, using an op_dup if
> then else chain) , but all would incur additional costs in terms of
> complicated control flows. Instead, I would propose:

Can you quantify "additional costs in terms of complicated control flows"?


> There is an implication in terms of increased utxo pool bloat, but also an
> implication in terms of increased txn complexity (each 20 byte hash allows
> for a 500 byte script, only one of the 500 byte scripts has to be
> permanently stored on blockchain).

When considering these costs, using a normal P2SH output + a script
with OP_IF and friends seems more straightforward?

Doing boolean logic with multisig groups is quite possible, e.g.
"group AND group", "group OR (group AND group)" etc.  Definitely a
valid use case.  I discussed how to do this on IRC with gmaxwell
several months ago.  I call it "multi-multisig" for lack of a better
name.



From jlrubin at MIT.EDU  Thu Jul 17 05:59:25 2014
From: jlrubin at MIT.EDU (Jeremy)
Date: Thu, 17 Jul 2014 01:59:25 -0400
Subject: [Bitcoin-development] Pay to MultiScript hash:
In-Reply-To: <CAJHLa0OFEDQp5umz=6_LUx5oJJmiKJoF90W7nvJPv0CtML+ftA@mail.gmail.com>
References: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>
	<CAJHLa0OFEDQp5umz=6_LUx5oJJmiKJoF90W7nvJPv0CtML+ftA@mail.gmail.com>
Message-ID: <CAD5xwhhwMyL20nAUXz-Vv6m5ucH7UQcGQLyrFadAvqy4QXkbZw@mail.gmail.com>

Additional costs would be in terms of A) chance of user error/application
error -- proposed method is much simpler, as well as extra bytes for
control flow ( 4 per script if I am counting right).


The costs on a normal script do seem slightly more friendly, except this
method allows for hidden-till-spent permission groups, as well as as
smaller blockchain bloat overall (if scriptSig script has to store the
logic for all the potential permission group, it will be a larger script
versus only needing one permission group's script). An added benefit could
also be in blockchain analysis -- you can actively monitor the utxo pool
for your known associated scripts, whereas you couldn't for specialty
scripts assembled per group. Enables repeated spends with groups as a "cost
object" w/o having to recall all participants. ie, pay to the same perm
groups as the other employee did last time, but include me as a root this
time.


Do you have a transcript of that chat by any chance? An interesting way to
do that would be to push the sigs onto the stack & have implicit orders,
then do expressions with their aliases, and then be able to assign
"spending groups".
ex:
code_sep
push script0
push script1
push script2
push script3
group_sep
mkgroup_2, 0,1      ; the id will be 4
mkgroup_3, 0,2,3   ; the id will be 5
mkUnionGroup_2, 4,5 ; the id will be 6
2_of_3_group 0, 1, 2
mkIntersectionGroup_2 5, 6
complement_last  ; complements last group, mutation
del_group 1          ; deletes the group #1, groups then reindex after
deletion (maybe the group was useful base class).
etc...
multisig check perm groups (checks if any groups on stack are valid from
script)


or even something like adding a little SAT scripting language with an eval.

push script0
push script1
push script2
push script3
push <a=(1 & 2 & 0), b=a-1, a | 3 | b >
eval











On Thu, Jul 17, 2014 at 12:52 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:
> > Right now, this could be expressed multiple ways (ie, using an op_dup if
> > then else chain) , but all would incur additional costs in terms of
> > complicated control flows. Instead, I would propose:
>
> Can you quantify "additional costs in terms of complicated control flows"?
>
>
> > There is an implication in terms of increased utxo pool bloat, but also
> an
> > implication in terms of increased txn complexity (each 20 byte hash
> allows
> > for a 500 byte script, only one of the 500 byte scripts has to be
> > permanently stored on blockchain).
>
> When considering these costs, using a normal P2SH output + a script
> with OP_IF and friends seems more straightforward?
>
> Doing boolean logic with multisig groups is quite possible, e.g.
> "group AND group", "group OR (group AND group)" etc.  Definitely a
> valid use case.  I discussed how to do this on IRC with gmaxwell
> several months ago.  I call it "multi-multisig" for lack of a better
> name.
>



-- 
Jeremy Rubin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/6d590441/attachment.html>

From jgarzik at bitpay.com  Thu Jul 17 06:21:42 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 17 Jul 2014 02:21:42 -0400
Subject: [Bitcoin-development] Pay to MultiScript hash:
In-Reply-To: <CAD5xwhhwMyL20nAUXz-Vv6m5ucH7UQcGQLyrFadAvqy4QXkbZw@mail.gmail.com>
References: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>
	<CAJHLa0OFEDQp5umz=6_LUx5oJJmiKJoF90W7nvJPv0CtML+ftA@mail.gmail.com>
	<CAD5xwhhwMyL20nAUXz-Vv6m5ucH7UQcGQLyrFadAvqy4QXkbZw@mail.gmail.com>
Message-ID: <CAJHLa0OeetO3P6eBHOwN8SUN3ZpN07yWJ0vsGxupZLgcD1MEVQ@mail.gmail.com>

In a system like bitcoin, where the system has to keep running, you
have to consider how to roll out upgrades, and the costs associated
with that.
* the general cost of any network-wide change, versus P2SH which is
already analyzed by devs, rolled out and working
* the cost of P2SH output is predictable, versus less predictable outputs
* the cost of updating everybody to relay this new transaction type,
whereas P2SH Just Works already
* cost of increasing rate of UTXO growth versus P2SH
* "default public", versus P2SH's "default private"

It is true that publishing the script in the txout has the advantage
of being easily audited by third parties scanning the blockchain, but
in the interest of space efficiency you may accomplish the same thing
by offering the script upon request out-of-band.  The script is
hash-sealed by the P2SH address, enabling perfect proof.

Don't have a transcript handy, but these things are usually logged and
google-searchable.

In any case, it would be nice to get together and start building a
"cookbook" of useful scripts like the ones you've been describing.
The power of bitcoin scripts is only beginning to be explored.  Use
cases and examples are very helpful.



On Thu, Jul 17, 2014 at 1:59 AM, Jeremy <jlrubin at mit.edu> wrote:
> Additional costs would be in terms of A) chance of user error/application
> error -- proposed method is much simpler, as well as extra bytes for control
> flow ( 4 per script if I am counting right).
>
>
> The costs on a normal script do seem slightly more friendly, except this
> method allows for hidden-till-spent permission groups, as well as as smaller
> blockchain bloat overall (if scriptSig script has to store the logic for all
> the potential permission group, it will be a larger script  versus only
> needing one permission group's script). An added benefit could also be in
> blockchain analysis -- you can actively monitor the utxo pool for your known
> associated scripts, whereas you couldn't for specialty scripts assembled per
> group. Enables repeated spends with groups as a "cost object" w/o having to
> recall all participants. ie, pay to the same perm groups as the other
> employee did last time, but include me as a root this time.
>
>
> Do you have a transcript of that chat by any chance? An interesting way to
> do that would be to push the sigs onto the stack & have implicit orders,
> then do expressions with their aliases, and then be able to assign "spending
> groups".
> ex:
> code_sep
> push script0
> push script1
> push script2
> push script3
> group_sep
> mkgroup_2, 0,1      ; the id will be 4
> mkgroup_3, 0,2,3   ; the id will be 5
> mkUnionGroup_2, 4,5 ; the id will be 6
> 2_of_3_group 0, 1, 2
> mkIntersectionGroup_2 5, 6
> complement_last  ; complements last group, mutation
> del_group 1          ; deletes the group #1, groups then reindex after
> deletion (maybe the group was useful base class).
> etc...
> multisig check perm groups (checks if any groups on stack are valid from
> script)
>
>
> or even something like adding a little SAT scripting language with an eval.
>
> push script0
> push script1
> push script2
> push script3
> push <a=(1 & 2 & 0), b=a-1, a | 3 | b >
> eval
>
>
>
>
>
>
>
>
>
>
>
> On Thu, Jul 17, 2014 at 12:52 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:
>> > Right now, this could be expressed multiple ways (ie, using an op_dup if
>> > then else chain) , but all would incur additional costs in terms of
>> > complicated control flows. Instead, I would propose:
>>
>> Can you quantify "additional costs in terms of complicated control flows"?
>>
>>
>> > There is an implication in terms of increased utxo pool bloat, but also
>> > an
>> > implication in terms of increased txn complexity (each 20 byte hash
>> > allows
>> > for a 500 byte script, only one of the 500 byte scripts has to be
>> > permanently stored on blockchain).
>>
>> When considering these costs, using a normal P2SH output + a script
>> with OP_IF and friends seems more straightforward?
>>
>> Doing boolean logic with multisig groups is quite possible, e.g.
>> "group AND group", "group OR (group AND group)" etc.  Definitely a
>> valid use case.  I discussed how to do this on IRC with gmaxwell
>> several months ago.  I call it "multi-multisig" for lack of a better
>> name.
>
>
>
>
> --
> Jeremy Rubin



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Thu Jul 17 10:59:26 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 17 Jul 2014 12:59:26 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <lq6sq5$71h$1@ger.gmane.org>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>
	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>
	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>
	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>
	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>
	<lq5fvo$4s6$1@ger.gmane.org>
	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>
	<lq5l5a$4fl$1@ger.gmane.org> <lq5m78$j23$1@ger.gmane.org>
	<CACq0ZD6Nib4kU8kAo6jdXamw7NTTd5_JwO4x1fsVOMP2-F1=cA@mail.gmail.com>
	<lq6sq5$71h$1@ger.gmane.org>
Message-ID: <CANEZrP2=e-JSRjuRgyeGNd2-fvXxEi5t4PAS3BrT-Y7SieywdQ@mail.gmail.com>

Glad we got to the bottom of that. That's quite a nasty compiler/language
bug I must say. Not even a warning. Still, python crashes when trying to
print the name of a null character. It wouldn't surprise me if there are
other weird issues lurking. Would definitely sleep better with a more
restricted character set.
On 17 Jul 2014 00:04, "Andreas Schildbach" <andreas at schildbach.de> wrote:

> Please excuse me. I had a more thorough look at the original problem and
> found that the only problem with the original test case was that you
> cannot specify codepoints from the SMP using \u in Java. I always tried
> \u010400 but that doesn't work.
>
> Here is a fix for bitcoinj. The test now passes.
>
> https://github.com/bitcoinj/bitcoinj/pull/143
>
> We can (and probably should) still need to filter control chars, I'll
> have a look at that now again.
>
>
> On 07/16/2014 11:06 PM, Aaron Voisine wrote:
> > If I first remove \u0000, so the non-normalized passphrase is
> > "\u03D2\u0301\U00010400\U0001F4A9", and then NFC normalize it, it
> > becomes "\u03D3\U00010400\U0001F4A9"
> >
> > UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what
> > you got, Andreas!)
> >
> > Encoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
> > with this passphrase, I get a BIP38 key of:
> > 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ
> >
> > I recommend rather than simply removing control characters from the
> > password that instead the spec require that passwords containing
> > control characters are invalid. We don't want people trying to be
> > clever and putting them in thinking they are adding to the password
> > entropy.
> >
> > Also for UI compatibility across many platforms, I'm also in favor
> > disallowing any character below U+0020 (space)
> >
> > I can submit a PR once we figure out why Andreas's passphrase was
> > different than what I got.
> >
> > Aaron Voisine
> > breadwallet.com
> >
> >
> > On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach
> > <andreas at schildbach.de> wrote:
> >> Damn, I just realized that I implement only the decoding side of BIP38.
> >> So I cannot propose a complete test vector. Here is what I have:
> >>
> >>
> >> Passphrase: ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
> >> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER
> >> LONG I, PILE OF POO)
> >>
> >> Passphrase bytes after removing ISO control characters and NFC
> >> normalization: 0xcf933034303066346139
> >>
> >> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
> >>
> >> Unencrypted private key (WIF):
> >> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
> >>
> >>
> >> Can someone calculate the encrypted key from it (using whatever
> >> implementation) and I will verify it decodes properly in bitcoinj?
> >>
> >>
> >>
> >> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:
> >>> I will change the bitcoinj implementation and propose a new test
> vector.
> >>>
> >>>
> >>>
> >>> On 07/16/2014 11:29 AM, Mike Hearn wrote:
> >>>> Yes sorry, you're right, the issue starts with the null code point.
> >>>> Python seems to have problems starting there too. It might work if we
> >>>> took that out.
> >>>>
> >>>>
> >>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach
> >>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> >>>>
> >>>>     Guys, you are always talking about the Unicode astral plane, but
> in fact
> >>>>     its a plain old (ASCII) control character where this problem
> starts and
> >>>>     likely ends: \u0000.
> >>>>
> >>>>     Let's ban/filter ISO control characters and be done with it. Most
> >>>>     control characters will never be enterable by any keyboard into a
> >>>>     password field. Of course I assume that Character.isISOControl()
> works
> >>>>     consistently across platforms.
> >>>>
> >>>>
> http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
> >>>>
> >>>>
> >>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:
> >>>>     > If the user creates a password on an iOS device with an astral
> >>>>     > character and then can't enter that password on a JVM wallet,
> that
> >>>>     > sucks. If JVMs really can't support unicode NFC then that's a
> strong
> >>>>     > case to limit the spec to the subset of unicode that all popular
> >>>>     > platforms can support, but it sounds like it might just be a JVM
> >>>>     > string library bug that could hopefully be reported and fixed.
> I get
> >>>>     > the same result as in the test case using apple's
> >>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
> >>>>     >
> >>>>     > Aaron Voisine
> >>>>     > breadwallet.com <http://breadwallet.com>
> >>>>     >
> >>>>     >
> >>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net
> >>>>     <mailto:mike at plan99.net>> wrote:
> >>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.
> >>>>     >>
> >>>>     >> However it appears the output bytes end up being different.
> What
> >>>>     I get back
> >>>>     >> is:
> >>>>     >>
> >>>>     >> cf930001303430300166346139
> >>>>     >>
> >>>>     >> vs
> >>>>     >>
> >>>>     >> cf9300f0909080f09f92a9
> >>>>     >>
> >>>>     >> from the spec.
> >>>>     >>
> >>>>     >> I'm not sure why. It appears this is due to the character from
> >>>>     the astral
> >>>>     >> planes. Java is old and uses 16 bit characters internally - it
> >>>>     wouldn't
> >>>>     >> surprise me if there's some weirdness that means it
> doesn't/won't
> >>>>     support
> >>>>     >> this kind of thing.
> >>>>     >>
> >>>>     >> I recommend instead that any implementation that wishes to be
> >>>>     compatible
> >>>>     >> with JVM based wallets (I suspect Android is the same) just
> >>>>     refuse any
> >>>>     >> passphrase that includes characters outside the BMP. At least
> >>>>     unless someone
> >>>>     >> can find a fix. I somehow doubt this will really hurt anyone.
> >>>>     >>
> >>>>     >>
> >>>>
> ------------------------------------------------------------------------------
> >>>>     >> Want fast and easy access to all the code in your enterprise?
> >>>>     Index and
> >>>>     >> search up to 200,000 lines of code with a free copy of Black
> Duck
> >>>>     >> Code Sight - the same software that powers the world's largest
> code
> >>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
> >>>>     >> http://p.sf.net/sfu/bds
> >>>>     >> _______________________________________________
> >>>>     >> Bitcoin-development mailing list
> >>>>     >> Bitcoin-development at lists.sourceforge.net
> >>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
> >>>>     >>
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>     >>
> >>>>     >
> >>>>     >
> >>>>
> ------------------------------------------------------------------------------
> >>>>     > Want fast and easy access to all the code in your enterprise?
> >>>>     Index and
> >>>>     > search up to 200,000 lines of code with a free copy of Black
> Duck
> >>>>     > Code Sight - the same software that powers the world's largest
> code
> >>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.
> >>>>     > http://p.sf.net/sfu/bds
> >>>>     >
> >>>>
> >>>>
> >>>>
> >>>>
> ------------------------------------------------------------------------------
> >>>>     Want fast and easy access to all the code in your enterprise?
> Index and
> >>>>     search up to 200,000 lines of code with a free copy of Black Duck
> >>>>     Code Sight - the same software that powers the world's largest
> code
> >>>>     search on Ohloh, the Black Duck Open Hub! Try it now.
> >>>>     http://p.sf.net/sfu/bds
> >>>>     _______________________________________________
> >>>>     Bitcoin-development mailing list
> >>>>     Bitcoin-development at lists.sourceforge.net
> >>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
> >>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>
> ------------------------------------------------------------------------------
> >>>> Want fast and easy access to all the code in your enterprise? Index
> and
> >>>> search up to 200,000 lines of code with a free copy of Black Duck
> >>>> Code Sight - the same software that powers the world's largest code
> >>>> search on Ohloh, the Black Duck Open Hub! Try it now.
> >>>> http://p.sf.net/sfu/bds
> >>>>
> >>>>
> >>>>
> >>>> _______________________________________________
> >>>> Bitcoin-development mailing list
> >>>> Bitcoin-development at lists.sourceforge.net
> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>
> >>>
> >>>
> >>>
> >>>
> ------------------------------------------------------------------------------
> >>> Want fast and easy access to all the code in your enterprise? Index and
> >>> search up to 200,000 lines of code with a free copy of Black Duck
> >>> Code Sight - the same software that powers the world's largest code
> >>> search on Ohloh, the Black Duck Open Hub! Try it now.
> >>> http://p.sf.net/sfu/bds
> >>>
> >>
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >> Want fast and easy access to all the code in your enterprise? Index and
> >> search up to 200,000 lines of code with a free copy of Black Duck
> >> Code Sight - the same software that powers the world's largest code
> >> search on Ohloh, the Black Duck Open Hub! Try it now.
> >> http://p.sf.net/sfu/bds
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> ------------------------------------------------------------------------------
> > Want fast and easy access to all the code in your enterprise? Index and
> > search up to 200,000 lines of code with a free copy of Black Duck
> > Code Sight - the same software that powers the world's largest code
> > search on Ohloh, the Black Duck Open Hub! Try it now.
> > http://p.sf.net/sfu/bds
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/3c2437eb/attachment.html>

From melvincarvalho at gmail.com  Thu Jul 17 10:59:32 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Thu, 17 Jul 2014 12:59:32 +0200
Subject: [Bitcoin-development] Mining Hashrate Caps
Message-ID: <CAKaEYhJwOPGq44+PfENKSPV8JV2bODqNtNHCqXcnJjE2e28GOQ@mail.gmail.com>

I noticed this article today.

GHash Commits to 40% Hashrate Cap at Bitcoin Mining Summit

http://www.coindesk.com/ghash-commits-40-hashrate-cap-bitcoin-mining-summit/

Here's a quote from Satoshi when the mining arms race began:

"We should have a gentleman?s agreement to postpone the GPU arms race as
long as we can for the good of the network. It?s much easer to get new
users up to speed if they don?t have to worry about GPU drivers and
compatibility. It?s nice how anyone with just a CPU can compete fairly
equally right now."

Maybe outdated now, but I thought it was interesting.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/bee49012/attachment.html>

From andreas at schildbach.de  Thu Jul 17 11:27:57 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 17 Jul 2014 13:27:57 +0200
Subject: [Bitcoin-development] BIP 38 NFC normalisation issue
In-Reply-To: <CANEZrP2=e-JSRjuRgyeGNd2-fvXxEi5t4PAS3BrT-Y7SieywdQ@mail.gmail.com>
References: <CANEZrP3ZzCBohXWZmZxE=ofP74Df4Hd-hCLH6jYn=JKbiqNQXA@mail.gmail.com>	<CAObn+gfbH61kyv_ttT4vsQuNFRWLB5H3xaux7GQ0co82ucO_eA@mail.gmail.com>	<CANg-TZAe2PO9nwQktmDSJFtaLsg6hogOw6mj0SaROdJJr33vog@mail.gmail.com>	<CANEZrP3E2mdvOUHiW9W_hM3Z_kn9um8E6aX5vf-S9tA7KgnpUQ@mail.gmail.com>	<CACq0ZD5qTc-2f+puPaXMDFZNWUx8kvOZQMxqkM_e4YafhTW7cA@mail.gmail.com>	<lq5fvo$4s6$1@ger.gmane.org>	<CANEZrP0x2Ypb063VkcoE+h_OHfRVOusmXB2X1VQx77sZhAuTFw@mail.gmail.com>	<lq5l5a$4fl$1@ger.gmane.org>
	<lq5m78$j23$1@ger.gmane.org>	<CACq0ZD6Nib4kU8kAo6jdXamw7NTTd5_JwO4x1fsVOMP2-F1=cA@mail.gmail.com>	<lq6sq5$71h$1@ger.gmane.org>
	<CANEZrP2=e-JSRjuRgyeGNd2-fvXxEi5t4PAS3BrT-Y7SieywdQ@mail.gmail.com>
Message-ID: <lq8bvt$l2d$1@ger.gmane.org>

Here is a good article that helped me with what's going wrong:

http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html

Basically, Java is stuck at 16 bits per char due to legacy reasons. They
admit that for a new language, they would probably use 32 (or 24?) bits
per char.

\u literals express UTF-16 encoding, so you have to use 16 bits. I
learned that for codepoint 0x010400, I could write "\uD801\uDC00", which
is the UTF-16 encoding of that codepoint.

Other languages have literals for codepoints. E.g. Python can use
u"\U00010400" or HTML has &#x10400;  Unfortunately, Java is missing such
a construct (at least in Java6).


On 07/17/2014 12:59 PM, Mike Hearn wrote:
> Glad we got to the bottom of that. That's quite a nasty
> compiler/language bug I must say. Not even a warning. Still, python
> crashes when trying to print the name of a null character. It wouldn't
> surprise me if there are other weird issues lurking. Would definitely
> sleep better with a more restricted character set.
> 
> On 17 Jul 2014 00:04, "Andreas Schildbach" <andreas at schildbach.de
> <mailto:andreas at schildbach.de>> wrote:
> 
>     Please excuse me. I had a more thorough look at the original problem and
>     found that the only problem with the original test case was that you
>     cannot specify codepoints from the SMP using \u in Java. I always tried
>     \u010400 but that doesn't work.
> 
>     Here is a fix for bitcoinj. The test now passes.
> 
>     https://github.com/bitcoinj/bitcoinj/pull/143
> 
>     We can (and probably should) still need to filter control chars, I'll
>     have a look at that now again.
> 
> 
>     On 07/16/2014 11:06 PM, Aaron Voisine wrote:
>     > If I first remove \u0000, so the non-normalized passphrase is
>     > "\u03D2\u0301\U00010400\U0001F4A9", and then NFC normalize it, it
>     > becomes "\u03D3\U00010400\U0001F4A9"
>     >
>     > UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what
>     > you got, Andreas!)
>     >
>     > Encoding private key:
>     5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>     > with this passphrase, I get a BIP38 key of:
>     > 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ
>     >
>     > I recommend rather than simply removing control characters from the
>     > password that instead the spec require that passwords containing
>     > control characters are invalid. We don't want people trying to be
>     > clever and putting them in thinking they are adding to the password
>     > entropy.
>     >
>     > Also for UI compatibility across many platforms, I'm also in favor
>     > disallowing any character below U+0020 (space)
>     >
>     > I can submit a PR once we figure out why Andreas's passphrase was
>     > different than what I got.
>     >
>     > Aaron Voisine
>     > breadwallet.com <http://breadwallet.com>
>     >
>     >
>     > On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach
>     > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
>     >> Damn, I just realized that I implement only the decoding side of
>     BIP38.
>     >> So I cannot propose a complete test vector. Here is what I have:
>     >>
>     >>
>     >> Passphrase: ????? (\u03D2\u0301\u0000\U00010400\U0001F4A9; GREEK
>     >> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL
>     LETTER
>     >> LONG I, PILE OF POO)
>     >>
>     >> Passphrase bytes after removing ISO control characters and NFC
>     >> normalization: 0xcf933034303066346139
>     >>
>     >> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF
>     >>
>     >> Unencrypted private key (WIF):
>     >> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4
>     >>
>     >>
>     >> Can someone calculate the encrypted key from it (using whatever
>     >> implementation) and I will verify it decodes properly in bitcoinj?
>     >>
>     >>
>     >>
>     >> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:
>     >>> I will change the bitcoinj implementation and propose a new test
>     vector.
>     >>>
>     >>>
>     >>>
>     >>> On 07/16/2014 11:29 AM, Mike Hearn wrote:
>     >>>> Yes sorry, you're right, the issue starts with the null code point.
>     >>>> Python seems to have problems starting there too. It might work
>     if we
>     >>>> took that out.
>     >>>>
>     >>>>
>     >>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach
>     >>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>
>     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:
>     >>>>
>     >>>>     Guys, you are always talking about the Unicode astral
>     plane, but in fact
>     >>>>     its a plain old (ASCII) control character where this
>     problem starts and
>     >>>>     likely ends: \u0000.
>     >>>>
>     >>>>     Let's ban/filter ISO control characters and be done with
>     it. Most
>     >>>>     control characters will never be enterable by any keyboard
>     into a
>     >>>>     password field. Of course I assume that
>     Character.isISOControl() works
>     >>>>     consistently across platforms.
>     >>>>
>     >>>>    
>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29
>     >>>>
>     >>>>
>     >>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:
>     >>>>     > If the user creates a password on an iOS device with an
>     astral
>     >>>>     > character and then can't enter that password on a JVM
>     wallet, that
>     >>>>     > sucks. If JVMs really can't support unicode NFC then
>     that's a strong
>     >>>>     > case to limit the spec to the subset of unicode that all
>     popular
>     >>>>     > platforms can support, but it sounds like it might just
>     be a JVM
>     >>>>     > string library bug that could hopefully be reported and
>     fixed. I get
>     >>>>     > the same result as in the test case using apple's
>     >>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);
>     >>>>     >
>     >>>>     > Aaron Voisine
>     >>>>     > breadwallet.com <http://breadwallet.com>
>     <http://breadwallet.com>
>     >>>>     >
>     >>>>     >
>     >>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn
>     <mike at plan99.net <mailto:mike at plan99.net>
>     >>>>     <mailto:mike at plan99.net <mailto:mike at plan99.net>>> wrote:
>     >>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.
>     >>>>     >>
>     >>>>     >> However it appears the output bytes end up being
>     different. What
>     >>>>     I get back
>     >>>>     >> is:
>     >>>>     >>
>     >>>>     >> cf930001303430300166346139
>     >>>>     >>
>     >>>>     >> vs
>     >>>>     >>
>     >>>>     >> cf9300f0909080f09f92a9
>     >>>>     >>
>     >>>>     >> from the spec.
>     >>>>     >>
>     >>>>     >> I'm not sure why. It appears this is due to the
>     character from
>     >>>>     the astral
>     >>>>     >> planes. Java is old and uses 16 bit characters
>     internally - it
>     >>>>     wouldn't
>     >>>>     >> surprise me if there's some weirdness that means it
>     doesn't/won't
>     >>>>     support
>     >>>>     >> this kind of thing.
>     >>>>     >>
>     >>>>     >> I recommend instead that any implementation that wishes
>     to be
>     >>>>     compatible
>     >>>>     >> with JVM based wallets (I suspect Android is the same) just
>     >>>>     refuse any
>     >>>>     >> passphrase that includes characters outside the BMP. At
>     least
>     >>>>     unless someone
>     >>>>     >> can find a fix. I somehow doubt this will really hurt
>     anyone.
>     >>>>     >>
>     >>>>     >>
>     >>>>    
>     ------------------------------------------------------------------------------
>     >>>>     >> Want fast and easy access to all the code in your
>     enterprise?
>     >>>>     Index and
>     >>>>     >> search up to 200,000 lines of code with a free copy of
>     Black Duck
>     >>>>     >> Code Sight - the same software that powers the world's
>     largest code
>     >>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
>     >>>>     >> http://p.sf.net/sfu/bds
>     >>>>     >> _______________________________________________
>     >>>>     >> Bitcoin-development mailing list
>     >>>>     >> Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     >>>>     <mailto:Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>>
>     >>>>     >>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >>>>     >>
>     >>>>     >
>     >>>>     >
>     >>>>    
>     ------------------------------------------------------------------------------
>     >>>>     > Want fast and easy access to all the code in your enterprise?
>     >>>>     Index and
>     >>>>     > search up to 200,000 lines of code with a free copy of
>     Black Duck
>     >>>>     > Code Sight - the same software that powers the world's
>     largest code
>     >>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.
>     >>>>     > http://p.sf.net/sfu/bds
>     >>>>     >
>     >>>>
>     >>>>
>     >>>>
>     >>>>    
>     ------------------------------------------------------------------------------
>     >>>>     Want fast and easy access to all the code in your
>     enterprise? Index and
>     >>>>     search up to 200,000 lines of code with a free copy of
>     Black Duck
>     >>>>     Code Sight - the same software that powers the world's
>     largest code
>     >>>>     search on Ohloh, the Black Duck Open Hub! Try it now.
>     >>>>     http://p.sf.net/sfu/bds
>     >>>>     _______________________________________________
>     >>>>     Bitcoin-development mailing list
>     >>>>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     >>>>     <mailto:Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>>
>     >>>>    
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >>>>
>     >>>>
>     >>>>
>     >>>>
>     >>>>
>     ------------------------------------------------------------------------------
>     >>>> Want fast and easy access to all the code in your enterprise?
>     Index and
>     >>>> search up to 200,000 lines of code with a free copy of Black Duck
>     >>>> Code Sight - the same software that powers the world's largest code
>     >>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>     >>>> http://p.sf.net/sfu/bds
>     >>>>
>     >>>>
>     >>>>
>     >>>> _______________________________________________
>     >>>> Bitcoin-development mailing list
>     >>>> Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >>>>
>     >>>
>     >>>
>     >>>
>     >>>
>     ------------------------------------------------------------------------------
>     >>> Want fast and easy access to all the code in your enterprise?
>     Index and
>     >>> search up to 200,000 lines of code with a free copy of Black Duck
>     >>> Code Sight - the same software that powers the world's largest code
>     >>> search on Ohloh, the Black Duck Open Hub! Try it now.
>     >>> http://p.sf.net/sfu/bds
>     >>>
>     >>
>     >>
>     >>
>     >>
>     ------------------------------------------------------------------------------
>     >> Want fast and easy access to all the code in your enterprise?
>     Index and
>     >> search up to 200,000 lines of code with a free copy of Black Duck
>     >> Code Sight - the same software that powers the world's largest code
>     >> search on Ohloh, the Black Duck Open Hub! Try it now.
>     >> http://p.sf.net/sfu/bds
>     >> _______________________________________________
>     >> Bitcoin-development mailing list
>     >> Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >
>     >
>     ------------------------------------------------------------------------------
>     > Want fast and easy access to all the code in your enterprise?
>     Index and
>     > search up to 200,000 lines of code with a free copy of Black Duck
>     > Code Sight - the same software that powers the world's largest code
>     > search on Ohloh, the Black Duck Open Hub! Try it now.
>     > http://p.sf.net/sfu/bds
>     > _______________________________________________
>     > Bitcoin-development mailing list
>     > Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >
> 
> 
> 
>     ------------------------------------------------------------------------------
>     Want fast and easy access to all the code in your enterprise? Index and
>     search up to 200,000 lines of code with a free copy of Black Duck
>     Code Sight - the same software that powers the world's largest code
>     search on Ohloh, the Black Duck Open Hub! Try it now.
>     http://p.sf.net/sfu/bds
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mark at monetize.io  Thu Jul 17 13:35:20 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 17 Jul 2014 09:35:20 -0400
Subject: [Bitcoin-development] Mining Hashrate Caps
In-Reply-To: <CAKaEYhJwOPGq44+PfENKSPV8JV2bODqNtNHCqXcnJjE2e28GOQ@mail.gmail.com>
References: <CAKaEYhJwOPGq44+PfENKSPV8JV2bODqNtNHCqXcnJjE2e28GOQ@mail.gmail.com>
Message-ID: <53C7D118.4050908@monetize.io>

Can someone explain to these guys and the public why promising to limit
yourselves to *only* a 50% chance of successfully double-spending a 6
confirm transaction is still not acceptable?

q=0.4
z=0	P=1
z=1	P=0.828861
z=2	P=0.736403
z=3	P=0.664168
z=4	P=0.603401
z=5	P=0.550625
z=6	P=0.50398
z=7	P=0.462301
z=8	P=0.424782
z=9	P=0.390828
z=10	P=0.359976
z=11	P=0.331858
z=12	P=0.306167
z=13	P=0.282649
z=14	P=0.261083
z=15	P=0.24128
z=16	P=0.223076
z=17	P=0.206324
z=18	P=0.190896
z=19	P=0.176676


On 07/17/2014 06:59 AM, Melvin Carvalho wrote:
> I noticed this article today. 
> 
> GHash Commits to 40% Hashrate Cap at Bitcoin Mining Summit
> 
> http://www.coindesk.com/ghash-commits-40-hashrate-cap-bitcoin-mining-summit/
> 
> Here's a quote from Satoshi when the mining arms race began:
> 
> "We should have a gentleman?s agreement to postpone the GPU arms race as
> long as we can for the good of the network. It?s much easer to get new
> users up to speed if they don?t have to worry about GPU drivers and
> compatibility. It?s nice how anyone with just a CPU can compete fairly
> equally right now."
> 
> Maybe outdated now, but I thought it was interesting.
> 
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From jgarzik at bitpay.com  Thu Jul 17 16:14:41 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 17 Jul 2014 12:14:41 -0400
Subject: [Bitcoin-development] Decentralizing ming
Message-ID: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>

Define acceptable.  The 40% thing is marketing and a temporary
solution.  And people come down on both sides of whether or not
marketing "40%" is a good idea.

I think it is a baby step that is moving in the right direction.  You
want the numbers and sentiment moving in that direction (down, versus
"own the market! </IPO>").

The more critical piece is fleshing out the various proposals and
technical solutions for decentralized transaction selection and other
aspects of SPOF-proofing mining.

Historical note:  On one hand, Satoshi seemed to dislike the early
emergence of GPU mining pools quite a bit.  On the other hand, Satoshi
noted that the network would probably devolve down to a few big
players if we ever reached VISA/MC transaction levels.  Satoshi
clearly never figured this part out :)

Today, there is consensus on the need for a "keep bitcoin free and
open" technical solution, but it remains to be seen how much we
engineers can really do to make life fair.  Making transaction
selection a bit more independent from hashpower seems one step.  There
are several other proposals floating about.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From dave at dtrt.org  Thu Jul 17 15:45:06 2014
From: dave at dtrt.org (David A. Harding)
Date: Thu, 17 Jul 2014 11:45:06 -0400
Subject: [Bitcoin-development] Mining Hashrate Caps
In-Reply-To: <53C7D118.4050908@monetize.io>
References: <CAKaEYhJwOPGq44+PfENKSPV8JV2bODqNtNHCqXcnJjE2e28GOQ@mail.gmail.com>
	<53C7D118.4050908@monetize.io>
Message-ID: <20140717154506.GA19666@localhost.localdomain>

On Thu, Jul 17, 2014 at 09:35:20AM -0400, Mark Friedenbach wrote:
> Can someone explain to these guys and the public why promising to limit
> yourselves to *only* a 50% chance of successfully double-spending a 6
> confirm transaction is still not acceptable?

Hi, Mark.

We were asked on the bitcoin-documentation mailing list about a month
ago to work on something like this and we're getting close to a pull
request for the Bitcoin.org website.  There's a preview here:

    http://dg0.dtrt.org/en/mining#lucky-attack

(Remember, it's a preview and still being actively written/edited.)

Discussion about that doc belongs on the bitcoin-documentation mailing
list. Here's the particular thread:

    https://groups.google.com/forum/#!topic/bitcoin-documentation/PKwBcroWGGg

Thanks,

-Dave
-- 
David A. Harding



From slush at centrum.cz  Thu Jul 17 17:22:36 2014
From: slush at centrum.cz (slush)
Date: Thu, 17 Jul 2014 19:22:36 +0200
Subject: [Bitcoin-development] Decentralizing ming
In-Reply-To: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
References: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
Message-ID: <CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>

On Thu, Jul 17, 2014 at 6:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Historical note:  On one hand, Satoshi seemed to dislike the early
> emergence of GPU mining pools quite a bit.
>

To my knowledge, Satoshi left the project before mining pools got a
traction.

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/de5a6fa8/attachment.html>

From jlrubin at MIT.EDU  Thu Jul 17 19:55:10 2014
From: jlrubin at MIT.EDU (Jeremy)
Date: Thu, 17 Jul 2014 15:55:10 -0400
Subject: [Bitcoin-development] Pay to MultiScript hash:
In-Reply-To: <CAJHLa0OeetO3P6eBHOwN8SUN3ZpN07yWJ0vsGxupZLgcD1MEVQ@mail.gmail.com>
References: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>
	<CAJHLa0OFEDQp5umz=6_LUx5oJJmiKJoF90W7nvJPv0CtML+ftA@mail.gmail.com>
	<CAD5xwhhwMyL20nAUXz-Vv6m5ucH7UQcGQLyrFadAvqy4QXkbZw@mail.gmail.com>
	<CAJHLa0OeetO3P6eBHOwN8SUN3ZpN07yWJ0vsGxupZLgcD1MEVQ@mail.gmail.com>
Message-ID: <CAD5xwhhUZXcJsQbxqidguYMsuTw6CvXMQyYjaZXUmytVARNk1A@mail.gmail.com>

* the general cost of any network-wide change, versus P2SH which is
already analyzed by devs, rolled out and working
* the cost of updating everybody to relay this new transaction type,
whereas P2SH Just Works already
fair -- I think that there may be a big benefit realizable with this kind
of system.

* cost of increasing rate of UTXO growth versus P2SH
This operation is similar in cost to multisig? Although I suppose there is
the proposal to make all multisigs p2sh

* the cost of P2SH output is predictable, versus less predictable outputs
 * "default public", versus P2SH's "default private"
-- Can you elaborate on these?

I think part of the problem is that there is low incentive for
development/cataloging  of these useful types of script because there isn't
a horizon on getting them broadcastable by nodes other than testnet? Even
with pay to script hash it is still currently relegated to a subset of
script types iirc (I think I'm wrong on this one maybe (hopefully) -- if
so, let's get writing!)?



Hmm... another idea... what about doing a p2sh with a switch statement, ie:

OP_HASH160 <script set hash> OP_EQUAL

payable by:

{signatures...} <scriptX> <<script1 hash>, <script2 hash>...<scriptN hash>
in sorted order> OP_DUP

And then executed like a normal p2sh transaction except before the
<scriptX> is run, the set of hashes is checked for set membership (can't
find a concise way to express this, but it should be doable within the
current framework of p2sh processing).

Which lets you select one of n scripts each 520 bytes long without bloating
the utxo pool more than a p2sh, the cost being purely on disk.

In theory, this could represent a space savings on disk longterm for
regular p2sh. ie, if I have two 2 of 3 groups I want to be able to spend,
this system would represent an overall space savings.


Adding some kind of "function-hash-pointer jump table / switch statement"
could be pretty cool in terms of space savings as well as allowing for more
complicated scripts to be built.



On Thu, Jul 17, 2014 at 2:21 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> In a system like bitcoin, where the system has to keep running, you
> have to consider how to roll out upgrades, and the costs associated
> with that.
> * the general cost of any network-wide change, versus P2SH which is
> already analyzed by devs, rolled out and working
> * the cost of P2SH output is predictable, versus less predictable outputs
> * the cost of updating everybody to relay this new transaction type,
> whereas P2SH Just Works already
> * cost of increasing rate of UTXO growth versus P2SH
> * "default public", versus P2SH's "default private"
>
> It is true that publishing the script in the txout has the advantage
> of being easily audited by third parties scanning the blockchain, but
> in the interest of space efficiency you may accomplish the same thing
> by offering the script upon request out-of-band.  The script is
> hash-sealed by the P2SH address, enabling perfect proof.
>
> Don't have a transcript handy, but these things are usually logged and
> google-searchable.
>
> In any case, it would be nice to get together and start building a
> "cookbook" of useful scripts like the ones you've been describing.
> The power of bitcoin scripts is only beginning to be explored.  Use
> cases and examples are very helpful.
>
>
>
> On Thu, Jul 17, 2014 at 1:59 AM, Jeremy <jlrubin at mit.edu> wrote:
> > Additional costs would be in terms of A) chance of user error/application
> > error -- proposed method is much simpler, as well as extra bytes for
> control
> > flow ( 4 per script if I am counting right).
> >
> >
> > The costs on a normal script do seem slightly more friendly, except this
> > method allows for hidden-till-spent permission groups, as well as as
> smaller
> > blockchain bloat overall (if scriptSig script has to store the logic for
> all
> > the potential permission group, it will be a larger script  versus only
> > needing one permission group's script). An added benefit could also be in
> > blockchain analysis -- you can actively monitor the utxo pool for your
> known
> > associated scripts, whereas you couldn't for specialty scripts assembled
> per
> > group. Enables repeated spends with groups as a "cost object" w/o having
> to
> > recall all participants. ie, pay to the same perm groups as the other
> > employee did last time, but include me as a root this time.
> >
> >
> > Do you have a transcript of that chat by any chance? An interesting way
> to
> > do that would be to push the sigs onto the stack & have implicit orders,
> > then do expressions with their aliases, and then be able to assign
> "spending
> > groups".
> > ex:
> > code_sep
> > push script0
> > push script1
> > push script2
> > push script3
> > group_sep
> > mkgroup_2, 0,1      ; the id will be 4
> > mkgroup_3, 0,2,3   ; the id will be 5
> > mkUnionGroup_2, 4,5 ; the id will be 6
> > 2_of_3_group 0, 1, 2
> > mkIntersectionGroup_2 5, 6
> > complement_last  ; complements last group, mutation
> > del_group 1          ; deletes the group #1, groups then reindex after
> > deletion (maybe the group was useful base class).
> > etc...
> > multisig check perm groups (checks if any groups on stack are valid from
> > script)
> >
> >
> > or even something like adding a little SAT scripting language with an
> eval.
> >
> > push script0
> > push script1
> > push script2
> > push script3
> > push <a=(1 & 2 & 0), b=a-1, a | 3 | b >
> > eval
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> >
> > On Thu, Jul 17, 2014 at 12:52 AM, Jeff Garzik <jgarzik at bitpay.com>
> wrote:
> >>
> >> On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:
> >> > Right now, this could be expressed multiple ways (ie, using an op_dup
> if
> >> > then else chain) , but all would incur additional costs in terms of
> >> > complicated control flows. Instead, I would propose:
> >>
> >> Can you quantify "additional costs in terms of complicated control
> flows"?
> >>
> >>
> >> > There is an implication in terms of increased utxo pool bloat, but
> also
> >> > an
> >> > implication in terms of increased txn complexity (each 20 byte hash
> >> > allows
> >> > for a 500 byte script, only one of the 500 byte scripts has to be
> >> > permanently stored on blockchain).
> >>
> >> When considering these costs, using a normal P2SH output + a script
> >> with OP_IF and friends seems more straightforward?
> >>
> >> Doing boolean logic with multisig groups is quite possible, e.g.
> >> "group AND group", "group OR (group AND group)" etc.  Definitely a
> >> valid use case.  I discussed how to do this on IRC with gmaxwell
> >> several months ago.  I call it "multi-multisig" for lack of a better
> >> name.
> >
> >
> >
> >
> > --
> > Jeremy Rubin
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>



-- 
Jeremy Rubin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/60948e15/attachment.html>

From gmaxwell at gmail.com  Thu Jul 17 20:08:24 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 17 Jul 2014 13:08:24 -0700
Subject: [Bitcoin-development] Pay to MultiScript hash:
In-Reply-To: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>
References: <CAD5xwhgyCOdJwnXw+YchptfXjtshDi_VVEGOjR-hG2qV=u6m2g@mail.gmail.com>
Message-ID: <CAAS2fgQfuudYyOO7QPpLTMQBpsQqEDMnWRHDnm4xXx+wB6yKsw@mail.gmail.com>

On Wed, Jul 16, 2014 at 10:56 AM, Jeremy <jlrubin at mit.edu> wrote:
> Hey all,
> I had an idea for a new transaction type. The base idea is that it is
> matching on script hashes much like pay to script hash, but checks for one
> of N scripts.

This seems strictly less flexible and efficient than the Merkelized
Abstract Syntax Tree construction, though perhaps slightly easier to
implement it wouldn't be any easier to deploy.

Something like this was very recently proposed on this list (by Tier
Nolan), you might want to see the "Selector Script" thread.



From keziahw at gmail.com  Thu Jul 17 21:35:35 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 17 Jul 2014 14:35:35 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on the
	wire
Message-ID: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>

OVERVIEW

To improve block propagation, add a new block message that doesn't include
transactions the peer is known to have. The message must never require an
additional round trip due to any transactions the peer doesn't have, but
should
be compatible with peers sometimes forgetting transactions they have known.

APPROACH

For peers advertising support for squashed blocks: a node tracks what txes
it
knows each peer has seen (inv received, tx sent, tx appeared in competing
block
known to peer). Nodes push block contents as txes-not-already-known +
txids-known.

A node should be able to forget invs it has seen without invalidating what
peers
know about its known txes. To allow for this, a node assembles a bloom
filter of
a set of txes it is going to forget, and sends it to peers. The node can
erase
the txes as soon as no blocks requested before the filter was pushed are in
flight (relying on the assumption that messages can be expected to be
processed
in order).

When a node receives a forgotten-filter, it ORs it into its
forgotten-filter for
that peer. Any transactions matching the forgotten-filter are always
included in
full with a block. If the filter is getting full, the node can just clear it
along with peer.setTxKnown.

COSTS

Bloom filtering:
Since the bloom filter is likely to grow slowly and can be dropped when it
is
becoming full, a cheap set of hash functions and element size can be used to
keep overhead more restricted than the bloom filtering done for spv. It's
important for testing txes against the filter to be fast so that it doesn't
delay pushing the block more than the squashing helps.
Nodes currently forget txes rarely, so the bloom filters would only need to
be
used at all under conditions that are not currently common -- but I think
they're important to include to allow for different node behavior in this
regard
in the future.

Tracking txes known to peers:
A multimap of txid->peerId would obviate the current setCurrentlyKnown, and
would not take much more space since each additional peer adds about 1
peerId
per txid (setCurrentlyKnown keeps a uint256 per peer per txid, although it
tracks somewhat fewer txid per node).

Potential vulnerabilities:
- Since the bloom filters will have lower maximum overhead than the current
SPV
  filters and can be dropped at will, this shouldn't enable any resource
  exhaustion attacks that aren't already possible.
- A squashed block with bogus or missing data would be easily detected not
to
  produce the correct merkle root for its BlockHeader.

BENEFITS

Assuming a fairly typical 500 tx block with transaction sizes averaging 300b
(both on the low side), for a 150kb block:

% pruned | block size reduction | relative size reduction
-------- | -------------------- | -----------------------
100      | 134 kB               | 89%
50       | 67 kB                | 45%
25       | 33.5 kB              | 17%

I've been doing some logging, and when my node pushes a block to a peer it
seems
to typically know that a peer has seen most of the txes in the block. Even
in
the case of a small block with only 25% known-known transactions, total
network
bandwidth saved is greater than the bloom filters transmitted unless a node
is
forgetting transactions so rapidly that it pushes new maximum-size
forget-filters every block.

So this is a net gain even in total bandwidth usage, but most importantly
it's
an improvement in block propagation rate and in how block propagation rate
scales with additional transactions.

IMPLEMENTATION QUESTIONS

How should block squashing capability be advertised -- new service bit?

Bloom filters:
- How fast to test against could a suitable bloom filter be made?
- How much memory would each filter need to take, at maximum?
- Can the inputs all being 32 byte hashes be used to optimize filter hash
  calculations?

ROADMAP

If there's support for this proposal, I can begin working on the specific
implementation details, such as the bloom filters, message format, and
capability advertisment, and draft a BIP once I have a concrete proposal for
what those would look like and a corresponding precise cost/benefit
analysis.

--kaz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/810d2f69/attachment.html>

From gavinandresen at gmail.com  Thu Jul 17 22:46:52 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 17 Jul 2014 18:46:52 -0400
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
Message-ID: <CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>

A couple of half-baked thoughts:

On Thu, Jul 17, 2014 at 5:35 PM, Kaz Wesley <keziahw at gmail.com> wrote:

> If there's support for this proposal, I can begin working on the specific
> implementation details, such as the bloom filters, message format, and
> capability advertisment, and draft a BIP once I have a concrete proposal
> for
> what those would look like and a corresponding precise cost/benefit
> analysis.
>

I'd encourage you to code up a prototype first (or at the same time), in
whatever programming language / networking library you're most familiar
with.

Maybe not even using the existing p2p protocol; there could be a
mining-only very-fast-block-propagation network separate from the existing
p2p network.

Combining your optimizations with "broadcast as many near-miss blocks as
bandwidth will allow" on a mining backbone network should allow insanely
fast propagation of most newly solved blocks.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/16478b5f/attachment.html>

From keziahw at gmail.com  Thu Jul 17 23:26:31 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 17 Jul 2014 16:26:31 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
Message-ID: <CA+iPb=E01qV8WMBs6o+UCVQ3iYL4nQdzBaG-ehcuhX47QPRPtA@mail.gmail.com>

I'm moving this design document to a gist so that I can integrate
changes as they come up:
https://gist.github.com/kazcw/43c97d3924326beca87d
One thing that I think is an important improvement over my initial
idea is that the bloom filters don't need to be kept around and built
up, they can just be one-shot and clear any matching entries from the
set of known-knowns upon arrival -- provided a node is careful to
ensure the txes it wants to forget are known-known-known (which isn't
as bad as it sounds) to the peer it's telling it's forgetting them
when the forget-filter arrives.

On Thu, Jul 17, 2014 at 3:46 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
>
> A couple of half-baked thoughts:
>
> On Thu, Jul 17, 2014 at 5:35 PM, Kaz Wesley <keziahw at gmail.com> wrote:
>>
>> If there's support for this proposal, I can begin working on the specific
>> implementation details, such as the bloom filters, message format, and
>> capability advertisment, and draft a BIP once I have a concrete proposal for
>> what those would look like and a corresponding precise cost/benefit analysis.
>
>
> I'd encourage you to code up a prototype first (or at the same time), in whatever programming language / networking library you're most familiar with.
>
> Maybe not even using the existing p2p protocol; there could be a mining-only very-fast-block-propagation network separate from the existing p2p network.
>
> Combining your optimizations with "broadcast as many near-miss blocks as bandwidth will allow" on a mining backbone network should allow insanely fast propagation of most newly solved blocks.
>
> --
> --
> Gavin Andresen

Thanks Gavin, I am planning on working out the design details as I
work on a prototype. I have the beginnings of a previous shot at
implementing this in bitcoind to start from but my new design has some
important improvements to add to that.

-kaz



From gmaxwell at gmail.com  Thu Jul 17 23:34:21 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 17 Jul 2014 16:34:21 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
Message-ID: <CAAS2fgSz0xS_OJKx-Xvw9GWkeJXEOL5aFQ+2mC=y5RwKNRykRQ@mail.gmail.com>

On Thu, Jul 17, 2014 at 2:35 PM, Kaz Wesley <keziahw at gmail.com> wrote:
> A node should be able to forget invs it has seen without invalidating what
> peers
> know about its known txes. To allow for this, a node assembles a bloom
> filter of

Another option would be to just guarantee to keep at least the last N
sent in each direction to bound memory usage. N could be negotiated.

Going more complex than that may not have wins enough to justify it...
would be good to measure it.


(If you're not aware of it, check out?
https://en.bitcoin.it/wiki/User:Gmaxwell/block_network_coding for a
more complex idea)



From mike at plan99.net  Fri Jul 18 10:41:08 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 18 Jul 2014 12:41:08 +0200
Subject: [Bitcoin-development] Decentralizing ming
In-Reply-To: <CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
References: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
	<CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
Message-ID: <CANEZrP0HxfJYaTxYdxh3ANLOMma_J9A93A0LjB47PHdiaNo5NA@mail.gmail.com>

Jeff, I think the message you're replying to got clipped.

Satoshi's only comment AFAIK on the topic of GPU mining was to wish for a
gentlemen's agreement to postpone it as long as possible, to help make sure
the distribution of coins was as even as possible. Indeed this predated
pooled mining.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/9a7418c1/attachment.html>

From mike at plan99.net  Fri Jul 18 10:43:19 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 18 Jul 2014 12:43:19 +0200
Subject: [Bitcoin-development] Decentralizing ming
In-Reply-To: <CANEZrP0HxfJYaTxYdxh3ANLOMma_J9A93A0LjB47PHdiaNo5NA@mail.gmail.com>
References: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
	<CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
	<CANEZrP0HxfJYaTxYdxh3ANLOMma_J9A93A0LjB47PHdiaNo5NA@mail.gmail.com>
Message-ID: <CANEZrP2+tufB0jbgqdCc9t_XLbs9pnX9t8jUGfLA_xLDhEts8Q@mail.gmail.com>

Oops, sorry, I see the subject line changed. This is what I get for working
down the thread list top to bottom :)

I think the best path forward now is to finish off getblocktemplate support
in the various tools so it's possible to pool for payout purposes without
giving up control of block creation modulo the coinbase. Combined with the
recent sipa performance enhancing goodness, it would hopefully persuade
some non-trivial chunk of hashpower to go back to running their own node
and start the process of turning pools merely into payout trackers rather
than block selectors.


On Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:

> Jeff, I think the message you're replying to got clipped.
>
> Satoshi's only comment AFAIK on the topic of GPU mining was to wish for a
> gentlemen's agreement to postpone it as long as possible, to help make sure
> the distribution of coins was as even as possible. Indeed this predated
> pooled mining.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/06bb76fd/attachment.html>

From jgarzik at bitpay.com  Fri Jul 18 13:39:15 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 18 Jul 2014 09:39:15 -0400
Subject: [Bitcoin-development] Decentralizing ming
In-Reply-To: <CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
References: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
	<CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
Message-ID: <CAJHLa0NVZOKCPMqRaGZyVnp0=0H0=AacRzKd_kaX1rVKH_pVFQ@mail.gmail.com>

Before they got traction, yes.  But he projected a bit, as anyone
could, to see the trend.

On Thu, Jul 17, 2014 at 1:22 PM, slush <slush at centrum.cz> wrote:
>
> On Thu, Jul 17, 2014 at 6:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> Historical note:  On one hand, Satoshi seemed to dislike the early
>> emergence of GPU mining pools quite a bit.
>
>
> To my knowledge, Satoshi left the project before mining pools got a
> traction.
>
> slush



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Fri Jul 18 13:44:07 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 18 Jul 2014 09:44:07 -0400
Subject: [Bitcoin-development] Decentralizing ming
In-Reply-To: <CANEZrP2+tufB0jbgqdCc9t_XLbs9pnX9t8jUGfLA_xLDhEts8Q@mail.gmail.com>
References: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
	<CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
	<CANEZrP0HxfJYaTxYdxh3ANLOMma_J9A93A0LjB47PHdiaNo5NA@mail.gmail.com>
	<CANEZrP2+tufB0jbgqdCc9t_XLbs9pnX9t8jUGfLA_xLDhEts8Q@mail.gmail.com>
Message-ID: <CAJHLa0PZsTjB7O_JuPsMUzfrWAB9yW+x0bEKWo3JyGebKr42ZA@mail.gmail.com>

Yes.  That, and several other things.  If you can figure out how to
propagate a block without re-propagating all the transactions everyone
already has, you address the large-blocks-slower-to-relay problem, and
additionally create an incentive for miners to mine blocks consisting
of publicly broadcast transactions (versus a bunch of secret ones
mined with secret agreements).

Democratizing transaction selection takes a bit of power away from the
miners and gives it back to the network at large.  GBT is another
piece of that puzzle.


On Fri, Jul 18, 2014 at 6:43 AM, Mike Hearn <mike at plan99.net> wrote:
> Oops, sorry, I see the subject line changed. This is what I get for working
> down the thread list top to bottom :)
>
> I think the best path forward now is to finish off getblocktemplate support
> in the various tools so it's possible to pool for payout purposes without
> giving up control of block creation modulo the coinbase. Combined with the
> recent sipa performance enhancing goodness, it would hopefully persuade some
> non-trivial chunk of hashpower to go back to running their own node and
> start the process of turning pools merely into payout trackers rather than
> block selectors.
>
>
> On Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:
>>
>> Jeff, I think the message you're replying to got clipped.
>>
>> Satoshi's only comment AFAIK on the topic of GPU mining was to wish for a
>> gentlemen's agreement to postpone it as long as possible, to help make sure
>> the distribution of coins was as even as possible. Indeed this predated
>> pooled mining.
>>
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Fri Jul 18 13:53:35 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 18 Jul 2014 09:53:35 -0400
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
Message-ID: <CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>

On Thu, Jul 17, 2014 at 6:46 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I'd encourage you to code up a prototype first (or at the same time), in
> whatever programming language / networking library you're most familiar
> with.

+1

> Maybe not even using the existing p2p protocol; there could be a mining-only
> very-fast-block-propagation network separate from the existing p2p network.
>
> Combining your optimizations with "broadcast as many near-miss blocks as
> bandwidth will allow" on a mining backbone network should allow insanely
> fast propagation of most newly solved blocks.


Yes, I would encourage thinking along these lines.  That was the
motivation of the UDP P2P protocol extension I wrote:
https://bitcointalk.org/index.php?topic=156769.0

The intention was to experiment with sending block header + tx list +
coinbase, via UDP best effort broadcast.

Incentives:

If your neighbors receiving this message already have the TXs in the
TX list, then the block is complete, and may be relayed further.

If your neighbors do not have all TXs in the block, they must fetch
them at additional time/latency cost.

Thus, you have an incentive to relay blocks containing TXs already
distributed out into network mempools and cached in the signature
cache.

We want to capture that incentive in whatever protocol is eventually
used.  Miners have a TX fee incentive to include many transactions.
In theory, they want to include as many TX as possible.  It will help
us scale quite a bit to solve this problem.



From gavinandresen at gmail.com  Fri Jul 18 14:53:01 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 18 Jul 2014 10:53:01 -0400
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
Message-ID: <CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>

Two more half-baked thoughts:

We should be able to assume that the majority of transaction data (except
for coinbase) has already been propagated. As Jeff said, incentivizing
nodes to propagate transactions is a very good thing (the signature cache
already gives a small incentive to miners to propagate and not 'hoard'
transactions).

So the only information that theoretically needs to be propagated is which
transactions a miner is including in their block, and in what order they
are included.

But if there was some agreed-upon canonical ordering, then it should
theoretically be possible to take shortcuts in the "what order".

You'd start with setof(transactions I think everybody knows about)
Select some subset, based on miner's policy
Sort that subset with the canonical ordering algorithm
Very efficiently broadcast, taking all sorts of shortcuts assuming most of
your peers already know the set you started with and expect the same
canonical ordering (see gmaxwell's thoughts on block encoding).

Second half-baked thought:
I wonder if broadcasting your transaction selection policy ("11KB of free
transactions, sorted by priority, then 111K of fee-paying transactions,
sorted by fee") might make it possible to save even more bandwidth by
letting your peers create a very good approximation of your block with just
that information....

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/f2b10a38/attachment.html>

From jgarzik at bitpay.com  Fri Jul 18 15:06:23 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 18 Jul 2014 11:06:23 -0400
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
Message-ID: <CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>

On Fri, Jul 18, 2014 at 10:53 AM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> But if there was some agreed-upon canonical ordering, then it should
> theoretically be possible to take shortcuts in the "what order".
>
> You'd start with setof(transactions I think everybody knows about)
> Select some subset, based on miner's policy
> Sort that subset with the canonical ordering algorithm
> Very efficiently broadcast, taking all sorts of shortcuts assuming most of
> your peers already know the set you started with and expect the same
> canonical ordering (see gmaxwell's thoughts on block encoding).

Related implementation detail:  Having pursued this train of thought,
I noted that you don't want to include too-young transactions that you
received in the past few seconds, because those are likely still
propagating around the network.

> Second half-baked thought:
> I wonder if broadcasting your transaction selection policy ("11KB of free
> transactions, sorted by priority, then 111K of fee-paying transactions,
> sorted by fee") might make it possible to save even more bandwidth by
> letting your peers create a very good approximation of your block with just
> that information....

Absolutely.  One path I would like to see pursued is multiple
p2pool-esque chains.  Each with their own policy, perhaps with their
own administrative team.  ie. you could have a fully decentralized
p2pool-like chain, or multiple such chains, each with a stated
policy/reward pattern.  Or, GHash/BTCGuild/Eligius could run a
semi-centrally managed chain ultimately guaranteed not only by
protocol but by administrators' digital signatures.

In each case, advertising technical attributes about your pool [chain]
policy would give nodes the better ability to predict what is in an
upcoming block.

And the flip side of that, such predictions are never perfect.  Need
to make sure the fallback case, while undoubtedly more costly than the
Fast Path, is not overly painful.


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pieter.wuille at gmail.com  Fri Jul 18 15:14:53 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 18 Jul 2014 17:14:53 +0200
Subject: [Bitcoin-development] Small update to BIP 62
Message-ID: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>

Hi all,

I've sent a pull request to make a small change to BIP 62 (my
anti-malleability proposal) which is still a draft; see:
* https://github.com/bitcoin/bips/pull/90 (the request)
* https://github.com/sipa/bips/blob/bip62up/bip-0062.mediawiki (the result)

It makes two of the 7 new rules mandatory in new blocks, even for
old-style transactions. Both are already non-standard since 0.8.0, and
have no use cases in my opinion.

The reason for this change is dropping the requirement for signature
verification engines to be bug-for-bug compatible with OpenSSL (which
supports many non-standard encodings for signatures). Requiring strict
DER compliance for signatures means any implementation just needs to
support DER.

Comments?

-- 
Pieter



From mike at plan99.net  Fri Jul 18 15:39:56 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 18 Jul 2014 17:39:56 +0200
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
Message-ID: <CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>

The rationale doesn't seem to apply to rule #4, what's so special about
that one?

Although I agree not having to support all of DER is nice, in practice I
think all implementations do and libraries to parse DER are widespread.
Given that the last time we modified tx rules without bumping version
numbers we managed to break the only functioning iPhone client, I've become
a big fan of backwards compatibility: seems the default choice should be to
preserve compatibility over technical niceness until the old versions have
been fully phased out.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/bf4b4f23/attachment.html>

From pieter.wuille at gmail.com  Fri Jul 18 15:45:05 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 18 Jul 2014 17:45:05 +0200
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
Message-ID: <CAPg+sBh1sy1UynfXk284KHbBb6rEowTb7fentBBA+CkYWLdaGg@mail.gmail.com>

On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:
> The rationale doesn't seem to apply to rule #4, what's so special about that
> one?

Nothing really. If it's controversial in any way, I'm fine with
changing that. It's just one those things that nobody needs, nobody
uses, has never been standard, and shouldn't have been possible in the
first place IMHO. Given that, it's easier to just make it a consensus
rule.

> Although I agree not having to support all of DER is nice, in practice I
> think all implementations do and libraries to parse DER are widespread.
> Given that the last time we modified tx rules without bumping version
> numbers we managed to break the only functioning iPhone client, I've become
> a big fan of backwards compatibility: seems the default choice should be to
> preserve compatibility over technical niceness until the old versions have
> been fully phased out.

I'm not comfortable with dropping OpenSSL-based signature parsing
until we have well-defined rules about which encodings are valid. At
this point I'm not even convinced we *know* about all possible ways to
modify signature encodings without invalidating them.

But perhaps we should investigate how many non-DER signatures still
make it into blocks first...

-- 
Pieter



From pieter.wuille at gmail.com  Fri Jul 18 17:25:50 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 18 Jul 2014 19:25:50 +0200
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CAPg+sBh1sy1UynfXk284KHbBb6rEowTb7fentBBA+CkYWLdaGg@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CAPg+sBh1sy1UynfXk284KHbBb6rEowTb7fentBBA+CkYWLdaGg@mail.gmail.com>
Message-ID: <CAPg+sBgPAVt6oPSydRqBXmSdquqp1ZQsK4BzzM3BAc8tYM3abQ@mail.gmail.com>

On Fri, Jul 18, 2014 at 5:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> But perhaps we should investigate how many non-DER signatures still
> make it into blocks first...

In the last 11 blocks (4148 transactions), apparently none.

-- 
Pieter



From keziahw at gmail.com  Fri Jul 18 17:39:38 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Fri, 18 Jul 2014 10:39:38 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
Message-ID: <CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>

Peers exchanging mempool priority policies is great; that accomplishes
the flexibility in what txes to remember that I was going for with the
forget-filters, but much more neatly, with less overhead and some side
benefits.

Here's what I'm picturing now:
- exchange priority policies in peer introductions
- assign unique sequential IDs in the order the transactions were
inved (per peer)
- receiving a getdata for a tx updates last-known-peer-received inv to
all invs up to the one referenced
- include ID-last-received, last-known-peer-received in sparse block
- reference txes in sparse block by index in receiver's
prioritiziation with peer's sent invs up to ID-last-received and
sender's prior invs up to last-known-peer-received

Possible new messages:
- sparseblock
- invack message a node can send at times when it's received a bunch
of invs it already has, so it hasn't acked with a getdata in a while
- gettx: getdata, but using new sequential ID to save 28 bytes per tx

It seems important for ordering policies to be able to be specified in
as much detail as possible. Parameters that should be available:
- total inputs
- total outputs
- bytes
- coin days destroyed
- net UTXO size change
- sigops
- is data carrier
- is output raw multisig
- age in mempool
- what else?
This parameter set should be extensible to allow for unforeseen future factors.

Ordering policies should allow arbitrary algebraic combinations of
their parameters, as well as thresholds. Boolean combinations of
sub-policies would also be desirable. This could be implemented with a
tx-script-like stack-based language, in which each supported tx
property is pushed onto the stack by a particular opcode, and
+-*//min/max/boolean operators combine them to yield the sort key.

Difficult parameters:
* Coin-days-destroyed: changes, peers need agreement on when (if?)
it's recalculated. Probably can just not recalculate, but peers still
need agreement on "time seen" to get CDD.
* Age in mempool: seems intractable in terms of time, but could be
done easily in terms of "how many txes old is this sequential ID"

One potential pitfall: this allows for an environment of completely
heterogeneous mempool policies. I think that's a good thing, but we
need to avoid a situation where only least-common-denominator
transactions make it farther than a hop or two, and we don't want
nodes to have a strong preference for connecting to like-minded peers
since clustering reduces overall connectivity. It may be worthwhile to
add a parallel mechanism for relay policies, to differentiate between
what a node would keep in its mempool vs. what it wouldn't even relay
and doesn't want to see at all. Relay policies could be specified just
like prioritization policies, but with the final stack value evaluated
in a boolean context.

An interesting additional use of policy-scripts would be a
standardized way for miners to include a policy script in a coinbase,
allowing miners a mechanism to advertise things like their relative
price of sigops vs bytes. Nodes may then choose to take this
information into account in order to optimize their mempool policies
for likelihood of consistency with future blocks. Since policy scripts
provide only relative information on prices of different transaction
properties rather than an absolute fee, this should not allow miners
to "vote fees up", although care would need to be taken they wouldn't
be able to drive up prices by claiming common transaction types are at
the high end of the fee scale.



From jgarzik at bitpay.com  Fri Jul 18 17:48:47 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 18 Jul 2014 13:48:47 -0400
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
Message-ID: <CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>

On a flood-fill network, you don't want to create a storm of "I
already have this" replies.

On Fri, Jul 18, 2014 at 1:39 PM, Kaz Wesley <keziahw at gmail.com> wrote:
> Peers exchanging mempool priority policies is great; that accomplishes
> the flexibility in what txes to remember that I was going for with the
> forget-filters, but much more neatly, with less overhead and some side
> benefits.
>
> Here's what I'm picturing now:
> - exchange priority policies in peer introductions
> - assign unique sequential IDs in the order the transactions were
> inved (per peer)
> - receiving a getdata for a tx updates last-known-peer-received inv to
> all invs up to the one referenced
> - include ID-last-received, last-known-peer-received in sparse block
> - reference txes in sparse block by index in receiver's
> prioritiziation with peer's sent invs up to ID-last-received and
> sender's prior invs up to last-known-peer-received
>
> Possible new messages:
> - sparseblock
> - invack message a node can send at times when it's received a bunch
> of invs it already has, so it hasn't acked with a getdata in a while
> - gettx: getdata, but using new sequential ID to save 28 bytes per tx
>
> It seems important for ordering policies to be able to be specified in
> as much detail as possible. Parameters that should be available:
> - total inputs
> - total outputs
> - bytes
> - coin days destroyed
> - net UTXO size change
> - sigops
> - is data carrier
> - is output raw multisig
> - age in mempool
> - what else?
> This parameter set should be extensible to allow for unforeseen future factors.
>
> Ordering policies should allow arbitrary algebraic combinations of
> their parameters, as well as thresholds. Boolean combinations of
> sub-policies would also be desirable. This could be implemented with a
> tx-script-like stack-based language, in which each supported tx
> property is pushed onto the stack by a particular opcode, and
> +-*//min/max/boolean operators combine them to yield the sort key.
>
> Difficult parameters:
> * Coin-days-destroyed: changes, peers need agreement on when (if?)
> it's recalculated. Probably can just not recalculate, but peers still
> need agreement on "time seen" to get CDD.
> * Age in mempool: seems intractable in terms of time, but could be
> done easily in terms of "how many txes old is this sequential ID"
>
> One potential pitfall: this allows for an environment of completely
> heterogeneous mempool policies. I think that's a good thing, but we
> need to avoid a situation where only least-common-denominator
> transactions make it farther than a hop or two, and we don't want
> nodes to have a strong preference for connecting to like-minded peers
> since clustering reduces overall connectivity. It may be worthwhile to
> add a parallel mechanism for relay policies, to differentiate between
> what a node would keep in its mempool vs. what it wouldn't even relay
> and doesn't want to see at all. Relay policies could be specified just
> like prioritization policies, but with the final stack value evaluated
> in a boolean context.
>
> An interesting additional use of policy-scripts would be a
> standardized way for miners to include a policy script in a coinbase,
> allowing miners a mechanism to advertise things like their relative
> price of sigops vs bytes. Nodes may then choose to take this
> information into account in order to optimize their mempool policies
> for likelihood of consistency with future blocks. Since policy scripts
> provide only relative information on prices of different transaction
> properties rather than an absolute fee, this should not allow miners
> to "vote fees up", although care would need to be taken they wouldn't
> be able to drive up prices by claiming common transaction types are at
> the high end of the fee scale.
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From keziahw at gmail.com  Fri Jul 18 17:53:12 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Fri, 18 Jul 2014 10:53:12 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
	<CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
Message-ID: <CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>

That's true, but I think it can be balanced with the usefulness of
knowing what messages a node has received. An invack would be sent if
N invs have been received without any resulting getdata; since we're
keeping track of peer inv order, one message can cover an arbitrarily
large series of invs.

On Fri, Jul 18, 2014 at 10:48 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> On a flood-fill network, you don't want to create a storm of "I
> already have this" replies.
>
> On Fri, Jul 18, 2014 at 1:39 PM, Kaz Wesley <keziahw at gmail.com> wrote:
>> Peers exchanging mempool priority policies is great; that accomplishes
>> the flexibility in what txes to remember that I was going for with the
>> forget-filters, but much more neatly, with less overhead and some side
>> benefits.
>>
>> Here's what I'm picturing now:
>> - exchange priority policies in peer introductions
>> - assign unique sequential IDs in the order the transactions were
>> inved (per peer)
>> - receiving a getdata for a tx updates last-known-peer-received inv to
>> all invs up to the one referenced
>> - include ID-last-received, last-known-peer-received in sparse block
>> - reference txes in sparse block by index in receiver's
>> prioritiziation with peer's sent invs up to ID-last-received and
>> sender's prior invs up to last-known-peer-received
>>
>> Possible new messages:
>> - sparseblock
>> - invack message a node can send at times when it's received a bunch
>> of invs it already has, so it hasn't acked with a getdata in a while
>> - gettx: getdata, but using new sequential ID to save 28 bytes per tx
>>
>> It seems important for ordering policies to be able to be specified in
>> as much detail as possible. Parameters that should be available:
>> - total inputs
>> - total outputs
>> - bytes
>> - coin days destroyed
>> - net UTXO size change
>> - sigops
>> - is data carrier
>> - is output raw multisig
>> - age in mempool
>> - what else?
>> This parameter set should be extensible to allow for unforeseen future factors.
>>
>> Ordering policies should allow arbitrary algebraic combinations of
>> their parameters, as well as thresholds. Boolean combinations of
>> sub-policies would also be desirable. This could be implemented with a
>> tx-script-like stack-based language, in which each supported tx
>> property is pushed onto the stack by a particular opcode, and
>> +-*//min/max/boolean operators combine them to yield the sort key.
>>
>> Difficult parameters:
>> * Coin-days-destroyed: changes, peers need agreement on when (if?)
>> it's recalculated. Probably can just not recalculate, but peers still
>> need agreement on "time seen" to get CDD.
>> * Age in mempool: seems intractable in terms of time, but could be
>> done easily in terms of "how many txes old is this sequential ID"
>>
>> One potential pitfall: this allows for an environment of completely
>> heterogeneous mempool policies. I think that's a good thing, but we
>> need to avoid a situation where only least-common-denominator
>> transactions make it farther than a hop or two, and we don't want
>> nodes to have a strong preference for connecting to like-minded peers
>> since clustering reduces overall connectivity. It may be worthwhile to
>> add a parallel mechanism for relay policies, to differentiate between
>> what a node would keep in its mempool vs. what it wouldn't even relay
>> and doesn't want to see at all. Relay policies could be specified just
>> like prioritization policies, but with the final stack value evaluated
>> in a boolean context.
>>
>> An interesting additional use of policy-scripts would be a
>> standardized way for miners to include a policy script in a coinbase,
>> allowing miners a mechanism to advertise things like their relative
>> price of sigops vs bytes. Nodes may then choose to take this
>> information into account in order to optimize their mempool policies
>> for likelihood of consistency with future blocks. Since policy scripts
>> provide only relative information on prices of different transaction
>> properties rather than an absolute fee, this should not allow miners
>> to "vote fees up", although care would need to be taken they wouldn't
>> be able to drive up prices by claiming common transaction types are at
>> the high end of the fee scale.
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/



From pieter.wuille at gmail.com  Fri Jul 18 18:10:41 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 18 Jul 2014 20:10:41 +0200
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CAPg+sBgPAVt6oPSydRqBXmSdquqp1ZQsK4BzzM3BAc8tYM3abQ@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CAPg+sBh1sy1UynfXk284KHbBb6rEowTb7fentBBA+CkYWLdaGg@mail.gmail.com>
	<CAPg+sBgPAVt6oPSydRqBXmSdquqp1ZQsK4BzzM3BAc8tYM3abQ@mail.gmail.com>
Message-ID: <CAPg+sBj=FMe0KQPMFQEYZbBOOMgqDfrLLZNMExQHMfki4=dOeQ@mail.gmail.com>

On Fri, Jul 18, 2014 at 7:25 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Fri, Jul 18, 2014 at 5:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
>> But perhaps we should investigate how many non-DER signatures still
>> make it into blocks first...
>
> In the last 11 blocks (4148 transactions), apparently none.

Or even in the last 389 blocks (159466 transactions).

-- 
Pieter



From keziahw at gmail.com  Fri Jul 18 19:51:59 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Fri, 18 Jul 2014 12:51:59 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
	<CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
	<CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>
Message-ID: <CA+iPb=FZS9FxP9uYWHTzLpSVJ2uaOwr4dTQSvYuJjhVYCcJOew@mail.gmail.com>

I've updated the gist, and added an additional proposal that I think
meshes well:
https://gist.github.com/kazcw/43c97d3924326beca87d#ultra-fast-block-validation

sparseblocks + UFBV would tighten the new-block process to this (when
txes have been received in advance):
- receive block (~2kB for 1000 tx)
- check whether block contains txes known to belong to conflict-sets,
and if so whether more than one tx from a single conflict-set has been
included (a few operations on very small sets)
- relay block (~2kB)

The benefits of these changes only occur when the transactions have
been seen in advance, but incentivizing ahead-of-block transaction
propogation is a plus, as Jeff mentioned; working on a block without
first ensuring peers have its transactions would be very expensive
from a miner's point of view.



From jgarzik at bitpay.com  Fri Jul 18 19:55:52 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 18 Jul 2014 15:55:52 -0400
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=FZS9FxP9uYWHTzLpSVJ2uaOwr4dTQSvYuJjhVYCcJOew@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
	<CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
	<CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>
	<CA+iPb=FZS9FxP9uYWHTzLpSVJ2uaOwr4dTQSvYuJjhVYCcJOew@mail.gmail.com>
Message-ID: <CAJHLa0MSdafZiXNH_L8qqH63n3wP5hb0R=EX3SJtsD40Fq_VOA@mail.gmail.com>

Related:  We must handle some legitimate miner-privately-mined cases,
such as miner payout TXs (outside coinbase) or side chain conditional
TXs[1].

[1] https://bitcointalk.org/index.php?topic=676703.msg7682680#msg7682680

On Fri, Jul 18, 2014 at 3:51 PM, Kaz Wesley <keziahw at gmail.com> wrote:
> I've updated the gist, and added an additional proposal that I think
> meshes well:
> https://gist.github.com/kazcw/43c97d3924326beca87d#ultra-fast-block-validation
>
> sparseblocks + UFBV would tighten the new-block process to this (when
> txes have been received in advance):
> - receive block (~2kB for 1000 tx)
> - check whether block contains txes known to belong to conflict-sets,
> and if so whether more than one tx from a single conflict-set has been
> included (a few operations on very small sets)
> - relay block (~2kB)
>
> The benefits of these changes only occur when the transactions have
> been seen in advance, but incentivizing ahead-of-block transaction
> propogation is a plus, as Jeff mentioned; working on a block without
> first ensuring peers have its transactions would be very expensive
> from a miner's point of view.
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Fri Jul 18 20:51:48 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 18 Jul 2014 22:51:48 +0200
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
Message-ID: <CA+s+GJCDv+JWXOoiU7BvudyCza=9mtRspWwST3SyaDovvj6Osw@mail.gmail.com>

On Fri, Jul 18, 2014 at 5:14 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> Hi all,
>
> I've sent a pull request to make a small change to BIP 62 (my
> anti-malleability proposal) which is still a draft; see:
> * https://github.com/bitcoin/bips/pull/90 (the request)
> * https://github.com/sipa/bips/blob/bip62up/bip-0062.mediawiki (the result)
>
> It makes two of the 7 new rules mandatory in new blocks, even for
> old-style transactions. Both are already non-standard since 0.8.0, and
> have no use cases in my opinion.

Looks good to me.

> The reason for this change is dropping the requirement for signature
> verification engines to be bug-for-bug compatible with OpenSSL (which
> supports many non-standard encodings for signatures). Requiring strict
> DER compliance for signatures means any implementation just needs to
> support DER.

This is certainly a good thing. Not even OpenSSL is guaranteed to be
bug-for-bug compatible with its own prior versions forever, so better
to strictly define what is allowed.

Wladimir



From laanwj at gmail.com  Fri Jul 18 20:56:32 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 18 Jul 2014 22:56:32 +0200
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
Message-ID: <CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>

On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:
> The rationale doesn't seem to apply to rule #4, what's so special about that
> one?

> 4. Non-push operations in scriptSig Any non-push operation in a scriptSig invalidates it.

Having non-push operations in the scriptSig is a source of
malleability, as there can be multiple sequences of opcodes that
evaluate to the same result.

Wladimir



From voisine at gmail.com  Fri Jul 18 22:03:44 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Fri, 18 Jul 2014 15:03:44 -0700
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
Message-ID: <CACq0ZD6BmTB_jwE9L0_zrWgVckb=LFL61fow1kuTSnjurbsq9A@mail.gmail.com>

> 9. New signatures by the sender

I'm not suggesting it be required, but it would be possible to
mitigate this one by requiring that all signatures deterministically
generate k per RFC6979. I'm using this in breadwallet.

Aaron Voisine
breadwallet.com


On Fri, Jul 18, 2014 at 1:56 PM, Wladimir <laanwj at gmail.com> wrote:
> On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:
>> The rationale doesn't seem to apply to rule #4, what's so special about that
>> one?
>
>> 4. Non-push operations in scriptSig Any non-push operation in a scriptSig invalidates it.
>
> Having non-push operations in the scriptSig is a source of
> malleability, as there can be multiple sequences of opcodes that
> evaluate to the same result.
>
> Wladimir
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From el33th4x0r at gmail.com  Sat Jul 19 00:51:06 2014
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Fri, 18 Jul 2014 17:51:06 -0700
Subject: [Bitcoin-development] Decentralizing ming
In-Reply-To: <CAJHLa0PZsTjB7O_JuPsMUzfrWAB9yW+x0bEKWo3JyGebKr42ZA@mail.gmail.com>
References: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
	<CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
	<CANEZrP0HxfJYaTxYdxh3ANLOMma_J9A93A0LjB47PHdiaNo5NA@mail.gmail.com>
	<CANEZrP2+tufB0jbgqdCc9t_XLbs9pnX9t8jUGfLA_xLDhEts8Q@mail.gmail.com>
	<CAJHLa0PZsTjB7O_JuPsMUzfrWAB9yW+x0bEKWo3JyGebKr42ZA@mail.gmail.com>
Message-ID: <CAPkFh0uk9uAODo2Pp654xapoD=J=3HukMouCSdnYZuAN43Y=2A@mail.gmail.com>

I thought I'd chime in and point out some research results that might help.
Even if they don't, there is a cool underlying technique that some of you
might find interesting.

The problem being tackled here is very similar to "set reconciliation,"
where
peer A thinks that the set of transactions that should be in the block is
S_A,
and peer B has actually included set S_B, and S_A and S_B are expected
to not differ much. Ideally, one would like the communication complexity
between A and B to be O(delta), not O(S_B) as it is right now. And ideally,
one would like B to send a single message to A, and for A to figure out the
difference between the two sets, without any lengthy back and forth
communication. In essence, I would like to give you some magical packet
that is pretty small and communicates just the delta between what you and
I know.

This paper from Cornell describes a scheme for achieving this:
   Yaron Minsky, Ari Trachtenberg, Richard Zippel: Set reconciliation with
nearly optimal communication complexity. IEEE Transactions on Information
Theory 49(9): 2213-2218 (2003)
   http://ipsit.bu.edu/documents/ieee-it3-web.pdf

Those of you looking for a TL;DR should read the intro and then skip to
page 8 for the example. The underlying trick is very cool, comes from the
peer-to-peer/gossip literature, and it is underused. It'd be really cool if
it
could be applied to this problem to reduce the size of the packets.

This approach has three benefits over the Bloom filter approach (if I
understand the Bloom filter idea correctly):

(1) Bloom filters require packets that are still O(S_A),

(2) Bloom filters are probabilistic, so require extra complications
when there is a hash collision. In the worst case, A might get confused
about which transaction B actually included, which would lead to a
fork. (I am not sure if I followed the Bloom filter idea fully -- this may
not happen with the proposal, but it's a possibility with a naive Bloom
filter implementation)

(3) Bloom filters are interactive, so when A detects that B has included
some transactions that A does not know about, it has to send a message
to figure out what those transactions are.

Set reconciliation is O(delta), non-probabilistic, and non-interactive. The
naive version requires that one have some idea of the size of the delta,
but I think the paper has some discussion of how to handle the delta
estimate.

I have not gone through the full exercise of actually applying this trick to
the Bitcoin p2p protocol yet, but wanted to draw your attention to it.
If someone is interested in applying this stuff to Bitcoin, I'd be happy
to communicate further off list.

- egs



On Fri, Jul 18, 2014 at 6:44 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Yes.  That, and several other things.  If you can figure out how to
> propagate a block without re-propagating all the transactions everyone
> already has, you address the large-blocks-slower-to-relay problem, and
> additionally create an incentive for miners to mine blocks consisting
> of publicly broadcast transactions (versus a bunch of secret ones
> mined with secret agreements).
>
> Democratizing transaction selection takes a bit of power away from the
> miners and gives it back to the network at large.  GBT is another
> piece of that puzzle.
>
>
> On Fri, Jul 18, 2014 at 6:43 AM, Mike Hearn <mike at plan99.net> wrote:
> > Oops, sorry, I see the subject line changed. This is what I get for
> working
> > down the thread list top to bottom :)
> >
> > I think the best path forward now is to finish off getblocktemplate
> support
> > in the various tools so it's possible to pool for payout purposes without
> > giving up control of block creation modulo the coinbase. Combined with
> the
> > recent sipa performance enhancing goodness, it would hopefully persuade
> some
> > non-trivial chunk of hashpower to go back to running their own node and
> > start the process of turning pools merely into payout trackers rather
> than
> > block selectors.
> >
> >
> > On Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:
> >>
> >> Jeff, I think the message you're replying to got clipped.
> >>
> >> Satoshi's only comment AFAIK on the topic of GPU mining was to wish for
> a
> >> gentlemen's agreement to postpone it as long as possible, to help make
> sure
> >> the distribution of coins was as even as possible. Indeed this predated
> >> pooled mining.
> >>
> >
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/e0c8569d/attachment.html>

From el33th4x0r at gmail.com  Sat Jul 19 00:54:14 2014
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Fri, 18 Jul 2014 17:54:14 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAJHLa0MSdafZiXNH_L8qqH63n3wP5hb0R=EX3SJtsD40Fq_VOA@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
	<CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
	<CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>
	<CA+iPb=FZS9FxP9uYWHTzLpSVJ2uaOwr4dTQSvYuJjhVYCcJOew@mail.gmail.com>
	<CAJHLa0MSdafZiXNH_L8qqH63n3wP5hb0R=EX3SJtsD40Fq_VOA@mail.gmail.com>
Message-ID: <CAPkFh0uuo=vOiLVTvozPiO7L26A4DpJ9nrKGeQZ+DC6HbO27TQ@mail.gmail.com>

I thought I'd chime in and point out some research results that might help.
Even if they don't, there is a cool underlying technique that some of you
might find interesting.

The problem being tackled here is very similar to "set reconciliation,"
where
peer A thinks that the set of transactions that should be in the block is
S_A,
and peer B has actually included set S_B, and S_A and S_B are expected
to not differ much. Ideally, one would like the communication complexity
between A and B to be O(delta), not O(S_B) as it is right now. And ideally,
one would like B to send a single message to A, and for A to figure out the
difference between the two sets, without any lengthy back and forth
communication. In essence, I would like to give you some magical packet
that is pretty small and communicates just the delta between what you and
I know.

This paper from Cornell describes a scheme for achieving this:
   Yaron Minsky, Ari Trachtenberg, Richard Zippel: Set reconciliation with
nearly optimal communication complexity. IEEE Transactions on Information
Theory 49(9): 2213-2218 (2003)
   http://ipsit.bu.edu/documents/ieee-it3-web.pdf

Those of you looking for a TL;DR should read the intro and then skip to
page 8 for the example. The underlying trick is very cool, comes from the
peer-to-peer/gossip literature, and it is underused. It'd be really cool if
it
could be applied to this problem to reduce the size of the packets.

This approach has three benefits over the Bloom filter approach (if I
understand the Bloom filter idea correctly):

(1) Bloom filters require packets that are still O(S_A),

(2) Bloom filters are probabilistic, so require extra complications
when there is a hash collision. In the worst case, A might get confused
about which transaction B actually included, which would lead to a
fork. (I am not sure if I followed the Bloom filter idea fully -- this may
not happen with the proposal, but it's a possibility with a naive Bloom
filter implementation)

(3) Bloom filters are interactive, so when A detects that B has included
some transactions that A does not know about, it has to send a message
to figure out what those transactions are.

Set reconciliation is O(delta), non-probabilistic, and non-interactive. The
naive version requires that one have some idea of the size of the delta,
but I think the paper has some discussion of how to handle the delta
estimate.

I have not gone through the full exercise of actually applying this trick to
the Bitcoin p2p protocol yet, but wanted to draw your attention to it.
If someone is interested in applying this stuff to Bitcoin, I'd be happy
to communicate further off list.

- egs



On Fri, Jul 18, 2014 at 12:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Related:  We must handle some legitimate miner-privately-mined cases,
> such as miner payout TXs (outside coinbase) or side chain conditional
> TXs[1].
>
> [1] https://bitcointalk.org/index.php?topic=676703.msg7682680#msg7682680
>
> On Fri, Jul 18, 2014 at 3:51 PM, Kaz Wesley <keziahw at gmail.com> wrote:
> > I've updated the gist, and added an additional proposal that I think
> > meshes well:
> >
> https://gist.github.com/kazcw/43c97d3924326beca87d#ultra-fast-block-validation
> >
> > sparseblocks + UFBV would tighten the new-block process to this (when
> > txes have been received in advance):
> > - receive block (~2kB for 1000 tx)
> > - check whether block contains txes known to belong to conflict-sets,
> > and if so whether more than one tx from a single conflict-set has been
> > included (a few operations on very small sets)
> > - relay block (~2kB)
> >
> > The benefits of these changes only occur when the transactions have
> > been seen in advance, but incentivizing ahead-of-block transaction
> > propogation is a plus, as Jeff mentioned; working on a block without
> > first ensuring peers have its transactions would be very expensive
> > from a miner's point of view.
> >
> >
> ------------------------------------------------------------------------------
> > Want fast and easy access to all the code in your enterprise? Index and
> > search up to 200,000 lines of code with a free copy of Black Duck
> > Code Sight - the same software that powers the world's largest code
> > search on Ohloh, the Black Duck Open Hub! Try it now.
> > http://p.sf.net/sfu/bds
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/2142ffc0/attachment.html>

From el33th4x0r at gmail.com  Sat Jul 19 00:54:36 2014
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Fri, 18 Jul 2014 17:54:36 -0700
Subject: [Bitcoin-development] Decentralizing ming
In-Reply-To: <CAPkFh0uk9uAODo2Pp654xapoD=J=3HukMouCSdnYZuAN43Y=2A@mail.gmail.com>
References: <CAJHLa0PWF38N0-CFY9b3FzFdN2NfLduWHCeCQHXQOKirDYn0Pw@mail.gmail.com>
	<CAJna-HhhqYGSVwapvR_5yvRY3gc6wXGaNXm_dkP4Tid7F1SsLw@mail.gmail.com>
	<CANEZrP0HxfJYaTxYdxh3ANLOMma_J9A93A0LjB47PHdiaNo5NA@mail.gmail.com>
	<CANEZrP2+tufB0jbgqdCc9t_XLbs9pnX9t8jUGfLA_xLDhEts8Q@mail.gmail.com>
	<CAJHLa0PZsTjB7O_JuPsMUzfrWAB9yW+x0bEKWo3JyGebKr42ZA@mail.gmail.com>
	<CAPkFh0uk9uAODo2Pp654xapoD=J=3HukMouCSdnYZuAN43Y=2A@mail.gmail.com>
Message-ID: <CAPkFh0sqFFU-JWJ1f49DZSBORTo__Nwis8TrakJS5ZT_oWSN5A@mail.gmail.com>

My apologies for posting to the wrong thread.



On Fri, Jul 18, 2014 at 5:51 PM, Emin G?n Sirer <el33th4x0r at gmail.com>
wrote:

> I thought I'd chime in and point out some research results that might help.
> Even if they don't, there is a cool underlying technique that some of you
> might find interesting.
>
> The problem being tackled here is very similar to "set reconciliation,"
> where
> peer A thinks that the set of transactions that should be in the block is
> S_A,
> and peer B has actually included set S_B, and S_A and S_B are expected
> to not differ much. Ideally, one would like the communication complexity
> between A and B to be O(delta), not O(S_B) as it is right now. And ideally,
> one would like B to send a single message to A, and for A to figure out the
> difference between the two sets, without any lengthy back and forth
> communication. In essence, I would like to give you some magical packet
> that is pretty small and communicates just the delta between what you and
> I know.
>
> This paper from Cornell describes a scheme for achieving this:
>    Yaron Minsky, Ari Trachtenberg, Richard Zippel: Set reconciliation with
> nearly optimal communication complexity. IEEE Transactions on Information
> Theory 49(9): 2213-2218 (2003)
>    http://ipsit.bu.edu/documents/ieee-it3-web.pdf
>
> Those of you looking for a TL;DR should read the intro and then skip to
> page 8 for the example. The underlying trick is very cool, comes from the
> peer-to-peer/gossip literature, and it is underused. It'd be really cool
> if it
> could be applied to this problem to reduce the size of the packets.
>
> This approach has three benefits over the Bloom filter approach (if I
> understand the Bloom filter idea correctly):
>
> (1) Bloom filters require packets that are still O(S_A),
>
> (2) Bloom filters are probabilistic, so require extra complications
> when there is a hash collision. In the worst case, A might get confused
> about which transaction B actually included, which would lead to a
> fork. (I am not sure if I followed the Bloom filter idea fully -- this may
> not happen with the proposal, but it's a possibility with a naive Bloom
> filter implementation)
>
>  (3) Bloom filters are interactive, so when A detects that B has included
> some transactions that A does not know about, it has to send a message
> to figure out what those transactions are.
>
> Set reconciliation is O(delta), non-probabilistic, and non-interactive. The
> naive version requires that one have some idea of the size of the delta,
> but I think the paper has some discussion of how to handle the delta
> estimate.
>
> I have not gone through the full exercise of actually applying this trick
> to
> the Bitcoin p2p protocol yet, but wanted to draw your attention to it.
> If someone is interested in applying this stuff to Bitcoin, I'd be happy
> to communicate further off list.
>
> - egs
>
>
>
> On Fri, Jul 18, 2014 at 6:44 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>> Yes.  That, and several other things.  If you can figure out how to
>> propagate a block without re-propagating all the transactions everyone
>> already has, you address the large-blocks-slower-to-relay problem, and
>> additionally create an incentive for miners to mine blocks consisting
>> of publicly broadcast transactions (versus a bunch of secret ones
>> mined with secret agreements).
>>
>> Democratizing transaction selection takes a bit of power away from the
>> miners and gives it back to the network at large.  GBT is another
>> piece of that puzzle.
>>
>>
>> On Fri, Jul 18, 2014 at 6:43 AM, Mike Hearn <mike at plan99.net> wrote:
>> > Oops, sorry, I see the subject line changed. This is what I get for
>> working
>> > down the thread list top to bottom :)
>> >
>> > I think the best path forward now is to finish off getblocktemplate
>> support
>> > in the various tools so it's possible to pool for payout purposes
>> without
>> > giving up control of block creation modulo the coinbase. Combined with
>> the
>> > recent sipa performance enhancing goodness, it would hopefully persuade
>> some
>> > non-trivial chunk of hashpower to go back to running their own node and
>> > start the process of turning pools merely into payout trackers rather
>> than
>> > block selectors.
>> >
>> >
>> > On Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:
>> >>
>> >> Jeff, I think the message you're replying to got clipped.
>> >>
>> >> Satoshi's only comment AFAIK on the topic of GPU mining was to wish
>> for a
>> >> gentlemen's agreement to postpone it as long as possible, to help make
>> sure
>> >> the distribution of coins was as even as possible. Indeed this predated
>> >> pooled mining.
>> >>
>> >
>>
>>
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/b1619afb/attachment.html>

From gmaxwell at gmail.com  Sat Jul 19 01:25:44 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 18 Jul 2014 18:25:44 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAPkFh0uuo=vOiLVTvozPiO7L26A4DpJ9nrKGeQZ+DC6HbO27TQ@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
	<CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
	<CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>
	<CA+iPb=FZS9FxP9uYWHTzLpSVJ2uaOwr4dTQSvYuJjhVYCcJOew@mail.gmail.com>
	<CAJHLa0MSdafZiXNH_L8qqH63n3wP5hb0R=EX3SJtsD40Fq_VOA@mail.gmail.com>
	<CAPkFh0uuo=vOiLVTvozPiO7L26A4DpJ9nrKGeQZ+DC6HbO27TQ@mail.gmail.com>
Message-ID: <CAAS2fgSfpTmNcexSV6U3wvbdddqZ8Pb0WVYh35jqNkJCMRbBkw@mail.gmail.com>

On Fri, Jul 18, 2014 at 5:54 PM, Emin G?n Sirer <el33th4x0r at gmail.com> wrote:
> The problem being tackled here is very similar to "set reconciliation,"
> where
> peer A thinks that the set of transactions that should be in the block is
> S_A,

Most things I've seen working in this space are attempting to minimize
the data transfered. At least for the miner-interested case the round
complexity is much more important because a single RTT is enough to
basically send the whole block on a lot of very relevant paths.

I know much better is possible (see up-thread where I linked to an old
proposal to use forward error correction to transfer with low data
transfer (but not optimal) and negligible probability of needing a
round-trip, with a tradeoff for more overhead for lower roundtrip
probability).



From gmaxwell at gmail.com  Sat Jul 19 01:28:49 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 18 Jul 2014 18:28:49 -0700
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CACq0ZD6BmTB_jwE9L0_zrWgVckb=LFL61fow1kuTSnjurbsq9A@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
	<CACq0ZD6BmTB_jwE9L0_zrWgVckb=LFL61fow1kuTSnjurbsq9A@mail.gmail.com>
Message-ID: <CAAS2fgSwzx7M9NLjoOgfAgQT2cHmUWYD8hBmwHRRhgG9UgmmhA@mail.gmail.com>

On Fri, Jul 18, 2014 at 3:03 PM, Aaron Voisine <voisine at gmail.com> wrote:
>> 9. New signatures by the sender
>
> I'm not suggesting it be required, but it would be possible to
> mitigate this one by requiring that all signatures deterministically
> generate k per RFC6979. I'm using this in breadwallet.

Nope.

Your homework assignment is to explain why. :)



From el33th4x0r at gmail.com  Sat Jul 19 03:06:21 2014
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Fri, 18 Jul 2014 23:06:21 -0400
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAAS2fgSfpTmNcexSV6U3wvbdddqZ8Pb0WVYh35jqNkJCMRbBkw@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
	<CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
	<CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>
	<CA+iPb=FZS9FxP9uYWHTzLpSVJ2uaOwr4dTQSvYuJjhVYCcJOew@mail.gmail.com>
	<CAJHLa0MSdafZiXNH_L8qqH63n3wP5hb0R=EX3SJtsD40Fq_VOA@mail.gmail.com>
	<CAPkFh0uuo=vOiLVTvozPiO7L26A4DpJ9nrKGeQZ+DC6HbO27TQ@mail.gmail.com>
	<CAAS2fgSfpTmNcexSV6U3wvbdddqZ8Pb0WVYh35jqNkJCMRbBkw@mail.gmail.com>
Message-ID: <CAPkFh0thLcaAPaa7Xswu2vSxossRDziMCoStzTDWw+e0c3WqTw@mail.gmail.com>

> Most things I've seen working in this space are attempting to minimize
> the data transfered. At least for the miner-interested case the round
> complexity is much more important because a single RTT is enough to
> basically send the whole block on a lot of very relevant paths.

Agreed. Yaron's scheme is magical because it is non-interactive. I send you
a packet of O(expected-delta) and you immediately figure out the delta
without further back and forth communication, each requiring an RTT.

> I know much better is possible (see up-thread where I linked to an old
> proposal to use forward error correction to transfer with low data
> transfer (but not optimal) and negligible probability of needing a
> round-trip, with a tradeoff for more overhead for lower roundtrip
> probability).

FEC schemes are both fairly complex, because the set is constantly
changing, and (if i understand your suggestion correctly) they add
additional metadata overhead (albeit mostly during tx propagation). Set
reconciliation is near optimal.

In any case, I have no horse here (I think changing the client so it's
multithreaded is the best way to go), but Yaron's work is pretty cool and
may be applicable.

- egs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/d7cb8d29/attachment.html>

From voisine at gmail.com  Sat Jul 19 04:38:16 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Fri, 18 Jul 2014 21:38:16 -0700
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CAAS2fgSwzx7M9NLjoOgfAgQT2cHmUWYD8hBmwHRRhgG9UgmmhA@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
	<CACq0ZD6BmTB_jwE9L0_zrWgVckb=LFL61fow1kuTSnjurbsq9A@mail.gmail.com>
	<CAAS2fgSwzx7M9NLjoOgfAgQT2cHmUWYD8hBmwHRRhgG9UgmmhA@mail.gmail.com>
Message-ID: <CACq0ZD4GwDZbEK4oE_BJxN-nDTb_4+hhDFZ0T7xGAi8v3G349A@mail.gmail.com>

Well, you could always create a transaction with a different signature
hash, say, by changing something trivial like nLockTime, or changing
the order of inputs or outputs. Is that what you're talking about? Or
is there some sophistry I'm ignorant of having to do with the elliptic
curve math in the signature itself?

Aaron Voisine
breadwallet.com


On Fri, Jul 18, 2014 at 6:28 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Fri, Jul 18, 2014 at 3:03 PM, Aaron Voisine <voisine at gmail.com> wrote:
>>> 9. New signatures by the sender
>>
>> I'm not suggesting it be required, but it would be possible to
>> mitigate this one by requiring that all signatures deterministically
>> generate k per RFC6979. I'm using this in breadwallet.
>
> Nope.
>
> Your homework assignment is to explain why. :)



From me at ricmoo.com  Sat Jul 19 04:33:13 2014
From: me at ricmoo.com (Richard Moore)
Date: Sat, 19 Jul 2014 00:33:13 -0400
Subject: [Bitcoin-development] Signature with negative integer?
Message-ID: <FD77BD8C-9772-41C4-B7B3-24F1E944B9E0@ricmoo.com>

Hey all,

I'm wondering if anyone can help explain to me tx 70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d...

(https://blockchain.info/tx/70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d)


The input signature script is:

304402206b5c3b1c86748dcf328b9f3a65e10085afcf5d1af5b40970d8ce3a9355e06b5b0220cdbdc23e6d3618e47056fccc60c5f73d1a542186705197e5791e97f0e6582a3201 


Which decodes to:

r= 48560432700441876832361368709121298776045893858160378595187765610521057848155
s= -22732680560694206332190468058638664750027418114195068375538144640549433890254

(http://lapo.it/asn1js/#304402206B5C3B1C86748DCF328B9F3A65E10085AFCF5D1AF5B40970D8CE3A9355E06B5B0220CDBDC23E6D3618E47056FCCC60C5F73D1A542186705197E5791E97F0E6582A32)


The ECC library I'm using is failing to verify this, which I think makes sense, since I the point needs to be positive, no? But it is obviously valid, as it has been verified and spent. I have tried simply modulo curve.order to positive-ify it, but that didn't seem to work either. Given a point P (with Py < 0) is there some fancy way to bring it into the elliptic curve space, such that Px >= 0 and Py >= 0?

Thanks!

RicMoo


.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com




From gmaxwell at gmail.com  Sat Jul 19 06:48:18 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 18 Jul 2014 23:48:18 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAPkFh0thLcaAPaa7Xswu2vSxossRDziMCoStzTDWw+e0c3WqTw@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
	<CAJHLa0O=eCoyvV19dWgTnYd9Di0wLLZtWmCPidc-dWqPNQv_oQ@mail.gmail.com>
	<CA+iPb=H2fkjCxS7-hYqHjFzfMh6onk5RqZMxa8zsXeTn6pQMpA@mail.gmail.com>
	<CAJHLa0NRUdAPuKXgKDBmXOs9to7gMpHv9ECCz_hTfZpg7SVVJA@mail.gmail.com>
	<CA+iPb=HhGkiuaAxQMvpDpUdeU0uA5unPa_0uHGkS3LrmJzEnyQ@mail.gmail.com>
	<CA+iPb=FZS9FxP9uYWHTzLpSVJ2uaOwr4dTQSvYuJjhVYCcJOew@mail.gmail.com>
	<CAJHLa0MSdafZiXNH_L8qqH63n3wP5hb0R=EX3SJtsD40Fq_VOA@mail.gmail.com>
	<CAPkFh0uuo=vOiLVTvozPiO7L26A4DpJ9nrKGeQZ+DC6HbO27TQ@mail.gmail.com>
	<CAAS2fgSfpTmNcexSV6U3wvbdddqZ8Pb0WVYh35jqNkJCMRbBkw@mail.gmail.com>
	<CAPkFh0thLcaAPaa7Xswu2vSxossRDziMCoStzTDWw+e0c3WqTw@mail.gmail.com>
Message-ID: <CAAS2fgRRfBtwRuANEvU7VEe2oS3dJ2aZQYU57Brmc6F-uYxePA@mail.gmail.com>

On Fri, Jul 18, 2014 at 8:06 PM, Emin G?n Sirer <el33th4x0r at gmail.com> wrote:
>
>> Most things I've seen working in this space are attempting to minimize
>> the data transfered. At least for the miner-interested case the round
>> complexity is much more important because a single RTT is enough to
>> basically send the whole block on a lot of very relevant paths.
>
> Agreed. Yaron's scheme is magical because it is non-interactive. I send you
> a packet of O(expected-delta) and you immediately figure out the delta
> without further back and forth communication, each requiring an RTT.

Oh that does sound interesting? its the property I was trying to
approximate with the FEC..  It achieves the one-shot, but there is
overhead. One plus we have is that we can do some tricks to make some
computational soundness arguments that we'd actually get average
performance on average (e.g. that someone can't author transactions in
such a way as to jam the process).

> In any case, I have no horse here (I think changing the client so it's
> multithreaded is the best way to go), but Yaron's work is pretty cool and
> may be applicable.


Thank you, I've certantly queued the paper for reading.



From gmaxwell at gmail.com  Sat Jul 19 06:56:08 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 18 Jul 2014 23:56:08 -0700
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CACq0ZD4GwDZbEK4oE_BJxN-nDTb_4+hhDFZ0T7xGAi8v3G349A@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
	<CACq0ZD6BmTB_jwE9L0_zrWgVckb=LFL61fow1kuTSnjurbsq9A@mail.gmail.com>
	<CAAS2fgSwzx7M9NLjoOgfAgQT2cHmUWYD8hBmwHRRhgG9UgmmhA@mail.gmail.com>
	<CACq0ZD4GwDZbEK4oE_BJxN-nDTb_4+hhDFZ0T7xGAi8v3G349A@mail.gmail.com>
Message-ID: <CAAS2fgQGF2d98ciMKkE70bqy01mANPhDtamYroeHOZrfML7rMQ@mail.gmail.com>

On Fri, Jul 18, 2014 at 9:38 PM, Aaron Voisine <voisine at gmail.com> wrote:
> Well, you could always create a transaction with a different signature
> hash, say, by changing something trivial like nLockTime, or changing
> the order of inputs or outputs. Is that what you're talking about? Or
> is there some sophistry I'm ignorant of having to do with the elliptic
> curve math in the signature itself?

No, though thats true too. I was talking about the properties of the DSA nonce:

An attacker is not obligated to follow your protocol unless you can
prevent him. You can _say_ use derandomized DSA all you like, but he
can just not do so, there is no (reasonable) way to prove you're using
a particular nonce generation scheme without revealing the private key
in the process. The verifier cannot know the nonce or he can trivially
recover your private key thus he can't just repeat the computation
(well, plus if you're using RFC6979 the computation includes the
private key), so short of a very fancy ZKP (stuff at the forefront of
cryptographic/computer science) or precommiting to a nonce per public
key (e.g. single use public keys), you cannot control how a DSA nonce
was generated in the verifier in a way that would prevent equivalent
but not identical signatures.

(I believe there was some P.O.S. altcoin that was vulnerable because
of precisely the above too? thinking specifying a deterministic signer
would prevent someone from grinding signatures to improve their mining
odds... there are signature systems which are naturally
randomness-free: most hash based signatures and pairing short
signatures are two examples that come to mind... but not DSA, schnorr,
or any of their derivatives).



From gmaxwell at gmail.com  Sat Jul 19 07:03:35 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 19 Jul 2014 00:03:35 -0700
Subject: [Bitcoin-development] Signature with negative integer?
In-Reply-To: <FD77BD8C-9772-41C4-B7B3-24F1E944B9E0@ricmoo.com>
References: <FD77BD8C-9772-41C4-B7B3-24F1E944B9E0@ricmoo.com>
Message-ID: <CAAS2fgT7Qk8nRZaKEMP7HzBXTVfzFmeBo3yFCHdwTTvMTrad5Q@mail.gmail.com>

On Fri, Jul 18, 2014 at 9:33 PM, Richard Moore <me at ricmoo.com> wrote:
> Hey all,
> I'm wondering if anyone can help explain to me tx 70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d...

A rather timely post.  See the other thread on BIP0062. What you're
looking at is an example of a well-known-to-implementers-here where
invisible and undocumented "over permissiveness" in interpreting
invalid encoding in a cryptographic library (OpenSSL in our case)
which would have been probably-not-unwelcome in many other protocol
uses results in an unexpected consensus critical normative rule in
Bitcoin.

Modern releases of Bitcoin core will no longer relay or mine them but
they're still valid in blocks should they show up.

BIP62 proposes, among other things, soft-forking (backwards
compatible) changes that will strictly limit the DER encoding to avoid
ambiguity. If adopted by the network implementations would still need
to grandfather in existing weird transactions but could do so on a
txid by txid basis since there would be no more broken encoding
permitted in blocks, and use different DER decoding code without risk
of consensus inconsistency (so long as it uses der decoding which is
functionally identical to what BIP62 requires? of course).



From laanwj at gmail.com  Sat Jul 19 08:06:43 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 19 Jul 2014 10:06:43 +0200
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T0ag_o_mu=5Q7Ju7s2hO3jz-o5g9FihE9h4B6+ednd2Pg@mail.gmail.com>
	<CAJHLa0NZRF+1QjSwtwjaTE07NWJ_U-O-DE24=P5eSAutMqTupg@mail.gmail.com>
	<CABsx9T2BDBNqvinVNk3FmBRWU7R8jf6Vm6NaH74te0FRCh1O-w@mail.gmail.com>
Message-ID: <CA+s+GJAtuX7_=6c5eWxMvz2Ts1nGjYFpBnVd2jwtfSA85cpTPw@mail.gmail.com>

On Fri, Jul 18, 2014 at 4:53 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> Two more half-baked thoughts:
>
> We should be able to assume that the majority of transaction data (except
> for coinbase) has already been propagated. As Jeff said, incentivizing nodes
> to propagate transactions is a very good thing (the signature cache already
> gives a small incentive to miners to propagate and not 'hoard'
> transactions).

Maybe a stupid idea - but couldn't we make that assumption a surety by
starting the 'set synchronization process' as soon as the miner starts
crunching on a certain block, instead of when it broadcasts it? So the
peers are prepared, and the actual block broadcast is just the header
+ coinbase tx.

Wladimir



From voisine at gmail.com  Sat Jul 19 08:34:13 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Sat, 19 Jul 2014 01:34:13 -0700
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CAAS2fgQGF2d98ciMKkE70bqy01mANPhDtamYroeHOZrfML7rMQ@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
	<CACq0ZD6BmTB_jwE9L0_zrWgVckb=LFL61fow1kuTSnjurbsq9A@mail.gmail.com>
	<CAAS2fgSwzx7M9NLjoOgfAgQT2cHmUWYD8hBmwHRRhgG9UgmmhA@mail.gmail.com>
	<CACq0ZD4GwDZbEK4oE_BJxN-nDTb_4+hhDFZ0T7xGAi8v3G349A@mail.gmail.com>
	<CAAS2fgQGF2d98ciMKkE70bqy01mANPhDtamYroeHOZrfML7rMQ@mail.gmail.com>
Message-ID: <CACq0ZD6L1TqG9Z=9e=Uon0M=30PjzR5Bt29f5p1Mh=aggmHZmw@mail.gmail.com>

Ah, good point. For some reason I was thinking the k value was
generated only from the hash being signed, but it's derived from both
the private key and the hash, so as you say there's no way for the
verifier to tell if the scheme is being followed.



Aaron Voisine
breadwallet.com


On Fri, Jul 18, 2014 at 11:56 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Fri, Jul 18, 2014 at 9:38 PM, Aaron Voisine <voisine at gmail.com> wrote:
>> Well, you could always create a transaction with a different signature
>> hash, say, by changing something trivial like nLockTime, or changing
>> the order of inputs or outputs. Is that what you're talking about? Or
>> is there some sophistry I'm ignorant of having to do with the elliptic
>> curve math in the signature itself?
>
> No, though thats true too. I was talking about the properties of the DSA nonce:
>
> An attacker is not obligated to follow your protocol unless you can
> prevent him. You can _say_ use derandomized DSA all you like, but he
> can just not do so, there is no (reasonable) way to prove you're using
> a particular nonce generation scheme without revealing the private key
> in the process. The verifier cannot know the nonce or he can trivially
> recover your private key thus he can't just repeat the computation
> (well, plus if you're using RFC6979 the computation includes the
> private key), so short of a very fancy ZKP (stuff at the forefront of
> cryptographic/computer science) or precommiting to a nonce per public
> key (e.g. single use public keys), you cannot control how a DSA nonce
> was generated in the verifier in a way that would prevent equivalent
> but not identical signatures.
>
> (I believe there was some P.O.S. altcoin that was vulnerable because
> of precisely the above too? thinking specifying a deterministic signer
> would prevent someone from grinding signatures to improve their mining
> odds... there are signature systems which are naturally
> randomness-free: most hash based signatures and pairing short
> signatures are two examples that come to mind... but not DSA, schnorr,
> or any of their derivatives).



From pieter.wuille at gmail.com  Sat Jul 19 14:46:07 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 19 Jul 2014 16:46:07 +0200
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
Message-ID: <CAPg+sBiUXuaSH8AAx2XzsvkDgzbE6Fz89jpx=y35vuRoezOU=w@mail.gmail.com>

On Jul 18, 2014 4:56 PM, "Wladimir" <laanwj at gmail.com> wrote:
>
> On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:
> > The rationale doesn't seem to apply to rule #4, what's so special about
that
> > one?
>
> > 4. Non-push operations in scriptSig Any non-push operation in a
scriptSig invalidates it.
>
> Having non-push operations in the scriptSig is a source of
> malleability, as there can be multiple sequences of opcodes that
> evaluate to the same result.

Well yes, but that is true for each of the rules and is already covered by
the previous specification in BIP62. Making it mandatory even for old
transaction does not really protect much against malleability as there are
several other sources of malleability that cannot be made mandatory in old
transactions left.

The reason for including #4 is just "allowing this does not benefit anyone".

-- 
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140719/cc74f9a6/attachment.html>

From voisine at gmail.com  Sat Jul 19 19:08:13 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Sat, 19 Jul 2014 12:08:13 -0700
Subject: [Bitcoin-development] Small update to BIP 62
In-Reply-To: <CAAS2fgQGF2d98ciMKkE70bqy01mANPhDtamYroeHOZrfML7rMQ@mail.gmail.com>
References: <CAPg+sBiTURdRAZbyk3guF5YzAAQebo8yY_TuXHUKYDEdLjDUdQ@mail.gmail.com>
	<CANEZrP3fA3gZ5u6yViBZpdTYxyFvZT=uOTDEnL797OueXf-16g@mail.gmail.com>
	<CA+s+GJAd00ba7SzoUYeGvTOoHRiysXtYmx4Cnq8xQLXZx_VwyQ@mail.gmail.com>
	<CACq0ZD6BmTB_jwE9L0_zrWgVckb=LFL61fow1kuTSnjurbsq9A@mail.gmail.com>
	<CAAS2fgSwzx7M9NLjoOgfAgQT2cHmUWYD8hBmwHRRhgG9UgmmhA@mail.gmail.com>
	<CACq0ZD4GwDZbEK4oE_BJxN-nDTb_4+hhDFZ0T7xGAi8v3G349A@mail.gmail.com>
	<CAAS2fgQGF2d98ciMKkE70bqy01mANPhDtamYroeHOZrfML7rMQ@mail.gmail.com>
Message-ID: <CACq0ZD73OsGjZgVnvW_vqabwpaXon3=XN30JVXTMimH1-JtWDA@mail.gmail.com>

Thanks g.maxwell, your explanation of *why* you can't just generate k
in a way that the verifier can duplicate is really helpful. This also
servers as a great illustration why engineers should never try to
designing their own crypto protocols! I knew enough to know not try
that at least.

Aaron Voisine
breadwallet.com


On Fri, Jul 18, 2014 at 11:56 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Fri, Jul 18, 2014 at 9:38 PM, Aaron Voisine <voisine at gmail.com> wrote:
>> Well, you could always create a transaction with a different signature
>> hash, say, by changing something trivial like nLockTime, or changing
>> the order of inputs or outputs. Is that what you're talking about? Or
>> is there some sophistry I'm ignorant of having to do with the elliptic
>> curve math in the signature itself?
>
> No, though thats true too. I was talking about the properties of the DSA nonce:
>
> An attacker is not obligated to follow your protocol unless you can
> prevent him. You can _say_ use derandomized DSA all you like, but he
> can just not do so, there is no (reasonable) way to prove you're using
> a particular nonce generation scheme without revealing the private key
> in the process. The verifier cannot know the nonce or he can trivially
> recover your private key thus he can't just repeat the computation
> (well, plus if you're using RFC6979 the computation includes the
> private key), so short of a very fancy ZKP (stuff at the forefront of
> cryptographic/computer science) or precommiting to a nonce per public
> key (e.g. single use public keys), you cannot control how a DSA nonce
> was generated in the verifier in a way that would prevent equivalent
> but not identical signatures.
>
> (I believe there was some P.O.S. altcoin that was vulnerable because
> of precisely the above too? thinking specifying a deterministic signer
> would prevent someone from grinding signatures to improve their mining
> odds... there are signature systems which are naturally
> randomness-free: most hash based signatures and pairing short
> signatures are two examples that come to mind... but not DSA, schnorr,
> or any of their derivatives).



From keziahw at gmail.com  Sun Jul 20 21:01:22 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Sun, 20 Jul 2014 14:01:22 -0700
Subject: [Bitcoin-development] Trickle and transaction propogation
Message-ID: <CA+iPb=GVyfYAjSRitt8LW-LLvi8U5F=noQ9igOQKmHyi8-DACA@mail.gmail.com>

The inv trickling mechanism currently serves two purposes:
- protect casual users' privacy by slightly obscuring a tx's originating node
- reduce invs unnecessarily sent both directions for a connection
It has some drawbacks:
- it slows transaction propagation
- it delays knowledge between two nodes of what txes are mutually known
These drawbacks will be especially costly once optimizations based on
mutually-known transactions are available (in progress, see "sparse
blocks" thread).

Both of the benefits of trickling can be achieved more efficiently and
without the costs to transaction propagation and mutual transaction
knowledge.

Privacy: trickling helps hide the origin of 3/4 of the transactions a
node is pushing by preventing most of the node's neighbors from seeing
the transactions from that node right away; by the time a peer becomes
the trickle node, it may have received the same inv from another of
its peers.
This staggering of introduction of new invs to the network could be
made more effective by scheduling staggered pushes of wallet
transactions to each peer in a structure similar to mapAskFor.
This does have the drawback that someone who has established multiple
connections to a node can observe that some invs are pushed at
different times, suggesting they are in the stagger set. I don't see
any straightforward way to remedy this, but trickling is also
vulnerable to sybil attacks, and floods 1/4 of its transactions
immediately anyway -- so I think staggered push would be an overall
privacy improvement.
Likelihood of a partial sybil obtaining inv origin information could
be reduced by a policy of ending staggering and pushing to all peers
once another peer has received the tx from elsewhere and inved the
transaction back to the original node; if the staggering is
sufficiently slow, only one or two nodes would receive the initial
push to the network and after that the inv would be treated
indistinguishably from if it originated externally.

Redundant invs: without trickling, when two nodes receive transactions
at around the same time they may each send each other an inv before
receiving the other's. Trickling reduces this by giving all
non-trickleSend nodes a chance to send first. Thus just eliminating
trickling would at most double inv traffic. Although invs are small
they are numerous, being the only common message potentially sent from
every node to all its neighbors.
A more efficient solution to the who-sends-first problem would be for
connections to have directional parity:
- a node initiating a connection would announce its parity (even or odd)
- an inv is sent right away to peers with matching parity, but only
sent against parity if a certain timeout has elapsed without the inv
being received
In order to allow for nodes with few peers (i.e. -connect) or nodes on
local connections that might as well flood everything to each other,
parity could be specified as a mask (fEven << 1 & fOdd). Peers from
pre-directional-parity versions can be treated as having the mask
fully set.

Both push staggering and directional parity admit simple
implementations. The specific staggering delay distribution would need
some thought; it could be set slower than the typical trickle cycle
period for better than current privacy, since general transaction
propagation would not impeded by heavy staggering. What do you think
of this approach? Any gotchas/improvements/alternatives?



From mike at plan99.net  Sun Jul 20 22:02:39 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 21 Jul 2014 00:02:39 +0200
Subject: [Bitcoin-development] Trickle and transaction propogation
In-Reply-To: <CA+iPb=GVyfYAjSRitt8LW-LLvi8U5F=noQ9igOQKmHyi8-DACA@mail.gmail.com>
References: <CA+iPb=GVyfYAjSRitt8LW-LLvi8U5F=noQ9igOQKmHyi8-DACA@mail.gmail.com>
Message-ID: <CANEZrP164g19q1_vGszcwesSS_xf836XO1SZ2+AOzjzAN-GC5Q@mail.gmail.com>

No comment on the proposal itself, which sounds reasonable but I didn't
think about it much yet. Instead, just an observation that by now most
users are not using the Core wallet anymore, but rather use either SPV
wallets or more centralised blockchain/coinbase style gateways to the
network.

SPV wallets don't relay thus you know any tx sent from them must be
originated by that wallet. Centralised services accept tx submissions via
SSL and can easily improve their users privacy by sending transactions out
via a node that isn't listening.

So IMHO we should be optimising the network for the common use case rather
than stuff that only helps Core wallet users, and actively slows down
everyone else. If your proposed techniques let us have our cake and eat it,
fantastic, otherwise I still think we should remove tx trickling.



On Sun, Jul 20, 2014 at 11:01 PM, Kaz Wesley <keziahw at gmail.com> wrote:

> The inv trickling mechanism currently serves two purposes:
> - protect casual users' privacy by slightly obscuring a tx's originating
> node
> - reduce invs unnecessarily sent both directions for a connection
> It has some drawbacks:
> - it slows transaction propagation
> - it delays knowledge between two nodes of what txes are mutually known
> These drawbacks will be especially costly once optimizations based on
> mutually-known transactions are available (in progress, see "sparse
> blocks" thread).
>
> Both of the benefits of trickling can be achieved more efficiently and
> without the costs to transaction propagation and mutual transaction
> knowledge.
>
> Privacy: trickling helps hide the origin of 3/4 of the transactions a
> node is pushing by preventing most of the node's neighbors from seeing
> the transactions from that node right away; by the time a peer becomes
> the trickle node, it may have received the same inv from another of
> its peers.
> This staggering of introduction of new invs to the network could be
> made more effective by scheduling staggered pushes of wallet
> transactions to each peer in a structure similar to mapAskFor.
> This does have the drawback that someone who has established multiple
> connections to a node can observe that some invs are pushed at
> different times, suggesting they are in the stagger set. I don't see
> any straightforward way to remedy this, but trickling is also
> vulnerable to sybil attacks, and floods 1/4 of its transactions
> immediately anyway -- so I think staggered push would be an overall
> privacy improvement.
> Likelihood of a partial sybil obtaining inv origin information could
> be reduced by a policy of ending staggering and pushing to all peers
> once another peer has received the tx from elsewhere and inved the
> transaction back to the original node; if the staggering is
> sufficiently slow, only one or two nodes would receive the initial
> push to the network and after that the inv would be treated
> indistinguishably from if it originated externally.
>
> Redundant invs: without trickling, when two nodes receive transactions
> at around the same time they may each send each other an inv before
> receiving the other's. Trickling reduces this by giving all
> non-trickleSend nodes a chance to send first. Thus just eliminating
> trickling would at most double inv traffic. Although invs are small
> they are numerous, being the only common message potentially sent from
> every node to all its neighbors.
> A more efficient solution to the who-sends-first problem would be for
> connections to have directional parity:
> - a node initiating a connection would announce its parity (even or odd)
> - an inv is sent right away to peers with matching parity, but only
> sent against parity if a certain timeout has elapsed without the inv
> being received
> In order to allow for nodes with few peers (i.e. -connect) or nodes on
> local connections that might as well flood everything to each other,
> parity could be specified as a mask (fEven << 1 & fOdd). Peers from
> pre-directional-parity versions can be treated as having the mask
> fully set.
>
> Both push staggering and directional parity admit simple
> implementations. The specific staggering delay distribution would need
> some thought; it could be set slower than the typical trickle cycle
> period for better than current privacy, since general transaction
> propagation would not impeded by heavy staggering. What do you think
> of this approach? Any gotchas/improvements/alternatives?
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140721/840d37ff/attachment.html>

From laanwj at gmail.com  Mon Jul 21 13:43:42 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 21 Jul 2014 15:43:42 +0200
Subject: [Bitcoin-development] Policy for DNS seeds
Message-ID: <CA+s+GJA1aLqOamoYTHRNsF3bGb=pKwNHXGYzQ6GSTgQnic+yCA@mail.gmail.com>

We've established a few basic rules for the DNS seeds as used in the
Bitcoin Core software. See below.

If you run one of the DNS seeds please reply to this and let us know
whether you agree to these terms. if you think some requirements are
unreasonable let us know too. If we haven't heard from you by
2014-08-04 we will remove your DNS seed from the list of defaults.

Expectations for DNSSeed operators
====================================

Bitcoin Core attempts to minimize the level of trust in DNS seeds,
but DNS seeds still pose a small amount of risk for the network.
Other implementations of Bitcoin software may also use the same
seeds and may be more exposed. In light of this exposure this
document establishes some basic expectations for the expectations
for the operation of dnsseeds.

0. A DNSseed operating organization or person is expected
to follow good host security practices and maintain control of
their serving infrastructure and not sell or transfer control of their
infrastructure. Any hosting services contracted by the operator are
equally expected to uphold these expectations.

1. The DNSseed results must consist exclusively of fairly selected and
functioning Bitcoin nodes from the public network to the best of the
operators understanding and capability.

2. For the avoidance of doubt, the results may be randomized but must not
single-out any group of hosts to receive different results unless due to an
urgent technical necessity and disclosed.

3. The results may not be served with a DNS TTL of less than one minute.

4. Any logging of DNS queries should be only that which is necessary
for the operation of the service or urgent health of the Bitcoin
network and must not be retained longer than necessary or disclosed
to any third party.

5. Information gathered as a result of the operators node-spidering
(not from DNS queries) may be freely published or retained, but only
if this data was not made more complete by biasing node connectivity
(a violation of expectation (1)).

6. Operators are encouraged, but not required, to publicly document
the details of their operating practices.

7. A reachable email contact address must be published for inquiries
related to the DNSseed operation.

If these expectations cannot be satisfied the operator should
discontinue providing services and contact the active Bitcoin
Core development team as well as posting on bitcoin-development.

Behavior outside of these expectations may be reasonable in some
situations but should be discussed in public in advance.

========

See
https://github.com/bitcoin/bitcoin/pull/4566

Wladimir



From decker.christian at gmail.com  Mon Jul 21 13:53:51 2014
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 21 Jul 2014 14:53:51 +0100
Subject: [Bitcoin-development] Policy for DNS seeds
In-Reply-To: <CA+s+GJA1aLqOamoYTHRNsF3bGb=pKwNHXGYzQ6GSTgQnic+yCA@mail.gmail.com>
References: <CA+s+GJA1aLqOamoYTHRNsF3bGb=pKwNHXGYzQ6GSTgQnic+yCA@mail.gmail.com>
Message-ID: <CALxbBHW1kf6gDoO22GETwb6kRJ92qxS6MSNx64+kT2TiwH5iTQ@mail.gmail.com>

How about research projects into node distribution? Specifically I
wonder whether the collection and analysis of DNS query origin is
allowed when queries are anonymized and aggregated. This would prevent
the identification of a single user, which I assume is the rationale
for point 4.

Other than that I'm perfectly fine with accepting the rules for
seed.bitcoinstats.com

Regards,
Christian
--
Christian Decker


On Mon, Jul 21, 2014 at 2:43 PM, Wladimir <laanwj at gmail.com> wrote:
> We've established a few basic rules for the DNS seeds as used in the
> Bitcoin Core software. See below.
>
> If you run one of the DNS seeds please reply to this and let us know
> whether you agree to these terms. if you think some requirements are
> unreasonable let us know too. If we haven't heard from you by
> 2014-08-04 we will remove your DNS seed from the list of defaults.
>
> Expectations for DNSSeed operators
> ====================================
>
> Bitcoin Core attempts to minimize the level of trust in DNS seeds,
> but DNS seeds still pose a small amount of risk for the network.
> Other implementations of Bitcoin software may also use the same
> seeds and may be more exposed. In light of this exposure this
> document establishes some basic expectations for the expectations
> for the operation of dnsseeds.
>
> 0. A DNSseed operating organization or person is expected
> to follow good host security practices and maintain control of
> their serving infrastructure and not sell or transfer control of their
> infrastructure. Any hosting services contracted by the operator are
> equally expected to uphold these expectations.
>
> 1. The DNSseed results must consist exclusively of fairly selected and
> functioning Bitcoin nodes from the public network to the best of the
> operators understanding and capability.
>
> 2. For the avoidance of doubt, the results may be randomized but must not
> single-out any group of hosts to receive different results unless due to an
> urgent technical necessity and disclosed.
>
> 3. The results may not be served with a DNS TTL of less than one minute.
>
> 4. Any logging of DNS queries should be only that which is necessary
> for the operation of the service or urgent health of the Bitcoin
> network and must not be retained longer than necessary or disclosed
> to any third party.
>
> 5. Information gathered as a result of the operators node-spidering
> (not from DNS queries) may be freely published or retained, but only
> if this data was not made more complete by biasing node connectivity
> (a violation of expectation (1)).
>
> 6. Operators are encouraged, but not required, to publicly document
> the details of their operating practices.
>
> 7. A reachable email contact address must be published for inquiries
> related to the DNSseed operation.
>
> If these expectations cannot be satisfied the operator should
> discontinue providing services and contact the active Bitcoin
> Core development team as well as posting on bitcoin-development.
>
> Behavior outside of these expectations may be reasonable in some
> situations but should be discussed in public in advance.
>
> ========
>
> See
> https://github.com/bitcoin/bitcoin/pull/4566
>
> Wladimir



From sergiolerner at certimix.com  Mon Jul 21 17:30:34 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Mon, 21 Jul 2014 14:30:34 -0300
Subject: [Bitcoin-development] Question on creating test cases for
	block.CheckBlock()
Message-ID: <53CD4E3A.1000605@certimix.com>

I'm working on a BIP which needs to modify the block acceptance rules. I
have two ways of testing:

- Mining blocks on the testnet
- Creating test cases for Bitcoin Core.

I want to create those test cases for block.CheckBlock(), which involves
verifying 100 dynamically generated blocks.
What is the state of the blockchain when a test case is executed ? Is is
configured for the regtest, testnet3 or mainnet? What blocks are in the
blockchain? Only the genesis block?

checkblock_tests.cpp seems to be the only test case for CheckBlock() and
it assumes the mainnet is configured.
I need to use the regtest so I can create blocks of difficulty 1.

Best regards and thank you in advance,




From pete at petertodd.org  Mon Jul 21 19:24:01 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 21 Jul 2014 15:24:01 -0400
Subject: [Bitcoin-development] Policy for DNS seeds
In-Reply-To: <CA+s+GJA1aLqOamoYTHRNsF3bGb=pKwNHXGYzQ6GSTgQnic+yCA@mail.gmail.com>
References: <CA+s+GJA1aLqOamoYTHRNsF3bGb=pKwNHXGYzQ6GSTgQnic+yCA@mail.gmail.com>
Message-ID: <20140721192401.GA16764@petertodd.org>

On Mon, Jul 21, 2014 at 03:43:42PM +0200, Wladimir wrote:
> We've established a few basic rules for the DNS seeds as used in the
> Bitcoin Core software. See below.
> 
> If you run one of the DNS seeds please reply to this and let us know
> whether you agree to these terms. if you think some requirements are
> unreasonable let us know too. If we haven't heard from you by
> 2014-08-04 we will remove your DNS seed from the list of defaults.
> 
> Expectations for DNSSeed operators
> ====================================
> 
> Bitcoin Core attempts to minimize the level of trust in DNS seeds,
> but DNS seeds still pose a small amount of risk for the network.
> Other implementations of Bitcoin software may also use the same
> seeds and may be more exposed. In light of this exposure this
> document establishes some basic expectations for the expectations
> for the operation of dnsseeds.

Might be worthwhile to also write an "Expectations for DNSSeed users"
outlining what security properties the seeds actually have, and what
kind of attacks are possible. Many users would be better served with
seeds that offer authenticated and encrypted connections to the seeds
for instance. (esp. if they're using authed/encrypted connections to
nodes, e.g. Tor hidden services)


> 1. The DNSseed results must consist exclusively of fairly selected and
> functioning Bitcoin nodes from the public network to the best of the
> operators understanding and capability.

Along the lines of my above point, for Bitcoin Core users of the
DNSSeeds what constitutes a "functioning" Bitcoin node is much more
broad than what other users might need.


> 2. For the avoidance of doubt, the results may be randomized but must not
> single-out any group of hosts to receive different results unless due to an
> urgent technical necessity and disclosed.

Note that singling out a group of hosts to receive different results
with DNS is especially difficult as you'll be usually singling out
different ISP's rather than hosts themselves. That said if we ever start
operating HTTPS or similar seeds this expectation will become even more
relevant for them.


> If these expectations cannot be satisfied the operator should
> discontinue providing services and contact the active Bitcoin
> Core development team as well as posting on bitcoin-development.
> 
> Behavior outside of these expectations may be reasonable in some
> situations but should be discussed in public in advance.

I'll let others refine the exact wording. but I broadly agree with these
rules.

For the testnet DNS seeds - IE my one - my thoughts are the rules should
be identical. Most of the above is related to privacy rather than
security, which apply equally well on testnet. While there have been
suggestions to use the testnet seeds for testing vulnerabilities, the
public discussion clause should suffice to allow those exceptions. I
also suspect that vulnerabilities are likely to be dismissed by a large
part of the community if demonstrated with DNSSeed operator
co-operation.

-- 
'peter'[:-1]@petertodd.org
00000000000000003dcfcd420fbf9e5b6bdab43ac772960351475dec125382ef
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140721/9c518241/attachment.sig>

From gmaxwell at gmail.com  Mon Jul 21 20:19:19 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 21 Jul 2014 13:19:19 -0700
Subject: [Bitcoin-development] Policy for DNS seeds
In-Reply-To: <20140721192401.GA16764@petertodd.org>
References: <CA+s+GJA1aLqOamoYTHRNsF3bGb=pKwNHXGYzQ6GSTgQnic+yCA@mail.gmail.com>
	<20140721192401.GA16764@petertodd.org>
Message-ID: <CAAS2fgQsq9AdAsZ09nbU9j2r=atL4KUuNNUYuc+ZTPKJLXScWQ@mail.gmail.com>

On Mon, Jul 21, 2014 at 12:24 PM, Peter Todd <pete at petertodd.org> wrote:
> Might be worthwhile to also write an "Expectations for DNSSeed users"
> outlining what security properties the seeds actually have, and what
> kind of attacks are possible.

Agreed.  I've seen some amount of use of dnsseeds which I would
consider inadvisable considering their weakness.

> Many users would be better served with
> seeds that offer authenticated and encrypted connections to the seeds
> for instance. (esp. if they're using authed/encrypted connections to
> nodes, e.g. Tor hidden services)

Also agreed, we ought to have a separate onionseed process for hosts
which can reach hidden services which would be inherently
authenticated and somewhat more anonymous. The existing introduction
method already doesn't work well for onlynet=onion hosts, so that
would be a good place to start.

>> 1. The DNSseed results must consist exclusively of fairly selected and
>> functioning Bitcoin nodes from the public network to the best of the
>> operators understanding and capability.
>
> Along the lines of my above point, for Bitcoin Core users of the
> DNSSeeds what constitutes a "functioning" Bitcoin node is much more
> broad than what other users might need.

I was deliberately vague here in that I'm trying to avoid foreclosing
reasonable activities like omitting nodes which are uselessly slow,
diverged from the network, or running very old software.  The test I'm
suggesting is that if "why am I doing this" is "to connect users to
functioning nodes" then it's probably okay, but if its to achieve some
other end? probably not.

> Note that singling out a group of hosts to receive different results
> with DNS is especially difficult as you'll be usually singling out
> different ISP's rather than hosts themselves. That said if we ever start
> operating HTTPS or similar seeds this expectation will become even more
> relevant for them.

Yes, this is one of the reasons we use DNS (and also one of the
reasons the document suggests a non-zero minimum ttl)... but belt and
suspenders, even though technical measures are protective here it's
good to make it clear that this isn't acceptable.

> While there have been
> suggestions to use the testnet seeds for testing vulnerabilities, the
> public discussion clause should suffice to allow those exceptions.

Yep. That was the intent. (well not testnet, but the notion that if
there really were a good reason to do something else a discussion
should cover it)



From mike at plan99.net  Tue Jul 22 11:13:50 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 22 Jul 2014 13:13:50 +0200
Subject: [Bitcoin-development] Question on creating test cases for
	block.CheckBlock()
In-Reply-To: <53CD4E3A.1000605@certimix.com>
References: <53CD4E3A.1000605@certimix.com>
Message-ID: <CANEZrP3q6QdVH1P0_FyOkE6SzG338pAGJ6NzDCEj52bXwnW-Sg@mail.gmail.com>

There is no infrastructure for writing block chain unit tests
unfortunately. Last time I tried to fix this I ended up going down a rabbit
hole - Bitcoin wasn't written to be a testable codebase and as a result
reinitialising it from scratch is rather difficult (there are lots of
global variables that have to be reset to particular states and no real
list of where they are).

Instead what I ended up doing is extending the pull tester. This is a
bitcoinj based app (BitcoindComparisonTool in the codebase) which builds a
regtest chain and submits it to a local regtest node. It tests things like
reorgs and various rules. It speaks to the node only via P2P so how easy it
is to verify your BIP works will depend on that. Also the code needs
cleaning up, there's a lot of copy/paste coding going on in there.




On Mon, Jul 21, 2014 at 7:30 PM, Sergio Lerner <sergiolerner at certimix.com>
wrote:

> I'm working on a BIP which needs to modify the block acceptance rules. I
> have two ways of testing:
>
> - Mining blocks on the testnet
> - Creating test cases for Bitcoin Core.
>
> I want to create those test cases for block.CheckBlock(), which involves
> verifying 100 dynamically generated blocks.
> What is the state of the blockchain when a test case is executed ? Is is
> configured for the regtest, testnet3 or mainnet? What blocks are in the
> blockchain? Only the genesis block?
>
> checkblock_tests.cpp seems to be the only test case for CheckBlock() and
> it assumes the mainnet is configured.
> I need to use the regtest so I can create blocks of difficulty 1.
>
> Best regards and thank you in advance,
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140722/e9c41294/attachment.html>

From bitcoin-list at bluematt.me  Tue Jul 22 20:01:45 2014
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 22 Jul 2014 20:01:45 +0000
Subject: [Bitcoin-development] Policy for DNS seeds
In-Reply-To: <CALxbBHW1kf6gDoO22GETwb6kRJ92qxS6MSNx64+kT2TiwH5iTQ@mail.gmail.com>
References: <CA+s+GJA1aLqOamoYTHRNsF3bGb=pKwNHXGYzQ6GSTgQnic+yCA@mail.gmail.com>
	<CALxbBHW1kf6gDoO22GETwb6kRJ92qxS6MSNx64+kT2TiwH5iTQ@mail.gmail.com>
Message-ID: <53CEC329.1020405@bluematt.me>

Absolutely not. Time and time again we've seen "anonymized" data sets
that dont work out so well. I'm sure its possible to do but there are
too many factors and we dont want to succumb to this.

Also, these generally look good (and essentially the same as what had
been a gentleman's agreement for those who read IRC actively, the
purpose of codifying this is essentially that we ended up adding a lot
of DNS Seeds run by people who dont follow development closely and/or
are not aware of the issues involved).

Thanks for writing this up,
Matt

On 07/21/14 13:53, Christian Decker wrote:
> How about research projects into node distribution? Specifically I
> wonder whether the collection and analysis of DNS query origin is
> allowed when queries are anonymized and aggregated. This would prevent
> the identification of a single user, which I assume is the rationale
> for point 4.
> 
> Other than that I'm perfectly fine with accepting the rules for
> seed.bitcoinstats.com
> 
> Regards,
> Christian
> --
> Christian Decker
> 
> 
> On Mon, Jul 21, 2014 at 2:43 PM, Wladimir <laanwj at gmail.com> wrote:
>> We've established a few basic rules for the DNS seeds as used in the
>> Bitcoin Core software. See below.
>>
>> If you run one of the DNS seeds please reply to this and let us know
>> whether you agree to these terms. if you think some requirements are
>> unreasonable let us know too. If we haven't heard from you by
>> 2014-08-04 we will remove your DNS seed from the list of defaults.
>>
>> Expectations for DNSSeed operators
>> ====================================
>>
>> Bitcoin Core attempts to minimize the level of trust in DNS seeds,
>> but DNS seeds still pose a small amount of risk for the network.
>> Other implementations of Bitcoin software may also use the same
>> seeds and may be more exposed. In light of this exposure this
>> document establishes some basic expectations for the expectations
>> for the operation of dnsseeds.
>>
>> 0. A DNSseed operating organization or person is expected
>> to follow good host security practices and maintain control of
>> their serving infrastructure and not sell or transfer control of their
>> infrastructure. Any hosting services contracted by the operator are
>> equally expected to uphold these expectations.
>>
>> 1. The DNSseed results must consist exclusively of fairly selected and
>> functioning Bitcoin nodes from the public network to the best of the
>> operators understanding and capability.
>>
>> 2. For the avoidance of doubt, the results may be randomized but must not
>> single-out any group of hosts to receive different results unless due to an
>> urgent technical necessity and disclosed.
>>
>> 3. The results may not be served with a DNS TTL of less than one minute.
>>
>> 4. Any logging of DNS queries should be only that which is necessary
>> for the operation of the service or urgent health of the Bitcoin
>> network and must not be retained longer than necessary or disclosed
>> to any third party.
>>
>> 5. Information gathered as a result of the operators node-spidering
>> (not from DNS queries) may be freely published or retained, but only
>> if this data was not made more complete by biasing node connectivity
>> (a violation of expectation (1)).
>>
>> 6. Operators are encouraged, but not required, to publicly document
>> the details of their operating practices.
>>
>> 7. A reachable email contact address must be published for inquiries
>> related to the DNSseed operation.
>>
>> If these expectations cannot be satisfied the operator should
>> discontinue providing services and contact the active Bitcoin
>> Core development team as well as posting on bitcoin-development.
>>
>> Behavior outside of these expectations may be reasonable in some
>> situations but should be discussed in public in advance.
>>
>> ========
>>
>> See
>> https://github.com/bitcoin/bitcoin/pull/4566
>>
>> Wladimir
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From ron.ohara54 at gmail.com  Fri Jul 25 01:14:20 2014
From: ron.ohara54 at gmail.com (Ron OHara)
Date: Fri, 25 Jul 2014 02:14:20 +0100
Subject: [Bitcoin-development] Time
Message-ID: <53D1AF6C.7010802@gmail.com>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I thought I should shortcut my research by asking a direct question here.

As I understand it, the blockchain actually provides an extra piece of
reliable data that is not being exploited by applications.

Which data?  The time.   In this case 'the time' as agreed by >50% of
the participants, where those participants have a strong financial
incentive to keep that 'time' fairly accurate. (+/- about 10 minutes)

Is this a reasonable understanding of 'time'? ... aka timestamps on the
block

Ok... 'time' on the blockchain could be 'gamed' ... but with great
difficulty. An application presented with a fake blockchain can use
quite a few heuristics to test the 'validity' of the block chain.
It can review the usual cryptographic proofs, and check that difficulty
is growing/declining only in a realistic manner up to the most recent
block. Even use some arbitrary test like difficulty > 10,000,000,000 
... on the presumption that any less means that the Bitcoin system has
failed massively from where it currently is and has become an unreliable
time source.

Reliable 'time' has been impossible up until now - because you need to
trust the time source, and that can always be faked.  Using the
blockchain as an approximate time source gives you a world wide
consensus without direct trust of any player.

So if this presumption is correct, then we can now build time capsule
applications that can not be tricked into exposing their contents too
early by running them in a virtual environment with the wrong system time.

Is this right? or did miss I something fundamental?

Ron

- -- 
public identify: https://www.onename.io/ron_ohara
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.20 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJT0a9sAAoJEAla1VT1+xc2ONQH/0R09guSNNCxP36KziAjfcBc
JEhxMpIlqTTYEvNXaBmuPy4BN+IZQ9izgrW/cvlEJJNMmc5/VIBk83WZltmDwcKl
oo4MIdmp6vz984GWToyyLcLSEDT60UE9Hhe+U9RyF5J9kwbN8Uy4ozUHhFVP/0EL
q4O1V6ggPbHWgH4q8m8E9qWOlIFXCDgCjxpL8Ptxsk+UlBq2NWMiwTz6Tbc9KOB4
hOffzXCZV+DkwjFZD2Rc4rHaxw1yLuYr7DzmzwZbhRQclv9tZt9hoVaAT+RQpE1k
X7pi+zVzeMMng0bzUv8t/G+gq0gaelyV41MJQRparEXhnuYkgU7rAPKIQEG8qpc=
=T5fw
-----END PGP SIGNATURE-----




From voisine at gmail.com  Fri Jul 25 02:35:46 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Thu, 24 Jul 2014 19:35:46 -0700
Subject: [Bitcoin-development] Time
In-Reply-To: <53D1AF6C.7010802@gmail.com>
References: <53D1AF6C.7010802@gmail.com>
Message-ID: <CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>

The upcoming release of breadwallet uses the height of the blockchain to
enforce timed pin code lockouts for preventing an attacker from
quickly making multiple pin guesses. This prevents them changing the
devices system time to get around the lockout period.

Aaron

On Thursday, July 24, 2014, Ron OHara <ron.ohara54 at gmail.com> wrote:

>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> I thought I should shortcut my research by asking a direct question here.
>
> As I understand it, the blockchain actually provides an extra piece of
> reliable data that is not being exploited by applications.
>
> Which data?  The time.   In this case 'the time' as agreed by >50% of
> the participants, where those participants have a strong financial
> incentive to keep that 'time' fairly accurate. (+/- about 10 minutes)
>
> Is this a reasonable understanding of 'time'? ... aka timestamps on the
> block
>
> Ok... 'time' on the blockchain could be 'gamed' ... but with great
> difficulty. An application presented with a fake blockchain can use
> quite a few heuristics to test the 'validity' of the block chain.
> It can review the usual cryptographic proofs, and check that difficulty
> is growing/declining only in a realistic manner up to the most recent
> block. Even use some arbitrary test like difficulty > 10,000,000,000
> ... on the presumption that any less means that the Bitcoin system has
> failed massively from where it currently is and has become an unreliable
> time source.
>
> Reliable 'time' has been impossible up until now - because you need to
> trust the time source, and that can always be faked.  Using the
> blockchain as an approximate time source gives you a world wide
> consensus without direct trust of any player.
>
> So if this presumption is correct, then we can now build time capsule
> applications that can not be tricked into exposing their contents too
> early by running them in a virtual environment with the wrong system time.
>
> Is this right? or did miss I something fundamental?
>
> Ron
>
> - --
> public identify: https://www.onename.io/ron_ohara
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.20 (GNU/Linux)
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQEcBAEBAgAGBQJT0a9sAAoJEAla1VT1+xc2ONQH/0R09guSNNCxP36KziAjfcBc
> JEhxMpIlqTTYEvNXaBmuPy4BN+IZQ9izgrW/cvlEJJNMmc5/VIBk83WZltmDwcKl
> oo4MIdmp6vz984GWToyyLcLSEDT60UE9Hhe+U9RyF5J9kwbN8Uy4ozUHhFVP/0EL
> q4O1V6ggPbHWgH4q8m8E9qWOlIFXCDgCjxpL8Ptxsk+UlBq2NWMiwTz6Tbc9KOB4
> hOffzXCZV+DkwjFZD2Rc4rHaxw1yLuYr7DzmzwZbhRQclv9tZt9hoVaAT+RQpE1k
> X7pi+zVzeMMng0bzUv8t/G+gq0gaelyV41MJQRparEXhnuYkgU7rAPKIQEG8qpc=
> =T5fw
> -----END PGP SIGNATURE-----
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net <javascript:;>
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 

Aaron Voisine
breadwallet.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140724/aa8aca93/attachment.html>

From jgarzik at bitpay.com  Fri Jul 25 01:41:19 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 24 Jul 2014 21:41:19 -0400
Subject: [Bitcoin-development] Time
In-Reply-To: <53D1AF6C.7010802@gmail.com>
References: <53D1AF6C.7010802@gmail.com>
Message-ID: <CAJHLa0NhXdhANCY6rk81VYqUR-fPxe8b27Py08OfuyrqHUB-Tg@mail.gmail.com>

Miners are free to set the block's timestamp to whatever they please,
within a certain +/- time window.  Time might even go backwards a tiny
bit from the last block to the next block.


On Thu, Jul 24, 2014 at 9:14 PM, Ron OHara <ron.ohara54 at gmail.com> wrote:
>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> I thought I should shortcut my research by asking a direct question here.
>
> As I understand it, the blockchain actually provides an extra piece of
> reliable data that is not being exploited by applications.
>
> Which data?  The time.   In this case 'the time' as agreed by >50% of
> the participants, where those participants have a strong financial
> incentive to keep that 'time' fairly accurate. (+/- about 10 minutes)
>
> Is this a reasonable understanding of 'time'? ... aka timestamps on the
> block
>
> Ok... 'time' on the blockchain could be 'gamed' ... but with great
> difficulty. An application presented with a fake blockchain can use
> quite a few heuristics to test the 'validity' of the block chain.
> It can review the usual cryptographic proofs, and check that difficulty
> is growing/declining only in a realistic manner up to the most recent
> block. Even use some arbitrary test like difficulty > 10,000,000,000
> ... on the presumption that any less means that the Bitcoin system has
> failed massively from where it currently is and has become an unreliable
> time source.
>
> Reliable 'time' has been impossible up until now - because you need to
> trust the time source, and that can always be faked.  Using the
> blockchain as an approximate time source gives you a world wide
> consensus without direct trust of any player.
>
> So if this presumption is correct, then we can now build time capsule
> applications that can not be tricked into exposing their contents too
> early by running them in a virtual environment with the wrong system time.
>
> Is this right? or did miss I something fundamental?
>
> Ron
>
> - --
> public identify: https://www.onename.io/ron_ohara
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.20 (GNU/Linux)
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQEcBAEBAgAGBQJT0a9sAAoJEAla1VT1+xc2ONQH/0R09guSNNCxP36KziAjfcBc
> JEhxMpIlqTTYEvNXaBmuPy4BN+IZQ9izgrW/cvlEJJNMmc5/VIBk83WZltmDwcKl
> oo4MIdmp6vz984GWToyyLcLSEDT60UE9Hhe+U9RyF5J9kwbN8Uy4ozUHhFVP/0EL
> q4O1V6ggPbHWgH4q8m8E9qWOlIFXCDgCjxpL8Ptxsk+UlBq2NWMiwTz6Tbc9KOB4
> hOffzXCZV+DkwjFZD2Rc4rHaxw1yLuYr7DzmzwZbhRQclv9tZt9hoVaAT+RQpE1k
> X7pi+zVzeMMng0bzUv8t/G+gq0gaelyV41MJQRparEXhnuYkgU7rAPKIQEG8qpc=
> =T5fw
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gmaxwell at gmail.com  Fri Jul 25 02:39:41 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 24 Jul 2014 19:39:41 -0700
Subject: [Bitcoin-development] Time
In-Reply-To: <CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
Message-ID: <CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>

On Thu, Jul 24, 2014 at 7:35 PM, Aaron Voisine <voisine at gmail.com> wrote:
> The upcoming release of breadwallet uses the height of the blockchain to
> enforce timed pin code lockouts for preventing an attacker from quickly
> making multiple pin guesses. This prevents them changing the devices system
> time to get around the lockout period.

Is breadwallet tamper resistant & zero on tamper hardware? otherwise
this sounds like security theater.... I attach a debugger to the
process (or modify the program) and ignore the block sourced time.



From will.yager at gmail.com  Fri Jul 25 03:21:08 2014
From: will.yager at gmail.com (William Yager)
Date: Thu, 24 Jul 2014 23:21:08 -0400
Subject: [Bitcoin-development] Time
In-Reply-To: <CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
	<CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
Message-ID: <CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>

On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>
wrote:

>
> Is breadwallet tamper resistant & zero on tamper hardware? otherwise
> this sounds like security theater.... I attach a debugger to the
> process (or modify the program) and ignore the block sourced time.
>
>
It's an iOS application. I would imagine it is substantially more difficult
to attach to a process (which, at the very least, requires root, and
perhaps other things on iOS) than to convince the device to change its
system time.

That said, the security benefits might not be too substantial.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140724/b24595d2/attachment.html>

From voisine at gmail.com  Fri Jul 25 05:56:26 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Thu, 24 Jul 2014 22:56:26 -0700
Subject: [Bitcoin-development] Time
In-Reply-To: <CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
	<CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
	<CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>
Message-ID: <CACq0ZD4nCJ+dzUG+KV+eCxE2My+T4Acr4qy-Y6A-dFvuRG=Eaw@mail.gmail.com>

It's based on the block height, not the block's timestamp. If you have
access to the device and the phone itself is not pin locked, then you
can jailbreak it and get access to the wallet seed that way. A pin
locked device however is reasonably secure as the filesystem is
hardware aes encrypted to a combination of pin+uuid. This was just an
easy way to prevent multiple pin guesses by changing system time in
settings, so that isn't the weakest part of the security model.

Aaron Voisine
breadwallet.com


On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com> wrote:
> On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
>>
>>
>> Is breadwallet tamper resistant & zero on tamper hardware? otherwise
>> this sounds like security theater.... I attach a debugger to the
>> process (or modify the program) and ignore the block sourced time.
>>
>
> It's an iOS application. I would imagine it is substantially more difficult
> to attach to a process (which, at the very least, requires root, and perhaps
> other things on iOS) than to convince the device to change its system time.
>
> That said, the security benefits might not be too substantial.
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From mike at plan99.net  Fri Jul 25 10:26:11 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 25 Jul 2014 12:26:11 +0200
Subject: [Bitcoin-development] Time
In-Reply-To: <CACq0ZD4nCJ+dzUG+KV+eCxE2My+T4Acr4qy-Y6A-dFvuRG=Eaw@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
	<CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
	<CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>
	<CACq0ZD4nCJ+dzUG+KV+eCxE2My+T4Acr4qy-Y6A-dFvuRG=Eaw@mail.gmail.com>
Message-ID: <CANEZrP0pMA=LB=Mi9xj9YbJ83=0r6Xa4_6Ua+wpAtsg5OdS7Kw@mail.gmail.com>

Given that the speed at which the block chain advances is kind of
unpredictable, I'd think it might be better to just record the time to disk
when a PIN attempt is made and if you observe time going backwards, refuse
to allow more attempts until it's advanced past the previous attempt.


On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com> wrote:

> It's based on the block height, not the block's timestamp. If you have
> access to the device and the phone itself is not pin locked, then you
> can jailbreak it and get access to the wallet seed that way. A pin
> locked device however is reasonably secure as the filesystem is
> hardware aes encrypted to a combination of pin+uuid. This was just an
> easy way to prevent multiple pin guesses by changing system time in
> settings, so that isn't the weakest part of the security model.
>
> Aaron Voisine
> breadwallet.com
>
>
> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>
> wrote:
> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>
> > wrote:
> >>
> >>
> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise
> >> this sounds like security theater.... I attach a debugger to the
> >> process (or modify the program) and ignore the block sourced time.
> >>
> >
> > It's an iOS application. I would imagine it is substantially more
> difficult
> > to attach to a process (which, at the very least, requires root, and
> perhaps
> > other things on iOS) than to convince the device to change its system
> time.
> >
> > That said, the security benefits might not be too substantial.
> >
> >
> ------------------------------------------------------------------------------
> > Want fast and easy access to all the code in your enterprise? Index and
> > search up to 200,000 lines of code with a free copy of Black Duck
> > Code Sight - the same software that powers the world's largest code
> > search on Ohloh, the Black Duck Open Hub! Try it now.
> > http://p.sf.net/sfu/bds
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/006358cc/attachment.html>

From mike at plan99.net  Fri Jul 25 10:30:11 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 25 Jul 2014 12:30:11 +0200
Subject: [Bitcoin-development] Time
In-Reply-To: <53D1AF6C.7010802@gmail.com>
References: <53D1AF6C.7010802@gmail.com>
Message-ID: <CANEZrP2N6zf7RUtPzA+7-X5+UKBmrY-D_8Md+_=8nssoFNng9A@mail.gmail.com>

>
> Ok... 'time' on the blockchain could be 'gamed' ... but with great
> difficulty.


Unfortunately not: miners have in the past routinely gamed the timestamp in
order to use it as an extra nonce and squeeze some more gigahashes out of
their hardware/pool.

Also remember that currently the chain could be dominated by a coalition of
just two pools.


> An application presented with a fake blockchain can use
> quite a few heuristics to test the 'validity' of the block chain.
>

The app cannot tell if it was given a truncated chain. You could keep such
an app stuck in the past forever. This is often a problem.


> Reliable 'time' has been impossible up until now - because you need to
> trust the time source, and that can always be faked.  Using the
> blockchain as an approximate time source gives you a world wide
> consensus without direct trust of any player.
>

Much though I hate to be a party pooper, you could currently get
Bitcoin-level trusted time by just polling at least two or three
independent servers e.g. google.com, baidu.cn, yandex.ru    (they all serve
time via HTTPS headers).

If we crack the mining decentralisation problem then this argument becomes
a lot stronger, but for now ......


> So if this presumption is correct, then we can now build time capsule
> applications that can not be tricked into exposing their contents too
> early by running them in a virtual environment with the wrong system time.


If you have a tamper resistant execution environment (TXT, SGX, Flicker
etc) then yes. However trusted execution environments sometimes have tamper
resistant clocks as well for exactly this reason. So whether this technique
makes sense depends a lot on the details of your configuration, I think.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/dc127929/attachment.html>

From voisine at gmail.com  Fri Jul 25 14:45:40 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Fri, 25 Jul 2014 07:45:40 -0700
Subject: [Bitcoin-development] Time
In-Reply-To: <CANEZrP0pMA=LB=Mi9xj9YbJ83=0r6Xa4_6Ua+wpAtsg5OdS7Kw@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
	<CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
	<CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>
	<CACq0ZD4nCJ+dzUG+KV+eCxE2My+T4Acr4qy-Y6A-dFvuRG=Eaw@mail.gmail.com>
	<CANEZrP0pMA=LB=Mi9xj9YbJ83=0r6Xa4_6Ua+wpAtsg5OdS7Kw@mail.gmail.com>
Message-ID: <CACq0ZD7G1mKGW6ktraOhS7PuaJe_BRZzHpk0RsRmvwiPrpp_nA@mail.gmail.com>

The problem is if someone moves system time forward between app launches.
The lockout period doesn't have to be all that precise, it just makes you
wait for the next block, then 5, then 25, and so on. Using a well
known time server over https would also be a good option, but the wallet
app already has the chain height anyway.

On Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:

> Given that the speed at which the block chain advances is kind of
> unpredictable, I'd think it might be better to just record the time to disk
> when a PIN attempt is made and if you observe time going backwards, refuse
> to allow more attempts until it's advanced past the previous attempt.
>
>
> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com
> <javascript:_e(%7B%7D,'cvml','voisine at gmail.com');>> wrote:
>
>> It's based on the block height, not the block's timestamp. If you have
>> access to the device and the phone itself is not pin locked, then you
>> can jailbreak it and get access to the wallet seed that way. A pin
>> locked device however is reasonably secure as the filesystem is
>> hardware aes encrypted to a combination of pin+uuid. This was just an
>> easy way to prevent multiple pin guesses by changing system time in
>> settings, so that isn't the weakest part of the security model.
>>
>> Aaron Voisine
>> breadwallet.com
>>
>>
>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com
>> <javascript:_e(%7B%7D,'cvml','will.yager at gmail.com');>> wrote:
>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com
>> <javascript:_e(%7B%7D,'cvml','gmaxwell at gmail.com');>>
>> > wrote:
>> >>
>> >>
>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise
>> >> this sounds like security theater.... I attach a debugger to the
>> >> process (or modify the program) and ignore the block sourced time.
>> >>
>> >
>> > It's an iOS application. I would imagine it is substantially more
>> difficult
>> > to attach to a process (which, at the very least, requires root, and
>> perhaps
>> > other things on iOS) than to convince the device to change its system
>> time.
>> >
>> > That said, the security benefits might not be too substantial.
>> >
>> >
>> ------------------------------------------------------------------------------
>> > Want fast and easy access to all the code in your enterprise? Index and
>> > search up to 200,000 lines of code with a free copy of Black Duck
>> > Code Sight - the same software that powers the world's largest code
>> > search on Ohloh, the Black Duck Open Hub! Try it now.
>> > http://p.sf.net/sfu/bds
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> <javascript:_e(%7B%7D,'cvml','Bitcoin-development at lists.sourceforge.net');>
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> <javascript:_e(%7B%7D,'cvml','Bitcoin-development at lists.sourceforge.net');>
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>

-- 

Aaron Voisine
breadwallet.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/bab41a50/attachment.html>

From mike at plan99.net  Fri Jul 25 16:03:26 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 25 Jul 2014 18:03:26 +0200
Subject: [Bitcoin-development] Time
In-Reply-To: <CACq0ZD7G1mKGW6ktraOhS7PuaJe_BRZzHpk0RsRmvwiPrpp_nA@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
	<CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
	<CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>
	<CACq0ZD4nCJ+dzUG+KV+eCxE2My+T4Acr4qy-Y6A-dFvuRG=Eaw@mail.gmail.com>
	<CANEZrP0pMA=LB=Mi9xj9YbJ83=0r6Xa4_6Ua+wpAtsg5OdS7Kw@mail.gmail.com>
	<CACq0ZD7G1mKGW6ktraOhS7PuaJe_BRZzHpk0RsRmvwiPrpp_nA@mail.gmail.com>
Message-ID: <CANEZrP1wd7VirEisbgU7SJakSfnxmqbydfjab6Abz2-WKS90Ag@mail.gmail.com>

Sorry, you're right. I'd have hoped a delay that doubles on failure each
time up to some max would be good enough, relying on the p2p network to
unlock a PIN feels weird, but I can't really quantify why or what's wrong
with it so I guess it's just me :-)


On Fri, Jul 25, 2014 at 4:45 PM, Aaron Voisine <voisine at gmail.com> wrote:

> The problem is if someone moves system time forward between app launches.
> The lockout period doesn't have to be all that precise, it just makes you
> wait for the next block, then 5, then 25, and so on. Using a well
> known time server over https would also be a good option, but the wallet
> app already has the chain height anyway.
>
>
> On Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:
>
>> Given that the speed at which the block chain advances is kind of
>> unpredictable, I'd think it might be better to just record the time to disk
>> when a PIN attempt is made and if you observe time going backwards, refuse
>> to allow more attempts until it's advanced past the previous attempt.
>>
>>
>> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com> wrote:
>>
>>> It's based on the block height, not the block's timestamp. If you have
>>> access to the device and the phone itself is not pin locked, then you
>>> can jailbreak it and get access to the wallet seed that way. A pin
>>> locked device however is reasonably secure as the filesystem is
>>> hardware aes encrypted to a combination of pin+uuid. This was just an
>>> easy way to prevent multiple pin guesses by changing system time in
>>> settings, so that isn't the weakest part of the security model.
>>>
>>> Aaron Voisine
>>> breadwallet.com
>>>
>>>
>>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>
>>> wrote:
>>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>
>>> > wrote:
>>> >>
>>> >>
>>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise
>>> >> this sounds like security theater.... I attach a debugger to the
>>> >> process (or modify the program) and ignore the block sourced time.
>>> >>
>>> >
>>> > It's an iOS application. I would imagine it is substantially more
>>> difficult
>>> > to attach to a process (which, at the very least, requires root, and
>>> perhaps
>>> > other things on iOS) than to convince the device to change its system
>>> time.
>>> >
>>> > That said, the security benefits might not be too substantial.
>>> >
>>> >
>>> ------------------------------------------------------------------------------
>>> > Want fast and easy access to all the code in your enterprise? Index and
>>> > search up to 200,000 lines of code with a free copy of Black Duck
>>> > Code Sight - the same software that powers the world's largest code
>>> > search on Ohloh, the Black Duck Open Hub! Try it now.
>>> > http://p.sf.net/sfu/bds
>>> > _______________________________________________
>>> > Bitcoin-development mailing list
>>> > Bitcoin-development at lists.sourceforge.net
>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>> >
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Want fast and easy access to all the code in your enterprise? Index and
>>> search up to 200,000 lines of code with a free copy of Black Duck
>>> Code Sight - the same software that powers the world's largest code
>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>> http://p.sf.net/sfu/bds
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>
> --
>
> Aaron Voisine
> breadwallet.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/ef54b1e1/attachment.html>

From natanael.l at gmail.com  Fri Jul 25 16:22:46 2014
From: natanael.l at gmail.com (Natanael)
Date: Fri, 25 Jul 2014 18:22:46 +0200
Subject: [Bitcoin-development] Time
In-Reply-To: <CANEZrP1wd7VirEisbgU7SJakSfnxmqbydfjab6Abz2-WKS90Ag@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
	<CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
	<CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>
	<CACq0ZD4nCJ+dzUG+KV+eCxE2My+T4Acr4qy-Y6A-dFvuRG=Eaw@mail.gmail.com>
	<CANEZrP0pMA=LB=Mi9xj9YbJ83=0r6Xa4_6Ua+wpAtsg5OdS7Kw@mail.gmail.com>
	<CACq0ZD7G1mKGW6ktraOhS7PuaJe_BRZzHpk0RsRmvwiPrpp_nA@mail.gmail.com>
	<CANEZrP1wd7VirEisbgU7SJakSfnxmqbydfjab6Abz2-WKS90Ag@mail.gmail.com>
Message-ID: <CAAt2M18RTON97fS8yJR-NVOCH9Z_ZdDf1hVsFU-7EFv5ke9cYQ@mail.gmail.com>

Probably because the network isn't designed for interactive proofs. Most
interactive algoritms AFAICT requires that some machine holds a secret
state (or at least continuous and untampered state, but you still need to
verify you're falling to the right machine), otherwise the machine can be
mimicked and "rewound" to earlier states. Without a challenge-response that
can't be faked, you've got problems.

There's no trusted machines here that you can rely on. The certainty of
having the right blockchain is a statistical one over longer periods of
time, not enough for a PIN you want verified right now. So you can always
be shown an old copy, and if your node isn't up to date yet then it can
also be shown fake chains further into the future.

Maybe you could throw in some kind of Secure Multiparty Computation among
the miners to enable challenge-response, with state saved in the blockchain
(so it can't be rolled back), but that would be fragile. How do you select
what nodes may participate? How do you prevent the secret state from
leaking? And performance would be absolutely horrible, and reliability is a
huge problem.
Den 25 jul 2014 18:03 skrev "Mike Hearn" <mike at plan99.net>:

> Sorry, you're right. I'd have hoped a delay that doubles on failure each
> time up to some max would be good enough, relying on the p2p network to
> unlock a PIN feels weird, but I can't really quantify why or what's wrong
> with it so I guess it's just me :-)
>
>
> On Fri, Jul 25, 2014 at 4:45 PM, Aaron Voisine <voisine at gmail.com> wrote:
>
>> The problem is if someone moves system time forward between app launches.
>> The lockout period doesn't have to be all that precise, it just makes you
>> wait for the next block, then 5, then 25, and so on. Using a well
>> known time server over https would also be a good option, but the wallet
>> app already has the chain height anyway.
>>
>>
>> On Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:
>>
>>>  Given that the speed at which the block chain advances is kind of
>>> unpredictable, I'd think it might be better to just record the time to disk
>>> when a PIN attempt is made and if you observe time going backwards, refuse
>>> to allow more attempts until it's advanced past the previous attempt.
>>>
>>>
>>> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com>
>>> wrote:
>>>
>>>> It's based on the block height, not the block's timestamp. If you have
>>>> access to the device and the phone itself is not pin locked, then you
>>>> can jailbreak it and get access to the wallet seed that way. A pin
>>>> locked device however is reasonably secure as the filesystem is
>>>> hardware aes encrypted to a combination of pin+uuid. This was just an
>>>> easy way to prevent multiple pin guesses by changing system time in
>>>> settings, so that isn't the weakest part of the security model.
>>>>
>>>> Aaron Voisine
>>>> breadwallet.com
>>>>
>>>>
>>>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>
>>>> wrote:
>>>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com
>>>> >
>>>> > wrote:
>>>> >>
>>>> >>
>>>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise
>>>> >> this sounds like security theater.... I attach a debugger to the
>>>> >> process (or modify the program) and ignore the block sourced time.
>>>> >>
>>>> >
>>>> > It's an iOS application. I would imagine it is substantially more
>>>> difficult
>>>> > to attach to a process (which, at the very least, requires root, and
>>>> perhaps
>>>> > other things on iOS) than to convince the device to change its system
>>>> time.
>>>> >
>>>> > That said, the security benefits might not be too substantial.
>>>> >
>>>> >
>>>> ------------------------------------------------------------------------------
>>>> > Want fast and easy access to all the code in your enterprise? Index
>>>> and
>>>> > search up to 200,000 lines of code with a free copy of Black Duck
>>>> > Code Sight - the same software that powers the world's largest code
>>>> > search on Ohloh, the Black Duck Open Hub! Try it now.
>>>> > http://p.sf.net/sfu/bds
>>>> > _______________________________________________
>>>> > Bitcoin-development mailing list
>>>> > Bitcoin-development at lists.sourceforge.net
>>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>> >
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> Want fast and easy access to all the code in your enterprise? Index and
>>>> search up to 200,000 lines of code with a free copy of Black Duck
>>>> Code Sight - the same software that powers the world's largest code
>>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>> http://p.sf.net/sfu/bds
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>
>>>
>>
>> --
>>
>> Aaron Voisine
>> breadwallet.com
>>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/73dd20cb/attachment.html>

From voisine at gmail.com  Fri Jul 25 18:14:41 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Fri, 25 Jul 2014 11:14:41 -0700
Subject: [Bitcoin-development] Time
In-Reply-To: <CAAt2M18RTON97fS8yJR-NVOCH9Z_ZdDf1hVsFU-7EFv5ke9cYQ@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CACq0ZD56NuADphK-28zxR=dAPnZOPY4C0GO=zLdOhVxBpRKwoA@mail.gmail.com>
	<CAAS2fgSncktfkq0J23O04BWhtUD7V7OHCKAyuPbg7gJTKz-rTQ@mail.gmail.com>
	<CAG8oi1MNot6RruCu5cLSFAND5noZToPLvTqMP26bwKQGU_2C3g@mail.gmail.com>
	<CACq0ZD4nCJ+dzUG+KV+eCxE2My+T4Acr4qy-Y6A-dFvuRG=Eaw@mail.gmail.com>
	<CANEZrP0pMA=LB=Mi9xj9YbJ83=0r6Xa4_6Ua+wpAtsg5OdS7Kw@mail.gmail.com>
	<CACq0ZD7G1mKGW6ktraOhS7PuaJe_BRZzHpk0RsRmvwiPrpp_nA@mail.gmail.com>
	<CANEZrP1wd7VirEisbgU7SJakSfnxmqbydfjab6Abz2-WKS90Ag@mail.gmail.com>
	<CAAt2M18RTON97fS8yJR-NVOCH9Z_ZdDf1hVsFU-7EFv5ke9cYQ@mail.gmail.com>
Message-ID: <CACq0ZD77DkQWX2Bunb9y7-61Q0zO6X-brA6=Rd3H_+V1ZmBMnQ@mail.gmail.com>

Yes, if the wallet isn't up to date yet, it uses the highest estimated
block height from connected peers, but that could be gamed by
controlling the network. The app has blockchain checkpoints in it
though, so you couldn't truncate the chain starting point below that.
The worst case is that you get a 4-5 extra guesses, but as I
mentioned, it'd be easier to just jailbreak the phone if the phone
itself isn't using a system wide pin lock. I just though it was a fun
and convenient way to prevent the system time hack. The system pin is
what protects your wallet in the event of physical theft, and the app
pin is just for when you lend your phone to a friend for a few
minutes.

Aaron Voisine
breadwallet.com


On Fri, Jul 25, 2014 at 9:22 AM, Natanael <natanael.l at gmail.com> wrote:
> Probably because the network isn't designed for interactive proofs. Most
> interactive algoritms AFAICT requires that some machine holds a secret state
> (or at least continuous and untampered state, but you still need to verify
> you're falling to the right machine), otherwise the machine can be mimicked
> and "rewound" to earlier states. Without a challenge-response that can't be
> faked, you've got problems.
>
> There's no trusted machines here that you can rely on. The certainty of
> having the right blockchain is a statistical one over longer periods of
> time, not enough for a PIN you want verified right now. So you can always be
> shown an old copy, and if your node isn't up to date yet then it can also be
> shown fake chains further into the future.
>
> Maybe you could throw in some kind of Secure Multiparty Computation among
> the miners to enable challenge-response, with state saved in the blockchain
> (so it can't be rolled back), but that would be fragile. How do you select
> what nodes may participate? How do you prevent the secret state from
> leaking? And performance would be absolutely horrible, and reliability is a
> huge problem.
>
> Den 25 jul 2014 18:03 skrev "Mike Hearn" <mike at plan99.net>:
>
>> Sorry, you're right. I'd have hoped a delay that doubles on failure each
>> time up to some max would be good enough, relying on the p2p network to
>> unlock a PIN feels weird, but I can't really quantify why or what's wrong
>> with it so I guess it's just me :-)
>>
>>
>> On Fri, Jul 25, 2014 at 4:45 PM, Aaron Voisine <voisine at gmail.com> wrote:
>>>
>>> The problem is if someone moves system time forward between app launches.
>>> The lockout period doesn't have to be all that precise, it just makes you
>>> wait for the next block, then 5, then 25, and so on. Using a well known time
>>> server over https would also be a good option, but the wallet app already
>>> has the chain height anyway.
>>>
>>>
>>> On Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:
>>>>
>>>> Given that the speed at which the block chain advances is kind of
>>>> unpredictable, I'd think it might be better to just record the time to disk
>>>> when a PIN attempt is made and if you observe time going backwards, refuse
>>>> to allow more attempts until it's advanced past the previous attempt.
>>>>
>>>>
>>>> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com>
>>>> wrote:
>>>>>
>>>>> It's based on the block height, not the block's timestamp. If you have
>>>>> access to the device and the phone itself is not pin locked, then you
>>>>> can jailbreak it and get access to the wallet seed that way. A pin
>>>>> locked device however is reasonably secure as the filesystem is
>>>>> hardware aes encrypted to a combination of pin+uuid. This was just an
>>>>> easy way to prevent multiple pin guesses by changing system time in
>>>>> settings, so that isn't the weakest part of the security model.
>>>>>
>>>>> Aaron Voisine
>>>>> breadwallet.com
>>>>>
>>>>>
>>>>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>
>>>>> wrote:
>>>>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell
>>>>> > <gmaxwell at gmail.com>
>>>>> > wrote:
>>>>> >>
>>>>> >>
>>>>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise
>>>>> >> this sounds like security theater.... I attach a debugger to the
>>>>> >> process (or modify the program) and ignore the block sourced time.
>>>>> >>
>>>>> >
>>>>> > It's an iOS application. I would imagine it is substantially more
>>>>> > difficult
>>>>> > to attach to a process (which, at the very least, requires root, and
>>>>> > perhaps
>>>>> > other things on iOS) than to convince the device to change its system
>>>>> > time.
>>>>> >
>>>>> > That said, the security benefits might not be too substantial.
>>>>> >
>>>>> >
>>>>> > ------------------------------------------------------------------------------
>>>>> > Want fast and easy access to all the code in your enterprise? Index
>>>>> > and
>>>>> > search up to 200,000 lines of code with a free copy of Black Duck
>>>>> > Code Sight - the same software that powers the world's largest code
>>>>> > search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>> > http://p.sf.net/sfu/bds
>>>>> > _______________________________________________
>>>>> > Bitcoin-development mailing list
>>>>> > Bitcoin-development at lists.sourceforge.net
>>>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>> >
>>>>>
>>>>>
>>>>> ------------------------------------------------------------------------------
>>>>> Want fast and easy access to all the code in your enterprise? Index and
>>>>> search up to 200,000 lines of code with a free copy of Black Duck
>>>>> Code Sight - the same software that powers the world's largest code
>>>>> search on Ohloh, the Black Duck Open Hub! Try it now.
>>>>> http://p.sf.net/sfu/bds
>>>>> _______________________________________________
>>>>> Bitcoin-development mailing list
>>>>> Bitcoin-development at lists.sourceforge.net
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>
>>>
>>> --
>>>
>>> Aaron Voisine
>>> breadwallet.com
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>



From mark at coinqy.com  Sun Jul 27 06:55:38 2014
From: mark at coinqy.com (Mark van Cuijk)
Date: Sun, 27 Jul 2014 08:55:38 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
Message-ID: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>

When I asked a non-tech friend to do a BIP 70 payment using our wallet as a first round of user experience testing, he made the remark the he wanted to do a payment to a merchant, but instead our software shows a payment to ?BitPay, Inc.?

This can be problematic for a couple of reasons:
- As a user you don?t need to know and trust individual payment processors. As long as you can identify and authenticate the merchant, you should be able to rely on the merchant?s choice for a payment processor.
- An attacker can become a client of a payment processor, use it to create a PaymentRequest message and send this message to a victim as part of a MITM attack; the victim now thinks he is paying a merchant through the payment processor, but is actually paying the attacker through the payment processor.

I have a proposal that can be transformed into a BIP or into an extension of BIP 70 and adds a way to include merchant identity in the PaymentRequest message and I?d like to see a discussion on this topic.

At this moment, the PaymentRequest message contains a pki_data field with a certificate chain to authenticate the entity that generates the message, which in the above case is the payment processor.

I?m proposing to extends the PaymentRequest message with three more fields:
- payee_pki_type
- payee_pki_data
- payee_mandate

The payee_pki_type and payee_pki_data fields can be of the same format as the pki_type and pki_data fields, except that they authenticate the identity of the merchant, instead of the identity of the payment processor. The payee_mandate fields contains a claim by the merchant, signed using his own private key, that he grants the payment processor the right to collect the payment on his behalf.

The solution is backwards compatible, since existing wallets can ignore these fields. They will not show the identity of the merchant, but keep showing the identity of the payment processor, they are still able to verify the signature in the PaymentRequest message and therefore can complete the payment process.

A wallet that understands this extension, needs to check the validity of both certificate chains when present and also the validity of the mandate. If all is fine, it can now show the identity information from the merchant certificate instead of (or besides) the identity of the payment processor and allow an end user to correctly identify the merchant.

A payment processor supporting this extension may offer it as an optional service to clients. A client that wishes to use this extension needs to obtain his own certificate from a CA and use it to sign a mandate. One potential obstacle is that this process probably needs to be repeated both when the certificate of the merchant or the certificate of the payment processor expires, but we may be able to address that when defining the format of the mandate.

/Mark


From mike at plan99.net  Sun Jul 27 19:31:13 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 27 Jul 2014 21:31:13 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
In-Reply-To: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
References: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
Message-ID: <CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>

Hi Mark,

This is very similar to a proposal I made some time ago:


https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04053.html

I think the outlines of a design are clear - my proposal and yours don't I
think differ substantially. Someone needs to make it happen though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/b20a31dc/attachment.html>

From pete at petertodd.org  Sun Jul 27 22:22:52 2014
From: pete at petertodd.org (Peter Todd)
Date: Sun, 27 Jul 2014 18:22:52 -0400
Subject: [Bitcoin-development] Time
In-Reply-To: <CANEZrP2N6zf7RUtPzA+7-X5+UKBmrY-D_8Md+_=8nssoFNng9A@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CANEZrP2N6zf7RUtPzA+7-X5+UKBmrY-D_8Md+_=8nssoFNng9A@mail.gmail.com>
Message-ID: <20140727222252.GC14717@savin>

On Fri, Jul 25, 2014 at 12:30:11PM +0200, Mike Hearn wrote:
> >
> > Ok... 'time' on the blockchain could be 'gamed' ... but with great
> > difficulty.
> 
> 
> Unfortunately not: miners have in the past routinely gamed the timestamp in
> order to use it as an extra nonce and squeeze some more gigahashes out of
> their hardware/pool.

That's correct, but irrelevant for this application. The "gaming"
possible is only a few bits; gaming more bits than that either makes
blocks invalid due to being >2hr in the future, or < the median time in
the past. In addition doing the latter causes difficulty to rise.

Also see: "Re: [Bitcoin-development] 32 vs 64-bit timestamp fields" -
          Peter Todd - 08 May 2013
http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02144.html

> > An application presented with a fake blockchain can use
> > quite a few heuristics to test the 'validity' of the block chain.
> >
> 
> The app cannot tell if it was given a truncated chain. You could keep such
> an app stuck in the past forever. This is often a problem.

Only if the app is trying to use the blockchain non-interactively. The
right way to use the blockchain for determining the current time is to
create a nonce, timestamp it, wait for a confirmation, and get the
merkle path to the block header. This proves the attacker has spent at
least whatever resources it took to create a block considered valid by
your application. (you'll probably want to have a fairly high
min-difficulty)

> > Reliable 'time' has been impossible up until now - because you need to
> > trust the time source, and that can always be faked.  Using the
> > blockchain as an approximate time source gives you a world wide
> > consensus without direct trust of any player.
> >
> 
> Much though I hate to be a party pooper, you could currently get
> Bitcoin-level trusted time by just polling at least two or three
> independent servers e.g. google.com, baidu.cn, yandex.ru    (they all serve
> time via HTTPS headers).
>
> If we crack the mining decentralisation problem then this argument becomes
> a lot stronger, but for now ......

See https://github.com/ioerror/tlsdate

Reminds me: anyone know if tlsdate is able to produce timestamp proofs
verifiable by third-parties? If it could in conjunction with the
blockchain as a random beacon you could at least show dishonesty by
showing that google.com/etc. signed a HTTPS header with a time prior to
when some block was created. Right now unlike the blockchain these
independent servers can easily get away with timestamp fraud,
particularly if they manage to target your specific application. (use
Tor!)

Equally, the blockchain has the advantage that it's easy to show that
invalid blocks are being created for the purpose of creating fake
timestamps; it'd be reasonable for the P2P network to relay any block
header seen with a difficulty > some anti-DoS threshold. Gavin already
did something similar with relaying invalid blocks in pull-req #3580.
It had the flaw of making network splits worse, but in conjunction with
a separate "invalid-block" inv type I think the issue goes away.

-- 
'peter'[:-1]@petertodd.org
0000000000000000201d505432d708aa2edb656f6fe34d686b37d4747e5ff389
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/bec72e0b/attachment.sig>

From jlrubin at MIT.EDU  Mon Jul 28 02:12:11 2014
From: jlrubin at MIT.EDU (Jeremy)
Date: Sun, 27 Jul 2014 22:12:11 -0400
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
	Bitcoin traffic
Message-ID: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>

Hey,

There is a potential network exploit going on. In the last three days, a
node (unnamed) came online and is now processing the most traffic out of
any tor node -- and it is mostly plaintext Bitcoin traffic.

http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124

Alex Stamos (cc'ed) and I have been discussing on twitter what this could
mean, wanted to raise it to the attention of this group for discussion.

What we know so far:

- Only port 8333 is open
- The node has been up for 3 days, and is doing a lot of bandwidth, mostly
plaintext Bitcoin traffic
- This is probably pretty expensive to run? Alex suggests that the most
expensive server at the company hosting is 299?/mo with 50TB of traffic


-- 
Jeremy Rubin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/c9e8dc48/attachment.html>

From jlrubin at MIT.EDU  Mon Jul 28 02:17:19 2014
From: jlrubin at MIT.EDU (Jeremy)
Date: Sun, 27 Jul 2014 22:17:19 -0400
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
	Bitcoin traffic
In-Reply-To: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
Message-ID: <CAD5xwhhf=RPXaF-zztUcnfM7st7g0yVG=pREWBLKxkZEgUA_Ug@mail.gmail.com>

Credit to Anatole Shaw for discovering.


On Sun, Jul 27, 2014 at 10:12 PM, Jeremy <jlrubin at mit.edu> wrote:

> Hey,
>
> There is a potential network exploit going on. In the last three days, a
> node (unnamed) came online and is now processing the most traffic out of
> any tor node -- and it is mostly plaintext Bitcoin traffic.
>
>
> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124
>
> Alex Stamos (cc'ed) and I have been discussing on twitter what this could
> mean, wanted to raise it to the attention of this group for discussion.
>
> What we know so far:
>
> - Only port 8333 is open
> - The node has been up for 3 days, and is doing a lot of bandwidth, mostly
> plaintext Bitcoin traffic
> - This is probably pretty expensive to run? Alex suggests that the most
> expensive server at the company hosting is 299?/mo with 50TB of traffic
>
>
> --
> Jeremy Rubin
>



-- 
Jeremy Rubin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/165f6218/attachment.html>

From gmaxwell at gmail.com  Mon Jul 28 02:29:52 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 27 Jul 2014 19:29:52 -0700
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
Message-ID: <CAAS2fgRg2CBphTweeFh7r==ej_UqjGtFUwVKuRejFOaE_aVyFA@mail.gmail.com>

On Sun, Jul 27, 2014 at 7:12 PM, Jeremy <jlrubin at mit.edu> wrote:
> Hey,
>
> There is a potential network exploit going on. In the last three days, a
> node (unnamed) came online and is now processing the most traffic out of any
> tor node -- and it is mostly plaintext Bitcoin traffic.
>
> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124
>
> Alex Stamos (cc'ed) and I have been discussing on twitter what this could
> mean, wanted to raise it to the attention of this group for discussion.
>
> What we know so far:
>
> - Only port 8333 is open
> - The node has been up for 3 days, and is doing a lot of bandwidth, mostly
> plaintext Bitcoin traffic

How do you know what traffic it's actually doing.

> - This is probably pretty expensive to run? Alex suggests that the most
> expensive server at the company hosting is 299?/mo with 50TB of traffic

I'm confused as to how its doing anything at all, as it doesn't have
the exit flag. (IIRC, Tor directories won't give you the exit flag
unless you exit 80/443 to a pretty substantial chunk of IPv4 space).
Because of this no normal tor node should be selecting it as an exit.

Could this just be lying about its traffic levels?



From pete at petertodd.org  Mon Jul 28 02:40:30 2014
From: pete at petertodd.org (Peter Todd)
Date: Sun, 27 Jul 2014 22:40:30 -0400
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
Message-ID: <20140728024030.GA17724@savin>

On Sun, Jul 27, 2014 at 10:12:11PM -0400, Jeremy wrote:
> Hey,
> 
> There is a potential network exploit going on. In the last three days, a
> node (unnamed) came online and is now processing the most traffic out of
> any tor node -- and it is mostly plaintext Bitcoin traffic.
> 
> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124
> 
> Alex Stamos (cc'ed) and I have been discussing on twitter what this could
> mean, wanted to raise it to the attention of this group for discussion.
> 
> What we know so far:
> 
> - Only port 8333 is open
> - The node has been up for 3 days, and is doing a lot of bandwidth, mostly
> plaintext Bitcoin traffic
> - This is probably pretty expensive to run? Alex suggests that the most
> expensive server at the company hosting is 299?/mo with 50TB of traffic

Boring explanation: some mining pool wants to get a lower orphan rate by
connecting to the whole network simultaneously and has cleverly setup
their node as a Tor exit node to get some plausible deniability.

Of course, reducing orphan rates is indistinguishable from a sybil
attack; in general setting up such a node can be plausible deniability
cover for any type of attack. One possibility would be to sybil attack
the network to do logging; another would be DoS attacks. For the latter
we're pretty vulnerable to the Bloom IO attack(1). The former attack is
possible too, though I'd expect an attacker to want to do it in a less
obvious way and run more than one node. Also running one big Tor node is
less than ideal as it won't accept incoming connections, which lets you
attack SPV clients. Finally note how you can plausibly conduct the
attack directly from the node itself without bothering to actually use
the Tor network.

Anyway, just goes to show that we need to implement better incoming
connection limiting. gmaxwell has a good scheme with interactive
proof-of-memory - where's your latest writeup?

1) https://github.com/petertodd/bloom-io-attack

-- 
'peter'[:-1]@petertodd.org
0000000000000000201d505432d708aa2edb656f6fe34d686b37d4747e5ff389
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/95df7e88/attachment.sig>

From gmaxwell at gmail.com  Mon Jul 28 02:45:59 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 27 Jul 2014 19:45:59 -0700
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <20140728024030.GA17724@savin>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
Message-ID: <CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>

On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> wrote:
> Anyway, just goes to show that we need to implement better incoming
> connection limiting. gmaxwell has a good scheme with interactive
> proof-of-memory - where's your latest writeup?

Or its a complete snipe hunt, I'm unable to find any nodes with it
connected to them. Does anyone here have any?

Last discussion on the measures for anti-global-resource-consumption
was at https://bitcointalk.org/index.php?topic=310323.0  but it hasn't
seemed to be a huge issue such that adding more protocol surface area
was justified.



From mw at osfda.org  Mon Jul 28 02:49:11 2014
From: mw at osfda.org (Michael Wozniak)
Date: Sun, 27 Jul 2014 22:49:11 -0400
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
	Bitcoin traffic
In-Reply-To: <CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
Message-ID: <E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>

It?s in my logs:

2014-07-28 02:00:24 receive version message: /Satoshi:0.9.2/: version 70002, blocks=302684, us=******:8333, them=0.0.0.0:0, peer=5.9.93.101:33928


On Jul 27, 2014, at 10:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> wrote:
>> Anyway, just goes to show that we need to implement better incoming
>> connection limiting. gmaxwell has a good scheme with interactive
>> proof-of-memory - where's your latest writeup?
> 
> Or its a complete snipe hunt, I'm unable to find any nodes with it
> connected to them. Does anyone here have any?
> 
> Last discussion on the measures for anti-global-resource-consumption
> was at https://bitcointalk.org/index.php?topic=310323.0  but it hasn't
> seemed to be a huge issue such that adding more protocol surface area
> was justified.
> 
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls. 
> Build a bridge from your legacy apps to the future.
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gmaxwell at gmail.com  Mon Jul 28 03:07:56 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 27 Jul 2014 20:07:56 -0700
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
Message-ID: <CAAS2fgTOR=Aytak3jdfDMv_mYoBdXNRevCmZyo-iSAQE2_ys=A@mail.gmail.com>

On Sun, Jul 27, 2014 at 7:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> Or its a complete snipe hunt, I'm unable to find any nodes with it
> connected to them. Does anyone here have any?
[unimportant update] Turns out that my IPv4 nodes already have
iptables blocking of that subnet, presumably due to other misconduct
there, which might be why I'm not seeing it.

Several other people appear to be observing it, and all it seems to be
doing is listening without sending transactions? e.g. surveillance
node... not the first time thats happened, but the weird tor
non-exit-flagged-exit adds a fun level of intrigue to it.



From btcsf at omni.poc.net  Mon Jul 28 03:12:35 2014
From: btcsf at omni.poc.net (Anatole Shaw)
Date: Sun, 27 Jul 2014 23:12:35 -0400
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
	Bitcoin traffic
Message-ID: <20140728031235.GF2600@shade.berm.ch>

It's not quite accurate that the Tor node's throughput is 'mostly'
plaintext Bitcoin traffic. The node will only exit bitcoin traffic (or
anything else on port 8333) but most of the bandwidth is probably used
in being a Tor relay where there can be no port number discrimination.

However by providing so much bandwidth to the Tor network (maybe
record-setting?) and providing exit service for 8333, the node puts
itself in a strong position to do any or all of the following:

(a) Observe a lot of Bitcoin traffic from users connecting with Tor.

(b) Tamper with said traffic in some way.

(c) Hide the administrator's self-generated Bitcoin traffic in a crowd
of other Bitcoin traffic emitting from the same IP address.

Any of those possibilties might be intriguing.

Anatole


On Sun, Jul 27, 2014 at 10:17:19PM -0400, Jeremy wrote:
> Credit to Anatole Shaw for discovering.
> 
> 
> On Sun, Jul 27, 2014 at 10:12 PM, Jeremy <jlrubin at mit.edu> wrote:
> 
> > Hey,
> >
> > There is a potential network exploit going on. In the last three days, a
> > node (unnamed) came online and is now processing the most traffic out of
> > any tor node -- and it is mostly plaintext Bitcoin traffic.
> >
> >
> > http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124
> >
> > Alex Stamos (cc'ed) and I have been discussing on twitter what this could
> > mean, wanted to raise it to the attention of this group for discussion.
> >
> > What we know so far:
> >
> > - Only port 8333 is open
> > - The node has been up for 3 days, and is doing a lot of bandwidth, mostly
> > plaintext Bitcoin traffic
> > - This is probably pretty expensive to run? Alex suggests that the most
> > expensive server at the company hosting is 299?/mo with 50TB of traffic
> >
> >
> > --
> > Jeremy Rubin
> >
> 
> 
> 
> -- 
> Jeremy Rubin




From mbde at bitwatch.co  Mon Jul 28 02:54:23 2014
From: mbde at bitwatch.co (mbde at bitwatch.co)
Date: Mon, 28 Jul 2014 04:54:23 +0200
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>	<20140728024030.GA17724@savin>	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
Message-ID: <53D5BB5F.2060200@bitwatch.co>

These website list Tor nodes by bandwidth:

http://torstatus.blutmagie.de/index.php
https://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc

And the details reveal it's a port 8333 only exit node:

http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124

blockchain.info has some records about the related IP going back to the
end of this May:

https://blockchain.info/ip-address/5.9.93.101?offset=300

-------- Original Message  --------
Subject: Re: [Bitcoin-development] Abnormally Large Tor node accepting
only Bitcoin traffic
From: Michael Wozniak <mw at osfda.org>
To: Gregory Maxwell <gmaxwell at gmail.com>
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>, alex at stamos.org
Date: Sun, 27 Jul 2014 22:49:11 -0400

> It?s in my logs:
> 
> 2014-07-28 02:00:24 receive version message: /Satoshi:0.9.2/: version 70002, blocks=302684, us=******:8333, them=0.0.0.0:0, peer=5.9.93.101:33928
> 
> 
> On Jul 27, 2014, at 10:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> 
>> On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> wrote:
>>> Anyway, just goes to show that we need to implement better incoming
>>> connection limiting. gmaxwell has a good scheme with interactive
>>> proof-of-memory - where's your latest writeup?
>>
>> Or its a complete snipe hunt, I'm unable to find any nodes with it
>> connected to them. Does anyone here have any?
>>
>> Last discussion on the measures for anti-global-resource-consumption
>> was at https://bitcointalk.org/index.php?topic=310323.0  but it hasn't
>> seemed to be a huge issue such that adding more protocol surface area
>> was justified.
>>
>> ------------------------------------------------------------------------------
>> Infragistics Professional
>> Build stunning WinForms apps today!
>> Reboot your WinForms applications with our WinForms controls. 
>> Build a bridge from your legacy apps to the future.
>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls. 
> Build a bridge from your legacy apps to the future.
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From robert at mckay.com  Mon Jul 28 03:13:53 2014
From: robert at mckay.com (Robert McKay)
Date: Mon, 28 Jul 2014 04:13:53 +0100
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
	Bitcoin traffic
In-Reply-To: <E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
Message-ID: <ab9b863cecb9ebb80f30020d0c09b749@webmail.mckay.com>

Here's a packet dump of a connected client:

http://wari.mckay.com/~rm/unknown.tcpdump

Doesn't seem particularly abusive.. only one connection, not doing much 
traffic. I don't have any easy way to deserialize this and see if it's 
doing anything unusual but it's there if someone wants to have a go.

Rob

On Sun, 27 Jul 2014 22:49:11 -0400, Michael Wozniak wrote:
> It?s in my logs:
>
> 2014-07-28 02:00:24 receive version message: /Satoshi:0.9.2/: version
> 70002, blocks=302684, us=******:8333, them=0.0.0.0:0,
> peer=5.9.93.101:33928
>
>
> On Jul 27, 2014, at 10:45 PM, Gregory Maxwell <gmaxwell at gmail.com> 
> wrote:
>
>> On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> 
>> wrote:
>>> Anyway, just goes to show that we need to implement better incoming
>>> connection limiting. gmaxwell has a good scheme with interactive
>>> proof-of-memory - where's your latest writeup?
>>
>> Or its a complete snipe hunt, I'm unable to find any nodes with it
>> connected to them. Does anyone here have any?
>>
>> Last discussion on the measures for anti-global-resource-consumption
>> was at https://bitcointalk.org/index.php?topic=310323.0  but it 
>> hasn't
>> seemed to be a huge issue such that adding more protocol surface 
>> area
>> was justified.
>>
>> 
>> ------------------------------------------------------------------------------
>> Infragistics Professional
>> Build stunning WinForms apps today!
>> Reboot your WinForms applications with our WinForms controls.
>> Build a bridge from your legacy apps to the future.
>> 
>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> 
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
> 
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gmaxwell at gmail.com  Mon Jul 28 03:44:35 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 27 Jul 2014 20:44:35 -0700
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <53D5BB5F.2060200@bitwatch.co>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
	<53D5BB5F.2060200@bitwatch.co>
Message-ID: <CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>

On Sun, Jul 27, 2014 at 7:54 PM, mbde at bitwatch.co <mbde at bitwatch.co> wrote:
> These website list Tor nodes by bandwidth:
>
> http://torstatus.blutmagie.de/index.php
> https://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc
>
> And the details reveal it's a port 8333 only exit node:
> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124

As I pointed out above, ? it isn't really.  Without the exit flag, I
believe no tor node will select it to exit 8333 unless manually
configured. (someone following tor more closely than I could correct
if I'm wrong here)


> blockchain.info has some records about the related IP going back to the
> end of this May:
>
> https://blockchain.info/ip-address/5.9.93.101?offset=300

dsnrk and mr_burdell on freenode show that the bitnodes crawler showed
it accepting _inbound_ bitcoin connections 2-3 weeks ago, though it
doesn't now.

Fits a pattern of someone running a bitcoin node widely connecting to
everyone it can on IPv4 in order to try to deanonymize people, and
also running a tor exit (and locally intercepting 8333 there),  but I
suspect the tor exit part is not actually working? though they're
trying to get it working by accepting huge amounts of relay bandwidth.

I'm trying to manually exit through it so I can see if its
intercepting the connections, but I seem to not be able.

Some other data from the hosts its connecting out to proves that its
lying about what software its running (I'm hesitant to just say how I
can be sure of that, since doing so just tells someone how to do a
more faithful emulation; so that that for whatever its worth).



From drak at zikula.org  Mon Jul 28 07:41:28 2014
From: drak at zikula.org (Drak)
Date: Mon, 28 Jul 2014 08:41:28 +0100
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
	<53D5BB5F.2060200@bitwatch.co>
	<CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
Message-ID: <CANAnSg3Wcw9SVamyzkRPwHjr6bAyU4h1KV+_o7pFMZqXcVjWqg@mail.gmail.com>

Related to Russia's Tor bounty?
http://www.theguardian.com/world/2014/jul/25/russia-research-identify-users-tor
On 28 Jul 2014 04:45, "Gregory Maxwell" <gmaxwell at gmail.com> wrote:

> On Sun, Jul 27, 2014 at 7:54 PM, mbde at bitwatch.co <mbde at bitwatch.co>
> wrote:
> > These website list Tor nodes by bandwidth:
> >
> > http://torstatus.blutmagie.de/index.php
> > https://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc
> >
> > And the details reveal it's a port 8333 only exit node:
> >
> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124
>
> As I pointed out above, ? it isn't really.  Without the exit flag, I
> believe no tor node will select it to exit 8333 unless manually
> configured. (someone following tor more closely than I could correct
> if I'm wrong here)
>
>
> > blockchain.info has some records about the related IP going back to the
> > end of this May:
> >
> > https://blockchain.info/ip-address/5.9.93.101?offset=300
>
> dsnrk and mr_burdell on freenode show that the bitnodes crawler showed
> it accepting _inbound_ bitcoin connections 2-3 weeks ago, though it
> doesn't now.
>
> Fits a pattern of someone running a bitcoin node widely connecting to
> everyone it can on IPv4 in order to try to deanonymize people, and
> also running a tor exit (and locally intercepting 8333 there),  but I
> suspect the tor exit part is not actually working? though they're
> trying to get it working by accepting huge amounts of relay bandwidth.
>
> I'm trying to manually exit through it so I can see if its
> intercepting the connections, but I seem to not be able.
>
> Some other data from the hosts its connecting out to proves that its
> lying about what software its running (I'm hesitant to just say how I
> can be sure of that, since doing so just tells someone how to do a
> more faithful emulation; so that that for whatever its worth).
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/f1384363/attachment.html>

From mark at coinqy.com  Mon Jul 28 09:01:06 2014
From: mark at coinqy.com (Mark van Cuijk)
Date: Mon, 28 Jul 2014 11:01:06 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
In-Reply-To: <CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>
References: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
	<CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>
Message-ID: <C9BF4A1A-5363-4725-8CFC-9EFE0C0B6B15@coinqy.com>

Good to see that it has been discussed, but I see the idea has been postponed. I agree our proposals don?t differ substantially. Besides naming, I think the differences are the algorithms that are used for signing the extended certificate / mandate by the merchant and the way backwards compatibility is handled.

Also taking into consideration the replies on your proposal, I think the following decisions are most important to be made when we make a step back:

What party/system do we want to rely on to verify the identity of the merchant? Options I?ve seen:
- X.509  CAs
- Payment Processors (PP)
- PGP/Bitcoin-based

Which ?PKI" do we want to use to identify the merchant (related to the previous question)?
- X.509 certificate
- Merchant identifier
- Twitter handle

Which ?PKI? do we want to use to authenticate the PP?
- X.509 certificate
- Extended certificate

My personal opinion:

I?d prefer to stick to the X.509 system for identification of the merchant, even though the system is not perfect. In the case of a webshop transaction, a customer probably already relies on the X.509 system to authenticate the identity of the merchant during the shopping session (HTTPS) in his browser when he transmits his personal data like his address. I?d prefer not to add a competing identification system a customer also needs to rely on, unless that system brings objective improvements and can also be used in the HTTPS session.

I do like the idea coined by Mike that a PP can issue non-SSL certificates for the purpose of merchant identification, as long as a customer is free to determine whether he trusts the PP for this purpose.

Regarding the choice of how to authenticate the PP, I?m a bit undetermined. Disregarding backward compatibility, I think the extended certificate system proposed by Mike is cleaner. However, I don?t like the concept of requiring two separate signatures for old and new clients. Taking backward compatibility in mind, I tend to prefer my proposal.

/Mark

On 27 Jul 2014, at 21:31 , Mike Hearn <mike at plan99.net> wrote:

> Hi Mark,
> 
> This is very similar to a proposal I made some time ago:
> 
>    https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04053.html
> 
> I think the outlines of a design are clear - my proposal and yours don't I think differ substantially. Someone needs to make it happen though.
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/d55f07f6/attachment.html>

From mike at plan99.net  Mon Jul 28 10:16:16 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 28 Jul 2014 12:16:16 +0200
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
	<53D5BB5F.2060200@bitwatch.co>
	<CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
Message-ID: <CANEZrP10sFWiBv=yi0YaPszzxrygfRhwTP8fdqKapSL1yucfow@mail.gmail.com>

> As I pointed out above, ? it isn't really.  Without the exit flag, I
> believe no tor node will select it to exit 8333 unless manually
> configured. (someone following tor more closely than I could correct
> if I'm wrong here)
>

The "exit" flag doesn't mean what you would expect it to mean. The reason
such a node won't get much traffic is that Tor speculatively builds
circuits at startup on the assumption they'll be used for web browsing.
Thus if you don't exit web traffic you won't get much in the way of traffic
at least not until bitcoinj based wallets start shipping Tor mode.

There's a perfectly reasonable explanation for why someone would run such a
node. In fact I run a Tor exit that only allows port 8333 too: it's a way
to contribute exit bandwidth without much risk of getting raided by the
cops.

Occam's razor and all ....
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/8a8019d7/attachment.html>

From pete at petertodd.org  Mon Jul 28 11:28:15 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 28 Jul 2014 07:28:15 -0400
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
	Bitcoin traffic
In-Reply-To: <CANEZrP10sFWiBv=yi0YaPszzxrygfRhwTP8fdqKapSL1yucfow@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
	<53D5BB5F.2060200@bitwatch.co>
	<CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
	<CANEZrP10sFWiBv=yi0YaPszzxrygfRhwTP8fdqKapSL1yucfow@mail.gmail.com>
Message-ID: <b2f6693f-db93-4cb9-9c80-25f123c0b24e@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I've got a bitcoin-only exit running myself and right now there is absolutely no traffic leaving it. If the traffic coming from that node was legit I'd expect some to be exiting my node too.

Multiple people have confirmed the node is connected to an abnormally large % of the Bitcoin network. Looks like a Sybil attack to me, trying to hide behind a Tor exit node for plausible deniability.


On 28 July 2014 06:16:16 GMT-04:00, Mike Hearn <mike at plan99.net> wrote:
>> As I pointed out above, ? it isn't really.  Without the exit flag, I
>> believe no tor node will select it to exit 8333 unless manually
>> configured. (someone following tor more closely than I could correct
>> if I'm wrong here)
>>
>
>The "exit" flag doesn't mean what you would expect it to mean. The
>reason
>such a node won't get much traffic is that Tor speculatively builds
>circuits at startup on the assumption they'll be used for web browsing.
>Thus if you don't exit web traffic you won't get much in the way of
>traffic
>at least not until bitcoinj based wallets start shipping Tor mode.
>
>There's a perfectly reasonable explanation for why someone would run
>such a
>node. In fact I run a Tor exit that only allows port 8333 too: it's a
>way
>to contribute exit bandwidth without much risk of getting raided by the
>cops.
>
>Occam's razor and all ....
>
>
>------------------------------------------------------------------------
>
>------------------------------------------------------------------------------
>Infragistics Professional
>Build stunning WinForms apps today!
>Reboot your WinForms applications with our WinForms controls.
>Build a bridge from your legacy apps to the future.
>http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT1jPPMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcFSB/9Sr+2an63QQe7TpGMA
zH5AG1bjcl4Tf/VGVBYK8K2kXsdtfEWNS+nJ9eCglPE1A7/Cc2LL3pksoJwdnt82
VyuH8FlWUXwnBeZvK/rYUvBz2FQupHYg5+ee+HZ6nYjKTDYrHuSUX+GlqMO2GPII
D3FhQRIfluuTQTpYoN0ui0DXQ4QDqZgwxFXWiblctA2m986bKFrqrJ5ohZXTDCnE
mTq//ZABykPPtEcou5G1kLjH9l5YMU4XeMyz6uzADXt0ZTHBDN3lOZ8sFPpJEi0z
VGh4QlT6fRQIiYsq0AzMyUvopSwsCyQy6yeMt/bCOdanmAIcGm+l8og3mlX2Ml5g
nQsg
=/w5n
-----END PGP SIGNATURE-----




From s7r at sky-ip.org  Mon Jul 28 11:37:07 2014
From: s7r at sky-ip.org (s7r)
Date: Mon, 28 Jul 2014 14:37:07 +0300
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>	<20140728024030.GA17724@savin>	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>	<53D5BB5F.2060200@bitwatch.co>
	<CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
Message-ID: <53D635E3.6030704@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 7/28/2014 6:44 AM, Gregory Maxwell wrote:
> On Sun, Jul 27, 2014 at 7:54 PM, mbde at bitwatch.co
> <mbde at bitwatch.co> wrote:
>> These website list Tor nodes by bandwidth:
>> 
>> http://torstatus.blutmagie.de/index.php 
>> https://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc
>> 
>> And the details reveal it's a port 8333 only exit node: 
>> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124
>
>> 
> As I pointed out above, ? it isn't really.  Without the exit flag,
> I believe no tor node will select it to exit 8333 unless manually 
> configured. (someone following tor more closely than I could
> correct if I'm wrong here)
> 
> 
>> blockchain.info has some records about the related IP going back
>> to the end of this May:
>> 
>> https://blockchain.info/ip-address/5.9.93.101?offset=300
> 
> dsnrk and mr_burdell on freenode show that the bitnodes crawler
> showed it accepting _inbound_ bitcoin connections 2-3 weeks ago,
> though it doesn't now.
> 
> Fits a pattern of someone running a bitcoin node widely connecting
> to everyone it can on IPv4 in order to try to deanonymize people,
> and also running a tor exit (and locally intercepting 8333 there),
> but I suspect the tor exit part is not actually working? though
> they're trying to get it working by accepting huge amounts of relay
> bandwidth.
> 
> I'm trying to manually exit through it so I can see if its 
> intercepting the connections, but I seem to not be able.
> 
> Some other data from the hosts its connecting out to proves that
> its lying about what software its running (I'm hesitant to just say
> how I can be sure of that, since doing so just tells someone how to
> do a more faithful emulation; so that that for whatever its
> worth).
> 
> ------------------------------------------------------------------------------
>
> 
Infragistics Professional
> Build stunning WinForms apps today! Reboot your WinForms
> applications with our WinForms controls. Build a bridge from your
> legacy apps to the future. 
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>
> 
_______________________________________________
> Bitcoin-development mailing list 
> Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 


The thing is, if it doesn't have the exit flag it cannot generate lots
of traffic from real good-intended clients, because it's quite hard
for clients to choose this Node as ?XIT in their path if it doesn't
have the exit flag. So the traffic comes from clients who specifically
added "ExitNode <fingerprint>" in their torrc and only use that Tor
instance for Bitcoin. So, someone build this custom Tor node for
themselves only, for plausible den. A pool could be the cause as it
was earlier discussed here...

The thing is I cannot find this node on atlas, globe or blutmagie can
you please provide fingerprint and IP address again? So I may ignore
it on my relays and talk to some people about it?
- -- 
s7r
PGP Fingerprint: 7C36 9232 5ABD FB0B 3021 03F1 837F A52C 8126 5B11
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBAgAGBQJT1jXjAAoJEIN/pSyBJlsRjqgIAIFxHcypU6KUaNdSvESADilM
kFiitf00f4Uy9tBwSLVPQw+I2L1EmMiCNvqG4RRjV2+/PS696HCz0Jt0gVaGlMPl
DHQSHsozx3BaXi5PpGeLl7uSNLHlEdytytZ8xb08I4IuqcNNHzvxnou7gXapeezC
PuSABsxVLpDn+OP7QLRy/PlL948Yfgbxwb9dcn+lUdgDlByxxhMmOrk+o/VdGfnh
cL/C+qgpuJiI/wrQridtBmxU8h7Z6TKKua7eWONyg6MrnjwWuZTumhAGO2H4X1Na
IZiCmhEwtxb97TMG0EvgcZTeRzfzoddTnOe6ZEsiqOZ7qPNjFJ2i8RoSOI3gUCQ=
=t3Mb
-----END PGP SIGNATURE-----



From robert at mckay.com  Mon Jul 28 12:31:09 2014
From: robert at mckay.com (Robert McKay)
Date: Mon, 28 Jul 2014 13:31:09 +0100
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
	Bitcoin traffic
In-Reply-To: <b2f6693f-db93-4cb9-9c80-25f123c0b24e@email.android.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
	<53D5BB5F.2060200@bitwatch.co>
	<CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
	<CANEZrP10sFWiBv=yi0YaPszzxrygfRhwTP8fdqKapSL1yucfow@mail.gmail.com>
	<b2f6693f-db93-4cb9-9c80-25f123c0b24e@email.android.com>
Message-ID: <06e8ee730ac511617e6c3c4a4bbae4bb@webmail.mckay.com>

On Mon, 28 Jul 2014 07:28:15 -0400, Peter Todd wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
> I've got a bitcoin-only exit running myself and right now there is
> absolutely no traffic leaving it. If the traffic coming from that 
> node
> was legit I'd expect some to be exiting my node too.
>
> Multiple people have confirmed the node is connected to an abnormally
> large % of the Bitcoin network. Looks like a Sybil attack to me,
> trying to hide behind a Tor exit node for plausible deniability.

I don't think Sybil attack is the right term for this.. there is only 
one IP address.. one "identity".

I'm not even sure that this behaviour can be considered abuse.. it's 
pretty much following the rules and maybe even improving the transaction 
and block propagation.

As far as monitoring transaction origins someone could do that using 
lots of different IPs instead of just one (more like an actual Sybil 
attack rather than this non-Sybil attack).. and noone would be making a 
fuss (and imo, probably someone does do that too as it would be useful 
to capture a larger number of inbound connections).

Rob



From mike at plan99.net  Mon Jul 28 12:46:38 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 28 Jul 2014 14:46:38 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
In-Reply-To: <C9BF4A1A-5363-4725-8CFC-9EFE0C0B6B15@coinqy.com>
References: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
	<CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>
	<C9BF4A1A-5363-4725-8CFC-9EFE0C0B6B15@coinqy.com>
Message-ID: <CANEZrP3pU__65h3VFEshtHuXE-aXWkRR47QPXXMNmBrBNcb=SQ@mail.gmail.com>

On Mon, Jul 28, 2014 at 11:01 AM, Mark van Cuijk <mark at coinqy.com> wrote:

> Good to see that it has been discussed, but I see the idea has been
> postponed.
>

I'm not sure postponed is the right word. It wasn't in v1, but many useful
things weren't. It's more like, a bunch of people have to do work to
upgrade this and at the moment they're all busy with other things.


> I do like the idea coined by Mike that a PP can issue non-SSL certificates
> for the purpose of merchant identification, as long as a customer is free
> to determine whether he trusts the PP for this purpose.
>

I don't think I proposed this exactly? It's the other way around - a
merchant issues an extension cert to allow the PP to act on their behalf.


> Regarding the choice of how to authenticate the PP, I?m a bit
> undetermined. Disregarding backward compatibility, I think the extended
> certificate system proposed by Mike is cleaner. However, I don?t like the
> concept of requiring two separate signatures for old and new clients.
> Taking backward compatibility in mind, I tend to prefer my proposal.
>

I'm not sure I understand. Your proposal also has two signatures. Indeed it
must because delegation of authority requires a signature, but old clients
won't understand it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/b00e8a15/attachment.html>

From mark at coinqy.com  Mon Jul 28 13:06:26 2014
From: mark at coinqy.com (Mark van Cuijk)
Date: Mon, 28 Jul 2014 15:06:26 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
In-Reply-To: <CANEZrP3pU__65h3VFEshtHuXE-aXWkRR47QPXXMNmBrBNcb=SQ@mail.gmail.com>
References: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
	<CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>
	<C9BF4A1A-5363-4725-8CFC-9EFE0C0B6B15@coinqy.com>
	<CANEZrP3pU__65h3VFEshtHuXE-aXWkRR47QPXXMNmBrBNcb=SQ@mail.gmail.com>
Message-ID: <5E988ED7-845D-4982-9240-155AACD20F66@coinqy.com>

On 28 Jul 2014, at 14:46 , Mike Hearn <mike at plan99.net> wrote:

> I do like the idea coined by Mike that a PP can issue non-SSL certificates for the purpose of merchant identification, as long as a customer is free to determine whether he trusts the PP for this purpose.
> 
> I don't think I proposed this exactly? It's the other way around - a merchant issues an extension cert to allow the PP to act on their behalf.

I referred to your idea in https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04076.html which is indeed not the proposal itself.

> Regarding the choice of how to authenticate the PP, I?m a bit undetermined. Disregarding backward compatibility, I think the extended certificate system proposed by Mike is cleaner. However, I don?t like the concept of requiring two separate signatures for old and new clients. Taking backward compatibility in mind, I tend to prefer my proposal.
> 
> I'm not sure I understand. Your proposal also has two signatures. Indeed it must because delegation of authority requires a signature, but old clients won't understand it.

I?ll rephrase what I intended to say. In your proposal two signatures need to be computed over the payment request data, one with the key related to the X.509 certificate (for backwards compatibility) and one with the ECDSA public key. On my proposal only one signature needs to be computed over the payment request data using the former key, the same way it happens now.

Indeed there is another signature, which is to authenticate the payment delegation. If you take it into account in the signature count, then your proposal has three signatures.

/Mark
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/c9a8b502/attachment.html>

From mike at plan99.net  Mon Jul 28 13:32:54 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 28 Jul 2014 15:32:54 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
In-Reply-To: <5E988ED7-845D-4982-9240-155AACD20F66@coinqy.com>
References: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
	<CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>
	<C9BF4A1A-5363-4725-8CFC-9EFE0C0B6B15@coinqy.com>
	<CANEZrP3pU__65h3VFEshtHuXE-aXWkRR47QPXXMNmBrBNcb=SQ@mail.gmail.com>
	<5E988ED7-845D-4982-9240-155AACD20F66@coinqy.com>
Message-ID: <CANEZrP1tn_j-bjcbokq-egVhS_x7M-L06bLb8toJeTg6oT+mcg@mail.gmail.com>

>
> I referred to your idea in
> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04076.html
> <https://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg04076.html> which
> is indeed not the proposal itself.
>

Right, gotcha. Had forgotten about that.

Indeed there is another signature, which is to authenticate the payment
> delegation. If you take it into account in the signature count, then your
> proposal has three signatures.
>

Yes, I see now, you are right. A mandate type system is probably simpler
indeed.

So what now? To be honest my next priority with BIP70 was to formalise the
extensions process, I've been dragging my feet over that because I'm
working on other things. And then after that to knock some heads together
over at BitPay/Coinbase and get them to put useful text in the memo field
instead of random numbers. Baby steps ....
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/dbcdf1d6/attachment.html>

From gmaxwell at gmail.com  Mon Jul 28 14:08:05 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 28 Jul 2014 07:08:05 -0700
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <06e8ee730ac511617e6c3c4a4bbae4bb@webmail.mckay.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>
	<20140728024030.GA17724@savin>
	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>
	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>
	<53D5BB5F.2060200@bitwatch.co>
	<CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>
	<CANEZrP10sFWiBv=yi0YaPszzxrygfRhwTP8fdqKapSL1yucfow@mail.gmail.com>
	<b2f6693f-db93-4cb9-9c80-25f123c0b24e@email.android.com>
	<06e8ee730ac511617e6c3c4a4bbae4bb@webmail.mckay.com>
Message-ID: <CAAS2fgQyz-xXp-MZFu4n8gMms9sZrUXbsub4HcWG0SsR3tQ89w@mail.gmail.com>

On Mon, Jul 28, 2014 at 5:31 AM, Robert McKay <robert at mckay.com> wrote:
> I don't think Sybil attack is the right term for this.. there is only
> one IP address.. one "identity".

The bitcoin protocol is more or less identityless. It's using up lots
of network capacity, "number of sockets" is as pretty close as you
get.

> I'm not even sure that this behaviour can be considered abuse.. it's
> pretty much following the rules and maybe even improving the transaction
> and block propagation.

It isn't relaying transactions or blocks as far as anyone with a
connection to it can tell.

and sure, probably not much to worry about? people have been running
spy nodes for a long time, at least that much is not new.



From s7r at sky-ip.org  Mon Jul 28 16:13:19 2014
From: s7r at sky-ip.org (s7r)
Date: Mon, 28 Jul 2014 19:13:19 +0300
Subject: [Bitcoin-development] Abnormally Large Tor node accepting only
 Bitcoin traffic
In-Reply-To: <CAAS2fgQyz-xXp-MZFu4n8gMms9sZrUXbsub4HcWG0SsR3tQ89w@mail.gmail.com>
References: <CAD5xwhhKKooGBfSY3nZzMmS=3WD=EdX9FQ7mZtQL3fkikuwyLg@mail.gmail.com>	<20140728024030.GA17724@savin>	<CAAS2fgR+r6VoUse_ropq=p3WTy_qWq68fpCQim1FhcbkCXYtsQ@mail.gmail.com>	<E0F82AAE-1B71-4B8B-A5D5-0301BBECC317@osfda.org>	<53D5BB5F.2060200@bitwatch.co>	<CAAS2fgRVUbEM=7KQt-Haue=+sgAFu=HrfDdS0hhatNawci_eZQ@mail.gmail.com>	<CANEZrP10sFWiBv=yi0YaPszzxrygfRhwTP8fdqKapSL1yucfow@mail.gmail.com>	<b2f6693f-db93-4cb9-9c80-25f123c0b24e@email.android.com>	<06e8ee730ac511617e6c3c4a4bbae4bb@webmail.mckay.com>
	<CAAS2fgQyz-xXp-MZFu4n8gMms9sZrUXbsub4HcWG0SsR3tQ89w@mail.gmail.com>
Message-ID: <53D6769F.4050909@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 7/28/2014 5:08 PM, Gregory Maxwell wrote:
> On Mon, Jul 28, 2014 at 5:31 AM, Robert McKay <robert at mckay.com>
> wrote:
>> I don't think Sybil attack is the right term for this.. there is
>> only one IP address.. one "identity".
> 
> The bitcoin protocol is more or less identityless. It's using up
> lots of network capacity, "number of sockets" is as pretty close as
> you get.
> 
>> I'm not even sure that this behaviour can be considered abuse..
>> it's pretty much following the rules and maybe even improving the
>> transaction and block propagation.
> 
> It isn't relaying transactions or blocks as far as anyone with a 
> connection to it can tell.
> 
> and sure, probably not much to worry about? people have been
> running spy nodes for a long time, at least that much is not new.
> 
> ------------------------------------------------------------------------------
>
> 
Infragistics Professional
> Build stunning WinForms apps today! Reboot your WinForms
> applications with our WinForms controls. Build a bridge from your
> legacy apps to the future. 
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>
> 
_______________________________________________
> Bitcoin-development mailing list 
> Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
gmaxwell - I wanted to ask you a non-expert question. Let's say I use
my bitcoin-qt on my laptop with Tor, and send some BTC or receive
some, what can my Tor exit node see / do / harm? He can alter the
content, by modifying and transmitting invalid transactions to the
network but this will have no effect on me, e.g. can't steal coins or
send them on my behalf or intercept my payments, right? It's not clear
for me what data would such a node see? Why would you spend money to
setup a spy node for this what relevant data can it give you?

- -- 
s7r
PGP Fingerprint: 7C36 9232 5ABD FB0B 3021 03F1 837F A52C 8126 5B11
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBAgAGBQJT1nafAAoJEIN/pSyBJlsR8GYIAL9LkZvPbKjJ6cUxlC4yRKay
YUumAafCKYMvp8Ywvz3CWpC4Gncn+v29hhJu/Nc0wSItAnf4suwrAFtBAwAYlUx8
a1J6S1hgGXCBWDZcGHDc1Xt2lLzvijDcilSZfQWXnAdoEaZyln/7Kn+o/fFcXG6h
DUkSCSe9M3tN/tZBcZrhBXTENhoJ6MZldcgey6Ky0qLkmI3GCd0MhM+D15xl1LkT
6IS2r2y0RUOxkbg/SuSzFS8vnNTTWmZpbECo3Qq98W41X0M3ZtjOlaByPZXFX5K9
+HUeiptV9zukSdIRcuGH1PUQvU9nk+G1rFKr0dXu4oPvAUxqyw9uCTFgHXczuQY=
=gw3W
-----END PGP SIGNATURE-----



From hozer at hozed.org  Mon Jul 28 17:33:30 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Mon, 28 Jul 2014 12:33:30 -0500
Subject: [Bitcoin-development] Time
In-Reply-To: <CANEZrP2N6zf7RUtPzA+7-X5+UKBmrY-D_8Md+_=8nssoFNng9A@mail.gmail.com>
References: <53D1AF6C.7010802@gmail.com>
	<CANEZrP2N6zf7RUtPzA+7-X5+UKBmrY-D_8Md+_=8nssoFNng9A@mail.gmail.com>
Message-ID: <20140728173330.GC22640@nl.grid.coop>

On Fri, Jul 25, 2014 at 12:30:11PM +0200, Mike Hearn wrote:
> >
> > Ok... 'time' on the blockchain could be 'gamed' ... but with great
> > difficulty.
> 
> 
> Unfortunately not: miners have in the past routinely gamed the timestamp in
> order to use it as an extra nonce and squeeze some more gigahashes out of
> their hardware/pool.
>
>
> Also remember that currently the chain could be dominated by a coalition of
> just two pools.

There's a solution to both of these problems..

https://github.com/CatcoinOfficial/CatcoinRelease/commit/0d03a5b3d8bb7bc3c935e7196c5d807da997cf9c

If you want a really reliable time source, use at least three block chains and
make sure they all agree within an hour.
 
> 
> > An application presented with a fake blockchain can use
> > quite a few heuristics to test the 'validity' of the block chain.
> >
> 
> The app cannot tell if it was given a truncated chain. You could keep such
> an app stuck in the past forever. This is often a problem.
> 
> 
> > Reliable 'time' has been impossible up until now - because you need to
> > trust the time source, and that can always be faked.  Using the
> > blockchain as an approximate time source gives you a world wide
> > consensus without direct trust of any player.
> >
> 
> Much though I hate to be a party pooper, you could currently get
> Bitcoin-level trusted time by just polling at least two or three
> independent servers e.g. google.com, baidu.cn, yandex.ru    (they all serve
> time via HTTPS headers).

Well, being as how I don't trust Bitcoin anyway because it includes SSL, yes,
you could get 'bitcoin-level' trust.

> If we crack the mining decentralisation problem then this argument becomes
> a lot stronger, but for now ......

But if you actually want something secure, you look at the altcoin space
which solved the mining decentralization problem when Litecoin came out, 
and this also solves the having to trust a single source code base. There
is lots of code diversity out there in altcoins, and what appears to me to
be a really strong cryptographically sound time source, but only if you use
multiple diverse sources.


-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From moabtek at gmail.com  Tue Jul 29 22:32:19 2014
From: moabtek at gmail.com (Caleb Roger Davis)
Date: Tue, 29 Jul 2014 16:32:19 -0600
Subject: [Bitcoin-development] Bitcoin development (testing & where to get
	Wallet code)
Message-ID: <CALEpF5ab+T6k+QXK-AujQQcYPq_PyoaxB3KDGctRe1KicZpfWA@mail.gmail.com>

I have several Bitcoin contributions I would like to make, mostly for
learning purposes to get started:


   1. I would like to contribute to unit and/or other types of tests
   (code), not production code.
   2. I would like to understand the Bitcoin code (as much as possible from
   top to bottom)
   3. I would like to write a Bitcoin wallet in another language (so would
   like to know where to get the "Bitcoin - Core Wallet" code, but not sure
   where it resides.

I am a seasoned software developer, but I do need direction on where to get
started.  If there is a wiki doc for new developers that would reduce my
searching and experimentation that would be great.

For each of the three items above, I would like to know the tools and
frameworks I would need to understand and initially work on tests ( how to
run the existing tests to get code coverage and find where coverage is
needed, what is the preferred IDE and full development stack etc ), and
also where to get started looking at the bitcoin core code and also the
wallet code (where is the initial starting point and then I could trace
from there ).

Is there a separate area (github & mailing list) for core wallet
development?

Sincerely,


-- 
Caleb
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140729/7a17857c/attachment.html>

From micaroni at walltime.info  Tue Jul 29 23:12:55 2014
From: micaroni at walltime.info (Felipe Micaroni Lalli)
Date: Tue, 29 Jul 2014 20:12:55 -0300
Subject: [Bitcoin-development] Bitcoin development (testing & where to
	get Wallet code)
In-Reply-To: <CALEpF5ab+T6k+QXK-AujQQcYPq_PyoaxB3KDGctRe1KicZpfWA@mail.gmail.com>
References: <CALEpF5ab+T6k+QXK-AujQQcYPq_PyoaxB3KDGctRe1KicZpfWA@mail.gmail.com>
Message-ID: <7CDDF63C-8451-465C-B98D-20E224045EF2@walltime.info>

May I ask you which language? I'd love to implement Bitcoin in Clojure or Scheme.

Related: http://bitcoin.stackexchange.com/questions/5344/has-anyone-ported-the-bitcoin-software-to-pure-clojure




Sincerely,


Felipe Micaroni Lalli

Walltime: https://walltime.info
Bitcoin Paranoid Android developer
PGP ID: 0x4c0afccfed5cde14
BTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N

On 29/07/2014, at 19:32, Caleb Roger Davis <moabtek at gmail.com> wrote:

> I have several Bitcoin contributions I would like to make, mostly for learning purposes to get started:
> 
> 	? I would like to contribute to unit and/or other types of tests (code), not production code.
> 	? I would like to understand the Bitcoin code (as much as possible from top to bottom)
> 	? I would like to write a Bitcoin wallet in another language (so would like to know where to get the "Bitcoin - Core Wallet" code, but not sure where it resides.
> I am a seasoned software developer, but I do need direction on where to get started.  If there is a wiki doc for new developers that would reduce my searching and experimentation that would be great.
> 
> For each of the three items above, I would like to know the tools and frameworks I would need to understand and initially work on tests ( how to run the existing tests to get code coverage and find where coverage is needed, what is the preferred IDE and full development stack etc ), and also where to get started looking at the bitcoin core code and also the wallet code (where is the initial starting point and then I could trace from there ).
> 
> Is there a separate area (github & mailing list) for core wallet development?
> 
> Sincerely,
> 
> 
> -- 
> Caleb
> 
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls. 
> Build a bridge from your legacy apps to the future.
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140729/57bfdbcb/attachment.sig>

From moabtek at gmail.com  Wed Jul 30 07:38:39 2014
From: moabtek at gmail.com (Caleb Roger Davis)
Date: Wed, 30 Jul 2014 01:38:39 -0600
Subject: [Bitcoin-development] Bitcoin development (testing & where to
 get Wallet code)
In-Reply-To: <7CDDF63C-8451-465C-B98D-20E224045EF2@walltime.info>
References: <CALEpF5ab+T6k+QXK-AujQQcYPq_PyoaxB3KDGctRe1KicZpfWA@mail.gmail.com>
	<7CDDF63C-8451-465C-B98D-20E224045EF2@walltime.info>
Message-ID: <CALEpF5aryPkg6b+4i-xc8L_d53FLWc_xhnZFY4Zjk_mEm=qDhA@mail.gmail.com>

Yes, I was thinking something on the JVM, I have a big interest in Clojure
right now (am a long time Java dev, since 1996).

I do not know if I want to tackle writing bitcoin in Clojure, but I want to
create a tool kit first to learn more about how it works.

Caleb


On Tue, Jul 29, 2014 at 5:12 PM, Felipe Micaroni Lalli <
micaroni at walltime.info> wrote:

> May I ask you which language? I'd love to implement Bitcoin in Clojure or
> Scheme.
>
> Related:
> http://bitcoin.stackexchange.com/questions/5344/has-anyone-ported-the-bitcoin-software-to-pure-clojure
>
>
>
>
> Sincerely,
>
>
> Felipe Micaroni Lalli
>
> Walltime: https://walltime.info
> Bitcoin Paranoid Android developer
> PGP ID: 0x4c0afccfed5cde14
> BTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N
>
> On 29/07/2014, at 19:32, Caleb Roger Davis <moabtek at gmail.com> wrote:
>
> > I have several Bitcoin contributions I would like to make, mostly for
> learning purposes to get started:
> >
> >       ? I would like to contribute to unit and/or other types of tests
> (code), not production code.
> >       ? I would like to understand the Bitcoin code (as much as possible
> from top to bottom)
> >       ? I would like to write a Bitcoin wallet in another language (so
> would like to know where to get the "Bitcoin - Core Wallet" code, but not
> sure where it resides.
> > I am a seasoned software developer, but I do need direction on where to
> get started.  If there is a wiki doc for new developers that would reduce
> my searching and experimentation that would be great.
> >
> > For each of the three items above, I would like to know the tools and
> frameworks I would need to understand and initially work on tests ( how to
> run the existing tests to get code coverage and find where coverage is
> needed, what is the preferred IDE and full development stack etc ), and
> also where to get started looking at the bitcoin core code and also the
> wallet code (where is the initial starting point and then I could trace
> from there ).
> >
> > Is there a separate area (github & mailing list) for core wallet
> development?
> >
> > Sincerely,
> >
> >
> > --
> > Caleb
> >
> >
> ------------------------------------------------------------------------------
> > Infragistics Professional
> > Build stunning WinForms apps today!
> > Reboot your WinForms applications with our WinForms controls.
> > Build a bridge from your legacy apps to the future.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk_______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
Caleb
M: 801.896.3278
https://plus.google.com/+CalebRogerDavis/about
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140730/4bc7387a/attachment.html>

From mark at coinqy.com  Wed Jul 30 07:54:40 2014
From: mark at coinqy.com (Mark van Cuijk)
Date: Wed, 30 Jul 2014 09:54:40 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
In-Reply-To: <CANEZrP1tn_j-bjcbokq-egVhS_x7M-L06bLb8toJeTg6oT+mcg@mail.gmail.com>
References: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
	<CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>
	<C9BF4A1A-5363-4725-8CFC-9EFE0C0B6B15@coinqy.com>
	<CANEZrP3pU__65h3VFEshtHuXE-aXWkRR47QPXXMNmBrBNcb=SQ@mail.gmail.com>
	<5E988ED7-845D-4982-9240-155AACD20F66@coinqy.com>
	<CANEZrP1tn_j-bjcbokq-egVhS_x7M-L06bLb8toJeTg6oT+mcg@mail.gmail.com>
Message-ID: <BCE1032B-A181-4A07-B04A-CAFFE975DE5A@coinqy.com>

On 28 Jul 2014, at 15:32 , Mike Hearn <mike at plan99.net> wrote:

> So what now? To be honest my next priority with BIP70 was to formalise the extensions process, I've been dragging my feet over that because I'm working on other things. And then after that to knock some heads together over at BitPay/Coinbase and get them to put useful text in the memo field instead of random numbers. Baby steps ....

I can probably pick up writing the proposal.

However, I?m not sure what process to follow. Should I format the proposal as a new BIP or should it become part of BIP.70? How does the extensions process you?re working on going to describe the process?


From andreas at schildbach.de  Wed Jul 30 08:27:03 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Wed, 30 Jul 2014 10:27:03 +0200
Subject: [Bitcoin-development] Bitcoin development (testing & where to
	get Wallet code)
In-Reply-To: <CALEpF5aryPkg6b+4i-xc8L_d53FLWc_xhnZFY4Zjk_mEm=qDhA@mail.gmail.com>
References: <CALEpF5ab+T6k+QXK-AujQQcYPq_PyoaxB3KDGctRe1KicZpfWA@mail.gmail.com>	<7CDDF63C-8451-465C-B98D-20E224045EF2@walltime.info>
	<CALEpF5aryPkg6b+4i-xc8L_d53FLWc_xhnZFY4Zjk_mEm=qDhA@mail.gmail.com>
Message-ID: <lraa8o$n9f$1@ger.gmane.org>

Are you aware of bitcoinj?

http://bitcoinj.github.io/

It contains everything to plug together a basic SPV wallet and runs in
the JVM.


On 07/30/2014 09:38 AM, Caleb Roger Davis wrote:
> Yes, I was thinking something on the JVM, I have a big interest in
> Clojure right now (am a long time Java dev, since 1996).
> 
> I do not know if I want to tackle writing bitcoin in Clojure, but I want
> to create a tool kit first to learn more about how it works.
> 
> Caleb
> 
> 
> On Tue, Jul 29, 2014 at 5:12 PM, Felipe Micaroni Lalli
> <micaroni at walltime.info <mailto:micaroni at walltime.info>> wrote:
> 
>     May I ask you which language? I'd love to implement Bitcoin in
>     Clojure or Scheme.
> 
>     Related:
>     http://bitcoin.stackexchange.com/questions/5344/has-anyone-ported-the-bitcoin-software-to-pure-clojure
> 
> 
> 
> 
>     Sincerely,
> 
> 
>     Felipe Micaroni Lalli
> 
>     Walltime: https://walltime.info
>     Bitcoin Paranoid Android developer
>     PGP ID: 0x4c0afccfed5cde14
>     BTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N
> 
>     On 29/07/2014, at 19:32, Caleb Roger Davis <moabtek at gmail.com
>     <mailto:moabtek at gmail.com>> wrote:
> 
>     > I have several Bitcoin contributions I would like to make, mostly
>     for learning purposes to get started:
>     >
>     >       ? I would like to contribute to unit and/or other types of
>     tests (code), not production code.
>     >       ? I would like to understand the Bitcoin code (as much as
>     possible from top to bottom)
>     >       ? I would like to write a Bitcoin wallet in another language
>     (so would like to know where to get the "Bitcoin - Core Wallet"
>     code, but not sure where it resides.
>     > I am a seasoned software developer, but I do need direction on
>     where to get started.  If there is a wiki doc for new developers
>     that would reduce my searching and experimentation that would be great.
>     >
>     > For each of the three items above, I would like to know the tools
>     and frameworks I would need to understand and initially work on
>     tests ( how to run the existing tests to get code coverage and find
>     where coverage is needed, what is the preferred IDE and full
>     development stack etc ), and also where to get started looking at
>     the bitcoin core code and also the wallet code (where is the initial
>     starting point and then I could trace from there ).
>     >
>     > Is there a separate area (github & mailing list) for core wallet
>     development?
>     >
>     > Sincerely,
>     >
>     >
>     > --
>     > Caleb
>     >
>     >
>     ------------------------------------------------------------------------------
>     > Infragistics Professional
>     > Build stunning WinForms apps today!
>     > Reboot your WinForms applications with our WinForms controls.
>     > Build a bridge from your legacy apps to the future.
>     >
>     http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk_______________________________________________
>     > Bitcoin-development mailing list
>     > Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> -- 
> Caleb
> M: 801.896.3278
> https://plus.google.com/+CalebRogerDavis/about
> 
> 
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls. 
> Build a bridge from your legacy apps to the future.
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From laanwj at gmail.com  Wed Jul 30 08:37:07 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 30 Jul 2014 10:37:07 +0200
Subject: [Bitcoin-development] Bitcoin development (testing & where to
 get Wallet code)
In-Reply-To: <CALEpF5ab+T6k+QXK-AujQQcYPq_PyoaxB3KDGctRe1KicZpfWA@mail.gmail.com>
References: <CALEpF5ab+T6k+QXK-AujQQcYPq_PyoaxB3KDGctRe1KicZpfWA@mail.gmail.com>
Message-ID: <CA+s+GJAksf9NorY0gF4YTjeh+JJtO+LM0foyuLHi0gUux6ZL8w@mail.gmail.com>

On Wed, Jul 30, 2014 at 12:32 AM, Caleb Roger Davis <moabtek at gmail.com> wrote:
> I have several Bitcoin contributions I would like to make, mostly for
> learning purposes to get started:
>
> I would like to contribute to unit and/or other types of tests (code), not
> production code.

Low-level unit tests are in `src/test`. These use the boost
unit-testing framework. You can run them with 'make check' or
`src/test/test_bitcoin`.

High-level RPC tests are in `qa/rpc-tests`. These are Python scripts
that can be invoked manually, and are based on our own simple
framework.

There is also a java-based 'comparison tool' that tests high-level
behavior with regard to the block chain. It is based on bitcoinj and
acts as an external node. This is not part of the github bitcoin
repository itself, but of bitcoinj (AFAIK).

> I would like to understand the Bitcoin code (as much as possible from top to
> bottom)

See https://www.bitcoin.org/en/developer-guide

> I would like to write a Bitcoin wallet in another language (so would like to
> know where to get the "Bitcoin - Core Wallet" code, but not sure where it
> resides.

All of the wallet code is in `src/wallet.cpp` and `src/walletdb.cpp`.
If the purpose is just studying, the bitcoin core wallet is not the
most readable wallet code around, and also hard to port as it relies
on a full node in the same process. It's better to look at SPV
wallets, for example the bitcoinj-based ones.

> I am a seasoned software developer, but I do need direction on where to get
> started.  If there is a wiki doc for new developers that would reduce my
> searching and experimentation that would be great.

Something like that would be useful, yes.

> For each of the three items above, I would like to know the tools and
> frameworks I would need to understand and initially work on tests ( how to
> run the existing tests to get code coverage and find where coverage is
> needed, what is the preferred IDE and full development stack etc ), and also
> where to get started looking at the bitcoin core code and also the wallet
> code (where is the initial starting point and then I could trace from there
> ).

If you want to work on Bitcoin Core, a Linux box (or VM) is the best
development environment. Getting started building on WIndows or Mac is
harder (but possible). There is work in progress to make building the
dependencies easier for those.

Wladimir



From mike at plan99.net  Wed Jul 30 11:34:59 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 30 Jul 2014 13:34:59 +0200
Subject: [Bitcoin-development] "On behalf of" BIP 70 extension proposal
In-Reply-To: <BCE1032B-A181-4A07-B04A-CAFFE975DE5A@coinqy.com>
References: <B097D5C5-8E9E-461D-8FF3-58A661AFB3CB@coinqy.com>
	<CANEZrP0u-yoS4Sx2sC9uCf0xnzm-g1gYP8atUQO9-s3PW2kYKw@mail.gmail.com>
	<C9BF4A1A-5363-4725-8CFC-9EFE0C0B6B15@coinqy.com>
	<CANEZrP3pU__65h3VFEshtHuXE-aXWkRR47QPXXMNmBrBNcb=SQ@mail.gmail.com>
	<5E988ED7-845D-4982-9240-155AACD20F66@coinqy.com>
	<CANEZrP1tn_j-bjcbokq-egVhS_x7M-L06bLb8toJeTg6oT+mcg@mail.gmail.com>
	<BCE1032B-A181-4A07-B04A-CAFFE975DE5A@coinqy.com>
Message-ID: <CANEZrP3FR4woBMV-Zp84CUJjT-bZweanWTJZgy5BCJY-tO-Tzg@mail.gmail.com>

That would definitely be a new BIP.

But firstly it'd make sense to implement it and make sure that the payment
processors intend to use it. Like I said, I wasn't very successful so far
in getting them to make useful memo fields. I'm hoping that once wallets
start actually recording and displaying the memo in their transactions list
that will change.


On Wed, Jul 30, 2014 at 9:54 AM, Mark van Cuijk <mark at coinqy.com> wrote:

> On 28 Jul 2014, at 15:32 , Mike Hearn <mike at plan99.net> wrote:
>
> > So what now? To be honest my next priority with BIP70 was to formalise
> the extensions process, I've been dragging my feet over that because I'm
> working on other things. And then after that to knock some heads together
> over at BitPay/Coinbase and get them to put useful text in the memo field
> instead of random numbers. Baby steps ....
>
> I can probably pick up writing the proposal.
>
> However, I?m not sure what process to follow. Should I format the proposal
> as a new BIP or should it become part of BIP.70? How does the extensions
> process you?re working on going to describe the process?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140730/82417c8e/attachment.html>

From jgarzik at bitpay.com  Wed Jul 30 13:22:23 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 30 Jul 2014 09:22:23 -0400
Subject: [Bitcoin-development] Abusive and broken bitcoin seeders
Message-ID: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>

Seeing this on one of my public nodes:
2014-07-30 13:13:26 receive version message:
/getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,
us=162.219.2.72:8333, peer=11847
2014-07-30 13:13:33 receive version message:
/getaddr.bitnodes.io:0.1/: version 70001, blocks=290000,
us=162.219.2.72:8333, peer=11848
2014-07-30 13:14:21 receive version message:
/getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,
us=162.219.2.72:8333, peer=11849

That is abusive, taking up public slots.  There is no reason to
connect so rapidly to the same node.

Other seeders are also rapidly reconnect'ers, though the time window
is slightly more wide:
2014-07-30 13:09:35 receive version message: /bitcoinseeder:0.01/:
version 60000, blocks=230000, us=162.219.2.72:8333, peer=11843
2014-07-30 13:12:42 receive version message: /bitcoinseeder:0.01/:
version 60000, blocks=230000, us=162.219.2.72:8333, peer=11846

The version message helpfully tells me my own IP address but not theirs ;p

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Wed Jul 30 13:50:30 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 30 Jul 2014 15:50:30 +0200
Subject: [Bitcoin-development] Abusive and broken bitcoin seeders
In-Reply-To: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>
References: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>
Message-ID: <CA+s+GJDUbm7Z9FeQr1otuEPXn0RRq+KL=kS3GJT3j3TeWz_n5Q@mail.gmail.com>

> The version message helpfully tells me my own IP address but not theirs ;p

Try -logips. Logging peer IPs was disabled by default after #3764.

BTW I'm seeing the same abusive behavior. Who is running these? Why do
the requests need to be so frequent?

Wladimir



From pieter.wuille at gmail.com  Wed Jul 30 13:57:07 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 30 Jul 2014 15:57:07 +0200
Subject: [Bitcoin-development] Abusive and broken bitcoin seeders
In-Reply-To: <CA+s+GJDUbm7Z9FeQr1otuEPXn0RRq+KL=kS3GJT3j3TeWz_n5Q@mail.gmail.com>
References: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>
	<CA+s+GJDUbm7Z9FeQr1otuEPXn0RRq+KL=kS3GJT3j3TeWz_n5Q@mail.gmail.com>
Message-ID: <CAPg+sBhmkcW-7TYQ7TxAYvMsLrckcja+wPDow80a9Yoo1KdgMw@mail.gmail.com>

At least my crawler (bitcoin-seeder:0.01) software shouldn't reconnect
more frequently than once every 15 minutes. But maybe the two
connections you saw were instances?

On Wed, Jul 30, 2014 at 3:50 PM, Wladimir <laanwj at gmail.com> wrote:
>> The version message helpfully tells me my own IP address but not theirs ;p
>
> Try -logips. Logging peer IPs was disabled by default after #3764.
>
> BTW I'm seeing the same abusive behavior. Who is running these? Why do
> the requests need to be so frequent?
>
> Wladimir
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From neil at asdf.co.nz  Wed Jul 30 21:03:31 2014
From: neil at asdf.co.nz (Neil Fincham)
Date: Thu, 31 Jul 2014 09:03:31 +1200
Subject: [Bitcoin-development] Abusive and broken bitcoin seeders
In-Reply-To: <CAPg+sBhmkcW-7TYQ7TxAYvMsLrckcja+wPDow80a9Yoo1KdgMw@mail.gmail.com>
References: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>
	<CA+s+GJDUbm7Z9FeQr1otuEPXn0RRq+KL=kS3GJT3j3TeWz_n5Q@mail.gmail.com>
	<CAPg+sBhmkcW-7TYQ7TxAYvMsLrckcja+wPDow80a9Yoo1KdgMw@mail.gmail.com>
Message-ID: <CAH+ZByEFqBmUvA_ZO_8MzaYvfUopHY1x=rGaMeq8fL4_2q1uJg@mail.gmail.com>

I am also seeing these quite bit on my p2pool box.

Right now it is just a bit of (mostly) harmless spam but in the future I
can see this kind of thing being used in DDOS attacks and "deep scans" to
gather information to be used to harm the bitcoin network.  We could easily
block them but then they would just start to spoof regular clients.

We cannot even authenticate them by asking something that only a full
client would know because that would catch out clients sync'ing the
blockchain and SPV clients.

I suspect it is something that is going to have to be dealt with in the
future (I just don't know how yet).  We could start by dropping connections
that send incorrect information (IP addresses of 0.0.0.0 or our own IP).

Neil


On 31 July 2014 01:57, Pieter Wuille <pieter.wuille at gmail.com> wrote:

> At least my crawler (bitcoin-seeder:0.01) software shouldn't reconnect
> more frequently than once every 15 minutes. But maybe the two
> connections you saw were instances?
>
> On Wed, Jul 30, 2014 at 3:50 PM, Wladimir <laanwj at gmail.com> wrote:
> >> The version message helpfully tells me my own IP address but not theirs
> ;p
> >
> > Try -logips. Logging peer IPs was disabled by default after #3764.
> >
> > BTW I'm seeing the same abusive behavior. Who is running these? Why do
> > the requests need to be so frequent?
> >
> > Wladimir
> >
> >
> ------------------------------------------------------------------------------
> > Infragistics Professional
> > Build stunning WinForms apps today!
> > Reboot your WinForms applications with our WinForms controls.
> > Build a bridge from your legacy apps to the future.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/ac2b48a5/attachment.html>

From etotheipi at gmail.com  Wed Jul 30 21:50:22 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Wed, 30 Jul 2014 17:50:22 -0400
Subject: [Bitcoin-development] [ANN] Armory 0.92 with Decentralized
	Multi-sig and Simulfunding
Message-ID: <53D9689E.4040707@gmail.com>

Hi Everyone,

The Armory team is pleased to announce the official release of our
decentralized multi-signature interface, called "Lockboxes".  It is a
"true" multi-signature transaction interface:

  * Decentralized multi-sig (no third-party servers or signers needed)
  * Any multi-sig from 1-of-2 up to 7-of-7
  * Any or all of the signing devices can be *offline*
  * All private keys can be generated and managed independently
  * Works with existing Armory wallets
  * Simultaneous funding ("simulfunding") features for escrow and
    contracts (basically CoinJoin)
  * All wrapped up in a nice graphical user interface!

Armory 0.92 includes a GUI for creating, funding and spending from
multi-signature lockboxes, anything from 1-of-2 up to 7-of-7.  All
private keys can be generated independently and never have to be
co-located.    Most importantly, any number of the signing keys can be
created and managed on offline computers!  Also, all transaction and
signature data is communicated directly between parties/devices using
ASCII-armored blocks of text, so no third-party servers/services are
needed (though, in the future, we hope to provide an optional service to
help synchronize the data between parties).

The release also includes the ability to do simultaneous funding
("simulfunding") which is basically CoinJoin through a GUI, but intended
to be used for contracts and escrow.  Each party creates a "promissory
note" (which is basically just a list of UTXOs and a change address),
and those can be merged into a single transaction to be signed by all
funders.  Either all contributions are made simutaneously, or none of
them are.   There is no other outcome.  This means that no trust is
required between the simulfunders.  It is a basic contract enforced by
the bitcoin network itself.

Simulfunding would normally be used in conjuction with multi-signature
lockboxes -- two parties that don't trust each other together create a
lockbox, and then simultaneously fund it (and subsequently spend it)
according to some agreement.  However, it can actually be used to
simulfund any address.  To promote this feature, Armory Technologies Inc
is offering to match up to 20 BTC in donations to the EFF, FSF, College
Crypto Network, Chamber of Digital Commerce, and the Bitcoin Foundation
(and hopefully wikipedia, as a late addition to the list).    We posted
a list of ATI "promissory notes" for matching donations on our
website:   https://bitcoinarmory.com/donation-match-list/

We're very excited about this release, which has been in testing for
over three months, and we've been using for management of company funds
between officers for the last two months.  We have not seen anything
else that comes close to matching the flexibility and security afforded
by it (and without being exceptionally inconvenient!).   See our
tutorials, and especially the FAQ at the end: 

https://bitcoinarmory.com/about/using-lockboxes
https://bitcoinarmory.com/about/using-lockboxes/#faq
 
We hope that people will try it out and provide feedback.  Maybe even
match some donations!  We've already matched 3 BTC so far and it was
announced less than 24 hours ago. 

Cheers,
-Alan


------
Press Release: 
http://finance.yahoo.com/news/armory-releases-first-decentralized-multi-233500704.html
------
Changelog:

*VERSION 0.92**
**Released July 29, 2014**
*

    - *Multi-Signature Lockboxes!*
          Full-featured interface for creating multi-signature addresses,
          putting money into them, and collecting signatures to spend them.
          See our tutorials at:
https://bitcoinarmory.com/about/using-lockboxes/

    - *Simulfunding for Addresses and Lockboxes*
          Use the "Multi-Sig" menu to do prepare simulfunding to any
          arbitrary address.  Or click on the "Simul" checkbox in the
          lockbox manager if you are simulfunding a lockbox.  As a promotion
          for this feature we are matching up to 20 BTC worth donations
          to organizations that support Bitcoin, digital security, online
          freedoms, and open-source software.  See our donation list (with
          instructions): https://bitcoinarmory.com/about/donation-match-list

    - *Improved Mac/OSX Stability*
          We merged a couple Qt4 patches that dramatically improved
          compatibility on OSX 10.7 and newer.  Should work with the
          upcoming release of OSX 10.10.

    - *Armory Daemon/API Upgrades (Beta)*
          The Armory API has been upgraded substantially since version 0.91.
          This version has tons of new functionality matching bitcoind,
          as well as unique functionality including lockbox operations.
          Plan to have complete functionality implemented and tested by
          version 0.93.

    - *Upgraded Transaction History Export to CSV*
          Added running balance reporting for individual and all wallets.
          Also fixed a bug where internal transfers within wallets were
          not being reported properly.

    - *Root PUBLIC Key Export*
          You can now export just the root public key data that allows
          you to reconstruct your watching-only wallet.  It is five lines
          that are easily printed or copied by hand.  Could be used to
          provide someone a chain of addresses for multiple payments.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140730/d0ee6702/attachment.html>

From ayeowch at gmail.com  Wed Jul 30 22:53:29 2014
From: ayeowch at gmail.com (Addy Yeow)
Date: Thu, 31 Jul 2014 08:53:29 +1000
Subject: [Bitcoin-development] Abusive and broken bitcoin seeders
In-Reply-To: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>
References: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>
Message-ID: <CAA3bHnyk5etZvYmbsYcBqBwMLG5VJstbAJDzFrzNWU1bTTdzkg@mail.gmail.com>

I believe the requests Jeff is seeing came from my crawler although anyone
could be running it (https://github.com/ayeowch/bitnodes) since there is no
IP address in the log to confirm the source of the requests.

This is a sample log of an actual request from my crawler at 148.251.238.178
:
*2014-07-30 22:43:54 receive version message: /getaddr.bitnodes.io:0.1/:
version 70001, blocks=313244, us=X.X.X.X:8333, them=0.0.0.0:0
<http://0.0.0.0:0>, peer=148.251.238.178:47635*

Currently, the crawler takes a full snapshot of the network of reachable
nodes as soon as it is done with previous snapshot. I want to be able to
diff between the snapshots to get the join and leave nodes periodically.
Each full snapshot is taken on average between 3 to 4 minutes hence the
requests that you see from the crawler every 3 to 4 minutes.
I have a task in my schedule (
https://github.com/ayeowch/bitnodes/wiki/Schedule#crawlpypingpy) to improve
upon this method by skipping a new connection with currently reachable
nodes while still being able to perform the diff.


On Wed, Jul 30, 2014 at 11:22 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Seeing this on one of my public nodes:
> 2014-07-30 13:13:26 receive version message:
> /getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,
> us=162.219.2.72:8333, peer=11847
> 2014-07-30 13:13:33 receive version message:
> /getaddr.bitnodes.io:0.1/: version 70001, blocks=290000,
> us=162.219.2.72:8333, peer=11848
> 2014-07-30 13:14:21 receive version message:
> /getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,
> us=162.219.2.72:8333, peer=11849
>
> That is abusive, taking up public slots.  There is no reason to
> connect so rapidly to the same node.
>
> Other seeders are also rapidly reconnect'ers, though the time window
> is slightly more wide:
> 2014-07-30 13:09:35 receive version message: /bitcoinseeder:0.01/:
> version 60000, blocks=230000, us=162.219.2.72:8333, peer=11843
> 2014-07-30 13:12:42 receive version message: /bitcoinseeder:0.01/:
> version 60000, blocks=230000, us=162.219.2.72:8333, peer=11846
>
> The version message helpfully tells me my own IP address but not theirs ;p
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/aed03683/attachment.html>

From mike at plan99.net  Thu Jul 31 10:37:04 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 31 Jul 2014 12:37:04 +0200
Subject: [Bitcoin-development] Abusive and broken bitcoin seeders
In-Reply-To: <CAH+ZByEFqBmUvA_ZO_8MzaYvfUopHY1x=rGaMeq8fL4_2q1uJg@mail.gmail.com>
References: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>
	<CA+s+GJDUbm7Z9FeQr1otuEPXn0RRq+KL=kS3GJT3j3TeWz_n5Q@mail.gmail.com>
	<CAPg+sBhmkcW-7TYQ7TxAYvMsLrckcja+wPDow80a9Yoo1KdgMw@mail.gmail.com>
	<CAH+ZByEFqBmUvA_ZO_8MzaYvfUopHY1x=rGaMeq8fL4_2q1uJg@mail.gmail.com>
Message-ID: <CANEZrP2HHPUnsymDnRLd=-Ox-RD8RezM7TvpYeAw_np4JM4Bdw@mail.gmail.com>

>
> I suspect it is something that is going to have to be dealt with in the
> future (I just don't know how yet).
>

The web has managed to survive despite constant fast crawls being the norm
for the past 10 years or so. I wouldn't worry too much about this unless
you can prove that a big chunk of your nodes resources are going to
answering ver queries.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/5ab0cd91/attachment.html>

From jameson.lopp at gmail.com  Thu Jul 31 12:59:17 2014
From: jameson.lopp at gmail.com (Jameson Lopp)
Date: Thu, 31 Jul 2014 08:59:17 -0400
Subject: [Bitcoin-development] Abusive and broken bitcoin seeders
In-Reply-To: <CANEZrP2HHPUnsymDnRLd=-Ox-RD8RezM7TvpYeAw_np4JM4Bdw@mail.gmail.com>
References: <CAJHLa0O1EP8aUn4KLbo3OvzjgVfF8onrMjNnkRAnuWHwbofWBQ@mail.gmail.com>	<CA+s+GJDUbm7Z9FeQr1otuEPXn0RRq+KL=kS3GJT3j3TeWz_n5Q@mail.gmail.com>	<CAPg+sBhmkcW-7TYQ7TxAYvMsLrckcja+wPDow80a9Yoo1KdgMw@mail.gmail.com>	<CAH+ZByEFqBmUvA_ZO_8MzaYvfUopHY1x=rGaMeq8fL4_2q1uJg@mail.gmail.com>
	<CANEZrP2HHPUnsymDnRLd=-Ox-RD8RezM7TvpYeAw_np4JM4Bdw@mail.gmail.com>
Message-ID: <53DA3DA5.1040102@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I may be able to provide some insight regarding request volume / abuse via my public node at http://statoshi.info

My node receives a 'getaddr' request about every 50 seconds: http://i.imgur.com/XEpnWfG.png

In terms of the 'addr' messages that it sends out, the volume is also low. This graph has 'inv' and 'tx' sent messages for comparison. http://i.imgur.com/keyitsS.png

Now, these are just message volume and not actual resource usage, but I have a feeling that 'getaddr' requests are not resource intensive since it shouldn't be reading from disk. I could look into adding timing metrics around these requests if you think it could be useful.

- - Jameson

On 07/31/2014 06:37 AM, Mike Hearn wrote:
>>
>> I suspect it is something that is going to have to be dealt with in the
>> future (I just don't know how yet).
>>
> 
> The web has managed to survive despite constant fast crawls being the norm
> for the past 10 years or so. I wouldn't worry too much about this unless
> you can prove that a big chunk of your nodes resources are going to
> answering ver queries.
> 
> 
> 
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls. 
> Build a bridge from your legacy apps to the future.
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJT2j2lAAoJEIch3FSFNiDcWqIH/i0W21cYFHyQZItSkyHezBER
ExjudrLuXvTuRc/9b1OG7lJpK7IEYpCn0xXHGP3gv8gihq6lVEdZCFMXGWxU+eDv
ECXppTTCUkofUjVInbU91eagXeRzK0UTbTrp2++hfLQIAv99B8mgSdoEcopP42Fd
G197p/273lAPGVmNF31YPUcIbrhj0IzsiR1QaEEf1FEelaJ7MmU7YsUFUglajTqk
6+Uzcr6RcwLKAWVFAOA6VOeVwAMOQMwsniUAx6bYbqvgSHzRTllDDWW5rTaKh9+O
rIhA3LvHpLh37xqTs6EvJb2Kn823e4Ax4Eoz3wqVvAyjNqWHRPjlXdXentHFN4Q=
=R+Z1
-----END PGP SIGNATURE-----



From justusranvier at riseup.net  Thu Jul 31 18:33:05 2014
From: justusranvier at riseup.net (Justus Ranvier)
Date: Thu, 31 Jul 2014 18:33:05 +0000
Subject: [Bitcoin-development] [ANN] Armory 0.92 with Decentralized
 Multi-sig and Simulfunding
In-Reply-To: <53D9689E.4040707@gmail.com>
References: <53D9689E.4040707@gmail.com>
Message-ID: <53DA8BE1.1010702@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 07/30/2014 09:50 PM, Alan Reiner wrote:
> (though, in the future, we hope to provide an optional service to 
> help synchronize the data between parties)


Before rolling your own service, it might be a good idea to add
Bitmessage integration to provide the P2P communication layer.

Even if you resolved to create such a service without creating any
negative privacy or confidentially side effects, I'd be more inclined
to trust Bitmessage to get that right in the long term, because the
service you'd create isn't your primary product or core competency.


- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJT2ovhAAoJEMP3uyY4RQ21zw4H/3vjcZXP6e0/5IG745PDy/AC
Br1ChlyQjBpU7X9CQfrxDmUUGs7HDrwLjd/SZAV1/PUUXXfE3nDr24hsF8+PlGex
AiZhO7k92xfwRMWxMmcVVt/kuaOldHZUqHDUenT3drJ/bPnV+R3FJ9O6Ougu/YVy
H2BRjpdPGrZx9NP/hE/7evA7rPF8pcshpMBiwq6RiHFdu/+2jcThFZoMIaJsAcif
1vZOzP6vTUKkr3E7tRt5ZQrdb4vvGxX+xMomm8fzPmV3GkpJ/Kyyypx+ovaH74V5
oXXg62XRz4lSziWV5Sp4p/18VjRyUkxwvfXXMt9sW6vNvRDxtJNP8/ZKpkMjO3s=
=ClEd
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14046 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/9bde8224/attachment.bin>

From keziahw at gmail.com  Thu Jul 31 20:47:35 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 31 Jul 2014 13:47:35 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T2PSa3MpfMMDCb8ACVF5vDOZOFLEK9zfP9PakgHA4U16w@mail.gmail.com>
	<CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
Message-ID: <CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>

I don't see how set reconciliation alone would be practical for
condensed block exchange -- if the keys are txids it'd require a round
trip to request the missing tx; if we could somehow get the "What's
the Difference" approach to effectively operate on full transactions
instead, the log(keysize) factor overhead would make any transactions
not mutually-known very expensive to exchange (at keysize=32b, data
would need to be 80% mutually-known just to break even). There's also
the complication and/or overhead of establishing an "expected block"
to reconcile with the actual block.

The approach of remembering what invs have been transmitted both
directions along each connection is less elegant; it requires
remembering a lot of communication history, introducing a major point
of statefulness to the protocol, and custom-compacting blocks for each
peer. But it is also very effective at squeezing bytes, cheap in cpu
cycles, and the implementation is fairly simple. The wealth of mutual
knowledge already available in the current protocol allows
accomplishing the goal of exchanging blocks efficiently by solving a
much easier problem than its context-less cousin. I have my doubts
that it is possible for even an optimal contextless solution to do as
well as channel memory in terms of bytes exchanged or computational
complexity -- you can't beat making use of the available information.

I have an implementation of inv-history-tracking that uses a 2b/tx
alternative to getdata for tx, and I've had that running between two
nodes for ~2 weeks now. I've been working on a better implementation
of that plus the sparseblock messages, and I'll have the sparseblock
prototype (suitable for something like Gregory's remember-last-N
approach) up and running in a couple of days or so. The prototype
handles assigning compact identifiers to transactions and using those
in block messages; there's a lot of bit-packing sort of tweaks that
can be done that I'm not including in the initial prototype. The
prototype will be able to log history-hit rates, so if we run a few
sparseblocks nodes connected to each other for a while we should get a
good idea of how much efficiency gain this provides, and how it can be
improved. This approach even without the intensive bit packing has a
total vtx transmission size of 2*nTxKnown + 1*nTxUnknown +
nBytesTxUnknown, where only a small window of very recent transactions
and any transactions that have fallen out of the history limit would
be mutually known but not known to be known.

It would be possible to nearly eliminate even that overhead for both
known and unknown transactions with compact descriptions of block tx
inclusion and ordering policies as Gavin brought up, for which
something like scripts defining priority formulas would be a possible
implementation (https://gist.github.com/kazcw/43c97d3924326beca87d#ordering-policy
-- n.b. most of the rest of the gist is currently outdated). But since
priority scripts are themselves more complicated than the rest of the
sparseblock implementation, and basic sparseblocks achieve the vast
majority of bandwidth savings, I think it's worth implementing
sparseblocks without priority scripts now and then using priority
scripts for sparseblocks2 along with all the other things they can do
later.

Set reconciliation does look like a great way to synchronize mempools.
I've been thinking, contextless low-cost mempool exchange would enable
a node to have one or more "roaming" peer slots -- connect to a node,
fill in each other's mempools, move on to another peer. It seems like
this would go a long way to mitigate potential pathological network
topologies -- it would make it very difficult to sybil attack a node
(barring an attacker in a position to spoof IP addresses), and if a
serious bug or DoS attack caused the network to start to partition
itself due to DoS bans, it only takes occasional roamers crossing the
partition to keep both sides generally in sync.
Efficient mempool synchronization would also increase the efficacy of
channel-memory sparseblocks: it picks up transactions too old to have
been exchanged via invs, and could also allow nodes to know exactly
what transactions their peers have discarded.



On Thu, Jul 31, 2014 at 8:31 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I've been reading up on set reconciliation algorithms, and thinking about
> constant-bandwidth propagation of new block announcements.
>
> Emin:  the approach in this paper:
> What's the Difference? Efficient Set Reconciliation without Prior Context
>  http://conferences.sigcomm.org/sigcomm/2011/papers/sigcomm/p218.pdf
>
> ... looks like it would be much better suited for Bitcoin's use case,
> because
>
> a) it looks much easier to implement (no polynomial math)
> b) CPU/latency versus bandwidth tradeoff looks better (somewhat higher
> bandwidth than Yaron's method, but much lower CPU/latency cost)
>
> Kaz: how much time do you have to work on this?  Perhaps we can get a
> road-map for a prototype and split up work. I actually think the first step
> might be to gather a couple days worth of tx / block message broadcasts from
> a few network nodes and then create a test/benchmark harness that will tell
> us how much overlap there is in what nodes know and how much faster our
> newer algorithms are.
>
> --
> --
> Gavin Andresen

On Thu, Jul 31, 2014 at 12:10 PM, Emin G?n Sirer <el33th4x0r at gmail.com> wrote:
> Hi Gavin,
>
> Great find. I read (and sadly forgot) this paper back in 2011 and indeed,
> I'd also pick this approach over Yaron's. My reasons:
>
> a. this paper provides a more concrete implementation roadmap that has been
> explored thoroughly. While I understand Yaron's technique, there are still
> various design decisions (e.g. estimating the set difference involves a
> doubling process; representing TX ids seems to take up a lot of space) that
> are left unspec'ed for an implementation. (In general, Yaron is a
> theoretician at heart and Varghese is a very practical guy, there will be
> far fewer unforeseen issues with a Varghese tried and tested algorithm).
>
> b. on the surface, this paper seems to use a bit more bandwidth in that it
> requires O(size of set diff * log of keyspace) vs. Yaron's claim of O(size
> of set diff). But I believe that in practice Yaron's method would also have
> an O(log of keyspace) multiplier in place because the roots of his
> polynomial (the TX ids) have to be represented as numbers, and that requires
> log-of-keyspace bits. I suspect that Yaron is cleverly folding that factor
> into the constant factor of O notation, and Varghese et al are being polite
> by not pointing it out too overtly. So I suspect that the two schemes are
> actually identical in terms of space complexity.
>
> c. this technique is far more efficient in decoding than Yaron's, which
> requires Gaussian elimination, which in turn is O(d^3).
>
> If Bitcoin adopts this technique, it'll be adopting one of the best known
> techniques from the research community.
>
> BTW, don't hesitate to ping me with researchy issues in the future; I'll
> gladly point the effort in the right direction if I can.
>
> - egs
>
>
>
> On Thu, Jul 31, 2014 at 6:31 PM, Gavin Andresen <gavinandresen at gmail.com>
> wrote:
>>
>> I've been reading up on set reconciliation algorithms, and thinking about
>> constant-bandwidth propagation of new block announcements.
>>
>> Emin:  the approach in this paper:
>> What's the Difference? Efficient Set Reconciliation without Prior Context
>>  http://conferences.sigcomm.org/sigcomm/2011/papers/sigcomm/p218.pdf
>>
>> ... looks like it would be much better suited for Bitcoin's use case,
>> because
>>
>> a) it looks much easier to implement (no polynomial math)
>> b) CPU/latency versus bandwidth tradeoff looks better (somewhat higher
>> bandwidth than Yaron's method, but much lower CPU/latency cost)
>>
>> Kaz: how much time do you have to work on this?  Perhaps we can get a
>> road-map for a prototype and split up work. I actually think the first step
>> might be to gather a couple days worth of tx / block message broadcasts from
>> a few network nodes and then create a test/benchmark harness that will tell
>> us how much overlap there is in what nodes know and how much faster our
>> newer algorithms are.
>>
>> --
>> --
>> Gavin Andresen
>
>



From gmaxwell at gmail.com  Thu Jul 31 21:29:40 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 31 Jul 2014 14:29:40 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T2PSa3MpfMMDCb8ACVF5vDOZOFLEK9zfP9PakgHA4U16w@mail.gmail.com>
	<CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
	<CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>
Message-ID: <CAAS2fgS-KiP-tiy91Ah2hJ0pepA0OJDCG+Bv+redFtsqrUTevQ@mail.gmail.com>

On Thu, Jul 31, 2014 at 1:47 PM, Kaz Wesley <keziahw at gmail.com> wrote:
> trip to request the missing tx; if we could somehow get the "What's
> the Difference" approach to effectively operate on full transactions
> instead

I explain how to do this on the network block coding page.

Given that you know the sizes and orders of the transactions (e.g.
from a reconciliation step first), the sender sends non-syndromic
forward error correcting code data somewhat larger than their estimate
of how much data the user is missing.  Then you drop the data you know
into place and then recover the missing blocks using the fec.

There is no overhead in this approach except for FEC blocks that are
incompletely missing (and so must be completely discarded), and the
need to have the transmitted the transaction list and sizes first.
(note, that just more bandwidth, not an additional round trip).



From keziahw at gmail.com  Thu Jul 31 21:41:33 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 31 Jul 2014 14:41:33 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAAS2fgS-KiP-tiy91Ah2hJ0pepA0OJDCG+Bv+redFtsqrUTevQ@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T2PSa3MpfMMDCb8ACVF5vDOZOFLEK9zfP9PakgHA4U16w@mail.gmail.com>
	<CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
	<CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>
	<CAAS2fgS-KiP-tiy91Ah2hJ0pepA0OJDCG+Bv+redFtsqrUTevQ@mail.gmail.com>
Message-ID: <CA+iPb=Fa4YSTjPuCfyWy0wB2XBV=Mi99G3Hb84gjy+muNDin+g@mail.gmail.com>

> the need to have transmitted the transaction list [..] first

32 bits per transaction is at least double the communication overhead
of the simple approach, and only offers a bound on the probability of
needing a round trip.

On Thu, Jul 31, 2014 at 2:29 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Thu, Jul 31, 2014 at 1:47 PM, Kaz Wesley <keziahw at gmail.com> wrote:
>> trip to request the missing tx; if we could somehow get the "What's
>> the Difference" approach to effectively operate on full transactions
>> instead
>
> I explain how to do this on the network block coding page.
>
> Given that you know the sizes and orders of the transactions (e.g.
> from a reconciliation step first), the sender sends non-syndromic
> forward error correcting code data somewhat larger than their estimate
> of how much data the user is missing.  Then you drop the data you know
> into place and then recover the missing blocks using the fec.
>
> There is no overhead in this approach except for FEC blocks that are
> incompletely missing (and so must be completely discarded), and the
> need to have the transmitted the transaction list and sizes first.
> (note, that just more bandwidth, not an additional round trip).



From gmaxwell at gmail.com  Thu Jul 31 21:51:23 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 31 Jul 2014 14:51:23 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=Fa4YSTjPuCfyWy0wB2XBV=Mi99G3Hb84gjy+muNDin+g@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T2PSa3MpfMMDCb8ACVF5vDOZOFLEK9zfP9PakgHA4U16w@mail.gmail.com>
	<CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
	<CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>
	<CAAS2fgS-KiP-tiy91Ah2hJ0pepA0OJDCG+Bv+redFtsqrUTevQ@mail.gmail.com>
	<CA+iPb=Fa4YSTjPuCfyWy0wB2XBV=Mi99G3Hb84gjy+muNDin+g@mail.gmail.com>
Message-ID: <CAAS2fgSObqk=rD1vtV6LZzxUuyQMh+nwGuatOq1hUaQz2od0sg@mail.gmail.com>

On Thu, Jul 31, 2014 at 2:41 PM, Kaz Wesley <keziahw at gmail.com> wrote:
>> the need to have transmitted the transaction list [..] first
>
> 32 bits per transaction is at least double the communication overhead
> of the simple approach, and only offers a bound on the probability of
> needing a round trip.

"(e.g. from a reconciliation step first)" the list can be communicated
in the space roughly equal to the size of the difference in sets plus
coding the permutation from the permissible orderings.   If you did
have some "simple approach" that guaranteed that some transactions
would be present, then you could code those with indexes... the FEC
still lets you fill in the missing transactions without knowing in
advance all that will be missing.   (Also, the suggestion on the
network block coding page of using part of a cryptographic permutation
as the key means that for unknown transactions the transmission of the
new unknown keys is always goodput? doesn't add overhead)

It's "only a bound" but you can pick whatever bound you want,
including? if you send data equal to the missing amount, then it'll be
always successful, but no bandwidth savings.   Though if the transport
is unordered (e.g. UDP or non-blocking SCTP) even sending 100% of the
missing amount can save time by eliminating a round trip that might
otherwise be needed for a retransmission.



From keziahw at gmail.com  Thu Jul 31 22:27:59 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 31 Jul 2014 15:27:59 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAAS2fgSObqk=rD1vtV6LZzxUuyQMh+nwGuatOq1hUaQz2od0sg@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T2PSa3MpfMMDCb8ACVF5vDOZOFLEK9zfP9PakgHA4U16w@mail.gmail.com>
	<CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
	<CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>
	<CAAS2fgS-KiP-tiy91Ah2hJ0pepA0OJDCG+Bv+redFtsqrUTevQ@mail.gmail.com>
	<CA+iPb=Fa4YSTjPuCfyWy0wB2XBV=Mi99G3Hb84gjy+muNDin+g@mail.gmail.com>
	<CAAS2fgSObqk=rD1vtV6LZzxUuyQMh+nwGuatOq1hUaQz2od0sg@mail.gmail.com>
Message-ID: <CA+iPb=FV1_0SCzcqCz+2eeQW6L18c2O2aKW4zusgNKBYirqHcA@mail.gmail.com>

> the FEC still lets you fill in the missing transactions without knowing in advance all that will be missing.

I don't see why we need to solve that problem, since the protocol
already involves exchanging the information necessary to determine
(with some false positives) what a peer is missing, and needs to
continue doing so regardless of how blocks are transmitted.

Set reconciliation does have the benefit of eliminating a subset of
those false positives and offering a finer-grained mechanism for
defining what a node can choose to forget from its mempool than
remember-last-N, but if we implement it for block transmission I don't
see why we wouldn't also use it to synchronize mempool txes, and if
mempools are synchronized we don't actually need to do it as part of
block-transmission to get those benefits.

As far as I can tell, channel memory sparseblocks achieve most of the
possible bandwidth savings, and when FEC-based mempool synchronization
is implemented its benefits can be applied to the sparseblocks by
resetting the channel memory to the mutual mempool state each time
mempool differences are exchanged. Am I missing a benefit to doing FEC
at block forwarding time that can't be realized by FEC-based mempool
synchronization, implemented separately from channel-memory based
index-coding?


On Thu, Jul 31, 2014 at 2:51 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Thu, Jul 31, 2014 at 2:41 PM, Kaz Wesley <keziahw at gmail.com> wrote:
>>> the need to have transmitted the transaction list [..] first
>>
>> 32 bits per transaction is at least double the communication overhead
>> of the simple approach, and only offers a bound on the probability of
>> needing a round trip.
>
> "(e.g. from a reconciliation step first)" the list can be communicated
> in the space roughly equal to the size of the difference in sets plus
> coding the permutation from the permissible orderings.   If you did
> have some "simple approach" that guaranteed that some transactions
> would be present, then you could code those with indexes... the FEC
> still lets you fill in the missing transactions without knowing in
> advance all that will be missing.   (Also, the suggestion on the
> network block coding page of using part of a cryptographic permutation
> as the key means that for unknown transactions the transmission of the
> new unknown keys is always goodput? doesn't add overhead)
>
> It's "only a bound" but you can pick whatever bound you want,
> including? if you send data equal to the missing amount, then it'll be
> always successful, but no bandwidth savings.   Though if the transport
> is unordered (e.g. UDP or non-blocking SCTP) even sending 100% of the
> missing amount can save time by eliminating a round trip that might
> otherwise be needed for a retransmission.



From gmaxwell at gmail.com  Thu Jul 31 23:18:38 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 31 Jul 2014 16:18:38 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CA+iPb=FV1_0SCzcqCz+2eeQW6L18c2O2aKW4zusgNKBYirqHcA@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T2PSa3MpfMMDCb8ACVF5vDOZOFLEK9zfP9PakgHA4U16w@mail.gmail.com>
	<CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
	<CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>
	<CAAS2fgS-KiP-tiy91Ah2hJ0pepA0OJDCG+Bv+redFtsqrUTevQ@mail.gmail.com>
	<CA+iPb=Fa4YSTjPuCfyWy0wB2XBV=Mi99G3Hb84gjy+muNDin+g@mail.gmail.com>
	<CAAS2fgSObqk=rD1vtV6LZzxUuyQMh+nwGuatOq1hUaQz2od0sg@mail.gmail.com>
	<CA+iPb=FV1_0SCzcqCz+2eeQW6L18c2O2aKW4zusgNKBYirqHcA@mail.gmail.com>
Message-ID: <CAAS2fgR32qBtAjYNMduHTjz7ae2TSVms-2O53uTgZqtZxX+fqQ@mail.gmail.com>

On Thu, Jul 31, 2014 at 3:27 PM, Kaz Wesley <keziahw at gmail.com> wrote:
>> the FEC still lets you fill in the missing transactions without knowing in advance all that will be missing.
>
> I don't see why we need to solve that problem, since the protocol
> already involves exchanging the information necessary to determine
> (with some false positives) what a peer is missing, and needs to
> continue doing so regardless of how blocks are transmitted.

False positives, and if you have more than one peer? false negatives.
(or a rule for what you must keep which is conservative in order to
avoid creating huge storage requirements? but then also has false
negatives).


> As far as I can tell, channel memory sparseblocks achieve most of the
> possible bandwidth savings, and when FEC-based mempool synchronization
> is implemented its benefits can be applied to the sparseblocks by
> resetting the channel memory to the mutual mempool state each time
> mempool differences are exchanged. Am I missing a benefit to doing FEC
> at block forwarding time that can't be realized by FEC-based mempool
> synchronization, implemented separately from channel-memory based
> index-coding?

Yes, minimizing latency in the face of multiple peers.

Otherwise no. And certantly no reason to to implement something simple first.



