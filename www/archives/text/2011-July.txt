From bitcoin-list at bluematt.me  Fri Jul  1 00:07:18 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 01 Jul 2011 02:07:18 +0200
Subject: [Bitcoin-development] 0.3.24
Message-ID: <1309478838.3689.25.camel@Desktop666>

Due to the flood control limits becoming an issue again, it would appear
we need a 0.3.24 release.  The idea is to have sipa's flood limit fix
(https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e), dnsseed on by default, and maybe UPnP enabled by default as well.

I just got a DNSSeed up with reliable hosting which dynamically fills
its hostname with random nodes known to be up and accepting connections
(and on port 8333 and on version 0.3.19 or higher) (dnsseed.bluematt.me)
and I hope others follow suit with
https://github.com/TheBlueMatt/dnsseed (its poorly done but works just
fine).  This was added to master in 44d16327. Since its no longer a
static list, I think its time to enable dnsseed by default (I have one
or two connections by the time the GUI opens when I use -dnsseed
-noirc).

Also, I think UPnP by default would be a good idea as it could increase
the percent of nodes which accept incoming connection (and other P2P
applications which depend on the ability to accept incoming connections
have it on by default as well, such as Skype).  Jgarzik has also
suggested this, and I really dont see much of a reason not to.

Also,
https://github.com/bitcoin/bitcoin/commit/3a3eabb57ae41dd2162ca8230423abf4a90ef644 should be included to fix the no-connections-up segfault.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/2ebe80a5/attachment.sig>

From gmaxwell at gmail.com  Fri Jul  1 02:07:50 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 30 Jun 2011 22:07:50 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309478838.3689.25.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
Message-ID: <BANLkTi=ZZK5whvEmCj+aqp5q+XBnXZRY2A@mail.gmail.com>

On Thu, Jun 30, 2011 at 8:07 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:
> Due to the flood control limits becoming an issue again, it would appear
> we need a 0.3.24 release. ?The idea is to have sipa's flood limit fix
> (https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e), dnsseed on by default, and maybe UPnP enabled by default as well.

*Flood fix

I think this is important, slow bringups are problematic and I think
the flood disconnects have been contributing to network partitioning
(you'll disconnect nodes that have the full blockchain but keep ones
that don't), adding to the partitioning problems cause elsewhere.

I've been running it for a couple hours on a large public node which
was seeing frequent flood disconnects, and it seems to be working
fine. No more flood disconnects.

Syncing a local node to it (no a not terribly fast core) now takes
34.5 minutes (I new bringup on the same system a few days ago hadn't
synced in over an hour).

Increasing the nLimit in sipa's code from 500 to 5000 reduced the
syncup time for me by about 1.5 minutes, almost all of the speedup
being in the early blocks.  Since it has the 5MB limit now I don't see
much reason for a large per block limit.

*Dnsseed

I've been using this for a while, we need more dnsseed roots but I see
no reason not to turn it on now.

*UPNP

Lfnet now reports 32843.  Presumably there are more bitcoin users than
that, because not all use IRC. 32843*8 = 262744 listening sockets.
Meaning, assuming a nice equal distribution we need 2189 listening
nodes to support the network? but the real distribution will be
somewhat uneven due to bad luck and the /16 limit.

Matt has estimated that there are around 4000 stable listening nodes.

Linear extrapolation from the two day lfnet growth leave us running
out of sockets in a little more than a month. While it won't all break
if it runs out, since we don't strictly need 8 connections, it's still
not good.

I think getting more listening nodes is a somewhat urgent matter as a result.


I'd also like suggest updating the checkpoint in 0.3.24. Difficulty
has increased almost 17x since the highest one currently in there. A
rather large number of parties could mine pretty nice forks at 1/16th
the current difficulty for nodes that they've sibyled.



From dhuff at jrbobdobbs.org  Fri Jul  1 02:44:49 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Thu, 30 Jun 2011 21:44:49 -0500
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTi=ZZK5whvEmCj+aqp5q+XBnXZRY2A@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<BANLkTi=ZZK5whvEmCj+aqp5q+XBnXZRY2A@mail.gmail.com>
Message-ID: <3f9adcd5-a2b0-4613-b045-c964102e0d35@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



Gregory Maxwell <gmaxwell at gmail.com> wrote:

>On Thu, Jun 30, 2011 at 8:07 PM, Matt Corallo
><bitcoin-list at bluematt.me> wrote:
>> Due to the flood control limits becoming an issue again, it would
>appear
>> we need a 0.3.24 release. ?The idea is to have sipa's flood limit fix
>>
>(https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e),
>dnsseed on by default, and maybe UPnP enabled by default as well.
>
>*Flood fix
>
>I think this is important, slow bringups are problematic and I think
>the flood disconnects have been contributing to network partitioning
>(you'll disconnect nodes that have the full blockchain but keep ones
>that don't), adding to the partitioning problems cause elsewhere.
>
>I've been running it for a couple hours on a large public node which
>was seeing frequent flood disconnects, and it seems to be working
>fine. No more flood disconnects.

I can confirm similar results.


>I'd also like suggest updating the checkpoint in 0.3.24. Difficulty
>has increased almost 17x since the highest one currently in there. A
>rather large number of parties could mine pretty nice forks at 1/16th
>the current difficulty for nodes that they've sibyled.

It's about time for another checkpoint, I agree.
- --
Douglas Huff
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.8

iQIVAwUBTg00oEPHkQabDWHPAQhtIg/+KqgpNzu9pInI4w1QMl/PyGSEUrin6pHq
94H9UJRtx6kAPbyBDZ2M/DYTAk5logB0jZoZXg5tkYxY+DoGYC5FLYiLV9nfgIa9
oGEOgdSzaVZseINes0FMNcD5DjEmvvW0nDzJyraD7T11R8r+uATEtcPNN9g0aYSF
WCRWEKZSvf6o9k5sibmDGrWe/Zx9PV5Si59fqo1eglHUGG+9wLjP3Fv904HSQWD/
zJ+bMTNyddOi0vP23S5rQM4V94HG2wjgOVk804a/2qJlibXyJi0cYRQj/JIibOIt
KzXHqYAhJK5JcizUcKu3T8YM22ZE04nIqhxg7h8+5vaZHfHgMYjqGrYeEtqx6GUC
6oXKke2dP8bqdX+JkJ9Zrf5uz8ysPf6Rj+77dA1tYyFZc2CEb5wA0cnW5SSzqMe1
5q7saRda3P0RvTtWmJKLPyXbr7EqETKhr37E/lc7viLgQCroggQ4wVkUAj4rfjDZ
HeZtCfBg3U63oe6WPH1MkzuGPBOjdrSK9RlibFanPU/AL+sTYsf5cs+j8WTHa6WA
ee1k01Nke1Pa7ForvWcUXzzLPVk/ikEgmJrrTKcBNAEh5UKq7BveDX0fSw0kQmPO
XdWjlNfOfcObCVLRcJ7ev8H6fDQOFGxUXH3A98PCVtUx05aVoDVoRvdPAGN0kbTo
Xqa58ov1pQY=
=jKOB
-----END PGP SIGNATURE-----




From jgarzik at exmulti.com  Fri Jul  1 03:23:56 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Thu, 30 Jun 2011 23:23:56 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
Message-ID: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>

This was posted to IRC:
http://davids.webmaster.com/~davids/bitcoin-3diff.txt

Includes several useful features that all the big pools have been
screaming for...  notably HTTP/1.1 keep-alive support.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From pieter.wuille at gmail.com  Fri Jul  1 08:00:43 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 1 Jul 2011 10:00:43 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309478838.3689.25.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
Message-ID: <20110701080042.GA657@ulyssis.org>

On Fri, Jul 01, 2011 at 02:07:18AM +0200, Matt Corallo wrote:
> Due to the flood control limits becoming an issue again, it would appear
> we need a 0.3.24 release.  The idea is to have sipa's flood limit fix
> (https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e),

I've cleaned the commit up a bit, and created a pull request (#369) for it.

> dnsseed on by default, and maybe UPnP enabled by default as well.

> I just got a DNSSeed up with reliable hosting which dynamically fills
> its hostname with random nodes known to be up and accepting connections
> (and on port 8333 and on version 0.3.19 or higher) (dnsseed.bluematt.me)
> and I hope others follow suit with
> https://github.com/TheBlueMatt/dnsseed (its poorly done but works just
> fine).  This was added to master in 44d16327.

Nice, we definitely needed something like that. It wouldn't hurt to have multiple
people running such a seed, to prevent problems with occasional outages of DNS seeds,
once we move away from IRC entirely.

> Since its no longer a
> static list, I think its time to enable dnsseed by default (I have one
> or two connections by the time the GUI opens when I use -dnsseed
> -noirc).

Agree.

> Also, I think UPnP by default would be a good idea as it could increase
> the percent of nodes which accept incoming connection (and other P2P
> applications which depend on the ability to accept incoming connections
> have it on by default as well, such as Skype).  Jgarzik has also
> suggested this, and I really dont see much of a reason not to.

Given that there is no public outcry against these programs automatically
opening holes in firewalls, I assume it's safe for us to do the same.

It should be clearly explained in the release notes, though.

> Also,
> https://github.com/bitcoin/bitcoin/commit/3a3eabb57ae41dd2162ca8230423abf4a90ef644 should be included to fix the no-connections-up segfault.

Yes.

So: I'm in favor of an emergency release 0.3.24 with upnp default enabled,
dnsseed default enabled, block send limit, no-connect segfault bugfix.
Anything else?

-- 
Pieter



From jgarzik at exmulti.com  Fri Jul  1 08:39:24 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Fri, 1 Jul 2011 04:39:24 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <20110701080042.GA657@ulyssis.org>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
Message-ID: <BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>

On Fri, Jul 1, 2011 at 4:00 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> So: I'm in favor of an emergency release 0.3.24 with upnp default enabled,
> dnsseed default enabled, block send limit, no-connect segfault bugfix.
> Anything else?

No objections...  I could get out 0.3.24-rc1 post-sleep, presuming
this plan (or something like it) receives Holy Alpaca Pee.
-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From gavinandresen at gmail.com  Fri Jul  1 12:31:29 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 1 Jul 2011 08:31:29 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
Message-ID: <BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>

dnsseed on, block send, segfault bugfix:  Agreed.

upnp: I think should be enabled on Windows/Mac, but remain
off-by-default on Linux.

I think adding another block-chain checkpoint is a good idea, too.

-- 
--
Gavin Andresen



From bitcoin-list at bluematt.me  Fri Jul  1 12:40:16 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 01 Jul 2011 14:40:16 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
Message-ID: <1309524016.2541.0.camel@Desktop666>

On Fri, 2011-07-01 at 08:31 -0400, Gavin Andresen wrote:
> dnsseed on, block send, segfault bugfix:  Agreed.
> 
> upnp: I think should be enabled on Windows/Mac, but remain
> off-by-default on Linux.
Not sure about OS differentiation, seems...wrong?  Maybe disabled by
default on bitcoind but on by default on bitcoin?
> 
> I think adding another block-chain checkpoint is a good idea, too.
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/3227fb95/attachment.sig>

From dhuff at jrbobdobbs.org  Fri Jul  1 12:41:02 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Fri, 01 Jul 2011 07:41:02 -0500
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTi=ZZK5whvEmCj+aqp5q+XBnXZRY2A@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<BANLkTi=ZZK5whvEmCj+aqp5q+XBnXZRY2A@mail.gmail.com>
Message-ID: <5d917a01-5502-4f07-a6e6-1fdb8655b470@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Why off on Linux? If anything Linux has, historically, had the most testing of the miniupnpc library. So it's the most stable of the three.

Gregory Maxwell <gmaxwell at gmail.com> wrote:

>On Thu, Jun 30, 2011 at 8:07 PM, Matt Corallo
><bitcoin-list at bluematt.me> wrote:
>> Due to the flood control limits becoming an issue again, it would
>appear
>> we need a 0.3.24 release. ?The idea is to have sipa's flood limit fix
>>
>(https://github.com/sipa/bitcoin/commit/df94ed7ac0ed7bb3a96cf434ca3c64c4b475e37e),
>dnsseed on by default, and maybe UPnP enabled by default as well.
>
>*Flood fix
>
>I think this is important, slow bringups are problematic and I think
>the flood disconnects have been contributing to network partitioning
>(you'll disconnect nodes that have the full blockchain but keep ones
>that don't), adding to the partitioning problems cause elsewhere.
>
>I've been running it for a couple hours on a large public node which
>was seeing frequent flood disconnects, and it seems to be working
>fine. No more flood disconnects.
>
>Syncing a local node to it (no a not terribly fast core) now takes
>34.5 minutes (I new bringup on the same system a few days ago hadn't
>synced in over an hour).
>
>Increasing the nLimit in sipa's code from 500 to 5000 reduced the
>syncup time for me by about 1.5 minutes, almost all of the speedup
>being in the early blocks.  Since it has the 5MB limit now I don't see
>much reason for a large per block limit.
>
>*Dnsseed
>
>I've been using this for a while, we need more dnsseed roots but I see
>no reason not to turn it on now.
>
>*UPNP
>
>Lfnet now reports 32843.  Presumably there are more bitcoin users than
>that, because not all use IRC. 32843*8 = 262744 listening sockets.
>Meaning, assuming a nice equal distribution we need 2189 listening
>nodes to support the network? but the real distribution will be
>somewhat uneven due to bad luck and the /16 limit.
>
>Matt has estimated that there are around 4000 stable listening nodes.
>
>Linear extrapolation from the two day lfnet growth leave us running
>out of sockets in a little more than a month. While it won't all break
>if it runs out, since we don't strictly need 8 connections, it's still
>not good.
>
>I think getting more listening nodes is a somewhat urgent matter as a
>result.
>
>
>I'd also like suggest updating the checkpoint in 0.3.24. Difficulty
>has increased almost 17x since the highest one currently in there. A
>rather large number of parties could mine pretty nice forks at 1/16th
>the current difficulty for nodes that they've sibyled.
>
>------------------------------------------------------------------------------
>All of the data generated in your IT infrastructure is seriously
>valuable.
>Why? It contains a definitive record of application performance,
>security
>threats, fraudulent activity, and more. Splunk takes this data and
>makes
>sense of it. IT sense. And common sense.
>http://p.sf.net/sfu/splunk-d2d-c2
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development

- --
Douglas Huff
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.8

iQIVAwUBTg3AXUPHkQabDWHPAQgI8RAAm4Csyc4jqLvJSpopwNKg20273Hk2dhpR
s0RHerh1TgFDLDeByhzZLX/GC5SzGpPRDllDDlKcXl+E7iS7xtsuB+KbNdjYERmn
eVm67PQnXZ0PaDUnUxywyl55dcM8WAhwAYZKxvY2IzJ5y6oV7aPSDt7+qtXGL5Tx
EWjtQU06EaLhQkamelEc0KhHWqA72S/1VIgITvW4KVOf8SKyfTkxADdvRJ2iEznZ
bemdm81nbNFuYjGng9pEzqs9CVkWthANFa8GhxV9yFiqhpT7rCZKktkmqazxw6le
zog0v0MDfd55eWH59dHd9FbdiU757VMZtjTew3EoKrvIOwj1XQ50aSwaxO2CeTfW
qfW/xrxo+6VJx2kpLC833rvek4nx/7a0YVSvtypp9R1td9wAPi14IT+wOZ6C6ofs
Cg1VtETit4cS4xeHNx5boMayBvqpS1tmYgrTdi0QjmlWa75RDLIIteWcS7Q6NP0r
G2BRm3sqTGo/7Vzhmqn3BWNe5lq21NCW9kMs8nzhntnalF13BdIN4ZMimmSmLb5O
PUzg9OUZ5qfW3rsbYgYXXritzcNSftva+H/sCLIIoFOJO16wpiQXoHjTSY0TwwIT
XrVAcP2sRQjfT5QzPfwHDBRcYDgpfGJs5+jXtPc1maac7AxRjZ0op7gXFb/3L/W4
mQFXl6I9hhg=
=qsYM
-----END PGP SIGNATURE-----




From gavinandresen at gmail.com  Fri Jul  1 15:06:56 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 1 Jul 2011 11:06:56 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309524016.2541.0.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
Message-ID: <BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>

> Not sure about OS differentiation, seems...wrong? ?Maybe disabled by
> default on bitcoind but on by default on bitcoin?

OK.  I mis-remembered the poll:
   http://forum.bitcoin.org/index.php?topic=4392.0

On by default	                       8 (20%)
Off by default	                       22 (55%)
On by default in the GUI, off by default in bitcoind	 10 (25%)

-- 
--
Gavin Andresen



From decker.christian at gmail.com  Fri Jul  1 16:03:52 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Fri, 1 Jul 2011 18:03:52 +0200
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
Message-ID: <BANLkTi=+jZCANpe8Bmh_7e6KNnQZjF35yA@mail.gmail.com>

Some appear to be beneficial to everybody.
Multithreading the RPC will certainly speed up quite a few services and I
see no downside in adding it. The same is true for Keep-Alive.

I'm against including the long polling support because incredibly few people
will benefit from it (pool providers) and yet it is included for everyone.

The Hub mode is good, and I would go a step further and optimize the
connection logic for all nodes by default.

Just IMHO

Regards,
Chris


On Fri, Jul 1, 2011 at 5:23 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:

> This was posted to IRC:
> http://davids.webmaster.com/~davids/bitcoin-3diff.txt
>
> Includes several useful features that all the big pools have been
> screaming for...  notably HTTP/1.1 keep-alive support.
>
> --
> Jeff Garzik
> exMULTI, Inc.
> jgarzik at exmulti.com
>
>
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security
> threats, fraudulent activity, and more. Splunk takes this data and makes
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/a67335a5/attachment.html>

From gmaxwell at gmail.com  Fri Jul  1 16:23:59 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 1 Jul 2011 12:23:59 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <BANLkTi=+jZCANpe8Bmh_7e6KNnQZjF35yA@mail.gmail.com>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<BANLkTi=+jZCANpe8Bmh_7e6KNnQZjF35yA@mail.gmail.com>
Message-ID: <BANLkTimiNOynfvQnncUeiRoZm+CG6njjoA@mail.gmail.com>

On Fri, Jul 1, 2011 at 12:03 PM, Christian Decker
<decker.christian at gmail.com> wrote:
> Some appear to be beneficial to everybody.
> Multithreading the RPC will certainly speed up quite a few services and I
> see no downside in adding it. The same is true for Keep-Alive.

The multithreaded RPC stuff will need very aggressive testing to make
sure it doesn't expose race conditions elsewhere in the code.

E.g. you don't want to lose change from a send because some txn called
getnewaddress concurrently and there was a bug. So far the
multithreaded RPC patches have pretty much only been run by miners...
who have a different rpc profile than everyone else.

(and the MT RPC that I've been using only multhreaded getwork?)

> The Hub mode is good, and I would go a step further and optimize the
> connection logic for all nodes by default.

Gah. No.

The 'hub mode' is not good. We're already low on sockets network wide,
adding a built in DDOS mode flag to bitcoin that makes nodes
aggressively connect to lots of neighbors is a bad idea. People will
ignorantly enable it thinking they are adding resources to the network
when they are really consuming much much more.

I have a big fast node with a higher connection limit and the flood
fixes and I'm currently seeing 596 inbound connections right now. This
suggests the situation is already a lot worse than the rough numbers
using lfnet connection counts suggested.


Miners, concerned with fast block propagation, should manually addnode
each other. We should fix the addnode logic so that it reserve
connection slots for addnoded nodes and tries to keep connecting to
them (or, alternatively, add a peernode flag for that behavior)
currently addnode is oneshot.

There is a lot of room for longer term improvements to the connection
and forwarding logic, and I have a couple interesting ones I'm running
on my nodes, but we don't really have any good way to test and
validate changes, so I'm hesitant to publish them.



From bitcoin-list at bluematt.me  Fri Jul  1 16:25:27 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 01 Jul 2011 18:25:27 +0200
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <BANLkTi=+jZCANpe8Bmh_7e6KNnQZjF35yA@mail.gmail.com>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<BANLkTi=+jZCANpe8Bmh_7e6KNnQZjF35yA@mail.gmail.com>
Message-ID: <1309537527.2541.18.camel@Desktop666>

1) Native Long Polling Support
Not sure about this one, it would be useful, but preferably done once
Bitcoin is cleaned up anyway. A probable good way would be a central
notification interface which net, wallets, etc all connect to, including
things like a pool server. Thus I'm not sure about merging something
like this now.

2) A fix from Luke Dash Jr.
His branch is at
https://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin/commits/getwork_dedupe and I would say it would be good to merge. gmaxwell indicated that hes been running this for a while and it is stable.

3) Hub Mode
Why? We dont have enough nodes listening to begin with, this generates a
ton of net usage on other listening nodes, which is not good. If you
open up your ports, you will get just as many, if not more connections
very easily.

4) RPC Turbocharge
Yep, this is something that is needed, there is also the other asio pull
request on github, not sure how/if these compare.

5) Resource Leak Fix
Looks good to me.

Matt

On Fri, 2011-07-01 at 18:03 +0200, Christian Decker wrote:
> Some appear to be beneficial to everybody.
> Multithreading the RPC will certainly speed up quite a few services
> and I see no downside in adding it. The same is true for Keep-Alive.
> 
> I'm against including the long polling support because incredibly few
> people will benefit from it (pool providers) and yet it is included
> for everyone.
> 
> The Hub mode is good, and I would go a step further and optimize the
> connection logic for all nodes by default. 
> 
> Just IMHO
> 
> Regards,
> Chris
> 
> 
> On Fri, Jul 1, 2011 at 5:23 AM, Jeff Garzik <jgarzik at exmulti.com>
> wrote:
>         This was posted to IRC:
>         http://davids.webmaster.com/~davids/bitcoin-3diff.txt
>         
>         Includes several useful features that all the big pools have
>         been
>         screaming for...  notably HTTP/1.1 keep-alive support.
>         
>         --
>         Jeff Garzik
>         exMULTI, Inc.
>         jgarzik at exmulti.com


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/525f7c65/attachment.sig>

From jan at uos.de  Fri Jul  1 16:35:58 2011
From: jan at uos.de (jan at uos.de)
Date: Fri, 1 Jul 2011 18:35:58 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
Message-ID: <20110701163558.GA7311@dax.lan.local>

On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:
> > Not sure about OS differentiation, seems...wrong? ?Maybe disabled by
> > default on bitcoind but on by default on bitcoin?
> 
> OK.  I mis-remembered the poll:
>    http://forum.bitcoin.org/index.php?topic=4392.0
> 
> On by default	                       8 (20%)
> Off by default	                       22 (55%)
> On by default in the GUI, off by default in bitcoind	 10 (25%)

I just voted as well and now - with some extra votes in the meantime -
it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on
(9 + 13).

I'm in favor of turning it on by default in the GUI and leaving it off
in bitcoind.

I don't like UPnP much, I find it exemplifies exactly what is wrong with
computer security today: Convenience trumps security almost every time.

BUT: I don't think this is the moment to fight UPnP. It's the standard
mechanism in use today to let a computer behind a NAT accept incoming
connections. The user has already made the decision in regards to
convenience over security. By enabling UPnP (or by buying a product that
does this automatically) they are saying: I want it to "just work"
instead of having fine-grained but more complicated control.

Bitcoin is a P2P application and as such should use this
mechanism. I think it's pretty clear that participating in a P2P network
requires one to receive messages from other peers. At least no one seems
to be concerned that Bitcoin (by default!) listens on port 8333. So I
think it's only logical to extend that to work behind NATs as well.

Cheers!
Jan



From robert at mckay.com  Fri Jul  1 16:47:19 2011
From: robert at mckay.com (Robert McKay)
Date: Fri, 1 Jul 2011 17:47:19 +0100
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <20110701163558.GA7311@dax.lan.local>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<20110701163558.GA7311@dax.lan.local>
Message-ID: <BANLkTimuNvsk_O2c6V03L9T=dgTVXbkpLg@mail.gmail.com>

On Fri, Jul 1, 2011 at 5:35 PM, <jan at uos.de> wrote:

> On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:
> > > Not sure about OS differentiation, seems...wrong?  Maybe disabled by
> > > default on bitcoind but on by default on bitcoin?
> >
> > OK.  I mis-remembered the poll:
> >    http://forum.bitcoin.org/index.php?topic=4392.0
> >
> > On by default                        8 (20%)
> > Off by default                               22 (55%)
> > On by default in the GUI, off by default in bitcoind   10 (25%)
>
> I just voted as well and now - with some extra votes in the meantime -
> it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on
> (9 + 13).
>
> I'm in favor of turning it on by default in the GUI and leaving it off
> in bitcoind.
>
> I don't like UPnP much, I find it exemplifies exactly what is wrong with
> computer security today: Convenience trumps security almost every time.
>
> BUT: I don't think this is the moment to fight UPnP. It's the standard
> mechanism in use today to let a computer behind a NAT accept incoming
> connections. The user has already made the decision in regards to
> convenience over security. By enabling UPnP (or by buying a product that
> does this automatically) they are saying: I want it to "just work"
> instead of having fine-grained but more complicated control.
>
> Bitcoin is a P2P application and as such should use this
> mechanism. I think it's pretty clear that participating in a P2P network
> requires one to receive messages from other peers. At least no one seems
> to be concerned that Bitcoin (by default!) listens on port 8333. So I
> think it's only logical to extend that to work behind NATs as well


If bitcoin listened on IPv6 that might help for alot of people. Windows 7
users get a teredo IPv6 address (unless they disable it) when behind NAT on
IPv4. Take any win7 box and put it on a typical NAT /DSL setup this is what
happens. I think this might actually work for more users than have UPNP
support on their DSL gateways. teredo IPs aren't that stable though (they
change frequently) and they might tend to flood the address cache with stale
addresses.

Rob
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/195a339b/attachment.html>

From dhuff at jrbobdobbs.org  Fri Jul  1 17:47:46 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Fri, 1 Jul 2011 12:47:46 -0500
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <20110701163558.GA7311@dax.lan.local>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<20110701163558.GA7311@dax.lan.local>
Message-ID: <C8D44AB3-1868-4255-9B6C-5AEE72C535C4@jrbobdobbs.org>


On Jul 1, 2011, at 11:35 AM, jan at uos.de wrote:

> On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:
>>> Not sure about OS differentiation, seems...wrong?  Maybe disabled by
>>> default on bitcoind but on by default on bitcoin?
>> 
>> OK.  I mis-remembered the poll:
>>   http://forum.bitcoin.org/index.php?topic=4392.0
>> 
>> On by default	                       8 (20%)
>> Off by default	                       22 (55%)
>> On by default in the GUI, off by default in bitcoind	 10 (25%)
> 
> I just voted as well and now - with some extra votes in the meantime -
> it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on
> (9 + 13).
> 
> I'm in favor of turning it on by default in the GUI and leaving it off
> in bitcoind.
> 
> I don't like UPnP much, I find it exemplifies exactly what is wrong with
> computer security today: Convenience trumps security almost every time.

I don't think this should be a vote at all. Given Greg/Matt's numbers it is a necessity to ensure network stability over the next 90 days.

Also: the default will only apply to pre-built binaries, which bitcoind isn't one of, so for people running bitcoind this default doesn't matter at all. Just continue building without UPNP support as you're already doing.

-- 
Douglas Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/945335ad/attachment.sig>

From bitcoin-list at bluematt.me  Fri Jul  1 17:50:40 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 01 Jul 2011 19:50:40 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <C8D44AB3-1868-4255-9B6C-5AEE72C535C4@jrbobdobbs.org>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<20110701163558.GA7311@dax.lan.local>
	<C8D44AB3-1868-4255-9B6C-5AEE72C535C4@jrbobdobbs.org>
Message-ID: <1309542640.2541.20.camel@Desktop666>

Totally agree it really shouldnt be a vote, in the end UPnP is bad for
an individual (more bandwidth usage, etc), but good for the network.
That means people will vote against it, but in the end someone has to
make the tough decision and turn it on.

Also, bitcoind is prebuilt in the daemon folder on the download archives
(though Im not sure about OSX)

Matt
On Fri, 2011-07-01 at 12:47 -0500, Douglas Huff wrote:
> On Jul 1, 2011, at 11:35 AM, jan at uos.de wrote:
> 
> > On Fri, Jul 01, 2011 at 11:06:56AM -0400, Gavin Andresen wrote:
> >>> Not sure about OS differentiation, seems...wrong?  Maybe disabled by
> >>> default on bitcoind but on by default on bitcoin?
> >> 
> >> OK.  I mis-remembered the poll:
> >>   http://forum.bitcoin.org/index.php?topic=4392.0
> >> 
> >> On by default	                       8 (20%)
> >> Off by default	                       22 (55%)
> >> On by default in the GUI, off by default in bitcoind	 10 (25%)
> > 
> > I just voted as well and now - with some extra votes in the meantime -
> > it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on
> > (9 + 13).
> > 
> > I'm in favor of turning it on by default in the GUI and leaving it off
> > in bitcoind.
> > 
> > I don't like UPnP much, I find it exemplifies exactly what is wrong with
> > computer security today: Convenience trumps security almost every time.
> 
> I don't think this should be a vote at all. Given Greg/Matt's numbers it is a necessity to ensure network stability over the next 90 days.
> 
> Also: the default will only apply to pre-built binaries, which bitcoind isn't one of, so for people running bitcoind this default doesn't matter at all. Just continue building without UPNP support as you're already doing.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/2d1e6814/attachment.sig>

From dhuff at jrbobdobbs.org  Fri Jul  1 17:52:46 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Fri, 1 Jul 2011 12:52:46 -0500
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309542640.2541.20.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<20110701163558.GA7311@dax.lan.local>
	<C8D44AB3-1868-4255-9B6C-5AEE72C535C4@jrbobdobbs.org>
	<1309542640.2541.20.camel@Desktop666>
Message-ID: <00A6A17B-6EC0-48E5-9C9D-4076A4ABBDEA@jrbobdobbs.org>

On Jul 1, 2011, at 12:50 PM, Matt Corallo wrote:

> Also, bitcoind is prebuilt in the daemon folder on the download archives
> (though Im not sure about OSX)

It's not on OS X so I assumed it wasn't anywhere else. My bad.

-- 
Douglas Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110701/26d588a7/attachment.sig>

From gmaxwell at gmail.com  Fri Jul  1 17:59:47 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 1 Jul 2011 13:59:47 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <20110701163558.GA7311@dax.lan.local>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<20110701163558.GA7311@dax.lan.local>
Message-ID: <BANLkTin75ShqqPtv9hQ_ZJOrOQ7iGXrh8w@mail.gmail.com>

On Fri, Jul 1, 2011 at 12:35 PM,  <jan at uos.de> wrote:
> I just voted as well and now - with some extra votes in the meantime -
> it's 9 / 22 / 13. So exactly 50/50 between off (22) and some form of on
> (9 + 13).
>
> I'm in favor of turning it on by default in the GUI and leaving it off
> in bitcoind.
[snip]

I also don't like upnp, but I strongly support it being on because
leaving it off is not really an alternative.

IMO a forum poll is the wrong tool to use to decide if bitcoin keeps
working or not. ;) If the alternative were upnp vs some other way to
reasonably increase the number of listeners... e.g. "upnp always vs
upnp only if there has been no inbound connections in X minutes" that
would be another matter.

The bitcoin/bitcoind difference seems confusing to me, since when
someone complains about connectivity I'll have to remember to ask
which they are using... but enabling it for the gui is probably
sufficient in terms of network health.

But it'll probably happen anyways: I imagine most bitcoind users build
locally and don't bother installing the upnp library. I know I don't.

> At least no one seems
> to be concerned that Bitcoin (by default!) listens on port 8333. So I
> think it's only logical to extend that to work behind NATs as well.

Yea, listening at all is more interesting than upnp? though almost any
harm that listening can cause can also be caused by outgoing
connections since the protocol is symmetric.

(e.g. if you have an exploit, you don't need to connect to people, you
can just sibyl attack the network and exploit people who connect to
you? not quite as effective but I think enough that UPNP isn't a great
additional risk)

If you want to talk about worrying people about security:  The IRC
connections seriously set off alarm bells, especially when someone
looks and sees something indistinguishable from a botnet in IRC.  It's
been blocked by major ISP multiple times. So, until we get IRC
disabled nothing else is really all that significant from a security
hebe-geebies perspective.

On Fri, Jul 1, 2011 at 1:50 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:
> Totally agree it really shouldnt be a vote, in the end UPnP is bad for
> an individual (more bandwidth usage, etc), but good for the network.
> That means people will vote against it, but in the end someone has to
> make the tough decision and turn it on.

Well, users who don't like it can still disable listening? which is
healthier for the network right now than leaving listening on but not
actually working.

We can fix the incentive structure somewhat: We should give preference
in the form of preferred forwarding from/to to nodes that we've
connected to vs connected to us, potentially improved relay rules. Not
only does this given an incentives to listen (faster txn processing,
hearing about blocks earlier) but it also would reduce the
effectiveness of some DOS attacks.   Not something for 0.3.24,
however.



From luke at dashjr.org  Fri Jul  1 18:59:34 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 1 Jul 2011 14:59:34 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
Message-ID: <201107011459.36707.luke@dashjr.org>

On Thursday, June 30, 2011 11:23:56 PM Jeff Garzik wrote:
> This was posted to IRC:
> http://davids.webmaster.com/~davids/bitcoin-3diff.txt
> 
> Includes several useful features that all the big pools have been
> screaming for...  notably HTTP/1.1 keep-alive support.

"Native Long Polling Support" should be renamed. Real native long polling 
would be for solo miners.

"A fix from Luke Dash Jr." -- I have a branch with this; I didn't check that 
his version is up to date.

"RPC Turbocharge" -- If this incorporates only my changes for multithreading, 
it breaks JSON-RPC over SSL.




From bitcoin-list at bluematt.me  Fri Jul  1 22:03:37 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 02 Jul 2011 00:03:37 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309542640.2541.20.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<20110701163558.GA7311@dax.lan.local>
	<C8D44AB3-1868-4255-9B6C-5AEE72C535C4@jrbobdobbs.org>
	<1309542640.2541.20.camel@Desktop666>
Message-ID: <1309557817.2541.23.camel@Desktop666>

It would appear that we are all explaining why we agree...so, can we get
ACKs on UPnP by default on bitcoin and disabled by default on bitcoind
from everyone (specifically Gavin), as well as ACKs in general on 0.3.24
coming out with the originally listed things?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/73d8fb17/attachment.sig>

From dhuff at jrbobdobbs.org  Fri Jul  1 22:07:56 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Fri, 01 Jul 2011 17:07:56 -0500
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309557817.2541.23.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<20110701163558.GA7311@dax.lan.local>
	<C8D44AB3-1868-4255-9B6C-5AEE72C535C4@jrbobdobbs.org>
	<1309542640.2541.20.camel@Desktop666>
	<1309557817.2541.23.camel@Desktop666>
Message-ID: <a96642bc-3071-4e7c-974c-a84774f7e6d5@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



Matt Corallo <bitcoin-list at bluematt.me> wrote:

>It would appear that we are all explaining why we agree...so, can we
>get
>ACKs on UPnP by default on bitcoin and disabled by default on bitcoind
>from everyone (specifically Gavin), as well as ACKs in general on
>0.3.24
>coming out with the originally listed things?

All sounds good to me.
- --
Douglas Huff
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.8

iQIVAwUBTg5FPEPHkQabDWHPAQj1lg/+K+OfHZXNj/Rn4Ei+OmGjEywTZmOWiFVy
72MvaCNLkx1XW0G3ZJJsy211q5kssvDk4b0qdBraxjT2O7JE6rxEtPkkCaEv8zNv
ASpL1AdQ8PpOsYmot9Kl0XC3Hx4fmt89I18KwgEFqywDMssDQT1bWImE3xr628id
OHFDRxWv3PQ6unuD0gd0vj4L468il4tzeqnlCCG/bwZACdZAlgxoJDhdGgrpxZf7
zsUBhFwADqZ+KoQ9PJjonXHQj7g+UG2kdz/n3QGPXjAP0eLsqCLJrpJc5t3YEj8c
3bSfbKDGA1djKrXVDOhJ3laZGnIjCBbPuWhnPfoP91S23sFlHxIG9qynrfIF0yMU
pMVd9WF98yyjbUEiZon53YGKqBEhjKgx4VLMaYVqT1/kA1vpLDGV4hyqQPsWd3ML
LAp0kqBGzlosxX0PbcgQKX2gQ+P+9IjYeKb8XA9VbnLHJYdjZw+pSUz0RYYP3Fws
iOrypLgy79dEDyhafllQEAUDQi9XGhgBcpq1r683MD7JL3ip3e1x6LFDZQ9hA9Kk
MosjgFMMcCe3R+5bozbTE1Lrsz+ycl5hW4Zi5lszilP8duhvj/InLy/JEpS3qsGc
feb5hltQqIEcBItTe/XZCFwROdMjczAl/k65Gk1CSBgDCRda8et9img1t9Z9vGK/
qvwMoWzHcCc=
=78gQ
-----END PGP SIGNATURE-----




From jgarzik at exmulti.com  Fri Jul  1 23:42:41 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Fri, 1 Jul 2011 19:42:41 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
Message-ID: <BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>

OK I pulled a couple other minor bits.

The only remaining question, IMO, is whether or not we should pull

     Make UPnP default on Bitcoin but not on Bitcoind.
     https://github.com/bitcoin/bitcoin/pull/372

We are all kicking the can on this decision to Gavin I believe <grin>
I think the two strong arguments for upnp are
     - other p2p apps widely deployed, notably skype, use it
     - it will make a significant positive impact in the number of
       nodes supporting incoming connections

so my personal (read: not speaking for anyone else) opinion is to turn
on upnp for bitcoin _and_ bitcoind.

Other than that, here's what we're looking at for 0.3.24:

Dawid Spiechowicz (1):
      added polish translation

Doug Huff (1):
      Add OSX App bundle and correct build instructions to reflect reality.

Eric Hosmer (1):
      Updated Visual C++ makefile.

Gavin Andresen (1):
      Boost unit-testing framework.     make -f makefile.{unix,osx,mingw} test_b

Giel van Schijndel (2):
      rpc server: send '403 Forbidden' to rejected clients
      rpc: don't send 403 when using SSL to prevent DoS

Han Lin Yap (3):
      Double check translation and improved a translation string
      Update swedish translation
      Consistent Bitcoin example address

James Burkle (1):
      Edited init.cpp to include a check that -datadir exists

Jeff Garzik (4):
      FormatFullVersion: build fix related to recent translation improvement
      doc/release-process.txt: minor updates
      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t
      Enable DNS seeding by default.

Joerie de Gram (1):
      Fix connection failure debug output

Jordan Lewis (8):
      Only include irc.h when needed
      Only include db.h when we have to.
      Only included rpc.h when necessary
      Only include net.h when we have to
      Only include init.h when we have to
      Only include strlcpy.h when we have to
      Remove some globally unused headers from headers.h
      Only include certain boost headers if necessary.

Matt Corallo (3):
      Update translations and remove obsolete translations.
      Add new DNSSeed dnsseed.bluematt.me.
      Only use dnsseeds and static seeds when not on testnet.

Pieter Wuille (5):
      move wallet code to separate file
      CWallet class
      Bugfixes walletclass
      Fix segfault when creating new wallet
      Limit response to getblocks to half of output buffer size

Shane Wegner (1):
      Fix missing includes needed for Boost 1.46.

Wladimir J. van der Laan (1):
      add GetTotalBlocksEstimate() function, move magic number to constant

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Sat Jul  2 00:37:35 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Fri, 1 Jul 2011 20:37:35 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
Message-ID: <BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>

Hum, it sounds like there was some misunderstanding, on my part at
least.  On IRC, people are talking about a cherry-picked release,
basically 0.3.23 + a couple specific fixes, rather than what is
current in upstream git.  I had assumed people meant releasing current
git + some specific fixes not yet in git.

Wearing the Release Mangler hat, cherry-picked branches have a few
disadvantages:

* you're throwing away the testing people have done on upstream git
* the new branch would have zero testing, as most people have been
testing 0.3.23 or upstream git
* it would be a dead-end branch, never touched after release.  bug
reports for such a release might not necessarily be applicable to last
version or current upstream or anywhere in between.

That is the convention wisdom, anyway.  But to paraphrase Pirates of
the Caribbean, release management rules aren't really rules, they're
more like... guidelines.  :)

The cherry-picked 0.3.24 release, according to IRC wisdom, wouldn't
have to worry about shipping CWallet, which needs a fix or two from
https://github.com/bitcoin/bitcoin/pull/358

I can live with, and roll a release for, either (a) 0.3.23 + select
fixes or (b) current upstream + pull #358.  My preference is (b), but
this is a community and Holy Alpaca decision, not just a call I will
make on my own.

Comments welcome...

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From bitcoin-list at bluematt.me  Sat Jul  2 00:46:18 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 02 Jul 2011 02:46:18 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
	<BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
Message-ID: <1309567578.2541.26.camel@Desktop666>

Personally, I have little preference, sipa and gmaxwell fall on the side
of cherry-pick, but I think it might be good to do a broad-base test of
CWallet in 0.3.24 so potential bugs can be found in it before crypto and
0.4. In either case, I dont think we should spend too much time as this
is just a minor update release, just get it out the door so we can focus
on 0.4 (hopefully) without interruption.

Matt

On Fri, 2011-07-01 at 20:37 -0400, Jeff Garzik wrote:
> Hum, it sounds like there was some misunderstanding, on my part at
> least.  On IRC, people are talking about a cherry-picked release,
> basically 0.3.23 + a couple specific fixes, rather than what is
> current in upstream git.  I had assumed people meant releasing current
> git + some specific fixes not yet in git.
> 
> Wearing the Release Mangler hat, cherry-picked branches have a few
> disadvantages:
> 
> * you're throwing away the testing people have done on upstream git
> * the new branch would have zero testing, as most people have been
> testing 0.3.23 or upstream git
> * it would be a dead-end branch, never touched after release.  bug
> reports for such a release might not necessarily be applicable to last
> version or current upstream or anywhere in between.
> 
> That is the convention wisdom, anyway.  But to paraphrase Pirates of
> the Caribbean, release management rules aren't really rules, they're
> more like... guidelines.  :)
> 
> The cherry-picked 0.3.24 release, according to IRC wisdom, wouldn't
> have to worry about shipping CWallet, which needs a fix or two from
> https://github.com/bitcoin/bitcoin/pull/358
> 
> I can live with, and roll a release for, either (a) 0.3.23 + select
> fixes or (b) current upstream + pull #358.  My preference is (b), but
> this is a community and Holy Alpaca decision, not just a call I will
> make on my own.
> 
> Comments welcome...
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/88fd5bb9/attachment.sig>

From gmaxwell at gmail.com  Sat Jul  2 00:51:12 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 1 Jul 2011 20:51:12 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309567578.2541.26.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
	<BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
	<1309567578.2541.26.camel@Desktop666>
Message-ID: <BANLkTin4pUDX9EmNpPkgxg1i6MbkVME0GQ@mail.gmail.com>

On Fri, Jul 1, 2011 at 8:46 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:
> Personally, I have little preference, sipa and gmaxwell fall on the side
> of cherry-pick, but I think it might be good to do a broad-base test of
> CWallet in 0.3.24 so potential bugs can be found in it before crypto and
> 0.4. In either case, I dont think we should spend too much time as this
> is just a minor update release, just get it out the door so we can focus
> on 0.4 (hopefully) without interruption.

The fact that this will -rc before full release softens my concern some.

I did a lot of semi-automated testing of cwallet+crypto (in the
encrypted and non-encrypted states) which I really don't want to redo
for cwallet alone.



From dhuff at jrbobdobbs.org  Sat Jul  2 01:05:19 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Fri, 01 Jul 2011 20:05:19 -0500
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309567578.2541.26.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
	<BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
	<1309567578.2541.26.camel@Desktop666>
Message-ID: <e62e6db4-bf8a-4440-a034-aee6a21d193d@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

My only concern is: How well have the fixes in pull 358 been tested? Wasn't there an issue with the "" account found just last night?

Matt Corallo <bitcoin-list at bluematt.me> wrote:

>Personally, I have little preference, sipa and gmaxwell fall on the
>side
>of cherry-pick, but I think it might be good to do a broad-base test of
>CWallet in 0.3.24 so potential bugs can be found in it before crypto
>and
>0.4. In either case, I dont think we should spend too much time as this
>is just a minor update release, just get it out the door so we can
>focus
>on 0.4 (hopefully) without interruption.
>
>Matt
>
>On Fri, 2011-07-01 at 20:37 -0400, Jeff Garzik wrote:
>> Hum, it sounds like there was some misunderstanding, on my part at
>> least.  On IRC, people are talking about a cherry-picked release,
>> basically 0.3.23 + a couple specific fixes, rather than what is
>> current in upstream git.  I had assumed people meant releasing
>current
>> git + some specific fixes not yet in git.
>>
>> Wearing the Release Mangler hat, cherry-picked branches have a few
>> disadvantages:
>>
>> * you're throwing away the testing people have done on upstream git
>> * the new branch would have zero testing, as most people have been
>> testing 0.3.23 or upstream git
>> * it would be a dead-end branch, never touched after release.  bug
>> reports for such a release might not necessarily be applicable to
>last
>> version or current upstream or anywhere in between.
>>
>> That is the convention wisdom, anyway.  But to paraphrase Pirates of
>> the Caribbean, release management rules aren't really rules, they're
>> more like... guidelines.  :)
>>
>> The cherry-picked 0.3.24 release, according to IRC wisdom, wouldn't
>> have to worry about shipping CWallet, which needs a fix or two from
>> https://github.com/bitcoin/bitcoin/pull/358
>>
>> I can live with, and roll a release for, either (a) 0.3.23 + select
>> fixes or (b) current upstream + pull #358.  My preference is (b), but
>> this is a community and Holy Alpaca decision, not just a call I will
>> make on my own.
>>
>> Comments welcome...
>>
>
>------------------------------------------------------------------------------
>All of the data generated in your IT infrastructure is seriously
>valuable.
>Why? It contains a definitive record of application performance,
>security
>threats, fraudulent activity, and more. Splunk takes this data and
>makes
>sense of it. IT sense. And common sense.
>http://p.sf.net/sfu/splunk-d2d-c2_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development

- --
Douglas Huff
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.8

iQIVAwUBTg5uzkPHkQabDWHPAQhEDRAAikf9NX06CSjHOKRdErIEgixHgrcUJk85
GuUxmTIm305WNdxswVDwXhPAqi9PBr5jPYgowp4/UoiYprNHN/s9pPwqNyMI3Urn
SH7rXEA0yYuUU2b2VINY3cxHropu0cGH/EjXOXd+hDf6Dlf/lCsohz3BTcjUho4B
1esBTvhZngmEXaYSs5Hxd7CdbsJ8TVeib8aVGQN3GYc1H4I/MDFNpIsCVB0lAay2
93nczwFvkB/0KyU8vzua8atygdyGNTPWr0BOKvuJO39audokbZmpEREjLiqlIfxj
3MfcUZcOZ9or4Mq8Gq0ZLydpktKSKeZWpbpdzVEk/KQjz+zZhVZ+0jDj4FWIumcS
sd7AdPpQAVVb5uG4ZnALI9V1gmfdXB+yxo7nKdHPCSOTaYwcbHu2+FI7PVlVlh/4
IgcRtZT2p4xoNeuDU+QBinuCDsCPq14f0zPhIo7ZCzs/ruV3Y9BtBS7Ez8FnXIRp
yI06/AX9Bmw2DWBS5Jbu3u32osK1JWBdO9Hh1yVb+O1f9pqDPn7KYroqs4yAPZfx
iz6OaQWtG5Zm+UjoLQiVhPA2cU2Zm42LywtbW3sxm+pmwEx91MeTFCioqOdkz9RI
4NxkaWOlAcXlpr/WX5QoYVcio9GR9AnIeO6h6p4ov0PPI2WqgobrYQbtjdnqxZXi
Q12+wZuYiDo=
=STlK
-----END PGP SIGNATURE-----




From bitcoin-list at bluematt.me  Sat Jul  2 01:12:51 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 02 Jul 2011 03:12:51 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <e62e6db4-bf8a-4440-a034-aee6a21d193d@email.android.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
	<BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
	<1309567578.2541.26.camel@Desktop666>
	<e62e6db4-bf8a-4440-a034-aee6a21d193d@email.android.com>
Message-ID: <1309569171.2541.28.camel@Desktop666>

> My only concern is: How well have the fixes in pull 358 been tested? Wasn't there an issue with the "" account found just last night?
No, a bug was found where it no longer opened ("Error: unable to load
wallet.dat") when the ~/.bitcoin folder was empty/not present.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/a4fa1856/attachment.sig>

From gavinandresen at gmail.com  Sat Jul  2 02:05:01 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 1 Jul 2011 22:05:01 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <1309569171.2541.28.camel@Desktop666>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
	<BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
	<1309567578.2541.26.camel@Desktop666>
	<e62e6db4-bf8a-4440-a034-aee6a21d193d@email.android.com>
	<1309569171.2541.28.camel@Desktop666>
Message-ID: <BANLkTikhfZEhyRheN0NYn9M7hgRcSmgqBg@mail.gmail.com>

I think we should move forwards, not sideways-- git tip + whatever we
need to fix bugs in current tip is my preference.

RE: upnp:  I say pull Matt's patch (bitcoin=upnp, bitcoind=!upnp).

-- 
--
Gavin Andresen



From witchspace81 at gmail.com  Sat Jul  2 07:29:04 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 2 Jul 2011 07:29:04 +0000
Subject: [Bitcoin-development] Reconsider build system change?
Message-ID: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>

Hello,

Why again did we choose for autotools as future build system instead of
cmake?

- CMake generates native build scripts for Make (all platforms), XCode,
Visual Studio. Autoconf only does Make.

- CMake has a clearer syntax, m4/autotools is very convoluted

- CMake is very fast

- CMake is supported natively in Qt Creator in the QT SDK, and is used by
many other KDE/QT as well as other open source applications. Many people
discourage the use of autotools for new projects.

A CMake build system for bitcoin is already integrated into rpcminer,
available here:

http://luke.dashjr.org/programs/bitcoin/w/puddinpop-bitcoin-pool.git/tree

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/71e0983d/attachment.html>

From witchspace81 at gmail.com  Sat Jul  2 08:13:52 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 2 Jul 2011 08:13:52 +0000
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
Message-ID: <CAJNQ0ssbonoe9cukoeyfTHykPPQZH+u=-v=29qMfCp-BKJB9+g@mail.gmail.com>

Also important: it supports cross compiling:

http://www.cmake.org/Wiki/CMake_Cross_Compiling

JS

On Sat, Jul 2, 2011 at 7:29 AM, John Smith <witchspace81 at gmail.com> wrote:

> Hello,
>
> Why again did we choose for autotools as future build system instead of
> cmake?
>
> - CMake generates native build scripts for Make (all platforms), XCode,
> Visual Studio. Autoconf only does Make.
>
> - CMake has a clearer syntax, m4/autotools is very convoluted
>
> - CMake is very fast
>
> - CMake is supported natively in Qt Creator in the QT SDK, and is used by
> many other KDE/QT as well as other open source applications. Many people
> discourage the use of autotools for new projects.
>
> A CMake build system for bitcoin is already integrated into rpcminer,
> available here:
>
> http://luke.dashjr.org/programs/bitcoin/w/puddinpop-bitcoin-pool.git/tree
>
> JS
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/9df8688f/attachment.html>

From bitcoin-list at bluematt.me  Sat Jul  2 11:30:14 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 02 Jul 2011 13:30:14 +0200
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0ssbonoe9cukoeyfTHykPPQZH+u=-v=29qMfCp-BKJB9+g@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<CAJNQ0ssbonoe9cukoeyfTHykPPQZH+u=-v=29qMfCp-BKJB9+g@mail.gmail.com>
Message-ID: <1309606214.2285.54.camel@Desktop666>

I dont think anyone really made a conscious decision one way or the
other, someone submitted an autotools patch and thus people started
talking about when we were going to merge autotools.  That said, the
autotools stuff needs redone before it would be merged anyway. So it
would be up to whoever writes the build system. However, autotools is
more standard than CMake, and since its a shell script, you dont have to
install CMake which doesnt come standard on almost any distros (AFAIK).

Matt

On Sat, 2011-07-02 at 08:13 +0000, John Smith wrote:
> 
> Also important: it supports cross compiling:
> 
> http://www.cmake.org/Wiki/CMake_Cross_Compiling
> 
> JS
> 
> On Sat, Jul 2, 2011 at 7:29 AM, John Smith <witchspace81 at gmail.com>
> wrote:
>         Hello,
>         
>         Why again did we choose for autotools as future build system
>         instead of cmake?
>         
>         - CMake generates native build scripts for Make (all
>         platforms), XCode, Visual Studio. Autoconf only does Make.
>         
>         - CMake has a clearer syntax, m4/autotools is very convoluted
>         
>         - CMake is very fast
>         
>         - CMake is supported natively in Qt Creator in the QT SDK, and
>         is used by many other KDE/QT as well as other open source
>         applications. Many people discourage the use of autotools for
>         new projects.
>         
>         A CMake build system for bitcoin is already integrated into
>         rpcminer, available here:
>         
>         http://luke.dashjr.org/programs/bitcoin/w/puddinpop-bitcoin-pool.git/tree
>         
>         JS
> 
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security 
> threats, fraudulent activity, and more. Splunk takes this data and makes 
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/0bb0d8a0/attachment.sig>

From witchspace81 at gmail.com  Sat Jul  2 11:49:33 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 2 Jul 2011 11:49:33 +0000
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <1309606214.2285.54.camel@Desktop666>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<CAJNQ0ssbonoe9cukoeyfTHykPPQZH+u=-v=29qMfCp-BKJB9+g@mail.gmail.com>
	<1309606214.2285.54.camel@Desktop666>
Message-ID: <CAJNQ0stMwPbvqT8kfNh6_0v=Qk0O7g+5rLW7PMbkDpY4LGCPPw@mail.gmail.com>

On Sat, Jul 2, 2011 at 11:30 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> would be up to whoever writes the build system. However, autotools is
> more standard than CMake, and since its a shell script, you dont have to
> install CMake which doesnt come standard on almost any distros (AFAIK).
>

CMake is also very standard, used by many projects, and is available in many
distros.

For debians it's as simple as apt-get install cmake, which is not a big
problem as you need to install the other dependencies (such as boost) as
well to build.

Fedora/redhat also seems to have the package 'cmake'. I don't think there is
any modern distro that doesn't have it as a package.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/64f653a8/attachment.html>

From luke at dashjr.org  Sat Jul  2 14:50:08 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 2 Jul 2011 10:50:08 -0400
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
Message-ID: <201107021050.10563.luke@dashjr.org>

On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:
> Why again did we choose for autotools as future build system instead of
> cmake?

I don't really care much either way, but cmake doesn't follow the standard 
build procedure (./configure && make && make install), though I imagine 
./configure could be emulated with some script.



From witchspace81 at gmail.com  Sat Jul  2 16:50:14 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 2 Jul 2011 16:50:14 +0000
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <201107021050.10563.luke@dashjr.org>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<201107021050.10563.luke@dashjr.org>
Message-ID: <CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>

On Sat, Jul 2, 2011 at 2:50 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:
> > Why again did we choose for autotools as future build system instead of
> > cmake?
>
> I don't really care much either way, but cmake doesn't follow the standard
> build procedure (./configure && make && make install), though I imagine
> ./configure could be emulated with some script.
>

It would change the sequence to

cmake . && make && make install

So a shell script named 'configure' that starts 'cmake .' is the most easy
case :-) Probably it'd also need to pass through some command line args, for
example --prefix.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/e5aef2ef/attachment.html>

From luke at dashjr.org  Sat Jul  2 16:55:52 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 2 Jul 2011 12:55:52 -0400
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<201107021050.10563.luke@dashjr.org>
	<CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>
Message-ID: <201107021255.54088.luke@dashjr.org>

On Saturday, July 02, 2011 12:50:14 PM John Smith wrote:
> On Sat, Jul 2, 2011 at 2:50 PM, Luke-Jr <luke at dashjr.org> wrote:
> > On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:
> > > Why again did we choose for autotools as future build system instead of
> > > cmake?
> > 
> > I don't really care much either way, but cmake doesn't follow the
> > standard build procedure (./configure && make && make install), though I
> > imagine ./configure could be emulated with some script.
> 
> It would change the sequence to
> 
> cmake . && make && make install
> 
> So a shell script named 'configure' that starts 'cmake .' is the most easy
> case :-) Probably it'd also need to pass through some command line args,
> for example --prefix.

And --datadir --mandir --randomobscurecrap CXXFLAGS=-O9, etc
Don't forget --help listing all the useful options... that's the big thing I 
miss with CMake-stuff.



From dhuff at jrbobdobbs.org  Sat Jul  2 17:05:51 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Sat, 2 Jul 2011 12:05:51 -0500
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<201107021050.10563.luke@dashjr.org>
	<CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>
Message-ID: <1DBB0EED-7A9C-46AC-ABE2-6214ABD3FE9A@jrbobdobbs.org>

Cmake is just as bad as autotools, just with a different syntax and more "buzz" behind it right this second. I don't see any advantage to it over autotools unless you're not familiar with either and even then I wouldn't really call it an advantage. It's just different.

It also requires a dependency that isn't installed by default anywhere, as already mentioned, and is less known outside of some obscure qt/kde circles and so finding people who are familiar with it and are willing to maintain it is more difficult. 

Autotools is the devil you know.

You'll probably throw out that mysql and compiz have switched to it, but really, those projects aren't something that should be emulated by anyone. Ever.

On Jul 2, 2011, at 11:50 AM, John Smith wrote:

> On Sat, Jul 2, 2011 at 2:50 PM, Luke-Jr <luke at dashjr.org> wrote:
> On Saturday, July 02, 2011 3:29:04 AM John Smith wrote:
> > Why again did we choose for autotools as future build system instead of
> > cmake?
> 
> I don't really care much either way, but cmake doesn't follow the standard
> build procedure (./configure && make && make install), though I imagine
> ./configure could be emulated with some script.
> 
> It would change the sequence to
> 
> cmake . && make && make install
> 
> So a shell script named 'configure' that starts 'cmake .' is the most easy case :-) Probably it'd also need to pass through some command line args, for example --prefix.
> 
> JS
> 
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security 
> threats, fraudulent activity, and more. Splunk takes this data and makes 
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-- 
Douglas Huff





From witchspace81 at gmail.com  Sat Jul  2 17:31:54 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 2 Jul 2011 17:31:54 +0000
Subject: [Bitcoin-development]  Reconsider build system change?
In-Reply-To: <CAJNQ0su0jtaFz6abS+H24d7dqKoWkugct1yQLeVyXTgr0rkXXA@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<201107021050.10563.luke@dashjr.org>
	<CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>
	<1DBB0EED-7A9C-46AC-ABE2-6214ABD3FE9A@jrbobdobbs.org>
	<CAJNQ0su0jtaFz6abS+H24d7dqKoWkugct1yQLeVyXTgr0rkXXA@mail.gmail.com>
Message-ID: <CAJNQ0stDg7qCxb8f-KjfP7k0RyM0dpHETkf==uswOzm4DstSUQ@mail.gmail.com>

On Sat, Jul 2, 2011 at 5:05 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:

> Cmake is just as bad as autotools, just with a different syntax and more
> "buzz" behind it right this second. I don't see any advantage to it over
> autotools unless you're not familiar with either and even then I wouldn't
> really call it an advantage. It's just different.
>

So, what about native build script generation for other platforms? autotools
can only generate makefiles (with at least two intermediate code generation
steps), which is quite limited.

IMO cmake is simple and elegant compared to the autotools monster. I don't
see why it would be "just as bad". And I have quite some experience with
both systems. Autotools is a hell to debug. cmake certainly isn't perfect,
but at least it's a leap forward.

It also requires a dependency that isn't installed by default anywhere, as
> already mentioned, and is less known outside of some obscure qt/kde circles
> and so finding people who are familiar with it and are willing to maintain
> it is more difficult.
>

Yes, apart from that only obscure projects such as LLVM,  Blender, and
OpenCV are using it. Nothing of any importance.

BTW for cmake there is "ccmake" which is even better than configure --help
as it offers an interactive interface for configuration.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/efd3c1e5/attachment.html>

From dhuff at jrbobdobbs.org  Sat Jul  2 17:45:02 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Sat, 2 Jul 2011 12:45:02 -0500
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0stDg7qCxb8f-KjfP7k0RyM0dpHETkf==uswOzm4DstSUQ@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<201107021050.10563.luke@dashjr.org>
	<CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>
	<1DBB0EED-7A9C-46AC-ABE2-6214ABD3FE9A@jrbobdobbs.org>
	<CAJNQ0su0jtaFz6abS+H24d7dqKoWkugct1yQLeVyXTgr0rkXXA@mail.gmail.com>
	<CAJNQ0stDg7qCxb8f-KjfP7k0RyM0dpHETkf==uswOzm4DstSUQ@mail.gmail.com>
Message-ID: <65026C81-A96E-490A-90D2-794A10C2A680@jrbobdobbs.org>

On Jul 2, 2011, at 12:31 PM, John Smith wrote:
> So, what about native build script generation for other platforms? autotools can only generate makefiles (with at least two intermediate code generation steps), which is quite limited. 

This would be true if gmake didn't build/run basically everywhere; but, it does.

> IMO cmake is simple and elegant compared to the autotools monster. I don't see why it would be "just as bad". And I have quite some experience with both systems. Autotools is a hell to debug. cmake certainly isn't perfect, but at least it's a leap forward.

Don't get me wrong, I'm not defending autotools' design or implementation. It is; however, more ubiquitous and understood by a much wider audience.

> BTW for cmake there is "ccmake" which is even better than configure --help as it offers an interactive interface for configuration.

I would say that's actually a mark against cmake. If you need a gui to select build options because your cli doesn't have proper help output something is wrong.

If you're willing to setup and maintain a cmake build environment I wouldn't say it should be rejected outright. Speculating about it without an implementation to compare seems like a waste of time.

Especially when jaromil already has a mostly-functional autotools setup. It needs tweaking still and some changes to catch up and rebase, but it works. He also already did the tedious work to rearrange the source tree to make adding any auto-configuration tool for the build environment easy to drop in place. (Which is already merged.)

-- 
Douglas Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/a842180a/attachment.sig>

From witchspace81 at gmail.com  Sat Jul  2 18:03:49 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 2 Jul 2011 18:03:49 +0000
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <65026C81-A96E-490A-90D2-794A10C2A680@jrbobdobbs.org>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<201107021050.10563.luke@dashjr.org>
	<CAJNQ0svyJcob=gfWfi7YuLWTdbLokrFyDGnMFtYLRk_29r-DZw@mail.gmail.com>
	<1DBB0EED-7A9C-46AC-ABE2-6214ABD3FE9A@jrbobdobbs.org>
	<CAJNQ0su0jtaFz6abS+H24d7dqKoWkugct1yQLeVyXTgr0rkXXA@mail.gmail.com>
	<CAJNQ0stDg7qCxb8f-KjfP7k0RyM0dpHETkf==uswOzm4DstSUQ@mail.gmail.com>
	<65026C81-A96E-490A-90D2-794A10C2A680@jrbobdobbs.org>
Message-ID: <CAJNQ0sv4i+wTQeGBmmfMpUL-mUB2a6KX1NddF2K4Lecs4ofuAA@mail.gmail.com>

On Sat, Jul 2, 2011 at 5:45 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:

> On Jul 2, 2011, at 12:31 PM, John Smith wrote:
> > So, what about native build script generation for other platforms?
> autotools can only generate makefiles (with at least two intermediate code
> generation steps), which is quite limited.
>
> This would be true if gmake didn't build/run basically everywhere; but, it
> does.
>

It doesn't for the native build systems on at least Windows and OSX. Yes,
you can get gmake to run, but it's a hack.


> I would say that's actually a mark against cmake. If you need a gui to
> select build options because your cli doesn't have proper help output
> something is wrong.
>

You don't need to use the UI. It's just a convenience. Command line can
simply be used if you want.


> If you're willing to setup and maintain a cmake build environment I
> wouldn't say it should be rejected outright. Speculating about it without an
> implementation to compare seems like a waste of time.
>

As I said in my opening post, there *is* a cmake build system implemented
for bitcoin.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110702/8f59554f/attachment.html>

From luke at dashjr.org  Sat Jul  2 18:12:18 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 2 Jul 2011 14:12:18 -0400
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0sv4i+wTQeGBmmfMpUL-mUB2a6KX1NddF2K4Lecs4ofuAA@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<65026C81-A96E-490A-90D2-794A10C2A680@jrbobdobbs.org>
	<CAJNQ0sv4i+wTQeGBmmfMpUL-mUB2a6KX1NddF2K4Lecs4ofuAA@mail.gmail.com>
Message-ID: <201107021412.20483.luke@dashjr.org>

On Saturday, July 02, 2011 2:03:49 PM John Smith wrote:
> As I said in my opening post, there *is* a cmake build system implemented
> for bitcoin.

puddinpop's stuff is all ancient/obsolete. If you want people to consider it, 
you should probably make a new branch.



From jgarzik at exmulti.com  Sat Jul  2 21:07:25 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 2 Jul 2011 17:07:25 -0400
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTikhfZEhyRheN0NYn9M7hgRcSmgqBg@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
	<BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
	<1309567578.2541.26.camel@Desktop666>
	<e62e6db4-bf8a-4440-a034-aee6a21d193d@email.android.com>
	<1309569171.2541.28.camel@Desktop666>
	<BANLkTikhfZEhyRheN0NYn9M7hgRcSmgqBg@mail.gmail.com>
Message-ID: <BANLkTim30QSJcV=kqfr=hby4Q9RaoyFREw@mail.gmail.com>

On Fri, Jul 1, 2011 at 10:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I think we should move forwards, not sideways-- git tip + whatever we
> need to fix bugs in current tip is my preference.
>
> RE: upnp: ?I say pull Matt's patch (bitcoin=upnp, bitcoind=!upnp).

Just tagged v0.3.24rc1...

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From bitcoin-list at bluematt.me  Sun Jul  3 01:58:40 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 03 Jul 2011 03:58:40 +0200
Subject: [Bitcoin-development] 0.3.24
In-Reply-To: <BANLkTim30QSJcV=kqfr=hby4Q9RaoyFREw@mail.gmail.com>
References: <1309478838.3689.25.camel@Desktop666>
	<20110701080042.GA657@ulyssis.org>
	<BANLkTim-QWvtfL65mo3uW7ESiehKOmHjtw@mail.gmail.com>
	<BANLkTi=DWUhGmoHcQB5EPZHF71JE71gcTg@mail.gmail.com>
	<1309524016.2541.0.camel@Desktop666>
	<BANLkTimobc7471uBMLBecYT3vz0GO6RLzQ@mail.gmail.com>
	<BANLkTinqcaDMci-YmYHpDd1sZ_RT9pEOvw@mail.gmail.com>
	<BANLkTi=zG4o5igBFX=4Yg340B0QGF42RBQ@mail.gmail.com>
	<1309567578.2541.26.camel@Desktop666>
	<e62e6db4-bf8a-4440-a034-aee6a21d193d@email.android.com>
	<1309569171.2541.28.camel@Desktop666>
	<BANLkTikhfZEhyRheN0NYn9M7hgRcSmgqBg@mail.gmail.com>
	<BANLkTim30QSJcV=kqfr=hby4Q9RaoyFREw@mail.gmail.com>
Message-ID: <1309658320.10530.82.camel@Desktop666>

Sorry this took so long, I got distracted...
Anyway 0.3.24 RC1 builds available at
http://dl.dropbox.com/u/29653426/Bitcoin%200.3.24%20RC1.tar.bz2
SHA1:
bb829e037aef86c5d9da384c0ff3c91ce8b11d5a  Bitcoin 0.3.24 RC1.tar.bz2

Builds gitian signed and email signed as always.

Notes:
Couple things need fixed up before release wrt build engineering:
http://forum.bitcoin.org/index.php?topic=24841.0 (still haven't had a
chance to dig up a copy of Win98 and spin up a VM to test any results of
this one).
Build on Ubuntu 8.04 instead of 10.04 so that oder libcs can work (and
do thorough testing of that resulting binary on newer libcs specifically
openSUSE 11.04, see http://forum.bitcoin.org/index.php?topic=21767.0 )

Sorry to hold up release on this crap that is still unfixed after
0.3.21...

Matt


On Sat, 2011-07-02 at 17:07 -0400, Jeff Garzik wrote:
> On Fri, Jul 1, 2011 at 10:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> > I think we should move forwards, not sideways-- git tip + whatever we
> > need to fix bugs in current tip is my preference.
> >
> > RE: upnp:  I say pull Matt's patch (bitcoin=upnp, bitcoind=!upnp).
> 
> Just tagged v0.3.24rc1...
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110703/fa27f944/attachment.sig>

From jgarzik at exmulti.com  Sun Jul  3 03:09:11 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 2 Jul 2011 23:09:11 -0400
Subject: [Bitcoin-development] Bitcoin v0.3.24 release candidate available
Message-ID: <CA+8xBpeJcz-RJ9EtDKB-svu=chBQUNzsBPRi8ts+8-0bGHnFNw@mail.gmail.com>

Bitcoin v0.3.24 release candidate #1 is now available for download at
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/test/

This is another bug fix release.  We had hoped to have wallet
encryption ready for release, but more urgent fixes for existing
clients were needed.  Wallet encryption is ready for testing at
https://github.com/bitcoin/bitcoin/pull/352 for the git-savvy, and
-hopefully- will follow shortly in the next release, v0.4.

Notable fixes in v0.3.24:

F1) Block downloads were failing or taking unreasonable amounts of
time to complete, because the increased size of the block chain was
bumping up against some earlier buffer-size DoS limits.
F2) Fix crash caused by loss/lack of network connection.

Notable changes in v0.3.24:
C1) DNS seeding enabled by default.
C2) UPNP enabled by default in the GUI client.  The percentage of
bitcoin clients that accept incoming connections is quite small, and
that is a problem.  This should help.  bitcoind, and unofficial
builds, are unchanged (though we encourage use of "-upnp" to help the
network!)
C3) Initial unit testing framework.  Bitcoin sorely needs automated
tests, and this is a beginning.  Contributions welcome.
C4) Internal wallet code cleanup.  While invisible to an end user,
this change provides the basis for v0.4's wallet encryption.

Full changelog ("git shortlog v0.3.23.."):

Dawid Spiechowicz (1):
      added polish translation

Doug Huff (1):
      Add OSX App bundle and correct build instructions to reflect reality.

Eric Hosmer (3):
      Updated Visual C++ makefile.
      Further updated Visual C++ makefile.
      Add keystore.h to makefile.vs's header list.

Gavin Andresen (1):
      Boost unit-testing framework.     make -f makefile.{unix,osx,mingw} test_b

Giel van Schijndel (2):
      rpc server: send '403 Forbidden' to rejected clients
      rpc: don't send 403 when using SSL to prevent DoS

Han Lin Yap (3):
      Double check translation and improved a translation string
      Update swedish translation
      Consistent Bitcoin example address

James Burkle (1):
      Edited init.cpp to include a check that -datadir exists

Jeff Garzik (6):
      FormatFullVersion: build fix related to recent translation improvement
      doc/release-process.txt: minor updates
      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t
      Enable DNS seeding by default.
      Bump version to 0.3.24.
      Bump OSX version to 0.3.24 (missed in previous commit)

Joerie de Gram (1):
      Fix connection failure debug output

Jordan Lewis (8):
      Only include irc.h when needed
      Only include db.h when we have to.
      Only included rpc.h when necessary
      Only include net.h when we have to
      Only include init.h when we have to
      Only include strlcpy.h when we have to
      Remove some globally unused headers from headers.h
      Only include certain boost headers if necessary.

Matt Corallo (5):
      Update translations and remove obsolete translations.
      Add new DNSSeed dnsseed.bluematt.me.
      Only use dnsseeds and static seeds when not on testnet.
      Make UPnP default on Bitcoin but not on Bitcoind.
      Give more detailed error messages for connection failure.

Pieter Wuille (5):
      move wallet code to separate file
      CWallet class
      Bugfixes walletclass
      Fix segfault when creating new wallet
      Limit response to getblocks to half of output buffer size

Shane Wegner (1):
      Fix missing includes needed for Boost 1.46.

St?phane Gimenez (1):
      Fix AddressBook syncrhonization between a CWallet and CWalletDB

Wladimir J. van der Laan (1):
      add GetTotalBlocksEstimate() function, move magic number to constant

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

5340ee00a777e5b87a0d742ea931760916a1fac4  bitcoin-0.3.24rc1-linux.tar.gz
f7f941a4fc33da7225262ccaad6147352dd2b342  bitcoin-0.3.24rc1-src.tar.gz
efcdf578bb60a056c43f8dd40505461ea7d7c930  bitcoin-0.3.24rc1-win32-setup.exe
0b2560b3facba4301562441f6b8dea9eb2249d77  bitcoin-0.3.24rc1-win32.zip
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQIVAwUBTg/c7Nodwg8tvwyoAQIptA/+M4fSPxk994B2+CeVGX3lt0MzxQpaNpJN
elZjgf2E7gp6sBFxkDGeL2ZtWl9Txswco8UzrehVCY8ne7Q2FrBWgXs6wibwLlWb
La0ll2rA8iGysyJPgd9exaN97Etq/onBjxDYHmlKYLeH/VFdIj3LfO2CWPBGRayD
QqQzT59glNqObLN81Bnj0nHChZS682ycsgT+iGppCeynz5URhxO0IZ3FCj0PFnW1
jbUki5gTCgiuDth7ADymfd/lqN3LeZJYppd9BzjrSSUTujwvhyPUppfUMoYV8Tm+
Tg/zskTRiYcTxE182lmTYH1vKGSV8AQ5wT0JkB/HbhXqMRJgMr5Fly8tJqYKKeg9
XQvP2l0flcsUuzCecFiYeltc74P4dSe04EzYStavfYYdrW6ftkWk08yfeLb7owOI
aPgXGJkUTsWIu/Ld4GrvdXtlSeuowXkjhdjiKTgBzKuWl8KGOLVSFLmFz24LBYjK
FUxLmc1S2p71kQ2Aq+t97WhA7FKpLbf2TmHAv2KobujWDCIzJ96duGbvZpg1bYNy
Np58E31x2gGTJ7Wswddhs0ZSnIcEvZ5U6bohlpzPTKXLUxEFtg1ERoYWt/htjTCV
DKV2I6VpBww2U9atOiIe93+O6f9aYDro9HQXsLeyFHbgx//2fiuHzsvWwIoey/k4
zeUIPUe5TQk=
=O8dr
-----END PGP SIGNATURE-----



From pieter.wuille at gmail.com  Sun Jul  3 10:44:17 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 3 Jul 2011 12:44:17 +0200
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
Message-ID: <20110703104415.GA2034@ulyssis.org>

On Sat, Jul 02, 2011 at 07:29:04AM +0000, John Smith wrote:
> Hello,
> 
> Why again did we choose for autotools as future build system instead of
> cmake?

I have no preference for any particular project build system. If a system
* is easy enough to set up (included in standard repositories, eg.)
* allows building of the bitcoin codebase on several linux distro's
* does cross-compilation to windows
* supports osx
* is easy to maintain
* it is not too hard to adapt other GUI's to use it (bitcoin-qt,
  maybe others as well, i hear about a cocoabitcoin?)
* gets implemented and tested to support all of the above
.. i have no problem with choosing that system for future versions.

-- 
Pieter




From jan at uos.de  Sun Jul  3 16:29:05 2011
From: jan at uos.de (Jan Vornberger)
Date: Sun, 3 Jul 2011 18:29:05 +0200 (CEST)
Subject: [Bitcoin-development] Speeding up "getbalance <account>" calls
In-Reply-To: <BANLkTi=eSgC0T_mKn660dZv1h+g-Z9TU+g@mail.gmail.com>
References: <20110623215143.GA3351@dax.lan.local>
	<BANLkTi=eSgC0T_mKn660dZv1h+g-Z9TU+g@mail.gmail.com>
Message-ID: <48918.130.226.56.2.1309710545.squirrel@webmail.uni-osnabrueck.de>

Hey!

John Smith wrote:
> I think the easiest way to speed this up would be to scan the wallet every
> time a block comes in or something else changes in the block chain (or, if
> you prefer, some pre-set interval of N minutes). Then go over the entire
> wallet and the accumulate balances for all accounts. This could be done in
> amortized linear time using a hash_map.

That was a good suggestion - thanks! I implemented it along these lines
and now the Instawallet server can breath again. Well, more or less at
least, as now "sendfrom" starts acting up and I have to look into that
next.

Here is a branch with the code for the cache:
https://github.com/javgh/bitcoin/tree/balancecache . It's currently based
on a somewhat old version of the codebase as I'm running with a number of
other modifications. So it won't easily apply to something newer. I hope
to be able to switch to a recent version at some point (mostly hoping for
some improvements in the fee handling area before I do that) and then I
can hopefully provide a cleaner version of this patch. For now, I just
document it here for anyone who might need this as well and can piece it
together themselves (I attached a patch file).

Basically I create a list of all account balances every time a new a new
block comes in or a transaction that affects my wallet appears. The list
is stored in a "map" right now. This seems fast enough for me. I didn't
use a hash map for now, because I'm fairly new to C++ and was a little
confused on what to use (is there a "standard" hash map to use in the STL?
or do people use boost or what?). But my VPS is low on memory anyway, so I
guess that's kind of a justification as well to go for a tree-based
implementation of map.

Cheers!
Jan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: balancecache.patch
Type: text/x-patch
Size: 8184 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110703/16ead949/attachment.bin>

From jan at uos.de  Mon Jul  4 11:40:28 2011
From: jan at uos.de (jan at uos.de)
Date: Mon, 4 Jul 2011 13:40:28 +0200
Subject: [Bitcoin-development] Speeding up "getbalance <account>" calls
In-Reply-To: <20431_1309711872_p63GpBTM023936_48918.130.226.56.2.1309710545.squirrel@webmail.uni-osnabrueck.de>
References: <20110623215143.GA3351@dax.lan.local>
	<BANLkTi=eSgC0T_mKn660dZv1h+g-Z9TU+g@mail.gmail.com>
	<20431_1309711872_p63GpBTM023936_48918.130.226.56.2.1309710545.squirrel@webmail.uni-osnabrueck.de>
Message-ID: <20110704114028.GA3369@dax.lan.local>

Another quick update:

On Sun, Jul 03, 2011 at 06:29:05PM +0200, Jan Vornberger wrote:
> as now "sendfrom" starts acting up and I have to look into that
> next.

I realized why this happens: Sendfrom triggers a rebuild of the cache
and couldn't return before the rebuild was complete.

So I changed the approach slightly: A complete rebuild of the cache will
only happen on new blocks (in case reorgs happen) whereas on new wallet
transactions the cache will just be adjusted incrementally. Seems to
work fine so far (every 4000 calls or so I double check the cache by
running a full calculation and compare the results. No mismatch happened
so far). The changes are pushed to the github branch I linked to.

One caveat I realized: The cache will not work correctly with the RPC
command "move" as I haven't implemented the necessary adjustments.
Shouldn't be too difficult, but since I don't use that command, I
haven't done this (yet).

Regards!
Jan



From bitcoin-list at bluematt.me  Mon Jul  4 17:52:53 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 04 Jul 2011 19:52:53 +0200
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
Message-ID: <1309801974.3423.80.camel@Desktop666>

joric rightly points out that there are currently backward-compatibility
issues with Wallet encryption. As it stands now:
In version 0.3.23, Bitcoin dies with "ReserveKeyFromKeyPool() : unknown
key in key pool" after writing one unencrypted private key to the
(otherwise) encrypted wallet.
In version 0.3.22 (and I'd assume prior versions as well), Bitcoin opens
fine and displays transactions, however shows a total balance of what is
help only in unencrypted keys (of which it also writes a minimum of one
before opening), and each transaction shows only confirmation count,
date, no description, and a debit/credit of 0.00.  When you try to
perform any action which attempts to read keypool, you get the
"ReserveKeyFromKeyPool() : unknown key in key pool" error.

So, the question is how best to work around Bitcoin's overwillingness to
load wallets with keys that it has no clue about.

There were several suggestions of renaming wallet.dat for encrypted
wallets.  Obviously this has many advantages and disadvantages.  It
breaks backup scripts, old clients will now create a new wallet instead
of using the old one, potentially causing users to (wrongfully) assume
their wallet is encrypted if they accidentally start opening an old
version.  Im not a huge fan of this one, mostly because if a user opens
an old version, they will get a blank transactionless wallet which IMO
is worse than an odd error message.  "My wallet is gone, Ive lost
everything, wtf???" vs "My wallet got corrupted, crap need see what I
can recover from it, I hope I dont lose much"

Another option is to simply do nothing, and let old clients get mad.  If
a user goes back to an old client, it cant spend coins using the
encrypted keys no matter what is done.  If the new client handles
multiple key types gracefully, however, it can simply say "Hey, I see
you have a mix of key types here, can I have your password to encrypt
the unencrypted ones?" and move on with no harm done.  IMO, I would much
prefer old users see error messages and be unable to use their wallet,
then accidentally create multiple wallets, and give them a screen making
them think their coins are all gone.  Comments?

PS. to prevent this in the future, Bitcoin really shouldn't continue on
as if nothing had happened when faced with unknown keys:
https://github.com/bitcoin/bitcoin/pull/378

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110704/8cb262e3/attachment.sig>

From gavinandresen at gmail.com  Mon Jul  4 18:23:53 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 4 Jul 2011 14:23:53 -0400
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <1309801974.3423.80.camel@Desktop666>
References: <1309801974.3423.80.camel@Desktop666>
Message-ID: <CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>

RE: "You have some unencrypted keys, should I encrypt them for you?"

That re-opens an "attacker packs the keypool with keypairs that they
know about" (if I can read/write wallet.dat, then I can delete
encrypted keypool keys and insert a bunch of unencrypted keypool keys
that I know how to spend, and rely on the user to click "OK" because
users are trained to just click "OK").

RE: breaking backup scripts:  if they use the backupwallet  RPC
command, then they will Just Work.

0.4 and later could, on wallet encryption, create a wallet_e.dat
(encrypted wallet).  Then truncate wallet.dat and set its
file-permissions to 000, so if old versions of bitcoin OR any dumb
wallet backup scripts try to read it they fail.

RE: future-proofing: wallet.dat contains nFileVersion (version of
bitcoin that last wrote the wallet).  Adding a nMinVersion that
specifies "you must be at least THIS version to read this file" seems
like a good idea so if you have version 0.4 or later future wallet
upgrades give you a reasonable message if you try to downgrade after
an incompatible change.

-- 
--
Gavin Andresen



From bitcoin-list at bluematt.me  Mon Jul  4 20:39:32 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 04 Jul 2011 22:39:32 +0200
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
Message-ID: <1309811972.29355.19.camel@Desktop666>

For some reason my mail client let me respond off-list here, didnt mean
to...

On Mon, 2011-07-04 at 14:23 -0400, Gavin Andresen wrote:
> RE: "You have some unencrypted keys, should I encrypt them for you?"
> 
> That re-opens an "attacker packs the keypool with keypairs that they
> know about" (if I can read/write wallet.dat, then I can delete
> encrypted keypool keys and insert a bunch of unencrypted keypool keys
> that I know how to spend, and rely on the user to click "OK" because
> users are trained to just click "OK").
Not strictly true, if the keys are loaded, but not added to
mapAddressBook or setKeyPool, they wont be used for any new
transactions, or shown to the user, but the user is still able to
receive Bitcoins to those keys.
> RE: breaking backup scripts:  if they use the backupwallet  RPC
> command, then they will Just Work.
Not really, most backupwallet-based scripts will backup wallet.dat,
encrypt wallet.dat, upload wallet.dat.  Now it backups up wallet.dat and
the encrypt part fails because there is no wallet.dat, only
wallet_e.dat.  If we rename to wallet.dat on output, now the user's
restore might not work...
> 
> 0.4 and later could, on wallet encryption, create a wallet_e.dat
> (encrypted wallet).  Then truncate wallet.dat and set its
> file-permissions to 000, so if old versions of bitcoin OR any dumb
> wallet backup scripts try to read it they fail.
True, but that is only a solution for Linux and Mac and then you are
back to unreadable error on Windows load and other unforeseeable errors
for odd scripts.

I suppose I just really dont like the idea of renaming wallet.dat,
everything knows the filename and is used to it.
> 
> RE: future-proofing: wallet.dat contains nFileVersion (version of
> bitcoin that last wrote the wallet).  Adding a nMinVersion that
> specifies "you must be at least THIS version to read this file" seems
> like a good idea so if you have version 0.4 or later future wallet
> upgrades give you a reasonable message if you try to downgrade after
> an incompatible change.
Yep, just something simple that says, no reading this to old versions is
needed, IMO the older version should freak out if it sees keys that it
doesn't know about (as it could also indicate wallet corruption in some
rare cases), but nMinVersion works just as well, in any case this should
only very rarely be a problem...how often will we change the wallet
format?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110704/65711d4e/attachment.sig>

From gmaxwell at gmail.com  Mon Jul  4 20:59:07 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 4 Jul 2011 16:59:07 -0400
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
Message-ID: <CAAS2fgRQApH+ObyXpwV0bCEv7q7BNs6HtzcBOo6+mixCwY93cw@mail.gmail.com>

On Mon, Jul 4, 2011 at 2:23 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> 0.4 and later could, on wallet encryption, create a wallet_e.dat
> (encrypted wallet). ?Then truncate wallet.dat and set its
> file-permissions to 000, so if old versions of bitcoin OR any dumb
> wallet backup scripts try to read it they fail.
[snip]

Rewriting the old one before erasing it and replacing it with a
placeholder might increase the chances that the old unencrypted keying
material was not left on disk.



From dhuff at jrbobdobbs.org  Mon Jul  4 21:18:36 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Mon, 4 Jul 2011 16:18:36 -0500
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
Message-ID: <5196CA67-B84A-4413-BE6D-504811EAA954@jrbobdobbs.org>


On Jul 4, 2011, at 1:23 PM, Gavin Andresen wrote:
> RE: breaking backup scripts:  if they use the backupwallet  RPC
> command, then they will Just Work.

I'd go a step further and say that, since import/export is planned to get merged at about the same time, intentionally breaking unsafe/badly designed backup mechanisms is actually desirable.

-- 
Douglas Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110704/a85cd314/attachment.sig>

From gmaxwell at gmail.com  Mon Jul  4 22:30:12 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 4 Jul 2011 18:30:12 -0400
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <5196CA67-B84A-4413-BE6D-504811EAA954@jrbobdobbs.org>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
	<5196CA67-B84A-4413-BE6D-504811EAA954@jrbobdobbs.org>
Message-ID: <CAAS2fgSNdnT+7qvBRnqMTG3Pnciw+U81GhgaTD9=-7bdpPyiFQ@mail.gmail.com>

On Mon, Jul 4, 2011 at 5:18 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
>
> On Jul 4, 2011, at 1:23 PM, Gavin Andresen wrote:
>> RE: breaking backup scripts: ?if they use the backupwallet ?RPC
>> command, then they will Just Work.
>
> I'd go a step further and say that, since import/export is planned to get merged at about the same time, intentionally breaking unsafe/badly designed backup mechanisms is actually desirable.

Silently breaking them, not so much.

Or do you think people are going to notice that they've started
backing up a zero byte file?



From bitcoin-list at bluematt.me  Tue Jul  5 01:10:39 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 05 Jul 2011 03:10:39 +0200
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <1309811972.29355.19.camel@Desktop666>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
	<1309811972.29355.19.camel@Desktop666>
Message-ID: <1309828239.29355.28.camel@Desktop666>

Despite this being quick, I really want to get 0.3.24 out and rolling so
that we have us much lead time on 0.4 as possible so that any solution
to this problem that is better in 0.3.24 can be in as many hands as
possible, and so that the network issues can be resolved.

All that needs to happen for that is to agree on either
https://github.com/bitcoin/bitcoin/pull/378 or
https://github.com/bitcoin/bitcoin/pull/381 thus, I would ask that we
get acks on those and then continue this discussion.  Frankly, I prefer
378 as it is simpler and means that you dont have to keep track of what
features you have or have not used in a wallet, but instead just write
and let the keys take care of themselves.  However, I'm game for either,
I just want to get 0.3.24 out the door ASAP (ie preferably rc2 tomorrow
and release by the end of the week).

Matt

On Mon, 2011-07-04 at 22:39 +0200, Matt Corallo wrote:
> For some reason my mail client let me respond off-list here, didnt mean
> to...
> 
> On Mon, 2011-07-04 at 14:23 -0400, Gavin Andresen wrote:
> > RE: "You have some unencrypted keys, should I encrypt them for you?"
> > 
> > That re-opens an "attacker packs the keypool with keypairs that they
> > know about" (if I can read/write wallet.dat, then I can delete
> > encrypted keypool keys and insert a bunch of unencrypted keypool keys
> > that I know how to spend, and rely on the user to click "OK" because
> > users are trained to just click "OK").
> Not strictly true, if the keys are loaded, but not added to
> mapAddressBook or setKeyPool, they wont be used for any new
> transactions, or shown to the user, but the user is still able to
> receive Bitcoins to those keys.
> > RE: breaking backup scripts:  if they use the backupwallet  RPC
> > command, then they will Just Work.
> Not really, most backupwallet-based scripts will backup wallet.dat,
> encrypt wallet.dat, upload wallet.dat.  Now it backups up wallet.dat and
> the encrypt part fails because there is no wallet.dat, only
> wallet_e.dat.  If we rename to wallet.dat on output, now the user's
> restore might not work...
> > 
> > 0.4 and later could, on wallet encryption, create a wallet_e.dat
> > (encrypted wallet).  Then truncate wallet.dat and set its
> > file-permissions to 000, so if old versions of bitcoin OR any dumb
> > wallet backup scripts try to read it they fail.
> True, but that is only a solution for Linux and Mac and then you are
> back to unreadable error on Windows load and other unforeseeable errors
> for odd scripts.
> 
> I suppose I just really dont like the idea of renaming wallet.dat,
> everything knows the filename and is used to it.
> > 
> > RE: future-proofing: wallet.dat contains nFileVersion (version of
> > bitcoin that last wrote the wallet).  Adding a nMinVersion that
> > specifies "you must be at least THIS version to read this file" seems
> > like a good idea so if you have version 0.4 or later future wallet
> > upgrades give you a reasonable message if you try to downgrade after
> > an incompatible change.
> Yep, just something simple that says, no reading this to old versions is
> needed, IMO the older version should freak out if it sees keys that it
> doesn't know about (as it could also indicate wallet corruption in some
> rare cases), but nMinVersion works just as well, in any case this should
> only very rarely be a problem...how often will we change the wallet
> format?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110705/888d271e/attachment.sig>

From gavinandresen at gmail.com  Tue Jul  5 02:26:17 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 4 Jul 2011 22:26:17 -0400
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <1309828239.29355.28.camel@Desktop666>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
	<1309811972.29355.19.camel@Desktop666>
	<1309828239.29355.28.camel@Desktop666>
Message-ID: <CABsx9T2-htzpQPxrNqq1Efow2tuUdm5AQGOh0MS0MXvH5pD_5g@mail.gmail.com>

> Despite this being quick, I really want to get 0.3.24 out and rolling so
> that we have us much lead time on 0.4 as possible

Agreed.

> All that needs to happen for that is to agree on either
> https://github.com/bitcoin/bitcoin/pull/378 or
> https://github.com/bitcoin/bitcoin/pull/381'

I don't think 0.3.24 "needs" either of those pulls.  Fixing
downgrade-to-0.3.24 is low on the priority list, because
downgrade-to-something-before-0.3.24 is just about as likely, and that
has to do something mostly reasonable.

I just pulled https://github.com/bitcoin/bitcoin/pull/379 "Do not use
comma as thousands separator", and pulled a block-chain lock-in at
block 13444.  Those were the only issues I think really need to be in
0.3.24.

-- 
--
Gavin Andresen



From jgarzik at exmulti.com  Tue Jul  5 02:45:38 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 4 Jul 2011 22:45:38 -0400
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <CABsx9T2-htzpQPxrNqq1Efow2tuUdm5AQGOh0MS0MXvH5pD_5g@mail.gmail.com>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
	<1309811972.29355.19.camel@Desktop666>
	<1309828239.29355.28.camel@Desktop666>
	<CABsx9T2-htzpQPxrNqq1Efow2tuUdm5AQGOh0MS0MXvH5pD_5g@mail.gmail.com>
Message-ID: <CA+8xBpd06DJ_0+OHRDsbzkecfG1+-ubXb2eiVRiSn6GT53ZDSQ@mail.gmail.com>

On Mon, Jul 4, 2011 at 10:26 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
>> All that needs to happen for that is to agree on either
>> https://github.com/bitcoin/bitcoin/pull/378 or
>> https://github.com/bitcoin/bitcoin/pull/381'
>
> I don't think 0.3.24 "needs" either of those pulls. ?Fixing
> downgrade-to-0.3.24 is low on the priority list, because
> downgrade-to-something-before-0.3.24 is just about as likely, and that
> has to do something mostly reasonable.

Yeah, same thoughts here.

> I just pulled https://github.com/bitcoin/bitcoin/pull/379 "Do not use
> comma as thousands separator", and pulled a block-chain lock-in at
> block 13444. ?Those were the only issues I think really need to be in
> 0.3.24.

Tagged -tip as -rc2.

Bug reports are mostly quiet, so maybe we can even get the release
before you leave.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From bitcoin-list at bluematt.me  Tue Jul  5 11:03:15 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 05 Jul 2011 13:03:15 +0200
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <CABsx9T2-htzpQPxrNqq1Efow2tuUdm5AQGOh0MS0MXvH5pD_5g@mail.gmail.com>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
	<1309811972.29355.19.camel@Desktop666>
	<1309828239.29355.28.camel@Desktop666>
	<CABsx9T2-htzpQPxrNqq1Efow2tuUdm5AQGOh0MS0MXvH5pD_5g@mail.gmail.com>
Message-ID: <1309863795.29355.30.camel@Desktop666>

On Mon, 2011-07-04 at 22:26 -0400, Gavin Andresen wrote:
> I don't think 0.3.24 "needs" either of those pulls.  Fixing
> downgrade-to-0.3.24 is low on the priority list, because
> downgrade-to-something-before-0.3.24 is just about as likely, and that
> has to do something mostly reasonable.
Really, well I disagree but OK, 0.3.24 it is.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110705/aa373173/attachment.sig>

From luke at dashjr.org  Mon Jul  4 18:20:07 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 4 Jul 2011 14:20:07 -0400
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <1309801974.3423.80.camel@Desktop666>
References: <1309801974.3423.80.camel@Desktop666>
Message-ID: <201107041420.08995.luke@dashjr.org>

On Monday, July 04, 2011 1:52:53 PM Matt Corallo wrote:
> There were several suggestions of renaming wallet.dat for encrypted
> wallets.  Obviously this has many advantages and disadvantages.  It
> breaks backup scripts,

It shouldn't. Backup scripts should make a copy with the JSON-RPC call.

What about changing the format of wallet.dat to something that triggers an 
error in the old clients? ie, maybe a dummy crafted-to-make-old-versions-
complain file that simply means "use ewallet.dat"?



From bitcoin-list at bluematt.me  Wed Jul  6 00:56:35 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 06 Jul 2011 02:56:35 +0200
Subject: [Bitcoin-development] 0.3.24 RC3 Build
Message-ID: <1309913732.29355.40.camel@Desktop666>

0.3.24 RC3 tar uploaded to http://dl.dropbox.com/u/29653426/Bitcoin%
200.3.24%20RC3.tar.bz2

I still disagree that 0.3.24 shouldn't handle incompatible wallets
cleanly, but I digress.

SHA1:
af85f46201bfffaf38fe4d64f3aa357ac03b51e1 Bitcoin 0.3.24 RC3.tar.bz2

Notes:
gitian-win32.yml is broken (my fault) just remove the lines
  cp WSPiApi.h $HOME/build
  #
and you should be on the same one as me.

Build gitian signed and email signed as always,
Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110706/5c26037d/attachment.sig>

From jgarzik at exmulti.com  Wed Jul  6 20:05:01 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 6 Jul 2011 16:05:01 -0400
Subject: [Bitcoin-development] Bitcoin v0.3.24 release candidate
	available
In-Reply-To: <CA+8xBpeJcz-RJ9EtDKB-svu=chBQUNzsBPRi8ts+8-0bGHnFNw@mail.gmail.com>
References: <CA+8xBpeJcz-RJ9EtDKB-svu=chBQUNzsBPRi8ts+8-0bGHnFNw@mail.gmail.com>
Message-ID: <CA+8xBpcm2n4M=1KfqhaXPb-TQEeV5nk8sNkA8NZph3HcgPHKNA@mail.gmail.com>

Bitcoin 0.3.24rc3 has been uploaded.

Fixes appeared after -rc2 was tagged, so we just skipped straight to -rc3.

Maybe final release on Friday?

Changes since 0.3.24rc1:

Gavin Andresen (2):
      Block-chain lock-in at 134444
      Do not use comma as thousands separator     Using the comma as thousands s

Matt Corallo (3):
      Added a couple minor things to match newer build process.
      Revert "Make UPnP default on Bitcoin but not on Bitcoind."
      Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)

Pieter Wuille (1):
      Fix synchronization of default key

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

dec9ff63fe6d0cffb2abc723281a4135c22f19ef  bitcoin-0.3.24rc3-linux.tar.gz
c171c6e5128d570d5d7d5a6896b672fcab778933  bitcoin-0.3.24rc3-src.tar.gz
d4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24rc3-win32-setup.exe
0653302ac7f8b052d58667ae30da53c4f6230be5  bitcoin-0.3.24rc3-win32.zip
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQIVAwUBThS+Xdodwg8tvwyoAQINthAAqxOnungGYS1o7IB3D3M1NRPD/O/WNoB4
ANIn+oZLYy5+0yZylckT/gbkPY3PkhsIE8hVqbxGDYaDzUpjwN+DLd+EMPg5/2vr
Tp2b77Lzh6QszZzZhrs9LPLsB8Q/jzCAbbChAekkAAe4sGm0MFkxMEYaXE+RF/uj
PX36hdtmWYMzeXwf3PtbI8rAE9ESwXVVF8B7/qFvDhy4lrbXaNnGb3hGyowrNVBM
m1s4jyk/Lq5pPcoKlRN6kiujCbZBIy6VKgc74YaoMOrznHryoeYQVCg4tySfKkuG
gfiZFEL6EwYeY8ipjcRBVLFGxbwzCbIhBcBO/Je2yC+EwAOplfyy+GBE3rXLuUkn
AzMiL1i5nX6dNmkYqVE0+pbv81FeT+uc1i63CIjquLdVbxh3omdpYdYHs9q/zN/9
geHU4WnpwwZhTFEclzZUOGo8IJ0wiNsTyQv9mwVEjoslnubXh4omqbW7Tpm7cXiP
jlDZ42Ay+Z+AvafdLYP27vfjWJoMbjcu6qU2EXBOhmpkeaIcV43oEAd7suy0OLUq
8iNMpQHjlLnH0pcN8r38Tq+vuCuhPZtiPZd5dVKSF3PaCB6vAv8MulE0yhP2LEq3
Q4MzxSlgGNEWCGIv19YfMnURxGMNMKB0cyQ8SMdLDR+IIB3NB5SreeG8c8P97s5p
VnHOvTnpHyw=
=vKTJ
-----END PGP SIGNATURE-----

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From pieter.wuille at gmail.com  Thu Jul  7 08:49:39 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 7 Jul 2011 10:49:39 +0200
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <20110703104415.GA2034@ulyssis.org>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<20110703104415.GA2034@ulyssis.org>
Message-ID: <20110707084937.GA10392@ulyssis.org>

On Sun, Jul 03, 2011 at 12:44:17PM +0200, Pieter Wuille wrote:
> I have no preference for any particular project build system. If a system
> * is easy enough to set up (included in standard repositories, eg.)
> * allows building of the bitcoin codebase on several linux distro's
> * does cross-compilation to windows
> * supports osx
> * is easy to maintain
> * it is not too hard to adapt other GUI's to use it (bitcoin-qt,
>   maybe others as well, i hear about a cocoabitcoin?)
> * gets implemented and tested to support all of the above
> .. i have no problem with choosing that system for future versions.

Other opinions? Someone actually interested in writing a cmake configuration
for bitcoin?

-- 
Pieter



From andyparkins at gmail.com  Thu Jul  7 09:49:47 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 7 Jul 2011 10:49:47 +0100
Subject: [Bitcoin-development] Suggestion for enhancements to getblock
Message-ID: <201107071049.48131.andyparkins@gmail.com>

Hello,

This is a suggestion with a mind to the future.  In particular, I'm slowly 
working on an alternative client and library (I know, everyone says that).  
I've got a feature that I'd like to have that would need a change in the 
protocol.  It's a change that I think would improve the official client as 
well, so I'm bringing it up here.

It's actually two changes; and both could be acheived by adding new commands 
to the protocol.  I think that would be overkill though; as they fit quite 
nicely into an extended getblocks command.

(1) The getblocks message is a list of inventory items (type MSG_BLOCK) being 
requested.

Imagine this situation though.  I am a light weight client.  I store the block 
headers only.  I am only interested in the history of my own wallet addresses.  
I receive a block broadcast with a transaction that sends coins to one of my 
addresses.  That transaction references other transactions (of course), but I 
haven't stored any transactions.  So; I want to request those transactions and 
ensure they are all valid and in blocks.  I can't.

I can request the transactions themselves; but I have no way of finding out 
what block they were in without downloading the entire full block chain 
myself.  The thing is, a peer with the full block chain is able to do this 
instantly.

Here then is my suggestion:  getblocks should accept inventory items of type 
MSG_TX as well as MSG_BLOCK.  When it finds a MSG_TX request, it shouldn't 
send the transaction (after all that is what the getdata message is for); 
instead it should return the block that contains that transaction.  It's an 
alternative way of requesting a block -- by transaction in that block.

It should be obvious then that it would be easy for a lightweight client to 
request the transaction chain transactions its interested in to create a list 
of relevant hashes for the history it's after; and then put those hashes in a 
getblocks request and have to look only at a few full blocks instead of the 
full block chain.


(2) If you are offline when new transactions are broadcast, there is no way to 
know they are pending.

Transactions that have been broadcast but not yet accepted into a block are 
never resent (nor should they be).  But if I am on a mobile client say, or a 
light-weight, intermittently used client; I have no way of checking if a 
transaction sending coins to one of my addresses is pending.

It should be possible to request the current pending transaction list.

My sugestion then is that a special virtual block request be possible.  The 
all zero block hash can never exist (it's used as the parent for the genesis 
block, so it had better not).  If I send a getblocks that contains an all-zero 
hash, then the virtual block should be returned in a block message.  That 
virtual block will list all the current pending transactions.  Obviously there 
would be a problem that it's actual hash would not be zero; so it would have 
to be marked as the virtual block in some other way (perhaps a zero timestamp 
plus a zero parent hash, or similar).



The combination of the above two protocol changes makes it possible for any 
client to have a large chunk of the facilities available in blockexplorer.com 
and the very useful http://bitcoincharts.com/bitcoin/ information.




Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com



From pieter.wuille at gmail.com  Thu Jul  7 11:15:58 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 7 Jul 2011 13:15:58 +0200
Subject: [Bitcoin-development] Version bytes
Message-ID: <20110707111557.GA5231@ulyssis.org>

Hello everyone,

after a discussion on IRC, we decided to try to standardize the version bytes
used by bitcoin for several applications.

There are 3 components that seem meaningful:
* network? (realnet, testnet, alternate chains?)
* data class? (address, private key, master key, ...?)
* version? (real version, per data class defined)

There is no technical reason why different network and different data classes
would need separate version bytes, but i think it is a good thing to keep
them from colliding. People will mix them up, and when things are well
defined, a nice warning message could help a lot ("Oops it seems you entered
a private key instead of an address!").

So, first of all, there is already one actually used alternate chain, namely
namecoin, using version byte 52 for addresses. For this reason, i'd like to
reserve bit 16 in the version byte for "alternate chain". When bit 16 is set,
everything is up to the network itself, and no further semantics are defined.

When bit 16 isn't set:

Then remains the rest of the network. The problem is that testnet already uses
version 111, which is not a single bit. We can use a trick though, namely
choosing bit 1 for testnet, and if bit 1 is set, XOR the rest of the version
number with 111. Otherwise, we could reset testnet (not actually reset, just
change its addresses a bit), and simply state odd=testnet, even=realnet.

That leaves use with 6 more bits to play with, namely 128,64,32 and 8,4,2.
As 128 is already used for private keys, let's use (128,64,32) for data classes,
and (8,4,2) for versions.

So, in full:
* Bits 128/64/32 define data class
** 0 = address
** 32,64,96,160,192 = reserved for future use
** 128 = private key
** 224 = extended data class, another "data class" byte follows
* Bit 16 defines "private"
** 0 = bitcoin
** 16 = alternate chain
* Bits 8/4/2 define version number
** 0 = only thing used for now
** 2,4,6,8,10,12 = reserved for future use
** 14 = extended version, another version byte follows
* Bit 1 defines testnet
** 0 = realnet
** 1 = testnet (possibly using XOR 111, if not reset)

This whole discussion started when Stefan wanted to define a format for master keys from which
to derive deterministic wallet keys, i suggest using data class 192 for that, leaving the
lower numbers for more basic data, like public keys.

Any comments?

-- 
Pieter




From mike at plan99.net  Thu Jul  7 15:42:12 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 7 Jul 2011 17:42:12 +0200
Subject: [Bitcoin-development] Suggestion for enhancements to getblock
In-Reply-To: <201107071049.48131.andyparkins@gmail.com>
References: <201107071049.48131.andyparkins@gmail.com>
Message-ID: <CANEZrP0L-8PmwLma4DJdfoj+NefXS0kH8wvVFe-vuyRnpF-+mw@mail.gmail.com>

On Thu, Jul 7, 2011 at 11:49 AM, Andy Parkins <andyparkins at gmail.com> wrote:
> Imagine this situation though. ?I am a light weight client. ?I store the block
> headers only. ?I am only interested in the history of my own wallet addresses.
> I receive a block broadcast with a transaction that sends coins to one of my
> addresses. ?That transaction references other transactions (of course), but I
> haven't stored any transactions. ?So; I want to request those transactions and
> ensure they are all valid and in blocks. ?I can't.

Everyone writing an alternative client goes through this thought
process :-) There's no point in doing it, you cannot prove your
transaction is not a double spend. That requires knowledge (ie, an
index) of all transactions.

You have to treat appearing deep in the chain as ipso-facto proof of
validity. Lightweight/SPV clients simply must have that trust, it
cannot be done any other way. See this article:

http://code.google.com/p/bitcoinj/wiki/SecurityModel

Currently this is pretty safe due to the crazy speeds. In future when
speeds are likely to be lower, it will be less safe and you'd have to
wait longer or use a trusted node.

> It should be possible to request the current pending transaction list.

I think it'd be better to implement the filtering suggestions that
have been made. It doesn't scale to download the entire memory pool -
a better approach is to give the remote node a filter to match against
transactions then have it only relay those. After setting a filter,
transactions pending and matching would be sent in one big inv and you
can then keep the connection open to learn about new transactions
without needing to "drink from the firehose". Filters can be
probabilistic and set on many different nodes to reduce the privacy
implications.



From andyparkins at gmail.com  Thu Jul  7 16:19:39 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 7 Jul 2011 17:19:39 +0100
Subject: [Bitcoin-development] Suggestion for enhancements to getblock
In-Reply-To: <CANEZrP0L-8PmwLma4DJdfoj+NefXS0kH8wvVFe-vuyRnpF-+mw@mail.gmail.com>
References: <201107071049.48131.andyparkins@gmail.com>
	<CANEZrP0L-8PmwLma4DJdfoj+NefXS0kH8wvVFe-vuyRnpF-+mw@mail.gmail.com>
Message-ID: <201107071719.45416.andyparkins@gmail.com>

On 2011 July 07 Thursday, Mike Hearn wrote:
> On Thu, Jul 7, 2011 at 11:49 AM, Andy Parkins <andyparkins at gmail.com> wrote:
> > Imagine this situation though.  I am a light weight client.  I store the
> > block headers only.  I am only interested in the history of my own
> > wallet addresses. I receive a block broadcast with a transaction that
> > sends coins to one of my addresses.  That transaction references other
> > transactions (of course), but I haven't stored any transactions.  So; I
> > want to request those transactions and ensure they are all valid and in
> > blocks.  I can't.
> 
> Everyone writing an alternative client goes through this thought
> process :-) There's no point in doing it, you cannot prove your
> transaction is not a double spend. That requires knowledge (ie, an
> index) of all transactions.

Ah; you mistake me.  I'm not interested in double spend prevention, in this 
case I'd be willing to trust the full node to return whatever block it thinks 
contains that transaction, and that it has already done double spend 
prevention.

What I want to be able to do though is calculate a balance for an aribtrary 
address.  Not every address; just the particular ones that the client is 
interested in.  It's complete overkill to require the whole block chain just 
to calculate the balance of a few addresses.

> You have to treat appearing deep in the chain as ipso-facto proof of
> validity. Lightweight/SPV clients simply must have that trust, it
> cannot be done any other way. See this article:

Not entirely.  If I ask for "the block that contains transaction with hash 
12345678abcd..." then when I get that full block, I can verify the merkle tree 
myself.  I do have to trust that the peer hasn't been adding double spends in, 
but not that the transaction is actually in the chain.

> > It should be possible to request the current pending transaction list.
> 
> I think it'd be better to implement the filtering suggestions that
> have been made. It doesn't scale to download the entire memory pool -

I'm sorry, I've only started watching this list in the last few days.  I'm not 
familiar with the filter suggestions.

I'm not entirely sure I see how a filter helps.  If I've been offline for ten 
minutes then I need all the transactions pending in the last ten minutes.  No 
amount of filtering makes that list any smaller.

> a better approach is to give the remote node a filter to match against
> transactions then have it only relay those. After setting a filter,
> transactions pending and matching would be sent in one big inv and you
> can then keep the connection open to learn about new transactions
> without needing to "drink from the firehose". Filters can be
> probabilistic and set on many different nodes to reduce the privacy
> implications.

That would be fine.  My reason for suggesting using getblocks was that it 
didn't introduce a new command.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110707/0c3f8d5e/attachment.sig>

From mike at plan99.net  Thu Jul  7 16:44:48 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 7 Jul 2011 18:44:48 +0200
Subject: [Bitcoin-development] Suggestion for enhancements to getblock
In-Reply-To: <201107071719.45416.andyparkins@gmail.com>
References: <201107071049.48131.andyparkins@gmail.com>
	<CANEZrP0L-8PmwLma4DJdfoj+NefXS0kH8wvVFe-vuyRnpF-+mw@mail.gmail.com>
	<201107071719.45416.andyparkins@gmail.com>
Message-ID: <CANEZrP1eEmjqLAhAWHXTWurUVP7P1pxuf6e0w_0UF2DGZo3ZQw@mail.gmail.com>

> What I want to be able to do though is calculate a balance for an aribtrary
> address. ?Not every address; just the particular ones that the client is
> interested in. ?It's complete overkill to require the whole block chain just
> to calculate the balance of a few addresses.

But what is that for? You said it's for a lightweight client to do
that when it receives a transaction, to verify that all the
dependencies are in blocks recursively. But why?

> Not entirely. ?If I ask for "the block that contains transaction with hash
> 12345678abcd..." then when I get that full block, I can verify the merkle tree
> myself.

Well, it's more efficient to just verify the merkle branch. But yes.

> I'm not entirely sure I see how a filter helps. ?If I've been offline for ten
> minutes then I need all the transactions pending in the last ten minutes. ?No
> amount of filtering makes that list any smaller.

Why do you need all of them? You just care about the ones sending
coins to you, surely?

> That would be fine. ?My reason for suggesting using getblocks was that it
> didn't introduce a new command.

IMHO it's fine to introduce new commands. They'll just be ignored by
old clients in any event.



From jgarzik at exmulti.com  Thu Jul  7 16:51:08 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Thu, 7 Jul 2011 12:51:08 -0400
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <20110707084937.GA10392@ulyssis.org>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<20110703104415.GA2034@ulyssis.org>
	<20110707084937.GA10392@ulyssis.org>
Message-ID: <CA+8xBpcj5LGs2=v5BhwvOAAntxPCAo-KKBpJLs9Z_B3OAu+xDg@mail.gmail.com>

On Thu, Jul 7, 2011 at 4:49 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Sun, Jul 03, 2011 at 12:44:17PM +0200, Pieter Wuille wrote:
>> I have no preference for any particular project build system. If a system
>> * is easy enough to set up (included in standard repositories, eg.)
>> * allows building of the bitcoin codebase on several linux distro's
>> * does cross-compilation to windows
>> * supports osx
>> * is easy to maintain
>> * it is not too hard to adapt other GUI's to use it (bitcoin-qt,
>> ? maybe others as well, i hear about a cocoabitcoin?)
>> * gets implemented and tested to support all of the above
>> .. i have no problem with choosing that system for future versions.
>
> Other opinions? Someone actually interested in writing a cmake configuration
> for bitcoin?

autotools is indeed "the devil we know" which works automatically on
all supported platforms save VC++  It is also the easiest to package,
as all distros already have macros and scripts specifically designed
to integrate autotools packages into their package build systems.
cmake simply does not have that level of uptake.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From witchspace81 at gmail.com  Thu Jul  7 17:40:15 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 7 Jul 2011 17:40:15 +0000
Subject: [Bitcoin-development] Reconsider build system change?
In-Reply-To: <20110707084937.GA10392@ulyssis.org>
References: <CAJNQ0stvozeQAVFkduY7Ph5EXy8ayYwiu4T+6Oz1RwjgiDnBeA@mail.gmail.com>
	<20110703104415.GA2034@ulyssis.org>
	<20110707084937.GA10392@ulyssis.org>
Message-ID: <CAJNQ0suRgnFVJ86drAj0xciEgn9LrnTAkfHf39M9vp9ER0NkoA@mail.gmail.com>

Hello Pieter,

Other opinions? Someone actually interested in writing a cmake configuration
> for bitcoin?
>

I'm willing to do it, but the priority is not that high.

I'm currently sticking with qmake, as apart from boost library name
auto-detection, I had no problems with it and it works well enough for a
relatively small project such as bitcoin.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110707/61f47a76/attachment.html>

From gmaxwell at gmail.com  Thu Jul  7 17:45:31 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 7 Jul 2011 13:45:31 -0400
Subject: [Bitcoin-development] Suggestion for enhancements to getblock
In-Reply-To: <CANEZrP0L-8PmwLma4DJdfoj+NefXS0kH8wvVFe-vuyRnpF-+mw@mail.gmail.com>
References: <201107071049.48131.andyparkins@gmail.com>
	<CANEZrP0L-8PmwLma4DJdfoj+NefXS0kH8wvVFe-vuyRnpF-+mw@mail.gmail.com>
Message-ID: <CAAS2fgRH-At6Y-MD7M77geRHMbX+F0Fpck_q2KtdDoJijySKFQ@mail.gmail.com>

On Thu, Jul 7, 2011 at 11:42 AM, Mike Hearn <mike at plan99.net> wrote:
[snip]
> You have to treat appearing deep in the chain as ipso-facto proof of
> validity. Lightweight/SPV clients simply must have that trust, it
> cannot be done any other way. See this article:
>
> http://code.google.com/p/bitcoinj/wiki/SecurityModel


It _could_ be done another way, with a protocol change:
http://forum.bitcoin.org/index.php?topic=21995.0



From andyparkins at gmail.com  Thu Jul  7 19:02:04 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 7 Jul 2011 20:02:04 +0100
Subject: [Bitcoin-development] Suggestion for enhancements to getblock
In-Reply-To: <CANEZrP1eEmjqLAhAWHXTWurUVP7P1pxuf6e0w_0UF2DGZo3ZQw@mail.gmail.com>
References: <201107071049.48131.andyparkins@gmail.com>
	<201107071719.45416.andyparkins@gmail.com>
	<CANEZrP1eEmjqLAhAWHXTWurUVP7P1pxuf6e0w_0UF2DGZo3ZQw@mail.gmail.com>
Message-ID: <201107072002.04793.andyparkins@gmail.com>

On Thursday 07 July 2011 17:44:48 Mike Hearn wrote:
> > What I want to be able to do though is calculate a balance for an
> > aribtrary address.  Not every address; just the particular ones that
> > the client is interested in.  It's complete overkill to require the
> > whole block chain just to calculate the balance of a few addresses.
> 
> But what is that for? You said it's for a lightweight client to do
> that when it receives a transaction, to verify that all the
> dependencies are in blocks recursively. But why?

There is no way for a client to know in advance whether any broadcast 
transaction contains a send to an address in its wallet.  So every incoming 
transaction has to be examined.

Then, there is no way to know if while you were offline any of the 
transactions in the blocks you missed contained transactions for an address 
in your wallet.

Also, a feature I am interested in supporting is a split wallet -- where the 
private key is held elsewhere.  I'd still want to be able to report the 
current balance in a particular address though.  That address can be added 
at any time.

Also, I would like to make some blockexplorer-like facilities available to 
lightweight clients.

> > Not entirely.  If I ask for "the block that contains transaction with
> > hash 12345678abcd..." then when I get that full block, I can verify
> > the merkle tree myself.
> 
> Well, it's more efficient to just verify the merkle branch. But yes.

We're only talking about one verifying one (or minimal numbers of) blocks; 
"efficient" isn't really going to matter much in that context.  Also, if 
we're talking about a situation where we don't necessarily trust the remote, 
we've got to verify the whole block, not just the one transaction we're 
interested in, since we told the remote which one we were interested in when 
we requested it.

> > I'm not entirely sure I see how a filter helps.  If I've been offline
> > for ten minutes then I need all the transactions pending in the last
> > ten minutes.  No amount of filtering makes that list any smaller.
> 
> Why do you need all of them? You just care about the ones sending
> coins to you, surely?

Is the filter going to be filter-by-address then?  I misunderstood in that 
case, I thought you were talking about filter-by-hash, which obviously tells 
you nothing about the contents of the transaction.

> > That would be fine.  My reason for suggesting using getblocks was that
> > it didn't introduce a new command.
> 
> IMHO it's fine to introduce new commands. They'll just be ignored by
> old clients in any event.

That's good to know.  I'm trying to be circumspect in what my client does; I 
want to be 100% compatible, which means if I need a new feature, it's got to 
be in the official client first.

I accept that this is all big talk, and there are plenty of people who start 
new clients and then give up; which might still happen to me.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From pieter.wuille at gmail.com  Thu Jul  7 19:40:08 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 7 Jul 2011 21:40:08 +0200
Subject: [Bitcoin-development] Version bytes
In-Reply-To: <20110707111557.GA5231@ulyssis.org>
References: <20110707111557.GA5231@ulyssis.org>
Message-ID: <20110707194007.GA27416@ulyssis.org>

On Thu, Jul 07, 2011 at 01:15:57PM +0200, Pieter Wuille wrote:
> Hello everyone,
> 
> after a discussion on IRC, we decided to try to standardize the version bytes
> used by bitcoin for several applications.

I realize my mail may have been a bit unclear. This is about the version bytes
used in addresses and other base58-encoded data structures. I'd like to see some
convention adopted before everyone starts defining their own.

The proposal in the previous mail could be summarized by the following functions
(for non-alternate chains). It is compatible with all currently-used version bytes
that i know of (testnet, realnet, addresses, private keys, namecoin, multicoin):

enum dataclass_t 
{
    address = 0,
    privkey = 4,
    masterkey = 6,
    extended = 7
}

int EncodeVersionByte(dataclass_t class, int nVersion, bool fTestNet)
{
    return (class << 5 + nVersion << 1) ^ fTestNet*111;
}

void DecodeVersionByte(int nByte, dataclass_t& class, int& nVersion, bool& fTestNet)
{
    fTestNet = false;
    if (nByte & 1)
    {
        fTestNet = true;
        nByte ^= 111;
    }
    class = (nByte & 224) >> 5;
    nVersion = (nByte & 14) >> 1;
}

-- 
Pieter




From moon at justmoon.de  Fri Jul  8 06:36:23 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Fri, 08 Jul 2011 08:36:23 +0200
Subject: [Bitcoin-development] Version bytes
In-Reply-To: <20110707111557.GA5231@ulyssis.org>
References: <20110707111557.GA5231@ulyssis.org>
Message-ID: <4E16A567.6020309@justmoon.de>

Hey Pieter,

> Otherwise, we could reset testnet (not actually reset, just
> change its addresses a bit), and simply state odd=testnet, even=realnet.

We could use the XOR hack for now and remove it the next time we reset 
testnet. But I do think the 111 is baggage we want to get rid of. Using 
the lsb as a simple flag is much cleaner.

Cheers,

Stefan


On 7/7/2011 1:15 PM, Pieter Wuille wrote:
> Hello everyone,
>
> after a discussion on IRC, we decided to try to standardize the version bytes
> used by bitcoin for several applications.
>
> There are 3 components that seem meaningful:
> * network? (realnet, testnet, alternate chains?)
> * data class? (address, private key, master key, ...?)
> * version? (real version, per data class defined)
>
> There is no technical reason why different network and different data classes
> would need separate version bytes, but i think it is a good thing to keep
> them from colliding. People will mix them up, and when things are well
> defined, a nice warning message could help a lot ("Oops it seems you entered
> a private key instead of an address!").
>
> So, first of all, there is already one actually used alternate chain, namely
> namecoin, using version byte 52 for addresses. For this reason, i'd like to
> reserve bit 16 in the version byte for "alternate chain". When bit 16 is set,
> everything is up to the network itself, and no further semantics are defined.
>
> When bit 16 isn't set:
>
> Then remains the rest of the network. The problem is that testnet already uses
> version 111, which is not a single bit. We can use a trick though, namely
> choosing bit 1 for testnet, and if bit 1 is set, XOR the rest of the version
> number with 111. Otherwise, we could reset testnet (not actually reset, just
> change its addresses a bit), and simply state odd=testnet, even=realnet.
>
> That leaves use with 6 more bits to play with, namely 128,64,32 and 8,4,2.
> As 128 is already used for private keys, let's use (128,64,32) for data classes,
> and (8,4,2) for versions.
>
> So, in full:
> * Bits 128/64/32 define data class
> ** 0 = address
> ** 32,64,96,160,192 = reserved for future use
> ** 128 = private key
> ** 224 = extended data class, another "data class" byte follows
> * Bit 16 defines "private"
> ** 0 = bitcoin
> ** 16 = alternate chain
> * Bits 8/4/2 define version number
> ** 0 = only thing used for now
> ** 2,4,6,8,10,12 = reserved for future use
> ** 14 = extended version, another version byte follows
> * Bit 1 defines testnet
> ** 0 = realnet
> ** 1 = testnet (possibly using XOR 111, if not reset)
>
> This whole discussion started when Stefan wanted to define a format for master keys from which
> to derive deterministic wallet keys, i suggest using data class 192 for that, leaving the
> lower numbers for more basic data, like public keys.
>
> Any comments?
>




From witchspace81 at gmail.com  Fri Jul  8 08:16:46 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 8 Jul 2011 08:16:46 +0000
Subject: [Bitcoin-development] Version bytes
In-Reply-To: <4E16A567.6020309@justmoon.de>
References: <20110707111557.GA5231@ulyssis.org> <4E16A567.6020309@justmoon.de>
Message-ID: <CAJNQ0st3ygLHPtq8fa9ceivSC1DQ38Hv+AQRiaXw=aL2Jze33Q@mail.gmail.com>

I agree. I think breaking compatiblity with older address (even testnet) is
not a

On Fri, Jul 8, 2011 at 6:36 AM, Stefan Thomas <moon at justmoon.de> wrote:

> Hey Pieter,
>
> > Otherwise, we could reset testnet (not actually reset, just
> > change its addresses a bit), and simply state odd=testnet, even=realnet.
>
> We could use the XOR hack for now and remove it the next time we reset
> testnet. But I do think the 111 is baggage we want to get rid of. Using
> the lsb as a simple flag is much cleaner.
>
> Cheers,
>
> Stefan
>
>
> On 7/7/2011 1:15 PM, Pieter Wuille wrote:
> > Hello everyone,
> >
> > after a discussion on IRC, we decided to try to standardize the version
> bytes
> > used by bitcoin for several applications.
> >
> > There are 3 components that seem meaningful:
> > * network? (realnet, testnet, alternate chains?)
> > * data class? (address, private key, master key, ...?)
> > * version? (real version, per data class defined)
> >
> > There is no technical reason why different network and different data
> classes
> > would need separate version bytes, but i think it is a good thing to keep
> > them from colliding. People will mix them up, and when things are well
> > defined, a nice warning message could help a lot ("Oops it seems you
> entered
> > a private key instead of an address!").
> >
> > So, first of all, there is already one actually used alternate chain,
> namely
> > namecoin, using version byte 52 for addresses. For this reason, i'd like
> to
> > reserve bit 16 in the version byte for "alternate chain". When bit 16 is
> set,
> > everything is up to the network itself, and no further semantics are
> defined.
> >
> > When bit 16 isn't set:
> >
> > Then remains the rest of the network. The problem is that testnet already
> uses
> > version 111, which is not a single bit. We can use a trick though, namely
> > choosing bit 1 for testnet, and if bit 1 is set, XOR the rest of the
> version
> > number with 111. Otherwise, we could reset testnet (not actually reset,
> just
> > change its addresses a bit), and simply state odd=testnet, even=realnet.
> >
> > That leaves use with 6 more bits to play with, namely 128,64,32 and
> 8,4,2.
> > As 128 is already used for private keys, let's use (128,64,32) for data
> classes,
> > and (8,4,2) for versions.
> >
> > So, in full:
> > * Bits 128/64/32 define data class
> > ** 0 = address
> > ** 32,64,96,160,192 = reserved for future use
> > ** 128 = private key
> > ** 224 = extended data class, another "data class" byte follows
> > * Bit 16 defines "private"
> > ** 0 = bitcoin
> > ** 16 = alternate chain
> > * Bits 8/4/2 define version number
> > ** 0 = only thing used for now
> > ** 2,4,6,8,10,12 = reserved for future use
> > ** 14 = extended version, another version byte follows
> > * Bit 1 defines testnet
> > ** 0 = realnet
> > ** 1 = testnet (possibly using XOR 111, if not reset)
> >
> > This whole discussion started when Stefan wanted to define a format for
> master keys from which
> > to derive deterministic wallet keys, i suggest using data class 192 for
> that, leaving the
> > lower numbers for more basic data, like public keys.
> >
> > Any comments?
> >
>
>
>
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security
> threats, fraudulent activity, and more. Splunk takes this data and makes
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110708/5a883209/attachment.html>

From witchspace81 at gmail.com  Fri Jul  8 08:18:19 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 8 Jul 2011 08:18:19 +0000
Subject: [Bitcoin-development] Version bytes
In-Reply-To: <CAJNQ0st3ygLHPtq8fa9ceivSC1DQ38Hv+AQRiaXw=aL2Jze33Q@mail.gmail.com>
References: <20110707111557.GA5231@ulyssis.org> <4E16A567.6020309@justmoon.de>
	<CAJNQ0st3ygLHPtq8fa9ceivSC1DQ38Hv+AQRiaXw=aL2Jze33Q@mail.gmail.com>
Message-ID: <CAJNQ0su6MVJ7cz2uQ4ftGPykvYxWH7J7rk5Q0Us6JWM6zoW02Q@mail.gmail.com>

Sorry, that last message got broken off.

On Fri, Jul 8, 2011 at 6:36 AM, Stefan Thomas <moon at justmoon.de> wrote:
>
>> Hey Pieter,
>>
>> > Otherwise, we could reset testnet (not actually reset, just
>> > change its addresses a bit), and simply state odd=testnet, even=realnet.
>>
>> We could use the XOR hack for now and remove it the next time we reset
>> testnet. But I do think the 111 is baggage we want to get rid of. Using
>> the lsb as a simple flag is much cleaner.
>>
>

I agree it is cleaner, but I think breaking compatiblity with older address
(even testnet) is not a good idea right now. It is important to build an
image of stability and backward compatibility.

So I vote for the XOR 111 hack :)

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110708/498b8905/attachment.html>

From pieter.wuille at gmail.com  Fri Jul  8 09:25:07 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 8 Jul 2011 11:25:07 +0200
Subject: [Bitcoin-development] Version bytes
In-Reply-To: <CAJNQ0su6MVJ7cz2uQ4ftGPykvYxWH7J7rk5Q0Us6JWM6zoW02Q@mail.gmail.com>
References: <20110707111557.GA5231@ulyssis.org> <4E16A567.6020309@justmoon.de>
	<CAJNQ0st3ygLHPtq8fa9ceivSC1DQ38Hv+AQRiaXw=aL2Jze33Q@mail.gmail.com>
	<CAJNQ0su6MVJ7cz2uQ4ftGPykvYxWH7J7rk5Q0Us6JWM6zoW02Q@mail.gmail.com>
Message-ID: <20110708092506.GA6641@ulyssis.org>

On Fri, Jul 08, 2011 at 08:18:19AM +0000, John Smith wrote:
> 
> On Fri, Jul 8, 2011 at 6:36 AM, Stefan Thomas <moon at justmoon.de> wrote:
> >
> >> Hey Pieter,
> >>
> >> > Otherwise, we could reset testnet (not actually reset, just
> >> > change its addresses a bit), and simply state odd=testnet, even=realnet.
> >>
> >> We could use the XOR hack for now and remove it the next time we reset
> >> testnet. But I do think the 111 is baggage we want to get rid of. Using
> >> the lsb as a simple flag is much cleaner.
> 
> I agree it is cleaner, but I think breaking compatiblity with older address
> (even testnet) is not a good idea right now. It is important to build an
> image of stability and backward compatibility.
> 
> So I vote for the XOR 111 hack :)

It does have another advantage: it makes testnet codes visually (after base58
encoding) different from realnet ones, which is probably the reason why the
relatively large number 111 was chosen.

The only small change that can cause the first base58 character to remain equal,
is a modification to nVersion of less than 5 in absolute value.

PS: +/- 111 is also possible, instead of XOR 111.

-- 
Pieter




From mike at plan99.net  Fri Jul  8 09:41:02 2011
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Jul 2011 11:41:02 +0200
Subject: [Bitcoin-development] Bitcoin v0.3.24 release candidate
	available
In-Reply-To: <CA+8xBpcm2n4M=1KfqhaXPb-TQEeV5nk8sNkA8NZph3HcgPHKNA@mail.gmail.com>
References: <CA+8xBpeJcz-RJ9EtDKB-svu=chBQUNzsBPRi8ts+8-0bGHnFNw@mail.gmail.com>
	<CA+8xBpcm2n4M=1KfqhaXPb-TQEeV5nk8sNkA8NZph3HcgPHKNA@mail.gmail.com>
Message-ID: <CANEZrP1CN5g-n16TfQoyuaX+1MGUnpm5fBKLwFiaeUWKGn0uaQ@mail.gmail.com>

A quick release would be good. The network is getting really sick:

   http://forum.bitcoin.org/index.php?topic=26894.40

I brought up the latest rc3 on plan99.net.

Though it's not relevant for this release, there seems to be some kind
of shutdown issue. I did a "bitcoin stop" and then waited for the log
to indicate successful shutdown. But the parent process didn't quit,
leaving a zombie. I did a kill -9 on the parent to get rid of it, and
then the addr.dat file became corrupted. I had to remove it and the
"database" directory as running the db_recover command didn't work.

On Wed, Jul 6, 2011 at 10:05 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:
> Bitcoin 0.3.24rc3 has been uploaded.
>
> Fixes appeared after -rc2 was tagged, so we just skipped straight to -rc3.
>
> Maybe final release on Friday?
>
> Changes since 0.3.24rc1:
>
> Gavin Andresen (2):
> ? ? ?Block-chain lock-in at 134444
> ? ? ?Do not use comma as thousands separator ? ? Using the comma as thousands s
>
> Matt Corallo (3):
> ? ? ?Added a couple minor things to match newer build process.
> ? ? ?Revert "Make UPnP default on Bitcoin but not on Bitcoind."
> ? ? ?Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)
>
> Pieter Wuille (1):
> ? ? ?Fix synchronization of default key
>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> dec9ff63fe6d0cffb2abc723281a4135c22f19ef ?bitcoin-0.3.24rc3-linux.tar.gz
> c171c6e5128d570d5d7d5a6896b672fcab778933 ?bitcoin-0.3.24rc3-src.tar.gz
> d4b5425eff673551a326d5326b92a06359dc1a3d ?bitcoin-0.3.24rc3-win32-setup.exe
> 0653302ac7f8b052d58667ae30da53c4f6230be5 ?bitcoin-0.3.24rc3-win32.zip
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.11 (GNU/Linux)
>
> iQIVAwUBThS+Xdodwg8tvwyoAQINthAAqxOnungGYS1o7IB3D3M1NRPD/O/WNoB4
> ANIn+oZLYy5+0yZylckT/gbkPY3PkhsIE8hVqbxGDYaDzUpjwN+DLd+EMPg5/2vr
> Tp2b77Lzh6QszZzZhrs9LPLsB8Q/jzCAbbChAekkAAe4sGm0MFkxMEYaXE+RF/uj
> PX36hdtmWYMzeXwf3PtbI8rAE9ESwXVVF8B7/qFvDhy4lrbXaNnGb3hGyowrNVBM
> m1s4jyk/Lq5pPcoKlRN6kiujCbZBIy6VKgc74YaoMOrznHryoeYQVCg4tySfKkuG
> gfiZFEL6EwYeY8ipjcRBVLFGxbwzCbIhBcBO/Je2yC+EwAOplfyy+GBE3rXLuUkn
> AzMiL1i5nX6dNmkYqVE0+pbv81FeT+uc1i63CIjquLdVbxh3omdpYdYHs9q/zN/9
> geHU4WnpwwZhTFEclzZUOGo8IJ0wiNsTyQv9mwVEjoslnubXh4omqbW7Tpm7cXiP
> jlDZ42Ay+Z+AvafdLYP27vfjWJoMbjcu6qU2EXBOhmpkeaIcV43oEAd7suy0OLUq
> 8iNMpQHjlLnH0pcN8r38Tq+vuCuhPZtiPZd5dVKSF3PaCB6vAv8MulE0yhP2LEq3
> Q4MzxSlgGNEWCGIv19YfMnURxGMNMKB0cyQ8SMdLDR+IIB3NB5SreeG8c8P97s5p
> VnHOvTnpHyw=
> =vKTJ
> -----END PGP SIGNATURE-----
>
> --
> Jeff Garzik
> exMULTI, Inc.
> jgarzik at exmulti.com
>
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security
> threats, fraudulent activity, and more. Splunk takes this data and makes
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jgarzik at exmulti.com  Fri Jul  8 21:35:36 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Fri, 8 Jul 2011 17:35:36 -0400
Subject: [Bitcoin-development] Bitcoin v0.3.24 released
Message-ID: <CA+8xBpcNx7ffKCj6HEdTmK2S+AORcZen+dfAtZyzz3fQ44+PHg@mail.gmail.com>

Bitcoin v0.3.24 is now available for download at
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/

This is another bug fix release.  We had hoped to have wallet
encryption ready for release, but more urgent fixes for existing
clients were needed -- most notably block download problems were
getting severe.  Wallet encryption is ready for testing at
https://github.com/bitcoin/bitcoin/pull/352 for the git-savvy, and
-hopefully- will follow shortly in the next release, v0.4.

Notable fixes in v0.3.24, and the main reasons for this release:

F1) Block downloads were failing or taking unreasonable amounts of
time to complete, because the increased size of the block chain was
bumping up against some earlier buffer-size DoS limits.
F2) Fix crash caused by loss/lack of network connection.

Notable changes in v0.3.24:

C1) DNS seeding enabled by default.
C2) UPNP enabled by default in the GUI client.  The percentage of
bitcoin clients that accept incoming connections is quite small, and
that is a problem.  This should help.  bitcoind, and unofficial
builds, are unchanged (though we encourage use of "-upnp" to help the
network!)
C3) Initial unit testing framework.  Bitcoin sorely needs automated
tests, and this is a beginning.  Contributions welcome.
C4) Internal wallet code cleanup.  While invisible to an end user,
this change provides the basis for v0.4's wallet encryption.

Full changelog ("git shortlog v0.3.23.."):

Dawid Spiechowicz (1):
      added polish translation

Doug Huff (1):
      Add OSX App bundle and correct build instructions to reflect reality.

Eric Hosmer (3):
      Updated Visual C++ makefile.
      Further updated Visual C++ makefile.
      Add keystore.h to makefile.vs's header list.

Gavin Andresen (3):
      Boost unit-testing framework.     make -f makefile.{unix,osx,mingw} test_b
      Block-chain lock-in at 134444
      Do not use comma as thousands separator     Using the comma as thousands s

Giel van Schijndel (2):
      rpc server: send '403 Forbidden' to rejected clients
      rpc: don't send 403 when using SSL to prevent DoS

Han Lin Yap (3):
      Double check translation and improved a translation string
      Update swedish translation
      Consistent Bitcoin example address

James Burkle (1):
      Edited init.cpp to include a check that -datadir exists

Jeff Garzik (6):
      FormatFullVersion: build fix related to recent translation improvement
      doc/release-process.txt: minor updates
      CWalletTx::GetAmounts(): pass NULL for CKeyStore*, rather than false     t
      Enable DNS seeding by default.
      Bump version to 0.3.24.
      Bump OSX version to 0.3.24 (missed in previous commit)

Joerie de Gram (1):
      Fix connection failure debug output

Jordan Lewis (8):
      Only include irc.h when needed
      Only include db.h when we have to.
      Only included rpc.h when necessary
      Only include net.h when we have to
      Only include init.h when we have to
      Only include strlcpy.h when we have to
      Remove some globally unused headers from headers.h
      Only include certain boost headers if necessary.

Matt Corallo (8):
      Update translations and remove obsolete translations.
      Add new DNSSeed dnsseed.bluematt.me.
      Only use dnsseeds and static seeds when not on testnet.
      Make UPnP default on Bitcoin but not on Bitcoind.
      Give more detailed error messages for connection failure.
      Added a couple minor things to match newer build process.
      Revert "Make UPnP default on Bitcoin but not on Bitcoind."
      Enable UPnP by default on bitcoin, but not on bitcoind (on gitian)

Pieter Wuille (6):
      move wallet code to separate file
      CWallet class
      Bugfixes walletclass
      Fix segfault when creating new wallet
      Limit response to getblocks to half of output buffer size
      Fix synchronization of default key

Shane Wegner (1):
      Fix missing includes needed for Boost 1.46.

St?phane Gimenez (1):
      Fix AddressBook syncrhonization between a CWallet and CWalletDB

Wladimir J. van der Laan (1):
      add GetTotalBlocksEstimate() function, move magic number to constant

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

4909c17a1cc025c6f6c88d036f0b487c51c510f6  bitcoin-0.3.24-linux.tar.gz
58531249230f769fdc755822b41e0f18ba59512c  bitcoin-0.3.24-src.tar.gz
d4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exe
520aed70ee28a0a91ed49dd983639cb1fab2a93c  bitcoin-0.3.24-win32.zip
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQIVAwUBThd13todwg8tvwyoAQKnVhAAnQzWKk5HrY5eMIprWwtsFZL0VOxAV2nV
Kn8NISmYk7PtfhzRm2sf0YYr369e7NtKAzdVNTRl+9m4RwQ6HhvzrChWG3OXxueA
AYg2JkS3oXbU2p4zOQT0/0ILp7iiHGhXCrEyd3bU5KkWOJhUnV0lS3ZzsELf8sab
I5MYQsrpZ9HZUI13e1ak/E0cub2gvxl+4D5Eg7EkNP71APR1MXGGzcfF7vlDYf4/
j1JTtkrBVZU6yFi8fNUxMQ/8G/0vyWLOOoCxaSvl5u5kssbI4rklhTA+BaqE1apx
xZN9Re0KjQ8cZiLQnVG9RhJsPhWe5tJRGqnKmaKF0gDELihFw9JLBDQkeSlhkhGx
wYtOfMClTDbd2qj5+dmvIrJPmDYHpGvmEO6xPsiv0qaNMZ1X/yMd9pp7nyCYosWB
u/vcPF0i4I27SDgRZ1TCPSgJgDQ4gEwKgzO69HywJw4KSkJq5MdecJDGRqTaYaf2
QI757pBXzFF3qORECSt5QIOjV1+bUc+1pB6450OfrZ+fTMMyWGF8t9t+TMAOwqoR
E0AMx2V+g+w6AXtpar4vsh0erexissREf6g1tW5ogy21Cv91MbIGZA9lUKNeU0Np
OgYSTNd5DvlbF7VpRZemSIz9gGWayqEi0G1oBQDo6DFcjeCS0okrIWPep4o1uoYz
xhxoauT2XEM=
=hgmn
-----END PGP SIGNATURE-----

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From witchspace81 at gmail.com  Sat Jul  9 09:45:54 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 9 Jul 2011 09:45:54 +0000
Subject: [Bitcoin-development] Metadata for transactions / address book
	records
Message-ID: <CAJNQ0sv1DxT6SmvqXNdaF09Fj=+mcM-RGXUEaFfns5oAeRFkkg@mail.gmail.com>

Hello devs,

For UI purposes I'd like to be able to associate metadata to transactions
and address book records.

To be clear, this is completely client-side and will never see the block
chain.

For transactions:

-   std::string description; // A description that the user can give to a
transaction, after he sent/received it, for example "ordered eggs"

For addresses:

-   bool visibleInInterface; // Visible in interface; useful to hide old
addresses/labels from the lists, without removing them for lookup purposes

These are my current ideas; probably, more metadata can be useful later on
(accounting category, links to 3rd party services, etc), so an extensible
system would be nice.

Any ideas as to what would be the best place to put this, while minimizing
the core changes?

I'm aware that this could also be implemented completely inside the UI code,
but I'm not sure this is nice, as it would put database handling etc there
and would mean even more data files for the user to backup/track.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110709/e9f67971/attachment.html>

From mike at plan99.net  Sat Jul  9 12:18:04 2011
From: mike at plan99.net (Mike Hearn)
Date: Sat, 9 Jul 2011 14:18:04 +0200
Subject: [Bitcoin-development] Bitcoin v0.3.24 released
In-Reply-To: <CA+8xBpcNx7ffKCj6HEdTmK2S+AORcZen+dfAtZyzz3fQ44+PHg@mail.gmail.com>
References: <CA+8xBpcNx7ffKCj6HEdTmK2S+AORcZen+dfAtZyzz3fQ44+PHg@mail.gmail.com>
Message-ID: <CANEZrP0aqo+Jznou5OEQvr7a1FbBoKmkZuk7A4Z+4ZG4j2vybg@mail.gmail.com>

If there haven't been lots of upgrades in a few days, I think it's
time to use the alert function again.



From bitcoin-list at bluematt.me  Sun Jul 10 14:21:17 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 10 Jul 2011 16:21:17 +0200
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <CA+8xBpd06DJ_0+OHRDsbzkecfG1+-ubXb2eiVRiSn6GT53ZDSQ@mail.gmail.com>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
	<1309811972.29355.19.camel@Desktop666>
	<1309828239.29355.28.camel@Desktop666>
	<CABsx9T2-htzpQPxrNqq1Efow2tuUdm5AQGOh0MS0MXvH5pD_5g@mail.gmail.com>
	<CA+8xBpd06DJ_0+OHRDsbzkecfG1+-ubXb2eiVRiSn6GT53ZDSQ@mail.gmail.com>
Message-ID: <1310307677.2230.5.camel@Desktop666>


At Luke's suggestion, I did a bit more digging and was able to find a
data structure in wallet settings that should cause all versions (well
all versions since Bitcoin was in github, and probably before then) to
crash on load instead of making a new wallet or opening in some bizarre
half-state.  I just put an empty object in addrIncoming (nfc what it was
used for, but it will get the desire effect and it isnt used anywhere in
the code aside from its definition).
You can see the commit at
https://github.com/TheBlueMatt/bitcoin/commit/2e8383469d7e12a495b3a1dbd41a8d211ff34fe8
Does anyone disagree and think a different solution would work better?

This resolves all known issues and suggestions that I know of on newenc
except for the invalid mlock calculations, which I will go fix right
now.  So...aside from that bug does anyone have any remaining
suggestions/blockers on newenc and, if not, can we get final ACKs on it?

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110710/58c68c99/attachment.sig>

From luke at dashjr.org  Sun Jul 10 18:42:41 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 10 Jul 2011 14:42:41 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
Message-ID: <201107101442.43605.luke@dashjr.org>

On Thursday, June 30, 2011 11:23:56 PM Jeff Garzik wrote:
> This was posted to IRC:
> http://davids.webmaster.com/~davids/bitcoin-3diff.txt
> 
> Includes several useful features that all the big pools have been
> screaming for...  notably HTTP/1.1 keep-alive support.

There seems to be a new version at:
	http://davids.webmaster.com/~davids/bitcoin-4diff.txt
I haven't compared them yet.

For the "3diff" version, I extracted and made proper git branches for each 
logical part:
  hub_mode
  threaded_rpc
  \-- rpc_keepalive (depends on threaded_rpc, or a single connection would
                     keep the JSON-RPC interface locked up)
  signal_blk_notify (generic version of -pollpidfile, with a bugfix)
  bugfix_CreateThread_leak
  getwork_dedupe (original branch for my bugfix)

In addition, I also consider these branches valid candidates for merging:
  coinbaser (popens a given command and reads coinbase outputs from stdout)
  gitignore (ignore some common misc files)
  minfee_modes (internal function changes to allow specifying different fees
                for relay, send, or accept-in-block)
  \-- eligius_relay (relay lower fees only Eligius will accept)
      \-- eligius_sendfee (send lower fees only Eligius will accept)
  txinfo (adds entries to getinfo for transactions accepted for relaying,
          transactions accepted for the current block-in-progress, and current
          block-in-progress size)
  bitcoinuri (compliant support for all bitcoin: URIs)

All available from git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git



From pieter.wuille at gmail.com  Sun Jul 10 19:10:07 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 10 Jul 2011 21:10:07 +0200
Subject: [Bitcoin-development] Encrypted Wallet Backward Compatibility
In-Reply-To: <1310307677.2230.5.camel@Desktop666>
References: <1309801974.3423.80.camel@Desktop666>
	<CABsx9T31ZuQHKwcNnb9-NpaCA6c43PXVZ+Tc+GZ=2Wkz08enHw@mail.gmail.com>
	<1309811972.29355.19.camel@Desktop666>
	<1309828239.29355.28.camel@Desktop666>
	<CABsx9T2-htzpQPxrNqq1Efow2tuUdm5AQGOh0MS0MXvH5pD_5g@mail.gmail.com>
	<CA+8xBpd06DJ_0+OHRDsbzkecfG1+-ubXb2eiVRiSn6GT53ZDSQ@mail.gmail.com>
	<1310307677.2230.5.camel@Desktop666>
Message-ID: <20110710191005.GA6467@ulyssis.org>

On Sun, Jul 10, 2011 at 04:21:17PM +0200, Matt Corallo wrote:
> 
> At Luke's suggestion, I did a bit more digging and was able to find a
> data structure in wallet settings that should cause all versions (well
> all versions since Bitcoin was in github, and probably before then) to
> crash on load instead of making a new wallet or opening in some bizarre
> half-state.  I just put an empty object in addrIncoming (nfc what it was
> used for, but it will get the desire effect and it isnt used anywhere in
> the code aside from its definition).
> You can see the commit at
> https://github.com/TheBlueMatt/bitcoin/commit/2e8383469d7e12a495b3a1dbd41a8d211ff34fe8
> Does anyone disagree and think a different solution would work better?

Though giving an mostly incomprehensible/unrelated error is never nice to
the user, i believe it's better than creating an empty wallet and letting
the user wonder where his wallet went. This way, we fail soon and don't
ever get a corrupt wallet.

> This resolves all known issues and suggestions that I know of on newenc
> except for the invalid mlock calculations, which I will go fix right
> now.  So...aside from that bug does anyone have any remaining
> suggestions/blockers on newenc and, if not, can we get final ACKs on it?

ACK on newenc, and thanks for all the work you put in it already.

-- 
Pieter



From bitcoin-list at bluematt.me  Sun Jul 10 19:12:12 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 10 Jul 2011 21:12:12 +0200
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <201107101442.43605.luke@dashjr.org>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201107101442.43605.luke@dashjr.org>
Message-ID: <1310325132.2230.20.camel@Desktop666>

On Sun, 2011-07-10 at 14:42 -0400, Luke-Jr wrote:
> On Thursday, June 30, 2011 11:23:56 PM Jeff Garzik wrote:
> > This was posted to IRC:
> > http://davids.webmaster.com/~davids/bitcoin-3diff.txt
> > 
> > Includes several useful features that all the big pools have been
> > screaming for...  notably HTTP/1.1 keep-alive support.
> 
> There seems to be a new version at:
> 	http://davids.webmaster.com/~davids/bitcoin-4diff.txt
> I haven't compared them yet.
> 
> For the "3diff" version, I extracted and made proper git branches for each 
> logical part:
>   hub_mode
No, no, no, no, no.  This has been discussed several times and provides
little to no advantage for miners and has the potential to severely harm
the network.
>   threaded_rpc
>   \-- rpc_keepalive (depends on threaded_rpc, or a single connection would
>                      keep the JSON-RPC interface locked up)
Some form of patch that implements these does need to be pulled soon, I
would say 0.4.1 or maybe sooner.
>   signal_blk_notify (generic version of -pollpidfile, with a bugfix)
Seems to be a feature for such a minority that until the codebase is
cleaned a ton we shouldn't add features for small minorities.  We have
seen even one or two line patches cause regressions so I, personally,
think we should really focus on cleaning the codebase (CWallet was a
great start) and then add all these minority features once the backend
stuff is really clean and efficient.
>   bugfix_CreateThread_leak
Yes, should be in for 0.4 and I think there is a pull request for it.
>   getwork_dedupe (original branch for my bugfix)
I think there is already a pull request, which should be merged for 0.4
IMO.
> 
> In addition, I also consider these branches valid candidates for merging:
>   coinbaser (popens a given command and reads coinbase outputs from stdout)
Seems like you are the only one who would benifit here, as noone else
but eligius changes coinbase output to a random set.
>   gitignore (ignore some common misc files)
>   minfee_modes (internal function changes to allow specifying different fees
>                 for relay, send, or accept-in-block)
We don't need something that just generically changes the functions to
allow whatever fee you want, we need something more generalized to allow
more custom settings, not just blind accept if fee is x per kb or
something.  Sipa has suggested various things that should allow for more
fee control by the users while still preventing users from sending
transactions that lock their coins in limbo.
>   \-- eligius_relay (relay lower fees only Eligius will accept)
>       \-- eligius_sendfee (send lower fees only Eligius will accept)
No, and no.  Just because you are willing to accept lower fees doesn't
mean the incentives are right to prevent DDoS.  The fees aren't there to
support the miners (not for a while, at least) they are there to prevent
stupid users from DDoSing and just generally wasting everyone else's
resources for no reason.
>   txinfo (adds entries to getinfo for transactions accepted for relaying,
>           transactions accepted for the current block-in-progress, and current
>           block-in-progress size)
These are cool numbers to know, but I'm not sure if they have any real
uses making them just useless feature creep.
>   bitcoinuri (compliant support for all bitcoin: URIs)
URI support would be nice.
> 
> All available from git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git
> 
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security 
> threats, fraudulent activity, and more. Splunk takes this data and makes 
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110710/0282deb8/attachment.sig>

From luke at dashjr.org  Sun Jul 10 20:30:53 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 10 Jul 2011 16:30:53 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <1310325132.2230.20.camel@Desktop666>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201107101442.43605.luke@dashjr.org>
	<1310325132.2230.20.camel@Desktop666>
Message-ID: <201107101630.55518.luke@dashjr.org>

On Sunday, July 10, 2011 3:12:12 PM Matt Corallo wrote:
> On Sun, 2011-07-10 at 14:42 -0400, Luke-Jr wrote:
> > For the "3diff" version, I extracted and made proper git branches for
> > each logical part:
> >   hub_mode
> 
> No, no, no, no, no.  This has been discussed several times and provides
> little to no advantage for miners and has the potential to severely harm
> the network.

I just said it exists. I don't expect anyone to promote or merge it.

> > In addition, I also consider these branches valid candidates for merging:
> >   coinbaser (popens a given command and reads coinbase outputs from
> >   stdout)
> 
> Seems like you are the only one who would benifit here, as noone else
> but eligius changes coinbase output to a random set.

I suspect because they haven't figured out how. Take it or leave it.

> >   minfee_modes (internal function changes to allow specifying different
> >                 fees for relay, send, or accept-in-block)
> 
> We don't need something that just generically changes the functions to
> allow whatever fee you want, we need something more generalized to allow
> more custom settings, not just blind accept if fee is x per kb or
> something.  Sipa has suggested various things that should allow for more
> fee control by the users while still preventing users from sending
> transactions that lock their coins in limbo.

This is a step in that direction, at least, by providing the mode as input.
Since 0.4 is moving to Qt, perhaps moving GetMinFee to QtScript is 
appropriate.

> >   \-- eligius_relay (relay lower fees only Eligius will accept)
> >       \-- eligius_sendfee (send lower fees only Eligius will accept)
> 
> No, and no.  Just because you are willing to accept lower fees doesn't
> mean the incentives are right to prevent DDoS.  The fees aren't there to
> support the miners (not for a while, at least) they are there to prevent
> stupid users from DDoSing and just generally wasting everyone else's
> resources for no reason.

Again, take it or leave it, but in the meantime you're asking for trouble from 
users who feel they're being forced to pay more than they have to. Or perhaps 
rather than trouble, that decision will increase awareness of other clients 
that don't try to control the users. That could be good too.



From Michael.Offel at web.de  Sun Jul 10 22:37:15 2011
From: Michael.Offel at web.de (Michael Offel)
Date: Mon, 11 Jul 2011 00:37:15 +0200 (CEST)
Subject: [Bitcoin-development] overall bitcoin client code quality
Message-ID: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>

Hello,
?
I would like to start a discussion about code quality to catch some opinions and create an codebase cleanup plan.
?
Let me just start with some points I've seen while reading and stepping throw bitcoin:
?
?
1. nearly no code documentation
?
All I found was the original paper and some partial wiki pages and the overall coding style does not help much here. I would love to see some class hierarchy, method descriptions and thoughts in the code. Instead one can find comments like this...
?
>??? // Map ports with UPnP
>??? if (fHaveUPnP)
>??????? MapPort(fUseUPnP);
?
This comment is just waste of valuable disk space and time for anyone who reads it. While I can guess what the CScript class does I would more like to understand the thoughts behind the decision to implement some crypto macros in a compile time interpreter and why Berkeley db 4 is used at all.
?
?
2. isolation of modules
?
It would be a lot easier to understand parts of the code if they would use well defined interfaces to communicate. Bitcoin makes use of global variables, public member variables in classes and global external functions what makes understanding the code a lot harder. To give an example here, the irc module has no interface at use it or to use. It gets some kind of magic thread started and pushes received addresses directly to some global function in net.cpp. The code is full of concepts like this. A well defined interface would be an bitcoin unrelated IRC module interface and some kind of translation class between the IRC and peer2peer network interface.
?
?
3. poor use of threads
?
Bitcoin starts a new thread for every little module it has and as soon as there is some serious work to do, it locks some kind of global mutex. While this eliminates nearly every performance advantage, it introduces a high difficulty in writing bug free code. Not only that one has to know which mutex to lock when, there is no documentation about that, one may also accidently add dead locks. This kind of bug is very hard to find, it may run well for a million of tests and crash or just hang on the next one. And my experience tells me that it will not be an developer nor an little user when it occurs. The fist user who hit's the bug will be mt gox doing an emergency transfer. ;) My suggestion is to remove all threads and critical sections and build a sequential easy to follow model. Some modules like the cpu miner may still require to spawn threads, but he should do this internally and hide any synchronization.
?
?
4. long build times
?
It takes longer to build Bitcoin than building some of the million lines of code projects I'm working on. The reasons I did see so far is the use of boost, lack of module isolation and implementations in header files. While the rest is just bad coding style the use of boost is arguable. As far as I can see it is mainly used for threading and FOREACH. I already put threading on the table, but using pthread or making an platform dependent startthread and mutex would be much more lightweight and nobody needs FOREACH. Boost is also an heavy non standard dependency that is an unnecessary barrier for new developers.
?
?
5. style guide
?
There is a style guide but it does not include anything about readability.
I'm talking about one file per class, no methods and single code line longer than a screen page. It should be natural to write code like this and I dislike having a lot of rules but the code shows that there is a need for such thing.
?
?
6. hardcoded values
?
There are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.
?
?
All this is just the tip of the iceberg. Bitcoin is a widely used application and users are transferring millions of dollars. The current code quality is very prone to bug's. To be clear I'm not saying there are a lot of bugs nor do I blame someone for the code quality. It is still a beta version and it was necessary to bring out a working version to attract more developers. And it is hard to analyze the code or just see a bug during development. One can be happy to understand what a method does, but this gives not the confidence to see and report obvious bugs.
?
Let me also say that I'm not pointing to someone to do all this. I'm willing to spend a lot of time on this promising project but this kind of cleanup is simply too large for one person who is new to the code.
My overall suggestion is to begin a complete rewrite, inspired by the old code rather than moving a lot of "known to be somehow functional" around.
The official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.
?
Hopefully I did not hurt someone's feelings.
?
Michael
?
?

___________________________________________________________
Schon geh?rt? WEB.DE hat einen genialen Phishing-Filter in die
Toolbar eingebaut! http://produkte.web.de/go/toolbar



From bitcoin-list at bluematt.me  Sun Jul 10 22:58:30 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 11 Jul 2011 00:58:30 +0200
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <201107101846.09997.luke@dashjr.org>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201107101630.55518.luke@dashjr.org>
	<1310335963.2230.29.camel@Desktop666>
	<201107101846.09997.luke@dashjr.org>
Message-ID: <1310338710.2230.30.camel@Desktop666>

On Sun, 2011-07-10 at 18:46 -0400, Luke-Jr wrote:
> On Sunday, July 10, 2011 6:12:43 PM Matt Corallo wrote:
> > On Sun, 2011-07-10 at 16:30 -0400, Luke-Jr wrote:
> > > Again, take it or leave it, but in the meantime you're asking for trouble
> > > from users who feel they're being forced to pay more than they have to.
> > > Or perhaps rather than trouble, that decision will increase awareness of
> > > other clients that don't try to control the users. That could be good
> > > too.
> > 
> > Its not a question of forcing users to pay anything, its a question of
> > how best to solve the "Im just gonna throw random crap in the chain for
> > the lulz" problem without causing too many side effects.  As with many
> > things Bitcoin, the temporary solution was something that was fairly
> > quickly hacked together to solve the problem without causing too many
> > problems.  What needs to happen is an actual solution, Bitcoin, in
> > theory, allows for all kinds of cool things, but the solution here needs
> > carefully thought out and implemented, not just keep lowering the fees.
> 
> The point is that we are already accepting lower fees. People (probably) want 
> to pay those lower fees. Yet there's developers writing their software to get 
> in the way between the user and pool willing to do business.
Read what I wrote again, and don't reply off-list.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110711/2c493353/attachment.sig>

From dhuff at jrbobdobbs.org  Sun Jul 10 23:07:29 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Sun, 10 Jul 2011 18:07:29 -0500
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
Message-ID: <DC9CCA3A-DC42-4F18-988F-EEDC8114FC63@jrbobdobbs.org>

On Jul 10, 2011, at 5:37 PM, Michael Offel wrote:

> 4. long build times
>  
> It takes longer to build Bitcoin than building some of the million lines of code projects I'm working on. The reasons I did see so far is the use of boost, lack of module isolation and implementations in header files. 

I've actually offered (on irc) to fix the latter a few times and been told that a pull removing implementations from the headers would not be merged so have not wasted the effort. (Because it's a rather large one.) Not only does this cause long build times it makes adding new code in the logically "right" places nearly impossible due to the build deps.

I agree with pretty much the entirety of your post and think all of it needs to be discussed further and addressed.

-- 
Douglas Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110710/8da88a61/attachment.sig>

From jgarzik at exmulti.com  Sun Jul 10 23:31:20 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sun, 10 Jul 2011 19:31:20 -0400
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
Message-ID: <CA+8xBpdqrJxP0VLpX3yk+-u6WL_xqy5zXztznKku_h+eGo1aYQ@mail.gmail.com>

On Sun, Jul 10, 2011 at 6:37 PM, Michael Offel <Michael.Offel at web.de> wrote:
> 1. nearly no code documentation

agreed -- contributions welcome


> 2. isolation of modules

It is a long term goal to move towards 'libbitcoin"

> 3. poor use of threads

agreed -- contributions welcome

> 4. long build times

very low priority.

> 5. style guide

contributions to existing style guide welcome

> 6. hardcoded values

very low priority


> Let me also say that I'm not pointing to someone to do all this. I'm willing to spend a lot of time on this promising project but this kind of cleanup is simply too large for one person who is new to the code.
> My overall suggestion is to begin a complete rewrite, inspired by the old code rather than moving a lot of "known to be somehow functional" around.
> The official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.
>
> Hopefully I did not hurt someone's feelings.

We know the code isn't what people would prefer, but that's what we've
inherited.  Everybody has suggestions, but given limited development
resources we're swamped as is.  (hence all the "contributions welcome"
responses)

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From bitcoin-list at bluematt.me  Sun Jul 10 23:36:53 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 11 Jul 2011 01:36:53 +0200
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
Message-ID: <1310341013.2230.66.camel@Desktop666>

On Mon, 2011-07-11 at 00:37 +0200, Michael Offel wrote:
> Hello,
>  
> I would like to start a discussion about code quality to catch some opinions and create an codebase cleanup plan.
>  
> Let me just start with some points I've seen while reading and stepping throw bitcoin:
>  
>  
> 1. nearly no code documentation
Yep, anyone with the time can gladly comment up the code, it would be
much appreciated, but as it stands now there are more important things
to do...like many of the things here:

> All I found was the original paper and some partial wiki pages and the overall coding style does not help much here. I would love to see some class hierarchy, method descriptions and thoughts in the code. 
Yes, thats one of the general development goal, sipa's CWallet was an
excellent start, but much more work needs done in terms of clear
splitting of the code.

> Instead one can find comments like this...
>  
> >    // Map ports with UPnP
> >    if (fHaveUPnP)
> >        MapPort(fUseUPnP);
>  
> This comment is just waste of valuable disk space and time for anyone who reads it.
My bad, was just following the previous comments...
> While I can guess what the CScript class does I would more like to understand the thoughts behind the decision to implement some crypto macros in a compile time interpreter and 
> why Berkeley db 4 is used at all.
At the time Bitcoin began being built, Ubuntu 9.04 (or was it 9.10?) was
used, as it offered the oldest libc on the newest OS.  Ubuntu 9.04 just
happened to only have db4.7.  For backward compatibility, db4.7 has been
used ever since (except, for some reason, the osx builds).  In 0.4,
db4.8 will be used.  If you are asking why bdb was used to begin with,
why not? its an excellent db and why reinvent the wheel?

>  
> 2. isolation of modules
>  
> It would be a lot easier to understand parts of the code if they would use well defined interfaces to communicate. Bitcoin makes use of global variables, public member variables in classes and global external functions what makes understanding the code a lot harder.
> To give an example here, the irc module has no interface at use it or to use. It gets some kind of magic thread started and pushes received addresses directly to some global function in net.cpp. The code is full of concepts like this.
> A well defined interface would be an bitcoin unrelated IRC module interface and some kind of translation class between the IRC and peer2peer network interface.
Though satoshi was clearly brilliant, he didn't care much for code
cleanliness.  This is one of the next development goals (IMO).

>  
> 3. poor use of threads
>  
> Bitcoin starts a new thread for every little module it has and as soon as there is some serious work to do, it locks some kind of global mutex. While this eliminates nearly every performance advantage, it introduces a high difficulty in writing bug free code.
> Not only that one has to know which mutex to lock when, there is no documentation about that, one may also accidently add dead locks.
> This kind of bug is very hard to find, it may run well for a million of tests and crash or just hang on the next one. And my experience tells me that it will not be an developer nor an little user when it occurs.
> The fist user who hit's the bug will be mt gox doing an emergency transfer. ;)
This is something that will come with general code cleanup and
modularization.  The locks will become specific to the object (as they
should be) and the performance and clarity will be fixed.

> My suggestion is to remove all threads and critical sections and build a sequential easy to follow model.
> Some modules like the cpu miner may still require to spawn threads, but he should do this internally and hide any synchronization.
Though it would be ideal to rewrite 90% of Bitcoin just to fix code
clarity, that is way more work than anyone has time for, in the mean
time there is more than just code cleanup that needs done.  It has to be
done in chunks.

>  
> 4. long build times
>  
> It takes longer to build Bitcoin than building some of the million lines of code projects I'm working on. The reasons I did see so far is the use of boost, lack of module isolation and implementations in header files.
> While the rest is just bad coding style the use of boost is arguable. As far as I can see it is mainly used for threading and FOREACH. I already put threading on the table,
> but using pthread or making an platform dependent startthread and mutex would be much more lightweight and nobody needs FOREACH. Boost is also an heavy non standard dependency that is an unnecessary barrier for new developers.
Header files could stand to be cleaned up a bit, though all the
implementation stuff is limited to one or two lines (though sometimes
thats too much).  If you want to rewrite Bitcoin sans-boost, please do,
however Boost really isnt a huge barrier as its a build-once thing.  If
you are on Linux, all you have to do is install a bunch of packages and
build wx.  If you are on Windows, why are you on Windows? ;)

>  
> 5. style guide
>  
> There is a style guide but it does not include anything about readability.
> I'm talking about one file per class, no methods and single code line longer than a screen page. It should be natural to write code like this and I dislike having a lot of rules but the code shows that there is a need for such thing.
Its not due to the current coders, its due to how it was originally
written.

>  
> 6. hardcoded values
>  
> There are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.
This one is an interesting debate.  There is no real reason to do this
aside from some questionable code cleanup.  Also, there is no reason to
encourage improperly-implemented alternate chains.  Alternate chains
should be designed in such a way as to share the main chain's difficulty
as described by Mike on the forum, not just make a new chain and hope it
sticks.

>  
> All this is just the tip of the iceberg. Bitcoin is a widely used application and users are transferring millions of dollars. The current code quality is very prone to bug's.
> To be clear I'm not saying there are a lot of bugs nor do I blame someone for the code quality. It is still a beta version and it was necessary to bring out a working version to attract more developers.
> And it is hard to analyze the code or just see a bug during development. One can be happy to understand what a method does, but this gives not the confidence to see and report obvious bugs.
>  
> Let me also say that I'm not pointing to someone to do all this. I'm willing to spend a lot of time on this promising project but this kind of cleanup is simply too large for one person who is new to the code.
> My overall suggestion is to begin a complete rewrite, inspired by the old code rather than moving a lot of "known to be somehow functional" around.
Really no reason to do that.  Although the code is messy in terms of
global usage and poorly-implemented RPC/net/etc, most of the code is
absolutely fine.  Just throw it in clearly-defined methods and classes
and it would be much more readable and less prone to mistakes.
Additionally, the things that are poorly-implemented can be slowly
changed over time in a clean and independent fashion instead of having
to rewrite massive chunks at a time.  Even if we had a full-time
development team of many, many developers, this isn't the right way to
do it.  The code itself is cleaner that it first appears, even if its
global structure is not.

> The official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.
True, but it is much higher priority to clean up the code than comment
it better, plus there are various other features/more user-facing issues
that need fixed as well, so...
>  
> Hopefully I did not hurt someone's feelings.
Don't think so, the code sucks in terms of cleanliness, everyone knows
it, its just a question of who is going to and when its going to get
fixed.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110711/6a60bf07/attachment.sig>

From luke at dashjr.org  Mon Jul 11 02:01:51 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 10 Jul 2011 22:01:51 -0400
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
Message-ID: <201107102201.53937.luke@dashjr.org>

On Sunday, July 10, 2011 6:37:15 PM Michael Offel wrote:
> why Berkeley db 4 is used at all.

Because it's a good tool for the job? Or you mean the version?
Debian stable: 4.8
Gentoo stable: 4.8
Ubuntu LTS   : 4.8

> Boost is also an heavy non standard dependency that is an unnecessary
> barrier for new developers. 

Boost is pretty much standard C++ nowadays.

> I'm talking about one file per class, no methods and single code line
> longer than a screen page. It should be natural to write code like this
> and I dislike having a lot of rules but the code shows that there is a
> need for such thing. 

Blame your text editor if it can't show long lines sanely. The only problem I 
see with the style itself is the use of spaces instead of tabs.

> My overall suggestion is to begin a complete rewrite, inspired by the old
> code rather than moving a lot of "known to be somehow functional" around.

There are many rewrites in progress, often with much better designs.

> The official Bitcoin client should be some kind of an reference project
> for other clients and must therefore be extra clean and well documented. 

Bitcoin is supposed to be an authorityless project. There is no official.

> *everything else*

Fix it yourself and submit the changes. If they don't get merged, fork.



From mike at plan99.net  Mon Jul 11 09:33:04 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 11 Jul 2011 11:33:04 +0200
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
Message-ID: <CANEZrP1gEx0_A+BQfJLQ1jppc=-qS1DwruR_wXsP-ctqZGGnjA@mail.gmail.com>

> My overall suggestion is to begin a complete rewrite, inspired by the old
> code rather than moving a lot of "known to be somehow functional" around.

This essay is old but still relevant, I think:

  http://www.joelonsoftware.com/articles/fog0000000069.html

Despite that, there are efforts to write a fresh implementation. For
example, BitCoinJ:

  http://code.google.com/p/bitcoinj/

It is not a complete implementation. It's targeting the "simplified
payment verification" mode as a first base, and is mostly intended for
mobile phones today as that's a niche the current codebase can't meet.
In the (very) long run, it may evolve into a full node.

> Hopefully I did not hurt someone's feelings.

The code was written by Satoshi who is long gone, and I doubt he would
care much for this type of list anyway. He was a do-er rather than a
talker.



From gavinandresen at gmail.com  Tue Jul 12 03:31:07 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 12 Jul 2011 13:31:07 +1000
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <CANEZrP1gEx0_A+BQfJLQ1jppc=-qS1DwruR_wXsP-ctqZGGnjA@mail.gmail.com>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
	<CANEZrP1gEx0_A+BQfJLQ1jppc=-qS1DwruR_wXsP-ctqZGGnjA@mail.gmail.com>
Message-ID: <CABsx9T0vLghciEbx8jCEGzLGLC5LJuzRXkMGEVf9hqfESWwjVg@mail.gmail.com>

It is SO tempting to start over from scratch, isn't it?

We'll just tell everybody to stop using bitcoin so much for six months
or so while we implement a much better client.  It will be exactly
like the bitcoin we have now, except with a much nicer internal
architecture and much cleaner code-base, and we're pretty sure we can
get it done in six months if everything goes exactly as planned.

I think incremental improvement of the "devil we know" is the right
thing to do right now, although I'm going to spend more time thinking
about how to make sure different bitcoin implementations work well
together (I've started working on network-protocol-level testing).

Regarding Michael's specific suggestions:  the
lots-of-threads-and-mutexes architecture of the client bothers me
because it is too easy to change code and create a deadlock that is
very hard to debug and fix. Switching to asynchronous IO might be the
right thing to do.  Then again, it might be easier to modify the
CRITICAL_SECTION code to detect and report deadlocks (anybody have
experience doing that?).

-- 
--
Gavin Andresen



From agrimes at speakeasy.net  Tue Jul 12 04:13:04 2011
From: agrimes at speakeasy.net (Alan Grimes)
Date: Tue, 12 Jul 2011 00:13:04 -0400
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <201107102201.53937.luke@dashjr.org>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
	<201107102201.53937.luke@dashjr.org>
Message-ID: <4E1BC9D0.3080104@speakeasy.net>

Yeah, I'm starting to run into real design problems in my attempt to 
write a bitcoin daemon, namely I'm trying to figure out how to manage 
connections and peers and how to interpret and coordinate messages from 
peers.

While spying on the old code, I noticed one major problem that could be 
fixed quite easily. That is, the 1 class-per .h/.cpp rule is completely 
ignored in main.h/cpp and net.h/cpp If all of the classes in the project 
were re-factored to their own files, it would be much easier to audit 
what was interacting with what. I think this work could be done within 
16 programmer hours.

The old codebase doesn't build on my system but I'd be willing to rough 
it in anyway.

I think this should be done in parallel to efforts, such as mine, to 
re-implement major functionality.

-- 
E T F
N H E
D E D

Powers are not rights.




From jgarzik at exmulti.com  Tue Jul 12 05:19:28 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 12 Jul 2011 01:19:28 -0400
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <4E1BC9D0.3080104@speakeasy.net>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
	<201107102201.53937.luke@dashjr.org>
	<4E1BC9D0.3080104@speakeasy.net>
Message-ID: <CA+8xBpcu8dT54sPKCJyjdEcYD=TWsrNx80fjj4S9qtq_XzcFOQ@mail.gmail.com>

On Tue, Jul 12, 2011 at 12:13 AM, Alan Grimes <agrimes at speakeasy.net> wrote:
> While spying on the old code, I noticed one major problem that could be
> fixed quite easily. That is, the 1 class-per .h/.cpp rule is completely
> ignored in main.h/cpp and net.h/cpp If all of the classes in the project
> were re-factored to their own files,

This is about the last thing we should do, and it's one of the worst
coding practices of many C++ projects (and unfortunately carried over
to Java by force).  See Knuth and his work on literate programming.
Putting logically similar code -together- is often more impactful and
meaningful than splitting up files into dozens (hundreds or thousands,
in large projects) of tiny, 20-line files.

A project attains zen in the -balance-.  Bitcoin was not well served
by "everything in main.cpp" approach -- but neither is it well served
by splitting wallet / transaction / etc. logic across a great many
files.  We should not have to ask ourselves, Is This Code In
WalletFactory.cpp, WalletTx.cpp, WalletStore.cpp, WalletKey.cpp,
WalletCrypt.cpp, or in s/$F.cpp/$F.h/ ?

Strict, unthinking rules do not buy anything, and can cost us much.

Plus, no matter how you slice it, bitcoin is Hard To Learn and there's
no getting around that.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From witchspace81 at gmail.com  Tue Jul 12 07:21:12 2011
From: witchspace81 at gmail.com (John Smith)
Date: Tue, 12 Jul 2011 07:21:12 +0000
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <CANEZrP1gEx0_A+BQfJLQ1jppc=-qS1DwruR_wXsP-ctqZGGnjA@mail.gmail.com>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
	<CANEZrP1gEx0_A+BQfJLQ1jppc=-qS1DwruR_wXsP-ctqZGGnjA@mail.gmail.com>
Message-ID: <CAJNQ0svqH9wkbrRpJ-prXH4ue1uz0nG1jqJYkd3WtUjL7GN2EQ@mail.gmail.com>

On Mon, Jul 11, 2011 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:

> > My overall suggestion is to begin a complete rewrite, inspired by the old
> > code rather than moving a lot of "known to be somehow functional" around.
>
> This essay is old but still relevant, I think:
>
>  http://www.joelonsoftware.com/articles/fog0000000069.html
>


+1

More code documentation would be helpful, and so would making the interfaces
more understandable/readable, and getting rid of the manual locking
(especially in client code!), but I don't see how that would warrant a
complete rewrite.

Some refactoring would be much safer than trying to reproduce every nook and
cranny in a rewrite.

re:4) I also don't see why boost would be a 'nonstandard dependency'. From
what I understand, a large part of the new C++0x standard is derived from
boost. Also C++ compilers are getting faster and more smart all the time, so
I absolutely don't see "build speed" as a goal.

re:6) I've already submitted a few pull requests that replace hardcoded
magic values with constants. Moving the constants to a config file is not
needed IMO because the end-user doesn't need to change them.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110712/ba5c759d/attachment.html>

From michael.offel at web.de  Tue Jul 12 21:47:12 2011
From: michael.offel at web.de (Michael Offel)
Date: Tue, 12 Jul 2011 22:47:12 +0100
Subject: [Bitcoin-development] overall bitcoin client code quality
Message-ID: <602127524.20110712224712@web.de>

Monday, July 11, 2011, 12:31:20 AM, Jeff Garzik wrote:
>> 2. isolation of modules
> It is a long term goal to move towards 'libbitcoin"
What  about creating a branch and start libbtc by implementing a small
module  like irc or p2p connection handling and use the new lib in the
client. I think this would be a proper start for a new clean code base
without  having  a  non  functional  client  for some time and it also
provides  some  kind  of red line between libbtc (cleaned up code) and
the old code base, making it easy to maintain order.
Would this approach be accepted for a merge?


Monday, July 11, 2011, 12:36:53 AM, Matt Corallo wrote:
>> While I can guess what the CScript class does I would more like to understand the thoughts behind the decision to implement some crypto macros in a compile time interpreter and 
>> why Berkeley db 4 is used at all.
> At the time Bitcoin began being built, Ubuntu 9.04 (or was it 9.10?) was
> used, as it offered the oldest libc on the newest OS.  Ubuntu 9.04 just
> happened to only have db4.7.  For backward compatibility, db4.7 has been
> used ever since (except, for some reason, the osx builds).  In 0.4,
> db4.8 will be used.  If you are asking why bdb was used to begin with,
> why not? its an excellent db and why reinvent the wheel?
It  was  more  meant  as an rhetorical question. A documented decision
would give anyone the chance of arguing against the usage of a library
instead  of asking stupid questions. A mailing list archive suits well
for  this  type  of information, so let me try to get some information
here.  Db4  is  an  excellent  choice  if  you  need  indexed database
functionality without SQL interface. But compared to an stl map lookup
and  fopen,  fwrite  and  fclose  it  is much harder to understand and
brings  a  lot  performance  overhead.  This  is  true as long as your
information are small enough to stay in main memory. A stl map storing
file  offsets  is  also  not that hard to write and understand. On the
other  side  using  an  SQL  interface  would  bring  the advantage of
swapping  database  providers.  An enterprise website could use oracle
while the average user could use sqlite. Also is db4 used for any type
of disk storage, this makes files like wallet.dat some kind of hard to
read. It is in no way more secure than storing private key's in an xml
file. But it is much harder to maintain and understand by the user and
the average programer.

> If you are on Windows, why are you on Windows? ;)
I'm  forced  to to use windows by the type of clients I'm working for.
And  during  leisure  I  like  to use a System that does not need much
effort to simply do what it is made for. ;)

>>
>> 6. hardcoded values
>>  
>> There are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.
> This one is an interesting debate.  There is no real reason to do this
> aside from some questionable code cleanup.  Also, there is no reason to
> encourage improperly-implemented alternate chains.  Alternate chains
> should be designed in such a way as to share the main chain's difficulty
> as described by Mike on the forum, not just make a new chain and hope it
> sticks.
It  is  not  that  interesting  as it looks first. There is no good in
running multiple chains for production use. To share the difficulty is
indeed  a  good  start  to  solve  the problem. That's also one of the
things  I  don't  like  off  the QBitcoin client. What I meant is just
to have the possibility to have all adjustable parameters in one place
and  to  be  able  to  quickly build an internal testnet without crazy
firewalling  to prevent it from dying. The first would allow to detect
problematic ddos protection settings early and giving the average user
the  possibility  to adjust all important settings if he knows what he
does.  That  includes  not  only alternate chains. One could choose to
include  transactions  only  at  a  higher  fee  or  at no fee at all.
Everyone could do such things by changing the code anyway. But not all
brilliant administrators or users are programmers.

>> The official Bitcoin client should be some kind of an reference project for other clients and must therefore be extra clean and well documented.
> True, but it is much higher priority to clean up the code than comment
> it better, plus there are various other features/more user-facing issues
> that need fixed as well, so...
Good code is the best documentation anyway.

Monday, July 11, 2011, 3:01:51 AM, Luke-Jr wrote:
>> My overall suggestion is to begin a complete rewrite, inspired by the old
>> code rather than moving a lot of "known to be somehow functional" around.
> There are many rewrites in progress, often with much better designs.
There  is  no  other  client  that  uses  C  and is meant to be a full
implementation  and platform independent except QBitcoin. QBitcoin seems
to  have  no  public repository to work on or I have overlooked it ?!?
Starting  a  new client on my own is just like starting an other never
ending and never used open source project.

>> The official Bitcoin client should be some kind of an reference project
>> for other clients and must therefore be extra clean and well documented.
> Bitcoin is supposed to be an authorityless project. There is no official.
While there is no authority, there is just one fully working client to
look  at.  This  may  lead to an working but instable network if other
clients are trying to interpret net.cpp and fail on it in details.

>> *everything else*
> Fix it yourself and submit the changes. If they don't get merged, fork.
As  I  said, there is no need for an other never ending story. I would
like  to  know  if  my affords have a chance to get merged or accepted
before I start to work on it.

Tuesday, July 12, 2011, 4:31:07 AM, Gavin Andresen wrote:
> We'll just tell everybody to stop using bitcoin so much for six months
> or so while we implement a much better client.  It will be exactly
> like the bitcoin we have now, except with a much nicer internal
> architecture and much cleaner code-base, and we're pretty sure we can
> get it done in six months if everything goes exactly as planned.
It  is  some  kind of arrogant to believe that anyone would stop using
bitcoin  if some programers decide to stop working for some month. And
it  is  also fond to not fix bugs in the old code base if they appear.
Also  there are lots of people out there using old clients anyway. The
important  improvement is more about quick extendibility and therefore
more  feature  rich secure code. This would not only help the official
code  base,  it would also improve trust and result in better external
bitcoin related projects.

> Then again, it might be easier to modify the
> CRITICAL_SECTION code to detect and report deadlocks (anybody have
> experience doing that?).
That  would be true if possible, but I'm pretty sure that the only way
to  detect  deadlocks  is  by either analyzing the code or single step
simulating it, what is really tricky on network applications.

Tuesday, July 12, 2011, 6:19:28 AM, Jeff Garzik wrote:
>> While spying on the old code, I noticed one major problem that could be
>> fixed quite easily. That is, the 1 class-per .h/.cpp rule is completely
>> ignored in main.h/cpp and net.h/cpp If all of the classes in the project
>> were re-factored to their own files,
> This is about the last thing we should do, and it's one of the worst
> coding practices of many C++ projects (and unfortunately carried over
> to Java by force).  See Knuth and his work on literate programming.
> Putting logically similar code -together- is often more impactful and
> meaningful than splitting up files into dozens (hundreds or thousands,
> in large projects) of tiny, 20-line files.
We  seem  to have very different opinions on that, but let's try to be
objective.  I  belive  that every class should be able to stand on its
own.  That way it can be reused in other projects or situations in the
same  project.  And  it  is  much  more easy to catch and extend class
behavior  if  it  is isolated to one file instead of multiple files or
mixed between other class methods in one file. On the other hand, what
is  bad  on  having  50-80  code  files in bitcoin? In terms of source
control  it  even  gives some kind of easier to read history and fewer
merge  conflicts.  When  you  start  writing  a  class for exactly one
propose  in  one specific situation used by one other class you should
think   about  writing  a  nested  class,  which  can  and  should  be
implemented in the same cpp file. That way you can achieve you similar
code in one location while accepting the rule others like.
Another nice side effect is the ability to see a class dependency list
be looking at the include listing.

Tuesday, July 12, 2011, 8:21:12 AM, John Smith wrote:
> re:4) I also don't see why boost would be a 'nonstandard
> dependency'. From what I understand, a large part of the new C++0x
> standard is derived from boost. Also C++ compilers are getting
> faster and more smart all the time, so I absolutely don't see "build speed" as a goal.
Don't  get  me  wrong. If boost would be used for something meaningful
there  would  be  no point in removing it. Everything non questionable
about boost does already find its way into most stl implementations.
And  everything  that find it's way into C++ 0x does it for the reason
that  it  is  better handled by an language extension than by an boost
construct. Otherwise there would be no point in extending the language.

Michael




From michael.offel at web.de  Tue Jul 12 22:50:48 2011
From: michael.offel at web.de (Michael Offel)
Date: Tue, 12 Jul 2011 23:50:48 +0100
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <CANEZrP1gEx0_A+BQfJLQ1jppc=-qS1DwruR_wXsP-ctqZGGnjA@mail.gmail.com>
References: <97305540.4426247.1310337435268.JavaMail.fmail@mwmweb052>
	<CANEZrP1gEx0_A+BQfJLQ1jppc=-qS1DwruR_wXsP-ctqZGGnjA@mail.gmail.com>
Message-ID: <296725421.20110712235048@web.de>

Monday, July 11, 2011, 10:33:04 AM, Mike Hearn wrote:

>> My overall suggestion is to begin a complete rewrite, inspired by the old
>> code rather than moving a lot of "known to be somehow functional" around.

> This essay is old but still relevant, I think:

>   http://www.joelonsoftware.com/articles/fog0000000069.html

It is indeed a very good one but I disagree in two points. First

> As  a  corollary  of  this  axiom, you can ask almost any programmer
> today  about  the code they are working on. "It's a big hairy mess,"
> they will tell you. "I'd like nothing better than to throw it out and start over."
If  someone  asks  me  this  question  about the project I'm currently
working  on  I  would never answer like that. This is important in the
threads  context  because  it  gives  me the confidence to say you can
build  very  large  C++ projects with lots of programers attached over
multiple years and still have a very clean and nice code base. And the
article does also accidently points to one of the roots of messy code.


> Back  to  that  two  page  function. Yes, I know, it's just a simple
> function  to  display  a  window,  but it has grown little hairs and
> stuff on it and nobody knows why. Well, I'll tell you why: those are
> bug  fixes. One of them fixes that bug that Nancy had when she tried
> to  install  the  thing  on  a  computer  that  didn't have Internet
> Explorer.  Another  one  fixes  that  bug  that occurs in low memory
> conditions.  Another  one fixes that bug that occurred when the file
> is  on  a floppy disk and the user yanks out the disk in the middle.
> That  LoadLibrary  call  is  ugly  but it makes the code work on old
> versions of Windows 95.
Well,   if   you  can not identify the meaning of some hairs, they are
either  attached  to  the  wrong  place, in an unclear way or are just
missing  a  line  of  comment.  There  are  studies about what size of
function  and  up  to  what  number  of  variables per function can be
covered  by  the average code reading programer. And these numbers are
low.


Second,  I  agree  with the point that you can not give up your market
leadership by beginning from scratch and you will if you do so. Unless
you  do  it like microsoft did in his example by simultaneously extend
the  old code base. And microsoft does this all the time, just look at
Windows 9x compared to Windows NT and the dead object oriented Windows
kernel. (They did buy lots of that but that is not the point here)
The  mistake  is  to  compare  a  small  project  like  Bitcoin to any
application  like  Word  or  Netscape. The author did explicitly write
that  he  does  not  mean  that  partial  rewrite  is a bad thing. And
rewriting  the  Bitcoin  client with three or four guys is like a tiny
rewrite in a real world application like Word.
> It's important to remember that when you start from scratch there is
> absolutely  no  reason  to believe that you are going to do a better
> job than you did the first time.
In  case of Bitcoin there is reason to believe that a rewrite would be
better.  The first version was hacked together by far less programmers
and  by at least one who did not care about readability, what tells me
that  he  possibly did never work on a real project before. And we now
have  a  known  to  work  protocol,  what  did  for sure slow down the
development a lot and caused rewrites.



Michael




From gmaxwell at gmail.com  Tue Jul 12 23:40:46 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 12 Jul 2011 19:40:46 -0400
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <602127524.20110712224712@web.de>
References: <602127524.20110712224712@web.de>
Message-ID: <CAAS2fgQfA6O+jrk7LF4p7mjoYOVm2rSOJYJbqr6oTiFYVbaVkQ@mail.gmail.com>

On Tue, Jul 12, 2011 at 5:47 PM, Michael Offel <michael.offel at web.de> wrote:
> We ?seem ?to have very different opinions on that, but let's try to be
> objective. ?I ?belive ?that every class should be able to stand on its
> own. ?That way it can be reused in other projects or situations in the
> same ?project. ?And ?it ?is ?much ?more easy to catch and extend class

Objectively, your believes have only the weight of the electrons they are
printed on, so long as you're talking and not coding.

I don't mean that as an insult? I'm sure many people value your ideas
but when you disagree with someone who is actually coding you'll
eventually lose every time.  Talk is cheap.

(And I'm guilty of this too? but aware of my lacking commits I'm
certainly not going to expect anyone to listen to _coding style_ advice.
 I try to keep my comments to crap I can measure and speculate about.)

[snip]
> In terms of source
> control ?it ?even ?gives some kind of easier to read history and fewer
> merge ?conflicts. ?When ?you ?start ?writing ?a ?class for exactly one
> propose ?in ?one specific situation used by one other class you should

Certainly no modern SCM has major issues with merge conflicts due to
shared files.

Bitcoin is a _tiny_ piece of software... on the order of 20kloc. It's a
a scale where someone competent can read it in a day and have a basic
overall understanding of it in a few.

This fact makes the aesthetics talk seem like pointless shed-painting
especially coming from people who are yet doing substantial work.

The proposal about reimplementing parts as libraries and the switching
to them after validating them is a fine one.  I suggest you do it.
Having multiple work on such projects would not be wasted effort,
as we'd all learn from the competition in designs/APIs/and targets for
comparative testing.

The interesting logic, however, is not net.cpp... because nothing too
awful happens if peers get confused and drop their connections here
and there. The critical logic is the blockchain validation logic. Which
must make absolutely identical decisions on all nodes and which has a
lot of corner cases which are difficult to test and might expose
behavioral differences.

There is also a lot of neat functionality in the scripts which is
currently disabled because of a lack of confidence about the
security of that code.

So not only are new, clean, secondary implementations of this logic
needed, but good automatic testing shims which can find
inconsistencies between implementations.

(Testing rigs are often an excellent area of work for people new to
a project.)



From bitcoin-list at bluematt.me  Wed Jul 13 00:17:59 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 13 Jul 2011 02:17:59 +0200
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <602127524.20110712224712@web.de>
References: <602127524.20110712224712@web.de>
Message-ID: <1310516279.2279.20.camel@Desktop666>

On Tue, 2011-07-12 at 22:47 +0100, Michael Offel wrote:
> Monday, July 11, 2011, 12:31:20 AM, Jeff Garzik wrote:
> >> 2. isolation of modules
> > It is a long term goal to move towards 'libbitcoin"
> What  about creating a branch and start libbtc by implementing a small
> module  like irc or p2p connection handling and use the new lib in the
> client. I think this would be a proper start for a new clean code base
> without  having  a  non  functional  client  for some time and it also
> provides  some  kind  of red line between libbtc (cleaned up code) and
> the old code base, making it easy to maintain order.
> Would this approach be accepted for a merge?
I had been planning on, and putting off starting work on, a central hub
infrastructure to Bitcoin until fairly recently.  Its a central hub
where net/main/wallet/etc can subscribe to get notified of new
blocks/txes/etc, push new blocks/txes/etc and can get information about
blocks/txes/etc.  I started work fairly recently, but hopefully it will
be functional sometime in the not-too-distant future.
As I said earlier, the Bitcoin code base really isn't all that messy,
its only its lack of clear lines between classes that makes it seem that
way.  It does some things inefficiently, however its general algorithms
are quite good the way they stand.  (though net could probably stand a
ground-up rewrite of the backend).  If you want to rewrite for a more
optimized handling of p2p connections/etc, it would be apprecitated and
(assuming its done well) certainly merged.
> 
> It  was  more  meant  as an rhetorical question. A documented decision
> would give anyone the chance of arguing against the usage of a library
> instead  of asking stupid questions. A mailing list archive suits well
> for  this  type  of information, so let me try to get some information
> here.  Db4  is  an  excellent  choice  if  you  need  indexed database
> functionality without SQL interface. But compared to an stl map lookup
> and  fopen,  fwrite  and  fclose  it  is much harder to understand and
> brings  a  lot  performance  overhead.  This  is  true as long as your
> information are small enough to stay in main memory. A stl map storing
> file  offsets  is  also  not that hard to write and understand. On the
> other  side  using  an  SQL  interface  would  bring  the advantage of
> swapping  database  providers.  An enterprise website could use oracle
> while the average user could use sqlite. Also is db4 used for any type
> of disk storage, this makes files like wallet.dat some kind of hard to
> read. It is in no way more secure than storing private key's in an xml
> file. But it is much harder to maintain and understand by the user and
> the average programer.
I can't speak for satoshi here, but I would agree with his decision on
the grounds that BDB offers a good mix.  Compared to a sql-driven
library, it offers a much lighter-weight footprint.  Compared to rolling
our own, its much, much simpler to use the existing code that people
have spent years writing/optimizing/fixing/etc.  It also provides good
Database transactioning which Bitcoin does depend on on some (rare,
though hopefully less so as time goes on) circumstances.
> 
> >>
> >> 6. hardcoded values
> >>  
> >> There are tons of hardcoded values for the official and the testnet block chain. It would be a great step to move all chain related settings to a chain description file. This would allow custom chains and clean up the code.
> > This one is an interesting debate.  There is no real reason to do this
> > aside from some questionable code cleanup.  Also, there is no reason to
> > encourage improperly-implemented alternate chains.  Alternate chains
> > should be designed in such a way as to share the main chain's difficulty
> > as described by Mike on the forum, not just make a new chain and hope it
> > sticks.
> It  is  not  that  interesting  as it looks first.
Interesting might have been the wrong word.  Let me rephrase that too
"of hot topic if you ask several people who incessantly create new
chains for no reason other than to create new chains".
> There is no good in
> running multiple chains for production use. To share the difficulty is
> indeed  a  good  start  to  solve  the problem. That's also one of the
> things  I  don't  like  off  the QBitcoin client. 
Neither the original client nor any other client or patch currently
implements work-sharing, I don't think you understood my statement here.
I was referring to http://forum.bitcoin.org/?topic=7219.0

> What I meant is just
> to have the possibility to have all adjustable parameters in one place
> and  to  be  able  to  quickly build an internal testnet without crazy
> firewalling  to prevent it from dying. The first would allow to detect
> problematic ddos protection settings early and giving the average user
> the  possibility  to adjust all important settings if he knows what he
> does.
Those parameters are available, though I don't think they show up in
--help output.  If someone had the time to go back and document the
parameters not in --help, it would be much appreciated ;)
> That  includes  not  only alternate chains. One could choose to
> include  transactions  only  at  a  higher  fee  or  at no fee at all.
> Everyone could do such things by changing the code anyway. But not all
> brilliant administrators or users are programmers.
That is yet another debated issue.  The transaction (relay) fees are
there for a reason much more than just for the hell of it.  If
transaction (relay) fees were easily changeable, they would serve no
purpose as they would all be set to 0.  Transaction fee handling needs a
rethinking and recoding, but offering each user the option to just relay
every transaction off the wire is not an option.

> 
> Tuesday, July 12, 2011, 4:31:07 AM, Gavin Andresen wrote:
> > We'll just tell everybody to stop using bitcoin so much for six months
> > or so while we implement a much better client.  It will be exactly
> > like the bitcoin we have now, except with a much nicer internal
> > architecture and much cleaner code-base, and we're pretty sure we can
> > get it done in six months if everything goes exactly as planned.
> It  is  some  kind of arrogant to believe that anyone would stop using
> bitcoin  if some programers decide to stop working for some month. And
> it  is  also fond to not fix bugs in the old code base if they appear.
> Also  there are lots of people out there using old clients anyway. The
> important  improvement is more about quick extendibility and therefore
> more  feature  rich secure code. This would not only help the official
> code  base,  it would also improve trust and result in better external
> bitcoin related projects.
That was not at all the point of that comment.  Trying to fix bugs on an
old codebase while rewriting a new one is worthless and just creating
way more effort than is necessary.

Matt

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110713/9d27706e/attachment.sig>

From jgarzik at exmulti.com  Wed Jul 13 02:47:05 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 12 Jul 2011 22:47:05 -0400
Subject: [Bitcoin-development] Wallet crypto merged
Message-ID: <CA+8xBpc3KwqoLq0cajfU2N0ERpdkMe64406-VLPP0PesiqB2kA@mail.gmail.com>

Merged wallet crypto.  Test (and review) away...

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From mike at plan99.net  Wed Jul 13 11:50:38 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 13 Jul 2011 13:50:38 +0200
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <1310516279.2279.20.camel@Desktop666>
References: <602127524.20110712224712@web.de>
	<1310516279.2279.20.camel@Desktop666>
Message-ID: <CANEZrP3bidQZHBacJf2_DB_1AbknBPwtXqwk1ic+OSzhGs6xHA@mail.gmail.com>

For what it's worth,?BitCoinJ has a NetworkParameters abstraction that
does what you suggest (groups all the constants together):

  http://code.google.com/p/bitcoinj/source/browse/trunk/src/com/google/bitcoin/core/NetworkParameters.java

It exists primarily to make unit testing easier. In the test suite, we
often build small chains and other structures. We do this by using a
NetworkParameters that has the easiest difficulty possible. It means
you can solve blocks in a few attempts, easily fast enough to build
test chains of any length you like.

I suspect that as the test suite expands, a similar abstraction will
be introduced to the Satoshi client.



From andyparkins at gmail.com  Wed Jul 13 13:04:09 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 13 Jul 2011 14:04:09 +0100
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <CANEZrP3bidQZHBacJf2_DB_1AbknBPwtXqwk1ic+OSzhGs6xHA@mail.gmail.com>
References: <602127524.20110712224712@web.de>
	<1310516279.2279.20.camel@Desktop666>
	<CANEZrP3bidQZHBacJf2_DB_1AbknBPwtXqwk1ic+OSzhGs6xHA@mail.gmail.com>
Message-ID: <201107131404.09788.andyparkins@gmail.com>

On 2011 July 13 Wednesday, Mike Hearn wrote:
> For what it's worth, BitCoinJ has a NetworkParameters abstraction that
> does what you suggest (groups all the constants together):

"all" is a strong word :-)

I'm doing a similar thing, and so far I have (and it's definitely incomplete) 
the following for these magic-constants that are often literals in the offical 
client:

	TBlock *GenesisBlock;
	TBitcoinHash ProofOfWorkLimit;
	uint16_t DefaultTCPPort;
	uint32_t Magic;
	uint8_t BitcoinAddressPrefix;

	unsigned int COINBASE_MATURITY;
	unsigned int COINBASE_MINIMUM_SCRIPT_SIZE;
	unsigned int COINBASE_MAXIMUM_SCRIPT_SIZE;
	unsigned int MAX_BLOCK_SIZE;
	unsigned int MAX_BLOCK_SIZE_GEN;
	unsigned int MAX_BLOCK_SIGOPS;
	unsigned int MINIMUM_TRANSACTION_SIZE;
	TCoinsElement MIN_MONEY;
	TCoinsElement MAX_MONEY;
	TCoinsElement MIN_TX_FEE;

	TCoinsElement INITIAL_MINING_REWARD;
	unsigned int INFLATION_PERIOD;

	unsigned int BLOCK_TIMESTAMP_WINDOW;
	unsigned int DIFFICULTY_TIMESPAN;
	unsigned int NEW_BLOCK_PERIOD;

	unsigned int INV_MAX;
	unsigned int GETDATA_MAX;
	unsigned int GETBLOCKS_RESPONSES_MAX;
	unsigned int GETHEADERS_RESPONSES_MAX;
	unsigned int ADDR_MAX;
	unsigned int ADDR_MIN_TIME;
	unsigned int ADDR_MAX_TIME_OFFSET;
	unsigned int ADDR_DEFAULT_TIME_PENALTY;
	unsigned int ASSUME_OFFLINE_AFTER;
	unsigned int OFFLINE_UPDATE_INTERVAL;
	unsigned int ONLINE_UPDATE_INTERVAL;

	map<unsigned int, TBitcoinHash> Checkpoints;

	static const TBitcoinHash NULL_REFERENCE_HASH;
	static const unsigned int NULL_REFERENCE_INDEX;

Any suggestions for others gratefully received.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110713/ae0f506a/attachment.sig>

From luke at dashjr.org  Wed Jul 13 18:37:57 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 13 Jul 2011 14:37:57 -0400
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <201107131404.09788.andyparkins@gmail.com>
References: <602127524.20110712224712@web.de>
	<CANEZrP3bidQZHBacJf2_DB_1AbknBPwtXqwk1ic+OSzhGs6xHA@mail.gmail.com>
	<201107131404.09788.andyparkins@gmail.com>
Message-ID: <201107131437.59039.luke@dashjr.org>

On Wednesday, July 13, 2011 9:04:09 AM Andy Parkins wrote:
> 	TCoinsElement MAX_MONEY;

This isn't an arbitrary constant, it's the result of a calculation...



From andyparkins at gmail.com  Wed Jul 13 21:41:29 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 13 Jul 2011 22:41:29 +0100
Subject: [Bitcoin-development] overall bitcoin client code quality
In-Reply-To: <201107131437.59039.luke@dashjr.org>
References: <602127524.20110712224712@web.de>
	<201107131404.09788.andyparkins@gmail.com>
	<201107131437.59039.luke@dashjr.org>
Message-ID: <201107132241.31289.andyparkins@gmail.com>

On Wednesday 13 July 2011 19:37:57 Luke-Jr wrote:
> On Wednesday, July 13, 2011 9:04:09 AM Andy Parkins wrote:
> > 	TCoinsElement MAX_MONEY;
> 
> This isn't an arbitrary constant, it's the result of a calculation...

Don't tell me:

bitcoin/src/main.h:41
static const int64 MAX_MONEY = 21000000 * COIN

21,000,000 seems pretty arbitrary to me.


-- 
Dr Andy Parkins
andyparkins at gmail.com



From witchspace81 at gmail.com  Thu Jul 14 05:19:11 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 14 Jul 2011 05:19:11 +0000
Subject: [Bitcoin-development] Notifications from client/wallet
Message-ID: <CAJNQ0st6Fo+VgVWj-AA5x8EvetZt4H=PR=n5q6NhZ6RyR0HYOA@mail.gmail.com>

Hello all,

I'd like to add notifications to the client and wallet, to decouple UI and
core communication, and especially so that UIs no longer have to poll for
changes.

I propose to use the boost::signal mechanism for that. It is basically a
glorified callback system, but allows decoupled delivery of 'signals' from
an object. Multiple other objects can listen in on an event without the
emitting object having to care.

Wallet:

class CWallet { ...
    boost::signal<void(int64)> balanceChanged;
}

void CWallet::newTx (...) {
    ...
    balanceChanged(new_balance);
    ...
}


UI:

GUI::GUI(CWallet *wallet) {
   ...
   wallet->balanceChanged.connect(boost::bind(&GUI::balanceChanged, this,
_1));
}
GUI::balanceChanged(int64 new_balance) {
   someWidget->setValue(new_balance);
}

Specific notifications that would be useful:

Wallet:

   - balanceChanged(int64): spendable balance changed
   - transactionAdded(int256): new transaction added to wallet
   - transactionUpdated(int256): transaction info changed
   - transactionRemoved(int256): transaction removed from wallet (can this
   happen? for completeness)
   - addressAdded(int160): address was added to address book
   - addressUpdated(int160): address label/other metadata was modified
   - addressRemoved(int160): address was removed from address book
   - notification(std::string message, int severity): warning/error occured
   in wallet processing, notify user
   - int askFee(std::string message, ...): ask user for fee

Network client:

   - numConnectionsChanged(int): new connections / connections broken
   - numBlocksChanged(int): new blocks came in or other changes to block
   chain
   - notification(std::string message, int severity): warning/error occured
   in network processing, notify user


JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110714/f39ec2f5/attachment.html>

From pieter.wuille at gmail.com  Thu Jul 14 09:10:42 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 14 Jul 2011 11:10:42 +0200
Subject: [Bitcoin-development] Notifications from client/wallet
In-Reply-To: <CAJNQ0st6Fo+VgVWj-AA5x8EvetZt4H=PR=n5q6NhZ6RyR0HYOA@mail.gmail.com>
References: <CAJNQ0st6Fo+VgVWj-AA5x8EvetZt4H=PR=n5q6NhZ6RyR0HYOA@mail.gmail.com>
Message-ID: <20110714091041.GA3814@ulyssis.org>

On Thu, Jul 14, 2011 at 05:19:11AM +0000, John Smith wrote:
> Hello all,
> 
> I'd like to add notifications to the client and wallet, to decouple UI and
> core communication, and especially so that UIs no longer have to poll for
> changes.
> 
> I propose to use the boost::signal mechanism for that. It is basically a
> glorified callback system, but allows decoupled delivery of 'signals' from
> an object. Multiple other objects can listen in on an event without the
> emitting object having to care.

I like this idea. Matt and I were considering a similar system for the internal
communication between net/wallet/blockdb/mempool, but weren't really aware of
boost::signal. I looked at it, and really seems to provide everything necessary.

> Specific notifications that would be useful:
> 
> Wallet:
> 
>    - balanceChanged(int64): spendable balance changed

Maybe even per-account?

>    - transactionAdded(int256): new transaction added to wallet
>    - transactionUpdated(int256): transaction info changed

Does that include more confirmations? I think we'd first need to define what
exactly is relevant information for transactions. It could be defined in
terms of a/some high-level information request functions for transactions, so
GUI/RPC don't inspect the wallet datastructures themselves anymore:
* GetTransactionState(): return state (immature, generated, unconfirmed,
                         rejected, confirmed), and number of confirmations.
                         (possibly using the negative number of confirmations
                         semantics as described here:
               http://forum.bitcoin.org/index.php?topic=5920.msg328468#msg328468.
* GetBroadcasts(): return either -1 (unknown) or some integer denoting how often
                   this tx was broadcast. The "0/offline" state is equal to 
                   unconfirmed + 0 broadcasts
* GetInputs(): return a list of pairs (uint256 txId, int nOffset, int64 nAmount)
* GetOutputsToMe(): return a list of pairs (address addr, string label, fBool isChange,
                int64 nAmount, bool fGenerated, bool fAvailable) describing all
                To-Me outputs
* GetOutputsToOthers(): return a list of pairs (address addr, string label,
                        int64 nAmount)
* GetFee(): get the fee paid

The only things that can change while the transaction is already in the wallet seems
to be GetTransactionState() and GetBroadcasts(), so those would cause a
transactionUpdated event?

Adding/removing private keys from the wallet may change the other outputs, so i suppose
those are also candidates for causing this event.

     - transactionRemoved(int256): transaction removed from wallet (can this
>    happen? for completeness)
for now, that can't happen, but if something like unspending/rejecting/detection
of conflicting transactions is added, it may.

>    - addressAdded(int160): address was added to address book
>    - addressUpdated(int160): address label/other metadata was modified
>    - addressRemoved(int160): address was removed from address book
>    - notification(std::string message, int severity): warning/error occured
>    in wallet processing, notify user

Ok.

>    - int askFee(std::string message, ...): ask user for fee

You simply mean the "Transaction requires fee of ..., agree?" message?

Regarding wallet encryption, we could use a

     - string askPassphrase()

maybe?

> Network client:
> 
>    - numConnectionsChanged(int): new connections / connections broken
>    - numBlocksChanged(int): new blocks came in or other changes to block
>    chain
>    - notification(std::string message, int severity): warning/error occured
>    in network processing, notify user

Ok; those would need to be implemented as globals until a more modular structure
is implemented.

-- 
Pieter




From bitcoin-list at bluematt.me  Thu Jul 14 14:13:04 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 14 Jul 2011 16:13:04 +0200
Subject: [Bitcoin-development] Notifications from client/wallet
In-Reply-To: <CAJNQ0st6Fo+VgVWj-AA5x8EvetZt4H=PR=n5q6NhZ6RyR0HYOA@mail.gmail.com>
References: <CAJNQ0st6Fo+VgVWj-AA5x8EvetZt4H=PR=n5q6NhZ6RyR0HYOA@mail.gmail.com>
Message-ID: <1310652784.2284.192.camel@Desktop666>

This sounds cool, I started implementing the other half of this a couple
days ago.  My broad idea of a source cleanup (that sipa largely wrote)
is to have a central notification interface which wallet(s)/net/block
store/etc all communicate with, and then an interface, like the one
proposed here, which GUI/RPC/etc use to communicate with wallet/net.
This should allow for very clean separation of pieces and large-scale
rewrites of one or another part (or drop-in replacements) without
touching anything but the parts that are being redone.  This should also
allow for cool programs (like pushpoold/a block notification server/etc)
to use Bitcoin as a library fairly efficiently.

Matt

On Thu, 2011-07-14 at 05:19 +0000, John Smith wrote:
> Hello all,
> 
> I'd like to add notifications to the client and wallet, to decouple UI
> and core communication, and especially so that UIs no longer have to
> poll for changes. 
> 
> I propose to use the boost::signal mechanism for that. It is basically
> a glorified callback system, but allows decoupled delivery of
> 'signals' from an object. Multiple other objects can listen in on an
> event without the emitting object having to care. 
> 
> Wallet:
> 
> class CWallet { ...
>     boost::signal<void(int64)> balanceChanged;
> }
> 
> 
> void CWallet::newTx (...) {
> 
>     ...
>     balanceChanged(new_balance);
>     ...
> }
> 
> 
> 
> UI:
> 
> GUI::GUI(CWallet *wallet) {
>    ...
>    wallet->balanceChanged.connect(boost::bind(&GUI::balanceChanged,
> this, _1));
> }
> GUI::balanceChanged(int64 new_balance) {
>    someWidget->setValue(new_balance);
> }
> 
> 
> Specific notifications that would be useful:
> 
> Wallet:
>       * balanceChanged(int64): spendable balance changed
>       * transactionAdded(int256): new transaction added to wallet
>       * transactionUpdated(int256): transaction info changed
>       * transactionRemoved(int256): transaction removed from wallet
>         (can this happen? for completeness)
>       * addressAdded(int160): address was added to address book
>       * addressUpdated(int160): address label/other metadata was
>         modified
>       * addressRemoved(int160): address was removed from address book
>       * notification(std::string message, int severity): warning/error
>         occured in wallet processing, notify user
>       * int askFee(std::string message, ...): ask user for fee
> Network client:
>       * numConnectionsChanged(int): new connections / connections
>         broken
>       * numBlocksChanged(int): new blocks came in or other changes to
>         block chain
>       * notification(std::string message, int severity): warning/error
>         occured in network processing, notify user
> 
> JS
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110714/efb85581/attachment.sig>

From dev at gim.name  Fri Jul 15 00:48:24 2011
From: dev at gim.name (=?utf-8?B?U3TDqXBoYW5l?= Gimenez)
Date: Fri, 15 Jul 2011 02:48:24 +0200
Subject: [Bitcoin-development] Listing of generation transactions
Message-ID: <20110715004824.GA697585@tenebreuse>

Hello all,

After reading pull/417, I'm noticing that generation transactions
always appear twice in listtransaction output:

 * one item with account "" and category "generate"/"imature"/"orphan",
   plus some transaction data.

 * one with the account associated to the destination address and
   category "received", plus the same transaction data.

Both items have the same txid.

Is this the intended behavior or should the second be removed?

Also, why is account "" enforced in the first item?
(Wrong assumption that coinbase is always built from the client
itself?).

Last, it happens that {list,get}receivedby{address,account} commands
never list or take into account generation transactions. I'm not sure
how the help message associated to those commands should be
understood. As a user, I would assume that generated transaction are
included in these listings/amounts.

Is all this related with some issues encountered by E-wallet
providers?

Thanks,
St?phane



From luke at dashjr.org  Fri Jul 15 02:50:42 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 14 Jul 2011 22:50:42 -0400
Subject: [Bitcoin-development] Wallet encryption migration
Message-ID: <201107142250.44189.luke@dashjr.org>

Just wanted to get these suggestions out here:
1. Write over the old, unencrypted wallet.dat a couple of times with pseudo-
   random data in an attempt to secure-delete it.
2. Mark all the keys imported from an unencrypted file (wallet or otherwise)
   as "potentially compromised" and never use them for new addresses
   (basically, don't use the old keypool for getnewaddress, change, and such).



From dev at gim.name  Fri Jul 15 16:08:34 2011
From: dev at gim.name (=?utf-8?B?U3TDqXBoYW5l?= Gimenez)
Date: Fri, 15 Jul 2011 18:08:34 +0200
Subject: [Bitcoin-development] Listing of generation transactions
In-Reply-To: <20110715004824.GA697585@tenebreuse>
References: <20110715004824.GA697585@tenebreuse>
Message-ID: <20110715160834.GA5822@tenebreuse>

> After reading pull/417, I'm noticing that generation transactions
> always appear twice in listtransaction output:
>
>  * one item with account "" and category "generate"/"imature"/"orphan",
>    plus some transaction data.
>
>  * one with the account associated to the destination address and
>    category "received", plus the same transaction data.

Sorry! the item duplication was due to the pull. (very stupid me)

The issue with account "" remains.

For coinbase transactions, we may list one "generated" item per txout
that corresponds to an owned address. Accounts would be associated
accordingly, in the same way as for usual "received" amounts. Account
balances would also take into account these generated amounts in the
obvious way.

Would that be ok? I think few people rely on these specific details,
and they would be happy with such a change. Moreover, this would
actually simplify the code a little bit.


> Last, it happens that {list,get}receivedby{address,account} commands
> never list or take into account generation transactions. I'm not sure
> how the help message associated to those commands should be
> understood. As a user, I would assume that generated transaction are
> included in these listings/amounts.
>
> Is all this related with some issues encountered by E-wallet
> providers?



From witchspace81 at gmail.com  Sat Jul 16 09:34:15 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 16 Jul 2011 09:34:15 +0000
Subject: [Bitcoin-development] The forums...
Message-ID: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>

I'm getting really, really annoyed by the forums.

Can we please please remove the link to them from bitcoin.org, and replace
it with a forum that has but one goal: help users of bitcoin (and merchants,
and developers)?

No speculation about economic or political futures, no philosophical pissing
contests, no "I trust/distrust this/that exchange/company" FUD, no repeated
discussion of things already answered in the FAQ, etc.

There is a place for all of those, but not in the official forums of an open
source project. IMO, if we link an official forum from bitcoin.org at all,
it should be a neutral place for helping people adopt the technology (a bit
like the Ubuntu forums, for example).

Just my two bitcents...

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/5637b7fb/attachment.html>

From bitcoin-list at bluematt.me  Sat Jul 16 10:54:39 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 16 Jul 2011 12:54:39 +0200
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
Message-ID: <1310813679.2195.0.camel@Desktop666>

If we had the moding power, yes, but we don't have nearly enough people
who could mod such a forum.

Matt

On Sat, 2011-07-16 at 09:34 +0000, John Smith wrote:
> 
> I'm getting really, really annoyed by the forums.
> 
> Can we please please remove the link to them from bitcoin.org, and
> replace it with a forum that has but one goal: help users of bitcoin
> (and merchants, and developers)?
> 
> No speculation about economic or political futures, no philosophical
> pissing contests, no "I trust/distrust this/that exchange/company"
> FUD, no repeated discussion of things already answered in the FAQ,
> etc. 
> 
> There is a place for all of those, but not in the official forums of
> an open source project. IMO, if we link an official forum from
> bitcoin.org at all, it should be a neutral place for helping people
> adopt the technology (a bit like the Ubuntu forums, for example). 
> 
> Just my two bitcents...
> 
> JS
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/a0006723/attachment.sig>

From witchspace81 at gmail.com  Sat Jul 16 11:07:02 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 16 Jul 2011 11:07:02 +0000
Subject: [Bitcoin-development] The forums...
In-Reply-To: <1310813679.2195.0.camel@Desktop666>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
Message-ID: <CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>

On Sat, Jul 16, 2011 at 10:54 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> If we had the moding power, yes, but we don't have nearly enough people
> who could mod such a forum.
>


I think a simpler forum would also be easier to moderate. Main criterion: is
it helpful to users? If not, lock/remove it.

Two categories: Technical Support, Development (which can be split up
between client work, and other software/websites integrating bitcoin).

Those two can be replicated per language if a large enough group exists in
that country that is also willing to maintain order.

I have no problems with volunteering some time moderating, but not on the
current forums.

If this is really a capacity issue then IMO we should simply remove the link
and come up with an alternative medium to address user issues (such as a
moderated mailing list).  But I don't really believe this. There's a ton of
successful forums that did pick the right structure and helpful moderators,
and a lot of them are volunteer-driven.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/75d09834/attachment.html>

From witchspace81 at gmail.com  Sat Jul 16 11:20:05 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 16 Jul 2011 11:20:05 +0000
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
Message-ID: <CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>

I know most of the people actively working on bitcoin (and active on this
list) ignore the forums, for good reason. But there's a lot of people
(everyone new?) that think the most active members of the forum have a major
influence on the project's direction. Which is making us as developers look
really bad. As if we're some political faction that wants to bring down
world governments and unleash a global anarchistic doomsday scenario.

It really needs to be more down-to-earth. Ideally, the forum would simply be
a way to communicate with the *actual* users. For example, I use it for
soliciting user feedback on UI features.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/064ef97b/attachment.html>

From luke at dashjr.org  Sat Jul 16 17:14:11 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 16 Jul 2011 13:14:11 -0400
Subject: [Bitcoin-development] [RFC] listtransactions reformatting
Message-ID: <201107161314.13267.luke@dashjr.org>

Example patch: http://tinyurl.com/6679go5

Changes:
* Additions to your wallet always are category:"receive", no matter what kind
  of transaction
* Generated coins have an extra key, from:"generation"
* All transactions have a new key, status:
  * "orphan" -- Another block chain invalidated this transaction (only for
                generation?)
  * "validating" -- Default stage for transactions; 0-2 confirmations for
                    ordinary sends, and 0-100 for generated coins
  * "processing" -- 3-6 confirms for ordinary sends; 101-120 for generated
  * "confirmed" -- over 6/120 confirmations
  * "expired" -- for ordinary sends that have timed out without getting into a
                 block, or had its inputs otherwise respent

This change is proposed to fix webservices being ignorant of generated 
transactions by keeping a standard category/format for all similar types of 
entries.

Thoughts?



From dev at gim.name  Sat Jul 16 19:59:07 2011
From: dev at gim.name (=?utf-8?B?U3TDqXBoYW5l?= Gimenez)
Date: Sat, 16 Jul 2011 21:59:07 +0200
Subject: [Bitcoin-development] [RFC] listtransactions reformatting
In-Reply-To: <201107161314.13267.luke@dashjr.org>
References: <201107161314.13267.luke@dashjr.org>
Message-ID: <20110716195907.GA311029@tenebreuse>

Hi,

You may have a look at the following proposal. It associates
generations txouts with the appropriate addresses and accounts.
(See my previous mail)

https://github.com/sgimenez/bitcoin/commit/a8e6510042f2f7f951414c7da124668b30da4acd

> * Additions to your wallet always are category:"receive", no matter
>   what kind of transaction

Either this, or maybe webservices should be told to forget about
categories and to rely only on the sign of the amounts. Maybe a "type"
field with values "credit"/"debit" could help them? This way, more
categories could be added later (escrow transactions, or other scripts
that might be standardized).

An official API guide (not just a technical reference) would be very
valuable here.

Last, I agree that {list,get}receivedby* should include generated
amounts, because there is currently no way to do this for
generations. (This issue is not addressed by my patch yet)

Best,
St?phane



From luke at dashjr.org  Sat Jul 16 20:03:06 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 16 Jul 2011 16:03:06 -0400
Subject: [Bitcoin-development] [RFC] listtransactions reformatting
In-Reply-To: <20110716195907.GA311029@tenebreuse>
References: <201107161314.13267.luke@dashjr.org>
	<20110716195907.GA311029@tenebreuse>
Message-ID: <201107161603.08960.luke@dashjr.org>

On Saturday, July 16, 2011 3:59:07 PM St?phane Gimenez wrote:
> Hi,
> 
> You may have a look at the following proposal. It associates
> generations txouts with the appropriate addresses and accounts.
> (See my previous mail)
> 
> https://github.com/sgimenez/bitcoin/commit/a8e6510042f2f7f951414c7da124668b
> 30da4acd

It is also very broken, which is why I took the time to come up with something 
workable when I needed it ;)

> > * Additions to your wallet always are category:"receive", no matter
> >   what kind of transaction
> 
> Either this, or maybe webservices should be told to forget about
> categories and to rely only on the sign of the amounts. Maybe a "type"
> field with values "credit"/"debit" could help them? This way, more
> categories could be added later (escrow transactions, or other scripts
> that might be standardized).

"move" is positive amount, but doesn't change the actual value in the wallet.



From ahbritto at gmail.com  Sat Jul 16 22:38:02 2011
From: ahbritto at gmail.com (Arthur Britto)
Date: Sat, 16 Jul 2011 15:38:02 -0700
Subject: [Bitcoin-development] Wallet encryption migration
In-Reply-To: <201107142250.44189.luke@dashjr.org>
References: <201107142250.44189.luke@dashjr.org>
Message-ID: <CAFjXj6NocN+iPh2hOsRvP63jOc3hgi82RzztByk74rL2hBO3Yw@mail.gmail.com>

On Thu, Jul 14, 2011 at 7:50 PM, Luke-Jr <luke at dashjr.org> wrote:

> Just wanted to get these suggestions out here:
> 1. Write over the old, unencrypted wallet.dat a couple of times with
> pseudo-
>   random data in an attempt to secure-delete it.
>

Writing zeros just once should be sufficient:
http://cmrr.ucsd.edu/people/Hughes/DataSanitizationTutorial.pdf

-Arthur
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/53d6f237/attachment.html>

From jgarzik at exmulti.com  Sat Jul 16 23:35:17 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 16 Jul 2011 19:35:17 -0400
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
Message-ID: <CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>

On Sat, Jul 16, 2011 at 7:20 AM, John Smith <witchspace81 at gmail.com> wrote:
> I know most of the people actively working on bitcoin (and active on this
> list) ignore the forums, for good reason. But there's a lot of people
> (everyone new?) that think the most active members of the forum have a major
> influence on the project's direction. Which is making us as developers look
> really bad. As if we're some political faction that wants to bring down
> world governments and unleash a global anarchistic doomsday scenario.
>
> It really needs to be more down-to-earth. Ideally, the forum would simply be
> a way to communicate with the *actual* users. For example, I use it for
> soliciting user feedback on UI features.

I agree completely.

While the owner of the forums and bitcoin.org is Missing In Action and
has not responded to emails in more than a week, we do have access to
change the main www.bitcoin.org home page, to link to another forum.

Or we could simply de-link the current forum, as a first step.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From dhuff at jrbobdobbs.org  Sun Jul 17 01:16:55 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Sat, 16 Jul 2011 20:16:55 -0500
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
	<CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
Message-ID: <83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>

On Jul 16, 2011, at 6:35 PM, Jeff Garzik wrote:

> On Sat, Jul 16, 2011 at 7:20 AM, John Smith <witchspace81 at gmail.com> wrote:
>> I know most of the people actively working on bitcoin (and active on this
>> list) ignore the forums, for good reason. But there's a lot of people
>> (everyone new?) that think the most active members of the forum have a major
>> influence on the project's direction. Which is making us as developers look
>> really bad. As if we're some political faction that wants to bring down
>> world governments and unleash a global anarchistic doomsday scenario.
>> 
>> It really needs to be more down-to-earth. Ideally, the forum would simply be
>> a way to communicate with the *actual* users. For example, I use it for
>> soliciting user feedback on UI features.
> 
> I agree completely.
> 
> While the owner of the forums and bitcoin.org is Missing In Action and
> has not responded to emails in more than a week, we do have access to
> change the main www.bitcoin.org home page, to link to another forum.
> 
> Or we could simply de-link the current forum, as a first step.

I say just kill the forum.bitcoin.org DNS entry along with it.

-- 
Douglas Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110716/bad72c74/attachment.sig>

From jgarzik at exmulti.com  Sun Jul 17 02:00:01 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 16 Jul 2011 22:00:01 -0400
Subject: [Bitcoin-development] The forums...
In-Reply-To: <83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
	<CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
	<83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>
Message-ID: <CA+8xBpf-xrmz3Eo7ZjitUHivR1fU4gRZt_1mdi=1EDrOLpZmVw@mail.gmail.com>

On Sat, Jul 16, 2011 at 9:16 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
> I say just kill the forum.bitcoin.org DNS entry along with it.

Hopefully sirius will do this when he moves forum.bitcoin.org to
forum.bitcointalk.org.

But sirius is the only one with keys to bitcoin.org DNS, so....

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From robert at mckay.com  Sun Jul 17 02:12:42 2011
From: robert at mckay.com (Robert McKay)
Date: Sun, 17 Jul 2011 03:12:42 +0100
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CA+8xBpf-xrmz3Eo7ZjitUHivR1fU4gRZt_1mdi=1EDrOLpZmVw@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
	<CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
	<83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>
	<CA+8xBpf-xrmz3Eo7ZjitUHivR1fU4gRZt_1mdi=1EDrOLpZmVw@mail.gmail.com>
Message-ID: <CAAqW1RE9MfUFb4quwtvX+BNhx7ream6yiSQGuQt1KSPMXyipUQ@mail.gmail.com>

On 7/17/11, Jeff Garzik <jgarzik at exmulti.com> wrote:
> On Sat, Jul 16, 2011 at 9:16 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
>> I say just kill the forum.bitcoin.org DNS entry along with it.
>
> Hopefully sirius will do this when he moves forum.bitcoin.org to
> forum.bitcointalk.org.
>
> But sirius is the only one with keys to bitcoin.org DNS, so....

At the risk of making myself very unpopular, perhaps it's the
development project that should move to a new URL?

Rob



From gavinandresen at gmail.com  Sun Jul 17 03:02:51 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sun, 17 Jul 2011 13:02:51 +1000
Subject: [Bitcoin-development] [RFC] listtransactions reformatting
In-Reply-To: <201107161603.08960.luke@dashjr.org>
References: <201107161314.13267.luke@dashjr.org>
	<20110716195907.GA311029@tenebreuse>
	<201107161603.08960.luke@dashjr.org>
Message-ID: <CABsx9T2qhLiYAQNOCigXOMySgVqDqqQMotqYQwSPZEwkSYbY=g@mail.gmail.com>

Fixing listtransactions (and listreceivedby/etc) so coin generation
transactions to particular addresses/accounts are credited to that
address/account is a good idea.

I don't think changing listtransactions output would be on the
priority list for any web services operators (in fact, I think most
would scream bloody murder if the output changed in a way that forced
them to change their code). The accounts-related things that I think
ARE on their high-priority list are:

1) Fixing getbalance and listtransactions performance problems when
you have hundreds of thousands of transactions and thousands of
accounts.

2) push-notification of coins received to accounts, so they don't have
to poll for changes.

-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Sun Jul 17 08:01:47 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 17 Jul 2011 04:01:47 -0400
Subject: [Bitcoin-development] Wallet encryption migration
In-Reply-To: <201107142250.44189.luke@dashjr.org>
References: <201107142250.44189.luke@dashjr.org>
Message-ID: <CAAS2fgRBQb82iwNjk3Vd6qecFX4Wxkkvk2LLWfVeKS+VD9nLzA@mail.gmail.com>

On Thu, Jul 14, 2011 at 10:50 PM, Luke-Jr <luke at dashjr.org> wrote:
> Just wanted to get these suggestions out here:
> 1. Write over the old, unencrypted wallet.dat a couple of times with pseudo-
> ? random data in an attempt to secure-delete it.
> 2. Mark all the keys imported from an unencrypted file (wallet or otherwise)
> ? as "potentially compromised" and never use them for new addresses
> ? (basically, don't use the old keypool for getnewaddress, change, and such).

On Sat, Jul 16, 2011 at 6:38 PM, Arthur Britto <ahbritto at gmail.com> wrote:
> Writing zeros just once should be sufficient:

On many (most?) modern Unix file systems writing zeros just once is
not sufficient because the data won't be written in place, but
multiple writes aren't any better.

Moving the keypool addresses aside so they won't be used sounds like a
good idea.

The lamest thing is that there is no way for wallet to be
born-encrypted. So the only way to prevent a leak is to build the
wallet initially on a ramdisk or the like, then move it over after
encrypting it.

At least luke-jr's (2) would make the key leak on a new wallet
inconsequential? since all keys in it are keypool keys at that point.
So I really think it ought to be done.



From bitcoin-list at bluematt.me  Sun Jul 17 10:46:20 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 17 Jul 2011 12:46:20 +0200
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CAAqW1RE9MfUFb4quwtvX+BNhx7ream6yiSQGuQt1KSPMXyipUQ@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
	<CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
	<83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>
	<CA+8xBpf-xrmz3Eo7ZjitUHivR1fU4gRZt_1mdi=1EDrOLpZmVw@mail.gmail.com>
	<CAAqW1RE9MfUFb4quwtvX+BNhx7ream6yiSQGuQt1KSPMXyipUQ@mail.gmail.com>
Message-ID: <1310899580.2405.2.camel@Desktop666>

On Sun, 2011-07-17 at 03:12 +0100, Robert McKay wrote:
> On 7/17/11, Jeff Garzik <jgarzik at exmulti.com> wrote:
> > On Sat, Jul 16, 2011 at 9:16 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
> >> I say just kill the forum.bitcoin.org DNS entry along with it.
> >
> > Hopefully sirius will do this when he moves forum.bitcoin.org to
> > forum.bitcointalk.org.
> >
> > But sirius is the only one with keys to bitcoin.org DNS, so....
> 
> At the risk of making myself very unpopular, perhaps it's the
> development project that should move to a new URL?
> 
> Rob
Its not that people dislike the forums or dislike having the forums.
Its that they are giving bitcoin a very, very bad name with all the
illegal crap, etc in them to the point of even possibly creating legal
risk in the future.  So its best that the forums are marked as
unofficial and not part of Bitcoin proper but just some group of kids
who for some reason think Bitcoin is good for their drug-buying habits.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/467e48a6/attachment.sig>

From witchspace81 at gmail.com  Sun Jul 17 10:59:58 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 17 Jul 2011 10:59:58 +0000
Subject: [Bitcoin-development]  The forums...
In-Reply-To: <CAJNQ0suMJAApg-fK70BBAHRT_41jc4-HMwxaHHccg0O+MOvV0A@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
	<CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
	<83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>
	<CA+8xBpf-xrmz3Eo7ZjitUHivR1fU4gRZt_1mdi=1EDrOLpZmVw@mail.gmail.com>
	<CAAqW1RE9MfUFb4quwtvX+BNhx7ream6yiSQGuQt1KSPMXyipUQ@mail.gmail.com>
	<CAJNQ0suMJAApg-fK70BBAHRT_41jc4-HMwxaHHccg0O+MOvV0A@mail.gmail.com>
Message-ID: <CAJNQ0stB_Aopzz6K+0+bok6-WA3ZSdKT=rtxKwSo3vX1Oe2iSw@mail.gmail.com>

> At the risk of making myself very unpopular, perhaps it's the
> development project that should move to a new URL?
>

So you'd want to rename the project?

I'm not sure that'd be a good idea. For better or worse, even though most
people don't get it because they think it's about mining or investments, the
'bitcoin' name has become pretty well-known.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/172bfcbc/attachment.html>

From zgenjix at yahoo.com  Sun Jul 17 11:53:05 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 17 Jul 2011 04:53:05 -0700 (PDT)
Subject: [Bitcoin-development] [RFC] listtransactions reformatting
In-Reply-To: <CABsx9T2qhLiYAQNOCigXOMySgVqDqqQMotqYQwSPZEwkSYbY=g@mail.gmail.com>
References: <201107161314.13267.luke@dashjr.org>
	<20110716195907.GA311029@tenebreuse>
	<201107161603.08960.luke@dashjr.org>
	<CABsx9T2qhLiYAQNOCigXOMySgVqDqqQMotqYQwSPZEwkSYbY=g@mail.gmail.com>
Message-ID: <1310903585.65859.YahooMailNeo@web121007.mail.ne1.yahoo.com>

Oops, sorry Gavin. Meant to reply to the mailing list.

---------------


People should not be using accounts for receiving funds on 
merchant sites. There are too many bugs associated with it, and it has 
innumerable problems. Like not being able to merge wallets or lack of 
find grained control when moving funds around.

https://gitorious.org/intersango/bitcoind/commit/50a6ab79ed8c5398648c52fbdc4be07f70dedadb

This is the recommended & most safest way to receive funds on a merchant site ATM.

listreceivedsince <timest> is called every so often by a cron job.
The output is parsed and placed into another table and then another job 
will go and create a deposit request from that table. The next call to listreceivedsince <timest> will call with the time of the last 
transaction, and doubles must be discarded using the txid.
Polling listtransactions is less convenient since you always repeat old 
transactions that you may not need, get generated transactions and have 
to pick a good number that goes back far enough, but not too far.


________________________________
From: Gavin Andresen <gavinandresen at gmail.com>
To: bitcoin-development at lists.sourceforge.net
Sent: Sunday, July 17, 2011 5:02 AM
Subject: Re: [Bitcoin-development] [RFC] listtransactions reformatting

Fixing listtransactions (and listreceivedby/etc) so coin generation
transactions to particular addresses/accounts are credited to that
address/account is a good idea.

I don't think changing listtransactions output would be on the
priority list for any web services operators (in fact, I think most
would scream bloody murder if the output changed in a way that forced
them to change their code). The accounts-related things that I think
ARE on their high-priority list are:

1) Fixing getbalance and listtransactions performance problems when
you have hundreds of thousands of transactions and thousands of
accounts.

2) push-notification of coins received to accounts, so they don't have
to poll for changes.

-- 
--
Gavin Andresen

------------------------------------------------------------------------------
AppSumo Presents a FREE Video for the SourceForge Community by Eric 
Ries, the creator of the Lean Startup Methodology on "Lean Startup 
Secrets Revealed." This video shows you how to validate your ideas, 
optimize your ideas and identify your business strategy.
http://p.sf.net/sfu/appsumosfdev2dev
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/508d6415/attachment.html>

From luke at dashjr.org  Sun Jul 17 12:30:50 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 17 Jul 2011 08:30:50 -0400
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CAJNQ0stB_Aopzz6K+0+bok6-WA3ZSdKT=rtxKwSo3vX1Oe2iSw@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<CAJNQ0suMJAApg-fK70BBAHRT_41jc4-HMwxaHHccg0O+MOvV0A@mail.gmail.com>
	<CAJNQ0stB_Aopzz6K+0+bok6-WA3ZSdKT=rtxKwSo3vX1Oe2iSw@mail.gmail.com>
Message-ID: <201107170830.53053.luke@dashjr.org>

On Sunday, July 17, 2011 6:59:58 AM John Smith wrote:
> > At the risk of making myself very unpopular, perhaps it's the
> > development project that should move to a new URL?
> 
> So you'd want to rename the project?
> 
> I'm not sure that'd be a good idea. For better or worse, even though most
> people don't get it because they think it's about mining or investments,
> the 'bitcoin' name has become pretty well-known.

The "Satoshi Client" doesn't really have a formal name yet.
Don't confuse an implementation with the network itself.



From dhuff at jrbobdobbs.org  Sun Jul 17 17:12:42 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Sun, 17 Jul 2011 12:12:42 -0500
Subject: [Bitcoin-development] The forums...
In-Reply-To: <1310899580.2405.2.camel@Desktop666>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
	<CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
	<83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>
	<CA+8xBpf-xrmz3Eo7ZjitUHivR1fU4gRZt_1mdi=1EDrOLpZmVw@mail.gmail.com>
	<CAAqW1RE9MfUFb4quwtvX+BNhx7ream6yiSQGuQt1KSPMXyipUQ@mail.gmail.com>
	<1310899580.2405.2.camel@Desktop666>
Message-ID: <CAPiTikW=Chz-L2PYcfU-KrLLZRBhDvEiL6YDP276GnGir217+g@mail.gmail.com>

On Jul 17, 2011 5:46 AM, "Matt Corallo" <bitcoin-list at bluematt.me> wrote:
> Its not that people dislike the forums or dislike having the forums.
Speak for yourself. I think they're a cesspool.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110717/21caa5db/attachment.html>

From witchspace81 at gmail.com  Mon Jul 18 04:36:49 2011
From: witchspace81 at gmail.com (John Smith)
Date: Mon, 18 Jul 2011 04:36:49 +0000
Subject: [Bitcoin-development] The forums...
In-Reply-To: <CAPiTikW=Chz-L2PYcfU-KrLLZRBhDvEiL6YDP276GnGir217+g@mail.gmail.com>
References: <CAJNQ0stPb+3yarKh4M+tFpjSaSG4-GrZX9AVFPh5q7+Ho_OJOA@mail.gmail.com>
	<1310813679.2195.0.camel@Desktop666>
	<CAJNQ0st1hv4k-11EHOPDqkkXCGQh41ysKhUmT6qgLu8uaGng=Q@mail.gmail.com>
	<CAJNQ0svFL6JMpcRNyJ=xpv0wrn1EpGOUG7ff2-JXH5BKJVHZqQ@mail.gmail.com>
	<CA+8xBpduc=vn_Q7Kw0m+VkuHjz0FTxjDZB+hOPLnRJcuh49gJw@mail.gmail.com>
	<83816D44-004A-43C4-AFFE-ED1BABD90144@jrbobdobbs.org>
	<CA+8xBpf-xrmz3Eo7ZjitUHivR1fU4gRZt_1mdi=1EDrOLpZmVw@mail.gmail.com>
	<CAAqW1RE9MfUFb4quwtvX+BNhx7ream6yiSQGuQt1KSPMXyipUQ@mail.gmail.com>
	<1310899580.2405.2.camel@Desktop666>
	<CAPiTikW=Chz-L2PYcfU-KrLLZRBhDvEiL6YDP276GnGir217+g@mail.gmail.com>
Message-ID: <CAJNQ0ssAgx+FS_LZmEDRXsdKpC4M5xaegJh4+vGv0Au+Cmi6Dw@mail.gmail.com>

On Sun, Jul 17, 2011 at 5:12 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:

> On Jul 17, 2011 5:46 AM, "Matt Corallo" <bitcoin-list at bluematt.me> wrote:
> > Its not that people dislike the forums or dislike having the forums.
> Speak for yourself. I think they're a cesspool.


Yes they are. Which is why the current forums will be moved to another
domain. It grew into a monstrosity.

On the other hand, I do like forums in general.  It would be nice have an
official help forum dedicated to just the client software (and protocol) and
how to use/integrate/modify it.  It should come with a link to the FAQ
before posting.

Also, as a mailing list is (kind of) limited to text only, a forum makes it
easier to discuss graphical subjects such as UI.

Then again given the kind of people bitcoin seems to attract, it might be
unrealistic to think a normal forum can be maintained... On the other hand,
people that misbehave can then be sent to the bitcointalk forums :-)

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110718/0ed00591/attachment.html>

From chris_acheson at lavabit.com  Mon Jul 18 20:08:46 2011
From: chris_acheson at lavabit.com (Chris Acheson)
Date: Mon, 18 Jul 2011 16:08:46 -0400
Subject: [Bitcoin-development] The forums...
Message-ID: <4E2492CE.9040500@lavabit.com>

I've been pushing for the Bitcoin Stack-Exchange as our main
user/merchant support site:

<http://area51.stackexchange.com/proposals/30763/bitcoin-crypto-currency>

I think the Stack Exchange format is ideal, since the
acceptable/unacceptable topics are defined in advance, and it has a good
user moderation/reputation system.  The site will be for technical and
conceptual questions only, no politics or philosophy, and obviously no
buying and selling.  This makes it unattractive to the kooks and
hucksters, and therefore unattractive to the trolls as well.

At the time of this writing, we still need 64 more people to commit to
using the site before it will launch, 48 of which need to be established
Stack Exchange users.  At the rate we've been going, the site should be
up around the end of August.  I'd like to make it happen before then, so
please join up!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 900 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110718/e9d5292e/attachment.sig>

From jgarzik at exmulti.com  Tue Jul 19 00:17:21 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 18 Jul 2011 20:17:21 -0400
Subject: [Bitcoin-development] Bitcoin v0.3.24 released
In-Reply-To: <CA+8xBpcNx7ffKCj6HEdTmK2S+AORcZen+dfAtZyzz3fQ44+PHg@mail.gmail.com>
References: <CA+8xBpcNx7ffKCj6HEdTmK2S+AORcZen+dfAtZyzz3fQ44+PHg@mail.gmail.com>
Message-ID: <CA+8xBpckSmPqiMocgLHvawNMz6_fdM8+-JVOQJch=0x9NdNfng@mail.gmail.com>

Mac OSX version of bitcoin client finally posted at
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.24/

Updated sums (stored as SHA1SUMS.asc on SF):
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

4909c17a1cc025c6f6c88d036f0b487c51c510f6  bitcoin-0.3.24-linux.tar.gz
fed0afebe0b0c0f77a637600ac4abecbe5d098ed  bitcoin-0.3.24-macosx.zip
58531249230f769fdc755822b41e0f18ba59512c  bitcoin-0.3.24-src.tar.gz
d4b5425eff673551a326d5326b92a06359dc1a3d  bitcoin-0.3.24-win32-setup.exe
520aed70ee28a0a91ed49dd983639cb1fab2a93c  bitcoin-0.3.24-win32.zip
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQIVAwUBTiTMHNodwg8tvwyoAQL8CRAAgraSWP12lbwrhpiElvB7LIWoPbiE1dUx
i2ZO4MVJYKMbyuHu55j1Uq7a4ZqpNhXqq7U6efnoDTCl9sdpyhKxiql0SpsYBLs1
IehX4UEVGVMUE5uepmOs+cYnYuAhNzvxNqKFPv3D7uEOXPmSxlUa4s0GEnTgVR1l
0GFYf2T615MoGAak3+afahp4WB4XlHshttHT2P3o2/7N4Oh7iwFFtkmOj/Sb3Prc
C8skW83kUZ4i8W1HlZTmtr4YlQbKnx6bF6mbkTY1aQa1AV/8htenALkmR2+eCgsd
EY9WM8qruxnVLt/ao+VYw5jYLSYVKHt31ZD4rJM+5lKcTtU1NmNsGloen+hdLwC+
hggqnUQmvBzM7SKqvg4zI9SbgGR5fS3poTrFX7yDKZyLSPcjBND/lWi8evRiSEP0
yftCKL7zotdRy6QTG7tI1Fye1fyYuQdTB1nimE+7VJ8Q2O4DwE0iZKMuXm3GfaOr
T20Znvns9caMKED9T1gg42QgYM6EMMbeukBUkIXPt2tloDnn2tMzvvrKzgGBS1Lc
qv2ndhBCunBxNCQCHly4T2Rz8TJnm2XglS0d/VygcMuMSL0San5DwXYNnN4P0xD/
MXOdqrxcusIzKBbSHWPqInRmYUTymDtcqXWK3Cz6kRUXjBkRoSvDs8PBAvnaC236
1xol6uyMqZo=
=aMy0
-----END PGP SIGNATURE-----



From witchspace81 at gmail.com  Tue Jul 19 06:54:45 2011
From: witchspace81 at gmail.com (John Smith)
Date: Tue, 19 Jul 2011 06:54:45 +0000
Subject: [Bitcoin-development] The forums...
In-Reply-To: <4E2492CE.9040500@lavabit.com>
References: <4E2492CE.9040500@lavabit.com>
Message-ID: <CAJNQ0ssiZ9ubShGe4wCSOAbj_D4PbmP1C6g6VmBbRw1GaTwA3g@mail.gmail.com>

Ah, right, I think stackexchange is pretty good for that. I committed.

JS

On Mon, Jul 18, 2011 at 8:08 PM, Chris Acheson <chris_acheson at lavabit.com>wrote:

> I've been pushing for the Bitcoin Stack-Exchange as our main
> user/merchant support site:
>
> <http://area51.stackexchange.com/proposals/30763/bitcoin-crypto-currency>
>
> I think the Stack Exchange format is ideal, since the
> acceptable/unacceptable topics are defined in advance, and it has a good
> user moderation/reputation system.  The site will be for technical and
> conceptual questions only, no politics or philosophy, and obviously no
> buying and selling.  This makes it unattractive to the kooks and
> hucksters, and therefore unattractive to the trolls as well.
>
> At the time of this writing, we still need 64 more people to commit to
> using the site before it will launch, 48 of which need to be established
> Stack Exchange users.  At the rate we've been going, the site should be
> up around the end of August.  I'd like to make it happen before then, so
> please join up!
>
>
>
> ------------------------------------------------------------------------------
> Storage Efficiency Calculator
> This modeling tool is based on patent-pending intellectual property that
> has been used successfully in hundreds of IBM storage optimization engage-
> ments, worldwide.  Store less, Store more with what you own, Move data to
> the right place. Try It Now!
> http://www.accelacomm.com/jaw/sfnl/114/51427378/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110719/ab0207d0/attachment.html>

From chris_acheson at lavabit.com  Tue Jul 19 17:07:53 2011
From: chris_acheson at lavabit.com (Chris Acheson)
Date: Tue, 19 Jul 2011 13:07:53 -0400
Subject: [Bitcoin-development] The forums...
In-Reply-To: <4E2492CE.9040500@lavabit.com>
References: <4E2492CE.9040500@lavabit.com>
Message-ID: <4E25B9E9.5020906@lavabit.com>

Could we just get the forum link removed entirely?  The current Google
search link does very little to disassociate the forum from the Bitcoin
project.  There's no need to have a forum link anyway, as there's
already a link to the wiki, which links to the forum, and can be edited
to link to other unofficial forums as well.

I just came across a thread by someone offering to sell a bitcoin mining
virus:

<http://forum.bitcoin.org/index.php?topic=21524.0>

I know there'd been complaints about illegal activity, but this is a
whole new level of bad PR compared to people just offering to sell
drugs.  Especially when there are responses like:

"Excuse me while I put this on every computer at my school."

"This would be so awesome if I could install it at every computer in my
college lab. So many bitcoins for me."

It doesn't just look like some one-off cybercriminal spam, it looks like
forum members in general support this kind of thing.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 900 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110719/2dd67f7f/attachment.sig>

From zgenjix at yahoo.com  Thu Jul 21 03:35:42 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Wed, 20 Jul 2011 20:35:42 -0700 (PDT)
Subject: [Bitcoin-development] libbitcoin
Message-ID: <1311219342.90095.YahooMailNeo@web121020.mail.ne1.yahoo.com>

Check it out,


http://forum.bitcoin.org/index.php?topic=30646.0

Best to post questions on the forum. I don't often check this email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110720/92dbe8f4/attachment.html>

From gmaxwell at gmail.com  Sat Jul 23 23:39:13 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 23 Jul 2011 19:39:13 -0400
Subject: [Bitcoin-development] Discussion related to pull 349 and pull 319
	(escrow transactions)
Message-ID: <CAAS2fgQ-L-1K2Oi40tqnhxpnnWQHqgbd4BmqedhA3WcevYiCzg@mail.gmail.com>

Pull 349 (https://github.com/bitcoin/bitcoin/pull/349)
implements a pretty nice implementation of multiple signature escrowed
transactions. Especially with clearcoin gone I think that this is
something we ought to have sooner rather than later.

I've tested it on a private network and it appears to work pretty well.

It probably needs more testing and discussion before it is actually
added to the client, but one challenge is that because it requires a
new transaction type it won't be deployable until _after_ an updated
isStandard is widely used in the network.

So I think that makes a good argument for separating out the
IsStandard part of the patch and getting it out in 0.4.

Unfortunately, the patch exposes an issue with multisig validation: If
I understand it correctly, the problem is that due to redundancy in
 the script length coding opcodes it's possible to code a script
multiple ways. The signature validation code creates new template
scripts in order to evaluate signatures for one output, and the code
in bitcoin is not careful to code the new script the same way the
original one was coded, causing the signature validation to fail when
something used OP_PUSHDATA when a direct length could have been used.

Pull 349 (https://github.com/bitcoin/bitcoin/pull/349) contains one
candidate fix for this: Excluding the length opcodes from the
comparison.

This fix carries a risk of creating differences in how nodes validate
transactions leading to lasting forks. (e.g. Old clients will reject a
block which new clients would have accepted).  I do also wonder about
strange effects arising from multiple valid TXN which are identical in
meaning but have different hashes, but I guess thats already possible
in a number of different ways.

Another way of fixing this would be to just define that OP_PUSHDATA*
_cannot_ be used to push the smaller lengths which could be more
efficiently encoded with the direct length opcodes.  I think this
would have the benefit of being consistent with the current behavior
and carry no severe split risk.

Yet way of fixing it would be to change out the templating code works
to make sure it codes the template the same way the original was
coded. This seems tricky to implement to me, tricky to validate, but
it would potentially be beneficial if this same class of problem
exists for things other than the length coding.



From rick at support-intelligence.com  Tue Jul 26 00:29:21 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Mon, 25 Jul 2011 17:29:21 -0700
Subject: [Bitcoin-development] bitcoin DNS addresses
Message-ID: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>

I've just joined the list with the goals of producing a patch to
sendtoaddress in rpc.cpp to support DNS lookups so that one could publish a
TXT record in the DNS with their wallet address to facilitate sending of
coin.

I'm proposing something like the code below, which works but needs
additional error handling.

also working on a internet-draft to describe how to put bitcoin addresses in
the DNS which I hope to post the first draft of this week.

I'd appreciate comments on issues around annomity, community push back and
any other issues you might have with leveraging the DNS for bitcoin
transactions.

thanks,

-rick


Value sendtoaddress(const Array& params, bool fHelp)
{
   if (fHelp || params.size() < 2 || params.size() > 4)
       throw runtime_error(
           "sendtoaddress <bitcoinaddress> <amount> [comment]
[comment-to]\n"
           "<amount> is a real and is rounded to the nearest 0.00000001");

/**
; <<>> DiG 9.7.3 <<>> _btc.rick.wesson.us txt
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 43754
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;_btc.rick.wesson.us.           IN      TXT

;; ANSWER SECTION:
_btc.rick.wesson.us.    300     IN      TXT     "BTC=1;
1GCVXLfF1TcpnnDLJRHk845NZhuJWQTnUD"

;; Query time: 143 msec
**/


   string strAddress = params[0].get_str();
   string dname="_btc.";
   if(strAddress.find("@")){
      unsigned char answer[255];
      int len=0;
      dname.append(strAddress);
      dname.replace(dname.find("@"), 1, ".");

      if((len = res_query(dname.c_str(), C_IN, T_TXT, answer, PACKETSZ)) <
0) {
        string dnsAnswer=(char*)answer;
        int i=dnsAnswer.find("BTC=1;");
        if( i < 0) throw runtime_error( dname + " is not associated with a
bitcoin address");
        i += 6;
        i = dnsAnswer.find("1", 6) ; // address start with a one (1)
        dnsAnswer.erase(0,i);
        strAddress=dnsAnswer;
      }

   }
   // Amount
   int64 nAmount = AmountFromValue(params[1]);
...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110725/56cd48d3/attachment.html>

From bitcoin-list at bluematt.me  Tue Jul 26 01:35:56 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 26 Jul 2011 03:35:56 +0200
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
Message-ID: <1311644156.29866.4.camel@Desktop666>

On Mon, 2011-07-25 at 17:29 -0700, Rick Wesson wrote:
> I've just joined the list with the goals of producing a patch to
> sendtoaddress in rpc.cpp to support DNS lookups so that one could
> publish a TXT record in the DNS with their wallet address to
> facilitate sending of coin.

But...why?
Using URIs is much simpler and can be more useful in terms of being able
to give different addresses and/or values per user.
Also, despite DNSSec being "out there" DNS is still very insecure to
transmit something that will result in money transfer...some idiot tries
it on public WiFi and a MITM steals your coins...DNS is really just not
well suited for this kind of thing.
If you want nice name->address mapping, a simple HTTPS server with
addresses and client support (there are some patches around for this)
works much better in the end.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/77d7dd56/attachment.sig>

From rick at support-intelligence.com  Tue Jul 26 03:35:34 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Mon, 25 Jul 2011 20:35:34 -0700
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <1311644156.29866.4.camel@Desktop666>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
Message-ID: <CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>

Matt,

I started from the premise that I can't remember a bitcoin address but
I can/do remember email addresses which, as an identity are easy
labels for humans to remember. The IPv4 address is the metaphor I
consider. As someone who actually worked on parts of DNSSEC I do
believe in it -- and that it offers reasonable security for
transactions.

Remember MITM attacks on DNS for a transaction are for the sender
against the merchant, and it is only the wallet ID that would be
available. These identifiers are something people use "like" an
identity in that they are frequently shared in public spaces.

Also, a DNS mapping does not prevent or deny anyone from leveraging
HTTP(S) for simular mapping. My point is that DNS is designed for name
to thing mapping and its done a decent job. What I like about the DNS
is that it is frequently leveraged as a proxy for identity and http
URIs are not. Where https://wesson.us/ricks-bitcoin-address doesn't
feel like and identity (to me) and rick.wesson.us does.

My point is about usability and user experience. Bitcoin if used in
the DNS might make DNSSEC more popular which IMHO is a good thing.

-rick


On Mon, Jul 25, 2011 at 6:35 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:
> On Mon, 2011-07-25 at 17:29 -0700, Rick Wesson wrote:
>> I've just joined the list with the goals of producing a patch to
>> sendtoaddress in rpc.cpp to support DNS lookups so that one could
>> publish a TXT record in the DNS with their wallet address to
>> facilitate sending of coin.
>
> But...why?
> Using URIs is much simpler and can be more useful in terms of being able
> to give different addresses and/or values per user.
> Also, despite DNSSec being "out there" DNS is still very insecure to
> transmit something that will result in money transfer...some idiot tries
> it on public WiFi and a MITM steals your coins...DNS is really just not
> well suited for this kind of thing.
> If you want nice name->address mapping, a simple HTTPS server with
> addresses and client support (there are some patches around for this)
> works much better in the end.
>
> ------------------------------------------------------------------------------
> Magic Quadrant for Content-Aware Data Loss Prevention
> Research study explores the data loss prevention market. Includes in-depth
> analysis on the changes within the DLP market, and the criteria used to
> evaluate the strengths and weaknesses of these DLP solutions.
> http://www.accelacomm.com/jaw/sfnl/114/51385063/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



From luke at dashjr.org  Tue Jul 26 04:22:21 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 26 Jul 2011 00:22:21 -0400
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
	<CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
Message-ID: <201107260022.24961.luke@dashjr.org>

On Monday, July 25, 2011 11:35:34 PM Rick Wesson wrote:
> I started from the premise that I can't remember a bitcoin address but
> I can/do remember email addresses which, as an identity are easy
> labels for humans to remember. The IPv4 address is the metaphor I
> consider. As someone who actually worked on parts of DNSSEC I do
> believe in it -- and that it offers reasonable security for
> transactions.

1. Right now you practically need a unique Bitcoin address per transaction.
2. DNSSEC is on the edge of becoming illegal in the US.
3. Emails aren't merely domains.

I would propose something like resolving foo at bar.net to a SRV lookup for 
_bitcoinaddressresolution._tcp.foo.bar.net, expecting a cert for bar.net, 
making a HTTPS request for /bitcoinaddressresolution?foo at bar.net, and also 
sending an email to foo at bar.net (the usual way) signed with the keys used for 
the transaction. ;)



From rick at support-intelligence.com  Tue Jul 26 04:54:23 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Mon, 25 Jul 2011 21:54:23 -0700
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <201107260022.24961.luke@dashjr.org>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
	<CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
	<201107260022.24961.luke@dashjr.org>
Message-ID: <CAJ1JLttnARz=f0UmzJKpCXpMeKg1X_R7Jfwv7tZq_pJqn8LbQQ@mail.gmail.com>

>
> 1. Right now you practically need a unique Bitcoin address per transaction.

I'd like to find ways to alievate this requirement.

> 2. DNSSEC is on the edge of becoming illegal in the US.

really, pointers please. DHS was a huge funder for DNSSEC asn .mil was
the first domain to deploy it. I think you may be miss-informed.

> 3. Emails aren't merely domains.

correct, I was speaking about an "address" that used the same/simular
formatting but did not use the SMTP protocol.

-rick

> I would propose something like resolving foo at bar.net to a SRV lookup for
> _bitcoinaddressresolution._tcp.foo.bar.net, expecting a cert for bar.net,
> making a HTTPS request for /bitcoinaddressresolution?foo at bar.net, and also
> sending an email to foo at bar.net (the usual way) signed with the keys used for
> the transaction. ;)
>



From luke at dashjr.org  Tue Jul 26 06:18:56 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 26 Jul 2011 02:18:56 -0400
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLttnARz=f0UmzJKpCXpMeKg1X_R7Jfwv7tZq_pJqn8LbQQ@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<201107260022.24961.luke@dashjr.org>
	<CAJ1JLttnARz=f0UmzJKpCXpMeKg1X_R7Jfwv7tZq_pJqn8LbQQ@mail.gmail.com>
Message-ID: <201107260218.59313.luke@dashjr.org>

On Tuesday, July 26, 2011 12:54:23 AM Rick Wesson wrote:
> > 1. Right now you practically need a unique Bitcoin address per
> > transaction.
> 
> I'd like to find ways to alievate this requirement.

Admittedly, my proposal to email a signed message allows one to reuse 
addresses, but there is still a privacy concern.

> > 2. DNSSEC is on the edge of becoming illegal in the US.
> 
> really, pointers please. DHS was a huge funder for DNSSEC asn .mil was
> the first domain to deploy it. I think you may be miss-informed.

http://www.google.com/search?q=%22PROTECT+IP+act%22+DNSSEC

> > 3. Emails aren't merely domains.
> 
> correct, I was speaking about an "address" that used the same/simular
> formatting but did not use the SMTP protocol.

I only meant that foo.bar.net is not the same formatting.
foo at bar.net would be.



From witchspace81 at gmail.com  Tue Jul 26 08:04:17 2011
From: witchspace81 at gmail.com (John Smith)
Date: Tue, 26 Jul 2011 08:04:17 +0000
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <201107260218.59313.luke@dashjr.org>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<201107260022.24961.luke@dashjr.org>
	<CAJ1JLttnARz=f0UmzJKpCXpMeKg1X_R7Jfwv7tZq_pJqn8LbQQ@mail.gmail.com>
	<201107260218.59313.luke@dashjr.org>
Message-ID: <CAJNQ0st0+DU1y0C4hYGK76fzcGFKt7bch+YCJMy-H-eZQriDaA@mail.gmail.com>

> I only meant that foo.bar.net is not the same formatting.
> foo at bar.net would be.
>

Yes please use email-like addresses, whatever is decided on the underlying
protocol.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/2f7cf73c/attachment.html>

From bitcoin-list at bluematt.me  Tue Jul 26 13:23:39 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 26 Jul 2011 15:23:39 +0200
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
	<CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
Message-ID: <1311678417.21495.9.camel@Desktop666>

On Mon, 2011-07-25 at 20:35 -0700, Rick Wesson wrote:
> Matt,
> 
> I started from the premise that I can't remember a bitcoin address but
> I can/do remember email addresses which, as an identity are easy
> labels for humans to remember. The IPv4 address is the metaphor I
> consider. As someone who actually worked on parts of DNSSEC I do
> believe in it -- and that it offers reasonable security for
> transactions.

> Remember MITM attacks on DNS for a transaction are for the sender
> against the merchant, and it is only the wallet ID that would be
> available. These identifiers are something people use "like" an
> identity in that they are frequently shared in public spaces.
> 
Yes, DNSSEC is great if you are running your own recursive name server.
However, that is probably something like 0.01% of the people out there.
If this were to be made secure, one would have to implement a full
recursive nameserver inside of Bitcoin with the root trust anchors
hardcoded in.  This seems like way overkill to do name->address mapping.
(My attack scenario here is coffee shop wifi with the default DNS
resolvers being somewhere at the ISP and a ARP (or other) MITM attack
intercepting and playing with your DNS queries).
Additionally, HTTPS mapping offers some advantages such as ease of
offering up different to different people by eg. IP address (could be
done by setting DNS TTL to 0 and assuming all users will be using a
built-in resolver, but its still not guaranteed that other clients would
use a built-in resolver and then the IP of the resolver is not the same
as the IP of the Bitcoin node).  
Not that DNS is a terrible idea, but there are clear advantages for
using HTTPS (or similar) mapping over DNS and I see no clear advantage
for using DNS over HTTPS (aside from the "that is what it is designed
for" argument, which I would claim is an invalid argument as you have to
consider the technology, not its intent).
> Also, a DNS mapping does not prevent or deny anyone from leveraging
> HTTP(S) for simular mapping. My point is that DNS is designed for name
> to thing mapping and its done a decent job. What I like about the DNS
> is that it is frequently leveraged as a proxy for identity and http
> URIs are not. Where https://wesson.us/ricks-bitcoin-address doesn't
> feel like and identity (to me) and rick.wesson.us does.
> 
> My point is about usability and user experience. Bitcoin if used in
> the DNS might make DNSSEC more popular which IMHO is a good thing.
Hold on there, Bitcoin is still tiny, I highly, highly doubt it will
make a difference to DNSSEC adoption.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/fee91db9/attachment.sig>

From witchspace81 at gmail.com  Tue Jul 26 14:41:07 2011
From: witchspace81 at gmail.com (John Smith)
Date: Tue, 26 Jul 2011 14:41:07 +0000
Subject: [Bitcoin-development] "To:" addresses missing
Message-ID: <CAJNQ0steQtptz1SP+u7nK5GqmEF1GJTYGuys0n0V5sAhh9zobg@mail.gmail.com>

I first thought it was a problem in my UI, after syncing to the latest git
version. But the following screenshot says enough:

http://img24.imageshack.us/img24/7363/screencpf.png

The address are also missing in the detailed transaction view. It appears
that the problem is in script.cpp:

        BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)
        {
            uint160 hash160;
            if (item.first == OP_PUBKEY)
                addressRet.SetPubKey(item.second);
            else if (item.first == OP_PUBKEYHASH)
                addressRet.SetHash160((uint160)item.second);
            if (keystore == NULL || keystore->HaveKey(addressRet))
                return true;
        }

It will only return "true" on keys that are in the keystore (your own
private keys...). After commenting out the "if (keystore == NULL ..." line,
the display is fixed.

But that simple solution might have impact somewhere else.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/84ca2e10/attachment.html>

From bitcoin-list at bluematt.me  Tue Jul 26 16:24:36 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 26 Jul 2011 18:24:36 +0200
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLtsLXEPFkBuHf6ZKUSVYUnY+NL7TtsEswGvdTYtrZZTXWw@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
	<CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
	<1311678417.21495.9.camel@Desktop666>
	<CAJ1JLtvHubiC_f_a17fnXODs54CCdmxPf8+Zz4M5X9d8VEfFSQ@mail.gmail.com>
	<1311691885.23041.2.camel@Desktop666>
	<CAJ1JLtsLXEPFkBuHf6ZKUSVYUnY+NL7TtsEswGvdTYtrZZTXWw@mail.gmail.com>
Message-ID: <1311697476.23041.7.camel@Desktop666>

For some reason my mail client is being thick and not responding
on-list, sorry about that...

On Tue, 2011-07-26 at 08:34 -0700, Rick Wesson wrote:
> > Most OSes dont do any resolving at all, they just query upstream
> > resolvers.  In the case of the coffee shop, that upstream resolver is
> > the attacker.  This attacker can easily just claim that the zone you
> > requested is not DNSSEC signed and return their data and the OS will not
> > be any wiser.  AFAIK, most OSes dont have a mechanism to require the
> > zone queried is DNSSEC signed meaning you have to implement a full DNS
> > resolver in Bitcoin in order for it to be secure.
> 
> Matt,
> 
> The same attack can apply to https with a self signed cert where it is
> the A record that is replaced by the attacker and the https request is
> sent to evil.com's server which responds to the request with an answer
> in the form you expect. This is what lots of malware does on windows
> to steel bank login credentials, securing http doesn't prevent such an
> attack.
If you are using a self-signed cert to do any kind of important data
transfer you are just being stupid.  Here I am assuming your computer
isnt actually compromised, but only the network is, which I think is a
fairly good assumption.
> 
> Windows has supported DNSSEC since 2008 as have most of the unix
> variants, mac osx since 10.3 Android also seems to include DNSSEC
> capable resolvers.
> 
> If this thread is really about DNSSEC then we might move it to a more
> appropriate forum for discussing how applications leverage DNS
> security extensions.  Its taken some years to get the specs done and
> the root signed I expect it to take many more to enable the
> applications to leverage the deployed infrastructure.
No, DNSSEC is very well done, this thread is specifically about the
security implications of using DNSSEC for Bitcoin address communication.
IMO it is not a good idea, as for it to be secure against a coffee-shop
network MITMer you have to implement a full resolver with root trust
anchors and knowledge of root servers in Bitcoin, which does not seem
like a good idea.
> 
> I am interested in working on the issues surrounding usability and I
> find that remembering and communicating a bitcoin address are current
> limiting factors in the acceptance and deployment of this software. My
> goal is for simpler user experience.
I totally agree, however I don't think DNS-based resolving is a good
idea here.  HTTPS does have several advantages over a DNSSEC-based
solution without any significant drawbacks that I can see.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/640c60b1/attachment.sig>

From phantomcircuit at covertinferno.org  Tue Jul 26 16:32:17 2011
From: phantomcircuit at covertinferno.org (phantomcircuit)
Date: Tue, 26 Jul 2011 18:32:17 +0200
Subject: [Bitcoin-development] bitcoin DNS addresses
Message-ID: <l4cw5stpdjpdbdmn4a4mplch.1311697801540@email.android.com>

dns resolution is far simpler to implement than properly checking the https certificate chain

Matt Corallo <bitcoin-list at bluematt.me> wrote:

>For some reason my mail client is being thick and not responding
>on-list, sorry about that...
>
>On Tue, 2011-07-26 at 08:34 -0700, Rick Wesson wrote:
>> > Most OSes dont do any resolving at all, they just query upstream
>> > resolvers.  In the case of the coffee shop, that upstream resolver is
>> > the attacker.  This attacker can easily just claim that the zone you
>> > requested is not DNSSEC signed and return their data and the OS will not
>> > be any wiser.  AFAIK, most OSes dont have a mechanism to require the
>> > zone queried is DNSSEC signed meaning you have to implement a full DNS
>> > resolver in Bitcoin in order for it to be secure.
>> 
>> Matt,
>> 
>> The same attack can apply to https with a self signed cert where it is
>> the A record that is replaced by the attacker and the https request is
>> sent to evil.com's server which responds to the request with an answer
>> in the form you expect. This is what lots of malware does on windows
>> to steel bank login credentials, securing http doesn't prevent such an
>> attack.
>If you are using a self-signed cert to do any kind of important data
>transfer you are just being stupid.  Here I am assuming your computer
>isnt actually compromised, but only the network is, which I think is a
>fairly good assumption.
>> 
>> Windows has supported DNSSEC since 2008 as have most of the unix
>> variants, mac osx since 10.3 Android also seems to include DNSSEC
>> capable resolvers.
>> 
>> If this thread is really about DNSSEC then we might move it to a more
>> appropriate forum for discussing how applications leverage DNS
>> security extensions.  Its taken some years to get the specs done and
>> the root signed I expect it to take many more to enable the
>> applications to leverage the deployed infrastructure.
>No, DNSSEC is very well done, this thread is specifically about the
>security implications of using DNSSEC for Bitcoin address communication.
>IMO it is not a good idea, as for it to be secure against a coffee-shop
>network MITMer you have to implement a full resolver with root trust
>anchors and knowledge of root servers in Bitcoin, which does not seem
>like a good idea.
>> 
>> I am interested in working on the issues surrounding usability and I
>> find that remembering and communicating a bitcoin address are current
>> limiting factors in the acceptance and deployment of this software. My
>> goal is for simpler user experience.
>I totally agree, however I don't think DNS-based resolving is a good
>idea here.  HTTPS does have several advantages over a DNSSEC-based
>solution without any significant drawbacks that I can see.
>
>Matt
>
>------------------------------------------------------------------------------
>Magic Quadrant for Content-Aware Data Loss Prevention
>Research study explores the data loss prevention market. Includes in-depth
>analysis on the changes within the DLP market, and the criteria used to
>evaluate the strengths and weaknesses of these DLP solutions.
>http://www.accelacomm.com/jaw/sfnl/114/51385063/
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development

From rick at support-intelligence.com  Tue Jul 26 16:50:58 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Tue, 26 Jul 2011 09:50:58 -0700
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <1311697476.23041.7.camel@Desktop666>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
	<CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
	<1311678417.21495.9.camel@Desktop666>
	<CAJ1JLtvHubiC_f_a17fnXODs54CCdmxPf8+Zz4M5X9d8VEfFSQ@mail.gmail.com>
	<1311691885.23041.2.camel@Desktop666>
	<CAJ1JLtsLXEPFkBuHf6ZKUSVYUnY+NL7TtsEswGvdTYtrZZTXWw@mail.gmail.com>
	<1311697476.23041.7.camel@Desktop666>
Message-ID: <CAJ1JLtskNnCB1cbUBht3oAVWuYPSF82GoNacMbqcN0YGd5Pvxw@mail.gmail.com>

[snip]

> I totally agree, however I don't think DNS-based resolving is a good
> idea here. ?HTTPS does have several advantages over a DNSSEC-based
> solution without any significant drawbacks that I can see.

To restate your (con dnssec) points:
   o DNS resolution of bitcoin addresses is bad because of potential
MITM attacks
   o DNSSEC is not a security measure for mitigating DNS resolution of
bitcoin addresses
      because the application would require its own dnssec enabled stub resolver

Please restate
   o HTTPS is your preferred method for resolution because?

If you can enumerate your advantages so I can develop a proper
response to the points you have raised.

thanks,

-rick



From bitcoin-list at bluematt.me  Tue Jul 26 17:18:27 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 26 Jul 2011 19:18:27 +0200
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLtskNnCB1cbUBht3oAVWuYPSF82GoNacMbqcN0YGd5Pvxw@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
	<CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
	<1311678417.21495.9.camel@Desktop666>
	<CAJ1JLtvHubiC_f_a17fnXODs54CCdmxPf8+Zz4M5X9d8VEfFSQ@mail.gmail.com>
	<1311691885.23041.2.camel@Desktop666>
	<CAJ1JLtsLXEPFkBuHf6ZKUSVYUnY+NL7TtsEswGvdTYtrZZTXWw@mail.gmail.com>
	<1311697476.23041.7.camel@Desktop666>
	<CAJ1JLtskNnCB1cbUBht3oAVWuYPSF82GoNacMbqcN0YGd5Pvxw@mail.gmail.com>
Message-ID: <1311700678.23041.13.camel@Desktop666>

On Tue, 2011-07-26 at 09:50 -0700, Rick Wesson wrote:
> [snip]
> 
> > I totally agree, however I don't think DNS-based resolving is a good
> > idea here.  HTTPS does have several advantages over a DNSSEC-based
> > solution without any significant drawbacks that I can see.
> 
> To restate your (con dnssec) points:
>    o DNS resolution of bitcoin addresses is bad because of potential
> MITM attacks
>    o DNSSEC is not a security measure for mitigating DNS resolution of
> bitcoin addresses
>       because the application would require its own dnssec enabled stub resolver
That is one point, but yes.
> 
> Please restate
>    o HTTPS is your preferred method for resolution because?
Because it allows for the giving of different addresses to each client
based on IP much easier.  Its possible with DNS by setting TTL to 0 and
hoping that Bitcoin clients will be using their own resolver, but that
is far from guaranteed.  Additionally, HTTPS stuff has already been
coded and implemented, so there's that...

Frankly, HTTPS' advantages are very small here, but since they exist,
and DNS has no advantages that I can see, I don't see any reason to go
with DNS here.  I much prefer using a HTTPS library (of which there are
many which have had much more thorough security audits) than a
DNSSEC-implementing DNS recursion library with the root trust anchors
and root servers built-in (are there any?).

Maybe I'm missing something here?

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/1587466a/attachment.sig>

From bitcoin-list at bluematt.me  Tue Jul 26 17:18:42 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 26 Jul 2011 19:18:42 +0200
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLtskNnCB1cbUBht3oAVWuYPSF82GoNacMbqcN0YGd5Pvxw@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<1311644156.29866.4.camel@Desktop666>
	<CAJ1JLts9vcF7bGo8udK9OicWhAUHvmeFDrZQDKBoGQbp-nYGrw@mail.gmail.com>
	<1311678417.21495.9.camel@Desktop666>
	<CAJ1JLtvHubiC_f_a17fnXODs54CCdmxPf8+Zz4M5X9d8VEfFSQ@mail.gmail.com>
	<1311691885.23041.2.camel@Desktop666>
	<CAJ1JLtsLXEPFkBuHf6ZKUSVYUnY+NL7TtsEswGvdTYtrZZTXWw@mail.gmail.com>
	<1311697476.23041.7.camel@Desktop666>
	<CAJ1JLtskNnCB1cbUBht3oAVWuYPSF82GoNacMbqcN0YGd5Pvxw@mail.gmail.com>
Message-ID: <1311700678.23041.13.camel@Desktop666>

On Tue, 2011-07-26 at 09:50 -0700, Rick Wesson wrote:
> [snip]
> 
> > I totally agree, however I don't think DNS-based resolving is a good
> > idea here.  HTTPS does have several advantages over a DNSSEC-based
> > solution without any significant drawbacks that I can see.
> 
> To restate your (con dnssec) points:
>    o DNS resolution of bitcoin addresses is bad because of potential
> MITM attacks
>    o DNSSEC is not a security measure for mitigating DNS resolution of
> bitcoin addresses
>       because the application would require its own dnssec enabled stub resolver
That is one point, but yes.
> 
> Please restate
>    o HTTPS is your preferred method for resolution because?
Because it allows for the giving of different addresses to each client
based on IP much easier.  Its possible with DNS by setting TTL to 0 and
hoping that Bitcoin clients will be using their own resolver, but that
is far from guaranteed.  Additionally, HTTPS stuff has already been
coded and implemented, so there's that...

Frankly, HTTPS' advantages are very small here, but since they exist,
and DNS has no advantages that I can see, I don't see any reason to go
with DNS here.  I much prefer using a HTTPS library (of which there are
many which have had much more thorough security audits) than a
DNSSEC-implementing DNS recursion library with the root trust anchors
and root servers built-in (are there any?).

Maybe I'm missing something here?

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110726/1587466a/attachment-0001.sig>

From gavinandresen at gmail.com  Wed Jul 27 01:31:14 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 27 Jul 2011 11:31:14 +1000
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing over
	new features
Message-ID: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>

Anybody have advice on how to encourage more bug-fixing and testing of
existing functionality instead of yet-more-features?

When I get back home from here in Australia I plan on trying to
lead-by-example by starting to tackle the huge backlog of reported bugs, but
I'd like to know if anybody has seen other open source projects successfully
get people to fix bugs instead of constantly adding features. Would policies
like "that spiffy new feature you want won't be considered until you've
helped close some open bugs" be effective (or would it just encourage people
to create shill accounts to open trivial-to-fix issues)?

If this was your run-of-the-mill open source project I would be much
more lackadaisical about letting in new features... but when people lose
money because bugs slip through (and several people HAVE recently lost money
because of bugs slipping through) we obviously have a pretty big problem
just making sure that the features we have now work properly.

(Thanks VERY much to those of you have HAVE been helping test and have been
submitting bug fixes; I don't mean to imply that everybody has been
feature-happy, just that it seems like a lot of potential bitcoin
contributors start out by submitting a nifty new feature that sure would be
nice to have if we weren't so busy trying to make sure the features we
already have work properly all the time).

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/9192a372/attachment.html>

From witchspace81 at gmail.com  Wed Jul 27 06:40:12 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 27 Jul 2011 06:40:12 +0000
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
Message-ID: <CAJNQ0sshm=q==++MVXEEkMDHX60HJxpFoR3CF3zK4NvFy2-rsQ@mail.gmail.com>

On Wed, Jul 27, 2011 at 1:31 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Anybody have advice on how to encourage more bug-fixing and testing of
> existing functionality instead of yet-more-features?


Make a list of bugs. Offer BTC bounties for fixing each one according to how
serious/difficult it is. They don't have to be high, just a few BTC. It'll
also help people get interested in the project and *current* source base
(instead of wanting to implement Yet Another Incomplete Client from
scratch).

Or we could do the same as the mozilla/chrome projects, offer bounties for
finding new security holes and serious bugs.

A policy like "that spiffy new feature you want won't be considered until
you've helped close some open bugs" won't work. This is open source, people
can just make their own fork with the spiffy new feature without fixing any
bugs.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/6d2d3f7d/attachment.html>

From joel.kaartinen at gmail.com  Wed Jul 27 11:14:34 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Wed, 27 Jul 2011 14:14:34 +0300
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CAJNQ0sshm=q==++MVXEEkMDHX60HJxpFoR3CF3zK4NvFy2-rsQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<CAJNQ0sshm=q==++MVXEEkMDHX60HJxpFoR3CF3zK4NvFy2-rsQ@mail.gmail.com>
Message-ID: <1311765274.9830.3.camel@mei>

Perhaps even add a way for anyone add to the bounty attached to a bug on
the bug tracker? Also, a listing page for bugs with their bounties might
be nice too.

- Joel

On Wed, 2011-07-27 at 06:40 +0000, John Smith wrote:
> 
> On Wed, Jul 27, 2011 at 1:31 AM, Gavin Andresen
> <gavinandresen at gmail.com> wrote:
>         Anybody have advice on how to encourage more bug-fixing and
>         testing of existing functionality instead of
>         yet-more-features? 
> 
> Make a list of bugs. Offer BTC bounties for fixing each one according
> to how serious/difficult it is. They don't have to be high, just a few
> BTC. It'll also help people get interested in the project and
> *current* source base (instead of wanting to implement Yet Another
> Incomplete Client from scratch).
> 
> Or we could do the same as the mozilla/chrome projects, offer bounties
> for finding new security holes and serious bugs.
> 
> A policy like "that spiffy new feature you want won't be considered
> until you've helped close some open bugs" won't work. This is open
> source, people can just make their own fork with the spiffy new
> feature without fixing any bugs.
> 
> JS
> 
> 
> ------------------------------------------------------------------------------
> Got Input?   Slashdot Needs You.
> Take our quick survey online.  Come on, we don't ask for help often.
> Plus, you'll get a chance to win $100 to spend on ThinkGeek.
> http://p.sf.net/sfu/slashdot-survey
> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development






From witchspace81 at gmail.com  Wed Jul 27 14:20:07 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 27 Jul 2011 14:20:07 +0000
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <1311765274.9830.3.camel@mei>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<CAJNQ0sshm=q==++MVXEEkMDHX60HJxpFoR3CF3zK4NvFy2-rsQ@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
Message-ID: <CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>

On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen <
joel.kaartinen at gmail.com> wrote:

> Perhaps even add a way for anyone add to the bounty attached to a bug on
> the bug tracker? Also, a listing page for bugs with their bounties might
> be nice too.
>

Good idea. I'm not sure if the github bug tracker supports extension
attributes, but it'd be a great place to add it. Also, people can let know
that they're already working on a feature using a comment, to prevent double
work.

The biggest problem will be organizational, in getting the BTC together for
bounties; only a high profile member such as Gavin will have enough trust to
ask for support. Or maybe there's something left in the faucet? :-)

Unrelated: what also might help is publishing a roadmap. Plan a few "bug fix
only" releases before scheduling addition of new features. It's also helpful
for people that wonder that direction the project is going in...

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/b57f8cf1/attachment.html>

From luke at dashjr.org  Wed Jul 27 14:28:24 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 27 Jul 2011 10:28:24 -0400
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
	over new features
In-Reply-To: <CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
Message-ID: <201107271028.28057.luke@dashjr.org>

On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:
> On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen 
> <joel.kaartinen at gmail.com> wrote:
> > Perhaps even add a way for anyone add to the bounty attached to a bug on
> > the bug tracker? Also, a listing page for bugs with their bounties might
> > be nice too.
> 
> Good idea. I'm not sure if the github bug tracker supports extension
> attributes, but it'd be a great place to add it. Also, people can let know
> that they're already working on a feature using a comment, to prevent
> double work.

I'm not sure a few small bounties would justify agreeing to GitHub's steep 
demand for potentially unlimited money in their terms of service...



From joel.kaartinen at gmail.com  Wed Jul 27 14:42:54 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Wed, 27 Jul 2011 17:42:54 +0300
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <201107271028.28057.luke@dashjr.org>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
Message-ID: <1311777774.9830.14.camel@mei>

As it's unlikely to be an automated system anyway, I do not see why
people claiming the bounties would need to agree with the GitHub TOS.
Besides which, I suspect most people contributing to bitcoin already
have agreed to it.

Although, if GitHub can't support the feature, it could be an argument
for setting up a bug tracker unrelated to GitHub.

- Joel

On Wed, 2011-07-27 at 10:28 -0400, Luke-Jr wrote:
> On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:
> > On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen 
> > <joel.kaartinen at gmail.com> wrote:
> > > Perhaps even add a way for anyone add to the bounty attached to a bug on
> > > the bug tracker? Also, a listing page for bugs with their bounties might
> > > be nice too.
> > 
> > Good idea. I'm not sure if the github bug tracker supports extension
> > attributes, but it'd be a great place to add it. Also, people can let know
> > that they're already working on a feature using a comment, to prevent
> > double work.
> 
> I'm not sure a few small bounties would justify agreeing to GitHub's steep 
> demand for potentially unlimited money in their terms of service...
> 





From witchspace81 at gmail.com  Wed Jul 27 14:53:03 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 27 Jul 2011 14:53:03 +0000
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <1311777774.9830.14.camel@mei>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org> <1311777774.9830.14.camel@mei>
Message-ID: <CAJNQ0ssVtP9Q-VQVE51hfvrnGfhqqON8CC6A=hYOk0DgEGJDGQ@mail.gmail.com>

On Wed, Jul 27, 2011 at 2:42 PM, Joel Joonatan Kaartinen <joel.kaartine

Although, if GitHub can't support the feature, it could be an argument
> for setting up a bug tracker unrelated to GitHub.
>

Well if signing up with github is such a big problem we could make a list of
bounties on our own site with a trivial web application, and link from there
to github issues (if neccesary) for a description. It really doesn't matter
how it's implemented. I think it is useless to discuss technical details or
GitHub TOS right now, let's discuss the merit of ideas...

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/2552af74/attachment.html>

From dhuff at jrbobdobbs.org  Wed Jul 27 16:02:06 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Wed, 27 Jul 2011 11:02:06 -0500
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CAJNQ0ssVtP9Q-VQVE51hfvrnGfhqqON8CC6A=hYOk0DgEGJDGQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org> <1311777774.9830.14.camel@mei>
	<CAJNQ0ssVtP9Q-VQVE51hfvrnGfhqqON8CC6A=hYOk0DgEGJDGQ@mail.gmail.com>
Message-ID: <CAPiTikW6K0iQcUzZTOW_KwdMOk7w6-wnojOz4FDRohsi6GpMWQ@mail.gmail.com>

Don't worry Luke will basically say that about anything not related to
a crazy base16 number representation system that no decent modern font
can display.

To contribute:

I think the separated-from-github bounty system would be great. BUT:
The bounties need to go into some form of escrow. There have been way
to many bounties that weren't paid since BTC broke the $1USD boundary.

On Wed, Jul 27, 2011 at 9:53 AM, John Smith <witchspace81 at gmail.com> wrote:
> On Wed, Jul 27, 2011 at 2:42 PM, Joel Joonatan Kaartinen <joel.kaartine
>
>> Although, if GitHub can't support the feature, it could be an argument
>> for setting up a bug tracker unrelated to GitHub.
>
> Well if signing up with github is such a big problem we could make a list of
> bounties on our own site with a trivial web application, and link from there
> to github issues (if neccesary) for a description. It really doesn't matter
> how it's implemented. I think it is useless to discuss technical details or
> GitHub TOS right now, let's discuss the merit of ideas...
>
> JS
>
>
> ------------------------------------------------------------------------------
> Got Input? ? Slashdot Needs You.
> Take our quick survey online. ?Come on, we don't ask for help often.
> Plus, you'll get a chance to win $100 to spend on ThinkGeek.
> http://p.sf.net/sfu/slashdot-survey
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



From rick at support-intelligence.com  Wed Jul 27 16:07:39 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 27 Jul 2011 09:07:39 -0700
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <201107271028.28057.luke@dashjr.org>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
Message-ID: <CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>

personally, if the software works better (less bugs) then btc will be more
valuable. offering bounty is orthorginal to finding the right technical lead
that will hurd the effort.

put a bounty (salary) on the person to lead the effort, not the bugs

-rick


On Wed, Jul 27, 2011 at 7:28 AM, Luke-Jr <luke at dashjr.org> wrote:

> On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:
> > On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen
> > <joel.kaartinen at gmail.com> wrote:
> > > Perhaps even add a way for anyone add to the bounty attached to a bug
> on
> > > the bug tracker? Also, a listing page for bugs with their bounties
> might
> > > be nice too.
> >
> > Good idea. I'm not sure if the github bug tracker supports extension
> > attributes, but it'd be a great place to add it. Also, people can let
> know
> > that they're already working on a feature using a comment, to prevent
> > double work.
>
> I'm not sure a few small bounties would justify agreeing to GitHub's steep
> demand for potentially unlimited money in their terms of service...
>
>
> ------------------------------------------------------------------------------
> Got Input?   Slashdot Needs You.
> Take our quick survey online.  Come on, we don't ask for help often.
> Plus, you'll get a chance to win $100 to spend on ThinkGeek.
> http://p.sf.net/sfu/slashdot-survey
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/3b860209/attachment.html>

From bitcoin-list at bluematt.me  Wed Jul 27 16:47:22 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 27 Jul 2011 18:47:22 +0200
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
Message-ID: <1311785242.2294.50.camel@Desktop666>

On Wed, 2011-07-27 at 09:07 -0700, Rick Wesson wrote:
> personally, if the software works better (less bugs) then btc will be
> more valuable. offering bounty is orthorginal to finding the right
> technical lead that will hurd the effort.
> 
> 
> put a bounty (salary) on the person to lead the effort, not the bugs
> 
Gavin leads the effort just fine (when he's not on vacation or in
Australia...) but I do agree with paying him, though I'm not sure how
much time he has to spend on development over PR and other
project-building efforts.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/035aa7fc/attachment.sig>

From witchspace81 at gmail.com  Wed Jul 27 17:11:13 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 27 Jul 2011 17:11:13 +0000
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
Message-ID: <CAJNQ0suX-KFKHL3jxPR2KM+C64sEPoCtsY0CGohzT9qHcx542A@mail.gmail.com>

On Wed, Jul 27, 2011 at 4:07 PM, Rick Wesson
<rick at support-intelligence.com>wrote:

> personally, if the software works better (less bugs) then btc will be more
> valuable. offering bounty is orthorginal to finding the right technical lead
> that will hurd the effort.
>
> put a bounty (salary) on the person to lead the effort, not the bugs
>

Bounties would be much less than a developer salary. The idea is not to pay
for people full time, but it would be more of a symbolic gesture to attract
developers and get them some coins.  People with coins are also more
motivated to make the project more valuable, otherwise you have a "tragedy
of the commons" problem.

Not that I don't agree Gavin with getting a salary but that's a completely
independent issue :)

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/339660fb/attachment.html>

From joel.kaartinen at gmail.com  Wed Jul 27 17:15:44 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Wed, 27 Jul 2011 20:15:44 +0300
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
Message-ID: <1311786944.9830.77.camel@mei>

When I first found bitcoin, I was a bit surprised there were no paid by
community developers working on it. However, the bounties would be a
more democratic way of guiding the progress as well as allow things to
happen without a stable flow of money.

Having said that, if it's feasible, having someone hired full time to
work on the software would be great. I'm too much of a newcomer myself
to be able to provide any financial support for that though. I could
most likely contribute towards some bug bounties but if there was a bug
I'd want to offer bounty for, I'd be fixing it myself already.

- Joel

On Wed, 2011-07-27 at 09:07 -0700, Rick Wesson wrote:
> personally, if the software works better (less bugs) then btc will be
> more valuable. offering bounty is orthorginal to finding the right
> technical lead that will hurd the effort.
> 
> 
> put a bounty (salary) on the person to lead the effort, not the bugs
> 
> 
> -rick
> 
> 
> On Wed, Jul 27, 2011 at 7:28 AM, Luke-Jr <luke at dashjr.org> wrote:
>         On Wednesday, July 27, 2011 10:20:07 AM John Smith wrote:
>         > On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen
>         > <joel.kaartinen at gmail.com> wrote:
>         > > Perhaps even add a way for anyone add to the bounty
>         attached to a bug on
>         > > the bug tracker? Also, a listing page for bugs with their
>         bounties might
>         > > be nice too.
>         >
>         > Good idea. I'm not sure if the github bug tracker supports
>         extension
>         > attributes, but it'd be a great place to add it. Also,
>         people can let know
>         > that they're already working on a feature using a comment,
>         to prevent
>         > double work.
>         
>         
>         I'm not sure a few small bounties would justify agreeing to
>         GitHub's steep
>         demand for potentially unlimited money in their terms of
>         service...
>         
>         
>         ------------------------------------------------------------------------------
>         Got Input?   Slashdot Needs You.
>         Take our quick survey online.  Come on, we don't ask for help
>         often.
>         Plus, you'll get a chance to win $100 to spend on ThinkGeek.
>         http://p.sf.net/sfu/slashdot-survey
>         _______________________________________________
>         Bitcoin-development mailing list
>         Bitcoin-development at lists.sourceforge.net
>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>         
> 
> 
> ------------------------------------------------------------------------------
> Got Input?   Slashdot Needs You.
> Take our quick survey online.  Come on, we don't ask for help often.
> Plus, you'll get a chance to win $100 to spend on ThinkGeek.
> http://p.sf.net/sfu/slashdot-survey
> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From gavinandresen at gmail.com  Wed Jul 27 22:45:37 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 28 Jul 2011 08:45:37 +1000
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <1311786944.9830.77.camel@mei>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
	<1311786944.9830.77.camel@mei>
Message-ID: <CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>

RE: bounties:

"A couple of bitcoins to fix a bug" sounds to me like nothing but trouble
for whoever is in charge of awarding the bounties, but maybe I'm just
anti-bounty because spending 2 or 3 hours and getting $30 worth of bitcoins
for fixing a bug wouldn't motivate me.

Anybody know how cash bounties have worked for other projects?  Have any
others paid bounties on run-of-the-mill bugs, and did that cause any
problems?  I'm worried that if contributors start getting bounties that will
change the dynamic from cooperative to competitive.  For example, if
somebody has figured out how to solve 90% of some tricky bug I don't want
them to hesitate to ask for help on the last 10% because they're worried "if
I describe the progress I've made so far somebody might swoop in and steal
my bounty...."

RE: road-map and bug-fix-only-releases:  Great ideas.

RE: paid full-time project lead:  I arranged to get paid to work on bitcoin
full-time before I left for Australia; more details when I get back
week-after-next.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/1390ad74/attachment.html>

From joel.kaartinen at gmail.com  Wed Jul 27 22:54:52 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Thu, 28 Jul 2011 01:54:52 +0300
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
	<1311786944.9830.77.camel@mei>
	<CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
Message-ID: <1311807292.9830.84.camel@mei>

On Thu, 2011-07-28 at 08:45 +1000, Gavin Andresen wrote:
>  For example, if somebody has figured out how to solve 90% of some
> tricky bug I don't want them to hesitate to ask for help on the last
> 10% because they're worried "if I describe the progress I've made so
> far somebody might swoop in and steal my bounty...."

Well, the bounty thing can't be automated, so, wouldn't publishing the
work you've done up to then by, for example, mailing this list, pretty
much guarantee someone else couldn't claim they fixed it all by
themselves anymore?

It could, however, end up with some quarrels about how much of the
bounty to give and to whom. Those are not nice things to have.

- Joel





From bitcoin-list at bluematt.me  Wed Jul 27 23:07:39 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 28 Jul 2011 01:07:39 +0200
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
	<1311786944.9830.77.camel@mei>
	<CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
Message-ID: <1311808059.2294.55.camel@Desktop666>

On Thu, 2011-07-28 at 08:45 +1000, Gavin Andresen wrote:
> "A couple of bitcoins to fix a bug" sounds to me like nothing but
> trouble for whoever is in charge of awarding the bounties, but maybe
> I'm just anti-bounty because spending 2 or 3 hours and getting $30
> worth of bitcoins for fixing a bug wouldn't motivate me.

I do think it would motivate some people to fix a bug or two, though I
would say it wouldn't encourage long-term contributors, just a bunch of
hacked together patches which "fix" a bug.

> RE: road-map and bug-fix-only-releases:  Great ideas.
I know jgarzik hates the idea of branching for releases, but quite a few
projects do that, and it seems to work fairly well.  I would support the
idea of starting with 0.4 and branching for bugfixes to an 0.4 branch,
then adding new features to a head branch to be eventually called 0.5.
> 
> 
> RE: paid full-time project lead:  I arranged to get paid to work on
> bitcoin full-time before I left for Australia; more details when I get
> back week-after-next.
Awesome.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/e437d205/attachment.sig>

From zgenjix at yahoo.com  Thu Jul 28 00:02:13 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Wed, 27 Jul 2011 17:02:13 -0700 (PDT)
Subject: [Bitcoin-development] Fw: Seeking advice: Encouraging bug-fixing
	over new features
In-Reply-To: <1311811317.72375.YahooMailNeo@web121005.mail.ne1.yahoo.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<CAJNQ0sshm=q==++MVXEEkMDHX60HJxpFoR3CF3zK4NvFy2-rsQ@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<1311811317.72375.YahooMailNeo@web121005.mail.ne1.yahoo.com>
Message-ID: <1311811333.75173.YahooMailNeo@web121002.mail.ne1.yahoo.com>




----- Forwarded Message -----
From: Amir Taaki <zgenjix at yahoo.com>
To: John Smith <witchspace81 at gmail.com>
Sent: Thursday, July 28, 2011 2:01 AM
Subject: Re: [Bitcoin-development] Seeking advice: Encouraging bug-fixing over new features


I already tried the bounties route- made a forum thread offering $4000 worth of bounties and it got very few? responses before dropping off the page.


Also, http://forum.bitcoin.org/?topic=4761.0 and http://forum.bitcoin.org/?topic=4543.0

In the end I came to the conclusion that the only was is to bring in projects and pay people to work fulltime on Bitcoin under an organisation.



________________________________
From: John Smith <witchspace81 at gmail.com>
To: Joel Joonatan Kaartinen <joel.kaartinen at gmail.com>
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Sent: Wednesday, July 27, 2011 4:20 PM
Subject: Re: [Bitcoin-development] Seeking advice: Encouraging bug-fixing over new features


On Wed, Jul 27, 2011 at 11:14 AM, Joel Joonatan Kaartinen <joel.kaartinen at gmail.com> wrote:

Perhaps even add a way for anyone add to the bounty attached to a bug on
>the bug tracker? Also, a listing page for bugs with their bounties might
>be nice too.
>

Good idea. I'm not sure if the github bug tracker supports extension attributes, but it'd be a great place to add it. Also, people can let know that they're already working on a feature using a comment, to prevent double work.

The biggest problem will be organizational, in getting the BTC together for bounties; only a high profile member such as Gavin will have enough trust to ask for support. Or maybe there's something left in the faucet? :-)

Unrelated: what also might help is publishing a roadmap. Plan a few "bug fix only" releases before scheduling addition of new features. It's also helpful for people that wonder that direction the project is going in...

JS 


------------------------------------------------------------------------------
Got Input??  Slashdot Needs You.
Take our quick survey online.? Come on, we don't ask for help often.
Plus, you'll get a chance to win $100 to spend on ThinkGeek.
http://p.sf.net/sfu/slashdot-survey
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110727/da06568f/attachment.html>

From jgarzik at exmulti.com  Thu Jul 28 00:15:44 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 27 Jul 2011 20:15:44 -0400
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
	<1311786944.9830.77.camel@mei>
	<CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
Message-ID: <CA+8xBpcKNrGFKkN4mAW9E_s9Ph1=Qh9DNWryihDmD90HWMWF3Q@mail.gmail.com>

Linux kernel has not solved this problem; developers simply want to
work on interesting stuff, rather than debug, I think.

The best Linus has done so far it making certain periods of time
bugfix-only, refusing to take new feature pushes during the stability
period.  If there are critical bugs, refusing to release the kernel
until a developer fixes the regressions they added.

Linux is large enough, though, that the ecosystem has grown a support
network, where companies pay for support (one big way my employer
stays in business), which includes bug fixes.  So the paid support
orgs, like Red Hat, wind up going a lot of grunt work fixing because
they are the closest contact to actual users in the field encountering
problems with the Wonderful New Features bestowed upon them by
developers.

"drop and run" coding is a term for developers who appear, commit a
new feature, and then disappear without addressing bug reports or
other feedback regarding their contribution.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From agrimes at speakeasy.net  Thu Jul 28 05:25:46 2011
From: agrimes at speakeasy.net (Alan Grimes)
Date: Thu, 28 Jul 2011 01:25:46 -0400
Subject: [Bitcoin-development] Bitcoin components.
Message-ID: <4E30F2DA.6030403@speakeasy.net>

Lets look at:

https://en.bitcoin.it/wiki/Infrastructure

This is OK as a super high-level overview, but it leaves a great deal to 
be explained.

First what is the status of this? Is it fully implemented? A working 
proposal? An approved proposal? etc...

I am working on the peer and the wallet boxes in this diagram. I want to 
implement my own version because the existing code is completely 
untrustworthy, it is totally slap-dash and almost completely uncommented.

My questions related to the peer are these:

It is taken for granted that the peer will have a listening component 
that accepts connections from other peers.

Does it also have an active component? If so, what operations does it 
perform autonomously?

/me looks at wallet.h and GAH!! Someone reversed the concept of debit 
and credit! =( (GetDebit(), GetCredit())

Interesting... What is the exact relationship between the wallet and the 
miner? (The miner is irrelevant to me until I have a wallet I can trust 
enough to experiment with...)

After reading the dox on libdb, I'm leaning towards an inetd 
implementation. That is, inetd handles all the dirty work with regards 
to connections, and spawns off a server for each client. This minimizes 
the quantity of code at the cost of a wee bit of overhead (maybe 10k per 
process). Basically, the penguin acts like the KoAC in Katamari Damacy, 
if you don't do it in the regal old-fashioned way, he rains down 
thunderbolts on you and you get to write 3 or 4 times as much code.

The upside is that each peer is served by a single completely isolated 
process with extremely simple and highly auditable code.

A general problem that I haven't seen any documentation on yet is that 
most of today's operating systems are properly multi-user systems. 
Naturally, each user would keep his wallet in an encrypted store in his 
home directory. Are there any standards yet for users to set up their 
personal wallet daemon that connects to a system-wide peer node and 
provides an interface for only their own GUI?

-- 
E T F
N H E
D E D

Powers are not rights.




From luke at dashjr.org  Thu Jul 28 05:56:50 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 28 Jul 2011 01:56:50 -0400
Subject: [Bitcoin-development] Bitcoin components.
In-Reply-To: <4E30F2DA.6030403@speakeasy.net>
References: <4E30F2DA.6030403@speakeasy.net>
Message-ID: <201107280156.53487.luke@dashjr.org>

On Thursday, July 28, 2011 1:25:46 AM Alan Grimes wrote:
> https://en.bitcoin.it/wiki/Infrastructure
> 
> This is OK as a super high-level overview, but it leaves a great deal to
> be explained.
> 
> First what is the status of this? Is it fully implemented? A working
> proposal? An approved proposal? etc...

I put the page together a while ago with logical segregation of the current 
Bitcoin concept. wxBitcoin originally implemented the entire thing as one big 
blob. Miners got moved out first. Spesmilo took the next step of separating 
out a GUI. Wallet and node are currently tightly tied together in bitcoind, 
though it can function as only one of the two just as well. So in practice, it 
is fully possible to run it like that, but I'm not aware of any de facto use 
yet.

> It is taken for granted that the peer will have a listening component
> that accepts connections from other peers.
> 
> Does it also have an active component? If so, what operations does it
> perform autonomously?

Generally, nodes need to make outbound connections too, at least to get 
started.

> Interesting... What is the exact relationship between the wallet and the
> miner? (The miner is irrelevant to me until I have a wallet I can trust
> enough to experiment with...)

The miner can really get by with just an address from the wallet--
it needs somewhere to put its generated coins ;)

> A general problem that I haven't seen any documentation on yet is that
> most of today's operating systems are properly multi-user systems.
> Naturally, each user would keep his wallet in an encrypted store in his
> home directory. Are there any standards yet for users to set up their
> personal wallet daemon that connects to a system-wide peer node and
> provides an interface for only their own GUI?

You can run a system-wide bitcoind (or equivalent) to handle p2p connectivity, 
and have each user run a dedicated wallet bitcoind (with the -connect option) 
with a unique JSON-RPC port (for Spesmilo) or wx GUI. I don't think there is 
any automated setup for this kind of arrangement. I personally foresee the p2p 
being implemented on a SOHO router as the end goal (or even better-- 
multicast).



From witchspace81 at gmail.com  Thu Jul 28 06:31:58 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 28 Jul 2011 06:31:58 +0000
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <1311808059.2294.55.camel@Desktop666>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
	<1311786944.9830.77.camel@mei>
	<CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
	<1311808059.2294.55.camel@Desktop666>
Message-ID: <CAJNQ0sumck6TF1Jj0dFy77aRiWw+3mAc6eUSi3rs9qAKbHXqNw@mail.gmail.com>

On Wed, Jul 27, 2011 at 11:07 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> On Thu, 2011-07-28 at 08:45 +1000, Gavin Andresen wrote:
> > "A couple of bitcoins to fix a bug" sounds to me like nothing but
> > trouble for whoever is in charge of awarding the bounties, but maybe
> > I'm just anti-bounty because spending 2 or 3 hours and getting $30
> > worth of bitcoins for fixing a bug wouldn't motivate me.
>
> I do think it would motivate some people to fix a bug or two, though I
> would say it wouldn't encourage long-term contributors, just a bunch of
> hacked together patches which "fix" a bug.
>

Which, in many cases, is enough. Many times, fixing a bug is a few hours of
debugging, then fixing three lines of codes.

Sometimes it just takes a monkey to sit behind a PC and bash on it frantic
enough (with a debugger) to find and fix bugs :-) Competition to fix bugs is
(up to a certain level) good, it gets people off their ass. But I think the
competition problem is very hypothetical. It assumes there will suddenly be
*a lot* of people that want to fix the same bug. That's unrealistic...

Writing a few test-cases (which is better than the 0 we have now) also won't
take a Linus-level developer to work on it full time. A reasonable dev just
needs to put some time into it.

That leaves the more difficult work to the lead devs.

For a distributed currency I must say there is very little belief here in a
distributed process. Yes, you can also start a company and hire people to
work on it full time, but then they'll be working on helping customer not
solving bugs of the issue tracker (which might have an overlap, but not
necessarily). And it also isn't clear whether changes are contributed back
to the project.

You should not underestimate the open source community. There's a lot of
smart students eager to work on interesting, high-impact projects. Bitcoin
certainly fits that description, but the problem is that Bitcoin isn't
really that known yet with devs, and they need a little push to get
involved. And to work on the current code-base, because usually they will
look at the code and decide it's a piece of crap and want to rewrite it (new
people syndrome).

Yes, there might be one-time-and-run-off flakes, but hey that's life... you
only need to gain a few (semi)dedicated devs from it anyway, not recruit an
army of loyal minions.

I'm not saying this push has to be bounties. It could be a nice page, for
example just posting the bounties on the forum is a start, but certainly not
enough. They just get buried in troll poop, and a lot of the forum users are
... *psychological analysis removed*. You really want to reach out somehow.

It should at least have a nice page that attracts people on the
bitcoin.orgsite, and explains why you should work on Bitcoin (because
the project is so
awesome and fun) and some form of attribution (not just a mention in the
gitlog, but bounties is only one option) if you do manage to fix a bug.

Heck a scoreboard with "number of bugs squished" could be a start :-) We
need to be creative here...

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/88846e1b/attachment.html>

From bitcoin-list at bluematt.me  Thu Jul 28 11:21:06 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 28 Jul 2011 13:21:06 +0200
Subject: [Bitcoin-development] Bitcoin components.
In-Reply-To: <4E30F2DA.6030403@speakeasy.net>
References: <4E30F2DA.6030403@speakeasy.net>
Message-ID: <1311852066.2306.4.camel@Desktop666>

On Thu, 2011-07-28 at 01:25 -0400, Alan Grimes wrote:
> I am working on the peer and the wallet boxes in this diagram. I want to 
> implement my own version because the existing code is completely 
> untrustworthy, it is totally slap-dash and almost completely uncommented.
Yay, yet another person who wants to write their own client from scratch
who will get the net code done, work a bit on wallet code and move on to
something more exciting.  Seriously, at this point it seems everyone and
their mother are writing their own, or planning to write their own,
client.
Bitcoin's code actually can be fairly well segmented into the necessary
pieces (CWallet was the first big chunk, more are coming) and comments
are being added as a part of that effort.
The current code is much, much more trustworthy than anything someone
new will start to code, even if they have 20 lines of comments for each
line of code.  If you want to help the project, please dont write yet
another new client library, just look for an existing one you can help
with, or help with the original client.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/3f64dd0d/attachment.sig>

From calebdelisle at lavabit.com  Thu Jul 28 15:37:21 2011
From: calebdelisle at lavabit.com (Caleb James DeLisle)
Date: Thu, 28 Jul 2011 11:37:21 -0400
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CA+8xBpcKNrGFKkN4mAW9E_s9Ph1=Qh9DNWryihDmD90HWMWF3Q@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<1311765274.9830.3.camel@mei>
	<CAJNQ0su9Qbi=zMaJA0G77UuHkXBy8k7YLBd4cec=Rc_-FGPBjA@mail.gmail.com>
	<201107271028.28057.luke@dashjr.org>
	<CAJ1JLtuuUUmrWGScbvYikAY_FOQhWpX5bt1NGp8VkpHk-hHOsQ@mail.gmail.com>
	<1311786944.9830.77.camel@mei>
	<CABsx9T1667dxUj_iRtgbUR0ymBVOaADkGQU_CMF7z7e1-ctRcQ@mail.gmail.com>
	<CA+8xBpcKNrGFKkN4mAW9E_s9Ph1=Qh9DNWryihDmD90HWMWF3Q@mail.gmail.com>
Message-ID: <4E318231.9020707@lavabit.com>

Bitcoin seems to have a relatively unique problem, there is a perception that there are early adopters who still have large stashes of btc.
Not that this is wrong, they knew a good thing early, the problem is that it is hard for someone (me) to justify volunteering work on a codebase which will directly benefit other people even if they do nothing.
>From my brief observation it appears that the developers now are split between early adopters who are working on their investment, ambitious people who are working on alt clients to satisfy certain requirements for their own projects and hobby developers donating code to alt chain clients because chains which have not taken off don't benefit anyone yet.
As far as trying to bring these people together, I don't have any silver bullet answers but I think there needs to be some kind of sponsorship of developers. I2P uses bounties but they are indeed a small community, I can see bounties going very wrong but I suppose it doesn't hurt to experiment. I think grants for active developers make more sense, then we only need someone to decide who is active enough.
Also moving in the direction of seperating bitcoin the program from Bitcoin the blockchain and accepting patches for merged mining and alt chain stuff which doesn't directly benefit Bitcoin would help decrease the "people are making money off of my back" feeling that (IMO) stands in the way of new developers.

Caleb


On 07/27/2011 08:15 PM, Jeff Garzik wrote:
> Linux kernel has not solved this problem; developers simply want to
> work on interesting stuff, rather than debug, I think.
> 
> The best Linus has done so far it making certain periods of time
> bugfix-only, refusing to take new feature pushes during the stability
> period.  If there are critical bugs, refusing to release the kernel
> until a developer fixes the regressions they added.
> 
> Linux is large enough, though, that the ecosystem has grown a support
> network, where companies pay for support (one big way my employer
> stays in business), which includes bug fixes.  So the paid support
> orgs, like Red Hat, wind up going a lot of grunt work fixing because
> they are the closest contact to actual users in the field encountering
> problems with the Wonderful New Features bestowed upon them by
> developers.
> 
> "drop and run" coding is a term for developers who appear, commit a
> new feature, and then disappear without addressing bug reports or
> other feedback regarding their contribution.
> 




From agrimes at speakeasy.net  Thu Jul 28 18:43:22 2011
From: agrimes at speakeasy.net (Alan Grimes)
Date: Thu, 28 Jul 2011 14:43:22 -0400
Subject: [Bitcoin-development] Forking personal "vanity" versions...
Message-ID: <4E31ADCA.1040600@speakeasy.net>

To those who think there are too many vanity versions of bitcoin, all I 
have to say is this:


atg at tortoise ~/source/bitcoin/src $ make -f makefile.unix
g++ -c -O2 -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DNOPCH 
-DFOURWAYSSE2 -DUSE_SSL -DUSE_UPNP=0 
-I/usr/lib64/wx/include/gtk2-unicode-2.9 -I/usr/include/wx-2.9 
-DwxDEBUG_LEVEL=2 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ 
-pthread -DGUI -o obj/util.o util.cpp
In file included from util.cpp:4:0:
headers.h:43:20: fatal error: db_cxx.h: No such file or directory
compilation terminated.
make: *** [obj/util.o] Error 1
atg at tortoise ~/source/bitcoin/src $


'nuff said.


-- 
E T F
N H E
D E D

Powers are not rights.




From gmaxwell at gmail.com  Thu Jul 28 18:49:07 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 28 Jul 2011 14:49:07 -0400
Subject: [Bitcoin-development] Forking personal "vanity" versions...
In-Reply-To: <4E31ADCA.1040600@speakeasy.net>
References: <4E31ADCA.1040600@speakeasy.net>
Message-ID: <CAAS2fgShyCWXKRLascGrAb-MEoFSFB3nv+DoOOHgwWApbXam8w@mail.gmail.com>

On Thu, Jul 28, 2011 at 2:43 PM, Alan Grimes <agrimes at speakeasy.net> wrote:
> To those who think there are too many vanity versions of bitcoin, all I
> have to say is this:

There is a 'vanity version' that removes the use of libdb or somehow
magically requires you to not have its development headers installed
on your system?



From witchspace81 at gmail.com  Thu Jul 28 18:58:20 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 28 Jul 2011 18:58:20 +0000
Subject: [Bitcoin-development] Forking personal "vanity" versions...
In-Reply-To: <CAAS2fgShyCWXKRLascGrAb-MEoFSFB3nv+DoOOHgwWApbXam8w@mail.gmail.com>
References: <4E31ADCA.1040600@speakeasy.net>
	<CAAS2fgShyCWXKRLascGrAb-MEoFSFB3nv+DoOOHgwWApbXam8w@mail.gmail.com>
Message-ID: <CAJNQ0ssiVBDc5YHSYVVC8QhZoNs9D30s_gBrfBCeBDwxm8-90Q@mail.gmail.com>

On Thu, Jul 28, 2011 at 6:49 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Thu, Jul 28, 2011 at 2:43 PM, Alan Grimes <agrimes at speakeasy.net>
> wrote:
> > To those who think there are too many vanity versions of bitcoin, all I
> > have to say is this:
>
> There is a 'vanity version' that removes the use of libdb or somehow
> magically requires you to not have its development headers installed
> on your system?
>

Maybe they have magic build instructions in the readme file! :-)

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110728/e730d57e/attachment.html>

From luke at dashjr.org  Thu Jul 28 19:08:08 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 28 Jul 2011 15:08:08 -0400
Subject: [Bitcoin-development] Forking personal "vanity" versions...
In-Reply-To: <CAAS2fgShyCWXKRLascGrAb-MEoFSFB3nv+DoOOHgwWApbXam8w@mail.gmail.com>
References: <4E31ADCA.1040600@speakeasy.net>
	<CAAS2fgShyCWXKRLascGrAb-MEoFSFB3nv+DoOOHgwWApbXam8w@mail.gmail.com>
Message-ID: <201107281508.11099.luke@dashjr.org>

On Thursday, July 28, 2011 2:49:07 PM Gregory Maxwell wrote:
> On Thu, Jul 28, 2011 at 2:43 PM, Alan Grimes <agrimes at speakeasy.net> wrote:
> > To those who think there are too many vanity versions of bitcoin, all I
> > have to say is this:
>
> There is a 'vanity version' that removes the use of libdb or somehow
> magically requires you to not have its development headers installed
> on your system?

You'll get that error even with the headers installed, because the makefile 
doesn't add the proper include paths to GCC.

To build, I first: sed -i s/static/dynamic/ makefile.unix # because static 
libraries aren't standard on my OS (nor should they be)

Then: make -f makefile.unix DEBUGFLAGS="-I/usr/include/db4.8 -ggdb -O0" \
      -j4 USE_UPNP=1 bitcoind



From bitcoin-list at bluematt.me  Thu Jul 28 19:28:29 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 28 Jul 2011 21:28:29 +0200
Subject: [Bitcoin-development] Forking personal "vanity" versions...
In-Reply-To: <4E31ADCA.1040600@speakeasy.net>
References: <4E31ADCA.1040600@speakeasy.net>
Message-ID: <1311881309.2380.1.camel@Desktop666>

On Thu, 2011-07-28 at 14:43 -0400, Alan Grimes wrote:
> To those who think there are too many vanity versions of bitcoin, all I 
> have to say is this:
> 'nuff said.
> 
> 

Seriously? This is the very reason most people dont use the forums
anymore.  This is just a one-off email that says nothing, doesn't ask a
question doesn't make a statement, and doesn't do anything remotely
useful, keep this kind of crap to yourself.




From gavinandresen at gmail.com  Thu Jul 28 22:41:12 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 29 Jul 2011 08:41:12 +1000
Subject: [Bitcoin-development] Forking personal "vanity" versions...
In-Reply-To: <1311881309.2380.1.camel@Desktop666>
References: <4E31ADCA.1040600@speakeasy.net>
	<1311881309.2380.1.camel@Desktop666>
Message-ID: <CABsx9T1c+dE2NESPEPVv8LYEeJ0b285+-Duj-eKRomV+c4ZEaw@mail.gmail.com>

Matt:  First I agree with you.  Second: your should have sent your message
directly to Alan instead of to the entire bitcoin-development list.

All: The idea is for this mailing list to be CONSTRUCTIVE discussion of
bitcoin development.  Please ask yourself "will my message help move the
bitcoin project forward or will it just make somebody angry" before posting.
 And assume that at least someone on the list just broke up with their
girlfriend and is in a crappy mood.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110729/c9ce4ccb/attachment.html>

From mike at plan99.net  Sat Jul 30 11:34:38 2011
From: mike at plan99.net (Mike Hearn)
Date: Sat, 30 Jul 2011 12:34:38 +0100
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
Message-ID: <CANEZrP2RdNv3Ao01jUQuyg0AapuC-e_skMF_2Ot0fkx6jH+nkw@mail.gmail.com>

This was already discussed on the forums, but clear use cases would be helpful.

I originally thought this feature seemed like a no-brainer, but
randomly emailing money to people out of the blue is not a very common
operation. You almost always have contact with them first, if only to
say "hey, I'm going to send you some money", but more commonly to
figure out how much you're going to pay and what for.

Once you have communication, providing an address in-band isn't very
hard, and it has the advantage of always working. Doing anything with
DNS or magic HTTPS endpoints means that 90% of the time, your feature
*will not work* (eg it won't work for any gmail/yahoo/hotmail account)
and users will rapidly learn not to bother trying as they have no way
of knowing if any given address will work or not.

It's not smart UI design to provide users with a feature that will
normally never work, and for which they can't even guess at whether it
will.

What would be better to see is a standardized (probably HTTPS based)
protocol in which a Bitcoin URI could contain a domain name, and then
your client would challenge the domain to sign a nonce with the key
corresponding to the address (or raw pubkey). This means in your
client the payment can be rendered and recorded as a payment to
"foobar.com", which is much more helpful. That protocol could then be
extended to support "user at foobar.com" type challenges so when a
bitcoin: link is provided, the server is challenged to prove ownership
by that user of that public key. It means the details are hidden and
when the feature is present, the UI gets silently better, but there's
never any demand on any users to do anything different. The "copy
Bitcoin address" button in the UI can provide the clipboard with both
text/plain and text/html content so the right one is picked depending
on context.



From mike at plan99.net  Sat Jul 30 11:49:04 2011
From: mike at plan99.net (Mike Hearn)
Date: Sat, 30 Jul 2011 12:49:04 +0100
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
Message-ID: <CANEZrP00+5GSPqoKmZgCw1huYNEuidjWgKGDdF-LG-zTaV8xXg@mail.gmail.com>

I've worked on open source projects for over 10 years now. This
dynamic always exists but I've never seen it seriously kill a project.

Thoughts:

 - People who start out with features often stick around and become
core contributors.
 - Unit tests are critical.

Now there's a basic skeleton for unit tests, the bug debt can start to
be paid down by insisting that anyone who touches a piece of code
introduces tests, whether it be for new features or refactorings.
Insist patches won't be accepted without some new tests. In an
untested codebase, adding or improving tests often reveals other bugs
that then get fixed at the same time.

People usually don't want to write tests if there's nothing there
already. So I'd suggest seeding the test suite with a small number of
simple tests for each part (wallet, net, db, etc). Once there are a
few tests already it's easier to get people to add more. It's tempting
to say, well, the wallet or re-org handling or whatever is the most
critical so we'll write lots of tests for that first and do the rest
later, but that's not as conducive to getting people to help.

Most complex projects need some unit testing infrastructure to assist.
For instance, the ability to use mock network connections or minimal
difficulty chains. So if you build up that infrastructure and plant
those seeds, it'll be easier for other people to flesh it out.

Final thought - big test suites take a long time to grow, especially
in codebases developed without them. A good start is a manually
written test plan, that just walks you through the apps features.
Insisting that a patch be signed off as passing the test plan is a
good way to avoid gigantic breakages like the wallet encryption bug
from cold start, at the cost of slowing down development (nobody likes
doing manual test work over and over).

I don't always follow my own advice on this and usually end up
regretting it ....



From rick at support-intelligence.com  Sat Jul 30 13:42:35 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Sat, 30 Jul 2011 06:42:35 -0700
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CANEZrP2RdNv3Ao01jUQuyg0AapuC-e_skMF_2Ot0fkx6jH+nkw@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<CANEZrP2RdNv3Ao01jUQuyg0AapuC-e_skMF_2Ot0fkx6jH+nkw@mail.gmail.com>
Message-ID: <CAJ1JLtvuts2T=gN9Fm0W8yvqMLUorSV+tvcjO+TKwsq=rKnnsQ@mail.gmail.com>

I'm offering patches for DNS lookup, which seems good enough to locate
the irc server but not good enough for the folks that use copy/paste.

from a usability standpoint, the clipboard isn't a UI element in flow
design. Its also subject to MITM attacks for the most popular OSes.

Finally, think beyond you and your friends to how you can buy coffee
at starbucks easier and faster than with a starbucks card. Thats how
you make successful apps and protocols.

Has anyone offered to write the mythical
https-address-resolver-easy-button for bitcoind?

-rick


On Sat, Jul 30, 2011 at 4:34 AM, Mike Hearn <mike at plan99.net> wrote:
> This was already discussed on the forums, but clear use cases would be helpful.
>
> I originally thought this feature seemed like a no-brainer, but
> randomly emailing money to people out of the blue is not a very common
> operation. You almost always have contact with them first, if only to
> say "hey, I'm going to send you some money", but more commonly to
> figure out how much you're going to pay and what for.
>
> Once you have communication, providing an address in-band isn't very
> hard, and it has the advantage of always working. Doing anything with
> DNS or magic HTTPS endpoints means that 90% of the time, your feature
> *will not work* (eg it won't work for any gmail/yahoo/hotmail account)
> and users will rapidly learn not to bother trying as they have no way
> of knowing if any given address will work or not.
>
> It's not smart UI design to provide users with a feature that will
> normally never work, and for which they can't even guess at whether it
> will.
>
> What would be better to see is a standardized (probably HTTPS based)
> protocol in which a Bitcoin URI could contain a domain name, and then
> your client would challenge the domain to sign a nonce with the key
> corresponding to the address (or raw pubkey). This means in your
> client the payment can be rendered and recorded as a payment to
> "foobar.com", which is much more helpful. That protocol could then be
> extended to support "user at foobar.com" type challenges so when a
> bitcoin: link is provided, the server is challenged to prove ownership
> by that user of that public key. It means the details are hidden and
> when the feature is present, the UI gets silently better, but there's
> never any demand on any users to do anything different. The "copy
> Bitcoin address" button in the UI can provide the clipboard with both
> text/plain and text/html content so the right one is picked depending
> on context.
>



From rick at support-intelligence.com  Sat Jul 30 14:06:28 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Sat, 30 Jul 2011 07:06:28 -0700
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CANEZrP00+5GSPqoKmZgCw1huYNEuidjWgKGDdF-LG-zTaV8xXg@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<CANEZrP00+5GSPqoKmZgCw1huYNEuidjWgKGDdF-LG-zTaV8xXg@mail.gmail.com>
Message-ID: <CAJ1JLttSv5RgKAfhOK-4k341NDuA+j4bsPgPWtO2Lxky6--e1w@mail.gmail.com>

+1

Putting a bounty on the test framework might put some loose change to work.

http://code.google.com/p/googletest/ would be my choice

the list of c++ frameworks is at
http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B

-rick

On Sat, Jul 30, 2011 at 4:49 AM, Mike Hearn <mike at plan99.net> wrote:
> I've worked on open source projects for over 10 years now. This
> dynamic always exists but I've never seen it seriously kill a project.
>
> Thoughts:
>
> ?- People who start out with features often stick around and become
> core contributors.
> ?- Unit tests are critical.
>
> Now there's a basic skeleton for unit tests, the bug debt can start to
> be paid down by insisting that anyone who touches a piece of code
> introduces tests, whether it be for new features or refactorings.
> Insist patches won't be accepted without some new tests. In an
> untested codebase, adding or improving tests often reveals other bugs
> that then get fixed at the same time.
>
> People usually don't want to write tests if there's nothing there
> already. So I'd suggest seeding the test suite with a small number of
> simple tests for each part (wallet, net, db, etc). Once there are a
> few tests already it's easier to get people to add more. It's tempting
> to say, well, the wallet or re-org handling or whatever is the most
> critical so we'll write lots of tests for that first and do the rest
> later, but that's not as conducive to getting people to help.
>
> Most complex projects need some unit testing infrastructure to assist.
> For instance, the ability to use mock network connections or minimal
> difficulty chains. So if you build up that infrastructure and plant
> those seeds, it'll be easier for other people to flesh it out.
>
> Final thought - big test suites take a long time to grow, especially
> in codebases developed without them. A good start is a manually
> written test plan, that just walks you through the apps features.
> Insisting that a patch be signed off as passing the test plan is a
> good way to avoid gigantic breakages like the wallet encryption bug
> from cold start, at the cost of slowing down development (nobody likes
> doing manual test work over and over).
>
> I don't always follow my own advice on this and usually end up
> regretting it ....
>
> ------------------------------------------------------------------------------
> Got Input? ? Slashdot Needs You.
> Take our quick survey online. ?Come on, we don't ask for help often.
> Plus, you'll get a chance to win $100 to spend on ThinkGeek.
> http://p.sf.net/sfu/slashdot-survey
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From bitcoin-list at bluematt.me  Sat Jul 30 14:07:01 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 30 Jul 2011 16:07:01 +0200
Subject: [Bitcoin-development] bitcoin DNS addresses
In-Reply-To: <CAJ1JLtvuts2T=gN9Fm0W8yvqMLUorSV+tvcjO+TKwsq=rKnnsQ@mail.gmail.com>
References: <CAJ1JLts5_r6hHoJR-gS-CuuvS00p=RQ6iYbCyOkBDcvgs1xtew@mail.gmail.com>
	<CANEZrP2RdNv3Ao01jUQuyg0AapuC-e_skMF_2Ot0fkx6jH+nkw@mail.gmail.com>
	<CAJ1JLtvuts2T=gN9Fm0W8yvqMLUorSV+tvcjO+TKwsq=rKnnsQ@mail.gmail.com>
Message-ID: <1312034821.2310.0.camel@Desktop666>

On Sat, 2011-07-30 at 06:42 -0700, Rick Wesson wrote:
> Has anyone offered to write the mythical
> https-address-resolver-easy-button for bitcoind?

That was my point, it already has been written...twice IIRC.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110730/b84a6e13/attachment.sig>

From bitcoin-list at bluematt.me  Sat Jul 30 14:07:54 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 30 Jul 2011 16:07:54 +0200
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CAJ1JLttSv5RgKAfhOK-4k341NDuA+j4bsPgPWtO2Lxky6--e1w@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
	<CANEZrP00+5GSPqoKmZgCw1huYNEuidjWgKGDdF-LG-zTaV8xXg@mail.gmail.com>
	<CAJ1JLttSv5RgKAfhOK-4k341NDuA+j4bsPgPWtO2Lxky6--e1w@mail.gmail.com>
Message-ID: <1312034874.2310.1.camel@Desktop666>

On Sat, 2011-07-30 at 07:06 -0700, Rick Wesson wrote:
> +1
> 
> Putting a bounty on the test framework might put some loose change to work.
> 
> http://code.google.com/p/googletest/ would be my choice
> 
> the list of c++ frameworks is at
> http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B

We already have boost testing framework implemented, it just doesn't
have many tests.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110730/61a256ea/attachment.sig>

From witchspace81 at gmail.com  Sun Jul 31 11:21:34 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 31 Jul 2011 11:21:34 +0000
Subject: [Bitcoin-development]  Unit tests
In-Reply-To: <CAJNQ0svOGGZ+L6ffK2RA+wq-VawkdJKeQcjo4_0socLZUpwDyg@mail.gmail.com>
References: <CAJNQ0svOGGZ+L6ffK2RA+wq-VawkdJKeQcjo4_0socLZUpwDyg@mail.gmail.com>
Message-ID: <CAJNQ0suWuaeNCA0MDp6Sef4EE1ibSg=YPVWY93cpqKig_reZXg@mail.gmail.com>

Oops, should have gone to the list

On Sat, Jul 30, 2011 at 2:07 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> On Sat, 2011-07-30 at 07:06 -0700, Rick Wesson wrote:
> > +1
> >
> > Putting a bounty on the test framework might put some loose change to
> work.
> >
> > http://code.google.com/p/googletest/ would be my choice
> >
> > the list of c++ frameworks is at
> > http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B
>
> We already have boost testing framework implemented, it just doesn't
> have many tests.
>

BTW, talking about the unit testframework: It doesn't build here by default:

$ make -f makefile.unix test_bitcoin  USE_UPNP=

g++ -static  -o test_bitcoin  obj/test/test_bitcoin.o -Wl,-Bstatic -l
boost_system -l boost_filesystem -l boost_program_options -l boost_thread -l
db_cxx -l ssl -l crypto -Wl,-Bdynamic -l gthread-2.0 -l z -l dl -l pthread
-lboost_unit_test_framework
/usr/lib/gcc/x86_64-linux-gnu/4.4.5/../../../../lib/crt1.o: In function
`_start':
(.text+0x20): undefined reference to `main'
collect2: ld returned 1 exit status
make: *** [test_bitcoin] Error 1

Two ways to fix this:

1) Add #define BOOST_TEST_DYN_LINK  to the top of test_bitcoin.cpp. This is
needed for dynamic linking.

2) Link boost_unit_test_framework statically

test_bitcoin: obj/test/test_bitcoin.o
        $(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -Wl,-Bstatic
-lboost_unit_test_framework -Wl,-Bdynamic

(yes, it needs the switch to dynamic again at the end, otherwise libgcc will
be linked statically which results in an error ...)

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110731/7d5c23f6/attachment.html>

From bitcoin-list at bluematt.me  Sun Jul 31 12:24:10 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 31 Jul 2011 14:24:10 +0200
Subject: [Bitcoin-development] Unit tests
In-Reply-To: <CAJNQ0suWuaeNCA0MDp6Sef4EE1ibSg=YPVWY93cpqKig_reZXg@mail.gmail.com>
References: <CAJNQ0svOGGZ+L6ffK2RA+wq-VawkdJKeQcjo4_0socLZUpwDyg@mail.gmail.com>
	<CAJNQ0suWuaeNCA0MDp6Sef4EE1ibSg=YPVWY93cpqKig_reZXg@mail.gmail.com>
Message-ID: <1312115050.2325.1.camel@Desktop666>

On Sun, 2011-07-31 at 11:21 +0000, John Smith wrote:
> 
> BTW, talking about the unit testframework: It doesn't build here by
> default:
> 
> $ make -f makefile.unix test_bitcoin  USE_UPNP=
> 
> g++ -static  -o test_bitcoin  obj/test/test_bitcoin.o -Wl,-Bstatic -l
> boost_system -l boost_filesystem -l boost_program_options -l
> boost_thread -l db_cxx -l ssl -l crypto -Wl,-Bdynamic -l gthread-2.0
> -l z -l dl -l pthread -lboost_unit_test_framework
> /usr/lib/gcc/x86_64-linux-gnu/4.4.5/../../../../lib/crt1.o: In
> function `_start':
> (.text+0x20): undefined reference to `main'
> collect2: ld returned 1 exit status
> make: *** [test_bitcoin] Error 1
> 
> Two ways to fix this:
> 
> 1) Add #define BOOST_TEST_DYN_LINK  to the top of test_bitcoin.cpp.
> This is needed for dynamic linking.
> 
> 2) Link boost_unit_test_framework statically
> 
> test_bitcoin: obj/test/test_bitcoin.o
>         $(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -Wl,-Bstatic
> -lboost_unit_test_framework -Wl,-Bdynamic
> 
> (yes, it needs the switch to dynamic again at the end, otherwise
> libgcc will be linked statically which results in an error ...)
> 
> JS

See pull 363 and 442 :)

Matt




From witchspace81 at gmail.com  Sun Jul 31 12:46:54 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 31 Jul 2011 12:46:54 +0000
Subject: [Bitcoin-development] Unit tests
In-Reply-To: <1312115050.2325.1.camel@Desktop666>
References: <CAJNQ0svOGGZ+L6ffK2RA+wq-VawkdJKeQcjo4_0socLZUpwDyg@mail.gmail.com>
	<CAJNQ0suWuaeNCA0MDp6Sef4EE1ibSg=YPVWY93cpqKig_reZXg@mail.gmail.com>
	<1312115050.2325.1.camel@Desktop666>
Message-ID: <CAJNQ0ssw7yzQZca8s2Mw0NGQnnMD4SYh0YekSLTP6AMwAagALw@mail.gmail.com>

>
> See pull 363 and 442 :)
>

Great. I really hope these get pulled ASAP, having the tests all over the
place in different forks is really confusing :(

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110731/e0b47936/attachment.html>

