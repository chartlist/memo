From castiglionemaldonado at gmail.com  Tue Oct  1 00:05:33 2013
From: castiglionemaldonado at gmail.com (=?UTF-8?Q?Fatima_Castiglione_Maldonado_=E5=8F=91?=)
Date: Mon, 30 Sep 2013 21:05:33 -0300
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAAS2fgTADRp6Z-Zcntd9EUNrJH7AdEOyK+LEFmaA0uzM6T2sug@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<CAEz79PrGKH27GkDkM2whAdOYYj6-hc954Z=9v1GanBRQA3chvA@mail.gmail.com>
	<CALOkD28XV-GA5LdXjWPW9wEJy8-DEbKyYk5iiWwo8kmmmtLB4w@mail.gmail.com>
	<CAAS2fgTADRp6Z-Zcntd9EUNrJH7AdEOyK+LEFmaA0uzM6T2sug@mail.gmail.com>
Message-ID: <CALOkD28rja7RwtO4wb6LNyw6yyFwFoej1n2-O_kboHMP1d0J0w@mail.gmail.com>

Oh, excuse me; it looked related to me.
It was not at all my intention to mess down the thread; on the contrary I
was trying to be of help and at the same time getting an answer.

No, I must recognize that I was not aware of sendmany. This is my first
time managing bulk transactions.
Thank you very much for your help.
I lead a group of developers and we are trying to be of help to the Bitcoin
community at large, and to this group.

Kindest regards,
Fatima




2013/9/30 Gregory Maxwell <gmaxwell at gmail.com>

> On Mon, Sep 30, 2013 at 3:00 PM, Fatima Castiglione Maldonado ?
> <castiglionemaldonado at gmail.com> wrote:
> > I am new on the list. I got a similar problem.
> > If I put "sendToAdress" transactions to bitcoind, it will accept between
> 1
> > and 3 transactions per minute, depending on the underlying machine.
> > If I try to send one transaction every 20 seconds or less, bitcoind stops
> > responding to RPC calls.
> >
> > Does anybody know of any solution / fix / workaround for this?
>
> This is unrelated to Slush's question.
>
> The complexity of IsConfirmed/Ismine is exponential and starts taking
> tens of seconds at a chain of a dozen unconfirmed transactions (and
> growing from there)
>
> There are some patches that change this, but since the whole network
> will only average about 7tx per second, you're probably doing
> something wrong if you're building great big chains of unconfirmed
> transaction.  Are you aware of sendmany?
>



-- 
=================================
F?tima Castiglione Maldonado
castiglionemaldonado at gmail.com

                     ____
                   ,'_   |
 __________________|__|__|__
<_____                      )                _.------._
      `-----------,------.-'              ,-'          `-.
                 |    |  |              ,'                `.
                ,'    |  |            ,'                    `.
                |  _,-'  |__         /                        \
              _,'-'    `.   `---.___|_____________             \
          .--'  -----.  | _____________________   `-. -----     |
          |    ___|  |  |                      \  ,- \          |
          |    ___|  |===========================((|) |         |
          |       |  |  | _____________________/  `- /          |
          `--._ -----'  |        _________________,-' -----     |
               `.-._   ,' __.---'   |                          /
                |   `-.  |           \                        /
                `.    |  |            `.                    ,'
                 |    |  |              `.                ,'
 _____,----------`-------`-.              `-._        _,-'
<___________________________)                 `------'
                   | _|  |
                   `.____|



=================================
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130930/aea8ab42/attachment.html>

From chris.double at double.co.nz  Tue Oct  1 00:20:40 2013
From: chris.double at double.co.nz (Chris Double)
Date: Tue, 01 Oct 2013 13:20:40 +1300
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
Message-ID: <874n91kfjb.fsf@double.co.nz>

slush <slush at centrum.cz> writes:

> I observed this problem with version 0.8.2, but it is still happening with
> 0.8.5. 

I see this as well with 0.8.2+. I don't see it on 0.8.1. I originally
hit the '4 keep alive thread limit' where four clients on the same
bitcoind would result in other clients not being able to connect. I
resolved that and still hit the RPC hanging issue. The most problem I've
had is using 'getwork' which I believe is going the wayside anyway.




From jgarzik at bitpay.com  Tue Oct  1 01:17:17 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 1 Oct 2013 03:17:17 +0200
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
Message-ID: <CAJHLa0MHSjZ_mwsCKa=rd1_39H0yq9j2jVwr0qWFTxTtrWXPCQ@mail.gmail.com>

Can you please describe more than "RPC stops working"?  What is your
precise RPC usage?  getwork?  getblocktemplate?  other calls?  What is
your OS?


On Mon, Sep 30, 2013 at 10:44 PM, slush <slush at centrum.cz> wrote:
> Hi,
>
> during several weeks I'm observing more and more frequent issues with
> bitcoind. The problem is that bitcoind stops responding to RPC calls, but
> there's no other suspicious activity in bitcoind log, CPU usage is low, disk
> I/O is standard etc.
>
> I observed this problem with version 0.8.2, but it is still happening with
> 0.8.5. Originally this happen just one or twice per day. Today my monitoring
> scripts restarted bitcoind more than 30x, which sounds alarming. This happen
> on various backends, so it isn't a problem of one specific node. Is there
> anybody else who's observing similar problem?
>
> Thanks,
> slush
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Tue Oct  1 01:26:59 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 1 Oct 2013 03:26:59 +0200
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAEz79PrGKH27GkDkM2whAdOYYj6-hc954Z=9v1GanBRQA3chvA@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<CAEz79PrGKH27GkDkM2whAdOYYj6-hc954Z=9v1GanBRQA3chvA@mail.gmail.com>
Message-ID: <CAJHLa0NX-hfRu1YOK1tqb5j_Y8QxC6YZPjj7rc+3NjqNxrH4qg@mail.gmail.com>

On Mon, Sep 30, 2013 at 11:01 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:
> 0.8.2 apparently was the first Bitcoin version to support RPC keepalive.

No, this is not correct at all.  RPC keepalive was present in 0.7.0,
possibly earlier.

Come on, it took a 30 second 'git checkout' session to verify this.


> With the 4 RPC thread limit, four keepalive connections will exhaust all four and prevent further connections.

I was about to flame you with a "WTF is this fiction?" but it seems
true: 21eb5ada introduces this.

Unfortunately, it does so erroneously, introducing clearly buggy
behavior that did not exist with the thread-per-connection code that
provided keep-alive before commit 21eb5ada.

In my opinion, 21eb5ada half-changed the RPC code from
thread-per-connection to a worker-group model, without considering all
the consequences.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From olivier at trillion01.com  Tue Oct  1 04:03:39 2013
From: olivier at trillion01.com (Olivier Langlois)
Date: Tue, 01 Oct 2013 00:03:39 -0400
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
Message-ID: <1380600219.932.21.camel@Wailaba2>

On Mon, 2013-09-30 at 22:44 +0200, slush wrote:
> Hi,
> 
> 
> during several weeks I'm observing more and more frequent issues with
> bitcoind. The problem is that bitcoind stops responding to RPC calls,
> but there's no other suspicious activity in bitcoind log, CPU usage is
> low, disk I/O is standard etc.
> 
> 
> I observed this problem with version 0.8.2, but it is still happening
> with 0.8.5. Originally this happen just one or twice per day. Today my
> monitoring scripts restarted bitcoind more than 30x, which sounds
> alarming. This happen on various backends, so it isn't a problem of
> one specific node. Is there anybody else who's observing similar
> problem? 

What a coincidence. I do have observed the same thing. right now with
0.8.5. I am writing a small app. My jsonrpc client is programmed to
timeout after 2 secs and I did see a couple of timeouts once in while.

What I did is a simple test app that just hammer bitcoind with 3 rpc
requests every 30 seconds and I abort it as soon as it encountered a
timeout.

The 3 request burst is performed on the same HTTP 1.1 kept alive
connection. Then I disconnect. When I launch my app before leaving in
the morning, pretty sure that I have a core dump waiting for me when I
come back.

I choose very simple calls: getinfo,getaccount

Added a couple of traces in the RPC handling code. (BTW, timestamps in
traces would be tremendously useful for tracking problems...). I see my
request received by bitcoind but there is no trace yet to show that the
reply is sent.

Not sure yet exactly where the problem is but my current #1 suspect is:

LOCK2(cs_main, pwalletMain->cs_wallet);

with some kind of lock contention with the other threads.





From olivier at trillion01.com  Tue Oct  1 07:10:18 2013
From: olivier at trillion01.com (Olivier Langlois)
Date: Tue, 01 Oct 2013 03:10:18 -0400
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <1380600219.932.21.camel@Wailaba2>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<1380600219.932.21.camel@Wailaba2>
Message-ID: <1380611418.932.31.camel@Wailaba2>


> 
> Not sure yet exactly where the problem is but my current #1 suspect is:
> 
> LOCK2(cs_main, pwalletMain->cs_wallet);
> 
> with some kind of lock contention with the other threads.
> 

I was right. It took more than 6 seconds to acquire the locks

I did modify bitcoinrpc.cpp:

namespace {

struct timeval difftv( const struct timeval &tv1, const struct timeval
&tv2 )
{
        struct timeval res;
        res.tv_sec = tv1.tv_sec - tv2.tv_sec;
        if (tv2.tv_usec > tv1.tv_usec) {
                res.tv_sec--;
                res.tv_usec = 1000000;
        } else
                res.tv_usec = 0;

        res.tv_usec += tv1.tv_usec;
        res.tv_usec -= tv2.tv_usec;

        return res;
}

void printExecTimes( const struct timeval &tv1,
                     const struct timeval &tv2,
                     const struct timeval &tv3 )
{
        struct timeval lockTime = difftv(tv2,tv1);
        struct timeval callTime = difftv(tv3,tv2);
        struct timeval totalTime = difftv(tv3,tv1);
        printf( "locktime : %ld.%06ld calltime : %ld.%06ld totaltime : %
ld.%06ld\n",

lockTime.tv_sec,lockTime.tv_usec,callTime.tv_sec,callTime.tv_usec,
                totalTime.tv_sec,totalTime.tv_usec);
}

}

json_spirit::Value CRPCTable::execute(const std::string &strMethod,
const json_spirit::Array &params) const
{
    // Find method
    const CRPCCommand *pcmd = tableRPC[strMethod];
    if (!pcmd)
        throw JSONRPCError(RPC_METHOD_NOT_FOUND, "Method not found");

    // Observe safe mode
    string strWarning = GetWarnings("rpc");
    if (strWarning != "" && !GetBoolArg("-disablesafemode") &&
        !pcmd->okSafeMode)
        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string("Safe
mode: ") + strWarning);

    try
    {
        // Execute
        Value result;
        {
            if (pcmd->threadSafe)
                result = pcmd->actor(params, false);
            else {
                struct timeval tv1,tv2,tv3;
                gettimeofday(&tv1,NULL); {
                LOCK2(cs_main, pwalletMain->cs_wallet);
                gettimeofday(&tv2,NULL);
                result = pcmd->actor(params, false); }
                gettimeofday(&tv3,NULL);
                printExecTimes(tv1,tv2,tv3);
            }
        }
        return result;
    }
    catch (std::exception& e)
    {
        throw JSONRPCError(RPC_MISC_ERROR, e.what());
    }
}

locktime : 0.000001 calltime : 0.000153 totaltime : 0.000154
locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011
locktime : 0.000000 calltime : 0.000451 totaltime : 0.000451
locktime : 0.000000 calltime : 0.000313 totaltime : 0.000313
locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011
locktime : 0.051574 calltime : 0.000377 totaltime : 0.051951
locktime : 0.000000 calltime : 0.000222 totaltime : 0.000222
locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011
locktime : 0.121106 calltime : 0.000471 totaltime : 0.121577
locktime : 0.078093 calltime : 0.000451 totaltime : 0.078544
locktime : 0.101185 calltime : 0.000021 totaltime : 0.101206
locktime : 0.000000 calltime : 0.000476 totaltime : 0.000476
locktime : 0.000001 calltime : 0.000291 totaltime : 0.000292
locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
locktime : 0.003025 calltime : 0.000036 totaltime : 0.003061
locktime : 0.000000 calltime : 0.000383 totaltime : 0.000383
locktime : 0.000000 calltime : 0.000210 totaltime : 0.000210
locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
locktime : 0.000000 calltime : 0.000470 totaltime : 0.000470
locktime : 0.000000 calltime : 0.000295 totaltime : 0.000295
locktime : 0.000000 calltime : 0.000020 totaltime : 0.000020
locktime : 0.000001 calltime : 0.000385 totaltime : 0.000386
locktime : 0.000000 calltime : 0.000241 totaltime : 0.000241
locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
locktime : 0.000001 calltime : 0.000308 totaltime : 0.000309
locktime : 0.000000 calltime : 0.000164 totaltime : 0.000164
locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
locktime : 0.000000 calltime : 0.000376 totaltime : 0.000376
locktime : 0.000000 calltime : 0.000356 totaltime : 0.000356
locktime : 0.000000 calltime : 0.000021 totaltime : 0.000021
locktime : 0.000000 calltime : 0.000496 totaltime : 0.000496
locktime : 0.000001 calltime : 0.000201 totaltime : 0.000202
locktime : 0.000001 calltime : 0.000017 totaltime : 0.000018
locktime : 0.000000 calltime : 0.000301 totaltime : 0.000301
locktime : 0.000000 calltime : 0.000180 totaltime : 0.000180
locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
locktime : 0.000001 calltime : 0.000359 totaltime : 0.000360
locktime : 0.000000 calltime : 0.000265 totaltime : 0.000265
locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
locktime : 0.000001 calltime : 0.000488 totaltime : 0.000489
locktime : 0.000000 calltime : 0.000226 totaltime : 0.000226
locktime : 0.000000 calltime : 0.000025 totaltime : 0.000025
locktime : 0.000000 calltime : 0.000369 totaltime : 0.000369
locktime : 0.000000 calltime : 0.000262 totaltime : 0.000262
locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
locktime : 0.000000 calltime : 0.000459 totaltime : 0.000459
locktime : 0.000000 calltime : 0.000260 totaltime : 0.000260
locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
locktime : 0.000000 calltime : 0.000330 totaltime : 0.000330
locktime : 0.000000 calltime : 0.000223 totaltime : 0.000223
locktime : 0.000000 calltime : 0.000014 totaltime : 0.000014
locktime : 0.000001 calltime : 0.000449 totaltime : 0.000450
locktime : 0.000001 calltime : 0.000248 totaltime : 0.000249
locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
locktime : 0.000000 calltime : 0.000327 totaltime : 0.000327
locktime : 0.000000 calltime : 0.000196 totaltime : 0.000196
locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
locktime : 0.121170 calltime : 0.000408 totaltime : 0.121578
locktime : 0.004912 calltime : 0.000278 totaltime : 0.005190
locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
locktime : 5.996820 calltime : 0.000328 totaltime : 5.997148





From slush at centrum.cz  Tue Oct  1 08:58:05 2013
From: slush at centrum.cz (slush)
Date: Tue, 1 Oct 2013 10:58:05 +0200
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAJHLa0MHSjZ_mwsCKa=rd1_39H0yq9j2jVwr0qWFTxTtrWXPCQ@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<CAJHLa0MHSjZ_mwsCKa=rd1_39H0yq9j2jVwr0qWFTxTtrWXPCQ@mail.gmail.com>
Message-ID: <CAJna-Hj1c0k3Gb7rEMBeU9nQsFophU2CYzGUOEo3JxieOYA5dA@mail.gmail.com>

ad "RPC stops working":

* Client makes a 'getinfo' call and don't receive a response in a minute.

"What is your precise RPC usage? "

One process is asking getinfo every second as a fallback to possibly
misconfigured blocknotify. It also calls getblocktemplate every 30 second.
Second process is calling getinfo once a minute to check if bitcoind is
working. If it don't receive a response in a minute, it kills bitcoind and
starts it again.

That's all.

OS is Debian.

On Tue, Oct 1, 2013 at 3:17 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Can you please describe more than "RPC stops working"?  What is your
> precise RPC usage?  getwork?  getblocktemplate?  other calls?  What is
> your OS?
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131001/aac731ca/attachment.html>

From jgarzik at bitpay.com  Tue Oct  1 14:17:43 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 1 Oct 2013 16:17:43 +0200
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <1380611418.932.31.camel@Wailaba2>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<1380600219.932.21.camel@Wailaba2>
	<1380611418.932.31.camel@Wailaba2>
Message-ID: <CAJHLa0PucKk_OBQarRgVBRPyC+RbvT9GC1iYqAaBjyT2qyRFdw@mail.gmail.com>

Olivier,

What network activity was going on, during this test?  i.e. during the
call with 5.99 locktime, was bitcoind processing a block or sending a
large transaction?  There are plenty of valid reasons -- sadly -- that
the locks are held for a long time, during random network events.



On Tue, Oct 1, 2013 at 9:10 AM, Olivier Langlois <olivier at trillion01.com> wrote:
>
>>
>> Not sure yet exactly where the problem is but my current #1 suspect is:
>>
>> LOCK2(cs_main, pwalletMain->cs_wallet);
>>
>> with some kind of lock contention with the other threads.
>>
>
> I was right. It took more than 6 seconds to acquire the locks
>
> I did modify bitcoinrpc.cpp:
>
> namespace {
>
> struct timeval difftv( const struct timeval &tv1, const struct timeval
> &tv2 )
> {
>         struct timeval res;
>         res.tv_sec = tv1.tv_sec - tv2.tv_sec;
>         if (tv2.tv_usec > tv1.tv_usec) {
>                 res.tv_sec--;
>                 res.tv_usec = 1000000;
>         } else
>                 res.tv_usec = 0;
>
>         res.tv_usec += tv1.tv_usec;
>         res.tv_usec -= tv2.tv_usec;
>
>         return res;
> }
>
> void printExecTimes( const struct timeval &tv1,
>                      const struct timeval &tv2,
>                      const struct timeval &tv3 )
> {
>         struct timeval lockTime = difftv(tv2,tv1);
>         struct timeval callTime = difftv(tv3,tv2);
>         struct timeval totalTime = difftv(tv3,tv1);
>         printf( "locktime : %ld.%06ld calltime : %ld.%06ld totaltime : %
> ld.%06ld\n",
>
> lockTime.tv_sec,lockTime.tv_usec,callTime.tv_sec,callTime.tv_usec,
>                 totalTime.tv_sec,totalTime.tv_usec);
> }
>
> }
>
> json_spirit::Value CRPCTable::execute(const std::string &strMethod,
> const json_spirit::Array &params) const
> {
>     // Find method
>     const CRPCCommand *pcmd = tableRPC[strMethod];
>     if (!pcmd)
>         throw JSONRPCError(RPC_METHOD_NOT_FOUND, "Method not found");
>
>     // Observe safe mode
>     string strWarning = GetWarnings("rpc");
>     if (strWarning != "" && !GetBoolArg("-disablesafemode") &&
>         !pcmd->okSafeMode)
>         throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string("Safe
> mode: ") + strWarning);
>
>     try
>     {
>         // Execute
>         Value result;
>         {
>             if (pcmd->threadSafe)
>                 result = pcmd->actor(params, false);
>             else {
>                 struct timeval tv1,tv2,tv3;
>                 gettimeofday(&tv1,NULL); {
>                 LOCK2(cs_main, pwalletMain->cs_wallet);
>                 gettimeofday(&tv2,NULL);
>                 result = pcmd->actor(params, false); }
>                 gettimeofday(&tv3,NULL);
>                 printExecTimes(tv1,tv2,tv3);
>             }
>         }
>         return result;
>     }
>     catch (std::exception& e)
>     {
>         throw JSONRPCError(RPC_MISC_ERROR, e.what());
>     }
> }
>
> locktime : 0.000001 calltime : 0.000153 totaltime : 0.000154
> locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011
> locktime : 0.000000 calltime : 0.000451 totaltime : 0.000451
> locktime : 0.000000 calltime : 0.000313 totaltime : 0.000313
> locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011
> locktime : 0.051574 calltime : 0.000377 totaltime : 0.051951
> locktime : 0.000000 calltime : 0.000222 totaltime : 0.000222
> locktime : 0.000000 calltime : 0.000011 totaltime : 0.000011
> locktime : 0.121106 calltime : 0.000471 totaltime : 0.121577
> locktime : 0.078093 calltime : 0.000451 totaltime : 0.078544
> locktime : 0.101185 calltime : 0.000021 totaltime : 0.101206
> locktime : 0.000000 calltime : 0.000476 totaltime : 0.000476
> locktime : 0.000001 calltime : 0.000291 totaltime : 0.000292
> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
> locktime : 0.003025 calltime : 0.000036 totaltime : 0.003061
> locktime : 0.000000 calltime : 0.000383 totaltime : 0.000383
> locktime : 0.000000 calltime : 0.000210 totaltime : 0.000210
> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
> locktime : 0.000000 calltime : 0.000470 totaltime : 0.000470
> locktime : 0.000000 calltime : 0.000295 totaltime : 0.000295
> locktime : 0.000000 calltime : 0.000020 totaltime : 0.000020
> locktime : 0.000001 calltime : 0.000385 totaltime : 0.000386
> locktime : 0.000000 calltime : 0.000241 totaltime : 0.000241
> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
> locktime : 0.000001 calltime : 0.000308 totaltime : 0.000309
> locktime : 0.000000 calltime : 0.000164 totaltime : 0.000164
> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
> locktime : 0.000000 calltime : 0.000376 totaltime : 0.000376
> locktime : 0.000000 calltime : 0.000356 totaltime : 0.000356
> locktime : 0.000000 calltime : 0.000021 totaltime : 0.000021
> locktime : 0.000000 calltime : 0.000496 totaltime : 0.000496
> locktime : 0.000001 calltime : 0.000201 totaltime : 0.000202
> locktime : 0.000001 calltime : 0.000017 totaltime : 0.000018
> locktime : 0.000000 calltime : 0.000301 totaltime : 0.000301
> locktime : 0.000000 calltime : 0.000180 totaltime : 0.000180
> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
> locktime : 0.000001 calltime : 0.000359 totaltime : 0.000360
> locktime : 0.000000 calltime : 0.000265 totaltime : 0.000265
> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
> locktime : 0.000001 calltime : 0.000488 totaltime : 0.000489
> locktime : 0.000000 calltime : 0.000226 totaltime : 0.000226
> locktime : 0.000000 calltime : 0.000025 totaltime : 0.000025
> locktime : 0.000000 calltime : 0.000369 totaltime : 0.000369
> locktime : 0.000000 calltime : 0.000262 totaltime : 0.000262
> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
> locktime : 0.000000 calltime : 0.000459 totaltime : 0.000459
> locktime : 0.000000 calltime : 0.000260 totaltime : 0.000260
> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
> locktime : 0.000000 calltime : 0.000330 totaltime : 0.000330
> locktime : 0.000000 calltime : 0.000223 totaltime : 0.000223
> locktime : 0.000000 calltime : 0.000014 totaltime : 0.000014
> locktime : 0.000001 calltime : 0.000449 totaltime : 0.000450
> locktime : 0.000001 calltime : 0.000248 totaltime : 0.000249
> locktime : 0.000000 calltime : 0.000017 totaltime : 0.000017
> locktime : 0.000000 calltime : 0.000327 totaltime : 0.000327
> locktime : 0.000000 calltime : 0.000196 totaltime : 0.000196
> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
> locktime : 0.121170 calltime : 0.000408 totaltime : 0.121578
> locktime : 0.004912 calltime : 0.000278 totaltime : 0.005190
> locktime : 0.000000 calltime : 0.000016 totaltime : 0.000016
> locktime : 5.996820 calltime : 0.000328 totaltime : 5.997148
>
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From adam at cypherspace.org  Tue Oct  1 14:26:03 2013
From: adam at cypherspace.org (Adam Back)
Date: Tue, 1 Oct 2013 16:26:03 +0200
Subject: [Bitcoin-development] homomorphic coin value (validatable but
 encrypted) (Re: smart contracts -- possible use case? yes or no?)
In-Reply-To: <5248680C.60404@monetize.io>
References: <CAKaEYhLvqT6nkbupEEgR1d9dMP4-pA7xQbBqPDbREiDDV7c0rQ@mail.gmail.com>
	<2c70dbfc173749cf4198c591f19a7d33@astutium.com>
	<CAH+ZByHs00+Cpx5bwybgV3G9=CBfHaHKg7AV9ytywKNAjFVM6g@mail.gmail.com>
	<CABsx9T29T+thSeF-xVk+prfeO7ZJQbX=n=tAURqEKQsVtcBpQg@mail.gmail.com>
	<20130929093708.GA16561@netbook.cypherspace.org>
	<5248680C.60404@monetize.io>
Message-ID: <20131001142603.GA9208@netbook.cypherspace.org>

On Sun, Sep 29, 2013 at 10:49:00AM -0700, Mark Friedenbach wrote:
>This kind of thing - providing external audits of customer accounts
>without revealing private data - would be generally useful beyond
>taxation. If you have any solutions, I'd be interested to hear them
>(although bitcoin-dev is probably not the right place yet).

Thanks for providing the impetus to write down the current state, the
efficient version of which I only figured out a few days ago :)

I have been researching this for a few months on and off, because it seems
like an interesting construct in its own right, a different aspect of
payment privacy (eg for auditable but commercial sensistive information) but
also that other than its direct use it may enable some features that we have
not thought of yet.

I moved it to bitcointalk:

https://bitcointalk.org/index.php?topic=305791.new#new

Its efficient finally (after many dead ends): approximately 2x cost of
current in terms of coin size and coin verification cost, however it also
gives some perf advantages back in a different way - necessary changes to
schnorr (EC version of Schnorr based proofs) allow n of n multiparty sigs,
or k of n multiparty sigs for the verification cost and signature size of
one pair of ECS signatures, for n > 2 its a space and efficiency improvement
over current bitcoin.

Adam



From adam at cypherspace.org  Tue Oct  1 19:11:43 2013
From: adam at cypherspace.org (Adam Back)
Date: Tue, 1 Oct 2013 21:11:43 +0200
Subject: [Bitcoin-development] homomorphic coin value (validatable but
 encrypted) (Re: smart contracts -- possible use case? yes or no?)
In-Reply-To: <20131001142603.GA9208@netbook.cypherspace.org>
References: <CAKaEYhLvqT6nkbupEEgR1d9dMP4-pA7xQbBqPDbREiDDV7c0rQ@mail.gmail.com>
	<2c70dbfc173749cf4198c591f19a7d33@astutium.com>
	<CAH+ZByHs00+Cpx5bwybgV3G9=CBfHaHKg7AV9ytywKNAjFVM6g@mail.gmail.com>
	<CABsx9T29T+thSeF-xVk+prfeO7ZJQbX=n=tAURqEKQsVtcBpQg@mail.gmail.com>
	<20130929093708.GA16561@netbook.cypherspace.org>
	<5248680C.60404@monetize.io>
	<20131001142603.GA9208@netbook.cypherspace.org>
Message-ID: <20131001191143.GA16116@netbook.cypherspace.org>

Err actually not (efficient) I made a mistake that came out when I started
writing it up about how the t parameter in the proof relates to bitcoin
precision and coin representation (I thought t=2, but t=51).  Damn!  Back to
the not so efficient version (which is more zerocoin-esque in size/cost), or
the more experimental Schoenmaker non-standard p, q non EC one, or other
creative ideas to change the coin representation to simplify the proof (of
which this was a failed attempt).  See the bitcointalk thread for details.

https://bitcointalk.org/index.php?topic=305791.new#new

Adam

On Tue, Oct 01, 2013 at 04:26:03PM +0200, Adam Back wrote:
>On Sun, Sep 29, 2013 at 10:49:00AM -0700, Mark Friedenbach wrote:
>>This kind of thing - providing external audits of customer accounts
>>without revealing private data - would be generally useful beyond
>>taxation. If you have any solutions, I'd be interested to hear them
>>(although bitcoin-dev is probably not the right place yet).
>
>Thanks for providing the impetus to write down the current state, the
>efficient version of which I only figured out a few days ago :)
>
>I have been researching this for a few months on and off, because it seems
>like an interesting construct in its own right, a different aspect of
>payment privacy (eg for auditable but commercial sensistive information) but
>also that other than its direct use it may enable some features that we have
>not thought of yet.
>
>I moved it to bitcointalk:
>
>https://bitcointalk.org/index.php?topic=305791.new#new
>
>Its efficient finally (after many dead ends): approximately 2x cost of
>current in terms of coin size and coin verification cost, however it also
>gives some perf advantages back in a different way - necessary changes to
>schnorr (EC version of Schnorr based proofs) allow n of n multiparty sigs,
>or k of n multiparty sigs for the verification cost and signature size of
>one pair of ECS signatures, for n > 2 its a space and efficiency improvement
>over current bitcoin.
>
>Adam



From olivier at trillion01.com  Wed Oct  2 03:20:53 2013
From: olivier at trillion01.com (Olivier Langlois)
Date: Tue, 01 Oct 2013 23:20:53 -0400
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAJHLa0PucKk_OBQarRgVBRPyC+RbvT9GC1iYqAaBjyT2qyRFdw@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<1380600219.932.21.camel@Wailaba2> <1380611418.932.31.camel@Wailaba2>
	<CAJHLa0PucKk_OBQarRgVBRPyC+RbvT9GC1iYqAaBjyT2qyRFdw@mail.gmail.com>
Message-ID: <1380684053.932.43.camel@Wailaba2>


On Tue, 2013-10-01 at 16:17 +0200, Jeff Garzik wrote:
> Olivier,
> 
> What network activity was going on, during this test?  i.e. during the
> call with 5.99 locktime, was bitcoind processing a block or sending a
> large transaction?  There are plenty of valid reasons -- sadly -- that
> the locks are held for a long time, during random network events.
> 
Jeff,

In your opinion what would be then a reasonable to value for a rpc client? From what you say, 2 seconds is apparently not enough.

For your question, unfortunately or fortunately, not much. The only thing that strike out is that CTxMemPool::accept() seems to be called while the rpc thread is between 
jreq.parse() and tableRPC.execute().

Here are the logs surrounding
the 5.99 sec lock wait.

1380610602.706628 : RPC connection closed
Added 1 addresses from 85.202.231.133: 2633 tried, 12769 new
CTxMemPool::accept() : accepted 6191dee582c1c19fd76d6f06a4c594ee1577dbb54b688c5dcc676ebfbc225cda (poolsz 1262)
Added 1 addresses from 217.73.163.131: 2633 tried, 12769 new
CTxMemPool::accept() : accepted 7a482a24d2588a66c6561da6ee29b5adff4e8ba72e58fb360a2c36cd78be3a71 (poolsz 1263)
Added 1 addresses from 24.211.152.165: 2633 tried, 12770 new
received getdata for: tx 3849ab1481c9d8c283e682f2ef8421a8cf01ef228a89d0daf2d5e888e04f45e4
CTxMemPool::accept() : accepted cf34b31f26d3275b66adf081f84fca2d761e8e260b42243ba36638368c1633b1 (poolsz 1264)
CTxMemPool::accept() : accepted 61fc517d9461b79bab972593fbaf8b0be8ed0222c232b2c51eea2a781a44efef (poolsz 1265)
CTxMemPool::accept() : accepted 4a42913c0b956f27cfc72ed44605ef8654ff8720b81e6ef1c7dfab8e300ee9d9 (poolsz 1266)
CTxMemPool::accept() : accepted cec545fca0b4ad6efa44159758dd18b2e3047a1f1783812256a11aba96c32792 (poolsz 1267)
CTxMemPool::accept() : accepted 1ad7ff07ed4b8299af0f5ce61b721f20d984225a4a963174f51d329587eef2e9 (poolsz 1268)
CTxMemPool::accept() : accepted 12f6a6e453f34db7165983def2ecdfef174917194aa1b8f4c4883b02595c043c (poolsz 1269)
CTxMemPool::accept() : accepted 69942aebbf3d3e6b781e56553f0b1e021e07fe1c4d922b221cadabb7eb84abb7 (poolsz 1270)
CTxMemPool::accept() : accepted d7d95a6fc61209c8dbdf4b17a058f4f9c7fa6d6e76b36ca4cf8bb67f288ef3cc (poolsz 1271)
CTxMemPool::accept() : accepted da6c8145c9f506ec0f146b37d57ef423098b584af8dbed9490002ed900228c27 (poolsz 1272)
CTxMemPool::accept() : accepted 46debd7df211ea26060db539a909d7908f1f6fcca8103897909280ab156b8872 (poolsz 1273)
CTxMemPool::accept() : accepted 30f47bae4e485e1129e0598f2264469a4f9186d9a7988debfe7e21f283975c9f (poolsz 1274)
CTxMemPool::accept() : accepted 80848aebe10afda234c42db1ae3a013f873af54906d966afcb42547501d899c4 (poolsz 1275)
CTxMemPool::accept() : accepted faaf9a2b57e80460293f3d53115fc8795bb1357d0ae6400710bc8a6610312b81 (poolsz 1276)
CTxMemPool::accept() : accepted 44f5fc39cde3b35d32f20f8246001f946c9fdc1297ea21fd7400c0c483aceca2 (poolsz 1277)
CTxMemPool::accept() : accepted d92a8389cfa6a8ea98a8103a138f45e56cf229d9b35bd46ac319167d17409edd (poolsz 1278)
CTxMemPool::accept() : accepted 557e88dfed0d2e9cd3c8c1af2eb497ea5c0a888af7417f7b816390af1dd4f38a (poolsz 1279)
CTxMemPool::accept() : accepted 037b48b12209b046bed88806bf5a92e3cc45cc2e30af895b5536fd8ef2ae865f (poolsz 1280)
received getdata for: tx 1ad7ff07ed4b8299af0f5ce61b721f20d984225a4a963174f51d329587eef2e9
CTxMemPool::accept() : accepted cf8149016e4c25b0408a70dbb8f7bc596331de6840b9a3115a6aa5445cc2b3fe (poolsz 1281)
received getdata for: tx 12f6a6e453f34db7165983def2ecdfef174917194aa1b8f4c4883b02595c043c
received getdata for: tx 61fc517d9461b79bab972593fbaf8b0be8ed0222c232b2c51eea2a781a44efef
CTxMemPool::accept() : accepted 890b41943b2cda0b9d7e34ddfcddb490582165c0cedd8fca09df6eec37ad768d (poolsz 1282)
1380610633.387730: POST / HTTP/1.1^M
ThreadRPCServer method=getinfo
CTxMemPool::accept() : accepted dc2941dd69b2f9fa2754f741dfba76489abef706bd237e3bd715181950723e4d (poolsz 1283)
keypool reserve 15
keypool return 15
locktime : 5.996820 calltime : 0.000328 totaltime : 5.997148






From rdwnj at yahoo.com  Thu Oct  3 03:16:03 2013
From: rdwnj at yahoo.com (Ron)
Date: Wed, 2 Oct 2013 20:16:03 -0700 (PDT)
Subject: [Bitcoin-development] on CDB::Rewrite()
Message-ID: <1380770163.7534.YahooMailNeo@web124502.mail.ne1.yahoo.com>

I only bring this up here since I can't raise https://bitcointalk.org? Perhaps it runs on the silk road servers:)

Upon looking at the 0.8.5 & earlier code for CDB:Rewrite(), in the files db.h and db.cpp, you will notice that in db.h it is declared bool static, but in db.cpp it isn't. Is this a problem? Or a feature? Or nothing at all?


Furthermore, it is called only in wallet.cpp -->CWallet::EncryptWallet() but its return value is ignored? Again, intentional or a bug or a feature or a ...?
Now CWallet::EncryptWallet() is called by AskPassphraseDialog::accept() and WalletModel::setWalletEncrypted()and they seem very interested in what? CWallet::EncryptWallet() returns. Could this be involved in some old issue with wallet encryption on bitcoin-qt 0.8.1?

There seems to be plenty of this kind of "suspicious" code to ferret about in, with one's IDE during quiet moments. Amusing is to follow return 0 and return 1 to try and infer their meaning, their intent?


Ron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131002/ad22c996/attachment.html>

From lidstrom83 at gmail.com  Thu Oct  3 09:35:30 2013
From: lidstrom83 at gmail.com (Daniel Lidstrom)
Date: Thu, 3 Oct 2013 03:35:30 -0600
Subject: [Bitcoin-development] Identity protocol observation
Message-ID: <CADjHg8Hh7Vm+CJpZH1-=0FsAxup7z42i2es-j2AW27OMt_SKTw@mail.gmail.com>

The location of a tx in the blockchain can be encoded in n=log2(h)+log2(t)
bits, where h is the block height, and t is the number of transactions in
the block.  Currently h~250,000 and t~500, so n~27.  A CVC phoneme encodes
~10.7 bits *, so a transaction today can be located in the blockchain with
3 of these, e.g. reb-mizvig.  This is reasonably short, readable and
memorable.

The identity protocol Jeff Garzik is working on will link a public key
fingerprint to a miner sacrifice transaction.  This tx could in turn be
uniquely described with a short name as above.  Associating this name with
the public key becomes secure once the tx is sufficiently buried in the
blockchain.  In the identity protocol, lightweight clients check the
validity of a sacrifice tx by checking that its merkle path is valid.  But
this path encodes, via the ordering of the hashes at each level, the
location of the transaction in the block, so the lightweight client can
verify the sacrifice tx's short name using only the information he already
has.

Some more random names:
vec-halhic
wom-vizpyd
guv-zussof
jog-copwug
seg-rizges
jyg-somgod
pax-synjem
zyg-zuxdyj
gid-mutdyj
rel-hyrdaj

Sources of inspiration:
urbit.org
https://en.bitcoin.it/wiki/Identity_protocol_v1

* This is somewhat restricted: I disallowed q for obvious reasons and k
because it conflicts with c, and c looks much softer and less like
Klingon.  H is allowed for the first consonant, but not the second, and x
is allowed for the last one, but not the first one.  Y is a vowel, but not
a consonant.  Maybe these weren't quite the right choices.  Paint away!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/d22dc584/attachment.html>

From lidstrom83 at gmail.com  Thu Oct  3 13:35:32 2013
From: lidstrom83 at gmail.com (Daniel Lidstrom)
Date: Thu, 3 Oct 2013 07:35:32 -0600
Subject: [Bitcoin-development] Identity protocol observation
In-Reply-To: <CADjHg8Hh7Vm+CJpZH1-=0FsAxup7z42i2es-j2AW27OMt_SKTw@mail.gmail.com>
References: <CADjHg8Hh7Vm+CJpZH1-=0FsAxup7z42i2es-j2AW27OMt_SKTw@mail.gmail.com>
Message-ID: <CADjHg8GDqAFsmO-yNSPpgcvm4uRfwz4z7u-gm8Ur7ScuB=6joA@mail.gmail.com>

A couple more thoughts on this:

1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits per
phoneme.
2) An extra phoneme (4 encode 43 bits total) gives room to put extra
information into the name, e.g. the first 5 bits could be input as the key
to a PRP that permutes the last 38 back to a standard encoding of a tx
location.  This would give the user 32 random names per sacrifice to choose
from, and 38 bits to encode its location in the blockchain, which is enough
for pretty large blocks.

Sample 4 phoneme names:
~milmoz-vyrnyx
~mypnoz-fojzas
~sawfex-bovlec
~fidhut-guvgis
~bobfej-jessuk
~furcos-diwhuw
~wokryx-wilrox
~bygbyl-caggos
~vewcyv-jyjsal
~daxsaf-cywkul

They're not that bad IMHO, especially if you get to pick a decent one from
a bunch.


On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:

> The location of a tx in the blockchain can be encoded in n=log2(h)+log2(t)
> bits, where h is the block height, and t is the number of transactions in
> the block.  Currently h~250,000 and t~500, so n~27.  A CVC phoneme encodes
> ~10.7 bits *, so a transaction today can be located in the blockchain with
> 3 of these, e.g. reb-mizvig.  This is reasonably short, readable and
> memorable.
>
> The identity protocol Jeff Garzik is working on will link a public key
> fingerprint to a miner sacrifice transaction.  This tx could in turn be
> uniquely described with a short name as above.  Associating this name with
> the public key becomes secure once the tx is sufficiently buried in the
> blockchain.  In the identity protocol, lightweight clients check the
> validity of a sacrifice tx by checking that its merkle path is valid.  But
> this path encodes, via the ordering of the hashes at each level, the
> location of the transaction in the block, so the lightweight client can
> verify the sacrifice tx's short name using only the information he already
> has.
>
> Some more random names:
> vec-halhic
> wom-vizpyd
> guv-zussof
> jog-copwug
> seg-rizges
> jyg-somgod
> pax-synjem
> zyg-zuxdyj
> gid-mutdyj
> rel-hyrdaj
>
> Sources of inspiration:
> urbit.org
> https://en.bitcoin.it/wiki/Identity_protocol_v1
>
> * This is somewhat restricted: I disallowed q for obvious reasons and k
> because it conflicts with c, and c looks much softer and less like
> Klingon.  H is allowed for the first consonant, but not the second, and x
> is allowed for the last one, but not the first one.  Y is a vowel, but not
> a consonant.  Maybe these weren't quite the right choices.  Paint away!
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/cb5995fb/attachment.html>

From mike at plan99.net  Thu Oct  3 14:00:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 3 Oct 2013 16:00:16 +0200
Subject: [Bitcoin-development] Identity protocol observation
In-Reply-To: <CADjHg8GDqAFsmO-yNSPpgcvm4uRfwz4z7u-gm8Ur7ScuB=6joA@mail.gmail.com>
References: <CADjHg8Hh7Vm+CJpZH1-=0FsAxup7z42i2es-j2AW27OMt_SKTw@mail.gmail.com>
	<CADjHg8GDqAFsmO-yNSPpgcvm4uRfwz4z7u-gm8Ur7ScuB=6joA@mail.gmail.com>
Message-ID: <CANEZrP3NekFg-czGGnEiyomCigMcY=beg-+X61_LLg9kqAPy-w@mail.gmail.com>

Interesting observation, thanks.

I'd think any competent implementation of such an identity scheme would not
involve end users directly handling randomized nonsense words, however. I
always imagined a sacrifice as being a file that you make with a GUI tool
and load into a browser extension.


On Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:

> A couple more thoughts on this:
>
> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits per
> phoneme.
> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra
> information into the name, e.g. the first 5 bits could be input as the key
> to a PRP that permutes the last 38 back to a standard encoding of a tx
> location.  This would give the user 32 random names per sacrifice to choose
> from, and 38 bits to encode its location in the blockchain, which is enough
> for pretty large blocks.
>
> Sample 4 phoneme names:
> ~milmoz-vyrnyx
> ~mypnoz-fojzas
> ~sawfex-bovlec
> ~fidhut-guvgis
> ~bobfej-jessuk
> ~furcos-diwhuw
> ~wokryx-wilrox
> ~bygbyl-caggos
> ~vewcyv-jyjsal
> ~daxsaf-cywkul
>
> They're not that bad IMHO, especially if you get to pick a decent one from
> a bunch.
>
>
> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>
>> The location of a tx in the blockchain can be encoded in
>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of
>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC
>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the
>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,
>> readable and memorable.
>>
>> The identity protocol Jeff Garzik is working on will link a public key
>> fingerprint to a miner sacrifice transaction.  This tx could in turn be
>> uniquely described with a short name as above.  Associating this name with
>> the public key becomes secure once the tx is sufficiently buried in the
>> blockchain.  In the identity protocol, lightweight clients check the
>> validity of a sacrifice tx by checking that its merkle path is valid.  But
>> this path encodes, via the ordering of the hashes at each level, the
>> location of the transaction in the block, so the lightweight client can
>> verify the sacrifice tx's short name using only the information he already
>> has.
>>
>> Some more random names:
>> vec-halhic
>> wom-vizpyd
>> guv-zussof
>> jog-copwug
>> seg-rizges
>> jyg-somgod
>> pax-synjem
>> zyg-zuxdyj
>> gid-mutdyj
>> rel-hyrdaj
>>
>> Sources of inspiration:
>> urbit.org
>> https://en.bitcoin.it/wiki/Identity_protocol_v1
>>
>> * This is somewhat restricted: I disallowed q for obvious reasons and k
>> because it conflicts with c, and c looks much softer and less like
>> Klingon.  H is allowed for the first consonant, but not the second, and x
>> is allowed for the last one, but not the first one.  Y is a vowel, but not
>> a consonant.  Maybe these weren't quite the right choices.  Paint away!
>>
>
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/f5469bbd/attachment.html>

From lidstrom83 at gmail.com  Thu Oct  3 15:16:51 2013
From: lidstrom83 at gmail.com (Daniel Lidstrom)
Date: Thu, 3 Oct 2013 09:16:51 -0600
Subject: [Bitcoin-development] Identity protocol observation
In-Reply-To: <CANEZrP3NekFg-czGGnEiyomCigMcY=beg-+X61_LLg9kqAPy-w@mail.gmail.com>
References: <CADjHg8Hh7Vm+CJpZH1-=0FsAxup7z42i2es-j2AW27OMt_SKTw@mail.gmail.com>
	<CADjHg8GDqAFsmO-yNSPpgcvm4uRfwz4z7u-gm8Ur7ScuB=6joA@mail.gmail.com>
	<CANEZrP3NekFg-czGGnEiyomCigMcY=beg-+X61_LLg9kqAPy-w@mail.gmail.com>
Message-ID: <CADjHg8G8v_oN=CWCVy8agvjP6cAMkACav74SaYRrTGf+c0nVeA@mail.gmail.com>

Fair enough, though people still manage okay with phone numbers.  And a
decentralized naming system seems to come at great cost - with namecoin you
need the whole blockchain to resolve names without trust.  Strip out a bell
and whistle - meaningfulness and transferability of names - and you get a
simple, rudimentary (spam killing!) system that scales on any device.  I'll
only argue that it seems to be Good Enough *for the types of people who
might care about decentralized names*.  Probably a very small set :)


On Thu, Oct 3, 2013 at 8:00 AM, Mike Hearn <mike at plan99.net> wrote:

> Interesting observation, thanks.
>
> I'd think any competent implementation of such an identity scheme would
> not involve end users directly handling randomized nonsense words, however.
> I always imagined a sacrifice as being a file that you make with a GUI tool
> and load into a browser extension.
>
>
> On Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>
>> A couple more thoughts on this:
>>
>> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits
>> per phoneme.
>> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra
>> information into the name, e.g. the first 5 bits could be input as the key
>> to a PRP that permutes the last 38 back to a standard encoding of a tx
>> location.  This would give the user 32 random names per sacrifice to choose
>> from, and 38 bits to encode its location in the blockchain, which is enough
>> for pretty large blocks.
>>
>> Sample 4 phoneme names:
>> ~milmoz-vyrnyx
>> ~mypnoz-fojzas
>> ~sawfex-bovlec
>> ~fidhut-guvgis
>> ~bobfej-jessuk
>> ~furcos-diwhuw
>> ~wokryx-wilrox
>> ~bygbyl-caggos
>> ~vewcyv-jyjsal
>> ~daxsaf-cywkul
>>
>> They're not that bad IMHO, especially if you get to pick a decent one
>> from a bunch.
>>
>>
>> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>>
>>> The location of a tx in the blockchain can be encoded in
>>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of
>>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC
>>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the
>>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,
>>> readable and memorable.
>>>
>>> The identity protocol Jeff Garzik is working on will link a public key
>>> fingerprint to a miner sacrifice transaction.  This tx could in turn be
>>> uniquely described with a short name as above.  Associating this name with
>>> the public key becomes secure once the tx is sufficiently buried in the
>>> blockchain.  In the identity protocol, lightweight clients check the
>>> validity of a sacrifice tx by checking that its merkle path is valid.  But
>>> this path encodes, via the ordering of the hashes at each level, the
>>> location of the transaction in the block, so the lightweight client can
>>> verify the sacrifice tx's short name using only the information he already
>>> has.
>>>
>>> Some more random names:
>>> vec-halhic
>>> wom-vizpyd
>>> guv-zussof
>>> jog-copwug
>>> seg-rizges
>>> jyg-somgod
>>> pax-synjem
>>> zyg-zuxdyj
>>> gid-mutdyj
>>> rel-hyrdaj
>>>
>>> Sources of inspiration:
>>> urbit.org
>>> https://en.bitcoin.it/wiki/Identity_protocol_v1
>>>
>>> * This is somewhat restricted: I disallowed q for obvious reasons and k
>>> because it conflicts with c, and c looks much softer and less like
>>> Klingon.  H is allowed for the first consonant, but not the second, and x
>>> is allowed for the last one, but not the first one.  Y is a vowel, but not
>>> a consonant.  Maybe these weren't quite the right choices.  Paint away!
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> October Webinars: Code for Performance
>> Free Intel webinars can help you accelerate application performance.
>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
>> from
>> the latest Intel processors and coprocessors. See abstracts and register >
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/1e734bac/attachment.html>

From mike at plan99.net  Thu Oct  3 15:22:26 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 3 Oct 2013 17:22:26 +0200
Subject: [Bitcoin-development] Identity protocol observation
In-Reply-To: <CADjHg8G8v_oN=CWCVy8agvjP6cAMkACav74SaYRrTGf+c0nVeA@mail.gmail.com>
References: <CADjHg8Hh7Vm+CJpZH1-=0FsAxup7z42i2es-j2AW27OMt_SKTw@mail.gmail.com>
	<CADjHg8GDqAFsmO-yNSPpgcvm4uRfwz4z7u-gm8Ur7ScuB=6joA@mail.gmail.com>
	<CANEZrP3NekFg-czGGnEiyomCigMcY=beg-+X61_LLg9kqAPy-w@mail.gmail.com>
	<CADjHg8G8v_oN=CWCVy8agvjP6cAMkACav74SaYRrTGf+c0nVeA@mail.gmail.com>
Message-ID: <CANEZrP1Eb2DS7LOg_wp-H9y-WaSWKj1x7f4gE7mK7RyusaamyA@mail.gmail.com>

1) Generate sacrifice proof file using an app
2) Load file into browser
3) Surf

Where are the names in that design? I'm not sure where NameCoin comes into
this. The point of a sacrifice is it's an anonymous identity, there's no
point attaching a name to it.

BTW I keep phone numbers in an address book ;)




On Thu, Oct 3, 2013 at 5:16 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:

> Fair enough, though people still manage okay with phone numbers.  And a
> decentralized naming system seems to come at great cost - with namecoin you
> need the whole blockchain to resolve names without trust.  Strip out a bell
> and whistle - meaningfulness and transferability of names - and you get a
> simple, rudimentary (spam killing!) system that scales on any device.  I'll
> only argue that it seems to be Good Enough *for the types of people who
> might care about decentralized names*.  Probably a very small set :)
>
>
> On Thu, Oct 3, 2013 at 8:00 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> Interesting observation, thanks.
>>
>> I'd think any competent implementation of such an identity scheme would
>> not involve end users directly handling randomized nonsense words, however.
>> I always imagined a sacrifice as being a file that you make with a GUI tool
>> and load into a browser extension.
>>
>>
>> On Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>>
>>> A couple more thoughts on this:
>>>
>>> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits
>>> per phoneme.
>>> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra
>>> information into the name, e.g. the first 5 bits could be input as the key
>>> to a PRP that permutes the last 38 back to a standard encoding of a tx
>>> location.  This would give the user 32 random names per sacrifice to choose
>>> from, and 38 bits to encode its location in the blockchain, which is enough
>>> for pretty large blocks.
>>>
>>> Sample 4 phoneme names:
>>> ~milmoz-vyrnyx
>>> ~mypnoz-fojzas
>>> ~sawfex-bovlec
>>> ~fidhut-guvgis
>>> ~bobfej-jessuk
>>> ~furcos-diwhuw
>>> ~wokryx-wilrox
>>> ~bygbyl-caggos
>>> ~vewcyv-jyjsal
>>> ~daxsaf-cywkul
>>>
>>> They're not that bad IMHO, especially if you get to pick a decent one
>>> from a bunch.
>>>
>>>
>>> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>>>
>>>> The location of a tx in the blockchain can be encoded in
>>>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of
>>>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC
>>>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the
>>>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,
>>>> readable and memorable.
>>>>
>>>> The identity protocol Jeff Garzik is working on will link a public key
>>>> fingerprint to a miner sacrifice transaction.  This tx could in turn be
>>>> uniquely described with a short name as above.  Associating this name with
>>>> the public key becomes secure once the tx is sufficiently buried in the
>>>> blockchain.  In the identity protocol, lightweight clients check the
>>>> validity of a sacrifice tx by checking that its merkle path is valid.  But
>>>> this path encodes, via the ordering of the hashes at each level, the
>>>> location of the transaction in the block, so the lightweight client can
>>>> verify the sacrifice tx's short name using only the information he already
>>>> has.
>>>>
>>>> Some more random names:
>>>> vec-halhic
>>>> wom-vizpyd
>>>> guv-zussof
>>>> jog-copwug
>>>> seg-rizges
>>>> jyg-somgod
>>>> pax-synjem
>>>> zyg-zuxdyj
>>>> gid-mutdyj
>>>> rel-hyrdaj
>>>>
>>>> Sources of inspiration:
>>>> urbit.org
>>>> https://en.bitcoin.it/wiki/Identity_protocol_v1
>>>>
>>>> * This is somewhat restricted: I disallowed q for obvious reasons and k
>>>> because it conflicts with c, and c looks much softer and less like
>>>> Klingon.  H is allowed for the first consonant, but not the second, and x
>>>> is allowed for the last one, but not the first one.  Y is a vowel, but not
>>>> a consonant.  Maybe these weren't quite the right choices.  Paint away!
>>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> October Webinars: Code for Performance
>>> Free Intel webinars can help you accelerate application performance.
>>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
>>> from
>>> the latest Intel processors and coprocessors. See abstracts and register
>>> >
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/29632bb4/attachment.html>

From lidstrom83 at gmail.com  Thu Oct  3 16:16:27 2013
From: lidstrom83 at gmail.com (Daniel Lidstrom)
Date: Thu, 3 Oct 2013 10:16:27 -0600
Subject: [Bitcoin-development] Identity protocol observation
In-Reply-To: <CANEZrP1Eb2DS7LOg_wp-H9y-WaSWKj1x7f4gE7mK7RyusaamyA@mail.gmail.com>
References: <CADjHg8Hh7Vm+CJpZH1-=0FsAxup7z42i2es-j2AW27OMt_SKTw@mail.gmail.com>
	<CADjHg8GDqAFsmO-yNSPpgcvm4uRfwz4z7u-gm8Ur7ScuB=6joA@mail.gmail.com>
	<CANEZrP3NekFg-czGGnEiyomCigMcY=beg-+X61_LLg9kqAPy-w@mail.gmail.com>
	<CADjHg8G8v_oN=CWCVy8agvjP6cAMkACav74SaYRrTGf+c0nVeA@mail.gmail.com>
	<CANEZrP1Eb2DS7LOg_wp-H9y-WaSWKj1x7f4gE7mK7RyusaamyA@mail.gmail.com>
Message-ID: <CADjHg8ECzpv8Yqy02eAcOQC0iTY_B2Wf4GOJQqbJfLCYL6Oi+A@mail.gmail.com>

Names clearly solve a different problem than that, but we still use them,
so they must be solving _some_ problem :p  In this case they're a unique
identifier humans can remember after a bit of use and easily communicate to
each other with little room for error.  Securely mapping them to public
keys would make key verification simpler.  Simpler than checking a much
larger key fingerprint, at least.  Like I said, it's probably a niche
product ;)

I used to remember dozens of phone numbers before my phone did it for me,
but maybe I was just weird.


On Thu, Oct 3, 2013 at 9:22 AM, Mike Hearn <mike at plan99.net> wrote:

> 1) Generate sacrifice proof file using an app
> 2) Load file into browser
> 3) Surf
>
> Where are the names in that design? I'm not sure where NameCoin comes into
> this. The point of a sacrifice is it's an anonymous identity, there's no
> point attaching a name to it.
>
> BTW I keep phone numbers in an address book ;)
>
>
>
>
> On Thu, Oct 3, 2013 at 5:16 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>
>> Fair enough, though people still manage okay with phone numbers.  And a
>> decentralized naming system seems to come at great cost - with namecoin you
>> need the whole blockchain to resolve names without trust.  Strip out a bell
>> and whistle - meaningfulness and transferability of names - and you get a
>> simple, rudimentary (spam killing!) system that scales on any device.  I'll
>> only argue that it seems to be Good Enough *for the types of people who
>> might care about decentralized names*.  Probably a very small set :)
>>
>>
>> On Thu, Oct 3, 2013 at 8:00 AM, Mike Hearn <mike at plan99.net> wrote:
>>
>>> Interesting observation, thanks.
>>>
>>> I'd think any competent implementation of such an identity scheme would
>>> not involve end users directly handling randomized nonsense words, however.
>>> I always imagined a sacrifice as being a file that you make with a GUI tool
>>> and load into a browser extension.
>>>
>>>
>>> On Thu, Oct 3, 2013 at 3:35 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>>>
>>>> A couple more thoughts on this:
>>>>
>>>> 1) Both c and k can be kept if c is pronounced 'ch', giving ~10.9 bits
>>>> per phoneme.
>>>> 2) An extra phoneme (4 encode 43 bits total) gives room to put extra
>>>> information into the name, e.g. the first 5 bits could be input as the key
>>>> to a PRP that permutes the last 38 back to a standard encoding of a tx
>>>> location.  This would give the user 32 random names per sacrifice to choose
>>>> from, and 38 bits to encode its location in the blockchain, which is enough
>>>> for pretty large blocks.
>>>>
>>>> Sample 4 phoneme names:
>>>> ~milmoz-vyrnyx
>>>> ~mypnoz-fojzas
>>>> ~sawfex-bovlec
>>>> ~fidhut-guvgis
>>>> ~bobfej-jessuk
>>>> ~furcos-diwhuw
>>>> ~wokryx-wilrox
>>>> ~bygbyl-caggos
>>>> ~vewcyv-jyjsal
>>>> ~daxsaf-cywkul
>>>>
>>>> They're not that bad IMHO, especially if you get to pick a decent one
>>>> from a bunch.
>>>>
>>>>
>>>> On Thu, Oct 3, 2013 at 3:35 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:
>>>>
>>>>> The location of a tx in the blockchain can be encoded in
>>>>> n=log2(h)+log2(t) bits, where h is the block height, and t is the number of
>>>>> transactions in the block.  Currently h~250,000 and t~500, so n~27.  A CVC
>>>>> phoneme encodes ~10.7 bits *, so a transaction today can be located in the
>>>>> blockchain with 3 of these, e.g. reb-mizvig.  This is reasonably short,
>>>>> readable and memorable.
>>>>>
>>>>> The identity protocol Jeff Garzik is working on will link a public key
>>>>> fingerprint to a miner sacrifice transaction.  This tx could in turn be
>>>>> uniquely described with a short name as above.  Associating this name with
>>>>> the public key becomes secure once the tx is sufficiently buried in the
>>>>> blockchain.  In the identity protocol, lightweight clients check the
>>>>> validity of a sacrifice tx by checking that its merkle path is valid.  But
>>>>> this path encodes, via the ordering of the hashes at each level, the
>>>>> location of the transaction in the block, so the lightweight client can
>>>>> verify the sacrifice tx's short name using only the information he already
>>>>> has.
>>>>>
>>>>> Some more random names:
>>>>> vec-halhic
>>>>> wom-vizpyd
>>>>> guv-zussof
>>>>> jog-copwug
>>>>> seg-rizges
>>>>> jyg-somgod
>>>>> pax-synjem
>>>>> zyg-zuxdyj
>>>>> gid-mutdyj
>>>>> rel-hyrdaj
>>>>>
>>>>> Sources of inspiration:
>>>>> urbit.org
>>>>> https://en.bitcoin.it/wiki/Identity_protocol_v1
>>>>>
>>>>> * This is somewhat restricted: I disallowed q for obvious reasons and
>>>>> k because it conflicts with c, and c looks much softer and less like
>>>>> Klingon.  H is allowed for the first consonant, but not the second, and x
>>>>> is allowed for the last one, but not the first one.  Y is a vowel, but not
>>>>> a consonant.  Maybe these weren't quite the right choices.  Paint away!
>>>>>
>>>>
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> October Webinars: Code for Performance
>>>> Free Intel webinars can help you accelerate application performance.
>>>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the
>>>> most from
>>>> the latest Intel processors and coprocessors. See abstracts and
>>>> register >
>>>>
>>>> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131003/c437c1d1/attachment.html>

From olivier at trillion01.com  Fri Oct  4 03:52:18 2013
From: olivier at trillion01.com (Olivier Langlois)
Date: Thu, 03 Oct 2013 23:52:18 -0400
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <1380684053.932.43.camel@Wailaba2>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<1380600219.932.21.camel@Wailaba2> <1380611418.932.31.camel@Wailaba2>
	<CAJHLa0PucKk_OBQarRgVBRPyC+RbvT9GC1iYqAaBjyT2qyRFdw@mail.gmail.com>
	<1380684053.932.43.camel@Wailaba2>
Message-ID: <1380858738.932.71.camel@Wailaba2>


> 1380610633.387730: POST / HTTP/1.1^M
> ThreadRPCServer method=getinfo
> CTxMemPool::accept() : accepted dc2941dd69b2f9fa2754f741dfba76489abef706bd237e3bd715181950723e4d (poolsz 1283)
> keypool reserve 15
> keypool return 15
> locktime : 5.996820 calltime : 0.000328 totaltime : 5.997148
> 

I have found another circumstance where getinfo rpc function can take
more than 2 secs to return. Here are the circunstances:

received block 0000000000000013c889fbe1b2a23eb4b6bd38a8051420be1bf319da184f02ae
Committing 1015 changed transactions to coin database...
SetBestChain: new best=0000000000000013c889fbe1b2a23eb4b6bd38a8051420be1bf319da184f02ae  height=261213  log2_work=72.38679  tx=24743665  date=2013-10-02 05:26:49 progress=0.999999

{"method":"getinfo","params":[],"id":783}
ThreadRPCServer method=getinfo
keypool reserve 15
keypool return 15
locktime : 0.000001 calltime : 2.453037 totaltime : 2.453038

This time locking the contention isn't from cs_main, cs_wallet mutex
lock. I think that what happen here is

1. CWallet::SetBestChain is called
2. This trigger ThreadFlushWalletDB that will lock wallet db and flush
it
3. getinfo will have to wait that ThreadFlushWalletDB ends to complete
GetOldestKeyPoolTime().

Just throwing a couple of ideas here. Comments are welcome:

1.

Is closing the db and reopen it the only way to flush the db to disk?
Can it be done asynchonously? I don't know BDB much but probably closing
the DB involves some blocking fsync() call and given that this follow
1015 records writing into the txdb, it takes more time than it should
otherwise to return.

2.

I'm relatively new to bitcoin. I understand that in a recent past
everything was using BDB. Now that only the wallet seems to keep using
it, maybe some options could be removed to make BDB more lightweight.

DB_THREAD:

>From what I see, BDB API access is already well synchronized by
bitcoind. There is no obvious reason to ask BDB API to be thread safe.

DB_INIT_TXN:

Correct me if I'm wrong, but I suspect this subsystem initialization to
be a vestige of when txdb was in BDB.

3.

not sure at all about this one but I'm throwing the idea anyway.
Personnally, I have no used for 'keypoololdest'. I might experiment
without it

How about having an optional bool param to 'getinfo' that could have the
name 'lowlatency' or 'nodb' to skip info gathering having the potential
to make the call longer?





From gavinandresen at gmail.com  Fri Oct  4 06:22:34 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 4 Oct 2013 16:22:34 +1000
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CAJna-Hj1c0k3Gb7rEMBeU9nQsFophU2CYzGUOEo3JxieOYA5dA@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<CAJHLa0MHSjZ_mwsCKa=rd1_39H0yq9j2jVwr0qWFTxTtrWXPCQ@mail.gmail.com>
	<CAJna-Hj1c0k3Gb7rEMBeU9nQsFophU2CYzGUOEo3JxieOYA5dA@mail.gmail.com>
Message-ID: <CABsx9T2OvOs9ijj8kk4ZdBT5u-2Bb3rYG0AZtk3FFDWi+H_oHw@mail.gmail.com>

On Tue, Oct 1, 2013 at 6:58 PM, slush <slush at centrum.cz> wrote:

> One process is asking getinfo every second as a fallback to possibly
> misconfigured blocknotify. It also calls getblocktemplate every 30 second.
>

getinfo does a bunch of stuff; with 0.9 you will be able to use
getbestblockhash instead.



> Second process is calling getinfo once a minute to check if bitcoind is
> working. If it don't receive a response in a minute, it kills bitcoind and
> starts it again.
>

If you just want to see if bitcoind is responding to RPC requests, then
'help getinfo' would do the trick without acquiring any locks.

RE: running into the maximum-of-4-keepalive-requests : simple workaround is
to run with -rpcthreads=11 (or however many keepalive connections you need
to support).  I agree that the rpc code should be smarter; making the last
rpc thread ignore keepalive and always disconnecting should be a fairly
simple patch, and "patches welcome."

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/3bf174f2/attachment.html>

From olivier at trillion01.com  Fri Oct  4 03:23:49 2013
From: olivier at trillion01.com (Olivier Langlois)
Date: Thu, 03 Oct 2013 23:23:49 -0400
Subject: [Bitcoin-development] on CDB::Rewrite()
In-Reply-To: <1380770163.7534.YahooMailNeo@web124502.mail.ne1.yahoo.com>
References: <1380770163.7534.YahooMailNeo@web124502.mail.ne1.yahoo.com>
Message-ID: <1380857029.932.49.camel@Wailaba2>


> Upon looking at the 0.8.5 & earlier code for CDB:Rewrite(), in the
> files db.h and db.cpp, you will notice that in db.h it is declared
> bool static, but in db.cpp it isn't. Is this a problem? Or a feature?
> Or nothing at all?

It is perfect C++ code.

> Furthermore, it is called only in wallet.cpp
> -->CWallet::EncryptWallet() but its return value is ignored? Again,
> intentional or a bug or a feature or a ...?

possibly a minor bug. Minor because over 99% of the time it is called, the Rewrite() function will succeed.

Maybe CWallet::EncryptWallet() should return false to its callers when
CDB::Rewrite fails.






From mike at plan99.net  Fri Oct  4 10:30:07 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 4 Oct 2013 12:30:07 +0200
Subject: [Bitcoin-development] Code review
Message-ID: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>

Git makes it easy to fork peoples work off and create long series of
commits that achieve some useful goal. That's great for many things.
Unfortunately, code review is not one of those things.

I'd like to make a small request - when submitting large, complex pieces of
work for review, please either submit it as one giant squashed change, or
be an absolute fascist about keeping commits logically clean and separated.
It really sucks to review things in sequence and then discover that some
code you spent some time thinking about or puzzling out got
deleted/rewritten/changed in a later commit. It also can make it harder to
review things when later code uses new APIs or behaviour changes introduced
in earlier commits - you have to either keep it all in your head, do lots
of tab switching, or do a squash yourself (in which case every reviewer
would have to manually do that).

On a related note, github seems to have lost the plot with regards to code
review - they are spending their time adding 3D renderers to their diff
viewer but not making basic improvements other tools had for years.

So, I'd like to suggest the idea of using Review Board:

http://www.reviewboard.org/

It's an open source, dedicated code review tool used by lots of big name
companies for their internal work. It has git[hub] integration and a lot of
very neat features, like the ability to attach screenshots to reviews. Also
more basic ones, like side by side diffs. Branches can be and often are
submitted to the system as single reviews.

The company behind it (disclosure - written and run by a long time friend
of mine) offers hosting plans, but we could also host it on a Foundation
server instead.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/a56abe3c/attachment.html>

From andyparkins at gmail.com  Fri Oct  4 10:42:29 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 04 Oct 2013 11:42:29 +0100
Subject: [Bitcoin-development] Code review
In-Reply-To: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
Message-ID: <3552695.aET6a1zFq8@momentum>

On Friday 04 October 2013 12:30:07 Mike Hearn wrote:
> Git makes it easy to fork peoples work off and create long series of
> commits that achieve some useful goal. That's great for many things.
> Unfortunately, code review is not one of those things.
> 
> I'd like to make a small request - when submitting large, complex pieces of
> work for review, please either submit it as one giant squashed change, or

Don't do this.  It throws away all of the good stuff that git lets you record.  
There is more to a git branch than just the overall difference.  Every single 
log message and diff is individually valuable.  It's easy to make a squashed 
diff from many little commits; it's impossible to go the other way.

Command line for you so you don't have to think about it:

  git diff $(git merge-base master feature-branch) feature-branch 

git-merge-base finds the common ancestor between master and feature-branch, 
and then compares feature-branch against that.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com




From mike at plan99.net  Fri Oct  4 11:32:47 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 4 Oct 2013 13:32:47 +0200
Subject: [Bitcoin-development] Code review
In-Reply-To: <3552695.aET6a1zFq8@momentum>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<3552695.aET6a1zFq8@momentum>
Message-ID: <CANEZrP1-4vP10w6_Yg3tXAKcMh406rw2bsAnvML2WoaU5SUjYw@mail.gmail.com>

> There is more to a git branch than just the overall difference.  Every
> single
> log message and diff is individually valuable.


When the log messages don't accurately describe the contents of the diff,
it's just misinformation and noise. Everyone starts out by wanting a neat
collection of easy to understand and review commits, but in practice it's
extremely hard to always get it.

I know how to make squashed commits, thanks. I've done LOTS of code review
in my life. I'm making a point here as one of the few people who goes
through large pull requests and reviews them line by line. It's hard,
partly because github sucks, and partly because reviewing lots of small
commits sucks.

There's nothing that makes a single large commit harder to review. It's the
same amount of code or strictly less, given the tendency for later commits
to change earlier ones. You can easily search the entire change whilst
reviewing. There are lots of things that make it easier.

FWIW inside Google the code review process is one-commit-one-review.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/c73d3928/attachment.html>

From pete at petertodd.org  Fri Oct  4 11:35:17 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 4 Oct 2013 07:35:17 -0400
Subject: [Bitcoin-development] Code review
In-Reply-To: <3552695.aET6a1zFq8@momentum>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<3552695.aET6a1zFq8@momentum>
Message-ID: <20131004113517.GA8373@savin>

On Fri, Oct 04, 2013 at 11:42:29AM +0100, Andy Parkins wrote:
> On Friday 04 October 2013 12:30:07 Mike Hearn wrote:
> > Git makes it easy to fork peoples work off and create long series of
> > commits that achieve some useful goal. That's great for many things.
> > Unfortunately, code review is not one of those things.
> > 
> > I'd like to make a small request - when submitting large, complex pieces of
> > work for review, please either submit it as one giant squashed change, or
> 
> Don't do this.  It throws away all of the good stuff that git lets you record.  
> There is more to a git branch than just the overall difference.  Every single 
> log message and diff is individually valuable.  It's easy to make a squashed 
> diff from many little commits; it's impossible to go the other way.
> 
> Command line for you so you don't have to think about it:
> 
>   git diff $(git merge-base master feature-branch) feature-branch 
> 
> git-merge-base finds the common ancestor between master and feature-branch, 
> and then compares feature-branch against that.

Git is a revision *communication* system that happens to also make for a
good revision *control* system.

Remember that every individual commit is two things: what source code
has changed, and a message explaining why you thought that change should
be made. Commits aren't valuable in of themselves, they're valuable
because they serve to explain to the other people you are working with
why you thought a change should be made. Sometimes it makes sense to
explain your changes in 10 commits, sometimes it makes sense to squash
them all up into one commit, but there's no hard and fast rule other
than "Put yourself in your fellow coders' shoes - what's the best way to
explain to them what you are trying to accomplish and why?" You may have
generated a lot of little commits in the process of creating your patch
that tell a story that no-one else cares about, or equally by squashing
everything into one big commit you wind up with a tonne of changes with
little explanation as to why they were made.

Two caveats apply however: git-bisect works best if every commit in the
tree you are trying to debug works well enough that you can run tests
without errors - that is you don't "break the build". Don't make commits
that don't compile at the very least, and preferably everything you do
should be refactored to the point where the commit as a whole "works".

The second caveat is more specific to Bitcoin: people tend to rebase
their pull-requests over and over again until they are accepted, but
that also means that code review done earlier doesn't apply to the later
code pushed. Bitcoin is a particularly high profile, and high profit,
target for people trying to get malicious code into the codebase. It may
be the case that we would be better off asking reviewers making small
changes to their pull-requests to add additional commits for those
changes rather than rebasing, to make it clear what changes were
actually made so that code reviewers don't have to review the whole
patch from scratch. After all, the place where the most eyes will
actually look at the commits is during the pull-req process; after the
code has been pulled the audience for those commits is in most cases
almost no-one.

Having said that, there's currently a lot of other holes in the review
and source code integrity process, so fixing this problem is probably
not the low-hanging fruit right now.


FWIW personally I tend to review patches by both looking at the
individual commits to try to understand why someone wanted to make a
change, as well as all commits merged into one diff for a "what actually
changed here?" review.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/3e8761c7/attachment.sig>

From pete at petertodd.org  Fri Oct  4 11:53:00 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 4 Oct 2013 07:53:00 -0400
Subject: [Bitcoin-development] Code review
In-Reply-To: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
Message-ID: <20131004115300.GA22215@savin>

On Fri, Oct 04, 2013 at 12:30:07PM +0200, Mike Hearn wrote:
> Git makes it easy to fork peoples work off and create long series of
> commits that achieve some useful goal. That's great for many things.
> Unfortunately, code review is not one of those things.
> 
> I'd like to make a small request - when submitting large, complex pieces of
> work for review, please either submit it as one giant squashed change, or
> be an absolute fascist about keeping commits logically clean and separated.
> It really sucks to review things in sequence and then discover that some
> code you spent some time thinking about or puzzling out got
> deleted/rewritten/changed in a later commit. It also can make it harder to
> review things when later code uses new APIs or behaviour changes introduced
> in earlier commits - you have to either keep it all in your head, do lots
> of tab switching, or do a squash yourself (in which case every reviewer
> would have to manually do that).

When I'm reviewing multiple commit pull-requests and want to see every
change made, I always either click on the "Files Changed" tab on github,
which collapses every commit into a single diff, or do the equivalent
with git log.

Why doesn't that work for you?

> On a related note, github seems to have lost the plot with regards to code
> review - they are spending their time adding 3D renderers to their diff
> viewer but not making basic improvements other tools had for years.
> 
> So, I'd like to suggest the idea of using Review Board:
> 
> http://www.reviewboard.org/
> 
> It's an open source, dedicated code review tool used by lots of big name
> companies for their internal work. It has git[hub] integration and a lot of
> very neat features, like the ability to attach screenshots to reviews. Also
> more basic ones, like side by side diffs. Branches can be and often are
> submitted to the system as single reviews.
> 
> The company behind it (disclosure - written and run by a long time friend
> of mine) offers hosting plans, but we could also host it on a Foundation
> server instead.

One advantage of using github is that they're an independent third
party; we should think carefully about the risks of furthering the
impression that Bitcoin development is a closed process by moving the
code review it to a server that we control with explicit review groups.

Given that Review Board appears to remain cryptographically unverifiable
there may also be disadvantages in operating it ourselves in that if the
review server does get compromised we *don't* have a third-party to
blame. In addition GitHub is a third-party with a very valuable
reputation to uphold and full-time staff - they're doing a better job of
keeping their servers secure and running then we ever could.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/c9917a7d/attachment.sig>

From pete at petertodd.org  Fri Oct  4 12:14:15 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 4 Oct 2013 08:14:15 -0400
Subject: [Bitcoin-development] Code review
In-Reply-To: <CAE7aNuS00t97g8K-sPJv4Xt+zWbWbDEjfkza8oBq4c5RjfRP1Q@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<3552695.aET6a1zFq8@momentum> <20131004113517.GA8373@savin>
	<CAE7aNuS00t97g8K-sPJv4Xt+zWbWbDEjfkza8oBq4c5RjfRP1Q@mail.gmail.com>
Message-ID: <20131004121415.GA7084@savin>

On Fri, Oct 04, 2013 at 01:58:51PM +0200, Arto Bendiken wrote:
> On Fri, Oct 4, 2013 at 1:35 PM, Peter Todd <pete at petertodd.org> wrote:
> > The second caveat is more specific to Bitcoin: people tend to rebase
> > their pull-requests over and over again until they are accepted, but
> > that also means that code review done earlier doesn't apply to the later
> > code pushed. Bitcoin is a particularly high profile, and high profit,
> > target for people trying to get malicious code into the codebase.
> 
> On that note, this 2003 example of an attempt to backdoor the Linux
> kernel is pertinent:
> 
> http://lwn.net/Articles/57135/
> 
> The backdoor in question came down to a single missing character,
> easily overlooked by a reviewer if a spotlight hadn't been thrown on
> it for other reasons. Compromising a Bitcoin implementation isn't
> going to be as easy as that, one would hope, but certainly it seems
> only a matter of time until there's an attempt at it.

Exactly.

Ideally code review discussions would be PGP signed and have a mechanism
for someone to sign a commit saying they had in fact reviewed it.
Combined with git's per-commit signature mechanism it'd make it possible
to write a git-pull hook that checked that whatever was being pulled had
some sufficient number of signatures from people whose reviews you
trusted. With such a system you could host code review anywhere safely,
or for that matter, use a completely distributed system.

But that's going to be a long way off. In the meantime github is
probably more trustworthy and competent than anything we ran ourselves,
and we should focus on making sure reviewers eyeballs actually look at
the code that ends up in master.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/4ac17bb4/attachment.sig>

From mike at plan99.net  Fri Oct  4 12:14:19 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 4 Oct 2013 14:14:19 +0200
Subject: [Bitcoin-development] Code review
In-Reply-To: <20131004115300.GA22215@savin>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<20131004115300.GA22215@savin>
Message-ID: <CANEZrP3e4G_XJy4wDc6VeeBfPG3p4dJ4tpcB8PTwMCNn4+=9Yg@mail.gmail.com>

On Fri, Oct 4, 2013 at 1:53 PM, Peter Todd <pete at petertodd.org> wrote:

> When I'm reviewing multiple commit pull-requests and want to see every
> change made, I always either click on the "Files Changed" tab on github,
> which collapses every commit into a single diff, or do the equivalent
> with git log.
>
> Why doesn't that work for you?
>

The files changed tab definitely works better for reading. In the past
comments I put there have disappeared, but I think that can also be true of
comments put on the individual commit reviews (which is another issue with
github, but it's unrelated to how the commits are presented). So I have
lost trust in doing reviews that way. It does make things easier to read
though.

One advantage of using github is that they're an independent third
> party; we should think carefully about the risks of furthering the
> impression that Bitcoin development is a closed process by moving the
> code review it to a server that we control with explicit review groups.
>

I guess anyone would be able to sign up and comment.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/8804a6e6/attachment.html>

From eugen at leitl.org  Fri Oct  4 12:22:32 2013
From: eugen at leitl.org (Eugen Leitl)
Date: Fri, 4 Oct 2013 14:22:32 +0200
Subject: [Bitcoin-development] Code review
In-Reply-To: <CANEZrP3e4G_XJy4wDc6VeeBfPG3p4dJ4tpcB8PTwMCNn4+=9Yg@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<20131004115300.GA22215@savin>
	<CANEZrP3e4G_XJy4wDc6VeeBfPG3p4dJ4tpcB8PTwMCNn4+=9Yg@mail.gmail.com>
Message-ID: <20131004122232.GL10405@leitl.org>

On Fri, Oct 04, 2013 at 02:14:19PM +0200, Mike Hearn wrote:

> One advantage of using github is that they're an independent third
> > party; we should think carefully about the risks of furthering the
> > impression that Bitcoin development is a closed process by moving the
> > code review it to a server that we control with explicit review groups.
> >
> 
> I guess anyone would be able to sign up and comment.

It's a long shot, but have any of you looked into Fossil?



From arto at bendiken.net  Fri Oct  4 11:58:51 2013
From: arto at bendiken.net (Arto Bendiken)
Date: Fri, 4 Oct 2013 13:58:51 +0200
Subject: [Bitcoin-development] Code review
In-Reply-To: <20131004113517.GA8373@savin>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<3552695.aET6a1zFq8@momentum> <20131004113517.GA8373@savin>
Message-ID: <CAE7aNuS00t97g8K-sPJv4Xt+zWbWbDEjfkza8oBq4c5RjfRP1Q@mail.gmail.com>

On Fri, Oct 4, 2013 at 1:35 PM, Peter Todd <pete at petertodd.org> wrote:
> The second caveat is more specific to Bitcoin: people tend to rebase
> their pull-requests over and over again until they are accepted, but
> that also means that code review done earlier doesn't apply to the later
> code pushed. Bitcoin is a particularly high profile, and high profit,
> target for people trying to get malicious code into the codebase.

On that note, this 2003 example of an attempt to backdoor the Linux
kernel is pertinent:

http://lwn.net/Articles/57135/

The backdoor in question came down to a single missing character,
easily overlooked by a reviewer if a spotlight hadn't been thrown on
it for other reasons. Compromising a Bitcoin implementation isn't
going to be as easy as that, one would hope, but certainly it seems
only a matter of time until there's an attempt at it.

Following these code review discussions with much interest.

-- 
Arto Bendiken | @bendiken | http://ar.to/



From andyparkins at gmail.com  Fri Oct  4 12:34:19 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 04 Oct 2013 13:34:19 +0100
Subject: [Bitcoin-development] Code review
In-Reply-To: <CANEZrP1-4vP10w6_Yg3tXAKcMh406rw2bsAnvML2WoaU5SUjYw@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<3552695.aET6a1zFq8@momentum>
	<CANEZrP1-4vP10w6_Yg3tXAKcMh406rw2bsAnvML2WoaU5SUjYw@mail.gmail.com>
Message-ID: <1625158.f2FY7VNCrz@momentum>

On Friday 04 October 2013 13:32:47 you wrote:
> > There is more to a git branch than just the overall difference.  Every
> > single
> > log message and diff is individually valuable.
> 
> When the log messages don't accurately describe the contents of the diff,
> it's just misinformation and noise. Everyone starts out by wanting a neat
> collection of easy to understand and review commits, but in practice it's
> extremely hard to always get it.

Then your request should be for better commits, not for just squashing the lot 
into some incoherent blob.

The alternatives under discussion are:

 - Coder produces long chain of commits on feature branch.  Compresses them, 
throwing away any individual and accurate messages into one large diff.  It's 
unlikely you'll get a log message that is as descriptive in the large one if 
you made them throw away the little ones.  Large diff is offered for review.  
Review is of one large diff.

 - Coder produces long chain on commits on feature branch.  Offers them for 
review.  Reviewer only likes to review large diffs, so uses the tools 
available to produce it.

Exactly the same diff is being reviewed, but in one case you're throwing away 
information.  There is no getting that information back ever.

You're also discarding the advantages of individual commits.

 - Merges are considerably harder than rebases.  You have to resolve all the 
conflicts at once with a merge, with a rebase you can resolve them with the 
log message and original isolated diff to help you.

 - Bisect doesn't give as fine-grained an answer.

> I know how to make squashed commits, thanks. I've done LOTS of code review

Excellent.  Don't take it personally -- I only offered it in case you didn't 
know.  Not everyone is familiar with git plumbing.

> in my life. I'm making a point here as one of the few people who goes
> through large pull requests and reviews them line by line. It's hard,

That doesn't make you the only person who does code reviews.  I do plenty of 
reviews here; they're just not bitcoin reviews.  Obviously we're talking about 
bitcoin, so you get to decide in the end.

> partly because github sucks, and partly because reviewing lots of small
> commits sucks.

I'm not suggesting you review lots of small commits anyway.  I can't comment 
on whether github sucks or not -- that's obviously personal preference.  
However, nothing stops you doing reviews on your own local checkout.

> There's nothing that makes a single large commit harder to review. It's the
> same amount of code or strictly less, given the tendency for later commits

That's not true.  There are often lots of small changes that are manifestly 
correct -- let's use string changes as an example -- in the large commit, they 
are just noise.  You want to be able to focus on the hard commits.  However -- 
I am not trying to persuade you to review small commits, I'm trying to 
persuade you not to throw away the small commits, gone forever, merely because 
your preference is to review large commits.

> to change earlier ones. You can easily search the entire change whilst
> reviewing. There are lots of things that make it easier.

Since the large commit is always available, no facilities have been lost.

Personally I work hard in my repositories to make coherent, small, well 
described commits.  If I had gone to that effort for a bitcoin branch only to 
be told to collapse them all and throw away that effort, I'd think I'd been 
wasting my time.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From andyparkins at gmail.com  Fri Oct  4 12:34:39 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 04 Oct 2013 13:34:39 +0100
Subject: [Bitcoin-development] Code review
In-Reply-To: <20131004113517.GA8373@savin>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<3552695.aET6a1zFq8@momentum> <20131004113517.GA8373@savin>
Message-ID: <5088770.66l0OxckCD@momentum>

On Friday 04 October 2013 07:35:17 you wrote:

> Remember that every individual commit is two things: what source code
> has changed, and a message explaining why you thought that change should
> be made. Commits aren't valuable in of themselves, they're valuable
> because they serve to explain to the other people you are working with
> why you thought a change should be made. Sometimes it makes sense to

Yes -- I'm assuming that.  I'm not advocating creating commits with random 
data as a log, and random bits of the changes.

> explain your changes in 10 commits, sometimes it makes sense to squash
> them all up into one commit, but there's no hard and fast rule other
> than "Put yourself in your fellow coders' shoes - what's the best way to
> explain to them what you are trying to accomplish and why?" You may have
> generated a lot of little commits in the process of creating your patch
> that tell a story that no-one else cares about, or equally by squashing

They don't care _now_; but when it comes to finding bugs, I can't count the 
number of times having a detailed change history has helped.  Combined with 
git-blame, it makes it very easy to ask "why did this line go in?".

> everything into one big commit you wind up with a tonne of changes with
> little explanation as to why they were made.

True enough.  I'm happy to accept that what you want is "the most optimum" set 
of commits.  But that doesn't mean "squash it all together".

> Two caveats apply however: git-bisect works best if every commit in the
> tree you are trying to debug works well enough that you can run tests
> without errors - that is you don't "break the build". Don't make commits
> that don't compile at the very least, and preferably everything you do
> should be refactored to the point where the commit as a whole "works".

Absolutely true.  I'm in favour of having the CI system test every commit for 
exactly that reason.  Even if you don't do that though, simply making the 
effort to make commits coherent means that its rare to get commits that don't 
build.
 
> FWIW personally I tend to review patches by both looking at the
> individual commits to try to understand why someone wanted to make a
> change, as well as all commits merged into one diff for a "what actually
> changed here?" review.

I think that code review is fundamentally hard.  There is only so much you can 
do to make it easier; and I'm not sure encouraging contributors to squash 
their chains is it.  Encouraging better commit behaviour would be better.

However, I'm only a lurker, not a committer, weight my opinions accordingly.



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/cde9187b/attachment.sig>

From jgarzik at bitpay.com  Fri Oct  4 15:05:29 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 4 Oct 2013 11:05:29 -0400
Subject: [Bitcoin-development] bitcoind stops responding
In-Reply-To: <CABsx9T2OvOs9ijj8kk4ZdBT5u-2Bb3rYG0AZtk3FFDWi+H_oHw@mail.gmail.com>
References: <CAJna-Hi+eyRnZUtHpfvod_uRCmjPOL5HS3ZZpr54yzbKRRT9-w@mail.gmail.com>
	<CAJHLa0MHSjZ_mwsCKa=rd1_39H0yq9j2jVwr0qWFTxTtrWXPCQ@mail.gmail.com>
	<CAJna-Hj1c0k3Gb7rEMBeU9nQsFophU2CYzGUOEo3JxieOYA5dA@mail.gmail.com>
	<CABsx9T2OvOs9ijj8kk4ZdBT5u-2Bb3rYG0AZtk3FFDWi+H_oHw@mail.gmail.com>
Message-ID: <CAJHLa0NP4f9i-fUQfCh_RQCn3zpih9y0mT8kSXeoOk4hT0Twbg@mail.gmail.com>

On Fri, Oct 4, 2013 at 2:22 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> RE: running into the maximum-of-4-keepalive-requests : simple workaround is
> to run with -rpcthreads=11 (or however many keepalive connections you need
> to support).  I agree that the rpc code should be smarter; making the last
> rpc thread ignore keepalive and always disconnecting should be a fairly
> simple patch, and "patches welcome."

It's all still working around a problem unchanged since Satoshi wrote
it:  the HTTP server code paths use blocking I/O.

Amusingly, we do this through an async I/O library, which helps
facilitate SSL, but all our connections and operations are blocking.

That's why RPC was multi-threaded in part:  to work around the ugly
blocking nature of the code.  At least with multiple threads, one
thread will not stall another even if the network stalls (or a
software bug triggers a stall etc.)

Hopefully I can dive into the code and make is truly async I/O.  It
takes some work, and I'm happy if someone else steals the task, but
that's what really needs to be done.

I tried the multi-threaded approach, writing an entire boost::asio
skeleton JSON-RPC HTTP server: https://github.com/jgarzik/rpcsrv
This is working, tested code that uses boost::asio properly.  It's
also quite a bit of LOC, and a bit messy to boot (four LOC per boost
async action and incomprehensible compiler errors in return for proper
async+MT).

A single thread with async I/O is likely sufficient for even heavy
uses of RPC -- since today it all goes through a big lock anyway.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gavinandresen at gmail.com  Sat Oct  5 02:31:57 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 5 Oct 2013 12:31:57 +1000
Subject: [Bitcoin-development] Code review
In-Reply-To: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
Message-ID: <CABsx9T1Q85usG4mhgLJTnK5pMUDwd1Ek3FmG0Z+-3vxg80xX0Q@mail.gmail.com>

On Fri, Oct 4, 2013 at 8:30 PM, Mike Hearn <mike at plan99.net> wrote:

> I'd like to make a small request - when submitting large, complex pieces
> of work for review, please either submit it as one giant squashed change,
> or be an absolute fascist about keeping commits logically clean and
> separated.
>

I'll try harder to be a fascist (it doesn't come naturally to me). HUGE
thanks for taking the time to review the fee changes in detail.

RE: using Review Board:

I'm all for using better tools, if they will actually get used. If a
potential reviewer has to sign up to create a Review Board account or learn
Yet Another Tool, then I think it would be counter-productive:  we'd just
make the pool of reviewers even smaller than it already is.

Are there good examples of other open source software projects successfully
incentivizing review that we can copy?

For example, I'm wondering if maybe for the 0.9 release and onwards the
"Thank you" section should thank only people who have significantly helped
test or review other people's code.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131005/b234c2f6/attachment.html>

From wtogami at gmail.com  Sat Oct  5 04:02:45 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Fri, 4 Oct 2013 18:02:45 -1000
Subject: [Bitcoin-development] Code review
In-Reply-To: <CABsx9T1Q85usG4mhgLJTnK5pMUDwd1Ek3FmG0Z+-3vxg80xX0Q@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<CABsx9T1Q85usG4mhgLJTnK5pMUDwd1Ek3FmG0Z+-3vxg80xX0Q@mail.gmail.com>
Message-ID: <CAEz79PrCYfVpTrvOBsCE3BNN_vhYN0oh5nhfEFX-t+x34Y5KMg@mail.gmail.com>

https://www.kernel.org/doc/Documentation/SubmittingPatches
Read the section under "14) Using Reported-by:, Tested-by:, Reviewed-by:
and Suggested-by:". That might be helpful in our process too?

Warren


On Fri, Oct 4, 2013 at 4:31 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Fri, Oct 4, 2013 at 8:30 PM, Mike Hearn <mike at plan99.net> wrote:
>
>> I'd like to make a small request - when submitting large, complex pieces
>> of work for review, please either submit it as one giant squashed change,
>> or be an absolute fascist about keeping commits logically clean and
>> separated.
>>
>
> I'll try harder to be a fascist (it doesn't come naturally to me). HUGE
> thanks for taking the time to review the fee changes in detail.
>
> RE: using Review Board:
>
> I'm all for using better tools, if they will actually get used. If a
> potential reviewer has to sign up to create a Review Board account or learn
> Yet Another Tool, then I think it would be counter-productive:  we'd just
> make the pool of reviewers even smaller than it already is.
>
> Are there good examples of other open source software projects
> successfully incentivizing review that we can copy?
>
> For example, I'm wondering if maybe for the 0.9 release and onwards the
> "Thank you" section should thank only people who have significantly helped
> test or review other people's code.
>
> --
> --
> Gavin Andresen
>
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60134791&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131004/3b8b08d1/attachment.html>

From mike at plan99.net  Sat Oct  5 11:36:26 2013
From: mike at plan99.net (Mike Hearn)
Date: Sat, 5 Oct 2013 13:36:26 +0200
Subject: [Bitcoin-development] Code review
In-Reply-To: <CABsx9T1Q85usG4mhgLJTnK5pMUDwd1Ek3FmG0Z+-3vxg80xX0Q@mail.gmail.com>
References: <CANEZrP1Sd8cK2YUr4OSvnOxEJrbWpmfdpor-qbap1f98tGqPwg@mail.gmail.com>
	<CABsx9T1Q85usG4mhgLJTnK5pMUDwd1Ek3FmG0Z+-3vxg80xX0Q@mail.gmail.com>
Message-ID: <CANEZrP3WLw4OgbUqT6ejD8WpuaeG15yc2m5Y+Hz3RJT4JZwkkw@mail.gmail.com>

On Sat, Oct 5, 2013 at 4:31 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> I'll try harder to be a fascist (it doesn't come naturally to me). HUGE
> thanks for taking the time to review the fee changes in detail.
>

Thanks, although I wasn't thinking specifically of you. The fee pull is
pretty well laid out. It just reminded me that it seems to be a common
issue I've had over the past year or so, across projects and people.


> I'm all for using better tools, if they will actually get used. If a
> potential reviewer has to sign up to create a Review Board account or learn
> Yet Another Tool, then I think it would be counter-productive:  we'd just
> make the pool of reviewers even smaller than it already is.
>

Yes, I don't know if github supports any kind of SSO. I will investigate.
As for learning another tool, well, when the current tool kind of sucks I
don't see any way around that one :)


> Are there good examples of other open source software projects
> successfully incentivizing review that we can copy?
>
> For example, I'm wondering if maybe for the 0.9 release and onwards the
> "Thank you" section should thank only people who have significantly helped
> test or review other people's code.
>

Perhaps just have a separate section for people who helped review above the
current section? It seems a bit mean not to credit occasional contributors
who fixed bugs or maintained something important but didn't review
complicated changes to the core.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131005/23e4a09f/attachment.html>

From adam at cypherspace.org  Mon Oct  7 19:01:03 2013
From: adam at cypherspace.org (Adam Back)
Date: Mon, 7 Oct 2013 21:01:03 +0200
Subject: [Bitcoin-development] homomorphic coin value (validatable but
 encrypted) (Re: smart contracts -- possible use case? yes or no?)
In-Reply-To: <20131001191143.GA16116@netbook.cypherspace.org>
References: <CAKaEYhLvqT6nkbupEEgR1d9dMP4-pA7xQbBqPDbREiDDV7c0rQ@mail.gmail.com>
	<2c70dbfc173749cf4198c591f19a7d33@astutium.com>
	<CAH+ZByHs00+Cpx5bwybgV3G9=CBfHaHKg7AV9ytywKNAjFVM6g@mail.gmail.com>
	<CABsx9T29T+thSeF-xVk+prfeO7ZJQbX=n=tAURqEKQsVtcBpQg@mail.gmail.com>
	<20130929093708.GA16561@netbook.cypherspace.org>
	<5248680C.60404@monetize.io>
	<20131001142603.GA9208@netbook.cypherspace.org>
	<20131001191143.GA16116@netbook.cypherspace.org>
Message-ID: <20131007190103.GA6811@netbook.cypherspace.org>

An update on the homomorphic coins, some more math validation & a test
implementation needs to be done, but a surprisingly good outcome so far of
predicted 2.5kB homomorphic valued coin.  Only coin splitting has to incur
the 2.5kB range proof.  Coin adding, full spending and mining is "free",
because adding existing range proofed and validated coins cant overflow by
definition (21 mil coin cap).  You can also (obviously I guess) add a
homomorphicaly encrypted "0" value to a few other peoples coin balance to
get a kind of taint mitigation.

https://bitcointalk.org/index.php?topic=305791.msg3294618#msg3294618

Adam

On Tue, Oct 01, 2013 at 09:11:43PM +0200, Adam Back wrote:
>Err actually not (efficient) I made a mistake that came out when I started
>writing it up about how the t parameter in the proof relates to bitcoin
>precision and coin representation (I thought t=2, but t=51).  Damn!  Back to
>the not so efficient version (which is more zerocoin-esque in size/cost), or
>the more experimental Schoenmaker non-standard p, q non EC one, or other
>creative ideas to change the coin representation to simplify the proof (of
>which this was a failed attempt).  See the bitcointalk thread for details.
>
>https://bitcointalk.org/index.php?topic=305791.new#new
>
>Adam
>
>On Tue, Oct 01, 2013 at 04:26:03PM +0200, Adam Back wrote:
>>On Sun, Sep 29, 2013 at 10:49:00AM -0700, Mark Friedenbach wrote:
>>>This kind of thing - providing external audits of customer accounts
>>>without revealing private data - would be generally useful beyond
>>>taxation. If you have any solutions, I'd be interested to hear them
>>>(although bitcoin-dev is probably not the right place yet).
>>
>>Thanks for providing the impetus to write down the current state, the
>>efficient version of which I only figured out a few days ago :)
>>
>>I have been researching this for a few months on and off, because it seems
>>like an interesting construct in its own right, a different aspect of
>>payment privacy (eg for auditable but commercial sensistive information) but
>>also that other than its direct use it may enable some features that we have
>>not thought of yet.
>>
>>I moved it to bitcointalk:
>>
>>https://bitcointalk.org/index.php?topic=305791.new#new
>>
>>Its efficient finally (after many dead ends): approximately 2x cost of
>>current in terms of coin size and coin verification cost, however it also
>>gives some perf advantages back in a different way - necessary changes to
>>schnorr (EC version of Schnorr based proofs) allow n of n multiparty sigs,
>>or k of n multiparty sigs for the verification cost and signature size of
>>one pair of ECS signatures, for n > 2 its a space and efficiency improvement
>>over current bitcoin.
>>
>>Adam



From jonas.schnelli at include7.ch  Tue Oct  8 10:31:06 2013
From: jonas.schnelli at include7.ch (Jonas Schnelli)
Date: Tue, 8 Oct 2013 12:31:06 +0200
Subject: [Bitcoin-development] MacWallet - another wallet app for mac
Message-ID: <AA2AE1E2-D0FF-4036-878C-2DDDD9080F6F@include7.ch>

Hi

I'd like to introduce MacWallet.
A tiny and integrated thin client wallet app based on bitcoinj.

Main focus of the app:
-> Small and integrated wallet app for Mac OSX.
-> Low memory and cpu footprint, can be run in background without pain
-> Use Mac OSX keychain as wallet store (by default encrypted with your login credentials)
-> Simple UI. Use status menu (a.k.a global menu) as main UI entry point

Currently, MacWallet app is in early development stage.

Screenshots:
https://github.com/MacWallet/MacWallet/blob/master/SCREENSHOTS.md

Check the bitcointalk post:
https://bitcointalk.org/index.php?topic=307200.0

Github:
https://github.com/MacWallet/MacWallet

</jonas>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131008/470e23ea/attachment.html>

From wtogami at gmail.com  Thu Oct 10 03:50:30 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Wed, 9 Oct 2013 17:50:30 -1000
Subject: [Bitcoin-development] 0.8.5 with libsecp256k1
Message-ID: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>

https://github.com/sipa/secp256k1
sipa's secp256k1, optimized ecdsa, significantly faster than openssl

Today someone in #bitcoin-dev asked for Bitcoin 0.8.5 with sipa's
secp256k1.  Litecoin has been shipping test builds with secp256k1 for
several months now so it was a simple matter to throw together a branch of
Bitcoin 0.8.5 with secp256k1.

https://github.com/wtogami/bitcoin/commits/btc-0.8.5-secp256k1
This branch should theoretically work for Linux, win32 gitian and mac
builds.  These commits are rather ugly because it was thrown together just
to make it build with the old 0.8 makefiles without intent for production
code merge. cfields is working on autotoolizing it as one of the
prerequisites prior to inclusion into bitcoin master where it will be an
option disabled by default.

http://193.28.235.60/~warren/bitcoin-0.8.5-secp256k1/
Untested win32 gitian build.  Build your own Linux or Mac builds if you
want to test it.  Not recommended for production wallet or mining uses.

Warren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131009/efac0a25/attachment.html>

From jeremy at taplink.co  Thu Oct 10 04:10:09 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Wed, 09 Oct 2013 21:10:09 -0700
Subject: [Bitcoin-development] 0.8.5 with libsecp256k1
In-Reply-To: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>
References: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>
Message-ID: <op.w4p0i7a3yldrnw@laptop-air>

Can this be combined with the ideas on deterministic signing to show  
matching signatures with OpenSSL's implementation?

Not sure if that's worth much, since we would just be testing needles in a  
very large haystack, but better than nothing?

On Wed, 09 Oct 2013 20:50:30 -0700, Warren Togami Jr. <wtogami at gmail.com>  
wrote:

> https://github.com/sipa/secp256k1
> sipa's secp256k1, optimized ecdsa, significantly faster than openssl
>
> Today someone in #bitcoin-dev asked for Bitcoin 0.8.5 with sipa's  
> secp256k1.  Litecoin has been shipping test builds with secp256k1 for  
> several months >now so it was a simple matter to throw together a branch  
> of Bitcoin 0.8.5 with secp256k1.
>
> https://github.com/wtogami/bitcoin/commits/btc-0.8.5-secp256k1
> This branch should theoretically work for Linux, win32 gitian and mac  
> builds.  These commits are rather ugly because it was thrown together  
> just to make >it build with the old 0.8 makefiles without intent for  
> production code merge. cfields is working on autotoolizing it as one of  
> the prerequisites prior to >inclusion into bitcoin master where it will  
> be an option disabled by default.
>
> http://193.28.235.60/~warren/bitcoin-0.8.5-secp256k1/
> Untested win32 gitian build.  Build your own Linux or Mac builds if you  
> want to test it.  Not recommended for production wallet or mining uses.
>
> Warren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131009/42b7fbc0/attachment.html>

From mike at plan99.net  Thu Oct 10 08:29:20 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 10 Oct 2013 10:29:20 +0200
Subject: [Bitcoin-development] 0.8.5 with libsecp256k1
In-Reply-To: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>
References: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>
Message-ID: <CANEZrP16LEwJLAFniFgNDODohP37bT0fmrQbR+FQEmwDThh-0g@mail.gmail.com>

Thanks! I'd love to see this library become usable behind a command line
flag or config setting. At some point we're going to want to switch to it.

I believe the main issue at the moment is the malleability issues? If so,
it would seem possible to use OpenSSL to parse the signature into
components and then libsecp256k1 to verify them.




On Thu, Oct 10, 2013 at 5:50 AM, Warren Togami Jr. <wtogami at gmail.com>wrote:

> https://github.com/sipa/secp256k1
> sipa's secp256k1, optimized ecdsa, significantly faster than openssl
>
> Today someone in #bitcoin-dev asked for Bitcoin 0.8.5 with sipa's
> secp256k1.  Litecoin has been shipping test builds with secp256k1 for
> several months now so it was a simple matter to throw together a branch of
> Bitcoin 0.8.5 with secp256k1.
>
> https://github.com/wtogami/bitcoin/commits/btc-0.8.5-secp256k1
> This branch should theoretically work for Linux, win32 gitian and mac
> builds.  These commits are rather ugly because it was thrown together just
> to make it build with the old 0.8 makefiles without intent for production
> code merge. cfields is working on autotoolizing it as one of the
> prerequisites prior to inclusion into bitcoin master where it will be an
> option disabled by default.
>
> http://193.28.235.60/~warren/bitcoin-0.8.5-secp256k1/
> Untested win32 gitian build.  Build your own Linux or Mac builds if you
> want to test it.  Not recommended for production wallet or mining uses.
>
> Warren
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60134071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131010/80e0c5c3/attachment.html>

From adam at cypherspace.org  Thu Oct 10 14:21:54 2013
From: adam at cypherspace.org (Adam Back)
Date: Thu, 10 Oct 2013 16:21:54 +0200
Subject: [Bitcoin-development] malleability work-around vs fix (Re: 0.8.5
 with libsecp256k1)
In-Reply-To: <op.w4p0i7a3yldrnw@laptop-air>
References: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>
	<op.w4p0i7a3yldrnw@laptop-air>
Message-ID: <20131010142154.GA28656@netbook.cypherspace.org>

Determinstic ECDSA signature aka k=H(d,m) insead of k=random, with signature
(r,s) calculated r=[kG].x, s=k^-1(H(m)+rd) with public key Q=dG and
verificaton relation [H(m)s^-1G+rs^-1Q].x=?r is cool and should be done. 
Otherwise RNG issues like EC_DRBG or even leaked partial bits like the RNG
bias in the original DSA spec that Bleichenbacher pointed out and then they
corrected.

On Wed, Oct 09, 2013 at 09:10:09PM -0700, Jeremy Spilman wrote:
>Can this be combined with the ideas on deterministic signing to show 
>matching signatures with OpenSSL's implementation?

But k=random and k=H(d,m) create compatible signatures - or were you eaning
to cross check the two implementations with fuzz tester on lots of messages?

btw about malleability:

Mike Hearn <mike at plan99.net> wrote:
>   I believe the main issue at the moment is the malleability issues? If
>   so, it would seem possible to use OpenSSL to parse the signature into
>   components and then libsecp256k1 to verify them.

other than the ASN.1 related parsing ambiguity, if any (openSSL asn.1
parsing code is evil and shold not be used), the (r,s) vs (r,-s) ambiguity
can be plugged as discussed (eg define -s as invalid).  But that is ECDSA
specific, and signature malleability and its impact is a generic problem. 
Its probably a non-requirement of a signature scheme in terms of the
analysis effort put in by cryptanalysts that the signature itself be
non-malleable, eg there are some encryption schemes which are publicly
reblindable, like Elgamal.  By plugging the (r,s), (r,-s) specific case as a
DSA specific work-around there may be other malleability even in DSA, unless
someone has a clear proof that there is not.

And we may want to add ECS (schnorr) because it's simpler and allows more
flexibility and efficiency (eg native n of n multisig at the storage cost of
1 signature vs n with ECDSA, and k of n threshold signature at the cost of 1
sig (but some threshold secret share setup up front).  The relying party
doesnt need to know how many multi-sigs there are there is a single public
key.

So I was thinking a more generic / robust way to fix this would be to change
the txid from H(sig,inputs,outputs,script) to H(pubkey,inputs,outputs,script)
or something like that in effect so that the malleability of the signature
mechanism doesnt affect the security of conditional payments.

Adam



From adam at cypherspace.org  Thu Oct 10 15:06:03 2013
From: adam at cypherspace.org (Adam Back)
Date: Thu, 10 Oct 2013 17:06:03 +0200
Subject: [Bitcoin-development] malleability work-around vs fix (Re:
 0.8.5 with libsecp256k1)
In-Reply-To: <20131010142154.GA28656@netbook.cypherspace.org>
References: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>
	<op.w4p0i7a3yldrnw@laptop-air>
	<20131010142154.GA28656@netbook.cypherspace.org>
Message-ID: <20131010150603.GA30538@netbook.cypherspace.org>

btw if I got that right, it means you dont even have to fix the asn.1 level
ambiguity (though its a good idea to remove openSSL asn.1 parsing code) to
have conditional payments using not yet broadcast txid outputs as inputs to
work with high assurance.  (And even in the event that a new crypto level
malleability is discovered in ECDSA it remains secure.)

Adam

Adam Back wrote:
>So I was thinking a more generic / robust way to fix this would be to change
>the txid from H(sig,inputs,outputs,script) to H(pubkey,inputs,outputs,script)
>or something like that in effect so that the malleability of the signature
>mechanism doesnt affect the security of conditional payments.

Adam



From gavinandresen at gmail.com  Fri Oct 11 06:04:11 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 11 Oct 2013 16:04:11 +1000
Subject: [Bitcoin-development] FYI: pull-tester status
Message-ID: <CABsx9T1y8bg9-OXZZf8KtM7c4z5p_tqPqNe1WfQeg9eKEWwE2g@mail.gmail.com>

Since the autotools merge, the pull-tester has been misbehaving-- marking
valid pulls as invalid, etc.

So I've turned off some pull-tester features until somebody has time to
figure out how to fix them. Right now, pull-tester does the following:

+ Cross-compile windows binaries
+ Compile linux binaries
+ Run unit tests (binaries compiled on linux)

The following features are turned off:

- Running unit tests under wine with cross-compiled windows binaries
- Running the block-chain-compatibility tester
- Computing code coverage

Medium-term, there are several changes that need to be made to the
pull-tester environment; I'd like the following to get done:

+ Upgrade the pull-tester machine from Ubuntu 10.04 to 12.04. Or, probably
better, create a new 12.04 virtual machine and move the pull-tester over to
it.

+ Upgrade compilers/dependencies based on what we think we'll use for the
0.9 release.

+ Figure out how to unify the pull-tester and gitian build processes.
 Maybe the pull-tester should run gitian builds to create binaries (that
are then tested against the blockchain tester)? Maybe the pull-tester
scripts should be gitian scripts, which the pull-tester machine runs inside
an LXC container?

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131011/4f879353/attachment.html>

From melvincarvalho at gmail.com  Fri Oct 11 11:27:49 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 11 Oct 2013 13:27:49 +0200
Subject: [Bitcoin-development] Bitcoin meets the Semantic Web....
In-Reply-To: <CAKaEYh+bzUdLtt7Vg7nyY0UMd1Y3+Sdnqo_+Qjyj_pc6-ZY+6A@mail.gmail.com>
References: <CAKaEYh+bzUdLtt7Vg7nyY0UMd1Y3+Sdnqo_+Qjyj_pc6-ZY+6A@mail.gmail.com>
Message-ID: <CAKaEYhLU2JUB9P_HKpmp=CtM7ckFf+maeQwkS79c4WPFBx66Og@mail.gmail.com>

On 1 April 2013 09:59, Melvin Carvalho <melvincarvalho at gmail.com> wrote:

> I'm working on porting crypto currencies to the semantic web.
>
> The advantages of this is that pages can then become machine readable on
> the web allowing new types of innovation and spreading bitcoin information
> to a wider audience.
>
> The first step that needs to be done is to create a "vocabulary" for
> bitcoin.
>
> What this means is like a dictionary of terms that can be put down in a
> machine readable standard (called RDF).
>
> I was wondering if anyone has worked on this before or if there is a human
> readable "glossary" for bitcoin that I could take text from?
>
> seeAlso: https://bitcointalk.org/index.php?topic=163705.0
>

Hi All

Sorry for the delay on this.  I've made a very simple start, and am hosting
the vocabulary at.

https://w3id.org/cc

Having chatted on IRC, I'm not only going to model bitcion, but all crypto
currencies in time, starting first with bitcoin.  There's only one use case
currently support, which is a way to tell the semantic web that a link is a
bitcoin address (I know you can already introspect on the bitcoin: link but
introspection requires out of band knowledge).  More explanation below:

*Use Case
*

As a publisher Alice would like to link her web page content (or app) to a
bitcoin address, so that donations can be received by those that have
enjoyed her work.

*Model
*
It's only a slight overhead to model all crypto currencies so perhaps the
model will be something like

URI -> crypto-currency-address -> bitcoin-address

*Implementation
*
The folks at w3id.org have kindly offered to user their permanent
identifier switchboard, then we redirect to a locked down vocabulary.

As an implementer you simply need to add a single rel= tag to your markup.

*Example Usage*

In a web page:

<*meta* rel="https://w3id.org/cc#bitcoin<https://w3id.org/cc#bitcoin-address>"
href="bitcoin:1234...." />

In an html5 app:

<a rel="https://w3id.org/cc#bitcoin <https://w3id.org/cc#bitcoin-address>"
href="bitcoin:1234...."></a>

*Note: you an provide context for an individual concept in HTML5 (as
opposed to the webpage itself), such as an app, a project, a person, but
using the @about tag.
*

For litecoins (coming soon)

<a rel="https://w3id.org/cc#litecoin <https://w3id.org/cc#litecoin-address>"
href="...."></a>


*Next Steps

*
It's just a small step to start with, can allow all sorts of entities to
start accepting bitcoin in a way that complies with the W3C best
practices.  I'll be improving and extending this over time, feedback or
help is welcome!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131011/13593de6/attachment.html>

From pieter.wuille at gmail.com  Fri Oct 11 11:41:41 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 11 Oct 2013 13:41:41 +0200
Subject: [Bitcoin-development] 0.8.5 with libsecp256k1
In-Reply-To: <CANEZrP16LEwJLAFniFgNDODohP37bT0fmrQbR+FQEmwDThh-0g@mail.gmail.com>
References: <CAEz79PrCSjSV=FcSMyYtNip8Jg8oa8nMaHbqKNKKyoB-NEqRDQ@mail.gmail.com>
	<CANEZrP16LEwJLAFniFgNDODohP37bT0fmrQbR+FQEmwDThh-0g@mail.gmail.com>
Message-ID: <CAPg+sBjgH7A75E-Y3EpJmdW1af0O6yBL=SwH6WGTLvPoeko=Ug@mail.gmail.com>

On Thu, Oct 10, 2013 at 10:29 AM, Mike Hearn <mike at plan99.net> wrote:
> Thanks! I'd love to see this library become usable behind a command line
> flag or config setting. At some point we're going to want to switch to it.
>

The current idea is to provide a compile-time flag to enable it, which
at the same time disables the wallet and mining RPCs. In that state,
it should be safe enough to provide test builds.

> I believe the main issue at the moment is the malleability issues? If so, it
> would seem possible to use OpenSSL to parse the signature into components
> and then libsecp256k1 to verify them.

I'm pretty sure that libsecp256k1 supports every signature that
OpenSSL supports, so that direction is likely covered. The other
direction - the fact that libsecp256k1 potentially supports more than
OpenSSL - is only a problem if a majority of the hash power would be
running on it. However, with canonical encodings enforced by recent
relaying nodes, I hope that by then we're able to schedule a softfork
and require them inside blocks.

Apart from that, there is of course the issue that there may be actual
exploitable mistakes in the crypto code. There are unit tests,
including ones that create signatures with libsecp256k1 and verify
them using OpenSSL and the other way around, but errors are certainly
more likely to occur in edge cases that you don't hit with randomized
tests. The only way to catch those is review I suppose. I certainly
welcome people looking at it - even if just to get comments like "Can
you add an explanation for why this works?".

-- 
Pieter



From adam at cypherspace.org  Mon Oct 14 18:08:07 2013
From: adam at cypherspace.org (Adam Back)
Date: Mon, 14 Oct 2013 20:08:07 +0200
Subject: [Bitcoin-development] is there a way to do bitcoin-staging?
In-Reply-To: <5199C3DE.901@gmail.com>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
Message-ID: <20131014180807.GA32082@netbook.cypherspace.org>

Coming back to the staging idea, maybe this is a realistic model that could
work.  The objective being to provide a way for bitcoin to move to a live
beta and stable being worked on in parallel like fedora vs RHEL or odd/even
linux kernel versions.

Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin 0.x
stable and leap-frogs as beta becomes stable after testing.

Its a live beta, meaning real value, real contracts.  But we dont want it to
be an alt-coin with a floating value exactly, we want it to be bitcoin, but
the bleeding edge bitcoin so we want to respect the 21 million coin limit,
and allow coins to move between bitcoin and betacoin with some necessary
security related restrictions.

There is no mining reward on the betacoin network (can be merge mined for
security), and the way you opt to move a bitcoin into the betacoin network
is to mark it as transferred in some UTXO recognized way.  It cant be
reanimated, its dead.  (eg spend to a specific recognized invalid address on
the bitcoin network).  In this way its not really a destruction, but a move,
moving the coin from bitcoin to betacoin network.

This respects the 21 million coin cap, and avoids betacoin bugs flowing back
and affecting bitcoin security or value-store properties.  Users may buy or
swap betacoin for bitcoin to facilitate moving money back from betacoin to
bitcoin.  However that is market priced so the bitcoin network is security
insulated from beta.  A significant security bug in beta would cause a
market freeze, until it is rectified.

The cost of a betacoin is capped at one BTC because no one will pay more
than one bitcoin for a betacoin because they could alternatively move their
own coin.  The reverse is market priced.

Once bitcoin beta stabalizes, eg say year or two type of time-frame, a
decision is reached to promote 1.0 beta to 2.0 stable, the remaining
bitcoins can be moved, and the old network switched off, with mining past a
flag day moving to the betacoin.

During the beta period betacoin is NOT an alpha, people can rely on it and
use it in anger for real value transactions.  eg if it enables more script
features, or coin coloring, scalabity tweaks etc people can use it. 
Probably for large value store they are always going to prefer
bitcoin-stable, but applications that need the coloring features, or
advanced scripting etc can go ahead and beta.

Bitcoin-stable may pull validated changes and merge them, as a way to pull
in any features needed in the shorter term and benefit from the betacoin
validation.  (Testing isnt as much validation as real-money at stake
survivability). 

The arguments are I think that: 

- it allows faster development allowing bitcoin to progress features faster,

- it avoids mindshare dilution if alternatively an alt-coin with a hit
   missing feature takes off;

- it concentrates such useful-feature alt activities into one OPEN source
   and OPEN control foundation mediated area (rather than suspected land
   grabs on colored fees or such like bitcoin respun as a business model
   things),

- maybe gets the developers that would've been working on their pet
   alt-coin, or their startup alt-coin to work together putting more
   developers, testers and resources onto something with open control (open
   source does not necessarily mean that much) and bitcoin mindshare
   branding, its STILL bitcoin, its just the beta network.

- it respects the 21 million limit, starting new mining races probably
   dillutes the artificial scarcity semantic

- while insulating bitcoin from betacoin security defects (I dont mean
   betacoin as a testnet, it should have prudent rigorous testing like
   bitcoin, just the very act of adding a feature creates risk that bitcoin
   stable can be hesitant to take).

Probably the main issue as always is more (trustable) very high caliber
testers and developers.  Maybe if the alt-coin minded startups and
developers donate their time to bitcoin-beta (or bitcoin-stable) for the
bits they are missing, we'll get more hands to work on something of reusable
value to humanity, in parallel with their startup's objectives and as a way
for them to get their needed features, while giving back to the bitcoin
community, and helping bitcoin progress faster.

Maybe bitcoin foundation could ask for BTC donations to hire more developers
and testers full time.  $1.5b of stored value should be interested to safe
guard their value store, and develop the transaction features.

Adam

On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:
>   This is exactly what I was planning to do with the
>   inappropriately-named "Ultimate Blockchain Compression".  [...]
> 
>   For it to really work, it's gotta be part of the mainnet validation
>   rules, but no way it can be evaluated realistically without some kind of
>   "staging".  

>   On 5/19/2013 11:08 AM, Peter Vessenes wrote:
>
>   I think this is a very interesting idea. As Bitcoiners, we often stuff
>   things into the 'alt chain' bucket in our heads; I wonder if this idea
>   works better as a curing period, essentially an extended version of the
>   current 100 block wait for mined coins.



From jgarzik at bitpay.com  Mon Oct 14 18:21:04 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 14 Oct 2013 14:21:04 -0400
Subject: [Bitcoin-development] is there a way to do bitcoin-staging?
In-Reply-To: <20131014180807.GA32082@netbook.cypherspace.org>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
	<20131014180807.GA32082@netbook.cypherspace.org>
Message-ID: <CAJHLa0MT-7mVOsdvMnXS19Y2EOthHb806RY_JWqivjS6vSL5pQ@mail.gmail.com>

On Mon, Oct 14, 2013 at 2:08 PM, Adam Back <adam at cypherspace.org> wrote:
> Its a live beta, meaning real value, real contracts.  But we dont want it to
> be an alt-coin with a floating value exactly, we want it to be bitcoin, but
> the bleeding edge bitcoin so we want to respect the 21 million coin limit,
> and allow coins to move between bitcoin and betacoin with some necessary
> security related restrictions.
>
> There is no mining reward on the betacoin network (can be merge mined for
> security), and the way you opt to move a bitcoin into the betacoin network
> is to mark it as transferred in some UTXO recognized way.  It cant be
> reanimated, its dead.  (eg spend to a specific recognized invalid address on
> the bitcoin network).  In this way its not really a destruction, but a move,
> moving the coin from bitcoin to betacoin network.
>
> This respects the 21 million coin cap, and avoids betacoin bugs flowing back
> and affecting bitcoin security or value-store properties.  Users may buy or
> swap betacoin for bitcoin to facilitate moving money back from betacoin to
> bitcoin.  However that is market priced so the bitcoin network is security
> insulated from beta.  A significant security bug in beta would cause a
> market freeze, until it is rectified.

Quite a neat idea...


> - it avoids mindshare dilution if alternatively an alt-coin with a hit
>    missing feature takes off;

FWIW, litecoin devs are open to having litecoin be a bit of a staging
area for new bitcoin features.  Obviously there is some self-interest
there -- "we have new cool stuff first!" -- nevertheless, it is a live
test that could demonstrate problems with new features before they
land in bitcoin-stable.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gronager at ceptacle.com  Mon Oct 14 18:43:26 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Mon, 14 Oct 2013 20:43:26 +0200
Subject: [Bitcoin-development] is there a way to do bitcoin-staging?
In-Reply-To: <5199C3DE.901@gmail.com>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
Message-ID: <525C3B4E.2040406@ceptacle.com>

Hi Alan,

What you describe in the ultimate blockchain compression I have already
coded the authenticated datastructure part of in libcoin
(https://github.com/libcoin/libcoin) - next step is to include a p2pool
style mining, where a parallel chain serves several purposes:
1. to validate the root hash at a higher frequency than the 10 min
2. to enable distributed mining, easily (part of libcoind)
3. to utilize the soft fork by defining the root hash in coinbase blocks
as v3 and once we cross the limit all blocks are v3.

I will have a closer look at you bitcoin talk post to see how well my
approach and ideas fit to yours.

Michael

On 20/5/13 08:34 , Alan Reiner wrote:
> This is exactly what I was planning to do with the inappropriately-named
> "Ultimate Blockchain Compression
> <https://bitcointalk.org/index.php?topic=88208.0>".  I wanted to
> reorganize the blockchain data into an authenticated tree, indexed by
> TxOut script (address), instead of tx-hash.  Much like a regular merkle
> tree, you can store the root in the block header, and communicate
> branches of that tree to nodes, to prove inclusion (and exclusion!) of
> TxOuts for any given script/address.  Additionally, you can include at
> each node, the sum of BTC in all nodes below it, which offers some other
> nice benefits.
> 
> I think this idea is has epic upside-potential for bitcoin if it works
> -- even "SPV" nodes could query their unspent TxOut list for their
> wallet from any untrusted peer and compare the result directly to the
> blockheaders/POW.  Given nothing but the headers, you can verify the
> balance of 100 addresses with 250 kB.  But also epic failure-potential
> in terms of feasibility and cost-to-benefit for miners.  For it to
> really work, it's gotta be part of the mainnet validation rules, but no
> way it can be evaluated realistically without some kind of "staging". 
> Therefore, I had proposed that this be merge-mined on a "meta-chain"
> first...get a bunch of miners on board to agree to merge mine and see it
> in action.  It seemed like a perfectly non-disruptive way to prove out a
> particular idea before we actually consider making a protocol change
> that significant.  Even if it stayed on its own meta chain, as long as
> there is some significant amount of hashpower working on it, it can
> still be a useful tool. 
> 
> Unfortunately, my experience with merged mining is minimal, so I'm still
> not clear how feasible/reliable it is as an alternative to direct
> blockchain integration.  That's a discussion I'd like to have.
> 
> -Alan
> 
> 
> On 5/19/2013 11:08 AM, Peter Vessenes wrote:
>> I think this is a very interesting idea. As Bitcoiners, we often stuff
>> things into the 'alt chain' bucket in our heads; I wonder if this idea
>> works better as a curing period, essentially an extended version of
>> the current 100 block wait for mined coins.
>>
>> An alternate setup comes to mind; I can imagine this working as a sort
>> of gift economy; people pay real BTC for merge-mined "beta BTC" as a
>> way to support development. There is no doubt a more elegant and
>> practical solution that might have different economic and crypto
>> characteristics.
>>
>>
>>
>> On Sun, May 19, 2013 at 6:23 AM, Adam Back <adam at cypherspace.org
>> <mailto:adam at cypherspace.org>> wrote:
>>
>>     Is there a way to experiment with new features - eg committed
>>     coins - that
>>     doesnt involve an altcoin in the conventional sense, and also
>>     doesnt impose
>>     a big testing burden on bitcoin main which is a security and
>>     testing risk?
>>
>>     eg lets say some form of merged mine where an alt-coin lets call it
>>     bitcoin-staging?  where the coins are the same coins as on
>>     bitcoin, the
>>     mining power goes to bitcoin main, so some aspect of merged
>>     mining, but no
>>     native mining.  and ability to use bitcoins by locking them on
>>     bitcoin to
>>     move them to bitcoin-staging and vice versa (ie exchange them 1:1
>>     cryptographically, no exchange).
>>
>>     Did anyone figure anything like that out?  Seems vaguely doable and
>>     maybe productive.  The only people with coins at risk of defects
>>     in a new
>>     feature, or insufficiently well tested novel feature are people
>>     with coins
>>     on bitcoin-staging.
>>
>>     Yes I know about bitcoin-test this is not it.  I mean a real live
>>     system,
>>     with live value, but that is intentionally wanting to avoid
>>     forking bitcoins
>>     parameters, nor value, nor mindshare dillution.  In this way something
>>     potentially interesting could move forward faster, and be les
>>     risky to the
>>     main bitcoin network.  eg particularly defenses against
>>
>>     It might also be a more real world test test (after bitcoin-test)
>>     because
>>     some parameters are different on test, and some issues may not
>>     manifest
>>     without more real activity.
>>
>>     Then also bitcoin could cherry pick interesting patches and merge
>>     them after
>>     extensive real-world validation with real-money at stake (by early
>>     adopters).
>>
>>     Adam
>>
>>     ------------------------------------------------------------------------------
>>     AlienVault Unified Security Management (USM) platform delivers
>>     complete
>>     security visibility with the essential security capabilities.
>>     Easily and
>>     efficiently configure, manage, and operate all of your security
>>     controls
>>     from a single console and one unified framework. Download a free
>>     trial.
>>     http://p.sf.net/sfu/alienvault_d2d
>>     _______________________________________________
>>     Bitcoin-development mailing list
>>     Bitcoin-development at lists.sourceforge.net
>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>
>> -- 
>> Are you coming to Bitcoin2013 <http://bitcoin2013.com> in San Jose In
>> May? 
>> ------------------------------------------------------------------------
>>
>> CoinLab LogoPETER VESSENES 
>> CEO
>>
>> *peter at coinlab.com <mailto:peter at coinlab.com> * /  206.486.6856
>>  / SKYPE: vessenes 
>> 71 COLUMBIA ST / SUITE 300  /  SEATTLE, WA 98104
>>
>>
>>
>> ------------------------------------------------------------------------------
>> AlienVault Unified Security Management (USM) platform delivers complete
>> security visibility with the essential security capabilities. Easily and
>> efficiently configure, manage, and operate all of your security controls
>> from a single console and one unified framework. Download a free trial.
>> http://p.sf.net/sfu/alienvault_d2d
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> ------------------------------------------------------------------------------
> AlienVault Unified Security Management (USM) platform delivers complete
> security visibility with the essential security capabilities. Easily and
> efficiently configure, manage, and operate all of your security controls
> from a single console and one unified framework. Download a free trial.
> http://p.sf.net/sfu/alienvault_d2d
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From etotheipi at gmail.com  Mon Oct 14 20:20:33 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 14 Oct 2013 16:20:33 -0400
Subject: [Bitcoin-development] is there a way to do bitcoin-staging?
In-Reply-To: <525C3B4E.2040406@ceptacle.com>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com> <525C3B4E.2040406@ceptacle.com>
Message-ID: <525C5211.30202@gmail.com>

Michael,

Very interesting that you have tackled that off the radar.  I didn't
know anyone else was working on anything similar.  I'm sure you saw the
recent Armory-funding announcement, so understandably I have other
priorities in recent past and near future, but I think you should
connect with Mark Friedenbach about this topic.  He solicited donations
for working on my idea, and has been doing proof-of-concept for for the
last few months.  In fact, he was just looking for funding for another 3
months, and Armory Technologies, Inc, just offered up 50 BTC for him to
continue (@Mark, whoops, I haven't actually paid you yet; contact me to
work out details).

For now, my ability to participate directly is limited, but I am still
very interested to see the ideas developed further, as well as provide a
first test of this whole staging-area idea.  I devised it originally for
the UBC/Reiner-tree concept, but there's no reason it couldn't be used
for any other type of sweeping change to the protocol. 

-Alan


On 10/14/2013 02:43 PM, Michael Gronager wrote:
> Hi Alan,
>
> What you describe in the ultimate blockchain compression I have already
> coded the authenticated datastructure part of in libcoin
> (https://github.com/libcoin/libcoin) - next step is to include a p2pool
> style mining, where a parallel chain serves several purposes:
> 1. to validate the root hash at a higher frequency than the 10 min
> 2. to enable distributed mining, easily (part of libcoind)
> 3. to utilize the soft fork by defining the root hash in coinbase blocks
> as v3 and once we cross the limit all blocks are v3.
>
> I will have a closer look at you bitcoin talk post to see how well my
> approach and ideas fit to yours.
>
> Michael
>
> On 20/5/13 08:34 , Alan Reiner wrote:
>> This is exactly what I was planning to do with the inappropriately-named
>> "Ultimate Blockchain Compression
>> <https://bitcointalk.org/index.php?topic=88208.0>".  I wanted to
>> reorganize the blockchain data into an authenticated tree, indexed by
>> TxOut script (address), instead of tx-hash.  Much like a regular merkle
>> tree, you can store the root in the block header, and communicate
>> branches of that tree to nodes, to prove inclusion (and exclusion!) of
>> TxOuts for any given script/address.  Additionally, you can include at
>> each node, the sum of BTC in all nodes below it, which offers some other
>> nice benefits.
>>
>> I think this idea is has epic upside-potential for bitcoin if it works
>> -- even "SPV" nodes could query their unspent TxOut list for their
>> wallet from any untrusted peer and compare the result directly to the
>> blockheaders/POW.  Given nothing but the headers, you can verify the
>> balance of 100 addresses with 250 kB.  But also epic failure-potential
>> in terms of feasibility and cost-to-benefit for miners.  For it to
>> really work, it's gotta be part of the mainnet validation rules, but no
>> way it can be evaluated realistically without some kind of "staging". 
>> Therefore, I had proposed that this be merge-mined on a "meta-chain"
>> first...get a bunch of miners on board to agree to merge mine and see it
>> in action.  It seemed like a perfectly non-disruptive way to prove out a
>> particular idea before we actually consider making a protocol change
>> that significant.  Even if it stayed on its own meta chain, as long as
>> there is some significant amount of hashpower working on it, it can
>> still be a useful tool. 
>>
>> Unfortunately, my experience with merged mining is minimal, so I'm still
>> not clear how feasible/reliable it is as an alternative to direct
>> blockchain integration.  That's a discussion I'd like to have.
>>
>> -Alan
>>
>>
>> On 5/19/2013 11:08 AM, Peter Vessenes wrote:
>>> I think this is a very interesting idea. As Bitcoiners, we often stuff
>>> things into the 'alt chain' bucket in our heads; I wonder if this idea
>>> works better as a curing period, essentially an extended version of
>>> the current 100 block wait for mined coins.
>>>
>>> An alternate setup comes to mind; I can imagine this working as a sort
>>> of gift economy; people pay real BTC for merge-mined "beta BTC" as a
>>> way to support development. There is no doubt a more elegant and
>>> practical solution that might have different economic and crypto
>>> characteristics.
>>>
>>>
>>>
>>> On Sun, May 19, 2013 at 6:23 AM, Adam Back <adam at cypherspace.org
>>> <mailto:adam at cypherspace.org>> wrote:
>>>
>>>     Is there a way to experiment with new features - eg committed
>>>     coins - that
>>>     doesnt involve an altcoin in the conventional sense, and also
>>>     doesnt impose
>>>     a big testing burden on bitcoin main which is a security and
>>>     testing risk?
>>>
>>>     eg lets say some form of merged mine where an alt-coin lets call it
>>>     bitcoin-staging?  where the coins are the same coins as on
>>>     bitcoin, the
>>>     mining power goes to bitcoin main, so some aspect of merged
>>>     mining, but no
>>>     native mining.  and ability to use bitcoins by locking them on
>>>     bitcoin to
>>>     move them to bitcoin-staging and vice versa (ie exchange them 1:1
>>>     cryptographically, no exchange).
>>>
>>>     Did anyone figure anything like that out?  Seems vaguely doable and
>>>     maybe productive.  The only people with coins at risk of defects
>>>     in a new
>>>     feature, or insufficiently well tested novel feature are people
>>>     with coins
>>>     on bitcoin-staging.
>>>
>>>     Yes I know about bitcoin-test this is not it.  I mean a real live
>>>     system,
>>>     with live value, but that is intentionally wanting to avoid
>>>     forking bitcoins
>>>     parameters, nor value, nor mindshare dillution.  In this way something
>>>     potentially interesting could move forward faster, and be les
>>>     risky to the
>>>     main bitcoin network.  eg particularly defenses against
>>>
>>>     It might also be a more real world test test (after bitcoin-test)
>>>     because
>>>     some parameters are different on test, and some issues may not
>>>     manifest
>>>     without more real activity.
>>>
>>>     Then also bitcoin could cherry pick interesting patches and merge
>>>     them after
>>>     extensive real-world validation with real-money at stake (by early
>>>     adopters).
>>>
>>>     Adam
>>>
>>>     ------------------------------------------------------------------------------
>>>     AlienVault Unified Security Management (USM) platform delivers
>>>     complete
>>>     security visibility with the essential security capabilities.
>>>     Easily and
>>>     efficiently configure, manage, and operate all of your security
>>>     controls
>>>     from a single console and one unified framework. Download a free
>>>     trial.
>>>     http://p.sf.net/sfu/alienvault_d2d
>>>     _______________________________________________
>>>     Bitcoin-development mailing list
>>>     Bitcoin-development at lists.sourceforge.net
>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>>
>>>
>>> -- 
>>> Are you coming to Bitcoin2013 <http://bitcoin2013.com> in San Jose In
>>> May? 
>>> ------------------------------------------------------------------------
>>>
>>> CoinLab LogoPETER VESSENES 
>>> CEO
>>>
>>> *peter at coinlab.com <mailto:peter at coinlab.com> * /  206.486.6856
>>>  / SKYPE: vessenes 
>>> 71 COLUMBIA ST / SUITE 300  /  SEATTLE, WA 98104
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> AlienVault Unified Security Management (USM) platform delivers complete
>>> security visibility with the essential security capabilities. Easily and
>>> efficiently configure, manage, and operate all of your security controls
>>> from a single console and one unified framework. Download a free trial.
>>> http://p.sf.net/sfu/alienvault_d2d
>>>
>>>
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>> ------------------------------------------------------------------------------
>> AlienVault Unified Security Management (USM) platform delivers complete
>> security visibility with the essential security capabilities. Easily and
>> efficiently configure, manage, and operate all of your security controls
>> from a single console and one unified framework. Download a free trial.
>> http://p.sf.net/sfu/alienvault_d2d
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>




From adam at cypherspace.org  Tue Oct 15 13:34:46 2013
From: adam at cypherspace.org (Adam Back)
Date: Tue, 15 Oct 2013 15:34:46 +0200
Subject: [Bitcoin-development] two comments on brain-wallet security (and
	BIP 38)
Message-ID: <20131015133446.GA5690@netbook.cypherspace.org>

So I had a go at deciphering BIP 038 in summary what I think its doing is
(ommitting lot and sequence and deterinistic IVs for simplicity):

user:

x1 = Scrypt( salt=random, pass )
P = x1*G

send (salt, P) to coin manufacturer -> 

				manufacturer:

				x2 = random 24bytes
				Q = x2*P
				k = Scrypt( salt2=H(Q)||salt, pass=P )
				e = AES_k( x2 )

				manufacturer puts es inside coin.

		<- send coin, (salt, e, Q) to user

				then optionally creates conf code:

				B = x2*G
				c = AES_k( B )

		<- send conf code c to user

verify code c:

(by recreating P, then k from Q & P, decrypt c to get B, check Q = x1*B)

x1 = Scrypt( salt, pass )
P = x1*G
k = Scrypt( salt2=H(Q)||salt, pass=P )

Which seems reasonable enough, however its unfortunate that you have to
repeat the Scrypt work at setup.

One thing that occurs to me eg as mentioned by Rivest et al in their
time-lock puzzle paper is that it is easy to create work, if you are ok with
parallelizable symmetric constructions (like scrypt(i) or PBKDF2(i) with i
iterations) without *doing* the work during setup.

It seems to me therefore that the above protocol could avoid the javascript
overhead issue that forces users to choose a weak iteration level if they
want to create the wallet in that way.

eg create a 32-bit random salt, replace scrypt(i=16384, salt, pass) with
scrypt(i=1,salt, pass) to be brute forced based on deleted salt.  Immediate
2^32 = 4billion iteration salt without any significant setup cost.  (Or if
you want to limit the parallelism say scrypt(i=65536, salt, pass) with a
deleted 16-bit salt.  That should be parallelizable up to 65536 GPU cores
(32x 7970 chips).

Symmetric time-lock puzzles can achieve decrypt asymmetry without repeating
the work at setup...

(Rivest et al goes on to avoid using that symmetric construct with an RSA
related mechanism, because they are trying to lock information for an
approximate future date, rather than protected by a specific amount of
grinding work.)


I proposed a different blind (securely server-offloadable) deterministic
proof of work relating to (asymmetric RSA-style) time-lock puzzles.  The
difference from time-lock is it is made blind (so the work can be securely
offloaded without the server learning your password or resulting key) and
can be easily made parallelizable also which is desirable for server
offload.

https://bitcointalk.org/index.php?topic=311000.new#new

I think that could take brain-wallets to a new level of security, if you
protect the amount by an amount of computation proportional to the value, eg
0.1% or 0.01% redemption cost paid to blind proof of work miners.

Adam



From w at grabhive.com  Fri Oct 18 11:56:09 2013
From: w at grabhive.com (Wendell)
Date: Fri, 18 Oct 2013 13:56:09 +0200
Subject: [Bitcoin-development] An "app store" and non-network
	transaction fees
In-Reply-To: <CANEZrP1zAJ0bQHsqKgH=L4BpgE_kHGKNh=+mv=Tk++7OWA4C2g@mail.gmail.com>
References: <879EBFD7-3047-4ECD-B03B-941857F7970C@grabhive.com>
	<CANEZrP1zAJ0bQHsqKgH=L4BpgE_kHGKNh=+mv=Tk++7OWA4C2g@mail.gmail.com>
Message-ID: <603C4126-241E-41BE-8C01-D8D390B0F725@grabhive.com>

We've gone ahead and pushed a v1 API for this idea:
https://bitcointalk.org/index.php?topic=313352

No fees yet, just the basics.

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Sep 5, 2013, at 10:26 AM, Mike Hearn wrote:

> Hey Wendell,
> 
> Interesting idea you have there!




From jan.marecek at gmail.com  Fri Oct 18 23:52:58 2013
From: jan.marecek at gmail.com (jan)
Date: Sat, 19 Oct 2013 10:52:58 +1100
Subject: [Bitcoin-development] BIP39 word list
Message-ID: <87iowuuof9.fsf@gmail.com>


The words 'public', 'private' and 'secret' could be confusing when
encoding public and private keys. eg. a private key that begins with
the word 'public'.

I think avoiding words that could look similar when written down would
be a good idea aswell. I searched for words that only differ by the
letters c & e, g & y, u & v and found the following:

car ear
cat eat
gear year
value valve

Other combinations could potentially be problematic depending on the
handwriting style: ft, ao, ij, vy, possibly even lt and il?

I've included the search utility I used below.


#include <stdbool.h>
#include <string.h>
#include <stdio.h>

char *similar_char_pairs[] = { "ce", "gy", "uv", NULL };

bool is_similar_char(char c1, char c2)
{
  char **pairs = similar_char_pairs;
  do {
    char *p = *pairs;
    if ((c1 == p[0] && c2 == p[1]) ||
        (c1 == p[1] && c2 == p[0]))
      return true;
  } while (*++pairs);

  return false;
}

bool print_words_if_similar(char *word1, char *word2)
{
  /* reject words of different lengths */
  if (strlen(word1) != strlen(word2))
    return false;

  size_t i, similarcount = 0;
  
  for (i = 0; i < strlen(word1); i++) {
    /* skip identical letters */
    if (word1[i] == word2[i])
      continue;

    /* reject words that don't match */
    if (is_similar_char(word1[i], word2[i]) == false)
      return false;

    similarcount++;
  }

  /* reject words with more than 1 different letter */
  //if (similarcount > 1)
  //  return false;

  printf("%s %s\n", word1, word2);

  return true;
}

int main(void)
{
  /* english.txt is assumed to exist in the working directory
     download from:
     https://github.com/trezor/python-mnemonic/blob/master/mnemonic/wordlist/english.txt */
  FILE* f = fopen("english.txt", "r");
  if (!f) {
    fprintf(stderr, "failed to open english.txt\n");
    return 1;
  }

  /* read in word list, assumes one word per line */
  #define MAXWORD 16
  char wordlist[2048][MAXWORD];
  int word = 0;
  while (fgets(wordlist[word], MAXWORD, f)) {
    /* strip trailing whitespace, assumes no leading whitespace */
    char *ch = strpbrk(wordlist[word], " \n\t");
    if (ch)
      *ch = '\0';
    word++;
  }

  if (word != 2048) {
    fprintf(stderr, "word list incorrect length\n");
    return 1;
  }

  /* check each word for similarity against every other word */
  int i, j, count = 0;
  for (i = 0; i < 2048; i++) {
    for (j = i+1; j < 2048; j++) {
      if (print_words_if_similar(wordlist[i], wordlist[j]))
        count++;
    }
  }

  printf("%d matches\n", count);
  
  return 0;
}



From gmaxwell at gmail.com  Fri Oct 18 23:58:27 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 18 Oct 2013 16:58:27 -0700
Subject: [Bitcoin-development] BIP39 word list
In-Reply-To: <87iowuuof9.fsf@gmail.com>
References: <87iowuuof9.fsf@gmail.com>
Message-ID: <CAAS2fgQ1uYvNxZu6DOKZ2k9qj2kYhGpHxxzsZdsqb-Oi2uSKmw@mail.gmail.com>

some fairly old wordlist solver code of mine:

https://people.xiph.org/~greg/wordlist.visual.py

it has a 52x52 letter visual similarity matrix in it (along with a citation)

On Fri, Oct 18, 2013 at 4:52 PM, jan <jan.marecek at gmail.com> wrote:
>
> The words 'public', 'private' and 'secret' could be confusing when
> encoding public and private keys. eg. a private key that begins with
> the word 'public'.
>
> I think avoiding words that could look similar when written down would
> be a good idea aswell. I searched for words that only differ by the
> letters c & e, g & y, u & v and found the following:
>
> car ear
> cat eat
> gear year
> value valve
>
> Other combinations could potentially be problematic depending on the
> handwriting style: ft, ao, ij, vy, possibly even lt and il?
>
> I've included the search utility I used below.
>
>
> #include <stdbool.h>
> #include <string.h>
> #include <stdio.h>
>
> char *similar_char_pairs[] = { "ce", "gy", "uv", NULL };
>
> bool is_similar_char(char c1, char c2)
> {
>   char **pairs = similar_char_pairs;
>   do {
>     char *p = *pairs;
>     if ((c1 == p[0] && c2 == p[1]) ||
>         (c1 == p[1] && c2 == p[0]))
>       return true;
>   } while (*++pairs);
>
>   return false;
> }
>
> bool print_words_if_similar(char *word1, char *word2)
> {
>   /* reject words of different lengths */
>   if (strlen(word1) != strlen(word2))
>     return false;
>
>   size_t i, similarcount = 0;
>
>   for (i = 0; i < strlen(word1); i++) {
>     /* skip identical letters */
>     if (word1[i] == word2[i])
>       continue;
>
>     /* reject words that don't match */
>     if (is_similar_char(word1[i], word2[i]) == false)
>       return false;
>
>     similarcount++;
>   }
>
>   /* reject words with more than 1 different letter */
>   //if (similarcount > 1)
>   //  return false;
>
>   printf("%s %s\n", word1, word2);
>
>   return true;
> }
>
> int main(void)
> {
>   /* english.txt is assumed to exist in the working directory
>      download from:
>      https://github.com/trezor/python-mnemonic/blob/master/mnemonic/wordlist/english.txt */
>   FILE* f = fopen("english.txt", "r");
>   if (!f) {
>     fprintf(stderr, "failed to open english.txt\n");
>     return 1;
>   }
>
>   /* read in word list, assumes one word per line */
>   #define MAXWORD 16
>   char wordlist[2048][MAXWORD];
>   int word = 0;
>   while (fgets(wordlist[word], MAXWORD, f)) {
>     /* strip trailing whitespace, assumes no leading whitespace */
>     char *ch = strpbrk(wordlist[word], " \n\t");
>     if (ch)
>       *ch = '\0';
>     word++;
>   }
>
>   if (word != 2048) {
>     fprintf(stderr, "word list incorrect length\n");
>     return 1;
>   }
>
>   /* check each word for similarity against every other word */
>   int i, j, count = 0;
>   for (i = 0; i < 2048; i++) {
>     for (j = i+1; j < 2048; j++) {
>       if (print_words_if_similar(wordlist[i], wordlist[j]))
>         count++;
>     }
>   }
>
>   printf("%d matches\n", count);
>
>   return 0;
> }
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From stick at gk2.sk  Sat Oct 19 10:11:26 2013
From: stick at gk2.sk (Pavol Rusnak)
Date: Sat, 19 Oct 2013 12:11:26 +0200
Subject: [Bitcoin-development] BIP39 word list
In-Reply-To: <CAAS2fgQ1uYvNxZu6DOKZ2k9qj2kYhGpHxxzsZdsqb-Oi2uSKmw@mail.gmail.com>
References: <87iowuuof9.fsf@gmail.com>
	<CAAS2fgQ1uYvNxZu6DOKZ2k9qj2kYhGpHxxzsZdsqb-Oi2uSKmw@mail.gmail.com>
Message-ID: <52625ACE.8070101@gk2.sk>

On 19/10/13 01:58, Gregory Maxwell wrote:
> https://people.xiph.org/~greg/wordlist.visual.py

>> I've included the search utility I used below.

Yeah, there are lots of tools on the Internet. Posting links to them is
not helping. Sending pull requests with particular changesets with
explanation is. Well, or rather was. I think we are past the point where
it was wise to introduce changes to the word list ... (especially when
50 people have 51 different opinions on this topic)

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From mmitar at gmail.com  Sat Oct 19 16:38:30 2013
From: mmitar at gmail.com (Mitar)
Date: Sat, 19 Oct 2013 09:38:30 -0700
Subject: [Bitcoin-development] A critique of bitcoin open source community
Message-ID: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>

Hi!

Interesting read:

http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html


Mitar

-- 
http://mitar.tnode.com/
https://twitter.com/mitar_m



From melvincarvalho at gmail.com  Sat Oct 19 16:50:25 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sat, 19 Oct 2013 18:50:25 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
Message-ID: <CAKaEYhLscsEcH-xuzBsCy73HdqfLgZfUiP51s7W-wOAfK-3EQg@mail.gmail.com>

On 19 October 2013 18:38, Mitar <mmitar at gmail.com> wrote:

> Hi!
>
> Interesting read:
>
>
> http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html
>

Im sympathetic to some of the points, but it seems slightly harsh.  I do
agree that we're lucky to have the excellent leadership of Gavin, who I
think is a great role model.

Perhaps the bitcoin community is at a size where it may benefit from a
loose code of conduct.  The ubuntu code of conduct has been excellent in
this respect, in helping to grow that community:

http://www.ubuntu.com/about/about-ubuntu/conduct

[[

Ubuntu Code of Conduct v2.0
Community

Ubuntu is about showing humanity to one another: the word itself captures
the spirit of being human.

We want a productive, happy and agile community that can welcome new ideas
in a complex field, improve every process every year, and foster
collaboration between groups with very different needs, interests and
skills.

We gain strength from diversity, and actively seek participation from those
who enhance it. This code of conduct exists to ensure that diverse groups
collaborate to mutual advantage and enjoyment. We will challenge prejudice
that could jeopardise the participation of any person in the project.

The Code of Conduct governs how we behave in public or in private whenever
the project will be judged by our actions. We expect it to be honored by
everyone who represents the project officially or informally, claims
affiliation with the project, or participates directly.
We strive to:

Be considerate

Our work will be used by other people, and we in turn will depend on the
work of others. Any decision we take will affect users and colleagues, and
we should consider them when making decisions.

Be respectful

Disagreement is no excuse for poor manners. We work together to resolve
conflict, assume good intentions and do our best to act in an empathic
fashion. We don't allow frustration to turn into a personal attack. A
community where people feel uncomfortable or threatened is not a productive
one.

Take responsibility for our words and our actions

We can all make mistakes; when we do, we take responsibility for them. If
someone has been harmed or offended, we listen carefully and respectfully,
and work to right the wrong.

Be collaborative

What we produce is a complex whole made of many parts, it is the sum of
many dreams. Collaboration between teams that each have their own goal and
vision is essential; for the whole to be more than the sum of its parts,
each part must make an effort to understand the whole.

Collaboration reduces redundancy and improves the quality of our work.
Internally and externally, we celebrate good collaboration. Wherever
possible, we work closely with upstream projects and others in the free
software community to coordinate our efforts. We prefer to work
transparently and involve interested parties as early as possible.

Value decisiveness, clarity and consensus

Disagreements, social and technical, are normal, but we do not allow them
to persist and fester leaving others uncertain of the agreed direction.

We expect participants in the project to resolve disagreements
constructively. When they cannot, we escalate the matter to structures with
designated leaders to arbitrate and provide clarity and direction.

Ask for help when unsure

Nobody is expected to be perfect in this community. Asking questions early
avoids many problems later, so questions are encouraged, though they may be
directed to the appropriate forum. Those who are asked should be responsive
and helpful.

Step down considerately

When somebody leaves or disengages from the project, we ask that they do so
in a way that minimises disruption to the project. They should tell people
they are leaving and take the proper steps to ensure that others can pick
up where they left off.
Leadership, authority and responsibility

We all lead by example, in debate and in action. We encourage new
participants to feel empowered to lead, to take action, and to experiment
when they feel innovation could improve the project. Leadership can be
exercised by anyone simply by taking action, there is no need to wait for
recognition when the opportunity to lead presents itself.
Delegation from the top

Responsibility for the project starts with the "benevolent dictator", who
delegates specific responsibilities and the corresponding authority to a
series of teams, councils and individuals, starting with the Community
Council ("CC"). That Council or its delegated representative will arbitrate
in any dispute.

We are a meritocracy; we delegate decision making, governance and
leadership from senior bodies to the most able and engaged candidates.
Support for delegation is measured

Nominations to the boards and councils are at the discretion of the
Community Council, however the Community Council will seek the input of the
community before confirming appointments.

Leadership is not an award, right, or title; it is a privilege, a
responsibility and a mandate. A leader will only retain their authority as
long as they retain the support of those who delegated that authority to
them.
We value discussion, data and decisiveness

We gather opinions, data and commitments from concerned parties before
taking a decision. We expect leaders to help teams come to a decision in a
reasonable time, to seek guidance or be willing to take the decision
themselves when consensus is lacking, and to take responsibility for
implementation.

The poorest decision of all is no decision: clarity of direction has value
in itself. Sometimes all the data are not available, or consensus is
elusive. A decision must still be made. There is no guarantee of a perfect
decision every time - we prefer to err, learn, and err less in future than
to postpone action indefinitely.

We recognise that the project works better when we trust the teams closest
to a problem to make the decision for the project. If we learn of a
decision that we disagree with, we can engage the relevant team to find
common ground, and failing that, we have a governance structure that can
review the decision. Ultimately, if a decision has been taken by the people
responsible for it, and is supported by the project governance, it will
stand. None of us expects to agree with every decision, and we value highly
the willingness to stand by the project and help it deliver even on the
occasions when we ourselves may prefer a different route.
Open meritocracy

We invite anybody, from any company, to participate in any aspect of the
project. Our community is open, and any responsibility can be carried by
any contributor who demonstrates the required capacity and competence.
Teamwork

A leader's foremost goal is the success of the team.

"A virtuoso is judged by their actions; a leader is judged by the actions
of their team." A leader knows when to act and when to step back. They know
when to delegate work, and when to take it upon themselves.
Credit

A good leader does not seek the limelight, but celebrates team members for
the work they do. Leaders may be more visible than members of the team,
good ones use that visibility to highlight the great work of others.
Courage and considerateness

Leadership occasionally requires bold decisions that will not be widely
understood, consensual or popular. We value the courage to take such
decisions, because they enable the project as a whole to move forward
faster than we could if we required complete consensus. Nevertheless,
boldness demands considerateness; take bold decisions, but do so mindful of
the challenges they present for others, and work to soften the impact of
those decisions on them. Communicating changes and their reasoning clearly
and early on is as important as the implementation of the change itself.
Conflicts of interest

We expect leaders to be aware when they are conflicted due to employment or
other projects they are involved in, and abstain or delegate decisions that
may be seen to be self-interested. We expect that everyone who participates
in the project does so with the goal of making life better for its users.

When in doubt, ask for a second opinion. Perceived conflicts of interest
are important to address; as a leader, act to ensure that decisions are
credible even if they must occasionally be unpopular, difficult or
favourable to the interests of one group over another.

This Code is not exhaustive or complete. It is not a rulebook; it serves to
distill our common understanding of a collaborative, shared environment and
goals. We expect it to be followed in spirit as much as in the letter.

The Ubuntu Code of Conduct is licensed under the Creative Commons
Attribution-Share Alike 3.0 license. You may re-use it for your own
project, and modify it as you wish, just please allow others to use your
modifications and give credit to the Ubuntu Project!

]]


>
>
> Mitar
>
> --
> http://mitar.tnode.com/
> https://twitter.com/mitar_m
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/c6a2e96a/attachment.html>

From gmaxwell at gmail.com  Sat Oct 19 20:40:10 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 19 Oct 2013 13:40:10 -0700
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
Message-ID: <CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>

On Sat, Oct 19, 2013 at 9:38 AM, Mitar <mmitar at gmail.com> wrote:
> Hi!
> Interesting read:
> http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html

Hopefully Nick will show up someplace and offer some specific pointers
to where we failed him.

The only interaction I can find from him on IRC is in #bitcoin, rather
than #bitcoin-dev:

--- Day changed Mon Sep 16 2013
11:45 < csmpls> Hi, I'm interested in contributing to the official
bitcoin project. Is there a mailing list I can join?
11:46 < neo2> csmpls, contributing how?
11:47 < csmpls> neo2 - probably start by approaching a low priority
issue like this one https://github.com/bitcoin/bitcoin/issues/2545
11:48 < michagogo> csmpls: There *is* a mailing list
11:48 < michagogo> ;;google bitcoin-dev mailing list
11:48 <@gribble> SourceForge.net: Bitcoin: bitcoin-development:
<http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development>;
Bitcoin-development Info
11:48 < csmpls> Great, thanks.
11:48 < michagogo> I don't know how active it is, though
11:49 < michagogo> There's also the #bitcoin-dev channel

I got involved with Bitcoin without previously interacting with other
contributors (AFAIK) and maybe things have changed in ways invisibly
to me. But I don't think so. Michagogo, who was answering there, is a
newer participant and I don't think anyone knows him from anywhere.
Certainly if things have become less welcome to new participants that
would be bad.

I can point out a number of other recent contributors who, as far as I
can tell, just showed up and stared contributing.  But I don't think
that the existence of exceptions is sufficiently strong evidence that
there isn't a problem.

The specific complaints I can extract from that article are:

"I wasn't even allowed to edit the wiki"

I'm confused about this, if he's referring to en.bitcoin.it.  Editing
it is open to anyone who is willing to pay the 0.01
(https://en.bitcoin.it/wiki/BitcoinPayment) anti-spam fee. This isn't
a policy set by the bitcoin development community, though I'm not sure
that its a terrible one. I've both paid it on behalf of other users
and made edits on behalf of people who didn't want to go to it.  At
least relative to some policy which requires actual approval the
payment antispam is at least open to anyone with Bitcoin.

"My IRC questions about issues on the github page were never answered"

Without a nick I'm unable to find more than the above, unfortunately.
So I don't yet know what we need to improve there.

"#bitcoin-dev would rather talk about conspiracies, or about
destroying other cryptocurrencies"

I've been pretty aggressive about punting out offtopic conversation
from #bitcoin-dev lately. Enough that I worried that my actions would
be the inspiration for this complaint. Much of the time discussion
like that is brought in and primarily continued by people who are not
active in the development community at all, but deflecting it to other
challenge without creating a hostile environment (or one that merely
feels hostile to new people) is hard.  Nicks comments themselves may
be a useful thing for me to show to people in the future on that
point.

"Bitcoiners are a bunch of paranoid, anti-authoritarian nutjobs"

I actually don't think that this stereotype accurately reflects the
development community. (In fact, I personally enjoy the great sport of
being called a statist by some of these aformentioned jutjobs, but
none of them are developers). On his other article Nick also asserts
"Most contributors hide their identities", but this is factually
untrue as far as I can tell. (In that same article he writes,
"Bitcoin's core code is written in Typescript, which is compiled into
C++"?)

"I looked at the many items sitting in pull request purgatory"

Many of the long standing pull requests are actually created by people
with direct commit access.  We use a model which has a relatively long
pipeline, a fact which I think is justified by the safety
criticialness of the software and our current shortages of active
review. Hopefully long term motion towards increased codebase
modularity will allow faster merging of "safe" changes.

But I suspect there will always be a backlog, at least of "unsafe" changes.

Which brings me to,

"I didn't even know what I had to do"

Above all, I think the most important takeaway from this is that we
need to have better introductory materials.

One obvious place to put them would be
http://bitcoin.org/en/development  but the IRC question makes me
believe that Nick hadn't actually found that page, it's a little
buried.



From mmitar at gmail.com  Sat Oct 19 21:09:09 2013
From: mmitar at gmail.com (Mitar)
Date: Sat, 19 Oct 2013 14:09:09 -0700
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
Message-ID: <CAKLmikMq5VpRscZ7VB1NuzDdP+9FoJRtqgagQT=1+frpSwejFQ@mail.gmail.com>

Hi!

Gregory, thank you for your time and answers. Just maybe to clarify
where Nick is coming from, there are two previous articles:

http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign1.html
http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign2.html


Mitar

On Sat, Oct 19, 2013 at 1:40 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Sat, Oct 19, 2013 at 9:38 AM, Mitar <mmitar at gmail.com> wrote:
>> Hi!
>> Interesting read:
>> http://courses.ischool.berkeley.edu/i290m-ocpp/site/article/nmerrill-assign3.html
>
> Hopefully Nick will show up someplace and offer some specific pointers
> to where we failed him.
>
> The only interaction I can find from him on IRC is in #bitcoin, rather
> than #bitcoin-dev:
>
> --- Day changed Mon Sep 16 2013
> 11:45 < csmpls> Hi, I'm interested in contributing to the official
> bitcoin project. Is there a mailing list I can join?
> 11:46 < neo2> csmpls, contributing how?
> 11:47 < csmpls> neo2 - probably start by approaching a low priority
> issue like this one https://github.com/bitcoin/bitcoin/issues/2545
> 11:48 < michagogo> csmpls: There *is* a mailing list
> 11:48 < michagogo> ;;google bitcoin-dev mailing list
> 11:48 <@gribble> SourceForge.net: Bitcoin: bitcoin-development:
> <http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development>;
> Bitcoin-development Info
> 11:48 < csmpls> Great, thanks.
> 11:48 < michagogo> I don't know how active it is, though
> 11:49 < michagogo> There's also the #bitcoin-dev channel
>
> I got involved with Bitcoin without previously interacting with other
> contributors (AFAIK) and maybe things have changed in ways invisibly
> to me. But I don't think so. Michagogo, who was answering there, is a
> newer participant and I don't think anyone knows him from anywhere.
> Certainly if things have become less welcome to new participants that
> would be bad.
>
> I can point out a number of other recent contributors who, as far as I
> can tell, just showed up and stared contributing.  But I don't think
> that the existence of exceptions is sufficiently strong evidence that
> there isn't a problem.
>
> The specific complaints I can extract from that article are:
>
> "I wasn't even allowed to edit the wiki"
>
> I'm confused about this, if he's referring to en.bitcoin.it.  Editing
> it is open to anyone who is willing to pay the 0.01
> (https://en.bitcoin.it/wiki/BitcoinPayment) anti-spam fee. This isn't
> a policy set by the bitcoin development community, though I'm not sure
> that its a terrible one. I've both paid it on behalf of other users
> and made edits on behalf of people who didn't want to go to it.  At
> least relative to some policy which requires actual approval the
> payment antispam is at least open to anyone with Bitcoin.
>
> "My IRC questions about issues on the github page were never answered"
>
> Without a nick I'm unable to find more than the above, unfortunately.
> So I don't yet know what we need to improve there.
>
> "#bitcoin-dev would rather talk about conspiracies, or about
> destroying other cryptocurrencies"
>
> I've been pretty aggressive about punting out offtopic conversation
> from #bitcoin-dev lately. Enough that I worried that my actions would
> be the inspiration for this complaint. Much of the time discussion
> like that is brought in and primarily continued by people who are not
> active in the development community at all, but deflecting it to other
> challenge without creating a hostile environment (or one that merely
> feels hostile to new people) is hard.  Nicks comments themselves may
> be a useful thing for me to show to people in the future on that
> point.
>
> "Bitcoiners are a bunch of paranoid, anti-authoritarian nutjobs"
>
> I actually don't think that this stereotype accurately reflects the
> development community. (In fact, I personally enjoy the great sport of
> being called a statist by some of these aformentioned jutjobs, but
> none of them are developers). On his other article Nick also asserts
> "Most contributors hide their identities", but this is factually
> untrue as far as I can tell. (In that same article he writes,
> "Bitcoin's core code is written in Typescript, which is compiled into
> C++"?)
>
> "I looked at the many items sitting in pull request purgatory"
>
> Many of the long standing pull requests are actually created by people
> with direct commit access.  We use a model which has a relatively long
> pipeline, a fact which I think is justified by the safety
> criticialness of the software and our current shortages of active
> review. Hopefully long term motion towards increased codebase
> modularity will allow faster merging of "safe" changes.
>
> But I suspect there will always be a backlog, at least of "unsafe" changes.
>
> Which brings me to,
>
> "I didn't even know what I had to do"
>
> Above all, I think the most important takeaway from this is that we
> need to have better introductory materials.
>
> One obvious place to put them would be
> http://bitcoin.org/en/development  but the IRC question makes me
> believe that Nick hadn't actually found that page, it's a little
> buried.



-- 
http://mitar.tnode.com/
https://twitter.com/mitar_m



From jeanpaulkogelman at me.com  Sat Oct 19 21:16:24 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sat, 19 Oct 2013 14:16:24 -0700
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
Message-ID: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>

On 2013-10-19, at 1:40 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> 
> "I wasn't even allowed to edit the wiki"
> 
> I'm confused about this, if he's referring to en.bitcoin.it.  Editing
> it is open to anyone who is willing to pay the 0.01
> (https://en.bitcoin.it/wiki/BitcoinPayment) anti-spam fee. This isn't
> a policy set by the bitcoin development community, though I'm not sure
> that its a terrible one. I've both paid it on behalf of other users
> and made edits on behalf of people who didn't want to go to it.  At
> least relative to some policy which requires actual approval the
> payment antispam is at least open to anyone with Bitcoin.


I have a question regarding this part. I wrote a BIP for base 58 encoding / encryption of BIP 32 root keys. The BIP page states that we shouldn't add to this list ourselves, but should contact you for a BIP number. I have contacted you a couple times on bitcointalk for a BIP number, but haven't received a response (or do those requests explicitly have to go to your email address)? 

Proposal in question: https://bitcointalk.org/index.php?topic=258678.0


Cheers,

jp

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/198c2b9c/attachment.sig>

From mike at plan99.net  Sat Oct 19 22:33:36 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 20 Oct 2013 00:33:36 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
Message-ID: <CANEZrP0t1pCN0rw7gLRngbvi_CT7rFk-R23XQha9gC5r1ueO4A@mail.gmail.com>

I was hoping to see something interesting and useful, but all I saw was
absurd ranting. Example quote:

It is not known where bitcoin contributors are based. Gavin Andersson, a
major contributor, is a well-known South African
anarchist/crypto-libertarian. Most contributors hide their identities.
I don't know who this guy is or why anyone should care what he thinks, but
I doubt any of us have time for someone who can't even be bothered spelling
Gavin's name correctly, thinks he is South African or would describe him as
an anarchist.

Open source development can be intimidating and brutal at times, it's
probably one factor that causes the massive gender skew. But many pages
have been written on that topic, here is probably not the right place to
thrash it out for the umpteenth time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/c2a1312e/attachment.html>

From luke at dashjr.org  Sat Oct 19 22:29:19 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 19 Oct 2013 22:29:19 +0000
Subject: [Bitcoin-development]
 =?iso-8859-15?q?A_critique_of_bitcoin_open_?=
 =?iso-8859-15?q?source=09community?=
In-Reply-To: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
Message-ID: <201310192229.19932.luke@dashjr.org>

On Saturday, October 19, 2013 9:16:24 PM Jean-Paul Kogelman wrote:
> I have a question regarding this part. I wrote a BIP for base 58 encoding /
> encryption of BIP 32 root keys. The BIP page states that we shouldn't add
> to this list ourselves, but should contact you for a BIP number. I have
> contacted you a couple times on bitcointalk for a BIP number, but haven't
> received a response (or do those requests explicitly have to go to your
> email address)?

See BIP 1 for the process.. proposals go to this mailing list first.

Luke



From gmaxwell at gmail.com  Sat Oct 19 23:13:48 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 19 Oct 2013 16:13:48 -0700
Subject: [Bitcoin-development] Root key encoding / BIP process Was: A
 critique of bitcoin open source community
Message-ID: <CAAS2fgSBHC2XMdaPuqb1PEqoqzM_Jc-taDtUCnRak-n96dzGhA@mail.gmail.com>

On Sat, Oct 19, 2013 at 2:16 PM, Jean-Paul Kogelman
<jeanpaulkogelman at me.com> wrote:
> I have a question regarding this part. I wrote a BIP for base 58 encoding / encryption of BIP 32 root keys. The BIP page states that we shouldn't add to this list ourselves, but should contact you for a BIP number. I have contacted you a couple times on bitcointalk for a BIP number, but haven't received a response (or do those requests explicitly have to go to your email address)?
>
> Proposal in question: https://bitcointalk.org/index.php?topic=258678.0

I responded to you in PM on July 19, 2013, 05:57:15 PM.

Then I followed up with a technical review after I didn't see much
other technical review happening:

https://bitcointalk.org/index.php?topic=258678.msg3128364#msg3128364

Which you responded to, correcting a few of my misunderstandings and
offering to make changes to the specification to make it more clear
and to correct a few of the limitations I pointed out.

At that point I put aside further action on your proposal waiting for
you to make those updates.

The reason to go through a serialization point for BIP numbers is to
avoid assigning them to things to people's pet ideas that haven't been
reviewed by or represent any identifiable part of the Bitcoin
community. (After all: You're free to publish any specs at all on your
own without a BIP. BIPs are not "official" but they should be stronger
than "some guy says this" if they are to mean anything).  I don't
generally see my role in this process as acting as an approver, but
rather just someone recognizing approval that already exists.

Generally I try not to assign numbers to things before I see evidence
of discussion which I can reasonably expect to result in an "community
outcome".  In some cases this means that I'll take up the role of
going through and being a second set of eyes on the document myself
(directly contributing to creating some community approval), as I did
in this case.

On October 2nd, you followed up with
https://bitcointalk.org/index.php?topic=258678.msg3287415#msg3287415
indicating that you'd made the changes addressing my points.

My apologies, I missed this completely as I not working on Bitcoin
things pretty much at all during 09/26 to 10/13 due to other
obligations. Thanks for your patience. Following up here was
absolutely the right thing to do if I'm dropping the ball.

Pieter, do you have any opinions to offer on this?  (Also, generally
to the list. I'm singling out Pieter only because just asking "anyone"
to comment tends to be less effective.)



From gmaxwell at gmail.com  Sat Oct 19 23:20:59 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 19 Oct 2013 16:20:59 -0700
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <201310192229.19932.luke@dashjr.org>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
Message-ID: <CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>

On Sat, Oct 19, 2013 at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:
> See BIP 1 for the process.. proposals go to this mailing list first.

FWIW, he did post to the mailing list and he got an underwhelming response:

http://sourceforge.net/mailarchive/forum.php?thread_name=20ec1e35-3051-45d6-b449-e4a4d5c06dc8%40me.com&forum_name=bitcoin-development

When I responded to him on BCT I said "I was about to suggest you hit
the mailing list for some initial comments first? but I see you've
done that. I'll issue a number in a couple days once there has been a
little chance for some discussion.".

Since much discussion didn't materialize I went and gave it a
technical once over, posting to the forum.  In hindsight, I probably
should have also posted my review to the mailing list, which might
have served to restart some additional discussion.



From jeanpaulkogelman at me.com  Sat Oct 19 23:21:42 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sat, 19 Oct 2013 16:21:42 -0700
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <201310192229.19932.luke@dashjr.org>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
Message-ID: <56E95E2C-D6C8-4563-9974-0E61F2DCAEDE@me.com>

I submitted the proposal to the mailing list on July 19, 2003.

 
On 2013-10-19, at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Saturday, October 19, 2013 9:16:24 PM Jean-Paul Kogelman wrote:
>> I have a question regarding this part. I wrote a BIP for base 58 encoding /
>> encryption of BIP 32 root keys. The BIP page states that we shouldn't add
>> to this list ourselves, but should contact you for a BIP number. I have
>> contacted you a couple times on bitcointalk for a BIP number, but haven't
>> received a response (or do those requests explicitly have to go to your
>> email address)?
> 
> See BIP 1 for the process.. proposals go to this mailing list first.
> 
> Luke
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/1a0c4767/attachment.sig>

From jeanpaulkogelman at me.com  Sat Oct 19 23:22:09 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sat, 19 Oct 2013 16:22:09 -0700
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <56E95E2C-D6C8-4563-9974-0E61F2DCAEDE@me.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<56E95E2C-D6C8-4563-9974-0E61F2DCAEDE@me.com>
Message-ID: <BDA5349F-45C3-4030-8041-E817DE7C75D0@me.com>


On 2013-10-19, at 4:21 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:

> I submitted the proposal to the mailing list on July 19, 2003.

That would be 2013. sorry.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/9197f456/attachment.sig>

From jeanpaulkogelman at me.com  Sat Oct 19 23:35:13 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sat, 19 Oct 2013 16:35:13 -0700
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
Message-ID: <19909B49-0895-4130-99FB-9A116140CFE9@me.com>


On 2013-10-19, at 4:20 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Sat, Oct 19, 2013 at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:
>> See BIP 1 for the process.. proposals go to this mailing list first.
> 
> FWIW, he did post to the mailing list and he got an underwhelming response:
> 
> http://sourceforge.net/mailarchive/forum.php?thread_name=20ec1e35-3051-45d6-b449-e4a4d5c06dc8%40me.com&forum_name=bitcoin-development

Although I agree that the number of responses on the mailing list was minimal, they were overall positive. Mike voiced concerns about not having a date field to limit the rescan when importing, but other than that, most of the discussion was on bitcointalk. I've made a number of revisions, trying to incorporate the suggestions that were given. Obviously this doesn't mean that the draft is final (specifically the KDF's that can be used is still up for debate and having 29 undefined ID's means it's reasonably future proof).

Having it on the BIP page doesn't make it any more official, I agree, but it does increase its exposure and will hopefully spark some more discussion.


jp
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/995fc3a3/attachment.sig>

From pete at petertodd.org  Sat Oct 19 23:57:46 2013
From: pete at petertodd.org (Peter Todd)
Date: Sat, 19 Oct 2013 19:57:46 -0400
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <19909B49-0895-4130-99FB-9A116140CFE9@me.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
Message-ID: <20131019235746.GA29032@savin>

On Sat, Oct 19, 2013 at 04:35:13PM -0700, Jean-Paul Kogelman wrote:
> > On Sat, Oct 19, 2013 at 3:29 PM, Luke-Jr <luke at dashjr.org> wrote:
> >> See BIP 1 for the process.. proposals go to this mailing list first.
> > 
> > FWIW, he did post to the mailing list and he got an underwhelming response:
> > 
> > http://sourceforge.net/mailarchive/forum.php?thread_name=20ec1e35-3051-45d6-b449-e4a4d5c06dc8%40me.com&forum_name=bitcoin-development
> 
> Although I agree that the number of responses on the mailing list was minimal, they were overall positive. Mike voiced concerns about not having a date field to limit the rescan when importing, but other than that, most of the discussion was on bitcointalk. I've made a number of revisions, trying to incorporate the suggestions that were given. Obviously this doesn't mean that the draft is final (specifically the KDF's that can be used is still up for debate and having 29 undefined ID's means it's reasonably future proof).
> 
> Having it on the BIP page doesn't make it any more official, I agree, but it does increase its exposure and will hopefully spark some more discussion.

Having it on the BIP page *does* make it more official, at least the way
we've been using the BIP page, which is to filter out the proposals that
haven't gotten much support at all. (or maybe are just controversial)

FWIW I myself haven't pushed hard for getting an "official" BIP number
for my draft NODE_BLOOM BIP, even though I've got support from most of
the dev team on the pull-request:
https://github.com/bitcoin/bitcoin/pull/2900 I'm probably at the point
where I could get one assigned - Litecoin for instance has made that
change - but really I just see that as a formality; that it's still a
controversial idea is much more relevant.

In any case I don't see any working code in your email, I'd suggest
writing some. You're BIP would be much more likely to be accepted if you
were more involved in wallet development.

-- 
'peter'[:-1]@petertodd.org
000000000000000ad5e0cbc9438203b9cf2dcae776774f59575e38fcefa802ed
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/535a9a14/attachment.sig>

From jeanpaulkogelman at me.com  Sun Oct 20 00:52:49 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sat, 19 Oct 2013 17:52:49 -0700
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <20131019235746.GA29032@savin>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
Message-ID: <9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>


>> Having it on the BIP page doesn't make it any more official, I agree, but it does increase its exposure and will hopefully spark some more discussion.
> 
> Having it on the BIP page *does* make it more official, at least the way
> we've been using the BIP page, which is to filter out the proposals that
> haven't gotten much support at all. (or maybe are just controversial)

Interesting. The main reason I wrote my proposal was because the only proposal that came close to covering the same area was BIP 39, which at that time had 2 paragraphs of text (although admittedly did link to a text file off site where the draft was being developed). And currently there are 2 proposals that have numbers allocated but are empty (BIP 40 and 41) with no references to the development or discussion.

I appreciate the fact that acceptance of proposals on the BIP page are more strict, but it may be desirable to have the enforcement be more uniform. Also, BIP 38 is gaining more acceptance out in the community (many sites support the import of these keys and a growing number of paper wallet sites / coin / card vendors are offering it as an option), yet it's still missing from the BIP list, which seems to me a bit counter to the arguments given about community acceptance.

> FWIW I myself haven't pushed hard for getting an "official" BIP number
> for my draft NODE_BLOOM BIP, even though I've got support from most of
> the dev team on the pull-request:
> https://github.com/bitcoin/bitcoin/pull/2900 I'm probably at the point
> where I could get one assigned - Litecoin for instance has made that
> change - but really I just see that as a formality; that it's still a
> controversial idea is much more relevant.


> In any case I don't see any working code in your email, I'd suggest
> writing some. You're BIP would be much more likely to be accepted if you
> were more involved in wallet development.

Good point. I'm developing my own client (which has the code up and running, with unit tests), but I'm not ready to release it just yet until I've got all the client's alpha features working. Would putting contact information there so people can ask for the relevant code be sufficient until I have my client up on github?


jp


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131019/237fe29a/attachment.sig>

From laanwj at gmail.com  Sun Oct 20 10:00:43 2013
From: laanwj at gmail.com (Wladimir)
Date: Sun, 20 Oct 2013 12:00:43 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
Message-ID: <CA+s+GJB04yBopuV7n2p2UsTCqwy_E=4-ingogne=DMNRS1DREw@mail.gmail.com>

On Sun, Oct 20, 2013 at 1:20 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> Since much discussion didn't materialize I went and gave it a
> technical once over, posting to the forum.


At least I now understand where he got the idea of bitcoin devs being a
bunch of paranoid, anti-authoritarian nutjobs :-) I've been on a lot of
forums in my life but never encountered one with such selfish, unhelpful,
trolling, complaining sods (well maybe apart from 15-year old gamers).

Nick couldn't have got that idea from discussion on this mailing list or
#bitcoin-dev. Please don't send anyone to that jungle. People shouldn't get
the idea that that the forum is our development community, or even endorsed
by the devs.

As for the real developer community, I haven't noticed so much
unfriendliness or closedness. But the core devs are with very few people
(certainly compared to the number of users) and reviewing and testing takes
time so pull requests, proposals and such can linger for a while. Which can
indeed be frustrating.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/e8f3e8eb/attachment.html>

From pete at petertodd.org  Sun Oct 20 22:43:16 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 20 Oct 2013 18:43:16 -0400
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
Message-ID: <20131020224316.GA25280@savin>

On Sat, Oct 19, 2013 at 05:52:49PM -0700, Jean-Paul Kogelman wrote:
> Interesting. The main reason I wrote my proposal was because the only proposal that came close to covering the same area was BIP 39, which at that time had 2 paragraphs of text (although admittedly did link to a text file off site where the draft was being developed). And currently there are 2 proposals that have numbers allocated but are empty (BIP 40 and 41) with no references to the development or discussion.
> 
> I appreciate the fact that acceptance of proposals on the BIP page are more strict, but it may be desirable to have the enforcement be more uniform. Also, BIP 38 is gaining more acceptance out in the community (many sites support the import of these keys and a growing number of paper wallet sites / coin / card vendors are offering it as an option), yet it's still missing from the BIP list, which seems to me a bit counter to the arguments given about community acceptance.

No, that just means the authors of BIP 38 know community acceptance is
the most important thing; BIP numbers are secondary.

FWIW I think that BIP's should have been done as a github repository,
allowing for dealing with this stuff transparently as a pull-request.
It'd also be useful to handle BIP's that way to make it easy to archive
them, update them, and keep a log of what and why they were updated.
Just put them in markdown format, which is pretty much feature
equivalent to the wiki now that markdown supports images.

> > FWIW I myself haven't pushed hard for getting an "official" BIP number
> > for my draft NODE_BLOOM BIP, even though I've got support from most of
> > the dev team on the pull-request:
> > https://github.com/bitcoin/bitcoin/pull/2900 I'm probably at the point
> > where I could get one assigned - Litecoin for instance has made that
> > change - but really I just see that as a formality; that it's still a
> > controversial idea is much more relevant.
> 
> 
> > In any case I don't see any working code in your email, I'd suggest
> > writing some. You're BIP would be much more likely to be accepted if you
> > were more involved in wallet development.
> 
> Good point. I'm developing my own client (which has the code up and running, with unit tests), but I'm not ready to release it just yet until I've got all the client's alpha features working. Would putting contact information there so people can ask for the relevant code be sufficient until I have my client up on github?

No, just put the client up on github. If you think actually using it is
dangerous, just delibrately make it hard to use for people who shouldn't
be using it. Leave out compilation documentation for instance, or make
it check that it's on testnet first and refuse to run if it isn't.

Pond for instance doesn't make binaries available:
https://pond.imperialviolet.org/ IIRC only recently have they provided a
makefile.

-- 
'peter'[:-1]@petertodd.org
000000000000000b647feda1820ad95b2ea9efb742e9087b022bd3d37530dc06
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/9bcede0e/attachment.sig>

From pete at petertodd.org  Sun Oct 20 23:11:43 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 20 Oct 2013 19:11:43 -0400
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <20131020224316.GA25280@savin>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
Message-ID: <20131020231143.GA1570@savin>

On Sun, Oct 20, 2013 at 06:43:16PM -0400, Peter Todd wrote:
> FWIW I think that BIP's should have been done as a github repository,
> allowing for dealing with this stuff transparently as a pull-request.
> It'd also be useful to handle BIP's that way to make it easy to archive
> them, update them, and keep a log of what and why they were updated.
> Just put them in markdown format, which is pretty much feature
> equivalent to the wiki now that markdown supports images.

Figures, I'm told that's exactly how they were first done -
https://github.com/genjix/bips - only people found it inconvenient and
used the wiki instead.

Pathetic IMO for standards, but it wouldn't exactly be the first time
I've seen strong resistance to using revision control. (I quite
literally work with rocket scientists/satellite engineers who can't be
convinced to use it)

I dunno, maybe something using git submodules or subtrees - letting the
individual BIP "owners" make changes frequently until they're happy -
might have more social acceptance.

-- 
'peter'[:-1]@petertodd.org
000000000000000aff52788645172e4acca1d9fc9387ebe4074d9ce275273b44
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/1596ffc7/attachment.sig>

From jgarzik at bitpay.com  Mon Oct 21 00:27:47 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sun, 20 Oct 2013 20:27:47 -0400
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <20131020224316.GA25280@savin>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
Message-ID: <CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>

On Sun, Oct 20, 2013 at 6:43 PM, Peter Todd <pete at petertodd.org> wrote:
> FWIW I think that BIP's should have been done as a github repository,
> allowing for dealing with this stuff transparently as a pull-request.
> It'd also be useful to handle BIP's that way to make it easy to archive
> them, update them, and keep a log of what and why they were updated.
> Just put them in markdown format, which is pretty much feature
> equivalent to the wiki now that markdown supports images.

Agreed -- let's do it.  I nominate you to do the conversion, and we'll
put it up at github.com/bitcoin/bips.git.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Mon Oct 21 06:25:55 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 21 Oct 2013 02:25:55 -0400
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
Message-ID: <20131021062555.GA10784@savin>

On Sun, Oct 20, 2013 at 08:27:47PM -0400, Jeff Garzik wrote:
> On Sun, Oct 20, 2013 at 6:43 PM, Peter Todd <pete at petertodd.org> wrote:
> > FWIW I think that BIP's should have been done as a github repository,
> > allowing for dealing with this stuff transparently as a pull-request.
> > It'd also be useful to handle BIP's that way to make it easy to archive
> > them, update them, and keep a log of what and why they were updated.
> > Just put them in markdown format, which is pretty much feature
> > equivalent to the wiki now that markdown supports images.
> 
> Agreed -- let's do it.  I nominate you to do the conversion, and we'll
> put it up at github.com/bitcoin/bips.git.

Done: https://github.com/petertodd/bips/

GitHub supports MediaWiki these days, so just directly copying from
'View Source' in the bitcoin.it wiki worked pretty well; I archived the
exact text of BIP. Tables, images and math is all supported by github
and look fine, although github doesn't seem to support coloration in
tables. Users wishing to edit their pull-req's or create new ones can do
so easily by forking the repository - they can see their changes as they
go in GitHub.

I've probably missed some stuff re: formatting, and I haven't changed
any of the submission guideline text in bip 1 yet, but that's probably
90% of the work done.

-- 
'peter'[:-1]@petertodd.org
000000000000000245a735ccc14b98552e152f773c07efa2e89dd7f0463f61cf
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/f953d505/attachment.sig>

From jeanpaulkogelman at me.com  Mon Oct 21 06:40:26 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sun, 20 Oct 2013 23:40:26 -0700
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <20131021062555.GA10784@savin>
References: <CAKLmikPZhhTs2rf5h52KHLrWB38S=JgiOc+pCPx0FXvT7c_aow@mail.gmail.com>
	<CAAS2fgTcTKAA0Xdzk3xZ-3sWwoPgPGmQdugG-0jjhPmntXitfQ@mail.gmail.com>
	<38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
Message-ID: <80401395-792A-4637-A75C-1D499C547F98@me.com>


I was wondering, would it be possible to create an area where proposals like your NODE_BLOOM and BIP 38 could live? 

On 2013-10-20, at 11:25 PM, Peter Todd <pete at petertodd.org> wrote:

> On Sun, Oct 20, 2013 at 08:27:47PM -0400, Jeff Garzik wrote:
>> On Sun, Oct 20, 2013 at 6:43 PM, Peter Todd <pete at petertodd.org> wrote:
>>> FWIW I think that BIP's should have been done as a github repository,
>>> allowing for dealing with this stuff transparently as a pull-request.
>>> It'd also be useful to handle BIP's that way to make it easy to archive
>>> them, update them, and keep a log of what and why they were updated.
>>> Just put them in markdown format, which is pretty much feature
>>> equivalent to the wiki now that markdown supports images.
>> 
>> Agreed -- let's do it.  I nominate you to do the conversion, and we'll
>> put it up at github.com/bitcoin/bips.git.
> 
> Done: https://github.com/petertodd/bips/
> 
> GitHub supports MediaWiki these days, so just directly copying from
> 'View Source' in the bitcoin.it wiki worked pretty well; I archived the
> exact text of BIP. Tables, images and math is all supported by github
> and look fine, although github doesn't seem to support coloration in
> tables. Users wishing to edit their pull-req's or create new ones can do
> so easily by forking the repository - they can see their changes as they
> go in GitHub.
> 
> I've probably missed some stuff re: formatting, and I haven't changed
> any of the submission guideline text in bip 1 yet, but that's probably
> 90% of the work done.
> 
> -- 
> 'peter'[:-1]@petertodd.org
> 000000000000000245a735ccc14b98552e152f773c07efa2e89dd7f0463f61cf

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/6a8548ee/attachment.sig>

From pete at petertodd.org  Mon Oct 21 06:43:20 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 21 Oct 2013 02:43:20 -0400
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <80401395-792A-4637-A75C-1D499C547F98@me.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
Message-ID: <20131021064320.GA17190@savin>

On Sun, Oct 20, 2013 at 11:40:26PM -0700, Jean-Paul Kogelman wrote:
> 
> I was wondering, would it be possible to create an area where proposals like your NODE_BLOOM and BIP 38 could live? 

Sure, I think Jeff mentioned the idea of a specific drafts/ directory
within the repository. (could also do a rejected/)

Less of an issue in some ways when it's all in git - just point people
to your bips fork.

-- 
'peter'[:-1]@petertodd.org
00000000000000099eaa116fac83a2b0e097cae3391c794990e128c8e162d91a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/98811e75/attachment.sig>

From jeanpaulkogelman at me.com  Mon Oct 21 06:52:45 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sun, 20 Oct 2013 23:52:45 -0700
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <20131021064320.GA17190@savin>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
	<20131021064320.GA17190@savin>
Message-ID: <AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>

How about putting them into sub directories that map onto the status of the BIP? 

Reading BIP 1, that would make: 

Accepted
Active
Draft
Deferred
Final
Rejected
Replaced
Withdrawn

Would that place NODE_BLOOM and BIP 38 in Deferred?


On 2013-10-20, at 11:43 PM, Peter Todd <pete at petertodd.org> wrote:

> On Sun, Oct 20, 2013 at 11:40:26PM -0700, Jean-Paul Kogelman wrote:
>> 
>> I was wondering, would it be possible to create an area where proposals like your NODE_BLOOM and BIP 38 could live? 
> 
> Sure, I think Jeff mentioned the idea of a specific drafts/ directory
> within the repository. (could also do a rejected/)
> 
> Less of an issue in some ways when it's all in git - just point people
> to your bips fork.
> 
> -- 
> 'peter'[:-1]@petertodd.org
> 00000000000000099eaa116fac83a2b0e097cae3391c794990e128c8e162d91a

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131020/9af62985/attachment.sig>

From jeanpaulkogelman at me.com  Mon Oct 21 07:07:53 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Mon, 21 Oct 2013 00:07:53 -0700
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <5264D1DB.5060107@250bpm.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
	<20131021064320.GA17190@savin>
	<AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
	<5264D1DB.5060107@250bpm.com>
Message-ID: <DEE378F5-8057-4C3C-8905-B1409E963521@me.com>

The list comes from BIP 1.

On 2013-10-21, at 12:03 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:

> On 21/10/13 08:52, Jean-Paul Kogelman wrote:
>> How about putting them into sub directories that map onto the status of the BIP?
>> 
>> Reading BIP 1, that would make:
>> 
>> Accepted
>> Active
>> Draft
>> Deferred
>> Final
>> Rejected
>> Replaced
>> Withdrawn
> 
> Have it been considered to do this via IETF? The process there is hardened by 40 years of experience and 7000+ RFCs. Probably better than anything you can devise yourself.
> 
> Martin

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/bce168ec/attachment.sig>

From sustrik at 250bpm.com  Mon Oct 21 07:03:55 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Mon, 21 Oct 2013 09:03:55 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>	<201310192229.19932.luke@dashjr.org>	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>	<20131019235746.GA29032@savin>	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>	<20131020224316.GA25280@savin>	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>	<20131021062555.GA10784@savin>	<80401395-792A-4637-A75C-1D499C547F98@me.com>	<20131021064320.GA17190@savin>
	<AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
Message-ID: <5264D1DB.5060107@250bpm.com>

On 21/10/13 08:52, Jean-Paul Kogelman wrote:
> How about putting them into sub directories that map onto the status of the BIP?
>
> Reading BIP 1, that would make:
>
> Accepted
> Active
> Draft
> Deferred
> Final
> Rejected
> Replaced
> Withdrawn

Have it been considered to do this via IETF? The process there is 
hardened by 40 years of experience and 7000+ RFCs. Probably better than 
anything you can devise yourself.

Martin



From sustrik at 250bpm.com  Mon Oct 21 07:28:39 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Mon, 21 Oct 2013 09:28:39 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <DEE378F5-8057-4C3C-8905-B1409E963521@me.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
	<20131021064320.GA17190@savin>
	<AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
	<5264D1DB.5060107@250bpm.com>
	<DEE378F5-8057-4C3C-8905-B1409E963521@me.com>
Message-ID: <5264D7A7.2080308@250bpm.com>

On 21/10/13 09:07, Jean-Paul Kogelman wrote:
> The list comes from BIP 1.

Sorry, I haven't meant you personally. It was just a generic question 
about using existing process instead of inventing a new one on the go.

>> Have it been considered to do this via IETF? The process there is hardened by 40 years of experience and 7000+ RFCs. Probably better than anything you can devise yourself.
>>
>> Martin
>




From melvincarvalho at gmail.com  Mon Oct 21 09:36:04 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Mon, 21 Oct 2013 11:36:04 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <5264D1DB.5060107@250bpm.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
	<20131021064320.GA17190@savin>
	<AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
	<5264D1DB.5060107@250bpm.com>
Message-ID: <CAKaEYhKZtN-wT3puES=iF+6L83z0haHS+P2tYHWZ14T4=Gf+aw@mail.gmail.com>

On 21 October 2013 09:03, Martin Sustrik <sustrik at 250bpm.com> wrote:

> On 21/10/13 08:52, Jean-Paul Kogelman wrote:
> > How about putting them into sub directories that map onto the status of
> the BIP?
> >
> > Reading BIP 1, that would make:
> >
> > Accepted
> > Active
> > Draft
> > Deferred
> > Final
> > Rejected
> > Replaced
> > Withdrawn
>
> Have it been considered to do this via IETF? The process there is
> hardened by 40 years of experience and 7000+ RFCs. Probably better than
> anything you can devise yourself.
>

IETF is great for some things.  I think the bitcoin URI scheme is being
registered with them.

However the process can take many years to get to an RFC, for something
relatively simple, not to mention there can be costs too

Given that crypto currencies are a relatively new field, I am unsure the
IETF has a wealth of expertise in this area, compared with the core devs

Maybe IETF is better to standardize some of the communications or
serialization components, but not so much the BIPs.  Or perhaps some of the
BIPs can be written up as "Informational" rather than "Proposed Standard"
in the RFC format, and reviewed

I've followed quite a few FLOSS projects over the years.  Overall, I've
been amazingly impressed with the BIP process (dont forget it's used in
other systems too -- python?).  It seems an agile process, that strikes an
great balance between needed features, and documentation.  I think that's
exactly what will continue bitcoin's momentum in the short to medium term.


>
> Martin
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/1b8fd110/attachment.html>

From arto at bendiken.net  Mon Oct 21 09:44:08 2013
From: arto at bendiken.net (Arto Bendiken)
Date: Mon, 21 Oct 2013 11:44:08 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <CAKaEYhKZtN-wT3puES=iF+6L83z0haHS+P2tYHWZ14T4=Gf+aw@mail.gmail.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
	<20131021064320.GA17190@savin>
	<AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
	<5264D1DB.5060107@250bpm.com>
	<CAKaEYhKZtN-wT3puES=iF+6L83z0haHS+P2tYHWZ14T4=Gf+aw@mail.gmail.com>
Message-ID: <CAE7aNuT20J6L40_u3vERtMJa01eBA-=9PYqFuakoLH_w5DTsgA@mail.gmail.com>

On Mon, Oct 21, 2013 at 11:36 AM, Melvin Carvalho
<melvincarvalho at gmail.com> wrote:
>
> I've followed quite a few FLOSS projects over the years.  Overall, I've been
> amazingly impressed with the BIP process (dont forget it's used in other
> systems too -- python?).  It seems an agile process, that strikes an great
> balance between needed features, and documentation.  I think that's exactly
> what will continue bitcoin's momentum in the short to medium term.

Indeed. The BIP analogs that immediately come to mind would be the
enhancement proposal processes for Python, XMPP, and BitTorrent:

http://www.python.org/dev/peps/
http://xmpp.org/xmpp-protocols/xmpp-extensions/
http://www.bittorrent.org/beps/bep_0000.html

-- 
Arto Bendiken | @bendiken | http://ar.to



From jeanpaulkogelman at me.com  Mon Oct 21 09:49:02 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Mon, 21 Oct 2013 02:49:02 -0700
Subject: [Bitcoin-development] A critique of bitcoin open
	source	community
In-Reply-To: <CAE7aNuT20J6L40_u3vERtMJa01eBA-=9PYqFuakoLH_w5DTsgA@mail.gmail.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
	<20131021064320.GA17190@savin>
	<AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
	<5264D1DB.5060107@250bpm.com>
	<CAKaEYhKZtN-wT3puES=iF+6L83z0haHS+P2tYHWZ14T4=Gf+aw@mail.gmail.com>
	<CAE7aNuT20J6L40_u3vERtMJa01eBA-=9PYqFuakoLH_w5DTsgA@mail.gmail.com>
Message-ID: <5D2C71C4-565F-4991-90E4-5782A9C83360@me.com>


On 2013-10-21, at 2:44 AM, Arto Bendiken <arto at bendiken.net> wrote:

> 
> Indeed. The BIP analogs that immediately come to mind would be the
> enhancement proposal processes for Python, XMPP, and BitTorrent:

Bitcoin's BIP process is directly based off of Python's PEP process. 

Quote from BIP 1, History:

This document was derived heavily from Python's PEP-0001. In many places text was simply copied and modified.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/327b7918/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/327b7918/attachment.sig>

From jtimon at monetize.io  Mon Oct 21 10:21:27 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Mon, 21 Oct 2013 12:21:27 +0200
Subject: [Bitcoin-development] A critique of bitcoin open source
	community
In-Reply-To: <5D2C71C4-565F-4991-90E4-5782A9C83360@me.com>
References: <38895569-E6E1-4576-9E36-B00B53F9D3CC@me.com>
	<201310192229.19932.luke@dashjr.org>
	<CAAS2fgRu1j0w8RsiYutixEDxs1NYZVxQ7D7VRgDVi1b-wx+vUQ@mail.gmail.com>
	<19909B49-0895-4130-99FB-9A116140CFE9@me.com>
	<20131019235746.GA29032@savin>
	<9EF588BB-14B5-495A-8253-82574DCB1A8A@me.com>
	<20131020224316.GA25280@savin>
	<CAJHLa0OTHKaCOnpVBqapxc3xBwkgr4F9cCi0=15P4b80oVc51w@mail.gmail.com>
	<20131021062555.GA10784@savin>
	<80401395-792A-4637-A75C-1D499C547F98@me.com>
	<20131021064320.GA17190@savin>
	<AD405CE3-3E5D-4927-9A0E-43238ED3FDFC@me.com>
	<5264D1DB.5060107@250bpm.com>
	<CAKaEYhKZtN-wT3puES=iF+6L83z0haHS+P2tYHWZ14T4=Gf+aw@mail.gmail.com>
	<CAE7aNuT20J6L40_u3vERtMJa01eBA-=9PYqFuakoLH_w5DTsgA@mail.gmail.com>
	<5D2C71C4-565F-4991-90E4-5782A9C83360@me.com>
Message-ID: <CAC1+kJOvrcK5-W9HsBZLPKVxR=iMkR9F8RAhUsrnjpq7E3vxwQ@mail.gmail.com>

I think it's great to move BIPs to github.
I also agree with the states -> directories mapping.
Git manages moved files well.


On 10/21/13, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:
>
> On 2013-10-21, at 2:44 AM, Arto Bendiken <arto at bendiken.net> wrote:
>
>>
>> Indeed. The BIP analogs that immediately come to mind would be the
>> enhancement proposal processes for Python, XMPP, and BitTorrent:
>
> Bitcoin's BIP process is directly based off of Python's PEP process.
>
> Quote from BIP 1, History:
>
> This document was derived heavily from Python's PEP-0001. In many places
> text was simply copied and modified.
>


-- 
Jorge Tim?n

http://freico.in/



From jgarzik at bitpay.com  Mon Oct 21 14:30:22 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 21 Oct 2013 10:30:22 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
Message-ID: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>

This summarizes some rambling on IRC about revising the BIPS process.

Right now, the BIPS process is a bit haphazard.  Previously, BIPS were
in a git repo, and the BIPS on the wiki were locked against editing.
The BIPS editor at the time started off well, but was eventually
M.I.A.  So the BIPS "home" moved de facto to where everyone was
reading them anyway, the wiki.  They were made editable, and it became
easier to Just Pick A Number And Write One.  However, this inevitably
became a bit disorganized.  Further, there was a recent incident --
easily reverted -- where someone hopped on the wiki and started
arbitrarily editing an existing standard.

BIPs need to move back to git, in my opinion.  Standards should be
hash-sealed against corruption.  Anything less would be uncivilized,
and un-bitcoin.  However, many on IRC pointed out requiring a git pull
request might be a burdensome process, and discourage some
contributors.  The following is a sketch of an improved process.

1) BIP Draft.

Modelled after IETF drafts.  Anybody may submit a BIP draft, as long
as it meets two very loose requirements:
* At least somewhat related to bitcoin.  Note, I did not say "crypto-currency".
* Formatted similarly to existing BIPs (i.e. markdown, or whatever the
community prefers)

BIP drafts may be submitted via git pull request, or by emailing an
attachment to bips.editor at bitcoin.org.  This mirrors the Linux kernel
change submission process:  git is preferred, but there is always a
non-git method for folks who cannot or do not wish to use git or
github.

BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and
are not automatically assigned a BIPS number.

2) Time passes.  Software for BIP drafts is developed, tested,
published, and publicly discussed in a typical open source manner.

3) If interest and use cases remain strong, a BIP number may be
requested, and the BIP draft is moved to
git://github.com/bitcoin/bips.git main directory.

4) If there is general consensus that the BIP should be adopted, the
BIP status is changed to "accepted."

There are no specified time limits.  Sometimes consensus about a BIP
is reached in days, sometimes 12+ months or more.  It varies widely
depending on the feature's complexity and impact.

As with the IETF, it will be q

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Mon Oct 21 14:34:06 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 21 Oct 2013 10:34:06 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
Message-ID: <CAJHLa0OJz4yoKb_j1yVYjHc8rFStrFJonTyKKjvcPBOFfqDxMA@mail.gmail.com>

Continuing.  (grumble gmail grumble)

As with the IETF, there will be a great many drafts that do not make
it to BIPS status.  That is normal, and a sign of a healthy process.

I'll volunteer as the BIPS editor.

There needs to be some backups with commit access to bips.git, in case
the BIPS editor is hit by a bus or goes crazy or on vacation.  This
can be some core devs, but I would like at least one or two folks who
are not Satoshi-client devs on the list.  Maybe Andreas, Michael G,
Alan R, and others working on non-Satoshi clients.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From andreas at schildbach.de  Mon Oct 21 15:46:47 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 21 Oct 2013 17:46:47 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAJHLa0OJz4yoKb_j1yVYjHc8rFStrFJonTyKKjvcPBOFfqDxMA@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CAJHLa0OJz4yoKb_j1yVYjHc8rFStrFJonTyKKjvcPBOFfqDxMA@mail.gmail.com>
Message-ID: <l43i8u$k98$1@ger.gmane.org>

On 10/21/2013 04:34 PM, Jeff Garzik wrote:

> I'll volunteer as the BIPS editor.
>
> There needs to be some backups with commit access to bips.git, in case
> the BIPS editor is hit by a bus or goes crazy or on vacation.  This
> can be some core devs, but I would like at least one or two folks who
> are not Satoshi-client devs on the list.  Maybe Andreas, Michael G,
> Alan R, and others working on non-Satoshi clients.

I accept the nomination as a backup (-:

So the duty of the editor is merging pull requests and/or proxying
between email and git for those who do not use git?





From jgarzik at bitpay.com  Mon Oct 21 16:14:16 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 21 Oct 2013 12:14:16 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <l43i8u$k98$1@ger.gmane.org>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CAJHLa0OJz4yoKb_j1yVYjHc8rFStrFJonTyKKjvcPBOFfqDxMA@mail.gmail.com>
	<l43i8u$k98$1@ger.gmane.org>
Message-ID: <CAJHLa0Nu1CKoOr-wJAC39B18xwrsoana_d+7+QwP+x5Fx-hRSg@mail.gmail.com>

On Mon, Oct 21, 2013 at 11:46 AM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> I accept the nomination as a backup (-:

Cool.

> So the duty of the editor is merging pull requests and/or proxying
> between email and git for those who do not use git?

Correct.  And assigning BIP numbers.  Ideally a boring administrative
position.  :)

The main tensions will be in gauging whether there is sufficient
consensus and review to boost a draft into BIP/proposed status, and
then promoting a numbered BIP to the final/accepted status.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Mon Oct 21 17:17:20 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 21 Oct 2013 13:17:20 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
Message-ID: <CAJHLa0OOY30z96d7VgfD3fTznC=WK7+ZH6k8vr-DVNkqbGHtxA@mail.gmail.com>

Added:  I'm happy with gmaxwell as BIP editor as well, as he is
apparently the current BIP-number-assigner-in-chief.  :)

The goal is to improve the process, hash-seal our specs, and create an
easy way for anyone with at least an email address to participate.

On Mon, Oct 21, 2013 at 10:30 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> This summarizes some rambling on IRC about revising the BIPS process.
>
> Right now, the BIPS process is a bit haphazard.  Previously, BIPS were
> in a git repo, and the BIPS on the wiki were locked against editing.
> The BIPS editor at the time started off well, but was eventually
> M.I.A.  So the BIPS "home" moved de facto to where everyone was
> reading them anyway, the wiki.  They were made editable, and it became
> easier to Just Pick A Number And Write One.  However, this inevitably
> became a bit disorganized.  Further, there was a recent incident --
> easily reverted -- where someone hopped on the wiki and started
> arbitrarily editing an existing standard.
>
> BIPs need to move back to git, in my opinion.  Standards should be
> hash-sealed against corruption.  Anything less would be uncivilized,
> and un-bitcoin.  However, many on IRC pointed out requiring a git pull
> request might be a burdensome process, and discourage some
> contributors.  The following is a sketch of an improved process.
>
> 1) BIP Draft.
>
> Modelled after IETF drafts.  Anybody may submit a BIP draft, as long
> as it meets two very loose requirements:
> * At least somewhat related to bitcoin.  Note, I did not say "crypto-currency".
> * Formatted similarly to existing BIPs (i.e. markdown, or whatever the
> community prefers)
>
> BIP drafts may be submitted via git pull request, or by emailing an
> attachment to bips.editor at bitcoin.org.  This mirrors the Linux kernel
> change submission process:  git is preferred, but there is always a
> non-git method for folks who cannot or do not wish to use git or
> github.
>
> BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and
> are not automatically assigned a BIPS number.
>
> 2) Time passes.  Software for BIP drafts is developed, tested,
> published, and publicly discussed in a typical open source manner.
>
> 3) If interest and use cases remain strong, a BIP number may be
> requested, and the BIP draft is moved to
> git://github.com/bitcoin/bips.git main directory.
>
> 4) If there is general consensus that the BIP should be adopted, the
> BIP status is changed to "accepted."
>
> There are no specified time limits.  Sometimes consensus about a BIP
> is reached in days, sometimes 12+ months or more.  It varies widely
> depending on the feature's complexity and impact.
>
> As with the IETF, it will be q
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/



-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jeanpaulkogelman at me.com  Mon Oct 21 19:38:37 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Mon, 21 Oct 2013 19:38:37 +0000 (GMT)
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAJHLa0OOY30z96d7VgfD3fTznC=WK7+ZH6k8vr-DVNkqbGHtxA@mail.gmail.com>
Message-ID: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>


I have some more questions.

1) Should the protocol specification page also be codified into BIP(s)?

2) Should the current wiki pages be taken down / forwarded to the git repo or be auto updated from the git repo?

3) Even though the information in BIP 50 is valuable, should it really be considered a BIP?

On Oct 21, 2013, at 10:17 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

The goal is to improve the process, hash-seal our specs, and create an
easy way for anyone with at least an email address to participate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/da1da444/attachment.html>

From luke at dashjr.org  Mon Oct 21 19:47:58 2013
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 21 Oct 2013 19:47:58 +0000
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
Message-ID: <201310211947.59640.luke@dashjr.org>

On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:
> 1) Should the protocol specification page also be codified into BIP(s)?

Probably wouldn't hurt, but it'd likely need a rewrite in a more modular and 
formal form.

> 2) Should the current wiki pages be taken down / forwarded to the git repo
> or be auto updated from the git repo?

Since it's the same format, I'd keep it up there, maybe with a link to the git 
repo on the main BIP index wiki page.

> 3) Even though the information in BIP 50 is valuable, should it really be
> considered a BIP?

It's a hardforking protocol change, so IMO yes.



From benjamin.l.cordes at gmail.com  Mon Oct 21 20:57:03 2013
From: benjamin.l.cordes at gmail.com (Benjamin Cordes)
Date: Mon, 21 Oct 2013 22:57:03 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <201310211947.59640.luke@dashjr.org>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org>
Message-ID: <CAOoPuRZOeydALkd0FLoFx9Mm=x7MSNK+hM4Gov67MkTiTFwzSA@mail.gmail.com>

I believe a better solution would to use a gitlab clone such as gitlab,
which sits on top of the git repo, and allows for custom code around the
BIP process. Potentially one could even build Bitcoin into such a BIP
system. If somebody wants to support a BIP he donates Bitcoins to that
proposal. Somebody who actually implements the BIP can receive some percent
of the bounty (while some percent goes to the Bitcoin foundation). Via such
a platform one could create assurance contracts to kickstart BIP
developments or Bitcoin extensions (public infrastructure which is not part
of the core, such as opensourced exchanges).


On Mon, Oct 21, 2013 at 9:47 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:
> > 1) Should the protocol specification page also be codified into BIP(s)?
>
> Probably wouldn't hurt, but it'd likely need a rewrite in a more modular
> and
> formal form.
>
> > 2) Should the current wiki pages be taken down / forwarded to the git
> repo
> > or be auto updated from the git repo?
>
> Since it's the same format, I'd keep it up there, maybe with a link to the
> git
> repo on the main BIP index wiki page.
>
> > 3) Even though the information in BIP 50 is valuable, should it really be
> > considered a BIP?
>
> It's a hardforking protocol change, so IMO yes.
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/d874a3d8/attachment.html>

From benjamin.l.cordes at gmail.com  Mon Oct 21 20:59:26 2013
From: benjamin.l.cordes at gmail.com (Benjamin Cordes)
Date: Mon, 21 Oct 2013 22:59:26 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <201310211947.59640.luke@dashjr.org>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org>
Message-ID: <CAOoPuRbNUQ6rxbHw3hTPVDh5KfT1JLfEaFORwYxAphEuRpLP=Q@mail.gmail.com>

I believe a better solution would to use a github clone such as gitlab,
which sits on top of the git repo, and allows for custom code around the
BIP process. Potentially one could even build Bitcoin into such a BIP
system. If somebody wants to support a BIP he donates Bitcoins to that
proposal. Somebody who actually implements the BIP can receive some percent
of the bounty, while some percentage goes to the Bitcoin foundation. Via
such a platform one could create assurance contracts to kickstart BIP
developments or Bitcoin extensions (public infrastructure which is not part
of the core, such as opensourced exchanges).


On Mon, Oct 21, 2013 at 9:47 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:
> > 1) Should the protocol specification page also be codified into BIP(s)?
>
> Probably wouldn't hurt, but it'd likely need a rewrite in a more modular
> and
> formal form.
>
> > 2) Should the current wiki pages be taken down / forwarded to the git
> repo
> > or be auto updated from the git repo?
>
> Since it's the same format, I'd keep it up there, maybe with a link to the
> git
> repo on the main BIP index wiki page.
>
> > 3) Even though the information in BIP 50 is valuable, should it really be
> > considered a BIP?
>
> It's a hardforking protocol change, so IMO yes.
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/35473229/attachment.html>

From sustrik at 250bpm.com  Tue Oct 22 06:39:51 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Tue, 22 Oct 2013 08:39:51 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <201310211947.59640.luke@dashjr.org>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org>
Message-ID: <52661DB7.7040805@250bpm.com>

On 21/10/13 21:47, Luke-Jr wrote:
> On Monday, October 21, 2013 7:38:37 PM Jean-Paul Kogelman wrote:
>> 1) Should the protocol specification page also be codified into BIP(s)?
>
> Probably wouldn't hurt, but it'd likely need a rewrite in a more modular and
> formal form.

I wanted to have a look at how the whole Bitcoin thing works recently. 
Being a distributed application, I've searched for the protocol spec. 
What I found were two wiki pages (Protocol & ProtocolRules) that looked 
more like notes someone wrote down while implementing the application.

Have I missed something? Is there any effort underway trying to produce 
a decent spec? If not so, I am willing to help with that.

Martin



From jeanpaulkogelman at me.com  Tue Oct 22 06:59:18 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Mon, 21 Oct 2013 23:59:18 -0700
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <52661DB7.7040805@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
Message-ID: <FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>


> I wanted to have a look at how the whole Bitcoin thing works recently. 
> Being a distributed application, I've searched for the protocol spec. 
> What I found were two wiki pages (Protocol & ProtocolRules) that looked 
> more like notes someone wrote down while implementing the application.
> 
> Have I missed something? Is there any effort underway trying to produce 
> a decent spec? If not so, I am willing to help with that.

Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131021/507d8f63/attachment.sig>

From gmaxwell at gmail.com  Tue Oct 22 07:03:53 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 22 Oct 2013 00:03:53 -0700
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
Message-ID: <CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>

On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman
<jeanpaulkogelman at me.com> wrote:
> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?

Take care, the information in the wiki is woefully incomplete.



From sustrik at 250bpm.com  Tue Oct 22 07:34:57 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Tue, 22 Oct 2013 09:34:57 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>	<201310211947.59640.luke@dashjr.org>	<52661DB7.7040805@250bpm.com>	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
Message-ID: <52662AA1.5050509@250bpm.com>

On 22/10/13 09:03, Gregory Maxwell wrote:
> On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman
> <jeanpaulkogelman at me.com> wrote:
>> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?
>
> Take care, the information in the wiki is woefully incomplete.

Imagine myself, with no prior knowledge of Bitcoin looking at the 
document. It starts with "Hashes". What hashes? No idea what's going on. 
Etc.

Now compare that to a well written RFC. It starts with introduction, 
description of the problem, explains the conceptual model of the 
solution, then dives into the details. There's also Security 
Considerations part in every RFC that is pretty relevant for Bitcoin.

As I said, I am willing to help with writing such document, it would be 
a nice way of learning the stuff, however, help from core devs, such as 
answering question that may arise in the process, or reviewing the 
document would be needed.

Martin




From pete at petertodd.org  Tue Oct 22 07:49:41 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 22 Oct 2013 03:49:41 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <52662AA1.5050509@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
Message-ID: <20131022074941.GB3452@savin>

On Tue, Oct 22, 2013 at 09:34:57AM +0200, Martin Sustrik wrote:
> On 22/10/13 09:03, Gregory Maxwell wrote:
> > On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman
> > <jeanpaulkogelman at me.com> wrote:
> >> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?
> >
> > Take care, the information in the wiki is woefully incomplete.
> 
> Imagine myself, with no prior knowledge of Bitcoin looking at the 
> document. It starts with "Hashes". What hashes? No idea what's going on. 
> Etc.
> 
> Now compare that to a well written RFC. It starts with introduction, 
> description of the problem, explains the conceptual model of the 
> solution, then dives into the details. There's also Security 
> Considerations part in every RFC that is pretty relevant for Bitcoin.
> 
> As I said, I am willing to help with writing such document, it would be 
> a nice way of learning the stuff, however, help from core devs, such as 
> answering question that may arise in the process, or reviewing the 
> document would be needed.

Writing such RFCs is dangerous due to the consensus nature of Bitcoin -
it makes people think the standard is the RFC, rather than the code.

I hear one of the better intros to Bitcoin is the Khan academy videos,
but I've never watched them myself. Once you understand how it works,
start reading source code - the Bitcoin codebase is actually really
simple and readable. However remember that the implications of that
codebase are anything but simple; there's lots of reasons to think
Satoshi himself didn't understand Bitcoin all that well, even by the
time he left the project.

-- 
'peter'[:-1]@petertodd.org
000000000000000f155e7a648e84a83589048ae1cacb0c60bfce2437553b6af4
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131022/efd1835a/attachment.sig>

From gmaxwell at gmail.com  Tue Oct 22 07:56:59 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 22 Oct 2013 00:56:59 -0700
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <52662AA1.5050509@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
Message-ID: <CAAS2fgQ4jKxPY+TSBfYh2_nyBB2e+ONy=+pYCxELOw0gFCEuBQ@mail.gmail.com>

On Tue, Oct 22, 2013 at 12:34 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:
> There's also Security Considerations part in
> every RFC that is pretty relevant for Bitcoin.

Which would say something interesting like "If the bitcoin network
implements inconsistent behavior in the consensus critical parts of
the protocol the world ends. As such, conformance or _non_-conformance
with this specification (in particular, sections 4. 5. and 6.) may be
required for security."

A Bitcoin protocol RFC would be a great place to exercise RFC 6919
keywords.  ( http://tools.ietf.org/html/rfc6919 )



From sustrik at 250bpm.com  Tue Oct 22 08:20:44 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Tue, 22 Oct 2013 10:20:44 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAAS2fgQ4jKxPY+TSBfYh2_nyBB2e+ONy=+pYCxELOw0gFCEuBQ@mail.gmail.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>	<201310211947.59640.luke@dashjr.org>	<52661DB7.7040805@250bpm.com>	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>	<52662AA1.5050509@250bpm.com>
	<CAAS2fgQ4jKxPY+TSBfYh2_nyBB2e+ONy=+pYCxELOw0gFCEuBQ@mail.gmail.com>
Message-ID: <5266355C.6090303@250bpm.com>

On 22/10/13 09:56, Gregory Maxwell wrote:
> On Tue, Oct 22, 2013 at 12:34 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:
>> There's also Security Considerations part in
>> every RFC that is pretty relevant for Bitcoin.
>
> Which would say something interesting like "If the bitcoin network
> implements inconsistent behavior in the consensus critical parts of
> the protocol the world ends. As such, conformance or _non_-conformance
> with this specification (in particular, sections 4. 5. and 6.) may be
> required for security."

In fact, yes.

In the end it boils down to saying something like: "Bitcoin is a unique 
global distributed application and thus all implementations MUST support 
the version of the protocol currently in use, irrespective of whether it 
have been documented and/or published. This RFC is meant only for 
informational purposes and is a snapshot of the protocol as to Oct 22nd 
2013."

That being said, I understand the idea of not publishing the spec so 
that everyone is forced to work with live data.

> A Bitcoin protocol RFC would be a great place to exercise RFC 6919
> keywords.  ( http://tools.ietf.org/html/rfc6919 )

Heh. Haven't seen that one.

Martin





From jgarzik at bitpay.com  Tue Oct 22 14:08:06 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 22 Oct 2013 10:08:06 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <52662AA1.5050509@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
Message-ID: <CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>

All that is good practice, but we should avoid adding burdensome
process that might discourage BIP writing.

Consider a distributed approach:  if you feel a draft needs more
sections or better language, submit a pull request yourself and help
community-edit the document.

On Tue, Oct 22, 2013 at 3:34 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:
> On 22/10/13 09:03, Gregory Maxwell wrote:
>> On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman
>> <jeanpaulkogelman at me.com> wrote:
>>> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?
>>
>> Take care, the information in the wiki is woefully incomplete.
>
> Imagine myself, with no prior knowledge of Bitcoin looking at the
> document. It starts with "Hashes". What hashes? No idea what's going on.
> Etc.
>
> Now compare that to a well written RFC. It starts with introduction,
> description of the problem, explains the conceptual model of the
> solution, then dives into the details. There's also Security
> Considerations part in every RFC that is pretty relevant for Bitcoin.
>
> As I said, I am willing to help with writing such document, it would be
> a nice way of learning the stuff, however, help from core devs, such as
> answering question that may arise in the process, or reviewing the
> document would be needed.
>
> Martin
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From slush at centrum.cz  Wed Oct 23 00:56:57 2013
From: slush at centrum.cz (slush)
Date: Wed, 23 Oct 2013 02:56:57 +0200
Subject: [Bitcoin-development] BIP39 word list
In-Reply-To: <87iowuuof9.fsf@gmail.com>
References: <87iowuuof9.fsf@gmail.com>
Message-ID: <CAJna-Hh_MMfW3W4tKHnAL3xd8Pbvkv6MGfOArFfxGzwcjDis1w@mail.gmail.com>

I think this is a good idea; I just pushed new unit test test_similarity()
to github which finds such similar words. Right now it identifies ~90
similar pairs in current wordlist, I'll update wordlist tomorrow to pass
this test.

slush

On Sat, Oct 19, 2013 at 1:52 AM, jan <jan.marecek at gmail.com> wrote:

>
> I think avoiding words that could look similar when written down would
> be a good idea aswell. I searched for words that only differ by the
> letters c & e, g & y, u & v and found the following:
>
> car ear
> cat eat
> gear year
> value valve
>
> Other combinations could potentially be problematic depending on the
> handwriting style: ft, ao, ij, vy, possibly even lt and il?
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/0b80db54/attachment.html>

From sustrik at 250bpm.com  Wed Oct 23 07:38:31 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Wed, 23 Oct 2013 09:38:31 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>	<201310211947.59640.luke@dashjr.org>	<52661DB7.7040805@250bpm.com>	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
Message-ID: <52677CF7.9070609@250bpm.com>

On 22/10/13 16:08, Jeff Garzik wrote:
> All that is good practice, but we should avoid adding burdensome
> process that might discourage BIP writing.
>
> Consider a distributed approach:  if you feel a draft needs more
> sections or better language, submit a pull request yourself and help
> community-edit the document.

I would love to do so.

However, from what Peter Todd said above, my feeling was that spec is 
deliberately vague to force compatibility with the reference 
implementation rather than with a document.

While that kind of compatibility-via-obscurity won't probably work in a 
long run, in short run it can prevent proliferation of implementations 
and thus give protocol more space and flexibility to evolve (I've done 
the same trick with ZeroMQ myself once).

Anyway, if my impression was wrong I am happy to give it a try.

Martin




From rdwnj at yahoo.com  Wed Oct 23 15:02:07 2013
From: rdwnj at yahoo.com (Ron)
Date: Wed, 23 Oct 2013 08:02:07 -0700 (PDT)
Subject: [Bitcoin-development] "Bitcoin codebase is actually really
	simple and readable."
In-Reply-To: <mailman.282267.1382513922.4583.bitcoin-development@lists.sourceforge.net>
References: <mailman.282267.1382513922.4583.bitcoin-development@lists.sourceforge.net>
Message-ID: <1382540527.4044.YahooMailNeo@web124501.mail.ne1.yahoo.com>





________________________________
 From: "bitcoin-development-request at lists.sourceforge.net" <bitcoin-development-request at lists.sourceforge.net>
To: bitcoin-development at lists.sourceforge.net 
Sent: Wednesday, October 23, 2013 3:38 AM
Subject: Bitcoin-development Digest, Vol 29, Issue 20
 

Send Bitcoin-development mailing list submissions to
??? bitcoin-development at lists.sourceforge.net
When replying, please edit your Subject line so it is more specific
than "Re: Contents of Bitcoin-development digest..."
Today's Topics:
?  2. Re: Revisiting the BIPS process, a proposal (Peter Todd)
----------------------------------------------------------------------
....

On Tue, Oct 22, 2013 at 09:34:57AM +0200, Martin Sustrik wrote:
> On 22/10/13 09:03, Gregory Maxwell wrote:
> > On Mon, Oct 21, 2013 at 11:59 PM, Jean-Paul Kogelman
> > <jeanpaulkogelman at me.com> wrote:
> >> Have you seen: https://en.bitcoin.it/wiki/Protocol_specification ?
> >
> > Take care, the information in the wiki is woefully incomplete.
> 
> Imagine myself, with no prior knowledge of Bitcoin looking at the 
> document. It starts with "Hashes". What hashes? No idea what's going on. 
> Etc.
> 
> Now compare that to a well written RFC. It starts with introduction, 
> description of the problem, explains the conceptual model of the 
> solution, then dives into the details. There's also Security 
> Considerations part in every RFC that is pretty relevant for Bitcoin.
> 
> As I said, I am willing to help with writing such document, it would be 
> a nice way of learning the stuff, however, help from core devs, such as 
> answering question that may arise in the process, or reviewing the 
> document would be needed.

Writing such RFCs is dangerous due to the consensus nature of Bitcoin -
it makes people think the standard is the RFC, rather than the code.

I hear one of the better intros to Bitcoin is the Khan academy videos,
but I've never watched them myself. Once you understand how it works,
start reading source code - the Bitcoin codebase is actually really
simple and readable. However remember that the implications of that
codebase are anything but simple; there's lots of reasons to think
Satoshi himself didn't understand Bitcoin all that well, even by the
time he left the project.

-- 
'peter'[:-1]@petertodd.org
000000000000000f155e7a648e84a83589048ae1cacb0c60bfce2437553b6af4
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature

------------------------------
I feel that I must respond to the statements that 
1.
the Bitcoin codebase is actually really
simple and readable. 

2.
However remember that the implications of that
codebase are anything but simple; there's lots of reasons to think
Satoshi himself didn't understand Bitcoin all that well, even by the
time he left the project.

On point one: if it was/is so readable, why hasn't it been documented better, if at all? 
Why haven't the obscure names of important items been globally searched and replaced?
Why are there still mixed formatting "styles" still in the code. I think it is the fear that C++ 
is so brittle, that one change may bring the whole house of cards down.
I feel that it is the language (C++) that is hindering the expression of ideas in the code.
This goes to your point two about Satoshi's understanding. I think just the opposite:
that he knew what he wanted but that C++ hindered him in expressing and implementing it.
I think that if anything, C++ was what Satoshi "didn't understand all that well".

But then who does understand C++, really? See
https://groups.google.com/forum/#!msg/comp.lang.lisp/7xCvdzijzgU/4xCFzLc3d5EJ 
and the quote:
Whenever I solve a difficult problem with C++, I feel like I?ve won a bar fight. ? Michael Fogus

I don't think readability is attainable easily in C++. It requires intentionally writing so that 
others may understand your code. How many programmers have ever done that? And this 
is like swimming upstream in C++, where things are designed to be hidden! 

Ron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/0829f006/attachment.html>

From pete at petertodd.org  Wed Oct 23 19:29:40 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 23 Oct 2013 15:29:40 -0400
Subject: [Bitcoin-development] "Bitcoin codebase is actually really
 simple and readable."
In-Reply-To: <1382540527.4044.YahooMailNeo@web124501.mail.ne1.yahoo.com>
References: <mailman.282267.1382513922.4583.bitcoin-development@lists.sourceforge.net>
	<1382540527.4044.YahooMailNeo@web124501.mail.ne1.yahoo.com>
Message-ID: <20131023192940.GA31497@petertodd.org>

On Wed, Oct 23, 2013 at 08:02:07AM -0700, Ron wrote:
> I feel that I must respond to the statements that 
> 1.
> the Bitcoin codebase is actually really
> simple and readable. 
> 
> 2.
> However remember that the implications of that
> codebase are anything but simple; there's lots of reasons to think
> Satoshi himself didn't understand Bitcoin all that well, even by the
> time he left the project.
> 
> On point one: if it was/is so readable, why hasn't it been documented better, if at all? 
> Why haven't the obscure names of important items been globally searched and replaced?
> Why are there still mixed formatting "styles" still in the code. I think it is the fear that C++ 
> is so brittle, that one change may bring the whole house of cards down.

The nature of Bitcoin is that in any language one change could
accidentally bring the whole house of cards down.

Also the time and effort it takes to review changes for maliciously or
accidentally added exploits.

> I feel that it is the language (C++) that is hindering the expression of ideas in the code.
> This goes to your point two about Satoshi's understanding. I think just the opposite:
> that he knew what he wanted but that C++ hindered him in expressing and implementing it.
> I think that if anything, C++ was what Satoshi "didn't understand all that well".
> 
> But then who does understand C++, really? See
> https://groups.google.com/forum/#!msg/comp.lang.lisp/7xCvdzijzgU/4xCFzLc3d5EJ 
> and the quote:
> Whenever I solve a difficult problem with C++, I feel like I?ve won a bar fight. ? Michael Fogus
> 
> I don't think readability is attainable easily in C++. It requires intentionally writing so that 
> others may understand your code. How many programmers have ever done that? And this 
> is like swimming upstream in C++, where things are designed to be hidden! 

I'm making the statement that "the Bitcoin codebase is actually really
simple and readable." based on personal experience: for what the
reference client does - solve a previously thought unsolvable problem in
cryptography - the code is simple and readable. (try reading the OpenSSL
source-code sometime as a comparison) My experience has consistently
been that understanding what the code does is by far the easiest part of
understanding Bitcoin; understanding what the effect of what the code
does in terms of the system as a whole is at least another one or two
orders of magnitude more difficult.

-- 
'peter'[:-1]@petertodd.org
0000000000000000c9e44ec3cb95d6ea51b7e8d29901be451ce3a2bd7b0ed8ae
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/4464942d/attachment.sig>

From pete at petertodd.org  Wed Oct 23 19:40:39 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 23 Oct 2013 15:40:39 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <52677CF7.9070609@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com>
Message-ID: <20131023194039.GB31497@petertodd.org>

On Wed, Oct 23, 2013 at 09:38:31AM +0200, Martin Sustrik wrote:
> On 22/10/13 16:08, Jeff Garzik wrote:
> > All that is good practice, but we should avoid adding burdensome
> > process that might discourage BIP writing.
> >
> > Consider a distributed approach:  if you feel a draft needs more
> > sections or better language, submit a pull request yourself and help
> > community-edit the document.
> 
> I would love to do so.
> 
> However, from what Peter Todd said above, my feeling was that spec is 
> deliberately vague to force compatibility with the reference 
> implementation rather than with a document.
> 
> While that kind of compatibility-via-obscurity won't probably work in a 
> long run, in short run it can prevent proliferation of implementations 
> and thus give protocol more space and flexibility to evolve (I've done 
> the same trick with ZeroMQ myself once).

The reference implementation is the specification - the "specification"
on the wiki is best thought of as a set of Coles Notes on the real
specification. If you don't already understand that and the nuance of
that statement you should assume the protocol is fixed in stone and
doesn't evolve at all; that statement is not quite true, but it's very
close to the truth.


I gotta get around to writing a "Developers" section for the FAQ
explaining this stuff....

-- 
'peter'[:-1]@petertodd.org
0000000000000007362b283ac07839aba795dbfb3c5c4e831d80df9cf3bea2d5
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/419118b5/attachment.sig>

From sustrik at 250bpm.com  Wed Oct 23 20:05:56 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Wed, 23 Oct 2013 22:05:56 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <20131023194039.GB31497@petertodd.org>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com>
	<20131023194039.GB31497@petertodd.org>
Message-ID: <52682C24.30700@250bpm.com>

On 23/10/13 21:40, Peter Todd wrote:

> The reference implementation is the specification - the "specification"
> on the wiki is best thought of as a set of Coles Notes on the real
> specification. If you don't already understand that and the nuance of
> that statement you should assume the protocol is fixed in stone and
> doesn't evolve at all; that statement is not quite true, but it's very
> close to the truth.

Does that imply that the notes are deliberately obscured to force 
everyone to check the source code?

Martin




From pete at petertodd.org  Wed Oct 23 20:27:31 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 23 Oct 2013 16:27:31 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <52682C24.30700@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com>
	<20131023194039.GB31497@petertodd.org> <52682C24.30700@250bpm.com>
Message-ID: <20131023202731.GA31783@petertodd.org>

On Wed, Oct 23, 2013 at 10:05:56PM +0200, Martin Sustrik wrote:
> On 23/10/13 21:40, Peter Todd wrote:
> 
> >The reference implementation is the specification - the "specification"
> >on the wiki is best thought of as a set of Coles Notes on the real
> >specification. If you don't already understand that and the nuance of
> >that statement you should assume the protocol is fixed in stone and
> >doesn't evolve at all; that statement is not quite true, but it's very
> >close to the truth.
> 
> Does that imply that the notes are deliberately obscured to force
> everyone to check the source code?

What's on the wiki is mostly the work of people who aren't working on
the reference implementation, so no, you can't say that.

-- 
'peter'[:-1]@petertodd.org
0000000000000003c1d48b638b9857cb56b6fe9188a60c481fbc9b738ccb4663
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/afb18a9c/attachment.sig>

From pieter.wuille at gmail.com  Wed Oct 23 21:07:18 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 23 Oct 2013 23:07:18 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <20131023202731.GA31783@petertodd.org>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com>
	<20131023194039.GB31497@petertodd.org> <52682C24.30700@250bpm.com>
	<20131023202731.GA31783@petertodd.org>
Message-ID: <CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>

On Wed, Oct 23, 2013 at 10:27 PM, Peter Todd <pete at petertodd.org> wrote:
> On Wed, Oct 23, 2013 at 10:05:56PM +0200, Martin Sustrik wrote:
>> On 23/10/13 21:40, Peter Todd wrote:
>>
>> >The reference implementation is the specification - the "specification"
>> >on the wiki is best thought of as a set of Coles Notes on the real
>> >specification. If you don't already understand that and the nuance of
>> >that statement you should assume the protocol is fixed in stone and
>> >doesn't evolve at all; that statement is not quite true, but it's very
>> >close to the truth.
>>
>> Does that imply that the notes are deliberately obscured to force
>> everyone to check the source code?
>
> What's on the wiki is mostly the work of people who aren't working on
> the reference implementation, so no, you can't say that.

Indeed, I know of few people who are familiar with the source code
that use the wiki.

I do think that is a pity. The openness and transparency of the
protocol is essential to trusting the system (and shouldn't be limited
to those digging through the source code), and for that reason alone I
think it needs to be well-documented.

I also do agree with earlier comments, that due to the nature of the
consensus problem Bitcoin solves, it will always be the network that
dictates what the actual rules are - anything else can result in
inresolvable forks. If a "formal" specification were written, and we
would find out that the majority of nodes on the network deviate from
it in a subtle way, those nodes would be buggy in the sense that they
aren't doing what was expected, but it would be the specification that
is incorrect for not following the rules of the network. In short,
consistency is more important than correctness, and for that reason,
writing alternate implementation will always be hard and dangerous.

However, I do not think that making it hard to find information about
the details of the system is the way to go. Alternate implementations
are likely inevitable, and in the long run probably a win for the
ecosystem. If effort is put into accurately describing the rules, it
should indeed carry a strong notice about it being descriptive rather
than normative.

If someone is willing to work on that, I am (and likely many people in
#bitcoin-dev are) available for any questions about the protocol and
its semantics.

-- 
Pieter



From allen.piscitello at gmail.com  Wed Oct 23 21:42:14 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Wed, 23 Oct 2013 16:42:14 -0500
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com>
	<20131023194039.GB31497@petertodd.org> <52682C24.30700@250bpm.com>
	<20131023202731.GA31783@petertodd.org>
	<CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
Message-ID: <CAJfRnm4wJzk885rzV7Gn_9AF10M8O=3GV06MN2oag64YpmMUJA@mail.gmail.com>

I think formalizing the specification could go a long way and encouraging
alternate implementations is going to be the best way to reduce unexpected
small bugs having a bad effect except on the "buggy" node.

That being said, it's a huge chicken and egg problem.  No one wants to go
off the reference client since it could lead to working on a forked chain
as a miner or having bad data as a client.

I don't know if there is a good way to try to take small pieces, get
consensus, possibly have some type of universal test cases and running on
testnet that would solve the problem.

I wouldn't mind taking on parts of this when I have time, specifically
transactions/scripting.  Obviously if there are better qualified people who
are interested, have at it!


On Wed, Oct 23, 2013 at 4:07 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Wed, Oct 23, 2013 at 10:27 PM, Peter Todd <pete at petertodd.org> wrote:
> > On Wed, Oct 23, 2013 at 10:05:56PM +0200, Martin Sustrik wrote:
> >> On 23/10/13 21:40, Peter Todd wrote:
> >>
> >> >The reference implementation is the specification - the "specification"
> >> >on the wiki is best thought of as a set of Coles Notes on the real
> >> >specification. If you don't already understand that and the nuance of
> >> >that statement you should assume the protocol is fixed in stone and
> >> >doesn't evolve at all; that statement is not quite true, but it's very
> >> >close to the truth.
> >>
> >> Does that imply that the notes are deliberately obscured to force
> >> everyone to check the source code?
> >
> > What's on the wiki is mostly the work of people who aren't working on
> > the reference implementation, so no, you can't say that.
>
> Indeed, I know of few people who are familiar with the source code
> that use the wiki.
>
> I do think that is a pity. The openness and transparency of the
> protocol is essential to trusting the system (and shouldn't be limited
> to those digging through the source code), and for that reason alone I
> think it needs to be well-documented.
>
> I also do agree with earlier comments, that due to the nature of the
> consensus problem Bitcoin solves, it will always be the network that
> dictates what the actual rules are - anything else can result in
> inresolvable forks. If a "formal" specification were written, and we
> would find out that the majority of nodes on the network deviate from
> it in a subtle way, those nodes would be buggy in the sense that they
> aren't doing what was expected, but it would be the specification that
> is incorrect for not following the rules of the network. In short,
> consistency is more important than correctness, and for that reason,
> writing alternate implementation will always be hard and dangerous.
>
> However, I do not think that making it hard to find information about
> the details of the system is the way to go. Alternate implementations
> are likely inevitable, and in the long run probably a win for the
> ecosystem. If effort is put into accurately describing the rules, it
> should indeed carry a strong notice about it being descriptive rather
> than normative.
>
> If someone is willing to work on that, I am (and likely many people in
> #bitcoin-dev are) available for any questions about the protocol and
> its semantics.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131023/274be828/attachment.html>

From luke at dashjr.org  Wed Oct 23 21:49:00 2013
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 23 Oct 2013 21:49:00 +0000
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAJfRnm4wJzk885rzV7Gn_9AF10M8O=3GV06MN2oag64YpmMUJA@mail.gmail.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
	<CAJfRnm4wJzk885rzV7Gn_9AF10M8O=3GV06MN2oag64YpmMUJA@mail.gmail.com>
Message-ID: <201310232149.02004.luke@dashjr.org>

On Wednesday, October 23, 2013 9:42:14 PM Allen Piscitello wrote:
> That being said, it's a huge chicken and egg problem.  No one wants to go
> off the reference client since it could lead to working on a forked chain
> as a miner or having bad data as a client.

Thankfully, miners are incentivised to run one of every widespread node to 
ensure their blocks are accepted by the network. Eloipool already supports 
cross-referencing block templates between multiple clients and using the one 
that is accepted by most/all (and logging any discrepancies with coredump-like 
details).

Luke



From sustrik at 250bpm.com  Thu Oct 24 07:03:14 2013
From: sustrik at 250bpm.com (Martin Sustrik)
Date: Thu, 24 Oct 2013 09:03:14 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>	<201310211947.59640.luke@dashjr.org>	<52661DB7.7040805@250bpm.com>	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>	<52662AA1.5050509@250bpm.com>	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>	<52677CF7.9070609@250bpm.com>	<20131023194039.GB31497@petertodd.org>	<52682C24.30700@250bpm.com>	<20131023202731.GA31783@petertodd.org>
	<CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
Message-ID: <5268C632.3030005@250bpm.com>

On 23/10/13 23:07, Pieter Wuille wrote:

> In short,
> consistency is more important than correctness.

That's a nice and concise way to put it and any potential protocol 
documentation should start with a statement like that.

> However, I do not think that making it hard to find information about
> the details of the system is the way to go. Alternate implementations
> are likely inevitable, and in the long run probably a win for the
> ecosystem. If effort is put into accurately describing the rules, it
> should indeed carry a strong notice about it being descriptive rather
> than normative.

One interesting question is whather alternative implementations are more 
likely to get it wrong because the protocol description is wrong or 
because the authors misunderstood the reference implementation source code.

Extensive documentation of the source code, a la Knuth's literate 
programming, may be some kind of a middle ground.

> If someone is willing to work on that, I am (and likely many people in
> #bitcoin-dev are) available for any questions about the protocol and
> its semantics.

Ok. Several people expressed an interest in the topic, so I'll give it a 
try and see how it fares.

Martin




From melvincarvalho at gmail.com  Thu Oct 24 09:09:40 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Thu, 24 Oct 2013 11:09:40 +0200
Subject: [Bitcoin-development] Core Development Update #5
Message-ID: <CAKaEYh+u0JECRZeA5p-cU7KG1QCCwg_NxNRAX6ALa-qQZq42oA@mail.gmail.com>

https://bitcoinfoundation.org/blog/?p=290

Very excited about this, particularly the 80 bytes embeddable message.  I
do believe satoshi mentioned he wanted to add short messages, at some point.

Great work Gavin & all!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/c4045d92/attachment.html>

From jgarzik at bitpay.com  Thu Oct 24 10:39:24 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 24 Oct 2013 06:39:24 -0400
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <5268C632.3030005@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com>
	<20131023194039.GB31497@petertodd.org> <52682C24.30700@250bpm.com>
	<20131023202731.GA31783@petertodd.org>
	<CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
	<5268C632.3030005@250bpm.com>
Message-ID: <CAJHLa0NmYjP-fxJFN1dXwAV94Hv9tixAAPeEddH-ukq02aYZpg@mail.gmail.com>

Yes.  I had pointed people in IRC to Knuth's literate programming, as
an example of how we might document bitcoin.


On Thu, Oct 24, 2013 at 3:03 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:
> On 23/10/13 23:07, Pieter Wuille wrote:
>
>> In short,
>> consistency is more important than correctness.
>
> That's a nice and concise way to put it and any potential protocol
> documentation should start with a statement like that.
>
>> However, I do not think that making it hard to find information about
>> the details of the system is the way to go. Alternate implementations
>> are likely inevitable, and in the long run probably a win for the
>> ecosystem. If effort is put into accurately describing the rules, it
>> should indeed carry a strong notice about it being descriptive rather
>> than normative.
>
> One interesting question is whather alternative implementations are more
> likely to get it wrong because the protocol description is wrong or
> because the authors misunderstood the reference implementation source code.
>
> Extensive documentation of the source code, a la Knuth's literate
> programming, may be some kind of a middle ground.
>
>> If someone is willing to work on that, I am (and likely many people in
>> #bitcoin-dev are) available for any questions about the protocol and
>> its semantics.
>
> Ok. Several people expressed an interest in the topic, so I'll give it a
> try and see how it fares.
>
> Martin
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From decker.christian at gmail.com  Thu Oct 24 11:11:05 2013
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 24 Oct 2013 13:11:05 +0200
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <5268C632.3030005@250bpm.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com> <20131023194039.GB31497@petertodd.org>
	<52682C24.30700@250bpm.com> <20131023202731.GA31783@petertodd.org>
	<CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
	<5268C632.3030005@250bpm.com>
Message-ID: <CALxbBHVEdTmo1VWL5zj2ZBV6c-Td4TfpbQSQOWuLGbpxHSDRdA@mail.gmail.com>

I'd like to add some historical background about how the "protocol
specification" came to be in the first place.

A bit over three years [1] ago I started an attempt to document the
network protocol, by reverse engineering it from the satoshi
client. My goal, back then, was to enable like-minded engineers to
create alternative clients and move away from the client-monoculture
that is still predominant today. It was clear from the beginning that
it would merely be a reverse engineering effort, and that it would
likely lag a bit behind the changes in the main client. It was meant
as a help for engineers that are not well versed in C/C++ to enable
them to contribute by creating new clients, but the satoshi client
would always be the de-facto standard.

With the move from Google Code to the Bitcoin.it wiki somehow this
notion of it being a reverse engineering effort was lost and people
started assuming that if the behavior of the satoshi client did not
match the protocol description it was a bug on the client
side. Instead it is because the reverse engineering of the protocol is
incorrect or simply missing some details. Although the protocol
description is far more complete than it was back when we started, I
still don't feel comfortable giving it the name specification.

I still believe that a client monoculture is bad for the system as a
whole, because a single bug might bring down the whole network. Giving
people the necessary tools to implement new clients brings
stability. I do understand the criticism that writing a specification
might hinder future development as it restricts the possible changes
to the protocol, but isn't this already the case as long as we have
legacy versions of the client participating in the network? I would
also argue that having a specification allows an application
independent review of the protocol to identify possible improvements
and bugs.

I think the protocol description has an important place in the
development of Bitcoin, so much so that we pushed a long time ago to
separate protocol version from the client version. I would love to see
the protocol specification becoming official part of the bitcoin
github repository, which would ideally be maintained alongside the
satoshi client to keep it up to date.

Regards,
Christian Decker

[1] https://bitcointalk.org/index.php?topic=231
--
Christian Decker


On Thu, Oct 24, 2013 at 9:03 AM, Martin Sustrik <sustrik at 250bpm.com> wrote:
> On 23/10/13 23:07, Pieter Wuille wrote:
>
>> In short,
>> consistency is more important than correctness.
>
> That's a nice and concise way to put it and any potential protocol
> documentation should start with a statement like that.
>
>> However, I do not think that making it hard to find information about
>> the details of the system is the way to go. Alternate implementations
>> are likely inevitable, and in the long run probably a win for the
>> ecosystem. If effort is put into accurately describing the rules, it
>> should indeed carry a strong notice about it being descriptive rather
>> than normative.
>
> One interesting question is whather alternative implementations are more
> likely to get it wrong because the protocol description is wrong or
> because the authors misunderstood the reference implementation source code.
>
> Extensive documentation of the source code, a la Knuth's literate
> programming, may be some kind of a middle ground.
>
>> If someone is willing to work on that, I am (and likely many people in
>> #bitcoin-dev are) available for any questions about the protocol and
>> its semantics.
>
> Ok. Several people expressed an interest in the topic, so I'll give it a
> try and see how it fares.
>
> Martin
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From slush at centrum.cz  Thu Oct 24 13:26:32 2013
From: slush at centrum.cz (slush)
Date: Thu, 24 Oct 2013 15:26:32 +0200
Subject: [Bitcoin-development] BIP39 word list
In-Reply-To: <CAAS2fgQ1uYvNxZu6DOKZ2k9qj2kYhGpHxxzsZdsqb-Oi2uSKmw@mail.gmail.com>
References: <87iowuuof9.fsf@gmail.com>
	<CAAS2fgQ1uYvNxZu6DOKZ2k9qj2kYhGpHxxzsZdsqb-Oi2uSKmw@mail.gmail.com>
Message-ID: <CAJna-Hjap-GPc-rTQsYxVqjvigZ3y8YDQmL++b2Gw0SAC7QLQA@mail.gmail.com>

I've just pushed updated wordlist which is filtered to similar characters
taken from this matrix.

BIP39 now consider following character pairs as similar:

        similar = (
            ('a', 'c'), ('a', 'e'), ('a', 'o'),
            ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),
            ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),
('c', 'u'),
            ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),
            ('e', 'f'), ('e', 'o'),
            ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),
            ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),
            ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),
            ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),
            ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),
            ('k', 'x'),
            ('l', 't'),
            ('m', 'n'), ('m', 'w'),
            ('n', 'u'), ('n', 'z'),
            ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),
            ('p', 'q'), ('p', 'r'),
            ('q', 'y'),
            ('s', 'z'),
            ('u', 'v'), ('u', 'w'), ('u', 'y'),
            ('v', 'w'), ('v', 'y')
        )

Feel free to review and comment current wordlist, but I think we're slowly
moving forward final list.

slush


On Sat, Oct 19, 2013 at 1:58 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> some fairly old wordlist solver code of mine:
>
> https://people.xiph.org/~greg/wordlist.visual.py
>
> it has a 52x52 letter visual similarity matrix in it (along with a
> citation)
>
> On Fri, Oct 18, 2013 at 4:52 PM, jan <jan.marecek at gmail.com> wrote:
> >
> > The words 'public', 'private' and 'secret' could be confusing when
> > encoding public and private keys. eg. a private key that begins with
> > the word 'public'.
> >
> > I think avoiding words that could look similar when written down would
> > be a good idea aswell. I searched for words that only differ by the
> > letters c & e, g & y, u & v and found the following:
> >
> > car ear
> > cat eat
> > gear year
> > value valve
> >
> > Other combinations could potentially be problematic depending on the
> > handwriting style: ft, ao, ij, vy, possibly even lt and il?
> >
> > I've included the search utility I used below.
> >
> >
> > #include <stdbool.h>
> > #include <string.h>
> > #include <stdio.h>
> >
> > char *similar_char_pairs[] = { "ce", "gy", "uv", NULL };
> >
> > bool is_similar_char(char c1, char c2)
> > {
> >   char **pairs = similar_char_pairs;
> >   do {
> >     char *p = *pairs;
> >     if ((c1 == p[0] && c2 == p[1]) ||
> >         (c1 == p[1] && c2 == p[0]))
> >       return true;
> >   } while (*++pairs);
> >
> >   return false;
> > }
> >
> > bool print_words_if_similar(char *word1, char *word2)
> > {
> >   /* reject words of different lengths */
> >   if (strlen(word1) != strlen(word2))
> >     return false;
> >
> >   size_t i, similarcount = 0;
> >
> >   for (i = 0; i < strlen(word1); i++) {
> >     /* skip identical letters */
> >     if (word1[i] == word2[i])
> >       continue;
> >
> >     /* reject words that don't match */
> >     if (is_similar_char(word1[i], word2[i]) == false)
> >       return false;
> >
> >     similarcount++;
> >   }
> >
> >   /* reject words with more than 1 different letter */
> >   //if (similarcount > 1)
> >   //  return false;
> >
> >   printf("%s %s\n", word1, word2);
> >
> >   return true;
> > }
> >
> > int main(void)
> > {
> >   /* english.txt is assumed to exist in the working directory
> >      download from:
> >
> https://github.com/trezor/python-mnemonic/blob/master/mnemonic/wordlist/english.txt*/
> >   FILE* f = fopen("english.txt", "r");
> >   if (!f) {
> >     fprintf(stderr, "failed to open english.txt\n");
> >     return 1;
> >   }
> >
> >   /* read in word list, assumes one word per line */
> >   #define MAXWORD 16
> >   char wordlist[2048][MAXWORD];
> >   int word = 0;
> >   while (fgets(wordlist[word], MAXWORD, f)) {
> >     /* strip trailing whitespace, assumes no leading whitespace */
> >     char *ch = strpbrk(wordlist[word], " \n\t");
> >     if (ch)
> >       *ch = '\0';
> >     word++;
> >   }
> >
> >   if (word != 2048) {
> >     fprintf(stderr, "word list incorrect length\n");
> >     return 1;
> >   }
> >
> >   /* check each word for similarity against every other word */
> >   int i, j, count = 0;
> >   for (i = 0; i < 2048; i++) {
> >     for (j = i+1; j < 2048; j++) {
> >       if (print_words_if_similar(wordlist[i], wordlist[j]))
> >         count++;
> >     }
> >   }
> >
> >   printf("%d matches\n", count);
> >
> >   return 0;
> > }
> >
> >
> ------------------------------------------------------------------------------
> > October Webinars: Code for Performance
> > Free Intel webinars can help you accelerate application performance.
> > Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> > the latest Intel processors and coprocessors. See abstracts and register
> >
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/a07dd6b6/attachment.html>

From pete at petertodd.org  Thu Oct 24 14:30:43 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 24 Oct 2013 10:30:43 -0400
Subject: [Bitcoin-development] Making fee estimation better
Message-ID: <20131024143043.GA12658@savin>

Quick thought on how to make blockchain-based fee estimates work better
in the context of out-of-band mining contracts: have miners advertise in
their coinbase's what fees were actually paid, as opposed to appear to
have been paid.

The logic is very simple: we assume miners aren't an effective cartel
and are willing to undercut each other. Therefore it's in their
interests for people to broadcast a transaction with a fee that is
competitive the first time around so they can get onto mining it
immediately.

Granted, those incentives may not be as strong as one would like, and
there could be some perverse ones as well, but it's a line of thought
worth thinking about more.


A related idea: let miners advertise a address to submit transactions
too. (like a node IP) The inherent proof-of-work is nice and could help
people more securely find someone to connect too with the inherent proof
that a lot of work went into mining the block with the address in it.

Obviously, lots of downsides too, but it's a different security model
than other forms of bootstrapping, and that's probably useful in of
itself.

-- 
'peter'[:-1]@petertodd.org
0000000000000001fce0617deb31cc20bec2903cd10dc352ac3b2fc1af6b27f0
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/b5009fcb/attachment.sig>

From pete at petertodd.org  Thu Oct 24 14:34:03 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 24 Oct 2013 10:34:03 -0400
Subject: [Bitcoin-development] Fix available for startup issues for git HEAD
	nodes
Message-ID: <20131024143403.GB12658@savin>

"DisconnectBlock() : outputs still spent? database corrupted"

If you can't get your node up and running and see the above in your
debug.log there's a potential fix available:

https://github.com/bitcoin/bitcoin/pull/3143

Be warned: highly rushed and poorly tested, so you're best to ask a dev
in IRC for more details.

-- 
'peter'[:-1]@petertodd.org
0000000000000000bf7bcf3da1b3b228216b72fefccbed84becaaba6fcc6aff2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/f37d44ea/attachment.sig>

From mike at plan99.net  Thu Oct 24 14:38:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 24 Oct 2013 16:38:16 +0200
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <20131024143043.GA12658@savin>
References: <20131024143043.GA12658@savin>
Message-ID: <CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>

On Thu, Oct 24, 2013 at 4:30 PM, Peter Todd <pete at petertodd.org> wrote:

> Quick thought on how to make blockchain-based fee estimates work better
> in the context of out-of-band mining contracts: have miners advertise in
> their coinbase's what fees were actually paid, as opposed to appear to
> have been paid.


This is interesting, but I suppose some miners may have business models
that can't be easily summed up as a "fee" - like all-you-can-eat deals with
certain providers, or preference to certain kinds of transactions etc.

For the concern that estimation might force fees down too far if miners
include private transactions, I thought the estimates were calculated only
on broadcast transactions, so transactions that just appear in a block
won't ever influence the estimate?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/76944c85/attachment.html>

From pete at petertodd.org  Thu Oct 24 14:43:58 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 24 Oct 2013 10:43:58 -0400
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
Message-ID: <20131024144358.GA17142@savin>

On Thu, Oct 24, 2013 at 04:38:16PM +0200, Mike Hearn wrote:
> On Thu, Oct 24, 2013 at 4:30 PM, Peter Todd <pete at petertodd.org> wrote:
> 
> > Quick thought on how to make blockchain-based fee estimates work better
> > in the context of out-of-band mining contracts: have miners advertise in
> > their coinbase's what fees were actually paid, as opposed to appear to
> > have been paid.
> 
> 
> This is interesting, but I suppose some miners may have business models
> that can't be easily summed up as a "fee" - like all-you-can-eat deals with
> certain providers, or preference to certain kinds of transactions etc.

For sure, although *usually* all kinds of odd-ball forms of compensation
can be turned into a dollar figure. :)

> For the concern that estimation might force fees down too far if miners
> include private transactions, I thought the estimates were calculated only
> on broadcast transactions, so transactions that just appear in a block
> won't ever influence the estimate?

The thing is if a miner is mining a transaction, even in exchange for a
out-of-band fee if they succeed, they probably still have an incentive
to a: ask the sender to include enough of a fee that it propagates, and
b: broadcast it themselves to make sure it's in other nodes signature
caches so their blocks propagate fast. (esp. with by-txid-only relaying)

Anyway, in what circumstance would a customer want an exclusive contract
with a miner?

-- 
'peter'[:-1]@petertodd.org
0000000000000000bf7bcf3da1b3b228216b72fefccbed84becaaba6fcc6aff2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/60a19c56/attachment.sig>

From mike at plan99.net  Thu Oct 24 14:46:41 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 24 Oct 2013 16:46:41 +0200
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <20131024144358.GA17142@savin>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
Message-ID: <CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>

Well, miners are all supposed to be more or less equivalent - modulo
differences in tx acceptance policies - so I'd hope that having out of bad
fee mechanisms yet still broadcasting the TX isn't that common. If it was
broadcasted, it should get mined in short order, otherwise things are going
wrong.

On Thu, Oct 24, 2013 at 4:43 PM, Peter Todd <pete at petertodd.org> wrote:

> Anyway, in what circumstance would a customer want an exclusive contract
> with a miner?
>

I was thinking for transactions that aren't standard so have to be
submitted to miners directly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/de348db5/attachment.html>

From pete at petertodd.org  Thu Oct 24 14:54:47 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 24 Oct 2013 10:54:47 -0400
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
Message-ID: <20131024145447.GA19949@savin>

On Thu, Oct 24, 2013 at 04:46:41PM +0200, Mike Hearn wrote:
> Well, miners are all supposed to be more or less equivalent - modulo
> differences in tx acceptance policies - so I'd hope that having out of bad
> fee mechanisms yet still broadcasting the TX isn't that common. If it was
> broadcasted, it should get mined in short order, otherwise things are going
> wrong.

Eligius has contracts to do transaction mining, and it's currently 10%
of the hashing power.

As I said elsewhere, a good use-case for OOB fee payment is for
merchants who use the payment protocol, and want to get their customers
transactions mined as efficiently and cheaply as possible.
(child-pays-for-parent has more blockchain bloat and thus extra expense)

> On Thu, Oct 24, 2013 at 4:43 PM, Peter Todd <pete at petertodd.org> wrote:
> 
> > Anyway, in what circumstance would a customer want an exclusive contract
> > with a miner?
> >
> 
> I was thinking for transactions that aren't standard so have to be
> submitted to miners directly.

Sure, but even then there's no harm in letting more than one miner know
about it.

There's even an existing form of this: P2Pool lets shares be accompanied
by up to 50KB worth of transactions of any form.

-- 
'peter'[:-1]@petertodd.org
000000000000000d2860c825ea223b805c60a33b26b9b70616698033d360b066
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/2cd3d55b/attachment.sig>

From thomasV1 at gmx.de  Thu Oct 24 17:29:18 2013
From: thomasV1 at gmx.de (thomasV1 at gmx.de)
Date: Thu, 24 Oct 2013 19:29:18 +0200 (CEST)
Subject: [Bitcoin-development] Proposal to replace BIP0039
Message-ID: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>

I would like to propose a new BIP, that replaces BIP0039.

My initial problem was that BIP0039 is not backward compatible with Electrum. When trying to solve that, I realized that the seed encoding used in Electrum does not help, because it does not contain a version number information. However, BIP0039 suffers the same shortcoming: it does nothing to help a future replacement, it wants to be final. My first recommendation is to allocate a few bits of the mnemonic, in order to encode a "version number" along with the checksum bits.

The second problem is the wallet structure. There are multiple ways to use a BIP32 tree, and each client will certainly handle this differently. For Electrum, it is important to be able to recover an entire wallet from its mnemonic, using no extra information. Thus, the client needs to know which branches of the BIP32 tree are populated by default. This means that the "version number" I mentioned will not only be about the seed encoding, but it should also give some information about the wallet structure, at least in the case of Electrum.

The third problem is the dictionary. I do not like the dictionary proposed in BIP0039, because it contains too many short words, which are bad for memorization (I explained here how I designed the dictionary used by Electrum: https://bitcointalk.org/index.php?topic=153990.msg2167909#msg2167909). I had some discussions with slush about this, but I do not think it will ever be possible to find a consensus on that topic. 

BIP0039 also suggests to use localized dictionaries, with non-colliding word lists, but it is not clear how that will be achieved; it seems to be difficult, because languages often have words in common. It looks like a first-come-first-served aproach will be used. 

For these reasons, I believe that we need a dictionary-independent solution. This will allow developers to use the dictionary they like, and localization will be easy.

I would like to suggest the following solution:

1. Define a target of k bits: this target contains the metadata ("version number"), plus some extra bits for the checksum. For example, with k=16, we can allocate 8 bits for the version number, and 8 bits for checksum.

2. Pick a random number of length n+k bits, where n is the desired entropy of the seed, and k is the number of bits needed for the metadata (checksum, version number)

3. Translate this random number to a mnemonic string, using a dictionary.

4. Compute a hash of the mnemonic string (utf8 encoded).

5. Repeat steps 2, 3 and 4 until the k first bits of the hash are equal to the target defined in 1.

6. Use the final hash as input for bip32 (as the master seed)

This means that we "mine" for the seed, until the desired metadata is obtained in the hash. This "mining" also adds a bit of difficulty to the process of finding a seed (on average, it will require 2^k iterations). The entropy of the final hash is n, the number of unconstrained bits.

This solution makes it possible for developers to define new dictionaries, localized or adapted to a particular need. 
The resulting mnemonics will always be usable with other clients, even if they do not know the dictionary. 

I am willing to write a new BIP where this proposal is specified in detail.



From slush at centrum.cz  Thu Oct 24 18:09:52 2013
From: slush at centrum.cz (slush)
Date: Thu, 24 Oct 2013 20:09:52 +0200
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
Message-ID: <CAJna-HhzGmdoaaoFkp8tBeKCZ4DhDpNO43wzzk_ke7-kH2smbg@mail.gmail.com>

On Thu, Oct 24, 2013 at 7:29 PM, <thomasV1 at gmx.de> wrote:

>
> My initial problem was that BIP0039 is not backward compatible with
> Electrum. When trying to solve that, I realized that the seed encoding used
> in Electrum does not help, because it does not contain a version number
> information. However, BIP0039 suffers the same shortcoming: it does nothing
> to help a future replacement, it wants to be final. My first recommendation
> is to allocate a few bits of the mnemonic, in order to encode a "version
> number" along with the checksum bits.
>
>
Two years ago I proposed exactly this and you refused to add extra
information to mnemonic, because "it isn't necessary" and "it makes it
longer to mnemonization". What changed since then?


> The second problem is the wallet structure. There are multiple ways to use
> a BIP32 tree, and each client will certainly handle this differently. For
> Electrum, it is important to be able to recover an entire wallet from its
> mnemonic, using no extra information. Thus, the client needs to know which
> branches of the BIP32 tree are populated by default. This means that the
> "version number" I mentioned will not only be about the seed encoding, but
> it should also give some information about the wallet structure, at least
> in the case of Electrum.
>
>
Hm, what exactly do you need to store about wallet structure? I lived in
opinion that everything is able to recover using CKD function to generate
new addresses and blockchain lookups for their balances.


> The third problem is the dictionary. I do not like the dictionary proposed
> in BIP0039, because it contains too many short words, which are bad for
> memorization (I explained here how I designed the dictionary used by
> Electrum:
> https://bitcointalk.org/index.php?topic=153990.msg2167909#msg2167909). I
> had some discussions with slush about this, but I do not think it will ever
> be possible to find a consensus on that topic.
>
>
Yes, that's true. It isn't possible to make everybody 100% happy. At least
I wanted to be constructive and asked you to replace the most problematic
words. No pull request from you so far.


> BIP0039 also suggests to use localized dictionaries, with non-colliding
> word lists, but it is not clear how that will be achieved; it seems to be
> difficult, because languages often have words in common. It looks like a
> first-come-first-served aproach will be used.
>
>
Yes, it was original idea. So far I don't think this is a problem. Of
course some words may have some meaning across languages, but it should be
easy to avoid them. There are tens of thousands words in every language and
we need to pick "only" 2048 words to wordlist.


> For these reasons, I believe that we need a dictionary-independent
> solution. This will allow developers to use the dictionary they like, and
> localization will be easy.
>
I would like to suggest the following solution:
>
>
If I understand this well, it is basically one-way algorithm "mnemonic ->
seed", right? Seed cannot be printed out as mnemonic, because there's
hashing involved, but the bi-directionality has been the original
requirement for such algorithm (at least in Electrum and bip39).

Then, how is this different to picking 12 random words from dictionary and
hashing them together? I don't see any benefit in that "mining" part of the
proposal (except that it is lowering the entropy for given length of
mnemonic).


> This solution makes it possible for developers to define new dictionaries,
> localized or adapted to a particular need.
>

Are your worries about overlapping words across languages a real issue?

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/05ebacd9/attachment.html>

From slush at centrum.cz  Thu Oct 24 18:26:47 2013
From: slush at centrum.cz (slush)
Date: Thu, 24 Oct 2013 20:26:47 +0200
Subject: [Bitcoin-development] BIP0039 Mnemonic code for generating
 deterministic keys
In-Reply-To: <15F27A88-53BF-4149-A8FF-282350312B92@godofgod.co.uk>
References: <CAJna-HgXPNa2UCO_edBzK=oY5-F=6LQVHap1Vk9XtGr09chy9Q@mail.gmail.com>
	<796AC330-56EF-43D2-9935-5409824A4F33@godofgod.co.uk>
	<CAJna-HhKDx4xnwWCC7apTLCDwEurFbagNTYXF=doBbhDBaXojA@mail.gmail.com>
	<0F445FFE-FA1A-4A64-9A28-C734E744B5F7@godofgod.co.uk>
	<5231AF5E.8080903@gk2.sk>
	<15F27A88-53BF-4149-A8FF-282350312B92@godofgod.co.uk>
Message-ID: <CAJna-HiE8YgKOuAHubRKbJYQviMz8Ws9E+eMDwcgV1pWpDBijg@mail.gmail.com>

We've reflected many comments about BIP39 wordlist from the community and I
think the wordlist is much better now. Specifically we removed many of
theoretically offensive words as well as we implemented algorithm for
detecting words with similar characters (cat/eat) and we resolved these
duplicities. I'm now quite happy with the wordlist and I want to ask you
for next (final?) round of comments.

>From other features, we added password protection of seed and seed
hardening (against bruteforcing) using Rijndael cipher. This has been
chosen because its blocksize can be 128, 192 or 256 bits, so it fits length
of desired seeds. Also there are Rijndael implementations in every
language. Btw password protection has one interesting feature - plausible
deniability. It allows user to have one mnemonic and by using it with
different passwords, it will generate different BIP32 wallets.... (wink
wink)

I want to be pretty clear that we need to close this topic somehow, because
we want to use such algorithm in Trezor (which deadline is coming quick)
and also other wallet developers want to implement such algorithm into
clients to be compatible with Trezor. There were quite strict requirements
for such algorithm (like the possibility to convert mnemonic to seed as
well as seed to mnemonic) and I think we found a good solution. I'm wildly
asking you for constructive comments, but saying "it's a crap, I don't like
it" won't help anything.

Thanks,
slush


On Thu, Sep 12, 2013 at 6:02 PM, Matthew Mitchell <
matthewmitchell at godofgod.co.uk> wrote:

> I removed some more but I haven't added enough back in. It was taking far
> longer than expected so I gave up, but maybe someone else can try to add
> some more:
>
>
> https://github.com/MatthewLM/python-mnemonic/blob/master/mnemonic/wordlist/english.txt
>
> On 12 Sep 2013, at 13:11, Pavol Rusnak <stick at gk2.sk> wrote:
>
> > On 10/09/13 23:03, Matthew Mitchell wrote:
> >> Maybe it would have been better without the aggressive words?
> >
> > I revisited the wordlist and replaced around 67 words that can be
> > found offensive in some context.
> >
> > --
> > Best Regards / S pozdravom,
> >
> > Pavol Rusnak <stick at gk2.sk>
> >
> >
> ------------------------------------------------------------------------------
> > How ServiceNow helps IT people transform IT departments:
> > 1. Consolidate legacy IT systems to a single system of record for IT
> > 2. Standardize and globalize service processes across IT
> > 3. Implement zero-touch automation to replace manual, redundant tasks
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> How ServiceNow helps IT people transform IT departments:
> 1. Consolidate legacy IT systems to a single system of record for IT
> 2. Standardize and globalize service processes across IT
> 3. Implement zero-touch automation to replace manual, redundant tasks
> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/c69dcea3/attachment.html>

From slush at centrum.cz  Thu Oct 24 18:54:53 2013
From: slush at centrum.cz (slush)
Date: Thu, 24 Oct 2013 20:54:53 +0200
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
Message-ID: <CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>

On Thu, Oct 24, 2013 at 7:29 PM, <thomasV1 at gmx.de> wrote:
>
> My initial problem was that BIP0039 is not backward compatible with
> Electrum. When trying to solve that, I realized that the seed encoding used
> in Electrum does not help, because it does not contain a version number
> information. However, BIP0039 suffers the same shortcoming: it does nothing
> to help a future replacement, it wants to be final. My first recommendation
> is to allocate a few bits of the mnemonic, in order to encode a "version
> number" along with the checksum bits.
>
>
On topic of "it wants to be final" and "it is incompatible with Electrum":
None of this is true. Firstly, it *is* possible to implement both algorithm
into the client at the same time, so user will be able to recover wallet
using Electrum or bip39 mnemonic and - what is worse - you already *know*
about this solution. Still you're spreading FUD about it on IRC, on emails
behind my back and here on mailing list.

The solution for Electrum client - as we discussed two weeks ago on IRC -
is that:

a) User type down the mnemonic (created with Electrum or BIP39)
b1) Only if *all* words are presented in both dictionaries and it has valid
BIP39 checksum (which is quite rare situation itself!), the mnemonic can be
consider to be both Electrum or BIP39.
b2) In most of cases we end up here, because the most common situation is
that with given words, only Electrum *or* BIP39 seed can be recovered.
----
c) Consider the mnemonic as Electrum. Create first few addresses and do a
lookup. If there are transactions in address history, this is Electrum
mnemonic.
d) If there were no used address in c), build seed using BIP39 and do the
same lookup. If there's history, this is BIP39 mnemonic.
e) If there are no history on both algorithm, then pick prefered one for
given client (it should not hurt which one, because first use of given
mnemonic will "freeze" given algorithm for next time of mnemonic recovery).

Well, because only Electrum uses some mnemonic algorithm to this date, such
decision tree need to be implemented only in Electrum. You cannot tell that
"it is too complicated" or "ambiguous", because you're using the same
algorithm of deciding between Electrum deterministic / BIP32.

I must admit that I'm quite annoyed of such discussion, because we already
discussed all this privately, you didn't tell me any reason why this should
not work and still I see that this is coming back as a boomerang.

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/d8ba8bd2/attachment.html>

From pieter.wuille at gmail.com  Thu Oct 24 19:23:51 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 24 Oct 2013 21:23:51 +0200
Subject: [Bitcoin-development] BIP0039 Mnemonic code for generating
 deterministic keys
In-Reply-To: <CAJna-HiE8YgKOuAHubRKbJYQviMz8Ws9E+eMDwcgV1pWpDBijg@mail.gmail.com>
References: <CAJna-HgXPNa2UCO_edBzK=oY5-F=6LQVHap1Vk9XtGr09chy9Q@mail.gmail.com>
	<796AC330-56EF-43D2-9935-5409824A4F33@godofgod.co.uk>
	<CAJna-HhKDx4xnwWCC7apTLCDwEurFbagNTYXF=doBbhDBaXojA@mail.gmail.com>
	<0F445FFE-FA1A-4A64-9A28-C734E744B5F7@godofgod.co.uk>
	<5231AF5E.8080903@gk2.sk>
	<15F27A88-53BF-4149-A8FF-282350312B92@godofgod.co.uk>
	<CAJna-HiE8YgKOuAHubRKbJYQviMz8Ws9E+eMDwcgV1pWpDBijg@mail.gmail.com>
Message-ID: <CAPg+sBjFAJrDx=dzU3nWCiaUBEiD5fZ2B1aMHGgT1gE402N0Kg@mail.gmail.com>

This is probably too late in the discussion, and I certainly don't
want to derail any standard being formed. But if it is controversial,
I want to offer my own suggestion.

This is a proposal I wrote a year ago, but never spent enough work to
push it as a standard:
https://bitcointalk.org/index.php?topic=102349.0

It needs some work, but I believe it may be a base for a superior
system than what is being proposed here. As the scheme linked above
has built-in configurable difficulty and checksums, the word set being
used doesn't need to function for checking anymore. You could use any
dictionary/language/text generator, and feed it into the system - the
software on the other side doesn't need to use the same dictionary.

The disadvantage is of course that it cannot encode arbitrary data -
it can only be used to generate a random seed. It does have some
theoretical advantages, though (see link).

-- 
Pieter


On Thu, Oct 24, 2013 at 8:26 PM, slush <slush at centrum.cz> wrote:
> We've reflected many comments about BIP39 wordlist from the community and I
> think the wordlist is much better now. Specifically we removed many of
> theoretically offensive words as well as we implemented algorithm for
> detecting words with similar characters (cat/eat) and we resolved these
> duplicities. I'm now quite happy with the wordlist and I want to ask you for
> next (final?) round of comments.
>
> From other features, we added password protection of seed and seed hardening
> (against bruteforcing) using Rijndael cipher. This has been chosen because
> its blocksize can be 128, 192 or 256 bits, so it fits length of desired
> seeds. Also there are Rijndael implementations in every language. Btw
> password protection has one interesting feature - plausible deniability. It
> allows user to have one mnemonic and by using it with different passwords,
> it will generate different BIP32 wallets.... (wink wink)
>
> I want to be pretty clear that we need to close this topic somehow, because
> we want to use such algorithm in Trezor (which deadline is coming quick) and
> also other wallet developers want to implement such algorithm into clients
> to be compatible with Trezor. There were quite strict requirements for such
> algorithm (like the possibility to convert mnemonic to seed as well as seed
> to mnemonic) and I think we found a good solution. I'm wildly asking you for
> constructive comments, but saying "it's a crap, I don't like it" won't help
> anything.
>
> Thanks,
> slush
>
>
> On Thu, Sep 12, 2013 at 6:02 PM, Matthew Mitchell
> <matthewmitchell at godofgod.co.uk> wrote:
>>
>> I removed some more but I haven't added enough back in. It was taking far
>> longer than expected so I gave up, but maybe someone else can try to add
>> some more:
>>
>>
>> https://github.com/MatthewLM/python-mnemonic/blob/master/mnemonic/wordlist/english.txt
>>
>> On 12 Sep 2013, at 13:11, Pavol Rusnak <stick at gk2.sk> wrote:
>>
>> > On 10/09/13 23:03, Matthew Mitchell wrote:
>> >> Maybe it would have been better without the aggressive words?
>> >
>> > I revisited the wordlist and replaced around 67 words that can be
>> > found offensive in some context.
>> >
>> > --
>> > Best Regards / S pozdravom,
>> >
>> > Pavol Rusnak <stick at gk2.sk>
>> >
>> >
>> > ------------------------------------------------------------------------------
>> > How ServiceNow helps IT people transform IT departments:
>> > 1. Consolidate legacy IT systems to a single system of record for IT
>> > 2. Standardize and globalize service processes across IT
>> > 3. Implement zero-touch automation to replace manual, redundant tasks
>> >
>> > http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>> ------------------------------------------------------------------------------
>> How ServiceNow helps IT people transform IT departments:
>> 1. Consolidate legacy IT systems to a single system of record for IT
>> 2. Standardize and globalize service processes across IT
>> 3. Implement zero-touch automation to replace manual, redundant tasks
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jtimon at monetize.io  Thu Oct 24 19:32:26 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 24 Oct 2013 21:32:26 +0200
Subject: [Bitcoin-development] BIP0039 Mnemonic code for generating
 deterministic keys
In-Reply-To: <CAJna-HiE8YgKOuAHubRKbJYQviMz8Ws9E+eMDwcgV1pWpDBijg@mail.gmail.com>
References: <CAJna-HgXPNa2UCO_edBzK=oY5-F=6LQVHap1Vk9XtGr09chy9Q@mail.gmail.com>
	<796AC330-56EF-43D2-9935-5409824A4F33@godofgod.co.uk>
	<CAJna-HhKDx4xnwWCC7apTLCDwEurFbagNTYXF=doBbhDBaXojA@mail.gmail.com>
	<0F445FFE-FA1A-4A64-9A28-C734E744B5F7@godofgod.co.uk>
	<5231AF5E.8080903@gk2.sk>
	<15F27A88-53BF-4149-A8FF-282350312B92@godofgod.co.uk>
	<CAJna-HiE8YgKOuAHubRKbJYQviMz8Ws9E+eMDwcgV1pWpDBijg@mail.gmail.com>
Message-ID: <CAC1+kJPTXOkLoo=QHt1xyNwJ4BkNu1kVOXcZX5gF1MCNMbNSpg@mail.gmail.com>

This will probably sound stupid to most of you, but I'll say it anyway.

The aim of mnemonics is to easily remember, isn't it?
But the approach of removing "offensive words" is probably
counterproductive to achieving that end. These words cause a greater
emotional impact in our human moral psyches.
If we were willing to use that fact in our advantage to optimize the
"maximum unforgettableness" criterion, we should actually prefer the
most generally offensive words in that list. Specially if they can
combine with each other to produce more offensive results, basically
the opposite of what we're doing.

Isn't "legalize murder dirty jew" much easier to remember for most
people than "sandwich house yellow cauliflower"?

I guess that even if I'm right, this will be hard to explain to users
and I'm not offering myself to do it. So I completely understand if
the people working on this BIP simply ignore this "unforgettable
wordlist" proposal like if it was just a bad taste joke.
Using the sub-optimal (in terms of human memory) politically correct
wordlist probably won't be that much worse.


On 10/24/13, slush <slush at centrum.cz> wrote:
> We've reflected many comments about BIP39 wordlist from the community and I
> think the wordlist is much better now. Specifically we removed many of
> theoretically offensive words as well as we implemented algorithm for
> detecting words with similar characters (cat/eat) and we resolved these
> duplicities. I'm now quite happy with the wordlist and I want to ask you
> for next (final?) round of comments.
>
> >From other features, we added password protection of seed and seed
> hardening (against bruteforcing) using Rijndael cipher. This has been
> chosen because its blocksize can be 128, 192 or 256 bits, so it fits length
> of desired seeds. Also there are Rijndael implementations in every
> language. Btw password protection has one interesting feature - plausible
> deniability. It allows user to have one mnemonic and by using it with
> different passwords, it will generate different BIP32 wallets.... (wink
> wink)
>
> I want to be pretty clear that we need to close this topic somehow, because
> we want to use such algorithm in Trezor (which deadline is coming quick)
> and also other wallet developers want to implement such algorithm into
> clients to be compatible with Trezor. There were quite strict requirements
> for such algorithm (like the possibility to convert mnemonic to seed as
> well as seed to mnemonic) and I think we found a good solution. I'm wildly
> asking you for constructive comments, but saying "it's a crap, I don't like
> it" won't help anything.
>
> Thanks,
> slush
>
>
> On Thu, Sep 12, 2013 at 6:02 PM, Matthew Mitchell <
> matthewmitchell at godofgod.co.uk> wrote:
>
>> I removed some more but I haven't added enough back in. It was taking far
>> longer than expected so I gave up, but maybe someone else can try to add
>> some more:
>>
>>
>> https://github.com/MatthewLM/python-mnemonic/blob/master/mnemonic/wordlist/english.txt
>>
>> On 12 Sep 2013, at 13:11, Pavol Rusnak <stick at gk2.sk> wrote:
>>
>> > On 10/09/13 23:03, Matthew Mitchell wrote:
>> >> Maybe it would have been better without the aggressive words?
>> >
>> > I revisited the wordlist and replaced around 67 words that can be
>> > found offensive in some context.
>> >
>> > --
>> > Best Regards / S pozdravom,
>> >
>> > Pavol Rusnak <stick at gk2.sk>
>> >
>> >
>> ------------------------------------------------------------------------------
>> > How ServiceNow helps IT people transform IT departments:
>> > 1. Consolidate legacy IT systems to a single system of record for IT
>> > 2. Standardize and globalize service processes across IT
>> > 3. Implement zero-touch automation to replace manual, redundant tasks
>> >
>> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>> ------------------------------------------------------------------------------
>> How ServiceNow helps IT people transform IT departments:
>> 1. Consolidate legacy IT systems to a single system of record for IT
>> 2. Standardize and globalize service processes across IT
>> 3. Implement zero-touch automation to replace manual, redundant tasks
>> http://pubads.g.doubleclick.net/gampad/clk?id=51271111&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>


-- 
Jorge Tim?n

http://freico.in/



From jeremy at taplink.co  Thu Oct 24 19:43:15 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Thu, 24 Oct 2013 12:43:15 -0700
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CALxbBHVEdTmo1VWL5zj2ZBV6c-Td4TfpbQSQOWuLGbpxHSDRdA@mail.gmail.com>
References: <791a727f-2188-4848-bd77-ea733c8c5c2c@me.com>
	<201310211947.59640.luke@dashjr.org> <52661DB7.7040805@250bpm.com>
	<FAE2A544-9295-4087-96DE-D4602D109CBD@me.com>
	<CAAS2fgS2f=gYRSr1n2DzK7CUH3xG3J2JMnDreCKBoCcJcpGLxg@mail.gmail.com>
	<52662AA1.5050509@250bpm.com>
	<CAJHLa0NDus+Ou5go8b_OHvjYW8f7oxXbpxnHTG3dcvxGR49nxA@mail.gmail.com>
	<52677CF7.9070609@250bpm.com> <20131023194039.GB31497@petertodd.org>
	<52682C24.30700@250bpm.com> <20131023202731.GA31783@petertodd.org>
	<CAPg+sBjv5We415atZocrZniKexFnKmUXB+bMC-tSG4ehQK9rwQ@mail.gmail.com>
	<5268C632.3030005@250bpm.com>
	<CALxbBHVEdTmo1VWL5zj2ZBV6c-Td4TfpbQSQOWuLGbpxHSDRdA@mail.gmail.com>
Message-ID: <op.w5g42djqyldrnw@laptop-air>

Thanks Christian, this is a really interesting bit of history. My own  
personal experience from when I wrote my own client and BCCAPI-ish server  
was that the protocol specification on the Wiki was hugely valuable, and  
rarely sent me astray. Supplement that with the occasional questions on  
#bitcoin-dev, and then just coding, coding, coding and getting unit tests  
to pass.

Nothing compares (IMO) to stepping through your own code watching the unit  
tests run, scripts evaluate, calculating transaction hashes for the  
different SIGHASH modes, and finally getting your first transaction into  
the block chain. I really appreciated the .json files holding the unit  
test data, which were easy to load into my own test harness, the tables on  
the Wiki showing what the stack should look like at each point in a script  
execution, and the diagrams showing transaction signing.

Bitcoin takes some time to "grok" when you first approach; more than a  
day, less than a month, and really no amount of reading documentation or  
specs will get you to that "ah ha" moment. When the fog lifts and the  
blockchain, scripting, signing, and wallet handling really click, suddenly  
the bitcoind code (and many other great public sources in just about any  
language you could want) actually does starts to feel fairly simple and  
obvious. But it certainly doesn't start out that way on day one.

I think the majority of client code development is actually people writing  
'agents' not end-user P2P wallets, and they tend to be written to connect  
to a single bitcoind acting as a proxy to the network. Even some end-user  
wallets work this way! As such, I spent very little time in my own client  
writing P2P protocol code, no peer discovery code, no anti-DoS, etc.  
Clients like this also don't pose much systemic risk, because they don't  
mine, they don't connect directly to external nodes, etc. They can  
certainly be used to "cause trouble" though, but so can  
'sendrawtransaction'.

I chose to speak the P2P protocol to bitcoind versus using some of the  
other options like ZeroMQ, but it still didn't take long to get headers,  
blocks, and transactions downloading. I remember getting stuck on the very  
first version message, because of missing the checksum and user-agent or  
something caused the latest bitcoind to just ignore me. A little wireshark  
capture of the exchange between two working bitcoind instances cleared it  
right up. I didn't mind the leg work, I don't think everything needs to be  
spoon fed, and it's certainly not purposefully obfuscated. Maybe one  
exception is the mix-matched endianness will throw you off, especially if  
you are developing on LE! Anyway, I have huge respect for how much effort  
it takes to keep even small bits of documentation up-to-date. For as  
"slow" as bitcoin moves, it's actually moving incredibly fast.

Finally, the bitcoind console and debug logs, as well sites like  
blockchain.info and blockexplorer.com are hugely helpful for debugging raw  
and live transactions for when you get stuck. There's a surprisingly large  
tooling and support ecosystem out there.

Moral of the story, I think, is everything you need is there. No, it's not  
all in one place. Yes, it takes time to find it and assimilate all that  
knowledge. It also really helps that the community is extremely willing to  
help and answer technical questions, and point you in the right direction,  
even when you're working on your own private client code. The IRC channel  
can certainly be intimidating because it seems like every time I hit enter  
to send a question, gmaxwell's respond 300ms later would invoke an  
immediate forehead slap and a groan of "shit, I knew/should have known  
that, now I feel dumb" ;-) but if you're working on bitcoin, you better  
get used to not being the smartest person in the room! The responses I got  
were never arrogant or disparaging, but they were straight to-the-point  
and surprisingly high quality. Ain't no slouches in that channel, yes you  
will have to bring your A-game and you are expected to have "tried first"  
before just asking. I have fairly limited experience working on open  
source projects, but I'm extremely happy with my experience with the  
Bitcoin community and found writing Bitcoin code hugely enjoyable.

The flip side to helping people implement their own clients, agents, or  
even miners, is helping people to contribute pulls requests, or at the  
very highest echelon, a BIP. If you haven't written any significant  
Bitcoin code, you might want to consider investing in that first before  
submitting a BIP. :-)

For a BIP to be valuable, often it requires widespread or even consensus  
adoption. BIPs are probably not the place to toss just any old 'good idea'  
because BIPs impose a cost on all active developers. I want to read and  
understand 'all the BIPs' because for the most part they are actually  
essential, like, how to handle duplicate transactions in BIP30 - if you  
don't read BIP30 you very likely totally miss that, until your code throws  
exceptions while processing block 91842.

And perhaps the hardest kind of BIP of all is the "lets get wallets to add  
this user-facing feature" where it has no bearing on the blockchain or  
transaction processing, it doesn't make the network more resilient or add  
crucial functionality for increasing scalability. Kind of like JPK's HD  
wallet encryption proposal, which I love, and I tried to contribute to in  
the forums, but I can totally understand the headwinds for making progress  
on BIPs like that one and BIP39. No one is against it per-say, it's just  
much harder to articulate and justify the NEED for everyone to implement,  
test, and support this new not-yet-standard, nice-to-have feature. For  
those kinds of BIPs you probably have to go out and get some wallets to  
implement it, or implement it yourself, to prove the value and kick start  
critical mass before you will even get enough support for getting a BIP  
number assigned. IMO, it's not a Bad Thing.

TL;DR; The current support systems worked very well for me. I was able to  
accomplish all my goals, and I would even say it was a pleasure. Keep a  
high bar for assigning BIP numbers. And I hope to be able to jump back in  
and do more with Bitcoin soon.

Thanks all, sorry if I'm rambling,
Jeremy Spilman

On Thu, 24 Oct 2013 04:11:05 -0700, Christian Decker  
<decker.christian at gmail.com> wrote:

> I'd like to add some historical background about how the "protocol
> specification" came to be in the first place.
>
> A bit over three years [1] ago I started an attempt to document the
> network protocol, by reverse engineering it from the satoshi
> client. My goal, back then, was to enable like-minded engineers to
> create alternative clients and move away from the client-monoculture
> that is still predominant today. It was clear from the beginning that
> it would merely be a reverse engineering effort, and that it would
> likely lag a bit behind the changes in the main client. It was meant
> as a help for engineers that are not well versed in C/C++ to enable
> them to contribute by creating new clients, but the satoshi client
> would always be the de-facto standard.
>
> With the move from Google Code to the Bitcoin.it wiki somehow this
> notion of it being a reverse engineering effort was lost and people
> started assuming that if the behavior of the satoshi client did not
> match the protocol description it was a bug on the client
> side. Instead it is because the reverse engineering of the protocol is
> incorrect or simply missing some details. Although the protocol
> description is far more complete than it was back when we started, I
> still don't feel comfortable giving it the name specification.
>
> I still believe that a client monoculture is bad for the system as a
> whole, because a single bug might bring down the whole network. Giving
> people the necessary tools to implement new clients brings
> stability. I do understand the criticism that writing a specification
> might hinder future development as it restricts the possible changes
> to the protocol, but isn't this already the case as long as we have
> legacy versions of the client participating in the network? I would
> also argue that having a specification allows an application
> independent review of the protocol to identify possible improvements
> and bugs.
>
> I think the protocol description has an important place in the
> development of Bitcoin, so much so that we pushed a long time ago to
> separate protocol version from the client version. I would love to see
> the protocol specification becoming official part of the bitcoin
> github repository, which would ideally be maintained alongside the
> satoshi client to keep it up to date.
>
> Regards,
> Christian Decker
>
> [1] https://bitcointalk.org/index.php?topic=231
> --
> Christian Decker
>
>




From slush at centrum.cz  Thu Oct 24 19:46:57 2013
From: slush at centrum.cz (slush)
Date: Thu, 24 Oct 2013 21:46:57 +0200
Subject: [Bitcoin-development] BIP0039 Mnemonic code for generating
 deterministic keys
In-Reply-To: <CAPg+sBjFAJrDx=dzU3nWCiaUBEiD5fZ2B1aMHGgT1gE402N0Kg@mail.gmail.com>
References: <CAJna-HgXPNa2UCO_edBzK=oY5-F=6LQVHap1Vk9XtGr09chy9Q@mail.gmail.com>
	<796AC330-56EF-43D2-9935-5409824A4F33@godofgod.co.uk>
	<CAJna-HhKDx4xnwWCC7apTLCDwEurFbagNTYXF=doBbhDBaXojA@mail.gmail.com>
	<0F445FFE-FA1A-4A64-9A28-C734E744B5F7@godofgod.co.uk>
	<5231AF5E.8080903@gk2.sk>
	<15F27A88-53BF-4149-A8FF-282350312B92@godofgod.co.uk>
	<CAJna-HiE8YgKOuAHubRKbJYQviMz8Ws9E+eMDwcgV1pWpDBijg@mail.gmail.com>
	<CAPg+sBjFAJrDx=dzU3nWCiaUBEiD5fZ2B1aMHGgT1gE402N0Kg@mail.gmail.com>
Message-ID: <CAJna-HiqD7W3wkF8H7QYaC10xZFDxYFJpJwvyOaa2DUpAYc0QQ@mail.gmail.com>

On Thu, Oct 24, 2013 at 9:23 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:
>
> This is a proposal I wrote a year ago, but never spent enough work to
> push it as a standard:
> https://bitcointalk.org/index.php?topic=102349.0
>
>
I think that PoW concept in your proposal is quite smart! However the
problem that it isn't bidirectional; it don't allow to convert back and
forth between mnemonic and seed, which was one of basic requirement for
such algorithm.

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/c0ec8fb3/attachment.html>

From slush at centrum.cz  Thu Oct 24 19:37:43 2013
From: slush at centrum.cz (slush)
Date: Thu, 24 Oct 2013 21:37:43 +0200
Subject: [Bitcoin-development] BIP0039 Mnemonic code for generating
 deterministic keys
In-Reply-To: <CAC1+kJPTXOkLoo=QHt1xyNwJ4BkNu1kVOXcZX5gF1MCNMbNSpg@mail.gmail.com>
References: <CAJna-HgXPNa2UCO_edBzK=oY5-F=6LQVHap1Vk9XtGr09chy9Q@mail.gmail.com>
	<796AC330-56EF-43D2-9935-5409824A4F33@godofgod.co.uk>
	<CAJna-HhKDx4xnwWCC7apTLCDwEurFbagNTYXF=doBbhDBaXojA@mail.gmail.com>
	<0F445FFE-FA1A-4A64-9A28-C734E744B5F7@godofgod.co.uk>
	<5231AF5E.8080903@gk2.sk>
	<15F27A88-53BF-4149-A8FF-282350312B92@godofgod.co.uk>
	<CAJna-HiE8YgKOuAHubRKbJYQviMz8Ws9E+eMDwcgV1pWpDBijg@mail.gmail.com>
	<CAC1+kJPTXOkLoo=QHt1xyNwJ4BkNu1kVOXcZX5gF1MCNMbNSpg@mail.gmail.com>
Message-ID: <CAJna-Hivko2uGTVWOAkgqCyc9D0LxqNviONpnQ32mPbk18cmyA@mail.gmail.com>

On Thu, Oct 24, 2013 at 9:32 PM, Jorge Tim?n <jtimon at monetize.io> wrote:

> This will probably sound stupid to most of you, but I'll say it anyway.
>
> The aim of mnemonics is to easily remember, isn't it?
>

Well, I would say more "retype" than "remember". I really don't think that
common user will memorize it. But of course, it is still an option.


> But the approach of removing "offensive words" is probably
> counterproductive to achieving that end. These words cause a greater
> emotional impact in our human moral psyches.
>

No, I dont' think it is stupid! Actually it was my concern as well.
Unfortunately I don't think it is "politically correct" to include all
bitches, assholes and motherfuckers in end user product :-).


> If we were willing to use that fact in our advantage to optimize the
> "maximum unforgettableness" criterion, we should actually prefer the
> most generally offensive words in that list. Specially if they can
> combine with each other to produce more offensive results, basically
> the opposite of what we're doing.


> Isn't "legalize murder dirty jew" much easier to remember for most
> people than "sandwich house yellow cauliflower"?
>
>
Well, bip39 can have more dictionaries and *maybe* swearword dictionary
would gain some popularity ;).

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131024/af3f3b9b/attachment.html>

From gavinandresen at gmail.com  Thu Oct 24 20:39:34 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 25 Oct 2013 06:39:34 +1000
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <20131024145447.GA19949@savin>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
Message-ID: <CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>

On Fri, Oct 25, 2013 at 12:54 AM, Peter Todd <pete at petertodd.org> wrote:

> Eligius has contracts to do transaction mining, and it's currently 10%
> of the hashing power.
>

Yes, and I asked Luke what percentage of that 10% is OOB fee payments, and
the answer is "a small percentage."

So: there are multiple layers of reasons why OOB fee payments will not
screw up the fee estimation code:

+ If the transactions are not broadcast, then they have no effect on the
estimates.

+ If the transactions are broadcast but not relayed because their priority
and fee are way below current estimates then they will have very close to
zero effect on the estimates.

+ If the OOB transaction is zero-fee, zero-priority (e.g comes from a
high-tx-volume service and relies on recently spent outputs) it will have
zero effect on the estimates.

+ If they make up less than about 40% of broadcast transactions they will
have very close to zero effect on the fee estimate (because of the
distribution of fees and behavior of taking a median)

The only case where the estimation code is even slightly likely to get
confused is estimating the priority needed to get into a block IF there are
a significant number of zero-fee, low-but-not-zero-priority OOB
transactions being broadcast.

And since priority naturally increases over time, even if that case DOES
occur the failure is very mild-- it means your free transactions might have
to build up more priority than the code estimates before successfully
entering a block.  If that gets to be an actual problem, then implementing
Pieter's idea of keeping track of memory pool transactions that are NOT
getting mined would fix it. But I don't want to waste time on a theoretical
problem when it is very possible miners will decide to stop accepting free
transactions alltogether.



And all of the above is completely orthogonal to child-pays-for-parent
and/or replace-with-higher-fee.

PS: I would appreciate it if you stop saying things like "Regarding the
transaction fee estimate code, it's not very well thought out."

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/47fc4c53/attachment.html>

From luke at dashjr.org  Thu Oct 24 21:55:22 2013
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 24 Oct 2013 21:55:22 +0000
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
Message-ID: <201310242155.23717.luke@dashjr.org>

On Thursday, October 24, 2013 5:29:18 PM thomasV1 at gmx.de wrote:
> I would like to propose a new BIP, that replaces BIP0039.

BIP 39 is still a draft. Just suggest revisions to the author(s)...



From pete at petertodd.org  Fri Oct 25 07:07:08 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 25 Oct 2013 03:07:08 -0400
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
Message-ID: <20131025070708.GA5760@savin>

On Fri, Oct 25, 2013 at 06:39:34AM +1000, Gavin Andresen wrote:
> Yes, and I asked Luke what percentage of that 10% is OOB fee payments, and
> the answer is "a small percentage."
> 
> So: there are multiple layers of reasons why OOB fee payments will not
> screw up the fee estimation code:

I've responded to nearly all those arguments elsewhere, but anyway...

> And all of the above is completely orthogonal to child-pays-for-parent
> and/or replace-with-higher-fee.

Indeed. Quoting myself here: "What we should have is both: fee
estimation with replacement so you can replace transactions in the event
that the estimate was too low."

So on IRC you were talking about very agressive mempool expiration - as
little as a block or two before tx's are expired. Now if a tx does fail
to get mined in that short window, am I correct in saying you want a way
to modify the fee it pays and rebroadcast? In which case wallet software
and other players in the ecosystem will have to adjust to the fact that
they can expect to see relatively frequent double-spends of unconfirmed
transactions?

As you know I've already written relaying/mempool code for
tx-replacement and replace-by-fee; it's the wallet code that's the hard
part that I haven't done. If you're already planning on changing the
wallet side of things to handle replacement-through-expiration that'd
save me a lot of hard work. You're probably better qualified to write
that code too; I'm not very familiar with the wallet.

Worth thinking about the whole ecosystem of wallets involved; they all
have to handle double-spends gracefully to make tx replacement of any
kind user friendly. We should try to give people a heads up that this is
coming soon if that's your thinking.


Also, regarding tx replacement user experience:

> Come back a few hours later and find out you need to type in your
> password again so your client can unlock your wallet, resign, and
> re-transmit with a higher fee?

Password-using wallets sign multiple versions of the transaction in
advance of course and release the higher fee versions only later if
required. (could be applied to coinjoin too)

-- 
'peter'[:-1]@petertodd.org
0000000000000005391e2338afe5204414d66b1f140b172da651daedf5663af2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/7bbb7631/attachment.sig>

From jeremy at taplink.co  Fri Oct 25 07:51:22 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Fri, 25 Oct 2013 00:51:22 -0700
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
Message-ID: <op.w5h2rwhcyldrnw@laptop-air>

Gavin, can you confirm the best place to  read  up on the discuss fee  
estimation changes for v0.9?

I think fee estimation at its core is about providing a data point, or  
even call it an API, which can be used however you see fit.

What parameters do I want to see in a 'fee estimation' API?

  - 30 minutes vs 24 hours processing time
  - Confidence Levels (50%/90%)

What properties does the result have?
   - Is it globally consistent?

Talking about fees.. I read this:  
https://gist.github.com/gavinandresen/2961409 and there is so much there I  
really liked.

Any pointers for reading more about the leading theories on transaction  
fees? For example, how well do they correlate with network security? Are  
we getting what we are paying for? :-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/91e5d419/attachment.html>

From thomasv1 at gmx.de  Fri Oct 25 09:27:24 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Fri, 25 Oct 2013 11:27:24 +0200
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAJna-HhzGmdoaaoFkp8tBeKCZ4DhDpNO43wzzk_ke7-kH2smbg@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HhzGmdoaaoFkp8tBeKCZ4DhDpNO43wzzk_ke7-kH2smbg@mail.gmail.com>
Message-ID: <526A397C.2080006@gmx.de>


slush wrote :
> Two years ago I proposed exactly this and you refused to add extra 
> information to mnemonic, because "it isn't necessary" and "it makes it 
> longer to mnemonization". What changed since then?

I was wrong, and I fully acknowledge it.

My concern was that adding extra information would make the mnemonic 
longer than 12 words.
In addition, you proposed to allocate these extra bits for a checksum, 
not for metadata.
However, a checksum does not really add any information, because 
Electrum checks the existence of a wallet directly from the blockchain.
So, my feeling at that time was that adding extra bits would increase 
the risks (a longer seed is harder to memorize, increases the 
probability of mistakes, etc), and did not bring any real benefit.

However, you showed since then how to solve this by using a slightly 
longer dictionary, and I do like your solution, I find it absolutely 
brilliant.
In addition, I realize now that metadata (ie a "version number") is 
crucially needed, for the reasons mentioned in my previous post.

> Hm, what exactly do you need to store about wallet structure? I lived 
> in opinion that everything is able to recover using CKD function to 
> generate new addresses and blockchain lookups for their balances.

BIP32 gives a lot of freedom to wallet developers: it does not specify 
which branches of the HD tree shall be used for which purpose.

However, if you want to recover a wallet from its mnemonic (a 
requirement for Electrum), then you need to know which branches to explore.
In Electrum 1.9 I had to make some choices about branch allocation. 
However, the decisions that I made are certainly not final, so it is 
important to be able to change them in the future. Thus, this metadata 
needs to be added to the mnemonic.


>  Yes, that's true. It isn't possible to make everybody 100% happy. At 
> least I wanted to be constructive and asked you to replace the most 
> problematic words. No pull request from you so far.

The solution I propose is very different from BIP39, and it does not 
require to predefine a dictionary.
My proposal is actually somewhat similar to Pieter Wuille's proposal, 
which I discovered after his recent post.
( https://bitcointalk.org/index.php?topic=102349.0 )

>  Yes, it was original idea. So far I don't think this is a problem. Of 
> course some words may have some meaning across languages, but it 
> should be easy to avoid them. There are tens of thousands words in 
> every language and we need to pick "only" 2048 words to wordlist.
> ...
> Are your worries about overlapping words across languages a real issue?

No, there are not so many words that are frequent enough.
Overlapping will be an issue, especially if we go for a 4096 words 
dictionary.


> If I understand this well, it is basically one-way algorithm "mnemonic 
> -> seed", right? Seed cannot be printed out as mnemonic, because 
> there's hashing involved, but the bi-directionality has been the 
> original requirement for such algorithm (at least in Electrum and bip39).

You are right, this encoding is not symmetric.
Bi-directionality has never been a requirement for Electrum. May I ask 
why you need bi-directionality in Trezor?
(the only reason I can think of is if you want to export a bip32 branch 
into another wallet, but this would create a very long mnemonic string)

> Then, how is this different to picking 12 random words from dictionary 
> and hashing them together? I don't see any benefit in that "mining" 
> part of the proposal (except that it is lowering the entropy for given 
> length of mnemonic).

it makes it possible to hash a utf8 string, and to retrieve the metadata 
from the hash.
Thus we don't need to spend ages arguing about the best choice of a 
dictionary, and to set it in stone.





From andreas at petersson.at  Fri Oct 25 12:02:35 2013
From: andreas at petersson.at (Andreas Petersson)
Date: Fri, 25 Oct 2013 14:02:35 +0200
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <20131025070708.GA5760@savin>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<20131025070708.GA5760@savin>
Message-ID: <91968c56640bf7647325728f490b9257@localhost>



> Worth thinking about the whole ecosystem of wallets involved; they all
> have to handle double-spends gracefully to make tx replacement of any
> kind user friendly. We should try to give people a heads up that this is
> coming soon if that's your thinking.

If there is a situation where wallets are supposed to constantly monitor
the tx propagation and recreate their transactions with different fees,
this would make a lot of usecases inconvenient.
half-offline bluetooth transactions, users with unstable connections,
battery power lost, etc, etc. - and last but not least power concerns on
hardware wallets on the bitcoincard (tx signing drains a significant amount
of power and should therefore only be done once)

-Andreas



From mark at monetize.io  Fri Oct 25 13:29:57 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 25 Oct 2013 06:29:57 -0700
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <91968c56640bf7647325728f490b9257@localhost>
References: <20131024143043.GA12658@savin>	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>	<20131024144358.GA17142@savin>	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>	<20131024145447.GA19949@savin>	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>	<20131025070708.GA5760@savin>
	<91968c56640bf7647325728f490b9257@localhost>
Message-ID: <526A7255.1060101@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

There's no reason the signing can't be done all at once. The wallet
app would create and sign three transactions, paying avg-std.D, avg,
and avg+std.D fee. It just waits to broadcast the latter two until it
has to.

On 10/25/13 5:02 AM, Andreas Petersson wrote:
> 
> 
>> Worth thinking about the whole ecosystem of wallets involved;
>> they all have to handle double-spends gracefully to make tx
>> replacement of any kind user friendly. We should try to give
>> people a heads up that this is coming soon if that's your
>> thinking.
> 
> If there is a situation where wallets are supposed to constantly
> monitor the tx propagation and recreate their transactions with
> different fees, this would make a lot of usecases inconvenient. 
> half-offline bluetooth transactions, users with unstable
> connections, battery power lost, etc, etc. - and last but not least
> power concerns on hardware wallets on the bitcoincard (tx signing
> drains a significant amount of power and should therefore only be
> done once)
> 
> -Andreas
> 
> ------------------------------------------------------------------------------
>
> 
October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application
> performance. Explore tips for MPI, OpenMP, advanced profiling, and
> more. Get the most from the latest Intel processors and
> coprocessors. See abstracts and register > 
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
>
> 
_______________________________________________
> Bitcoin-development mailing list 
> Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSanJVAAoJEAdzVfsmodw4RHYQAKBrku4S80GXtbt4wBgkRMgx
EQuobBrwtknxHOhKyYuBeAJ+h8ao1zSSNeqLvS5fJShH7vwBD2UOePLw4Nsy5p9U
pe56c07pRmgi+EWdq/3o1tggp9HN0FR3HDRwt03U4qrPTx449kHb11aOw5KZH7VS
ZiG09gKxkMPOtUy9dmVukjkG3zQ1AWjax+aOoseCnkU8u1I4kfhOyWLIjD7ciMm4
07gD8MzBLHTfJ6/pwUczQCby76Xdg51G/5d/toT3EnXyEOC7tCbI4xunAn1eIyg3
eCUNYaOQ7WYV9tjBUDGFwjVkGDJ8KdzEUqMPEK5nAWF29vmrwBSGJ4H2C47OkTQA
58Ie0hEYc5FMNuUCUWz3IGt2zoQ/8YENtNUDKG8oVoNhAIp5zkLK8wsMAJjZP6WM
z56JUl8NZ2Ka5U1OelImGGVZIx4NXrXlccyxemAn3/c+krkpNv0CHAeMCeNbPG8i
e4l2vQandiBW4NBGVYcm5A/EO6VJHAJhLEPT0pjmbuq4qTACo4Fgeb0LpOnWb/1a
6b1SdGGhMMrXeR2IaIbnx0+0WArixsOPl9w+R9WbrMh8g7hYBLH8EpGrRj0omim7
OoJb+W599HU37XZyWtuov+8Ouh5DpnP9l4hvNxHmro77uPPq10i/ibMd0Bnm4zZd
ALtIYpYYgUCN1D9lQwPQ
=BjIH
-----END PGP SIGNATURE-----



From andreas at petersson.at  Fri Oct 25 14:08:12 2013
From: andreas at petersson.at (Andreas Petersson)
Date: Fri, 25 Oct 2013 16:08:12 +0200
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <526A7255.1060101@monetize.io>
References: <20131024143043.GA12658@savin>	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>	<20131024144358.GA17142@savin>	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>	<20131024145447.GA19949@savin>	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>	<20131025070708.GA5760@savin>
	<91968c56640bf7647325728f490b9257@localhost>
	<526A7255.1060101@monetize.io>
Message-ID: <f7702be213b7d0d616a84daae5a2ce02@localhost>



> There's no reason the signing can't be done all at once. The wallet
> app would create and sign three transactions, paying avg-std.D, avg,
> and avg+std.D fee. It just waits to broadcast the latter two until it
> has to.

i see several reasons why this is problematic. 
So how would that work in a setting where the user signs a transaction
created offline, transmitted via Bluetooth via a one-way broadcast?
does it transmit all 3 tx to the receiver and just hopes they he will do
the "right thing"?


> 
> On 10/25/13 5:02 AM, Andreas Petersson wrote:
>> 
>> 
>>> Worth thinking about the whole ecosystem of wallets involved;
>>> they all have to handle double-spends gracefully to make tx
>>> replacement of any kind user friendly. We should try to give
>>> people a heads up that this is coming soon if that's your
>>> thinking.
>> 
>> If there is a situation where wallets are supposed to constantly
>> monitor the tx propagation and recreate their transactions with
>> different fees, this would make a lot of usecases inconvenient. 
>> half-offline bluetooth transactions, users with unstable
>> connections, battery power lost, etc, etc. - and last but not least
>> power concerns on hardware wallets on the bitcoincard (tx signing
>> drains a significant amount of power and should therefore only be
>> done once)
>> 
>>



From pete at petertodd.org  Fri Oct 25 16:13:23 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 25 Oct 2013 12:13:23 -0400
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <91968c56640bf7647325728f490b9257@localhost>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<20131025070708.GA5760@savin>
	<91968c56640bf7647325728f490b9257@localhost>
Message-ID: <20131025161323.GA15774@petertodd.org>

On Fri, Oct 25, 2013 at 02:02:35PM +0200, Andreas Petersson wrote:
> 
> 
> > Worth thinking about the whole ecosystem of wallets involved; they all
> > have to handle double-spends gracefully to make tx replacement of any
> > kind user friendly. We should try to give people a heads up that this is
> > coming soon if that's your thinking.
> 
> If there is a situation where wallets are supposed to constantly monitor
> the tx propagation and recreate their transactions with different fees,
> this would make a lot of usecases inconvenient.
> half-offline bluetooth transactions, users with unstable connections,
> battery power lost, etc, etc. - and last but not least power concerns on
> hardware wallets on the bitcoincard (tx signing drains a significant amount
> of power and should therefore only be done once)

Anyway, as I've said repeatedly my problem with fee estimation is that
it needs to be combined with some form of transaction replacement to
give users a way to recover from bad estimates, not that I think the
idea shouldn't be implemented at all. After all, we alrady have fee
estimation: wallet authors and users manully estimate fees!

This particular case is a nasty one re: recovering from a bad estimate,
and it's exactly why the payment protocol is designed for the sender to
give the receiver a copy of every transaction they make so the receiver
can be held responsible for getting them mined, eg. with
child-pays-for-parent, out-of-band fee payment, or maybe even by adding
inputs to the transaction. (SIGHASH_ANYONECANPAY)

-- 
'peter'[:-1]@petertodd.org
0000000000000001231d6e04b4b18f85fa0ad00e837727e7141eaa8cfecc734b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/71968b72/attachment.sig>

From tamas at bitsofproof.com  Fri Oct 25 16:40:08 2013
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 25 Oct 2013 18:40:08 +0200
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <mailman.289181.1382717617.21953.bitcoin-development@lists.sourceforge.net>
References: <mailman.289181.1382717617.21953.bitcoin-development@lists.sourceforge.net>
Message-ID: <C3388417-98E9-4C80-8E26-05DD9BB6E9C2@bitsofproof.com>

Two thoughts:
1. Please keep it simple, miner will override it either.
2. If block construction algorithm compares alternate chains and not individual transactions,  then receiver can bump up the fee by spending the unconfirmed output again with higher fee, no need for replacement in the mempool.

Tamas Blummer




From mcaldwell at swipeclock.com  Fri Oct 25 18:50:10 2013
From: mcaldwell at swipeclock.com (Mike Caldwell)
Date: Fri, 25 Oct 2013 14:50:10 -0400
Subject: [Bitcoin-development] BIP 38
Message-ID: <B09A5DE3EF411243BB3328232CD25A5D998989775B@MAILR023.mail.lan>

Hey everyone,

I have noticed that there was a recent change to BIP 0038 (Password-Protected Private Key) on the Wiki, which is a proposal I wrote in late 2012.  Gregory, it looks to me as though you have made this change, and I'm hoping for your help here.  The change suggests that the number was never assigned, and that there has been no discussion regarding the proposal on this list.

I had this number assigned by Amir Taaki in November of 2012, consistent with what I understood the procedure to be at the time by reading BIP 0001 on the Wiki.

First off, I want to confirm that when I send to the list, that there isn't a technical reason it's not getting to everybody.  I believe I most recently mentioned BIP 38 to this list on August 17, 2013. (EDIT: seems my prior messages, including an earlier revision of this message, have not made it to the list)

Secondly, in the case that it is deemed that this has never been properly submitted, discussed, or pushed forward, I'd like to propose that this happen, and request help with the formalities where I'm lacking.

I believe BIP 38 is a valuable proposal that is seeing real-world use.  BIP 38 allows people to create private keys (including paper wallets) protected by a password, and also allows one party to select the password for paper wallets to be created by another party.

Real-world use includes a working implementation at BitAddress.org, one at Bit2Factor.org, implementation by Mycelium, and others.  Also, others are informally using it as a sort of abbreviated escrow scheme where a buyer and seller agree on the buyer maintaining control over the release of funds.  In short, it would be terribly confusing to reassign the number BIP 38 after already having had an established meaning for the better part of the year, particularly on what appears to be procedural grounds.

Mike

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/eee52f9d/attachment.html>

From jeremy at taplink.co  Fri Oct 25 19:35:34 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Fri, 25 Oct 2013 12:35:34 -0700
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <20131025161323.GA15774@petertodd.org>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<20131025070708.GA5760@savin>
	<91968c56640bf7647325728f490b9257@localhost>
	<20131025161323.GA15774@petertodd.org>
Message-ID: <op.w5izdkiyyldrnw@laptop-air>

Do you think we're at the point where wallets have to be able to "actively  
bid" the fee using replacement due to block contention?

I think a fee estimation API is just a data point. Depending on the  
properties of the estimator, and how that's presented in the UI, it could  
serve to either increase or decrease the need for recovery.

Like you said, we already have "fee estimation" in the form of "user,  
please estimate the fee!" Now we want to make fee estimation "better", and  
one key aspect of better fee estimation is decreasing the need for  
recovery. Techniques like signing multiple transactions with different fee  
levels should become less useful the better you are at estimating the fee.

What I find interesting is that fee estimation can look at the size and  
type of the transaction, the age of the inputs, the number of inputs  
versus outputs, amount of the outputs, factor in [assumptions about] what  
fee policies miners are actually using, and after all that, look at the  
actual competing transactions on the blockchain and try to figure out how  
many of those are even real.

For example, if you just look at fee-per-KB of mempool versus fee-per-KB  
of recently mined transactions, without taking into account input age,  
number of inputs vs outputs, output amounts... all the other things miner  
might have used to discriminate between transactions, then I don't think  
you'll end up with a better fee estimator.

Contention might bump you out of a few blocks, but if the basis for  
calculating the fee is fundamentally compatible with the relay policies  
and the transaction-inclusion policies being run by large mining pools,  
the transaction isn't dead, it's just pending.

On Fri, 25 Oct 2013 09:13:23 -0700, Peter Todd <pete at petertodd.org> wrote:

> On Fri, Oct 25, 2013 at 02:02:35PM +0200, Andreas Petersson wrote:
>>
>>
>> > Worth thinking about the whole ecosystem of wallets involved; they all
>> > have to handle double-spends gracefully to make tx replacement of any
>> > kind user friendly. We should try to give people a heads up that this  
>> is
>> > coming soon if that's your thinking.
>>
>> If there is a situation where wallets are supposed to constantly monitor
>> the tx propagation and recreate their transactions with different fees,
>> this would make a lot of usecases inconvenient.
>> half-offline bluetooth transactions, users with unstable connections,
>> battery power lost, etc, etc. - and last but not least power concerns on
>> hardware wallets on the bitcoincard (tx signing drains a significant  
>> amount
>> of power and should therefore only be done once)
>
> Anyway, as I've said repeatedly my problem with fee estimation is that
> it needs to be combined with some form of transaction replacement to
> give users a way to recover from bad estimates, not that I think the
> idea shouldn't be implemented at all. After all, we alrady have fee
> estimation: wallet authors and users manully estimate fees!
>
> This particular case is a nasty one re: recovering from a bad estimate,
> and it's exactly why the payment protocol is designed for the sender to
> give the receiver a copy of every transaction they make so the receiver
> can be held responsible for getting them mined, eg. with
> child-pays-for-parent, out-of-band fee payment, or maybe even by adding
> inputs to the transaction. (SIGHASH_ANYONECANPAY)




From gmaxwell at gmail.com  Fri Oct 25 20:05:04 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 25 Oct 2013 13:05:04 -0700
Subject: [Bitcoin-development] BIP 38
In-Reply-To: <B09A5DE3EF411243BB3328232CD25A5D998989775B@MAILR023.mail.lan>
References: <B09A5DE3EF411243BB3328232CD25A5D998989775B@MAILR023.mail.lan>
Message-ID: <CAAS2fgR0zH6JZWm-qLR3HcTC_m5o4N7V4wnGMM01q4yiS4CDwQ@mail.gmail.com>

On Fri, Oct 25, 2013 at 11:50 AM, Mike Caldwell
<mcaldwell at swipeclock.com> wrote:
> I have noticed that there was a recent change to BIP 0038
> (Password-Protected Private Key) on the Wiki, which is a proposal I wrote in
> late 2012.  Gregory, it looks to me as though you have made this change, and
> I?m hoping for your help here.  The change suggests that the number was
> never assigned, and that there has been no discussion regarding the proposal
> on this list.

Greetings, (repeating from our discussion on IRC)

No prior messages about your proposal have made it to the list, and no
mention of the assignment had been made in the wiki.

The first I ever heard of this scheme was long after you'd written the
document when I attempted to assign the number to something else then
noticed something existed at that name.

Since you had previously created BIP documents without public
discussion (e.g. "BIP 22"
https://en.bitcoin.it/wiki/OP_CHECKSIGEX_DRAFT_BIP [...] Or, I wonder
did your emails just get eaten that time too?), I'd just assumed
something similar had happened here.

I didn't take any action at the time I first noticed it, but after
someone complained about bitcoin-qt "not confirming with BIP38" to me
today it was clear to me that people were confusing this with
something that was "officially" (as much as anything is) supported, so
I moved the document out.  (I've since moved it back, having heard
from you that you thought that it had actually been
assigned/announced).

With respect to moving it forward: Having a wallet which can only a
single address is poor form. Jean-Paul Kogelman has a draft proposal
which is based on your BIP38 work though the encoding scheme is
different, having been revised in response to public discussion.

Perhaps efforts here can be combined?



From mcaldwell at swipeclock.com  Fri Oct 25 20:46:50 2013
From: mcaldwell at swipeclock.com (Mike Caldwell)
Date: Fri, 25 Oct 2013 16:46:50 -0400
Subject: [Bitcoin-development] BIP 38
In-Reply-To: <CAAS2fgR0zH6JZWm-qLR3HcTC_m5o4N7V4wnGMM01q4yiS4CDwQ@mail.gmail.com>
References: <B09A5DE3EF411243BB3328232CD25A5D998989775B@MAILR023.mail.lan>
	<CAAS2fgR0zH6JZWm-qLR3HcTC_m5o4N7V4wnGMM01q4yiS4CDwQ@mail.gmail.com>
Message-ID: <B09A5DE3EF411243BB3328232CD25A5D99898977D9@MAILR023.mail.lan>

Gregory,

No problem, thanks for providing the IRC recap, and glad I've finally made "radio contact" with the list.  Perhaps there can be some long overdue discussion on the topic.

I see Kogelman's improvements to my proposal as being of merit and may very well be sufficient to supersede what I've originally proposed.  I suppose the main thing I'm wanting to ensure is that the identity of my original proposal is maintained.  Regardless of whether a paper wallet or physical bitcoin with a single address is poor form or whether my proposal is rejected or superseded, I hope there can be a consensus that "BIP38" can continue to be understood to mean "Password-protected private key proposal by Mike Caldwell", and that it can appear in the lists of BIPs alongside others.

Regarding "BIP 22"... I in fact did not originally attempt to post to the list over what I had created and called BIP 22 once upon a time, I literally just created a wiki entry contrary to advice in BIP 1 that I had not read at the time.  I recognize it's totally legitimate to feel and act upon the appearance that BIP 38 was created in a similar shortcut fashion.  Certainly, the next thing I propose will be in the form of a draft outside the BIP "numberspace" and I won't solicit a BIP number without an established consensus in the future.  That said, I'm asking for BIP 38 to stand and be recognized as in existence, so as to not confuse those who call it by that name and who have already chosen to do something with it (whether that's to implement it, or to draft improvements to it like Kogelman).

If I did BIP 38 over again, there's a couple shortcomings of my own that I wouldn't mind seeing addressed in another iteration, and the right venue for that may very well be to contribute to Kogelman's work.  My particular improvements might include wanting the ability to outsource the computationally expensive step to another service at a minimized risk to the user, potentially the ability to have special-purpose "encrypted minikeys" (sort of how ARM has Thumb for places where the tradeoff makes sense), and a typo check with better privacy (I currently use sha256(address)[0...3] which may unintentionally reveal the bitcoin address, if it's funded, to someone who has the encrypted key but doesn't know the password).

mike



-----Original Message-----
From: Gregory Maxwell [mailto:gmaxwell at gmail.com]
Sent: Friday, October 25, 2013 2:05 PM
To: Mike Caldwell
Cc: bitcoin-development at lists.sourceforge.net
Subject: Re: [Bitcoin-development] BIP 38

On Fri, Oct 25, 2013 at 11:50 AM, Mike Caldwell <mcaldwell at swipeclock.com> wrote:
> I have noticed that there was a recent change to BIP 0038 
> (Password-Protected Private Key) on the Wiki, which is a proposal I 
> wrote in late 2012.  Gregory, it looks to me as though you have made 
> this change, and I?m hoping for your help here.  The change suggests 
> that the number was never assigned, and that there has been no 
> discussion regarding the proposal on this list.

Greetings, (repeating from our discussion on IRC)

No prior messages about your proposal have made it to the list, and no mention of the assignment had been made in the wiki.

The first I ever heard of this scheme was long after you'd written the document when I attempted to assign the number to something else then noticed something existed at that name.

Since you had previously created BIP documents without public discussion (e.g. "BIP 22"
https://en.bitcoin.it/wiki/OP_CHECKSIGEX_DRAFT_BIP [...] Or, I wonder did your emails just get eaten that time too?), I'd just assumed something similar had happened here.

I didn't take any action at the time I first noticed it, but after someone complained about bitcoin-qt "not confirming with BIP38" to me today it was clear to me that people were confusing this with something that was "officially" (as much as anything is) supported, so I moved the document out.  (I've since moved it back, having heard from you that you thought that it had actually been assigned/announced).

With respect to moving it forward: Having a wallet which can only a single address is poor form. Jean-Paul Kogelman has a draft proposal which is based on your BIP38 work though the encoding scheme is different, having been revised in response to public discussion.

Perhaps efforts here can be combined?

From pete at petertodd.org  Fri Oct 25 22:13:27 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 25 Oct 2013 18:13:27 -0400
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <op.w5izdkiyyldrnw@laptop-air>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<20131025070708.GA5760@savin>
	<91968c56640bf7647325728f490b9257@localhost>
	<20131025161323.GA15774@petertodd.org>
	<op.w5izdkiyyldrnw@laptop-air>
Message-ID: <20131025221327.GA18030@petertodd.org>

On Fri, Oct 25, 2013 at 12:35:34PM -0700, Jeremy Spilman wrote:
> Do you think we're at the point where wallets have to be able to
> "actively bid" the fee using replacement due to block contention?

If Bitcoin continues to grow we probably will be at some as-yet-unknown
point in the future.

> I think a fee estimation API is just a data point. Depending on the
> properties of the estimator, and how that's presented in the UI, it
> could serve to either increase or decrease the need for recovery.
> 
> Like you said, we already have "fee estimation" in the form of
> "user, please estimate the fee!" Now we want to make fee estimation
> "better", and one key aspect of better fee estimation is decreasing
> the need for recovery. Techniques like signing multiple transactions
> with different fee levels should become less useful the better you
> are at estimating the fee.

Yes, but equally all estimates are imperfect, and you can trade-off risk
that your transaction will not go through initially for lower fees.

Estimates can be made sufficiently conservative that they are rarely
wrong - this is basically the strategy of the current system. Given that
demand for blockchain space isn't "saturated" it works reasonably well
for now. But without a good mechanism to recover from an initial bad
estimate you have to be more conservative than is efficient.

> What I find interesting is that fee estimation can look at the size
> and type of the transaction, the age of the inputs, the number of
> inputs versus outputs, amount of the outputs, factor in [assumptions
> about] what fee policies miners are actually using, and after all
> that, look at the actual competing transactions on the blockchain
> and try to figure out how many of those are even real.
> 
> For example, if you just look at fee-per-KB of mempool versus
> fee-per-KB of recently mined transactions, without taking into
> account input age, number of inputs vs outputs, output amounts...
> all the other things miner might have used to discriminate between
> transactions, then I don't think you'll end up with a better fee
> estimator.

To a first approximation there's not much reason for miners to take
anything other than fee-per-KB into account when determining what
transactions to mine; you want to stuff your 1MB block full of high
paying transactions. That a child tx may make a parent more profitable
to mine complicates things - Gavin's current fee estimator also makes
too-low-estimates in that case - and not all algorithms to do so will
come to the same conclusion. (doing it perfectly is something like
O(n^2), and imperfectly is O(1) but doesn't handle multiple children
well)

There are some second-order effects, a block is less likely to be
orphaned if all transactions in it have propagated sufficiently, thus a
miner should penalize very recently broadcast transactions. In addition
because miners never orphan themselves large miners have a significant
advantage regarding orphan-inducing effects. However those effects all
tend to be miner specific, and/or only temporary.

FWIW the logic behind orphans is currently rather frightening: a
rational miner will, the moment they learn that a block exists via the
quickly propagating block header, start working to extend that block
with one that either doesn't contain any transactions, or only contains
transactions they can be reasonably sure another miner didn't mine.
(e.g. via exclusive tx mining contracts) This boosts their profit
because they aren't wasting their effort while the rest of the block
propagates, removes much of the incentive have any limit on block size,
and incentivizes miners to extend chains they haven't actually validated
yet. (relying on the other miners incentive not to produce an invalid
block)

> Contention might bump you out of a few blocks, but if the basis for
> calculating the fee is fundamentally compatible with the relay
> policies and the transaction-inclusion policies being run by large
> mining pools, the transaction isn't dead, it's just pending.

With a size-limited blocks inclusion is more a matter of supply and
demand than policy.

-- 
'peter'[:-1]@petertodd.org
00000000000000066c29f3319f83f1c6e912b5add5534da1b938c4c65a07b02a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/4df8f795/attachment.sig>

From pete at petertodd.org  Fri Oct 25 22:49:38 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 25 Oct 2013 18:49:38 -0400
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <op.w5h2rwhcyldrnw@laptop-air>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<op.w5h2rwhcyldrnw@laptop-air>
Message-ID: <20131025224938.GB18030@petertodd.org>

On Fri, Oct 25, 2013 at 12:51:22AM -0700, Jeremy Spilman wrote:
> Gavin, can you confirm the best place to  read  up on the discuss
> fee estimation changes for v0.9?
> 
> I think fee estimation at its core is about providing a data point,
> or even call it an API, which can be used however you see fit.
> 
> What parameters do I want to see in a 'fee estimation' API?
> 
>  - 30 minutes vs 24 hours processing time
>  - Confidence Levels (50%/90%)
> 
> What properties does the result have?
>   - Is it globally consistent?
> 
> Talking about fees.. I read this:
> https://gist.github.com/gavinandresen/2961409 and there is so much
> there I really liked.

State-of-the-art thinking has changed a lot; that document is over a
year old and needs significant changes to update it.

> Any pointers for reading more about the leading theories on
> transaction fees? For example, how well do they correlate with
> network security? Are we getting what we are paying for? :-)

Network security is currently funded by inflation rather than
transaction fees. This is likely to remain true for at least a few more
years. FWIW the cost of that security on a per transaction basis is
about $18, see http://blockchain.info/charts/cost-per-transaction

-- 
'peter'[:-1]@petertodd.org
0000000000000009b86605cc3235f2674600d5131dd437d941b479e78588177b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131025/d58a7282/attachment.sig>

From gavinandresen at gmail.com  Sat Oct 26 00:25:06 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 26 Oct 2013 10:25:06 +1000
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <op.w5h2rwhcyldrnw@laptop-air>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<op.w5h2rwhcyldrnw@laptop-air>
Message-ID: <CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>

On Fri, Oct 25, 2013 at 5:51 PM, Jeremy Spilman <jeremy at taplink.co> wrote:

> **
> Gavin, can you confirm the best place to  read  up on the discuss fee
> estimation changes for v0.9?
>

The blog post is the best place for high-level overview.

The (closed for now, but it will come back) pull request is the best place
for low-level details and nit-picking discussion:
  https://github.com/bitcoin/bitcoin/pull/3024



> I think fee estimation at its core is about providing a data point, or
> even call it an API, which can be used however you see fit.
>
> What parameters do I want to see in a 'fee estimation' API?
>
>  - 30 minutes vs 24 hours processing time
>  - Confidence Levels (50%/90%)
>

The pull request adds an 'estimatefees' JSON-RPC api call:

====
estimatefees [prioritymedian=0.1] [feemedian=0.5]
Estimates the priority or fee a transaction needs
to be relayed across the network and included in
the block chain.

prioritymedian and feemedian are values from 0.0
to 1.0, where 0.0 will return the smallest
recently-included-in-a-block priority (or fee) seen,
1.0 the largest, and 0.5 the median priority (or fee)
for transactions that were broadcast on the network and
included in a block.

The default value for prioritymedian (0.1) is
chosen to return a priority for free transactions that
will eventually be confirmed, but might take several hours.
The default value for feemedian (0.5) returns how much
fee you should include to have your transactions confirmed
in an average amount of time.

Values returned are:
 freepriority : priority needed to out-compete a prioritymedian
  fraction of free transactions to be relayed and included in blocks.
 feeperbyte : fee, in satoshis/byte, needed to out-compete a
  feemedian fraction of fee-paying transactions.

Values of -1.0 are returned if not enough transactions
have been seen to make a good estimate.
====

That API doesn't give "30 minute versus 24 hour" confirmation time or
confidence intervals. I've always regretted not taking a statistics class;
if you want to help write code that estimates confidence intervals send me
an email. The API certainly isn't set in stone.

  - Is it globally consistent?
>

Ummm.... roughly, yes, it will be. Nodes that have just joined the network
and haven't seen enough transactions enter and leave the memory pool will
have a different estimate than long-running nodes, but in my testing the
estimate narrows down very quickly (with three or four blocks enough
fee-paying transactions have been seen to make a reasonable estimate; it
takes longer to see enough free transactions to get a good estimate of the
priority needed to get into the free space of a block).

RE: lots of other comments:

I feel like there is a lot of "in the weeds" discussion here about
theoretical, what-if-this-and-that-happens-in-the-future scenarios.

I would just like to point out (again) that this is not intended to be The
One True Solution For Transaction Fees And Transaction Prioritization. If
you've got a better mechanism for estimating fees, fantastic! If it turns
out estimates are often-enough wrong to be a problem and you've got a
solution for that, fantastic!

RE: are we already seeing pressure on transaction fees:

I believe we are, yes. As part of the prep work for the smart fee work I
spent some time plotting priority (for zero-fee transactions) and
transaction fee (for zero-priority transactions) versus confirmation time,
and it looks to me like people/services are starting to include more than
the hard-coded fees in the reference implementation-- I assume because they
want their transactions to be confirmed more quickly.

There is definitely already competition among zero-fee transactions for the
"free" block space. One of the reasons I'm comfortable with the fee changes
I'm proposing is if the estimation code gets it very wrong we'll see that
first as free transactions taking "too long" to confirm, but they'll
confirm eventually because priority increases over time.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/b5b80e6c/attachment.html>

From gavinandresen at gmail.com  Sat Oct 26 00:34:51 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 26 Oct 2013 10:34:51 +1000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
Message-ID: <CABsx9T2UfGNiCuCzw00Tgk8aZQ=ZcnT=bDFqrsrYC7r355QRmw@mail.gmail.com>

Mike Hearn has been lobbying for an "error" message in the Bitcoin p2p
protocol for years (at least since the "ban peers if they send us garbage"
denial-of-service mitigation code was pull-requested). This came up again
with my proposed "smartfee" changes, which would drop low-priority or
low-fee transactions.

In short, giving peers feedback about why their blocks or transactions are
dropped or why they are being banned should help interoperability between
different implementations, and will give SPV (simplified payment
verification) clients feedback when their transactions are rejected due to
insufficient priority or fees.

See the gist for details, I'm looking for feedback and planning on
implementing this before circling back to finish the 'smart fee' work:

   https://gist.github.com/gavinandresen/7079034

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/86e9867d/attachment.html>

From jeanpaulkogelman at me.com  Sat Oct 26 01:01:49 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sat, 26 Oct 2013 01:01:49 +0000 (GMT)
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CABsx9T2UfGNiCuCzw00Tgk8aZQ=ZcnT=bDFqrsrYC7r355QRmw@mail.gmail.com>
Message-ID: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>


Would it make sense to use either fixed length strings or maybe even enums?

On Oct 25, 2013, at 05:34 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
Mike Hearn has been lobbying for an "error" message in the Bitcoin p2p protocol for years (at least since the "ban peers if they send us garbage" denial-of-service mitigation code was pull-requested). This came up again with my proposed "smartfee" changes, which would drop low-priority or low-fee transactions.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/eeabfe72/attachment.html>

From gavinandresen at gmail.com  Sat Oct 26 02:00:03 2013
From: gavinandresen at gmail.com (Gavin)
Date: Sat, 26 Oct 2013 12:00:03 +1000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
Message-ID: <9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>



On Oct 26, 2013, at 11:01 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:

> 
> Would it make sense to use either fixed length strings or maybe even enums?

No. Enums or fixed length strings just make it harder to extend, for no benefit (bandwidth of 'reject' messages doesn't matter, they will be rare and are not relayed).




From gmaxwell at gmail.com  Sat Oct 26 03:31:05 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 25 Oct 2013 20:31:05 -0700
Subject: [Bitcoin-development] Payment protocol for onion URLs.
Message-ID: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>

One limitation of the payment protocol as speced is that there is no
way for a hidden service site to make use of its full authentication
capability because they are unable to get SSL certificates issued to
them.

A tor hidden service (onion site) is controlled by an RSA key.

It would be trivial to pack a tor HS pubkey into a self-signed x509
certificate with the cn set to foooo.onion.

If we specified in the payment protocol an additional validation
procedure for [base32].onion hosts that just has it hash and base32
encode the pubkey (as tor does) then the payment protocol could work
seamlessly with tor hosts. (Displaying that the payment request came
from "foooo.onion").  I believe that the additional code for this
would be trivial (and I'll write it if there is support for making
this a standard feature).

This would give us an fully supported option which is completely CA
free... it would only work for tor sites, but the people concerned
about CA trechery are likely to want to use tor in any case.

Thoughts?



From luke at dashjr.org  Sat Oct 26 03:41:40 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 26 Oct 2013 03:41:40 +0000
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
Message-ID: <201310260341.41613.luke@dashjr.org>

On Saturday, October 26, 2013 3:31:05 AM Gregory Maxwell wrote:
> One limitation of the payment protocol as speced is that there is no
> way for a hidden service site to make use of its full authentication
> capability because they are unable to get SSL certificates issued to
> them.
> 
> A tor hidden service (onion site) is controlled by an RSA key.
> 
> It would be trivial to pack a tor HS pubkey into a self-signed x509
> certificate with the cn set to foooo.onion.
> ...
> Thoughts?

Is there any point to additional encryption over tor (which afaik is already 
encrypted end-to-end)? Is there a safe way to make this work through tor entry 
nodes/gateways?

It'd be nice to have a way to support namecoin-provided keys too...

Luke



From gavinandresen at gmail.com  Sat Oct 26 03:55:35 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 26 Oct 2013 13:55:35 +1000
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
Message-ID: <CABsx9T3NCpD19NehONkAdJXH=pS=GwDM044hFY_Hws-vkJcgBA@mail.gmail.com>

On Sat, Oct 26, 2013 at 1:31 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> ....

This would give us an fully supported option which is completely CA
> free... it would only work for tor sites, but the people concerned
> about CA trechery are likely to want to use tor in any case.
>
> Thoughts?
>

I think a tiny number of people would use it, so from a purely engineering
priority perspective my initial reaction is "not worth it."

However, as a demonstration of the flexibility of the payment protocol and
because it is a really nifty idea that will give lots of people warm
fuzzies I think you should do it and we should pull it.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/b0e325e7/attachment.html>

From gmaxwell at gmail.com  Sat Oct 26 04:06:48 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 25 Oct 2013 21:06:48 -0700
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <201310260341.41613.luke@dashjr.org>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
	<201310260341.41613.luke@dashjr.org>
Message-ID: <CAAS2fgTWjPCdAZB22GdRWkfULS-L9XaqYRZqB=dcbGV1+My3nA@mail.gmail.com>

On Fri, Oct 25, 2013 at 8:41 PM, Luke-Jr <luke at dashjr.org> wrote:
> Is there any point to additional encryption over tor (which afaik is already
> encrypted end-to-end)? Is there a safe way to make this work through tor entry
> nodes/gateways?

The x.509 in the payment protocol itself is for authentication and
non-repudiation, not confidentiality.

It's used to sign the payment request so that later there is
cryptographic evidence in the event of a dispute:
"He didn't send me my alpaca socks!" "Thats not the address I told you to pay!"
"He told me he'd send my 99 red-balloons, not just one!"  "No way,
that was the price for 1 red-balloon!"

Just using SSL or .onion (or whatever else) gets you confidentiality
and authentication.  Neither of these things get you non-repudiation.

> It'd be nice to have a way to support namecoin-provided keys too...

The payment protocol is extensible, so I hope that someday someone
will support namecoin authenticated messages (but note: this requires
namecoin to support trust-free SPV resolvers, otherwise there is no
way to extract a compact proof that can be stuck into a payment
request) and GPG authenticated messages.

But those things will require a fair amount of code (even fixing the
namecoin protocol in the nmc case), and GPG could be done just by
externally signing the actual payment request like you'd sign any
file... and considering the sorry state of their _practical_
usability, I don't think they're worth doing at this time.

By contrast, I _think_ the tor onion support would require only a
relatively few lines of code since it could just be the existing x.509
mechanism with just a simple special validation rule for .onion, plus
a little tool to repack the keys.  I think it would easily be more
widely used than namecoin (though probably both would not really be
used, as gavin notes).

w/ Gavin's comments I'll go check in with the tor folks and see if
anyone has ever though of doing this before and if there is already a
canonical structure for the x.509 certs used in this way.



From pete at petertodd.org  Sat Oct 26 04:15:51 2013
From: pete at petertodd.org (Peter Todd)
Date: Sat, 26 Oct 2013 00:15:51 -0400
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
Message-ID: <20131026041551.GA15932@savin>

On Fri, Oct 25, 2013 at 08:31:05PM -0700, Gregory Maxwell wrote:
> One limitation of the payment protocol as speced is that there is no
> way for a hidden service site to make use of its full authentication
> capability because they are unable to get SSL certificates issued to
> them.
> 
> A tor hidden service (onion site) is controlled by an RSA key.
> 
> It would be trivial to pack a tor HS pubkey into a self-signed x509
> certificate with the cn set to foooo.onion.
> 
> If we specified in the payment protocol an additional validation
> procedure for [base32].onion hosts that just has it hash and base32
> encode the pubkey (as tor does) then the payment protocol could work
> seamlessly with tor hosts. (Displaying that the payment request came
> from "foooo.onion").  I believe that the additional code for this
> would be trivial (and I'll write it if there is support for making
> this a standard feature).
> 
> This would give us an fully supported option which is completely CA
> free... it would only work for tor sites, but the people concerned
> about CA trechery are likely to want to use tor in any case.
> 
> Thoughts?

Strong ACK on the basis of responding for forum trolls alone.

It's easy enough to make it a genuinely useful tool for multisig wallets
too: keep a copy of your Tor URL bookmarks on your second signing
computer. So long as either computer has the correct URL you're safe.

-- 
'peter'[:-1]@petertodd.org
0000000000000006fbd917e8b4770c566dbc8ed4bedd00f441286ffb6e7f73ac
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/c214a3f2/attachment.sig>

From bitcoin-devel at jerviss.org  Sat Oct 26 04:32:27 2013
From: bitcoin-devel at jerviss.org (kjj)
Date: Fri, 25 Oct 2013 23:32:27 -0500
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
Message-ID: <526B45DB.2030200@jerviss.org>

The HTTP status code system seems to work well enough, and seems to give 
the best of both worlds.  A 3 digit numeric code that is 
machine-readable, and a freeform text note for humans.

The clever part about that system was in realizing that the numeric 
codes didn't need to account for every possible error. They just need to 
give the other node the most useful information, like "try that again 
later, I'm having a temporary problem" vs. "That is just plain wrong and 
it will still be wrong next time too, so don't bother to retry".

We can leave it to the humans to puzzle out the meaning of "403: values 
of txid gives rise to dom!"

Gavin wrote:
>
> On Oct 26, 2013, at 11:01 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:
>
>> Would it make sense to use either fixed length strings or maybe even enums?
> No. Enums or fixed length strings just make it harder to extend, for no benefit (bandwidth of 'reject' messages doesn't matter, they will be rare and are not relayed).
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From pete at petertodd.org  Sat Oct 26 07:28:27 2013
From: pete at petertodd.org (Peter Todd)
Date: Sat, 26 Oct 2013 03:28:27 -0400
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<op.w5h2rwhcyldrnw@laptop-air>
	<CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>
Message-ID: <20131026072827.GA12927@savin>

On Sat, Oct 26, 2013 at 10:25:06AM +1000, Gavin Andresen wrote:
> RE: lots of other comments:
> 
> I feel like there is a lot of "in the weeds" discussion here about
> theoretical, what-if-this-and-that-happens-in-the-future scenarios.

Um... yeah. Note how I said on your original pull-req that I'd be happy
to see it merged once the bugs were fixed (95% of the transactions it
produced had zero fees even with zero priority txins for some reason)
and you added a lower bound on fees in the wallet code as a "do no harm"
measure.

In fact, I think I wasn't being conservative enough given that it
affects relaying of transactions. Instead add both lower and upper
bounds to what the wallet and relaying code uses for 0.9.0 and it'd
probably be safe to merge.  We can get relax those "training wheels" in
0.9.1 or 0.9.2 once we've had some real-world experience with how the
estimation system works in practice, particularly for how it affects
relaying.

-- 
'peter'[:-1]@petertodd.org
00000000000000036253c7a02061121b6a12484278a3c472a22e47a821c28a69
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/4477c3ab/attachment.sig>

From thomasv1 at gmx.de  Sat Oct 26 15:24:50 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sat, 26 Oct 2013 17:24:50 +0200
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
Message-ID: <526BDEC2.2090709@gmx.de>

here is a simple implementation, with some ideas on how to format the 
metadata:
https://en.bitcoin.it/wiki/Talk:BIP_0039




From slush at centrum.cz  Sat Oct 26 20:47:41 2013
From: slush at centrum.cz (slush)
Date: Sat, 26 Oct 2013 22:47:41 +0200
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <526BDEC2.2090709@gmx.de>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
Message-ID: <CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>

Hi Thomas,

can you more elaborate on that "version" bits? What is exact meaning of it?
I still think this is more an implementation problem. What stops Electrum
to do the same algorithm for searching branches as it is now for used
addresses?

These "version bits" need to be covered by the specification as well,
because if any client will use them differently (or won't use them at all),
it will break cross-compatibility between clients, which was another goal
of bip39.

Marek




On Sat, Oct 26, 2013 at 5:24 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:

> here is a simple implementation, with some ideas on how to format the
> metadata:
> https://en.bitcoin.it/wiki/Talk:BIP_0039
>
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131026/0bdf1770/attachment.html>

From pieter.wuille at gmail.com  Sat Oct 26 21:30:37 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 26 Oct 2013 23:30:37 +0200
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
Message-ID: <CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>

Let's first try to agree on what we are solving.

It seems that Thomas wants - in addition to the cryptographic data -
to encode the tree structure, or at least version information about
what features are used in it, inside the seed.

I'm not sure whether we're ready to standardize on something like that
yet, not having established best practices regarding different wallet
structures. I do think we first need to see what possibilities and
developments are possible related to it.

In addition, information about the wallet structure is strictly less
secret than the key data - it is even less confidential than address
book data, transaction annotations, labels and comments and
bookkeeping information. It could be backed up anywhere and everywhere
without any repercussions, as far as I can see. I understand that in
the case of Electrum, there is a strong reason to want this
encapsulated together with the seed, but it's not really a requirement
for most wallets.
(if really needed, any key derivation scheme that starts from random
strings can be augmented with metadata by enforcing property-bits on a
hash of the string (so not of the output), as this data doesn't need
protection from brute-forcing).

Regarding other requirements, I wonder why we want the transformation
to be bidirectional? If it is just about generating master seeds, one
direction should be enough, and allows far nicer properties w.r.t.
security. If we do settle on a standard for 'brainwallets', I would
strongly prefer if it had at least some strengthening built-in, to
decrease the impact of worst-case situations.
If the reason is backward-compatibility, I think that any client that
supports seeds already can just keep supporting whatever they
supported before. Only if it matches both encoding schemes (as
mentioned before) there is a potential collision (and in that case,
the user could just be asked).

-- 
Pieter


On Sat, Oct 26, 2013 at 10:47 PM, slush <slush at centrum.cz> wrote:
> Hi Thomas,
>
> can you more elaborate on that "version" bits? What is exact meaning of it?
> I still think this is more an implementation problem. What stops Electrum to
> do the same algorithm for searching branches as it is now for used
> addresses?
>
> These "version bits" need to be covered by the specification as well,
> because if any client will use them differently (or won't use them at all),
> it will break cross-compatibility between clients, which was another goal of
> bip39.
>
> Marek
>
>
>
>
> On Sat, Oct 26, 2013 at 5:24 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:
>>
>> here is a simple implementation, with some ideas on how to format the
>> metadata:
>> https://en.bitcoin.it/wiki/Talk:BIP_0039
>>
>>
>>
>> ------------------------------------------------------------------------------
>> October Webinars: Code for Performance
>> Free Intel webinars can help you accelerate application performance.
>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
>> from
>> the latest Intel processors and coprocessors. See abstracts and register >
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From mike at plan99.net  Sun Oct 27 14:32:57 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 27 Oct 2013 15:32:57 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <526B45DB.2030200@jerviss.org>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
Message-ID: <CANEZrP2dQT6Evgm0UwvSKdgVsSnb_VF6fovVo0n0eKDM5ARZpw@mail.gmail.com>

Yeah, something like HTTP would work well.

I'm really looking forward to this. Currently bitcoinj gets a small but
steady stream of bug reports of the form "my transaction did not
propagate". It's flaky because the library picks one peer to send the
transaction to, and then watches it propagate across the network. But if
that selected peer refuses the tx for whatever reason, that propagation
never comes, and there's currently no timeout to make it retry with a
different node. The transactions as created usually look fine, so it's not
clear to me why some nodes would accept it others wouldn't given the
absence of double spends, and there's no way to debug and find out :(




On Sat, Oct 26, 2013 at 6:32 AM, kjj <bitcoin-devel at jerviss.org> wrote:

> The HTTP status code system seems to work well enough, and seems to give
> the best of both worlds.  A 3 digit numeric code that is
> machine-readable, and a freeform text note for humans.
>
> The clever part about that system was in realizing that the numeric
> codes didn't need to account for every possible error. They just need to
> give the other node the most useful information, like "try that again
> later, I'm having a temporary problem" vs. "That is just plain wrong and
> it will still be wrong next time too, so don't bother to retry".
>
> We can leave it to the humans to puzzle out the meaning of "403: values
> of txid gives rise to dom!"
>
> Gavin wrote:
> >
> > On Oct 26, 2013, at 11:01 AM, Jean-Paul Kogelman <
> jeanpaulkogelman at me.com> wrote:
> >
> >> Would it make sense to use either fixed length strings or maybe even
> enums?
> > No. Enums or fixed length strings just make it harder to extend, for no
> benefit (bandwidth of 'reject' messages doesn't matter, they will be rare
> and are not relayed).
> >
> >
> >
> ------------------------------------------------------------------------------
> > October Webinars: Code for Performance
> > Free Intel webinars can help you accelerate application performance.
> > Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> > the latest Intel processors and coprocessors. See abstracts and register
> >
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131027/d02f8dde/attachment.html>

From luke at dashjr.org  Sun Oct 27 14:39:51 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 27 Oct 2013 14:39:51 +0000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CANEZrP2dQT6Evgm0UwvSKdgVsSnb_VF6fovVo0n0eKDM5ARZpw@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<526B45DB.2030200@jerviss.org>
	<CANEZrP2dQT6Evgm0UwvSKdgVsSnb_VF6fovVo0n0eKDM5ARZpw@mail.gmail.com>
Message-ID: <201310271439.52983.luke@dashjr.org>

On Sunday, October 27, 2013 2:32:57 PM Mike Hearn wrote:
> Currently bitcoinj gets a small but steady stream of bug reports of the form
> "my transaction did not propagate". It's flaky because the library picks one
> peer to send the transaction to, and then watches it propagate across the
> network. But if that selected peer refuses the tx for whatever reason, that
> propagation never comes, and there's currently no timeout to make it retry
> with a different node.

Sounds like the real bug is "BitcoinJ relies on good/servant behaviour from 
other nodes". Don't assume your random node isn't hostile. Handling a peer 
that doesn't relay your transaction for any reason (including if they lie to 
you about having done so) should be expected behaviour.

Luke



From mike at plan99.net  Sun Oct 27 14:50:37 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 27 Oct 2013 15:50:37 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <201310271439.52983.luke@dashjr.org>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<526B45DB.2030200@jerviss.org>
	<CANEZrP2dQT6Evgm0UwvSKdgVsSnb_VF6fovVo0n0eKDM5ARZpw@mail.gmail.com>
	<201310271439.52983.luke@dashjr.org>
Message-ID: <CANEZrP1zr7vOUA3gF3aXeCVBBkNHvruJBWLcELHiUe8kDmnkUQ@mail.gmail.com>

These nodes are much more likely to just be broken than malicious, but
without any way to diagnose why they are dropping a transaction it's hard
to find out what's really going on.

Anyway, yes, I need to spend time adding timeouts and all kinds of other
things, although of course if the transactions are being rejected due to a
change in network rules that won't help either - if the nodes you're
connected to are silently eating your transaction, there's no sane UI that
can result from that without more explicit error handling.


On Sun, Oct 27, 2013 at 3:39 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Sunday, October 27, 2013 2:32:57 PM Mike Hearn wrote:
> > Currently bitcoinj gets a small but steady stream of bug reports of the
> form
> > "my transaction did not propagate". It's flaky because the library picks
> one
> > peer to send the transaction to, and then watches it propagate across the
> > network. But if that selected peer refuses the tx for whatever reason,
> that
> > propagation never comes, and there's currently no timeout to make it
> retry
> > with a different node.
>
> Sounds like the real bug is "BitcoinJ relies on good/servant behaviour from
> other nodes". Don't assume your random node isn't hostile. Handling a peer
> that doesn't relay your transaction for any reason (including if they lie
> to
> you about having done so) should be expected behaviour.
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131027/dfd261cc/attachment.html>

From a86551 at outlook.com  Sun Oct 27 22:25:41 2013
From: a86551 at outlook.com (Andres Home)
Date: Sun, 27 Oct 2013 22:25:41 +0000
Subject: [Bitcoin-development] Advisory: PHP library Bitcoin SCI weak key
	generation
Message-ID: <SNT151-W902926CDE9837FF83699C5820F0@phx.gbl>

For those developers who are using the Bitcoin SCI library (maybe others too, I
found two total and could only make contact with one), I would advise that you
review how your software handles private key creation.

Up until today, the Bitcoin SCI library used the Mersenne Twister PRNG or the
GMP library's PRNG directly to generate private keys. This has been somewhat 
resolved in the most recent version (October 27th), but only for the 
createNewMiniKey() function. Even if you haven't been using this library, it 
would be a fine oportunity to check your key generation functions if you do not 
interface directly with bitcoind. 

Affected keys have 32bits of entropy, possibly up to 56bits depending on the 
build of PHP, a low enough amount that would allow GPU based attacks on keys
in the lower ranges.


I do not know how many keys have been created using either function
.
I also don't share the authors optimism that this isn't an issue. 		 	   		  


From gavinandresen at gmail.com  Sun Oct 27 22:46:34 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 28 Oct 2013 08:46:34 +1000
Subject: [Bitcoin-development] Advisory: PHP library Bitcoin SCI weak
	key generation
In-Reply-To: <SNT151-W902926CDE9837FF83699C5820F0@phx.gbl>
References: <SNT151-W902926CDE9837FF83699C5820F0@phx.gbl>
Message-ID: <CABsx9T2wnvxm2YYeXiatR5FMEESRZO+FKR45NFpaVerrPzJA+Q@mail.gmail.com>

Thanks for the warning; to be clear, "the Bitcoin SCI library" is this
project?
  http://bitfreak.info/index.php?page=tools&t=bitsci


On Mon, Oct 28, 2013 at 8:25 AM, Andres Home <a86551 at outlook.com> wrote:

> For those developers who are using the Bitcoin SCI library (maybe others
> too, I
> found two total and could only make contact with one), I would advise that
> you
> review how your software handles private key creation.



> --
>
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/9eab4668/attachment.html>

From a86551 at outlook.com  Sun Oct 27 22:48:04 2013
From: a86551 at outlook.com (Andres Home)
Date: Sun, 27 Oct 2013 22:48:04 +0000
Subject: [Bitcoin-development] Advisory: PHP library Bitcoin SCI weak
 key generation
In-Reply-To: <CABsx9T2wnvxm2YYeXiatR5FMEESRZO+FKR45NFpaVerrPzJA+Q@mail.gmail.com>
References: <SNT151-W902926CDE9837FF83699C5820F0@phx.gbl>,
	<CABsx9T2wnvxm2YYeXiatR5FMEESRZO+FKR45NFpaVerrPzJA+Q@mail.gmail.com>
Message-ID: <SNT151-W61AA4CD1C6C550B6166915820F0@phx.gbl>

That's correct. 

There's no source control so I've mirrored the weak functions. 


The MiniKey function:

http://pastie.org/8435726


The PrivKey function:

http://pastie.org/8435731



________________________________
> Date: Mon, 28 Oct 2013 08:46:34 +1000 
> Subject: Re: [Bitcoin-development] Advisory: PHP library Bitcoin SCI  
> weak key generation 
> From: gavinandresen at gmail.com 
> To: a86551 at outlook.com 
> CC: bitcoin-development at lists.sourceforge.net 
>  
> Thanks for the warning; to be clear, "the Bitcoin SCI library" is this  
> project? 
>    http://bitfreak.info/index.php?page=tools&t=bitsci 
>  
>  
> On Mon, Oct 28, 2013 at 8:25 AM, Andres Home  
> <a86551 at outlook.com<mailto:a86551 at outlook.com>> wrote: 
> For those developers who are using the Bitcoin SCI library (maybe  
> others too, I 
> found two total and could only make contact with one), I would advise  
> that you 
> review how your software handles private key creation. 
>  
> --  
> -- 
> Gavin Andresen 		 	   		  


From gavinandresen at gmail.com  Sun Oct 27 22:52:25 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 28 Oct 2013 08:52:25 +1000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <526B45DB.2030200@jerviss.org>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
Message-ID: <CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>

RE: use HTTP-like status codes:

Okey dokey, I'll add a one-byte machine-readable HTTP-like status code.
Unless y'all want a 32-bit status code.  Or maybe a varint. Or a
three-character numeric string. I really and truly don't care, but I am
writing this code right now so whatever you want, decide quickly.

If anybody has strong feelings about what the reject categories should be,
then please take the time to write a specific list, I can't read your
mind....


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/5e1a8963/attachment.html>

From bitcoin-devel at jerviss.org  Mon Oct 28 02:52:58 2013
From: bitcoin-devel at jerviss.org (kjj)
Date: Sun, 27 Oct 2013 21:52:58 -0500
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
Message-ID: <526DD18A.7060201@jerviss.org>

Any reason not to use actual HTTP codes?  I'm not aware of any major 
deficiency in them.  Most of them won't apply to us, which is fine, they 
don't seem to apply to HTTP either.  We can extend the scheme on our own 
if we find a good reason to.

That implies 16 bits, or a varint.  I would avoid a string or varstring 
here; we already have a text field.  Varint vs. 16 bits is a minor 
issue, and arguments can be made in both directions.  I flipped a coin 
and got heads, so I'll say varint.

Gavin Andresen wrote:
> RE: use HTTP-like status codes:
>
> Okey dokey, I'll add a one-byte machine-readable HTTP-like status 
> code. Unless y'all want a 32-bit status code.  Or maybe a varint. Or a 
> three-character numeric string. I really and truly don't care, but I 
> am writing this code right now so whatever you want, decide quickly.
>
> If anybody has strong feelings about what the reject categories should 
> be, then please take the time to write a specific list, I can't read 
> your mind....
>
>
> -- 
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131027/447ba632/attachment.html>

From luke at dashjr.org  Mon Oct 28 02:59:38 2013
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 28 Oct 2013 02:59:38 +0000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
Message-ID: <201310280259.40063.luke@dashjr.org>

On Sunday, October 27, 2013 10:52:25 PM Gavin Andresen wrote:
> If anybody has strong feelings about what the reject categories should be,
> then please take the time to write a specific list, I can't read your
> mind....

It might make sense to use the rejection reasons from BIP 22 where applicable.

https://en.bitcoin.it/wiki/BIP_0022#Appendix:_Example_Rejection_Reasons

Luke



From pieter.wuille at gmail.com  Mon Oct 28 03:02:18 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 28 Oct 2013 04:02:18 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
Message-ID: <CAPg+sBi5NDT+R25PX8zbiit4QfTz9RwPKg=soDSXmZGZr2i8YA@mail.gmail.com>

Categories that make sense to me:
1) protocol related problems
1.a) failed to deserialize transaction
2) core principle violations
2.a) script evaluation fail (only owner is allowed to spend)
2.b) outputs larger than inputs (no creation of new money)
2.c) outputs not found/already spent (no double spending)
3) policy rules
3.a) not standard
3.b) ...

-- 
Pieter
 On Oct 27, 2013 11:54 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:

> RE: use HTTP-like status codes:
>
> Okey dokey, I'll add a one-byte machine-readable HTTP-like status code.
> Unless y'all want a 32-bit status code.  Or maybe a varint. Or a
> three-character numeric string. I really and truly don't care, but I am
> writing this code right now so whatever you want, decide quickly.
>
> If anybody has strong feelings about what the reject categories should be,
> then please take the time to write a specific list, I can't read your
> mind....
>
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/5b79e959/attachment.html>

From john.dillon892 at googlemail.com  Mon Oct 28 05:58:13 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Mon, 28 Oct 2013 05:58:13 +0000
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
Message-ID: <CAPaL=UXxyKpWxG3qE=76B1HmbUXRCEWWRsCAceL6RfToDh01yg@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Sat, Oct 26, 2013 at 3:31 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> One limitation of the payment protocol as speced is that there is no
> way for a hidden service site to make use of its full authentication
> capability because they are unable to get SSL certificates issued to
> them.
>
> Thoughts?

I think this is a great idea and wish to see it done. Here is 1BTC for you,
redeemable when you finish this task. I trust either Jeff Garzik or Peter Todd
to evaluate your finished product, or possibly someone elses:

37NDa6iFLEozbvw8vj38ri5D6SLw5xQujS

22e067d3317e6300a9edda84fd0e24d8bfb86cf91540c3fe7acff45e4dc64dd3:0

redeemScript : "5241045f4bba15dbfe94a45f362aa13bbaef8bbf21ff84fec1be5b27fa628f4b3acca1a2e5711503c8b8fe2e228229b8b8814f9e33e0f7a314a089d7140269ffd51fe44104d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e71417834104f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce453ae"

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJSbfy2AAoJEEWCsU4mNhiPrMMH/jd+AgVYUKd1vmP1BfaZum1s
X186JulwF659YHOx94dLs+NOjvjMfY6cPbHm+B0j20CnhWrZrXzcXvwTHnzOSuoc
1AAXg0KDbvyo+7PvTrsGQfHhT1FZSRzIUToofVmFlvEIO6/LiYMAYWCgIiX9nPvv
RlvdtavTST+cY19yZamo5X0XU5cgI2tbtVWKEHJQ2VcglCgwFg5K0kZ0O1NMKbcZ
KBagY3PVTiHnYP+LwSTW6EU9DNq0eLYG39mz4N6CqGkXZjGgh2YXZ6Sl2qRuO/5e
Rd9HcJXKqPKqMuRpQ2PA5U3U6QSyrUz7/fmi5dsOxnR6pdR53kjUVSvbOqBFHXw=
=I1/R
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Mon Oct 28 07:17:50 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Mon, 28 Oct 2013 07:17:50 +0000
Subject: [Bitcoin-development] Making fee estimation better
In-Reply-To: <CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<op.w5h2rwhcyldrnw@laptop-air>
	<CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>
Message-ID: <CAPaL=UVnfVkU_mbQKE2gg7RXBv+B13A1eHU4VpiHkBdmfea80g@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Sat, Oct 26, 2013 at 12:25 AM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> I feel like there is a lot of "in the weeds" discussion here about
> theoretical, what-if-this-and-that-happens-in-the-future scenarios.
>
> I would just like to point out (again) that this is not intended to be The
> One True Solution For Transaction Fees And Transaction Prioritization. If
> you've got a better mechanism for estimating fees, fantastic! If it turns
> out estimates are often-enough wrong to be a problem and you've got a
> solution for that, fantastic!

This discussion seems to be a lot of hot air over a simple observation that
estimates are imperfect and always will be. I do not understand you vehement
opposition the notion that a backup is a good thing except in the context that
replacement to change fees is halfway to profit-seeking replacement by fee.


Peter Todd:

You did a fair bit of leg work for replace-by-fee. Seems to me that
replace-for-fee will help prep infrastructure to eventual replace-by-fee usage,
while avoiding some of the politics around zero-conf transactions.

Go dust off your code and make it happen. I want to see a mempool
implementation similar to what you did for me on replace-for-fee, and I
understand much of the code is written in any case. This time I also want to
see a increasetxfee RPC command, and erasewallettx RPC command to deal with
duplicates. (I know touching the wallet code is scary) Having all will enable
usage, and I can imagine getting pools to use this will be easy enough.
(eligius?)

Here is your 4BTC bounty. In the event I am not around Gregory Maxwell can also
adjudicate. If both you and him feel someone else deserves it, by all means
send them the funds

bitcoind decodescript
522102d527466a144aac2030cd16d8be3d91231af26a95c2f8fc345a0ea0e8d53ac3914104d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e71417834104f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce453ae
{
    "asm" : "2 02d527466a144aac2030cd16d8be3d91231af26a95c2f8fc345a0ea0e8d53ac391
04d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e7141783
04f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce4
3 OP_CHECKMULTISIG",
    "reqSigs" : 2,
    "type" : "multisig",
    "addresses" : [
        "1L9p6QiWs2nfinyF4CnbqysWijMvvcsnxe",
        "1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv",
        "1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB"
    ],
    "p2sh" : "3BST1dPxvgMGL3d9GPCHvTyZNsJ7YKTVPo"
}

(I realized right after my Tor payment protocol bounty that I would need some
bit of uniqueness like a bounty-specific pubkey to disambiguate multiple such
bounties!)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJSbg9wAAoJEEWCsU4mNhiPROQH/j+eWccx7oSVsr94cgGu7qza
kdnA7B6BAlnCPg3D+nqEFKDqzOyFppeHLadCCIYHHc5iVRfJuu9J1Gh9lgMCuyCW
qN7ZOBCARjiVOqrHPQR1pf18i0ko7dQWw2hZjy51XKuFxAsHwZpB/fzQCbVVzyB6
l5SECCou58bJ/x7B0L93K+yjXuMGnvi9jqiLAKkLWYDzVm7TeVWNVQr04B7sqi6A
mY+BfG61e7sqM2UJd69yGLeQdEfghYTmtA+EaaqYS0L11m7yFGZdUqD7UNy1FKO7
44M1JTh2ANnQRjSTJWOBXQNHMa/mxDCji1VFUtJhZKEuOZyWpGm7HMH1D3vcvcQ=
=4flN
-----END PGP SIGNATURE-----



From aaxiomfinity at gmail.com  Mon Oct 28 07:31:45 2013
From: aaxiomfinity at gmail.com (Chris Evans)
Date: Mon, 28 Oct 2013 00:31:45 -0700
Subject: [Bitcoin-development] 0.8.5 setup.exe is corrupt
Message-ID: <CAE0e52VrBqb0QAgcD99+Lcn0bS4m9hKDA8+r2uC38b4CErS3hg@mail.gmail.com>

I downloaded 0.8.5 windows setup .exe and it says it is corrupted even
after i try re-download it  maybe it needs to be rearchived?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/f2400c4b/attachment.html>

From andreas at schildbach.de  Mon Oct 28 09:26:24 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 28 Oct 2013 10:26:24 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <526DD18A.7060201@jerviss.org>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>	<526B45DB.2030200@jerviss.org>	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org>
Message-ID: <l4lajm$3ga$1@ger.gmane.org>

HTTP also defines success codes (2xx). Are we also talking about ACK
messages now, rather than just REJECT messages?


On 10/28/2013 03:52 AM, kjj wrote:
> Any reason not to use actual HTTP codes?  I'm not aware of any major
> deficiency in them.  Most of them won't apply to us, which is fine, they
> don't seem to apply to HTTP either.  We can extend the scheme on our own
> if we find a good reason to.
> 
> That implies 16 bits, or a varint.  I would avoid a string or varstring
> here; we already have a text field.  Varint vs. 16 bits is a minor
> issue, and arguments can be made in both directions.  I flipped a coin
> and got heads, so I'll say varint.
> 
> Gavin Andresen wrote:
>> RE: use HTTP-like status codes:
>>
>> Okey dokey, I'll add a one-byte machine-readable HTTP-like status
>> code. Unless y'all want a 32-bit status code.  Or maybe a varint. Or a
>> three-character numeric string. I really and truly don't care, but I
>> am writing this code right now so whatever you want, decide quickly.
>>
>> If anybody has strong feelings about what the reject categories should
>> be, then please take the time to write a specific list, I can't read
>> your mind....
>>
>>
>> -- 
>> --
>> Gavin Andresen
>>
>>
>> ------------------------------------------------------------------------------
>> October Webinars: Code for Performance
>> Free Intel webinars can help you accelerate application performance.
>> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from 
>> the latest Intel processors and coprocessors. See abstracts and register >
>> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from 
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From gmaxwell at gmail.com  Mon Oct 28 09:32:08 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 28 Oct 2013 02:32:08 -0700
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <l4lajm$3ga$1@ger.gmane.org>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
Message-ID: <CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>

On Mon, Oct 28, 2013 at 2:26 AM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> HTTP also defines success codes (2xx). Are we also talking about ACK
> messages now, rather than just REJECT messages?

I do not believe we should do that:  It would be a non-trivial
increase the protocol bandwidth requirements.



From adam at cypherspace.org  Mon Oct 28 12:14:33 2013
From: adam at cypherspace.org (Adam Back)
Date: Mon, 28 Oct 2013 13:14:33 +0100
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <CAAS2fgTWjPCdAZB22GdRWkfULS-L9XaqYRZqB=dcbGV1+My3nA@mail.gmail.com>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
	<201310260341.41613.luke@dashjr.org>
	<CAAS2fgTWjPCdAZB22GdRWkfULS-L9XaqYRZqB=dcbGV1+My3nA@mail.gmail.com>
Message-ID: <20131028121433.GA10254@netbook.cypherspace.org>

I think its a mistake relying directly on X509, its subject to corrpution
attacks, involves ASN.1 and enough openSSL X.500 encoding abiguity (or other
code base) to be a security nightmare.

Why not make the payment messages signed by bitcoin keys.  If someone wants
to associate with X.509 they can put a bitcoin address on their SSL site.

If someone can get into your site deeply enough to modify your SSL served
code and you're trying to run ecommerce you have other problems.

Never the less if they care they can clear sign the bitcoin addr with xmlsig
and their X.509 private key, and/or with PGP and a WoT.

I think its smarter to pollute bitcoin main with X509.  Make a little helper
util if there are not enough xmlsig tools that you cant pick one up
opensource for multiple languages.

This then avoids the binding to Tor - you can publish a bitcoin address
authenticated anyway you like.  Eg tahoe-LAFS auth/integrity, i2p, tor, pgp
- you name it.

Maybe I voice this opinion a bit late in the cycle, but I think it would do
bitcoin a favor otherwise its a camels nose in the tent into the TLAs that
control their own X.509 CAs, or issue NSL letters for CA private keys, or
forged certs.  It's all happening and thanks to Snowden we now have even
more evidence...

Adam

On Fri, Oct 25, 2013 at 09:06:48PM -0700, Gregory Maxwell wrote:
>On Fri, Oct 25, 2013 at 8:41 PM, Luke-Jr <luke at dashjr.org> wrote:
>> Is there any point to additional encryption over tor (which afaik is already
>> encrypted end-to-end)? Is there a safe way to make this work through tor entry
>> nodes/gateways?
>
>The x.509 in the payment protocol itself is for authentication and
>non-repudiation, not confidentiality.
>
>It's used to sign the payment request so that later there is
>cryptographic evidence in the event of a dispute:
>"He didn't send me my alpaca socks!" "Thats not the address I told you to pay!"
>"He told me he'd send my 99 red-balloons, not just one!"  "No way,
>that was the price for 1 red-balloon!"
>
>Just using SSL or .onion (or whatever else) gets you confidentiality
>and authentication.  Neither of these things get you non-repudiation.
>
>> It'd be nice to have a way to support namecoin-provided keys too...
>
>The payment protocol is extensible, so I hope that someday someone
>will support namecoin authenticated messages (but note: this requires
>namecoin to support trust-free SPV resolvers, otherwise there is no
>way to extract a compact proof that can be stuck into a payment
>request) and GPG authenticated messages.
>
>But those things will require a fair amount of code (even fixing the
>namecoin protocol in the nmc case), and GPG could be done just by
>externally signing the actual payment request like you'd sign any
>file... and considering the sorry state of their _practical_
>usability, I don't think they're worth doing at this time.
>
>By contrast, I _think_ the tor onion support would require only a
>relatively few lines of code since it could just be the existing x.509
>mechanism with just a simple special validation rule for .onion, plus
>a little tool to repack the keys.  I think it would easily be more
>widely used than namecoin (though probably both would not really be
>used, as gavin notes).
>
>w/ Gavin's comments I'll go check in with the tor folks and see if
>anyone has ever though of doing this before and if there is already a
>canonical structure for the x.509 certs used in this way.
>
>------------------------------------------------------------------------------
>October Webinars: Code for Performance
>Free Intel webinars can help you accelerate application performance.
>Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most from
>the latest Intel processors and coprocessors. See abstracts and register >
>http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From mike at plan99.net  Mon Oct 28 13:21:07 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 28 Oct 2013 14:21:07 +0100
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <20131028121433.GA10254@netbook.cypherspace.org>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
	<201310260341.41613.luke@dashjr.org>
	<CAAS2fgTWjPCdAZB22GdRWkfULS-L9XaqYRZqB=dcbGV1+My3nA@mail.gmail.com>
	<20131028121433.GA10254@netbook.cypherspace.org>
Message-ID: <CANEZrP2rzatT_M+bY9=VT=dOM+PMFPEqaRtQk0JsPcsw3khTmA@mail.gmail.com>

On Mon, Oct 28, 2013 at 1:14 PM, Adam Back <adam at cypherspace.org> wrote:

> Maybe I voice this opinion a bit late in the cycle, but ....


A bit late is one way to put it. All these topics and more were discussed
to death a year ago when the payment protocol was first being designed.
Bluntly, I think we're all sick of it. You are welcome to PGP sign your
payment requests if you want to. If not, then please see my FAQ for
discussion:

   https://bitcointalk.org/index.php?topic=300809.msg3225143#msg3225143

tl;dr - the right way to tackle governments getting bogus certs issued is
certificate transparency. All other suggestions tend to boil down to
"here's some handwaving that doesn't actually solve the problem".

By the way, the evidence from the Snowden case rather reinforces the
strength of the CA system. Did we see stories about bulk usage of fake
certificates? No. What we read is that the increased usage of SSL was a
major game-changer for intelligence agencies. They "solve" SSL by compiling
databases of private keys they obtain in various ways. True to form when
the FBI wanted access to LavaBit, they tried to obtain his private keys
rather than just push a convenient "give me a fake cert" button, and when
it became known that Lavabit had to hand over their key, GoDaddy revoked
their certificate. Industry policies forced their hand and those policies
don't have a get-out clause for the FBI.

It's without a doubt that there are government-issued fake certs floating
about, somewhere, just due to the scale of hacking that's been taking
place. However, demanding perfection in a system that handles security for
over a billion people and tens of millions of operators is unreasonable.
All we can ask for is that it it's being improved, which through
initiatives like cert transparency, it is.

Please, let's call time on these discussions. They long ago ceased to have
any value.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/5039010f/attachment.html>

From jeremy at taplink.co  Mon Oct 28 19:37:30 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 28 Oct 2013 12:37:30 -0700
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <CAPaL=UXxyKpWxG3qE=76B1HmbUXRCEWWRsCAceL6RfToDh01yg@mail.gmail.com>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
	<CAPaL=UXxyKpWxG3qE=76B1HmbUXRCEWWRsCAceL6RfToDh01yg@mail.gmail.com>
Message-ID: <op.w5ojgsityldrnw@laptop-air>

Just an aside...

The 1BTC bountry John references below is a 1BTC P2SH output, where the  
redeemScript he provided does hash to the expected value, and is itself a  
2-of-3 multisig, with the following pubkeys, expressed as addresses:

1BrufViLKnSWtuWGkryPsKsxonV2NQ7Tcj
1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv
1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB

By comparison, the signatories for the 4BTC bountry are:

1L9p6QiWs2nfinyF4CnbqysWijMvvcsnxe
1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv
1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB

On the one hand, the vanity address makes it easy to guess who one of the  
signatories is, on the other hand, is it bad form to reuse keys for  
signing?

John, you mentioned wanting to disambiguate bounties, perhaps through a  
bounty-specific pubkey. I'm not sure I follow, how is that better than  
just referencing the address of the output, or the TxID, in a 'Table of  
Bounties'? Or you want to embed a hash of your signed message announcing  
the bounty?

Out of curiosity, I suppose right now you just keep pubkeys for the  
signatories you want to appoint and reuse the same pubkey to create these  
multi-sigs, or you have to ask for a new one each time?

 From the signatories perspective, I imagine we're a long way off from a  
wallet receiving or importing the p2sh, tracking that these outputs as  
"yours", and even more, which contract/bounty they correspond to, and  
finally a usable way to accumulate signatures and ultimately spend the  
output to the bounty winner.

And of course, thanks for posting the bounties!


On Sun, 27 Oct 2013 22:58:13 -0700, John Dillon  
<john.dillon892 at googlemail.com> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
> On Sat, Oct 26, 2013 at 3:31 AM, Gregory Maxwell <gmaxwell at gmail.com>  
> wrote:
>> One limitation of the payment protocol as speced is that there is no
>> way for a hidden service site to make use of its full authentication
>> capability because they are unable to get SSL certificates issued to
>> them.
>>
>> Thoughts?
>
> I think this is a great idea and wish to see it done. Here is 1BTC for  
> you,
> redeemable when you finish this task. I trust either Jeff Garzik or  
> Peter Todd
> to evaluate your finished product, or possibly someone elses:
>
> 37NDa6iFLEozbvw8vj38ri5D6SLw5xQujS
>
> 22e067d3317e6300a9edda84fd0e24d8bfb86cf91540c3fe7acff45e4dc64dd3:0
>
> redeemScript :  
> "5241045f4bba15dbfe94a45f362aa13bbaef8bbf21ff84fec1be5b27fa628f4b3acca1a2e5711503c8b8fe2e228229b8b8814f9e33e0f7a314a089d7140269ffd51fe44104d34775baab521d7ba2bd43997312d5f663633484ae1a4d84246866b7088297715a049e2288ae16f168809d36e2da1162f03412bf23aa5f949f235eb2e71417834104f005d39733ec09a1efa0cf8dcf3df50691e22c2374ff9a96d1d9ecb98a1e866c9f558a9fa1ba8ef0bbbad01f396768c0cb2dda9924dc0aaee1481604a8bd9ce453ae"
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.11 (GNU/Linux)
>
> iQEcBAEBCAAGBQJSbfy2AAoJEEWCsU4mNhiPrMMH/jd+AgVYUKd1vmP1BfaZum1s
> X186JulwF659YHOx94dLs+NOjvjMfY6cPbHm+B0j20CnhWrZrXzcXvwTHnzOSuoc
> 1AAXg0KDbvyo+7PvTrsGQfHhT1FZSRzIUToofVmFlvEIO6/LiYMAYWCgIiX9nPvv
> RlvdtavTST+cY19yZamo5X0XU5cgI2tbtVWKEHJQ2VcglCgwFg5K0kZ0O1NMKbcZ
> KBagY3PVTiHnYP+LwSTW6EU9DNq0eLYG39mz4N6CqGkXZjGgh2YXZ6Sl2qRuO/5e
> Rd9HcJXKqPKqMuRpQ2PA5U3U6QSyrUz7/fmi5dsOxnR6pdR53kjUVSvbOqBFHXw=
> =I1/R
> -----END PGP SIGNATURE-----
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most  
> from
> the latest Intel processors and coprocessors. See abstracts and register  
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gavinandresen at gmail.com  Tue Oct 29 05:37:11 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 29 Oct 2013 15:37:11 +1000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
Message-ID: <CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>

Thanks for the feedback, everybody, gist updated:
  https://gist.github.com/gavinandresen/7079034

Categories are:

0x01-0x0fProtocol syntax errors0x10-0x1fProtocol semantic errors0x40-0x4fServer
policy rule
<https://gist.github.com/gavinandresen/7079034#rejection-codes-common-to-all-message-types>

RE: why not a varint:  because we're never ever going to run out of reject
codes.  Eight are defined right now, if we ever defined eight more I'd be
surprised.

RE: why not use HTTP codes directly: because we'd be fitting round pegs
into square holes.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/606c3950/attachment.html>

From wtogami at gmail.com  Tue Oct 29 08:55:59 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Mon, 28 Oct 2013 22:55:59 -1000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
Message-ID: <CAEz79Pofn1QZ0a-Tbu7NKobaFFxH8EP7CA1aCm1d=Nt53SxzhQ@mail.gmail.com>

How about rejection codes to notify you that you have been rate limited?

Warren


On Mon, Oct 28, 2013 at 7:37 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

>
> Thanks for the feedback, everybody, gist updated:
>   https://gist.github.com/gavinandresen/7079034
>
> Categories are:
>
> 0x01-0x0f Protocol syntax errors0x10-0x1f Protocol semantic errors0x40-0x4fServer
> policy rule
> <https://gist.github.com/gavinandresen/7079034#rejection-codes-common-to-all-message-types>
>
> RE: why not a varint:  because we're never ever going to run out of reject
> codes.  Eight are defined right now, if we ever defined eight more I'd be
> surprised.
>
> RE: why not use HTTP codes directly: because we'd be fitting round pegs
> into square holes.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131028/edd87851/attachment.html>

From pete at petertodd.org  Tue Oct 29 09:12:00 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 29 Oct 2013 05:12:00 -0400
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CAEz79Pofn1QZ0a-Tbu7NKobaFFxH8EP7CA1aCm1d=Nt53SxzhQ@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CAEz79Pofn1QZ0a-Tbu7NKobaFFxH8EP7CA1aCm1d=Nt53SxzhQ@mail.gmail.com>
Message-ID: <20131029091200.GA28485@savin>

On Mon, Oct 28, 2013 at 10:55:59PM -1000, Warren Togami Jr. wrote:
> How about rejection codes to notify you that you have been rate limited?

ACK

However note that for the rejection messages defined these are actually
covered by the "too-low-fees" rejection codes. What would would want a
rate limiting rejection code is things like getblock and other requests.

-- 
'peter'[:-1]@petertodd.org
00000000aefda5391d2a12987ee8dc048c046c8f3e1ad1f1a3a1dbbe4954bfaf
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/7474c36f/attachment.sig>

From mike at plan99.net  Tue Oct 29 09:52:31 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 29 Oct 2013 10:52:31 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
Message-ID: <CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>

For tx reject, should there be a code for "unknown version"? That is,
tx.nVersion > bestKnownVersion == reject? In that case 0x40 would become
"non-standard transaction type". I think "unknown transaction type" is a
bit vague. Or do we want new tx messages to always be backwards compatible?

0x42 and 0x43 seems a bit similar to me. The sender knows what fee was paid
(presumably). If free transactions and fee-paying transactions end up
having a unified ranking applied, then distinguishing between them in the
reject message won't make much sense.

For block 0x11 again shall there be a separate code for "block is from the
future"? We don't want to lose the nVersion field to people just using it
for nonsense, so does it make sense to reject blocks that claim to be v2 or
v3?




On Tue, Oct 29, 2013 at 6:37 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

>
> Thanks for the feedback, everybody, gist updated:
>   https://gist.github.com/gavinandresen/7079034
>
> Categories are:
>
> 0x01-0x0f Protocol syntax errors0x10-0x1f Protocol semantic errors0x40-0x4fServer
> policy rule
> <https://gist.github.com/gavinandresen/7079034#rejection-codes-common-to-all-message-types>
>
> RE: why not a varint:  because we're never ever going to run out of reject
> codes.  Eight are defined right now, if we ever defined eight more I'd be
> surprised.
>
> RE: why not use HTTP codes directly: because we'd be fitting round pegs
> into square holes.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/c48b5df4/attachment.html>

From pete at petertodd.org  Tue Oct 29 10:14:52 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 29 Oct 2013 06:14:52 -0400
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
Message-ID: <20131029101452.GA15808@savin>

On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:
> For block 0x11 again shall there be a separate code for "block is from the
> future"? We don't want to lose the nVersion field to people just using it
> for nonsense, so does it make sense to reject blocks that claim to be v2 or
> v3?

That would prevent us from using nVersion as a soft-forking mechanism.

-- 
'peter'[:-1]@petertodd.org
000000000000000908fddb47210344de50e6d3bd842e649c68853eeee0390dcd
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/c357d271/attachment.sig>

From pete at petertodd.org  Tue Oct 29 11:38:33 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 29 Oct 2013 07:38:33 -0400
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <20131029101452.GA15808@savin>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
	<20131029101452.GA15808@savin>
Message-ID: <7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



Peter Todd <pete at petertodd.org> wrote:
>On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:
>> For block 0x11 again shall there be a separate code for "block is
>from the
>> future"? We don't want to lose the nVersion field to people just
>using it
>> for nonsense, so does it make sense to reject blocks that claim to be
>v2 or
>> v3?
>
>That would prevent us from using nVersion as a soft-forking mechanism.

Actually, that statement didn't go far enough: rejecting blocks with nVersions that you don't expect is a hard fork.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.9

iQFQBAEBCAA6BQJSb544MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhfuGCADHB+5WZ3oSRCCYgId+
5c4rxZHjjmXXIVOlXySjoRQ20JUnGbkUqN057VlutYbWaGV7OqR0oQyzh0LGpMdL
BU9hg8XoHbyIvA0WhCfEJvFzkwseN8Ac77UxtV3leBpBkSzjqlMS9QBGU6L5rw2U
uo8Sd7bQaqkadOPode3MMWDtmmqAZaj2dN02w/8C1rRna3SrbYRVYbaVAuN9yREO
99DOGEM2V7ni+eo4sQoxP2jf8vmNzy1EuQH8v1OloPgcpxl/GkLVXzQh4ZfO1ApE
UVKBo93oT34Tce9LwZy+k8XpeCvBRJ/+QwsbAAgdVYKr8KmRcAW4oR2KN7Y0jjq4
44xU
=OaON
-----END PGP SIGNATURE-----




From mike at plan99.net  Tue Oct 29 12:32:27 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 29 Oct 2013 13:32:27 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
	<20131029101452.GA15808@savin>
	<7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>
Message-ID: <CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>

Yes, exactly. That's the point. As you well know I think the whole
soft-fork mechanism is wrong and should not be used. If the rules change,
your node is *supposed* to end up on a chain fork and trigger an alert to
you, that's pretty much the whole purpose of Bitcoin's design. Undermining
that security model is problematic.


On Tue, Oct 29, 2013 at 12:38 PM, Peter Todd <pete at petertodd.org> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
>
>
> Peter Todd <pete at petertodd.org> wrote:
> >On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:
> >> For block 0x11 again shall there be a separate code for "block is
> >from the
> >> future"? We don't want to lose the nVersion field to people just
> >using it
> >> for nonsense, so does it make sense to reject blocks that claim to be
> >v2 or
> >> v3?
> >
> >That would prevent us from using nVersion as a soft-forking mechanism.
>
> Actually, that statement didn't go far enough: rejecting blocks with
> nVersions that you don't expect is a hard fork.
> -----BEGIN PGP SIGNATURE-----
> Version: APG v1.0.9
>
> iQFQBAEBCAA6BQJSb544MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhfuGCADHB+5WZ3oSRCCYgId+
> 5c4rxZHjjmXXIVOlXySjoRQ20JUnGbkUqN057VlutYbWaGV7OqR0oQyzh0LGpMdL
> BU9hg8XoHbyIvA0WhCfEJvFzkwseN8Ac77UxtV3leBpBkSzjqlMS9QBGU6L5rw2U
> uo8Sd7bQaqkadOPode3MMWDtmmqAZaj2dN02w/8C1rRna3SrbYRVYbaVAuN9yREO
> 99DOGEM2V7ni+eo4sQoxP2jf8vmNzy1EuQH8v1OloPgcpxl/GkLVXzQh4ZfO1ApE
> UVKBo93oT34Tce9LwZy+k8XpeCvBRJ/+QwsbAAgdVYKr8KmRcAW4oR2KN7Y0jjq4
> 44xU
> =OaON
> -----END PGP SIGNATURE-----
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/25e2fca3/attachment.html>

From pete at petertodd.org  Tue Oct 29 16:35:05 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 29 Oct 2013 12:35:05 -0400
Subject: [Bitcoin-development] On soft-forks and hard-forks
In-Reply-To: <CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>
References: <526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
	<20131029101452.GA15808@savin>
	<7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>
	<CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>
Message-ID: <20131029163505.GA28320@petertodd.org>

> On Tue, Oct 29, 2013 at 12:38 PM, Peter Todd <pete at petertodd.org> wrote:
> > Peter Todd <pete at petertodd.org> wrote:
> > >On Tue, Oct 29, 2013 at 10:52:31AM +0100, Mike Hearn wrote:
> > >> For block 0x11 again shall there be a separate code for "block is
> > >from the
> > >> future"? We don't want to lose the nVersion field to people just
> > >using it
> > >> for nonsense, so does it make sense to reject blocks that claim to be
> > >v2 or
> > >> v3?
> > >
> > >That would prevent us from using nVersion as a soft-forking mechanism.
> >
> > Actually, that statement didn't go far enough: rejecting blocks with
> > nVersions that you don't expect is a hard fork.
>
> Yes, exactly. That's the point. As you well know I think the whole
> soft-fork mechanism is wrong and should not be used. If the rules change,
> your node is *supposed* to end up on a chain fork and trigger an alert to
> you, that's pretty much the whole purpose of Bitcoin's design. Undermining
> that security model is problematic.

That's a nice sentiment, but there's a lot more nuance to it than
"soft-forks are bad"

We're talking about rejection here: you don't want to end up on an
isolated chain fork wondering if maybe miners have been unlucky. You
want to know that a longer chain exists so as to have solid evidence
that you're local configuration isn't what miners are mining.  Thus not
only should you "accept" blocks with versions you don't know about, you
should relay those blocks as well so that other out-of-date nodes have
the highest possible chance of finding out about them. Creating a block
is expensive, so with some minor safeguards - a high minimum difficulty,
and maximum size - relaying blocks you consider invalid is perfectly
safe and doesn't enable DoS attacks. Relaying block headers has similar
logic, and even less DoS attack worry. (don't apply bloom filters to
invalid blocks though!)

I had this discussion with Warren the other day actually: Litecoin is
considering banning old node versions and rejecting their attempts to
connect. I pointed out how you wanted to be damn sure there was no-one
mining with them, least you wind up creating a slowly growing fork mined
by nodes unaware of the main chain.

Soft-forks and SPV nodes is another topic. SPV nodes don't do any
meaningful validation - they usually don't even have the transaction
inputs spent by a transaction to determine if a scriptSig is valid.
Their security is already dependent on miners, so allowing those miners
to upgrade does no harm. In addition there are even cases where what
would be a hard-fork for a full node, is a soft-fork for a SPV node. On
the other hand if your "SPV" node is more sophisticated, then by all
means use a nVersion change to trigger an alert to the user. If you're
implementation relays blockchain data, continue doing so to ensure other
nodes find out about the new version as soon as possible. (all SPV nodes
should relay block headers if possible)


Note how the nVersion field is useful for voting: the "chain height in
coinbase" soft-fork was accomplished this way, changing nVersion from 1
to 2 with full enforcement of the rule triggered by a 95% supermajority.
Bitcoin is a decentralized system, so any changes need to be done by
voting to show that a clear consensus of hashing power will enforce and
validate the new rules. (time and height deadlines can be disasters if
the upgrade is ever ignored or delayed)

Interestingly this suggests that what we actually want is two nVersions
per upgrade: the first to signal that nodes wish to upgrade, and are
showing their intent to use the new rules. The second to signal that the
upgrade has actually happened and the old rules are now ignored. Client
software can use this two stage approach to know when rules may have
changed, and the user probably should consider upgrading. As applied to
the chain height upgrade we would have gone from version 2 during the
voting, to version 3 for any block produced while the rules were in
effect. Put another way, the last in nVersion is simply to signify that
the new blockchain rules are now active, as opposed to being proposed.

-- 
'peter'[:-1]@petertodd.org
000000000000000180dabf823b09a30b4f2032b5cab7ba1d0351cab350bee91f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131029/3b94799d/attachment.sig>

From gavinandresen at gmail.com  Wed Oct 30 02:01:16 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 30 Oct 2013 12:01:16 +1000
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
	<20131029101452.GA15808@savin>
	<7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>
	<CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>
Message-ID: <CABsx9T25sqq5ps+ePgc+tH+ns8ygahpYztgga0DuqgoQj9tpzQ@mail.gmail.com>

On Tue, Oct 29, 2013 at 10:32 PM, Mike Hearn <mike at plan99.net> wrote:

> Yes, exactly. That's the point. As you well know I think the whole
> soft-fork mechanism is wrong and should not be used. If the rules change,
> your node is *supposed* to end up on a chain fork and trigger an alert to
> you, that's pretty much the whole purpose of Bitcoin's design. Undermining
> that security model is problematic.
>

But if you are getting soft-forked recent versions of the reference
implementation WILL alert you; see this code in main.cpp:

        if (nUpgraded > 100/2)
            strMiscWarning = _("Warning: This version is obsolete, upgrade
required!");

That is, if more than half of the last 100 blocks are up-version, warn.
 block.version is part of the block header, so SPV clients can (and
probably should) do the same.

There are also warnings if you are forked, and, most recently, warnings if
there is a high-work alternative fork.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/1ce0b2f8/attachment.html>

From mike at plan99.net  Wed Oct 30 08:24:44 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 30 Oct 2013 09:24:44 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CABsx9T25sqq5ps+ePgc+tH+ns8ygahpYztgga0DuqgoQj9tpzQ@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
	<20131029101452.GA15808@savin>
	<7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>
	<CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>
	<CABsx9T25sqq5ps+ePgc+tH+ns8ygahpYztgga0DuqgoQj9tpzQ@mail.gmail.com>
Message-ID: <CANEZrP0fU3M3o4ZgBormcuRvkipM0tjNG+StA_QC90UbcpxdGA@mail.gmail.com>

> But if you are getting soft-forked recent versions of the reference
> implementation WILL alert you; see this code in main.cpp:
>

Perhaps I'm confused about how we're using the term soft fork. My
understanding is that this is where a new upgrade is designed to look valid
to old nodes, and if you don't upgrade you rely on the miner majority to
get you "back on track". For instance, P2SH was done this way - old nodes
that didn't upgrade during that transition believed all spends of P2SH
outputs were valid, even those spending someone elses coins.

In this case, the code you cite won't do anything because your client will
never reject a block during a soft-forking upgrade, even if it does
something that's supposed to be invalid or nonsensical.

If a new block version changes the serialization format or script language
or SIGHASH rules such that old clients reject the block, then they will end
up on a hard fork and the alerting code will trigger, which is correct and
as it should be.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/e37ddff8/attachment.html>

From mark at monetize.io  Wed Oct 30 09:05:05 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Wed, 30 Oct 2013 02:05:05 -0700
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CANEZrP0fU3M3o4ZgBormcuRvkipM0tjNG+StA_QC90UbcpxdGA@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>	<526B45DB.2030200@jerviss.org>	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>	<526DD18A.7060201@jerviss.org>
	<l4lajm$3ga$1@ger.gmane.org>	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>	<20131029101452.GA15808@savin>	<7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>	<CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>	<CABsx9T25sqq5ps+ePgc+tH+ns8ygahpYztgga0DuqgoQj9tpzQ@mail.gmail.com>
	<CANEZrP0fU3M3o4ZgBormcuRvkipM0tjNG+StA_QC90UbcpxdGA@mail.gmail.com>
Message-ID: <5270CBC1.7080506@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

If I understand the code correctly, it's not about rejecting blocks.
It's about noticing that >50% of recent blocks are declaring a version
number that is meaningless to you. Chances are, there's been a soft
fork and you should upgrade.

On 10/30/13 1:24 AM, Mike Hearn wrote:
> 
> But if you are getting soft-forked recent versions of the
> reference implementation WILL alert you; see this code in
> main.cpp:
> 
> 
> Perhaps I'm confused about how we're using the term soft fork. My 
> understanding is that this is where a new upgrade is designed to
> look valid to old nodes, and if you don't upgrade you rely on the
> miner majority to get you "back on track". For instance, P2SH was
> done this way - old nodes that didn't upgrade during that
> transition believed all spends of P2SH outputs were valid, even
> those spending someone elses coins.
> 
> In this case, the code you cite won't do anything because your
> client will never reject a block during a soft-forking upgrade,
> even if it does something that's supposed to be invalid or
> nonsensical.
> 
> If a new block version changes the serialization format or script 
> language or SIGHASH rules such that old clients reject the block,
> then they will end up on a hard fork and the alerting code will
> trigger, which is correct and as it should be.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJScMvBAAoJEAdzVfsmodw4I5sQAL0Wq4e7b6/KX2zl9RmtFl5S
qM9ZJkJV8qzirj1hMgVwvnuOj147Vb3EkJujxeMa8ujepXKZ215mMCLnCHPzWPpJ
jTtOBn1FCkCUbyt9uSbZ+56NR+ElmSOsDpAJ8IR9VywHriCxm4OIAMCLTR6CKRfr
6NWySvjEMlsSHyr7DFaJTlMqo+KIUWGmP7tdPu1L2AvNE+613dI5q76IjUHYoxhu
2dDtanYUvFCsdLZEnjTr1N45BBf1mTSlPfmA1ZWHgM779h6VIyb0TeO+iCaxpvWp
2RpSDj3+diFdMUK2uu69ZcwkREH0/RoQLOys6U5DfaGkpPtjY0YXB5DwN9quKgzX
padWzbQ0flpwWLYOPYrWATz4sWflxZJu6wHAcUkRS5k9crOLVjritXs1205x7YET
0H9jtbqXmBRXidCP2BOZPdq0PGDF8g2VeEHR69JRe3F3dBfSvbgHfKoiF1jpLLqb
rttoP+nD4ZRX8FesV2E/DEZgDZJMd8eqDKNDjq7Db4BTDg24Nq2ATNE2fBtenXwI
nXVNdmnvjDxjF0weJGlYgaQTfgVwHRxs+j4qgY4VLM0qEYplhHgg+KmOMFUtxAF/
sZv6w56XtCZS3LdNONAJSZzXIcqgmcodiWKVxkTL29dsWKikcBL5cG9ipdfmjQKT
eccFOHArsbW3eSfKP/Mb
=FSQI
-----END PGP SIGNATURE-----



From mike at plan99.net  Wed Oct 30 10:26:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 30 Oct 2013 11:26:16 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <5270CBC1.7080506@monetize.io>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CABsx9T2OMA_u=S9yUh2j78QDuCDUorYctktuixjwAjqc6neW=Q@mail.gmail.com>
	<526DD18A.7060201@jerviss.org> <l4lajm$3ga$1@ger.gmane.org>
	<CAAS2fgSuL4f9Sdg2CyK-EuCKK04gD98zHDoKFyTg_Fp_cNiz=A@mail.gmail.com>
	<CABsx9T3p6KFc8FiOgBwLtQsmkETE_iUbMhO47pS7J3hi3a9_4w@mail.gmail.com>
	<CANEZrP1teOnb=Gt_Nybh0jfQopK06Ps34Hy73OxOpHwuz-iZig@mail.gmail.com>
	<20131029101452.GA15808@savin>
	<7a22afbd-ad30-4748-8c88-9a1eda3e2fe9@email.android.com>
	<CANEZrP2cu7WJs2TbrFxFibwAHDVbxb7EJQ3mOrVs+ZQm-uU1LQ@mail.gmail.com>
	<CABsx9T25sqq5ps+ePgc+tH+ns8ygahpYztgga0DuqgoQj9tpzQ@mail.gmail.com>
	<CANEZrP0fU3M3o4ZgBormcuRvkipM0tjNG+StA_QC90UbcpxdGA@mail.gmail.com>
	<5270CBC1.7080506@monetize.io>
Message-ID: <CANEZrP0AuKmVvOtO1A0msWdty-e8f5S-D54er=CZur9d1e+pBw@mail.gmail.com>

On Wed, Oct 30, 2013 at 10:05 AM, Mark Friedenbach <mark at monetize.io> wrote:

> If I understand the code correctly, it's not about rejecting blocks.
>

I was referring to the fork alerts that Matt did. They also alert you if
there's a missed upgrade.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/3ed28fb8/attachment.html>

From gmaxwell at gmail.com  Wed Oct 30 17:13:49 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 30 Oct 2013 10:13:49 -0700
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CANEZrP2dQT6Evgm0UwvSKdgVsSnb_VF6fovVo0n0eKDM5ARZpw@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CANEZrP2dQT6Evgm0UwvSKdgVsSnb_VF6fovVo0n0eKDM5ARZpw@mail.gmail.com>
Message-ID: <CAAS2fgSAtjB0EMgBG0AphWADxCwLhutGFJEx74mLC=zCEY3QAA@mail.gmail.com>

On Sun, Oct 27, 2013 at 7:32 AM, Mike Hearn <mike at plan99.net> wrote:
> I'm really looking forward to this. Currently bitcoinj gets a small but
> steady stream of bug reports of the form "my transaction did not propagate".
> It's flaky because the library picks one peer to send the transaction to,
> and then watches it propagate across the network. But if that selected peer
> refuses the tx for whatever reason, that propagation never comes, and

Actually, we'll probably need to explicitly document that a failure to
reject is by no means a promise to forward.

If a node is using priority queued rate limiting for its relaying then
it might "accept" a transaction from you, but have it fall out of its
memory pool (due to higher priority txn arriving, or getting
restarted, etc.) before it ever gets a chance to send it on to any
other peers.

Finding out that it rejected is still useful information, but even
assuming all nodes are honest and well behaved I don't think you could
count on its absence to be sure of forwarding.



From pete at petertodd.org  Thu Oct 31 00:44:01 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 30 Oct 2013 20:44:01 -0400
Subject: [Bitcoin-development] Payment protocol for onion URLs.
In-Reply-To: <op.w5ojgsityldrnw@laptop-air>
References: <CAAS2fgRRobkE2GdYomtJof7HCH-9ZczE9EBj7DBS-pCGscUSNQ@mail.gmail.com>
	<CAPaL=UXxyKpWxG3qE=76B1HmbUXRCEWWRsCAceL6RfToDh01yg@mail.gmail.com>
	<op.w5ojgsityldrnw@laptop-air>
Message-ID: <20131031004401.GA22665@savin>

On Mon, Oct 28, 2013 at 12:37:30PM -0700, Jeremy Spilman wrote:
> Just an aside...
> 
> The 1BTC bountry John references below is a 1BTC P2SH output, where the  
> redeemScript he provided does hash to the expected value, and is itself a  
> 2-of-3 multisig, with the following pubkeys, expressed as addresses:
> 
> 1BrufViLKnSWtuWGkryPsKsxonV2NQ7Tcj
> 1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv
> 1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB
> 
> By comparison, the signatories for the 4BTC bountry are:
> 
> 1L9p6QiWs2nfinyF4CnbqysWijMvvcsnxe
> 1FCYd7j4CThTMzts78rh6iQJLBRGPW9fWv
> 1GMaxweLLbo8mdXvnnC19Wt2wigiYUKgEB
> 
> On the one hand, the vanity address makes it easy to guess who one of the  
> signatories is, on the other hand, is it bad form to reuse keys for  
> signing?

It's a bit more risky from a cryptography perspective, but provided your
wallet implementation is done correctly the extra risk is pretty much
theoretical. However this has caused real-world coin loss in the past in
the case of the Android PRNG flaw - re-using nonces in ECC signing
causes the private key to be revealed.

I think the real issue here is that John doesn't appear to have asked
any of the people whose signatures can release the funds if they were
willing to take part. If he had done that, he could have, and should
have, gotten separate pubkeys for the purpose of the bounty like was
done for Gregory Maxwell's CoinJoin bounty. Instead by not asking he is
in reality if not in theory placing demands on people who haven't
consented, particularly for the 1BTC bounty where he doesn't control any
of the private keys required to release the funds. IMO this is rude and
I encourage people not to do this.

> John, you mentioned wanting to disambiguate bounties, perhaps through a  
> bounty-specific pubkey. I'm not sure I follow, how is that better than  
> just referencing the address of the output, or the TxID, in a 'Table of  
> Bounties'? Or you want to embed a hash of your signed message announcing  
> the bounty?

Well, the issue with not disambiguating bounties is that if further
funds are sent to the bounty address it's unclear how do you handle
those funds. Note how he specified a specific txout for the 1BTC bounty,
but specified an address for the 4BTC bounty.

> Out of curiosity, I suppose right now you just keep pubkeys for the  
> signatories you want to appoint and reuse the same pubkey to create these  
> multi-sigs, or you have to ask for a new one each time?
> 
>  From the signatories perspective, I imagine we're a long way off from a  
> wallet receiving or importing the p2sh, tracking that these outputs as  
> "yours", and even more, which contract/bounty they correspond to, and  
> finally a usable way to accumulate signatures and ultimately spend the  
> output to the bounty winner.

We're not that far off: I could cook up a Python script to do the
signature accumulation and signing in a few hours. There's just not all
that much demand yet to fully polish the UI's, and in any case, it'll
differ for every specific application.

FWIW blockchain.info added multisig escrow support ages ago, then
removed it not long after because usage was near zero.

-- 
'peter'[:-1]@petertodd.org
0000000000000001daf527009e07f452eee5dca920d3a9253b682d8bd26783ff
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131030/2a9200d8/attachment.sig>

From thomasv1 at gmx.de  Thu Oct 31 09:13:43 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 31 Oct 2013 10:13:43 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>	<526BDEC2.2090709@gmx.de>	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
Message-ID: <52721F47.30206@gmx.de>

Indeed, I want to include a version number in the seed phrase because 
there are
multiple ways to define the tree structure used with BIP32. It is 
certainly too early
to make final decisions on that, or to achieve a common standard.
Also, I can imagine that bip32 itself might be superseeded in the future.

I understand that encapsulating a version number in the seed phrase might
not be as important for other wallets as it is for Electrum. So it is 
probably not
necessary to propose another BIP for that. I will simply implement it 
for Electrum,
and I will try to do it in such a way that other wallets can use the 
same format.

The other question we might be solving is strenghtening (your proposal). 
I consider
that this is not a strong requirement for Electrum, because it does not 
let the user
choose their seed phrase. However, if a few bits of the seed phrase are 
allocated
for metadata, then I guess strenghtening can be part of it. That's 
another good
reason to have a version number encapsulated in the seed.

I too wonder why the transformation needs to be bidirectional in bip39.




Le 26/10/2013 23:30, Pieter Wuille a ?crit :
> Let's first try to agree on what we are solving.
>
> It seems that Thomas wants - in addition to the cryptographic data -
> to encode the tree structure, or at least version information about
> what features are used in it, inside the seed.
>
> I'm not sure whether we're ready to standardize on something like that
> yet, not having established best practices regarding different wallet
> structures. I do think we first need to see what possibilities and
> developments are possible related to it.
>
> In addition, information about the wallet structure is strictly less
> secret than the key data - it is even less confidential than address
> book data, transaction annotations, labels and comments and
> bookkeeping information. It could be backed up anywhere and everywhere
> without any repercussions, as far as I can see. I understand that in
> the case of Electrum, there is a strong reason to want this
> encapsulated together with the seed, but it's not really a requirement
> for most wallets.
> (if really needed, any key derivation scheme that starts from random
> strings can be augmented with metadata by enforcing property-bits on a
> hash of the string (so not of the output), as this data doesn't need
> protection from brute-forcing).
>
> Regarding other requirements, I wonder why we want the transformation
> to be bidirectional? If it is just about generating master seeds, one
> direction should be enough, and allows far nicer properties w.r.t.
> security. If we do settle on a standard for 'brainwallets', I would
> strongly prefer if it had at least some strengthening built-in, to
> decrease the impact of worst-case situations.
> If the reason is backward-compatibility, I think that any client that
> supports seeds already can just keep supporting whatever they
> supported before. Only if it matches both encoding schemes (as
> mentioned before) there is a potential collision (and in that case,
> the user could just be asked).
>




From slush at centrum.cz  Thu Oct 31 10:41:27 2013
From: slush at centrum.cz (slush)
Date: Thu, 31 Oct 2013 11:41:27 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <52721F47.30206@gmx.de>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
Message-ID: <CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>

Strange, I didn't receive the response from sipa in separate message, so
I'll respond to him at first place.

Le 26/10/2013 23:30, Pieter Wuille a ?crit :
> I'm not sure whether we're ready to standardize on something like that
> yet, not having established best practices regarding different wallet
> structures. I do think we first need to see what possibilities and
> developments are possible related to it.

Although many strange practices how to use whole bip32 space are possible,
I think that we may (should?) agree on some "good enough" way how to
discover already used addresses in bip32 space. I read Electrum sources
about bip32 and I see that Electrum still uses quite flat structure (fixed
amount of branches, indexes from 0 to n), which is of course very sane way.

So if I migrate seed to another (non-Electrum) software, I only need to
discover close neighbourhood of the path "0", similarly like Electrum is
doing with "gap limit" in plain old Electrum algorithm, except in two
dimensions (paths 0, 1, 2, 3, 4, 5, 0/0, 0/1, 0/2, 0/3, 0/4, 0/5, 1/0, 1/1,
...5/5 for gap limit "5"). I don't say such operation is cheap, but this
discovery needs to be done only during the import.

For the reason that I think this is the only sane algorithm of general use
of bip32 space, I still don't see why we do need some extra metadata. I
would understand this if Electrum will use for some strange reason
addresses in higher address space like 2^32-1 or so, but this is not going
to happen at least in Electrum.

> I understand that in
> the case of Electrum, there is a strong reason to want this
> encapsulated together with the seed, but it's not really a requirement
> for most wallets.

Well, I can imagine that the bip32 compatible software will do full scan of
address space using some gap factor (actually I think "5" is too low by
default) or it can ask for wallet metadata like which software used such
tree before, to speedup scanning process.

I see that Thomas wants to make this automatic and hidden to user and
generally I agree that hiding the compexity to user is a good practice, but
actually this particular situation sounds to me as an exact oposite of
original statement "no metadata in mnemonic".

> Regarding other requirements, I wonder why we want the transformation
> to be bidirectional? If it is just about generating master seeds, one
> direction should be enough, and allows far nicer properties w.r.t.
> security. If we do settle on a standard for 'brainwallets',

ECDSA has one very nice option - (almost) any random data can be used as a
private key. There are very nice schemas possible by using this feature and
requiring private key to be specially crafted just because the user wanted
to use mnemonic schema is very strong limitation to me.

To be specific, we (in cooperation with / inspired by Timo Hanke) developed
method how to prove that the seed generated by Trezor has been created
using combination of computer-provided entropy and device-provided entropy,
without leaking full private information to other computer, just because we
want Trezor to be blackbox-testable and fully deterministic (seed
generation is currently the only operation which uses any source of RNG).

To limit the complexity of such algorithm it is better to produce plain
seed (128, 192 or 256 bits, depends on settings) and then transform the
result of such "deterministic seed" to mnemonic, so for us the
bi-directionality is quite strong requirement. *Maybe* it would be possible
to combine such algorithm and one-way mnemonic together, but it would
complicate the design and I'm sure you understand that we want to keep
things as clear and simple as possible, especially while handling with seed
generation.

> I would strongly prefer if it had at least some strengthening built-in, to
> decrease the impact of worst-case situations.

Agree (hardening is default in bip39).


Marek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/35ff057a/attachment.html>

From pete at petertodd.org  Thu Oct 31 11:07:58 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 31 Oct 2013 07:07:58 -0400
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
Message-ID: <20131031110758.GA9591@savin>

On Thu, Oct 31, 2013 at 11:41:27AM +0100, slush wrote:
> To be specific, we (in cooperation with / inspired by Timo Hanke) developed
> method how to prove that the seed generated by Trezor has been created
> using combination of computer-provided entropy and device-provided entropy,
> without leaking full private information to other computer, just because we
> want Trezor to be blackbox-testable and fully deterministic (seed
> generation is currently the only operation which uses any source of RNG).

I just wanted to say the fact that you're making key generation
auditable, and using deterministic signatures, is a clear sign that you
guys know what you're doing. Hearing this makes me a lot more confident
that the Trezor will prove to be a secure way to store my Bitcoins and
my pre-order will prove to be money well spent.

Kudos!

-- 
'peter'[:-1]@petertodd.org
000000000000000784d399e7c1d1e8f2fc953c6939b115699a1ee05029a59bc9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/dc4940b1/attachment.sig>

From slush at centrum.cz  Thu Oct 31 11:11:02 2013
From: slush at centrum.cz (slush)
Date: Thu, 31 Oct 2013 12:11:02 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <52721F47.30206@gmx.de>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
Message-ID: <CAJna-HgD-Vgd_n8x=cD4dAoARMy0LoZJ29_y=tBoX4XYG03XqA@mail.gmail.com>

On Thu, Oct 31, 2013 at 10:13 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:

> Indeed, I want to include a version number in the seed phrase because
> there are
> multiple ways to define the tree structure used with BIP32. It is
> certainly too early
> to make final decisions on that, or to achieve a common standard.
>

Well, as we're the first pioneers of bip32, let's start using it in some
sane way and I'm sure the others will join. Just because they don't want to
incompatible software.

Actually I quite like that you're not wasting bip32 space by using some
dynamic allocatons in higher address space, so I'm happy to follow your
rules and I think we can agree on generic discover algorithm which maybe
won't be optimal, but will find all used addresses and won't need any
additional information directly in mnemonic.

As I wrote in previous post, in worst case I can imagine dropdown list on
import dialog, which will ask user which software has been handling the
seed before, to speedup the scan. But for now I don't see this necessary at
all.

Also, I can imagine that bip32 itself might be superseeded in the future.
>
>
Although I can imagine that as well, I hope that it won't be the case. We
need to unite and integrate instead of making incompatible applications.

One disadvantage of bip32 is that in fact it is too much flexible, so we
even falled into the necessity of defining version of discovery algorithm.
Lets set up best practices how to use it and other will follow instead of
creating zillion cross-incompatible algorithms which won't understand each
to other.


> The other question we might be solving is strenghtening (your proposal).
> I consider
> that this is not a strong requirement for Electrum, because it does not
> let the user
> choose their seed phrase. However, if a few bits of the seed phrase are
>

Hardening and password protection are two unrelated requirements. Again,
there are some scenarios in which use can leak part of the mnemonic to
attacker, so hardening prevent to bruteforce the rest information by
attacker, even if the mnemonic isn't passphrase protected.

I'm especially refering to our algorithm of mnemonic import to Trezor
during disaster recovery (when Trezor is destroyed and user wants to import
the seed to another one), so that leak isn't just a theoretical concept,
but real-word scenario.


> allocated

for metadata, then I guess strenghtening can be part of it. That's
> another good
> reason to have a version number encapsulated in the seed.
>

Actually creating optional features of such algorithm only make things
complicated (and less cross-compatible). Every software still needs to
implement such hardening even if it is optional feature, to be compatible
with other clients. Then I don't see any reason why to have it optional.

Don't forget that the proposal uses only 4 bits of version, which isn't too
much combination for all these optional features ;-).

I too wonder why the transformation needs to be bidirectional in bip39.
>
>
Well, I wrote longer answer in previous  email. tl;dr; there's quite easy
way how to make the algorithm bi-directional, so I don't see a necessity to
drop potentially useful feature for no good reason.

I was thinking about your proposal and I realized that both our solutions
solves a bit different problem. Lets summarize features (and forget to
wordlist fights for moment):

bip39:
+ bi-directional
+ passphrase protected
+ shorter mnemonic or shorter wordlist
- predefined wordlist

ThomasV proposal:
+ any software can has its own preferred worlist
? passphrase protected
- one-direction only
- longer mnemonic or longer wordlist

Back to wordlist fights
a) actually I think that the wordlist choice is far less important than it
may look at first glance. Thomas thinks that bip39 wordlist is disaster, me
and many other thinks it is ok, but mainly that it is very subjective.

b) I see the beauty of "custom wordlists" in Thomas proposal, still if it
means the algorithm is uni-direction only, it is very strong disadvantage
to our usecase.

c) I advocated our wordlist mainly because we put a lot of effort into it
and after many weeks of tuning it is already done; not because I think that
one method of picking the words is superior to other. I mean - if Thomas
can offer any other plain-english wordlist which he'll be happy with, I'll
vote for dropping our own wordlist and to use Thomas's version for the deal
that he'll accept our need for bi-directionality and he agrees on the rest
of bip39 ;-).

Marek
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/22ee437e/attachment.html>

From slush at centrum.cz  Thu Oct 31 11:18:32 2013
From: slush at centrum.cz (slush)
Date: Thu, 31 Oct 2013 12:18:32 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAJna-HgD-Vgd_n8x=cD4dAoARMy0LoZJ29_y=tBoX4XYG03XqA@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-HgD-Vgd_n8x=cD4dAoARMy0LoZJ29_y=tBoX4XYG03XqA@mail.gmail.com>
Message-ID: <CAJna-Hj-jjcVB6jSXyy2Epy=ojKsZCo0Dor+5-=RTG4RtC4LSw@mail.gmail.com>

Oh, I forgot to one practical aspect; the way how the mnemonic is "mined"
in Thomas proposal prevents usage in embedded devices, because difficulty
of generating proper mnemonic is simply too high for embedded
microcontrollers. Maybe this can be solved somehow by modifying the
proposal, but right now it is a showstopper for us.

Marek

On Thu, Oct 31, 2013 at 12:11 PM, slush <slush at centrum.cz> wrote:

>
> bip39:
> + bi-directional
> + passphrase protected
> + shorter mnemonic or shorter wordlist
> - predefined wordlist
>
> ThomasV proposal:
> + any software can has its own preferred worlist
> ? passphrase protected
> - one-direction only
> - longer mnemonic or longer wordlist
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/315b5ef0/attachment.html>

From mike at plan99.net  Thu Oct 31 12:01:37 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 31 Oct 2013 13:01:37 +0100
Subject: [Bitcoin-development] Feedback requested: "reject" p2p message
In-Reply-To: <CAAS2fgSAtjB0EMgBG0AphWADxCwLhutGFJEx74mLC=zCEY3QAA@mail.gmail.com>
References: <274a1888-276c-4aa6-a818-68f548fbe0fa@me.com>
	<9DCDB8F6-E3B2-426B-A41E-087E66B3821A@gmail.com>
	<526B45DB.2030200@jerviss.org>
	<CANEZrP2dQT6Evgm0UwvSKdgVsSnb_VF6fovVo0n0eKDM5ARZpw@mail.gmail.com>
	<CAAS2fgSAtjB0EMgBG0AphWADxCwLhutGFJEx74mLC=zCEY3QAA@mail.gmail.com>
Message-ID: <CANEZrP3hMe_1moKDZKjxcB_okJqzmDJprnskMnts59ED18JsEg@mail.gmail.com>

On Wed, Oct 30, 2013 at 6:13 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> If a node is using priority queued rate limiting for its relaying then
> it might "accept" a transaction from you, but have it fall out of its
> memory pool (due to higher priority txn arriving, or getting
> restarted, etc.) before it ever gets a chance to send it on to any
> other peers.
>

That's a good point, however, I would hope that this fairly trivial race
condition can be resolved. There's no requirement that a transaction be
placed into a buffer from which it can be removed before relaying. After
relaying - sure. But the gap of a few seconds between that shouldn't cause
any issues to eliminate.

I believe Gavin's smartfees branch adds mempool persistence to disk, so
restarting nodes won't clear the mempool in future. Or at least that's a
part of the longer term plan once mempool limiting is done.


> Finding out that it rejected is still useful information, but even
> assuming all nodes are honest and well behaved I don't think you could
> count on its absence to be sure of forwarding.
>

I think measuring propagation will be a part of bitcoin wallets for the
forseeable future, although if all nodes reject that allows for a more
responsive and more helpful UI than just waiting for some arbitrary timeout
to elapse.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131031/61485d73/attachment.html>

