From rusty at rustcorp.com.au  Thu Oct  1 00:06:03 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 01 Oct 2015 09:36:03 +0930
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <560C3536.1070503@juno.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
	<87wpv8ft61.fsf@rustcorp.com.au>
	<CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
	<CA+w+GKRd69kOiDKE_56vnbZ=Hx4hhXqtzpsVT6Z+fx005zW_MQ@mail.gmail.com>
	<CABm2gDqkTizK1TtGGM4fFp4xWMUhAstVOvnJ4_3VKaGNoSX0eg@mail.gmail.com>
	<560C3536.1070503@juno.com>
Message-ID: <87h9mbpi50.fsf@rustcorp.com.au>

John Winslow via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> Two observations from a Bitcoin investor and non-programmer:

Please take this off the -dev list.

Thanks,
Rusty.

From rusty at rustcorp.com.au  Thu Oct  1 00:04:19 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 01 Oct 2015 09:34:19 +0930
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
	<87wpv8ft61.fsf@rustcorp.com.au>
	<CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
Message-ID: <87k2r7pi7w.fsf@rustcorp.com.au>

Adam Back <adam at cypherspace.org> writes:
> I think from discussion with Gavin sometime during the montreal
> scaling bitcoin workshop, XT maybe willing to make things easy and
> adapt what it's doing.  For example in relation to versionBits Gavin
> said he'd be willing to update XT with an updated/improved
> versionBits, for example.
>
> It seems more sensible to do what is simple and clean and have both
> core do that, and XT follow if there is no particular philosophy
> debate on a given technical topic.  This seems a quite constructive
> approach.

That too, but let's not break existing software.  This proposal allows
that, and is trivial.

Cheers,
Rusty.

From jtimon at jtimon.cc  Thu Oct  1 00:11:49 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 1 Oct 2015 02:11:49 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDqAhjd1721XPjjAiev4coveLM0NUE9ng+W2tgswHiW5bg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
	<CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
	<CABm2gDpojk4Sb9eVVcFiaQng+mKs+3iWFu_Ep0h7VC1ip7US5Q@mail.gmail.com>
	<CA+w+GKTf2vnJ0WdrK1HzFwCx154e=BP=kGcZvGYY7cbcijwLSQ@mail.gmail.com>
	<CABm2gDqAhjd1721XPjjAiev4coveLM0NUE9ng+W2tgswHiW5bg@mail.gmail.com>
Message-ID: <CABm2gDrr2qg4NCCLR0Ut2Jj1Wq2ieRS2EZkM+Ytb0a6ieZrSuA@mail.gmail.com>

On Oct 1, 2015 12:14 AM, "Jorge Tim?n" <jtimon at jtimon.cc> wrote:
>
> On Wed, Sep 30, 2015 at 11:06 PM, Mike Hearn <hearn at vinumeris.com> wrote:
> >> Exactly, all those "mini divergences" eventually disappear
> >
> > A miner that has accepted a newly invalid transaction into its memory
pool
> > and is trying to mine it, will keep producing invalid blocks forever
until
> > the owner shuts it down and upgrades. This was happening for weeks after
> > P2SH triggered.
> >
> > For instance, any miner that has modified/bypassed IsStandard() can do
this,
> > or any miner that accepts direct transaction submission, or any miner
that
> > runs an old node from before OP_NOPs were made non-standard.
>
> That is correct. But doesn't seem to contradict anything I said.

Actually, no, sorry, the second paragraph is not correct as explained by
Greg Maxwell.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/a24e6353/attachment.html>

From gmaxwell at gmail.com  Thu Oct  1 01:08:44 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 1 Oct 2015 01:08:44 +0000
Subject: [bitcoin-dev] Pedantic note on the use of "eventual consistency" to
 describe Bitcoin [Was: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!]
Message-ID: <CAAS2fgQoqk+YJfWnFwRyV+SBiwd4j2WDu2f9BxKXFNDkDhiYfg@mail.gmail.com>

On Wed, Sep 30, 2015 at 10:14 PM, Jorge Tim?n
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> reason you don't think guaranteed eventual consistency has any value

Obligatory pedantic correction: In Bitcoin we don't actually achieve
"eventual consistency" of the kind which is usually described in the
literature. In Bitcoin the probability of reorg to a particular point
diminishes over time but never is guaranteed to be _zero_ (at least
within the framework of bitcoin itself), and at the same time we have
stronger ordering properties than is normally implied by eventual
consistency (so, e.g. an update may never happen if its conflicted
first).

This is completely irrelevant to your point-- soft forks obey the
normal consistency process for bitcoin where a hard fork (especially a
mutual one) does not... but I'm sure there is an academic out there
that cringes when we use the words "eventual consistency" to describe
Bitcoin, and I feel like I'd be remiss to not offer this minor
correction. :)

From rusty at rustcorp.com.au  Thu Oct  1 00:26:51 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 01 Oct 2015 09:56:51 +0930
Subject: [bitcoin-dev] Versionbits BIP (009) minor revision proposal.
In-Reply-To: <CAAS2fgTXP0j6K3sxp=HL9j2-xvO8y_VnpG+iZw9kaxmnxZQjSw@mail.gmail.com>
References: <87zj04fxkw.fsf@rustcorp.com.au>
	<CAAS2fgTXP0j6K3sxp=HL9j2-xvO8y_VnpG+iZw9kaxmnxZQjSw@mail.gmail.com>
Message-ID: <87bncjph6c.fsf@rustcorp.com.au>

Gregory Maxwell <gmaxwell at gmail.com> writes:
> I can, however, argue it the other way (and probably have in the
> past):  The bit is easily checked by thin clients, so thin clients
> could use it to reject potentially ill-fated blocks from non-upgraded
> miners post switch (which otherwise they couldn't reject without
> inspecting the whole thing). This is an improvement over not forcing
> the bit, and it's why I was previously in favor of the way the
> versions were enforced.  But, experience has played out other ways,
> and thin clients have not done anything useful with the version
> numbers.
>
> A middle ground might be to require setting the bit for a period of
> time after rule enforcing begins, but don't enforce the bit, just
> enforce validity of the block under new rules.  Thus a thin client
> could treat these blocks with increased skepticism.

Introducing this later would trigger warnings on older clients, who
would consider the bit to represent a new soft fork :(

So if we want this middle ground, we should sew it in now, though it
adds a other state.  Simplest is to have miners keep setting the bit for
another 2016 blocks.  If we want to later, we can make this a consensus
rule.

"Bitcoin is hard, let's go shopping!"  "With Bitcoin!"  "..."
Rusty.

From elombrozo at gmail.com  Thu Oct  1 02:54:34 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 30 Sep 2015 19:54:34 -0700
Subject: [bitcoin-dev] Versionbits BIP (009) minor revision proposal.
In-Reply-To: <87bncjph6c.fsf@rustcorp.com.au>
References: <87zj04fxkw.fsf@rustcorp.com.au>
	<CAAS2fgTXP0j6K3sxp=HL9j2-xvO8y_VnpG+iZw9kaxmnxZQjSw@mail.gmail.com>
	<87bncjph6c.fsf@rustcorp.com.au>
Message-ID: <A0342136-AA7C-4355-BCDA-C6AE8D6BCCB4@gmail.com>

I can go along with making it optional but recommended for the first deployment and making it mandatory later on. It would be purely informational for now...but it will give us valuable data.

As has been said before, most of these BIP deployments will likely be accompanied by recommended default settings for miners. Assuming the BIP itself is not very controversial, the gravest dangers come not so much from miners (or pool operators, more accurately) deliberately choosing to lie...but more from either shortcuts taken in implementations and/or bugs. Collecting additional data will help spot faulty implementations and allow us to intervene.

Eventually, I imagine a much more sophisticated signaling mechanism where endusers can be given highly informative messages regarding changes and we can have a way of directing people to resources where they can learn more about the new features.

- Eric

On September 30, 2015 5:26:51 PM PDT, Rusty Russell <rusty at rustcorp.com.au> wrote:
>Gregory Maxwell <gmaxwell at gmail.com> writes:
>> I can, however, argue it the other way (and probably have in the
>> past):  The bit is easily checked by thin clients, so thin clients
>> could use it to reject potentially ill-fated blocks from non-upgraded
>> miners post switch (which otherwise they couldn't reject without
>> inspecting the whole thing). This is an improvement over not forcing
>> the bit, and it's why I was previously in favor of the way the
>> versions were enforced.  But, experience has played out other ways,
>> and thin clients have not done anything useful with the version
>> numbers.
>>
>> A middle ground might be to require setting the bit for a period of
>> time after rule enforcing begins, but don't enforce the bit, just
>> enforce validity of the block under new rules.  Thus a thin client
>> could treat these blocks with increased skepticism.
>
>Introducing this later would trigger warnings on older clients, who
>would consider the bit to represent a new soft fork :(
>
>So if we want this middle ground, we should sew it in now, though it
>adds a other state.  Simplest is to have miners keep setting the bit
>for
>another 2016 blocks.  If we want to later, we can make this a consensus
>rule.
>
>"Bitcoin is hard, let's go shopping!"  "With Bitcoin!"  "..."
>Rusty.

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/1c6a92df/attachment.html>

From dscotese at litmocracy.com  Thu Oct  1 04:04:32 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Wed, 30 Sep 2015 21:04:32 -0700
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <CAOoPuRafA8qW_errTh+VhLcQgOMYpTGu8o0wxiFUrpObiqacFA@mail.gmail.com>
References: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
	<CAHv+tb7y5x501SxOuz61311bKgL0u2EaK7bO5_gQ-N+LejAuJw@mail.gmail.com>
	<DBAB84C5-6F81-4328-9D97-A82458504480@lykkex.com>
	<CAOoPuRafA8qW_errTh+VhLcQgOMYpTGu8o0wxiFUrpObiqacFA@mail.gmail.com>
Message-ID: <CAGLBAheLYtmOVa1LhF72qyvhnWD9k=m4JaFsC=DYWY5rc6pVrw@mail.gmail.com>

I am waiting for the bitcoin (not bitcoin-dev) mailing list so that anyone
who writes "That's off-topic" can also include a link to it.

Someone else mentioned that they read all these emails in about 15
minutes.  I'm a bit slower than that, but I'm reading the vitcoin-xt stuff
too.  It isn't too much for me, but it will be nice to have a more open
list, such as is planned.  What's the hold up?  Don't answer here, at least
not until the list is ready :-)

On Wed, Sep 30, 2015 at 6:38 AM, Benjamin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi Richard,
>
> its great that people with a lot of experience in financial markets take
> interest in these topics. I don't think you will receive the best answers
> here. The Bitcointalk Altcoin section is currently the best place for such
> announcements. I believe there is room for a better board/list for new 2.0
> projects. Bitcoin dev is not very welcoming to discussions/debates/projects
> which go beyond digital cash systems (assets, markets, etc.), as it is very
> focused on the core problems which are under-funded.
>
> Anyone who wants to build a better venue for 2.0 projects feel free to
> contact me. This could be a mailing list or an upgraded message board. Most
> such boards are project/currency specific, but there is one missing for
> announcements.
>
> In terms of markets on top of blockchains, I have sent a private email.
>
> Regards,
> Benjamin
>
> On Wed, Sep 30, 2015 at 3:17 PM, Richard Olsen via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Lykke Corp based in Z?rich funds the competition.
>>
>> 2 Mio Lykke coins (8'000 USD) is allocated to funding core development in
>> next 3 months,
>>
>> Richard
>>
>> On 30.09.2015, at 14:22, Thomas Kerin <thomas.kerin at gmail.com> wrote:
>>
>> Who is funding this?
>>
>> Why not fund Core development?
>> On 30 Sep 2015 7:37 am, "Richard Olsen via bitcoin-dev" <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> All,
>>>
>>> We are looking for participants in a Bitcoin related competition: the
>>> aim is to build a trading platform (initially for foreign exchange, other
>>> assets will follow) which lets participants settle their trades through the
>>> blockchain via coloured coins. To facilitate a quicker trade
>>> reconciliation, the use of a sidechain is a suggestion but by no means a
>>> requirement. There will be an online briefing event today where we will
>>> outline the requirements in more detail, though much of it we have posted
>>> on our website www.lykkex.com .
>>>
>>> As we want this to be a community driven effort rather than something
>>> turning into a proprietary technology, all contributions will be made
>>> available under a MIT license on Github.
>>>
>>> I look forward to answering your questions at the online briefing event
>>> or over email,
>>>
>>> Thank you and kind regards,
>>> Richard Olsen
>>>
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>


-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/3a3d121a/attachment-0001.html>

From odinn.cyberguerrilla at riseup.net  Thu Oct  1 04:38:50 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Thu, 01 Oct 2015 04:38:50 +0000
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
References: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
Message-ID: <560CB8DA.6060801@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Grosses me out that you have enforced KYC as part of what you are
doing for anyone who would decide to get involved:

https://wiki.lykkex.com/?id=start#lykke_citizens

Good luck with that, I'm sure not going to be a part of it, and I
recommend that no-one else does either.

- - O

Richard Olsen via bitcoin-dev:
> All,
> 
> We are looking for participants in a Bitcoin related competition:
> the aim is to build a trading platform (initially for foreign
> exchange, other assets will follow) which lets participants settle
> their trades through the blockchain via coloured coins. To
> facilitate a quicker trade reconciliation, the use of a sidechain
> is a suggestion but by no means a requirement. There will be an
> online briefing event today where we will outline the requirements
> in more detail, though much of it we have posted on our website
> www.lykkex.com .
> 
> As we want this to be a community driven effort rather than
> something turning into a proprietary technology, all contributions
> will be made available under a MIT license on Github.
> 
> I look forward to answering your questions at the online briefing
> event or over email,
> 
> Thank you and kind regards, Richard Olsen
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWDLjaAAoJEGxwq/inSG8CkQAH/i6603ivtZXjNw5ZlH1W2p7z
c88sb5CcTuTUi+zEx6Q0MRUFfdYcrcBrGsua3CKU9226rpL4acD2Bby5kUPZ1h2/
Rl5EiZa11oeqZaZaO5ZmXZ33BOaO2gxqqYEF1zBOzDgky6cqRrj8t4VAj5CKsxsP
ktM98UqVXdcuOfBP7y/xqX1Yw9e55PpwUCtaazLo8UkPLMrtdzrbKVZBtjqGxMnG
ZxmYku8g6xdmZAMz9xn9oVGtuMHrEjhIVycz3FMHBjoZNLE9yK4YeWyEvLI4YPFt
KBR7HvGDava3dzMM5ugw3hgFShfegjrIunWQ/vC9RCjBMLVGVX5RgEblgQe29eY=
=41DC
-----END PGP SIGNATURE-----

From laanwj at gmail.com  Thu Oct  1 08:50:59 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Thu, 1 Oct 2015 10:50:59 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
In-Reply-To: <201509301757.44035.luke@dashjr.org>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
Message-ID: <20151001085058.GA10010@amethyst.visucore.com>

On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:
> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via 
> bitcoin-dev wrote:
> > 2015-12-01
> > -----------
> > - Feature freeze
> 
> Where is "Consensus freeze"? Shouldn't this be put off until after the HK 
> workshop in case a hardfork is decided on? Or have we de-coupled it from the 
> release process entirely anyway (since old versions need an update for it 
> too)?

In principle, "feature freeze" means that any large code changes will no longer go into 0.12, unless fixing critical bugs. 

I'm not keen on postponing 0.12 for such reasons - after the HK workshop I'm sure that it will take some development/testing/review before code makes it into anything. Apart from that there's a good point to decouple consensus changes from Bitcoin Core major releases.

We've seen lot of release date drift due to "this and this change needs to make it in" in the past, that was a major reason to switch to a time-based instead of feature-based release schedule.

We can always do a 0.12.1.

Wladimir

From marcel at jamin.net  Thu Oct  1 09:05:59 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Thu, 1 Oct 2015 11:05:59 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
In-Reply-To: <20151001085058.GA10010@amethyst.visucore.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
Message-ID: <CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>

Any particular reason bitcoin versioning doesn't follow the SemVer spec?

2015-10-01 10:50 GMT+02:00 Wladimir J. van der Laan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org>:

> On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:
> > On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via
> > bitcoin-dev wrote:
> > > 2015-12-01
> > > -----------
> > > - Feature freeze
> >
> > Where is "Consensus freeze"? Shouldn't this be put off until after the HK
> > workshop in case a hardfork is decided on? Or have we de-coupled it from
> the
> > release process entirely anyway (since old versions need an update for it
> > too)?
>
> In principle, "feature freeze" means that any large code changes will no
> longer go into 0.12, unless fixing critical bugs.
>
> I'm not keen on postponing 0.12 for such reasons - after the HK workshop
> I'm sure that it will take some development/testing/review before code
> makes it into anything. Apart from that there's a good point to decouple
> consensus changes from Bitcoin Core major releases.
>
> We've seen lot of release date drift due to "this and this change needs to
> make it in" in the past, that was a major reason to switch to a time-based
> instead of feature-based release schedule.
>
> We can always do a 0.12.1.
>
> Wladimir
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/5dca9e61/attachment.html>

From btcdrak at gmail.com  Thu Oct  1 09:17:52 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 1 Oct 2015 10:17:52 +0100
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
In-Reply-To: <CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
Message-ID: <CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg@mail.gmail.com>

On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Any particular reason bitcoin versioning doesn't follow the SemVer spec?
>

We do: a.b.c, the next major version is, 0.12.0, and maintenance releases
are 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/dc91562f/attachment.html>

From marcel at jamin.net  Thu Oct  1 09:41:25 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Thu, 1 Oct 2015 11:41:25 +0200
Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
In-Reply-To: <CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
	<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg@mail.gmail.com>
	<CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
Message-ID: <CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>

---------- Forwarded message ----------
From: Marcel Jamin <marcel at jamin.net>
Date: 2015-10-01 11:39 GMT+02:00
Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
To: Btc Drak <btcdrak at gmail.com>


I guess the question then becomes why bitcoin still is <1.0.0

I'd say it's safe to say that it's used in production.

2015-10-01 11:17 GMT+02:00 Btc Drak <btcdrak at gmail.com>:

> On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Any particular reason bitcoin versioning doesn't follow the SemVer spec?
>>
>
> We do: a.b.c, the next major version is, 0.12.0, and maintenance releases
> are 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/17164b7e/attachment.html>

From laanwj at gmail.com  Thu Oct  1 09:56:55 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Thu, 1 Oct 2015 11:56:55 +0200
Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
In-Reply-To: <CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
	<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg@mail.gmail.com>
	<CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
	<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
Message-ID: <20151001095654.GB10010@amethyst.visucore.com>

On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:
> I guess the question then becomes why bitcoin still is <1.0.0

I'll interpret the question as "why is the Bitcoin Core software still <1.0.0". Bitcoin the currency doesn't have a version, the block/transaction versions are at v3/v1 respectively, and the highest network protocol version is 70011. 

Mostly because we don't use the numbers as a signaling mechanism. They just count up, every half year.

Otherwise, one'd have to ask hard questions like 'is the software mature enough to be called 1.0.0', which would lead to long arguments, all of which would eventually lead to nothing more than potentially increasing a number. We're horribly stressed-out as is.

Wladimir

From marcel at jamin.net  Thu Oct  1 10:10:45 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Thu, 1 Oct 2015 12:10:45 +0200
Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
In-Reply-To: <20151001095654.GB10010@amethyst.visucore.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
	<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg@mail.gmail.com>
	<CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
	<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
	<20151001095654.GB10010@amethyst.visucore.com>
Message-ID: <CAAUq486EXSJ1ri-3nWMt9vWhoajLp+LkWTV_-ZvU_FE+qfqcpA@mail.gmail.com>

> Mostly because we don't use the numbers as a signaling mechanism. They
just count up, every half year.

OK, but then it's not semantic versioning (as btcdrak claims).

> Otherwise, one'd have to ask hard questions like 'is the software mature
enough to be called 1.0.0'

I think the question has already been answered for you by the companies
that build on top of it, the investments being made and the $3.5 billion
market cap. The 1.0.0 tag is probably long overdue.

Then you could start using the version as a signaling mechanism.

> We're horribly stressed-out as is.

Yeah, probably not a very important topic right now.



2015-10-01 11:56 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:

> On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:
> > I guess the question then becomes why bitcoin still is <1.0.0
>
> I'll interpret the question as "why is the Bitcoin Core software still
> <1.0.0". Bitcoin the currency doesn't have a version, the block/transaction
> versions are at v3/v1 respectively, and the highest network protocol
> version is 70011.
>
> Mostly because we don't use the numbers as a signaling mechanism. They
> just count up, every half year.
>
> Otherwise, one'd have to ask hard questions like 'is the software mature
> enough to be called 1.0.0', which would lead to long arguments, all of
> which would eventually lead to nothing more than potentially increasing a
> number. We're horribly stressed-out as is.
>
> Wladimir
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/9ae2c230/attachment.html>

From laanwj at gmail.com  Thu Oct  1 10:15:45 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Thu, 1 Oct 2015 12:15:45 +0200
Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
In-Reply-To: <CAAUq486EXSJ1ri-3nWMt9vWhoajLp+LkWTV_-ZvU_FE+qfqcpA@mail.gmail.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
	<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg@mail.gmail.com>
	<CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
	<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
	<20151001095654.GB10010@amethyst.visucore.com>
	<CAAUq486EXSJ1ri-3nWMt9vWhoajLp+LkWTV_-ZvU_FE+qfqcpA@mail.gmail.com>
Message-ID: <20151001101544.GA10901@amethyst.visucore.com>

On Thu, Oct 01, 2015 at 12:10:45PM +0200, Marcel Jamin wrote:
> I think the question has already been answered for you by the companies
> that build on top of it, the investments being made and the $3.5 billion
> market cap. The 1.0.0 tag is probably long overdue.

May I remind you that by far, most of that investment is not in the Bitcoin Core software.

It is made to things building on top of the network/protocol, under the assumption that nothing really stupid will happen and the network will not go down etc.

This implies a level of trust in the node software to maintain consensus, but doesn't necessarily mean that all rough corners have been dealt with regarding implementation.

(but this is exactly the kind of argument I'm trying to avoid getting pulled into)

> Then you could start using the version as a signaling mechanism.

We certainly could, it is a decision to not to.

> Yeah, probably not a very important topic right now.

Exactly.

Wladimir
> 
> 
> 
> 2015-10-01 11:56 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:
> 
> > On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:
> > > I guess the question then becomes why bitcoin still is <1.0.0
> >
> > I'll interpret the question as "why is the Bitcoin Core software still
> > <1.0.0". Bitcoin the currency doesn't have a version, the block/transaction
> > versions are at v3/v1 respectively, and the highest network protocol
> > version is 70011.
> >
> > Mostly because we don't use the numbers as a signaling mechanism. They
> > just count up, every half year.
> >
> > Otherwise, one'd have to ask hard questions like 'is the software mature
> > enough to be called 1.0.0', which would lead to long arguments, all of
> > which would eventually lead to nothing more than potentially increasing a
> > number. We're horribly stressed-out as is.
> >
> > Wladimir
> >

From digitsu at gmail.com  Thu Oct  1 10:25:56 2015
From: digitsu at gmail.com (digitsu at gmail.com)
Date: Thu, 01 Oct 2015 03:25:56 -0700 (PDT)
Subject: [bitcoin-dev] bitcoin-dev Digest, Vol 5, Issue 2
In-Reply-To: <mailman.748.1443693419.1627.bitcoin-dev@lists.linuxfoundation.org>
References: <mailman.748.1443693419.1627.bitcoin-dev@lists.linuxfoundation.org>
Message-ID: <1443695156118.ad4bc1ee@Nodemailer>

Because Bitcoin XT is 1.0.0

;-)




---------- Forwarded message ----------

From: Marcel Jamin <marcel at jamin.net>

Date: 2015-10-01 11:39 GMT+02:00

Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule

To: Btc Drak <btcdrak at gmail.com>







I guess the question then becomes why bitcoin still is <1.0.0




I'd say it's safe to say that it's used in production.


















?
Regards,

On Thu, Oct 1, 2015 at 6:57 PM, null
<bitcoin-dev-request at lists.linuxfoundation.org> wrote:

> Send bitcoin-dev mailing list submissions to
> 	bitcoin-dev at lists.linuxfoundation.org
> To subscribe or unsubscribe via the World Wide Web, visit
> 	https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> or, via email, send a message with subject or body 'help' to
> 	bitcoin-dev-request at lists.linuxfoundation.org
> You can reach the person managing the list at
> 	bitcoin-dev-owner at lists.linuxfoundation.org
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of bitcoin-dev digest..."
> Today's Topics:
>    1. Re: Design Competition (odinn)
>    2. Re: Bitcoin Core 0.12.0 release schedule
>       (Wladimir J. van der Laan)
>    3. Re: Bitcoin Core 0.12.0 release schedule (Marcel Jamin)
>    4. Re: Bitcoin Core 0.12.0 release schedule (Btc Drak)
>    5. Fwd:  Bitcoin Core 0.12.0 release schedule (Marcel Jamin)
>    6. Re: Fwd:  Bitcoin Core 0.12.0 release schedule
>       (Wladimir J. van der Laan)
> ----------------------------------------------------------------------
> Message: 1
> Date: Thu, 01 Oct 2015 04:38:50 +0000
> From: odinn <odinn.cyberguerrilla at riseup.net>
> To: Richard Olsen <richard.olsen at lykkex.com>, 	bitcoin-dev
> 	<bitcoin-dev at lists.linuxfoundation.org>
> Subject: Re: [bitcoin-dev] Design Competition
> Message-ID: <560CB8DA.6060801 at riseup.net>
> Content-Type: text/plain; charset=windows-1252
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
> Grosses me out that you have enforced KYC as part of what you are
> doing for anyone who would decide to get involved:
> https://wiki.lykkex.com/?id=start#lykke_citizens
> Good luck with that, I'm sure not going to be a part of it, and I
> recommend that no-one else does either.
> - - O
> Richard Olsen via bitcoin-dev:
>> All,
>> 
>> We are looking for participants in a Bitcoin related competition:
>> the aim is to build a trading platform (initially for foreign
>> exchange, other assets will follow) which lets participants settle
>> their trades through the blockchain via coloured coins. To
>> facilitate a quicker trade reconciliation, the use of a sidechain
>> is a suggestion but by no means a requirement. There will be an
>> online briefing event today where we will outline the requirements
>> in more detail, though much of it we have posted on our website
>> www.lykkex.com .
>> 
>> As we want this to be a community driven effort rather than
>> something turning into a proprietary technology, all contributions
>> will be made available under a MIT license on Github.
>> 
>> I look forward to answering your questions at the online briefing
>> event or over email,
>> 
>> Thank you and kind regards, Richard Olsen
>> 
>> 
>> 
>> _______________________________________________ bitcoin-dev mailing
>> list bitcoin-dev at lists.linuxfoundation.org 
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
> - -- 
> http://abis.io ~
> "a protocol concept to enable decentralization
> and expansion of a giving economy, and a new social good"
> https://keybase.io/odinn
> -----BEGIN PGP SIGNATURE-----
> iQEcBAEBCgAGBQJWDLjaAAoJEGxwq/inSG8CkQAH/i6603ivtZXjNw5ZlH1W2p7z
> c88sb5CcTuTUi+zEx6Q0MRUFfdYcrcBrGsua3CKU9226rpL4acD2Bby5kUPZ1h2/
> Rl5EiZa11oeqZaZaO5ZmXZ33BOaO2gxqqYEF1zBOzDgky6cqRrj8t4VAj5CKsxsP
> ktM98UqVXdcuOfBP7y/xqX1Yw9e55PpwUCtaazLo8UkPLMrtdzrbKVZBtjqGxMnG
> ZxmYku8g6xdmZAMz9xn9oVGtuMHrEjhIVycz3FMHBjoZNLE9yK4YeWyEvLI4YPFt
> KBR7HvGDava3dzMM5ugw3hgFShfegjrIunWQ/vC9RCjBMLVGVX5RgEblgQe29eY=
> =41DC
> -----END PGP SIGNATURE-----
> ------------------------------
> Message: 2
> Date: Thu, 1 Oct 2015 10:50:59 +0200
> From: "Wladimir J. van der Laan" <laanwj at gmail.com>
> To: Luke Dashjr <luke at dashjr.org>
> Cc: Bitcoin development mailing list
> 	<bitcoin-dev at lists.linuxfoundation.org>
> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
> Message-ID: <20151001085058.GA10010 at amethyst.visucore.com>
> Content-Type: text/plain; charset=utf-8
> On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:
>> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via 
>> bitcoin-dev wrote:
>> > 2015-12-01
>> > -----------
>> > - Feature freeze
>> 
>> Where is "Consensus freeze"? Shouldn't this be put off until after the HK 
>> workshop in case a hardfork is decided on? Or have we de-coupled it from the 
>> release process entirely anyway (since old versions need an update for it 
>> too)?
> In principle, "feature freeze" means that any large code changes will no longer go into 0.12, unless fixing critical bugs. 
> I'm not keen on postponing 0.12 for such reasons - after the HK workshop I'm sure that it will take some development/testing/review before code makes it into anything. Apart from that there's a good point to decouple consensus changes from Bitcoin Core major releases.
> We've seen lot of release date drift due to "this and this change needs to make it in" in the past, that was a major reason to switch to a time-based instead of feature-based release schedule.
> We can always do a 0.12.1.
> Wladimir
> ------------------------------
> Message: 3
> Date: Thu, 1 Oct 2015 11:05:59 +0200
> From: Marcel Jamin <marcel at jamin.net>
> To: "Wladimir J. van der Laan" <laanwj at gmail.com>
> Cc: Bitcoin development mailing list
> 	<bitcoin-dev at lists.linuxfoundation.org>
> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
> Message-ID:
> 	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
> Any particular reason bitcoin versioning doesn't follow the SemVer spec?
> 2015-10-01 10:50 GMT+02:00 Wladimir J. van der Laan via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org>:
>> On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:
>> > On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via
>> > bitcoin-dev wrote:
>> > > 2015-12-01
>> > > -----------
>> > > - Feature freeze
>> >
>> > Where is "Consensus freeze"? Shouldn't this be put off until after the HK
>> > workshop in case a hardfork is decided on? Or have we de-coupled it from
>> the
>> > release process entirely anyway (since old versions need an update for it
>> > too)?
>>
>> In principle, "feature freeze" means that any large code changes will no
>> longer go into 0.12, unless fixing critical bugs.
>>
>> I'm not keen on postponing 0.12 for such reasons - after the HK workshop
>> I'm sure that it will take some development/testing/review before code
>> makes it into anything. Apart from that there's a good point to decouple
>> consensus changes from Bitcoin Core major releases.
>>
>> We've seen lot of release date drift due to "this and this change needs to
>> make it in" in the past, that was a major reason to switch to a time-based
>> instead of feature-based release schedule.
>>
>> We can always do a 0.12.1.
>>
>> Wladimir
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/5dca9e61/attachment-0001.html>
> ------------------------------
> Message: 4
> Date: Thu, 1 Oct 2015 10:17:52 +0100
> From: Btc Drak <btcdrak at gmail.com>
> To: Marcel Jamin <marcel at jamin.net>
> Cc: Bitcoin development mailing list
> 	<bitcoin-dev at lists.linuxfoundation.org>
> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
> Message-ID:
> 	<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
> On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Any particular reason bitcoin versioning doesn't follow the SemVer spec?
>>
> We do: a.b.c, the next major version is, 0.12.0, and maintenance releases
> are 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/dc91562f/attachment-0001.html>
> ------------------------------
> Message: 5
> Date: Thu, 1 Oct 2015 11:41:25 +0200
> From: Marcel Jamin <marcel at jamin.net>
> To: Btc Drak <btcdrak at gmail.com>
> Cc: Bitcoin development mailing list
> 	<bitcoin-dev at lists.linuxfoundation.org>
> Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
> Message-ID:
> 	<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
> ---------- Forwarded message ----------
> From: Marcel Jamin <marcel at jamin.net>
> Date: 2015-10-01 11:39 GMT+02:00
> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
> To: Btc Drak <btcdrak at gmail.com>
> I guess the question then becomes why bitcoin still is <1.0.0
> I'd say it's safe to say that it's used in production.
> 2015-10-01 11:17 GMT+02:00 Btc Drak <btcdrak at gmail.com>:
>> On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> Any particular reason bitcoin versioning doesn't follow the SemVer spec?
>>>
>>
>> We do: a.b.c, the next major version is, 0.12.0, and maintenance releases
>> are 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.
>>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/17164b7e/attachment-0001.html>
> ------------------------------
> Message: 6
> Date: Thu, 1 Oct 2015 11:56:55 +0200
> From: "Wladimir J. van der Laan" <laanwj at gmail.com>
> To: Marcel Jamin <marcel at jamin.net>
> Cc: Bitcoin development mailing list
> 	<bitcoin-dev at lists.linuxfoundation.org>
> Subject: Re: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
> Message-ID: <20151001095654.GB10010 at amethyst.visucore.com>
> Content-Type: text/plain; charset=utf-8
> On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:
>> I guess the question then becomes why bitcoin still is <1.0.0
> I'll interpret the question as "why is the Bitcoin Core software still <1.0.0". Bitcoin the currency doesn't have a version, the block/transaction versions are at v3/v1 respectively, and the highest network protocol version is 70011. 
> Mostly because we don't use the numbers as a signaling mechanism. They just count up, every half year.
> Otherwise, one'd have to ask hard questions like 'is the software mature enough to be called 1.0.0', which would lead to long arguments, all of which would eventually lead to nothing more than potentially increasing a number. We're horribly stressed-out as is.
> Wladimir
> ------------------------------
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> End of bitcoin-dev Digest, Vol 5, Issue 2
> *****************************************
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/0656d173/attachment-0001.html>

From marcel at jamin.net  Thu Oct  1 10:34:38 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Thu, 1 Oct 2015 12:34:38 +0200
Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
In-Reply-To: <20151001101544.GA10901@amethyst.visucore.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
	<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg@mail.gmail.com>
	<CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
	<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
	<20151001095654.GB10010@amethyst.visucore.com>
	<CAAUq486EXSJ1ri-3nWMt9vWhoajLp+LkWTV_-ZvU_FE+qfqcpA@mail.gmail.com>
	<20151001101544.GA10901@amethyst.visucore.com>
Message-ID: <CAAUq487e96agsBmHSThfLQyU+sMSiCwxPEdtZU1_xbsqVWyvrw@mail.gmail.com>

2015-10-01 12:15 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:

> On Thu, Oct 01, 2015 at 12:10:45PM +0200, Marcel Jamin wrote:
> > I think the question has already been answered for you by the companies
> > that build on top of it, the investments being made and the $3.5 billion
> > market cap. The 1.0.0 tag is probably long overdue.
>
> May I remind you that by far, most of that investment is not in the
> Bitcoin Core software.
>

As I understand it, right now the bitcoin protocol is defined by the
bitcoin core implementation. Or is there anything else to point to? So I'd
say my point still stands.

Other implementations copy what bitcoin core does.


> > Then you could start using the version as a signaling mechanism.
>
> We certainly could, it is a decision to not to.
>

Simply because of the "1.0.0" issue or for other reasons as well?



> 2015-10-01 11:56 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:
> >
> > > On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:
> > > > I guess the question then becomes why bitcoin still is <1.0.0
> > >
> > > I'll interpret the question as "why is the Bitcoin Core software still
> > > <1.0.0". Bitcoin the currency doesn't have a version, the
> block/transaction
> > > versions are at v3/v1 respectively, and the highest network protocol
> > > version is 70011.
> > >
> > > Mostly because we don't use the numbers as a signaling mechanism. They
> > > just count up, every half year.
> > >
> > > Otherwise, one'd have to ask hard questions like 'is the software
> mature
> > > enough to be called 1.0.0', which would lead to long arguments, all of
> > > which would eventually lead to nothing more than potentially
> increasing a
> > > number. We're horribly stressed-out as is.
> > >
> > > Wladimir
> > >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/bb50904f/attachment.html>

From jgarzik at gmail.com  Thu Oct  1 10:37:22 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 1 Oct 2015 06:37:22 -0400
Subject: [bitcoin-dev] Scheduling refactors (was Re: Bitcoin Core 0.12.0
 release schedule)
Message-ID: <CADm_WcayiGr4RO116t3Xo_=s=JqnkBCdr2ox7O0uyD1CTzkRxw@mail.gmail.com>

On Thu, Sep 24, 2015 at 7:25 AM, Wladimir J. van der Laan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> 2015-11-01
> -----------
> - Open Transifex translations for 0.12
> - Soft translation string freeze (no large or unnecessary changes)
> - Finalize and close translation for 0.10
>
> 2015-12-01
> -----------
> - Feature freeze
> - Translation string freez



Proposed:   Schedule a time window for merging big refactors such as
libconsensus - assuming its ready as discussed per current plan - such as
October 25-31 or November 1-7.

(and implicitly, do not merge big refactors into 0.12 outside that window)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/ebfd146e/attachment.html>

From jgarzik at gmail.com  Thu Oct  1 10:50:35 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 1 Oct 2015 06:50:35 -0400
Subject: [bitcoin-dev] Fwd: Bitcoin Core 0.12.0 release schedule
In-Reply-To: <CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
	<20151001085058.GA10010@amethyst.visucore.com>
	<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ@mail.gmail.com>
	<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg@mail.gmail.com>
	<CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
	<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
Message-ID: <CADm_WcY-t+pGFGVeiy1XAKKYJ6ULfa8AmLB_+QCxcPdkp_84bA@mail.gmail.com>

On Thu, Oct 1, 2015 at 5:41 AM, Marcel Jamin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I guess the question then becomes why bitcoin still is <1.0.0
>

I've said the same thing years ago.  Originally the "1.0" was a target for
whenever "client mode" as planned by Satoshi was implemented, making the
Bitcoin Core implementation feature-complete for as a minimum
working/viable project.

Ultimately it is not so important and tends to generate a lot of discussion
 - so maybe we should just do the emacs thing and go from 0.12 to 12.0 for
next version.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/acb987f9/attachment.html>

From tomh at thinlink.com  Thu Oct  1 14:23:39 2015
From: tomh at thinlink.com (Tom Harding)
Date: Thu, 1 Oct 2015 07:23:39 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDrkv3T66=BCBiHYb9h8PY41TFCwpzVR_E7UM0c+QcK-Eg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CABm2gDrkv3T66=BCBiHYb9h8PY41TFCwpzVR_E7UM0c+QcK-Eg@mail.gmail.com>
Message-ID: <560D41EB.7040902@thinlink.com>

On 9/30/2015 10:58 AM, Jorge Tim?n via bitcoin-dev wrote:

> I don't think we need to wait for you to understand the advantages of
> softforks to move forward with BIP65, just like we didn't need to wait
> for every developer and user to understand BIP66 to deploy it.

What a bad example.  BIP66 deployment failed, and was rescued by
centralized intervention.



From contact at taoeffect.com  Thu Oct  1 04:08:21 2015
From: contact at taoeffect.com (Tao Effect)
Date: Wed, 30 Sep 2015 21:08:21 -0700
Subject: [bitcoin-dev] Crossing the line? [Was: Re: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!]
In-Reply-To: <CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
Message-ID: <CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>

Dear list,

Mike has made a variety of false and damaging statements about Bitcoin, of which this is but one:

> On Sep 30, 2015, at 2:01 PM, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> I coined the term SPV so I know exactly what it means, and bitcoinj implements it, as does BreadWallet (the other big SPV implementation).

On his website Vinumeris.com <http://vinumeris.com/> he writes:

> Vinumeris was founded in 2014 by Mike Hearn, one of the developers of the Bitcoin digital currency system.

On plan99.net <http://plan99.net/> there are several embedded videos that refer to him a ?core developer? of Bitcoin. And now it seems he is claiming to be Satoshi.

It seems to me that Mike?s emails, false statements (like the one above about coining SPV), arguments, and his attempts to steal control of Bitcoin via the contentious Bitcoin XT fork, represent actions that have been harming and dividing this community for several years now.

In many communities/tribes, there exists a line that, once crossed, results in the expulsion of a member from the community.

So, two questions:

1. Does the Bitcoin-devs mailing list have such a line?
2. If so, does the community feel that Mike Hearn has crossed it? (I personally feel he has. Multiple times.)

Thanks for your thoughts,
Greg Slepak

--
Please do not email me anything that you are not comfortable also sharing with the NSA.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9fabbbf7/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9fabbbf7/attachment-0001.sig>

From jgarzik at gmail.com  Thu Oct  1 16:39:39 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 1 Oct 2015 12:39:39 -0400
Subject: [bitcoin-dev] Crossing the line? [Was: Re: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!]
In-Reply-To: <CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
	<CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>
Message-ID: <CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>

To reduce the list noise level, drama level and promote inclusion, my own
personal preference (list admin hat: off, community member hat: on) is for
temporal bans based on temporal circumstances.  Default to
pro-forgiveness.  Also, focus on disruption of the list as a metric, rather
than focusing on a specific personality.

I do think we're at a bit of a point where we're going around in circles.

Given the current reddit hubbub, a bit of a cooling off period is IMO
advisable before taking any further action.



On Thu, Oct 1, 2015 at 12:08 AM, Tao Effect via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Dear list,
>
> Mike has made a variety of false and damaging statements about Bitcoin, of
> which this is but one:
>
> On Sep 30, 2015, at 2:01 PM, Mike Hearn via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> I coined the term SPV so I know exactly what it means, and bitcoinj
> implements it, as does BreadWallet (the other big SPV implementation).
>
>
> On his website Vinumeris.com he writes:
>
> Vinumeris was founded in 2014 by Mike Hearn, one of the developers of the
> Bitcoin digital currency system.
>
>
> On plan99.net there are several embedded videos that refer to him a ?core
> developer? of Bitcoin. And now it seems he is claiming to be Satoshi.
>
> It seems to me that Mike?s emails, false statements (like the one above
> about coining SPV), arguments, and his attempts to steal control of Bitcoin
> via the contentious Bitcoin XT fork, represent actions that have been
> harming and dividing this community for several years now.
>
> In many communities/tribes, there exists a line that, once crossed,
> results in the expulsion of a member from the community.
>
> So, two questions:
>
> 1. Does the Bitcoin-devs mailing list have such a line?
> 2. If so, does the community feel that Mike Hearn has crossed it? (I
> personally feel he has. Multiple times.)
>
> Thanks for your thoughts,
> Greg Slepak
>
> --
> Please do not email me anything that you are not comfortable also sharing with
> the NSA.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/837d4131/attachment.html>

From milly at bitcoins.info  Thu Oct  1 20:17:55 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Thu, 1 Oct 2015 16:17:55 -0400
Subject: [bitcoin-dev] Crossing the line? [Was: Re: Let's deploy BIP65
 CHECKLOCKTIMEVERIFY!]
In-Reply-To: <CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
	<CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>
	<CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>
Message-ID: <560D94F3.1080201@bitcoins.info>

> Given the current reddit hubbub, a bit of a cooling off period is IMO
> advisable before taking any further action.
>
>     2. If so, does the community feel that Mike Hearn has crossed it? (I
>     personally feel he has. Multiple times.)
>

I don't believe any posting by Mr. Hearn warrants any actions by some 
undefined community.  Since I disagree with TaoEffect.com (aka "PRIVATE 
REGISTRANT") he has no consensus.  lol


Russ



From luke at dashjr.org  Thu Oct  1 20:20:22 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 1 Oct 2015 20:20:22 +0000
Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule
In-Reply-To: <CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<CAAUq484+g89yD+s7iR_mGWPM3TTN7V6-EPb1ig=P1BKfcbztPg@mail.gmail.com>
	<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg@mail.gmail.com>
Message-ID: <201510012020.23821.luke@dashjr.org>

On Thursday, October 01, 2015 9:41:25 AM Marcel Jamin via bitcoin-dev wrote:
> I guess the question then becomes why bitcoin still is <1.0.0
> 
> I'd say it's safe to say that it's used in production.

But it's not *ready* to be used in production. :(

For 1.0, I would expect:

libbitcoinconsensus: an API that makes implementing a full node practical.

Bitcoin Core GUI: reasonably usable safely by non-technical people.

Bitcoin Core Daemon: a reasonably safe wallet (currently blocked by backup-
resistant accounting system)

Luke

From rusty at rustcorp.com.au  Fri Oct  2 01:22:14 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 02 Oct 2015 10:52:14 +0930
Subject: [bitcoin-dev] Versionbits BIP (009) minor revision proposal.
In-Reply-To: <87bncjph6c.fsf@rustcorp.com.au>
References: <87zj04fxkw.fsf@rustcorp.com.au>
	<CAAS2fgTXP0j6K3sxp=HL9j2-xvO8y_VnpG+iZw9kaxmnxZQjSw@mail.gmail.com>
	<87bncjph6c.fsf@rustcorp.com.au>
Message-ID: <87d1wynjy1.fsf@rustcorp.com.au>

Rusty Russell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> Gregory Maxwell <gmaxwell at gmail.com> writes:
>> I can, however, argue it the other way (and probably have in the
>> past):  The bit is easily checked by thin clients, so thin clients
>> could use it to reject potentially ill-fated blocks from non-upgraded
>> miners post switch (which otherwise they couldn't reject without
>> inspecting the whole thing). This is an improvement over not forcing
>> the bit, and it's why I was previously in favor of the way the
>> versions were enforced.  But, experience has played out other ways,
>> and thin clients have not done anything useful with the version
>> numbers.
>>
>> A middle ground might be to require setting the bit for a period of
>> time after rule enforcing begins, but don't enforce the bit, just
>> enforce validity of the block under new rules.  Thus a thin client
>> could treat these blocks with increased skepticism.
>
> Introducing this later would trigger warnings on older clients, who
> would consider the bit to represent a new soft fork :(

Actually, this isn't a decisive argument, since we can use the current
mechanism to upgrade versionbits, or as Eric says, tack it on to
an existing soft fork.

So, I think I'm back where I started.  We leave this for now.

There was no nak on the "keep setting bit until activation" proposal, so
I'm opening a PullReq for that now:

	https://github.com/bitcoin/bips/pull/209

Cheers,
Rusty.

From not.mike.hearn at gmail.com  Fri Oct  2 01:57:38 2015
From: not.mike.hearn at gmail.com (NotMike Hearn)
Date: Thu, 1 Oct 2015 21:57:38 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
Message-ID: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>

On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> There is no consensus on using a soft fork to deploy this feature. It will
> result in the same problems as all the other soft forks - SPV wallets will
> become less reliable during the rollout period. I am against that, as it's
> entirely avoidable.
>
> Make it a hard fork and my objection will be dropped.
>
> Until then, as there is no consensus, you need to do one of two things:
>
> 1) Drop the "everyone must agree to make changes" idea that people here
like
> to peddle, and do it loudly, so everyone in the community is correctly
> informed
>
> 2) Do nothing
>
>

I agree with Mike Hearn that there is no consensus on using a soft fork to
deploy this feature. Either everyone agrees that we should all agree on
consensus or else there is arbitrary disagreement. You cannot have it both
ways.

It is very important that we reach consensus on consensus or, if you will,
meta0consensus. I think we should Do nothing as that is clearly the choice
that we have taken re: blocksize. If we use one set of rules for that
decision we should use the same set of rules for all decisions and there is
no middle ground.

Thank you.

>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/4afdfa1b/attachment.html>

From slashdevnull at hotmail.com  Fri Oct  2 02:12:58 2015
From: slashdevnull at hotmail.com (GC)
Date: Fri, 2 Oct 2015 10:12:58 +0800
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
Message-ID: <BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>

Or, you know, enter some discussions on what exactly are the issues that SPV
clients face during soft forks and see if anything can be done (on all
sides) to mitigate the risks.

Crazy stuff, I know ? ;-)

From:  NotMike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
Reply-To:  NotMike Hearn <not.mike.hearn at gmail.com>
Date:  Friday, 2 October 2015 9:57 am
To:  <bitcoin-dev at lists.linuxfoundation.org>
Subject:  Re: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!

On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> There is no consensus on using a soft fork to deploy this feature. It will
> result in the same problems as all the other soft forks - SPV wallets will
> become less reliable during the rollout period. I am against that, as it's
> entirely avoidable.
>
> Make it a hard fork and my objection will be dropped.
>
> Until then, as there is no consensus, you need to do one of two things:
>
> 1) Drop the "everyone must agree to make changes" idea that people here like
> to peddle, and do it loudly, so everyone in the community is correctly
> informed
>
> 2) Do nothing
>
>

I agree with Mike Hearn that there is no consensus on using a soft fork to
deploy this feature. Either everyone agrees that we should all agree on
consensus or else there is arbitrary disagreement. You cannot have it both
ways.

It is very important that we reach consensus on consensus or, if you will,
meta0consensus. I think we should Do nothing as that is clearly the choice
that we have taken re: blocksize. If we use one set of rules for that
decision we should use the same set of rules for all decisions and there is
no middle ground.

Thank you.

>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

_______________________________________________ bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/f95134ba/attachment-0001.html>

From daniele.pinna at gmail.com  Fri Oct  2 08:02:43 2015
From: daniele.pinna at gmail.com (Daniele Pinna)
Date: Fri, 2 Oct 2015 10:02:43 +0200
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
Message-ID: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>

The following paper proposing an asymmetric memory-hard PoW had been
recently published:

http://eprint.iacr.org/2015/946.pdf

My intent is not to promote the paper as I have not finished studying it
myself. I am however interested in the dev-list's stance on potentially
altering the bitcoin PoW protocol should an algorithm that guarantees
protection from ASIC/FPGA optimization be found.

I assume that, given the large amount of money invested by some miners into
their industrial farms this would represent a VERY contentious hard fork.

It is, however, also true that a novel optimization-resistant algorithm
could greatly ameliorate decentralization in the bitcoin network due to a
resurgence of desktop/cellphone mining.

Where do the core devs stand on this matter, hypothetical as it may be?

Dpinna
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/1f3c81ea/attachment.html>

From dstadulis at gmail.com  Fri Oct  2 08:06:22 2015
From: dstadulis at gmail.com (Daniel Stadulis)
Date: Fri, 2 Oct 2015 01:06:22 -0700
Subject: [bitcoin-dev] 2015-10-01 #bitcoin-dev Weekly Development Meeting
	Minutes
Message-ID: <CAHpxFbGy5T4ONV8qJeUoQeSK0b9iz34xK8+vRXMOLoYsvXLZBA@mail.gmail.com>

Meeting Title:
#bitcoin-dev Weekly Development Meeting
Meeting Date:
2015-10-01
Meeting Time:
19:00-20:00 UTC
Participants in Attendance:
dstadulis
wumpus
morcos
gmaxwell
btcdrak
jonasshnelli
maaku
sdaftuar
sipa
BlueMatt
CodeShark
Luke-Jr
bsm117532
jgarzik
IRC Chat Logs:
http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/01#l1443726030.0

----------------------------
Topics Discussed:

1.) Mempool limiting
2.) BIP68 + CHECKSEQUENCEVERIFY
3.) CLTV soft fork deployment
4.) libconsensus merge time window
4.1) Agreement there should be a merge window for move-only changes
4.2)jtimon will document higher-level rationales for moves, so people can
first agree on what should move where

----------------------------
2015-10-01 Meeting Conclusions:

#
Action items
Responsible Parties
Due Date/ETA

1
Mempool limiting:
BlueMatt: to finish 6722 code.
Others:Try attacking 6722, 6557, and 6673 to see edge-case behavior
BlueMatt et al
Undetermined due date

2
morcos email dev list with chain-limit proposal, sdaftuar will review
proposal before list is emailed
morcos & sdaftuar
Undetermined due date

3
CLTV backport PRs #6706 and #6707 (backport 0.10 and 0.11 respectively)
need review ASAP
All
ASAP

4
Need reviews/ACKs of
BIP68 #6312,
BIP112 CSV #6564,
BIP113 #6566
All
By 2015-10-08

5
Document higher-level rationales for libconsensus moves, so people can
first agree on what should move where
jtimon
Undetermined due date
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/cb02ea18/attachment.html>

From jtimon at jtimon.cc  Fri Oct  2 08:20:55 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 2 Oct 2015 10:20:55 +0200
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
Message-ID: <CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>

On Oct 2, 2015 10:03 AM, "Daniele Pinna via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> should an algorithm that guarantees protection from ASIC/FPGA
optimization be found.

This is demonstrably impossible: anything that can be done with software
can be done with hardware. This is computer science 101.
And specialized hardware can always be more efficient, at least
energy-wise.

On the other hand, BIP99 explicitly contemplates "anti-miner hardforks"
(obviously not for so called "ASIC-resistance" [an absurd term coined to
promote some altcoins], but just for restarting the ASIC and mining market
in case mining becomes too centralized).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/293c31ea/attachment.html>

From adam at cypherspace.org  Fri Oct  2 08:30:57 2015
From: adam at cypherspace.org (Adam Back)
Date: Fri, 2 Oct 2015 10:30:57 +0200
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
Message-ID: <CALqxMTEeLBg-dN9nM7inh33_3bHXZ15a8n-pShQtLzQ2MFCA4w@mail.gmail.com>

See also https://www.reddit.com/r/Bitcoin/comments/3n5nws/research_paper_asymmetric_proofofwork_based_on/cvl922x

Adam

On 2 October 2015 at 10:20, Jorge Tim?n
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> On Oct 2, 2015 10:03 AM, "Daniele Pinna via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> should an algorithm that guarantees protection from ASIC/FPGA optimization
>> be found.
>
> This is demonstrably impossible: anything that can be done with software can
> be done with hardware. This is computer science 101.
> And specialized hardware can always be more efficient, at least energy-wise.
>
> On the other hand, BIP99 explicitly contemplates "anti-miner hardforks"
> (obviously not for so called "ASIC-resistance" [an absurd term coined to
> promote some altcoins], but just for restarting the ASIC and mining market
> in case mining becomes too centralized).
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From daniele.pinna at gmail.com  Fri Oct  2 08:30:40 2015
From: daniele.pinna at gmail.com (Daniele Pinna)
Date: Fri, 2 Oct 2015 10:30:40 +0200
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CALqxMTH6r8eJN2Xw+nn1z=6x9Q3TRSQQ6ZMXsmHPyX8dNx+EgA@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CALqxMTH6r8eJN2Xw+nn1z=6x9Q3TRSQQ6ZMXsmHPyX8dNx+EgA@mail.gmail.com>
Message-ID: <CAEgR2PFCLKSDveHQ1xZX0zSdT6_C=ee0-JCQ3REARhCLU6nCYg@mail.gmail.com>

The recently published paper I referenced cite's the Cuckoo cycle
algorithm, discusses its limitations and explains how their proposed
algorithm greatly improves on it. Again.... you're probably in a WAYYY
better position to judge this than I am. My question was purely
hypothetical as I wanted to know where the core devs stand on flipping the
mining ecosystem upside down.

Thanks for your link though, I'll read it right now (before finishing the
research article i posted :) ).

Daniele

Daniele Pinna, Ph.D

On Fri, Oct 2, 2015 at 10:14 AM, Adam Back <adam at cypherspace.org> wrote:

> There are papers demonstrating this "protection from ASIC/FPGA
> optimization" to be basically impossible
> https://download.wpsoftware.net/bitcoin/asic-faq.pdf and yet people
> keep trying...
>
> See also John Tromps cuckoo cycle paper, seems close to the best you
> could expect from memory hard.
>
> Adam
>
> On 2 October 2015 at 10:02, Daniele Pinna via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > The following paper proposing an asymmetric memory-hard PoW had been
> > recently published:
> >
> > http://eprint.iacr.org/2015/946.pdf
> >
> > My intent is not to promote the paper as I have not finished studying it
> > myself. I am however interested in the dev-list's stance on potentially
> > altering the bitcoin PoW protocol should an algorithm that guarantees
> > protection from ASIC/FPGA optimization be found.
> >
> > I assume that, given the large amount of money invested by some miners
> into
> > their industrial farms this would represent a VERY contentious hard fork.
> >
> > It is, however, also true that a novel optimization-resistant algorithm
> > could greatly ameliorate decentralization in the bitcoin network due to a
> > resurgence of desktop/cellphone mining.
> >
> > Where do the core devs stand on this matter, hypothetical as it may be?
> >
> > Dpinna
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/0ca300a8/attachment-0001.html>

From daniele.pinna at gmail.com  Fri Oct  2 08:31:34 2015
From: daniele.pinna at gmail.com (Daniele Pinna)
Date: Fri, 2 Oct 2015 10:31:34 +0200
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
Message-ID: <CAEgR2PFwmeWQFCVX-Na9Lf4S1zoLAE57cDGteiyaYQ-GLjssqg@mail.gmail.com>

Interesting! I didn't notice BIP 99's anti-miner hardfork proposal....
thanks for pointing it out to me.

Dpinna

Daniele Pinna, Ph.D

On Fri, Oct 2, 2015 at 10:20 AM, Jorge Tim?n <jtimon at jtimon.cc> wrote:

>
> On Oct 2, 2015 10:03 AM, "Daniele Pinna via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > should an algorithm that guarantees protection from ASIC/FPGA
> optimization be found.
>
> This is demonstrably impossible: anything that can be done with software
> can be done with hardware. This is computer science 101.
> And specialized hardware can always be more efficient, at least
> energy-wise.
>
> On the other hand, BIP99 explicitly contemplates "anti-miner hardforks"
> (obviously not for so called "ASIC-resistance" [an absurd term coined to
> promote some altcoins], but just for restarting the ASIC and mining market
> in case mining becomes too centralized).
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/af19280a/attachment.html>

From nxtchg at hush.com  Fri Oct  2 10:46:30 2015
From: nxtchg at hush.com (NxtChg)
Date: Fri, 02 Oct 2015 13:46:30 +0300
Subject: [bitcoin-dev]
	=?utf-8?q?Dev-list=27s_stance_on_potentially_alteri?=
	=?utf-8?q?ng_the_PoW=09algorithm?=
In-Reply-To: <CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
Message-ID: <20151002104630.5F7A720101@smtp.hushmail.com>


>...obviously not for so called "ASIC-resistance" [an absurd term coined to promote some altcoins]

Yet another fallacy of "all-or-nothing" thinking, which is so abundant in the Core camp.

The fact that you can build ASIC for any kind of algorithm _in_theory_ doesn't mean you can't make it _arbitrary_hard_ in practice.

So I would tone down the arrogance a bit.


From jtimon at jtimon.cc  Fri Oct  2 11:00:57 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 2 Oct 2015 13:00:57 +0200
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <20151002104630.5F7A720101@smtp.hushmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
	<20151002104630.5F7A720101@smtp.hushmail.com>
Message-ID: <CABm2gDrp1SJqRKg5+cgw03BJn84oROQya05pofU4fawRT3UGkQ@mail.gmail.com>

On Oct 2, 2015 12:46 PM, "NxtChg" <nxtchg at hush.com> wrote:
>
>
> >...obviously not for so called "ASIC-resistance" [an absurd term coined
to promote some altcoins]
>
> Yet another fallacy of "all-or-nothing" thinking, which is so abundant in
the Core camp.
>
> The fact that you can build ASIC for any kind of algorithm _in_theory_
doesn't mean you can't make it _arbitrary_hard_ in practice.
>
> So I would tone down the arrogance a bit.
>

ASIC-RESISTANCE is simply not possible, I'm sorry if that position strikes
you as arrogant. Note that I didn't say anything about memory-hard, which
is possible (but not necessarily preferrable to
simple-to-implement-in-hardware pow algorithms).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/30ec37fc/attachment.html>

From hearn at vinumeris.com  Fri Oct  2 12:23:17 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Fri, 2 Oct 2015 14:23:17 +0200
Subject: [bitcoin-dev] Crossing the line? [Was: Re: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!]
In-Reply-To: <CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
	<CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>
	<CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>
Message-ID: <CA+w+GKTti0_edCPPPJ6ibZcphfi51MgKdndQy1kyi-0uEXCHRQ@mail.gmail.com>

FWIW the "coining" I am referring to is here:

https://bitcointalk.org/index.php?topic=7972.msg116285#msg116285

OK, with that, here goes. Firstly some terminology. I'm going to call these
things SPV clients for "simplified payment verification". Headers-only is
kind of a mouthful and "lightweight client" is too vague, as there are
several other designs that could be described as lightweight like RPC
frontend and Stefans WebCoin API approach

At that time nobody used the term "SPV wallet" to refer to what apps like
BreadWallet or libraries like bitcoinj do. Satoshi used the term "client
only mode", Jeff was calling them "headers only client" etc. So I said, I'm
going to call them SPV wallets after the section of the whitepaper that
most precisely describes their operation.

On Thu, Oct 1, 2015 at 6:39 PM, Jeff Garzik <jgarzik at gmail.com> wrote:

> To reduce the list noise level, drama level and promote inclusion, my own
> personal preference (list admin hat: off, community member hat: on) is for
> temporal bans based on temporal circumstances.  Default to
> pro-forgiveness.  Also, focus on disruption of the list as a metric, rather
> than focusing on a specific personality.
>
> I do think we're at a bit of a point where we're going around in circles.
>
> Given the current reddit hubbub, a bit of a cooling off period is IMO
> advisable before taking any further action.
>
>
>
> On Thu, Oct 1, 2015 at 12:08 AM, Tao Effect via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Dear list,
>>
>> Mike has made a variety of false and damaging statements about Bitcoin,
>> of which this is but one:
>>
>> On Sep 30, 2015, at 2:01 PM, Mike Hearn via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> I coined the term SPV so I know exactly what it means, and bitcoinj
>> implements it, as does BreadWallet (the other big SPV implementation).
>>
>>
>> On his website Vinumeris.com he writes:
>>
>> Vinumeris was founded in 2014 by Mike Hearn, one of the developers of the
>> Bitcoin digital currency system.
>>
>>
>> On plan99.net there are several embedded videos that refer to him a
>> ?core developer? of Bitcoin. And now it seems he is claiming to be Satoshi.
>>
>> It seems to me that Mike?s emails, false statements (like the one above
>> about coining SPV), arguments, and his attempts to steal control of Bitcoin
>> via the contentious Bitcoin XT fork, represent actions that have been
>> harming and dividing this community for several years now.
>>
>> In many communities/tribes, there exists a line that, once crossed,
>> results in the expulsion of a member from the community.
>>
>> So, two questions:
>>
>> 1. Does the Bitcoin-devs mailing list have such a line?
>> 2. If so, does the community feel that Mike Hearn has crossed it? (I
>> personally feel he has. Multiple times.)
>>
>> Thanks for your thoughts,
>> Greg Slepak
>>
>> --
>> Please do not email me anything that you are not comfortable also sharing with
>> the NSA.
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/00bedf3f/attachment.html>

From jl2012 at xbt.hk  Fri Oct  2 13:14:11 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Fri, 02 Oct 2015 09:14:11 -0400
Subject: [bitcoin-dev]
 =?utf-8?q?Crossing_the_line=3F_=5BWas=3A_Re=3A_Let?=
 =?utf-8?q?=27s_deploy_BIP65_CHECKLOCKTIMEVERIFY!=5D?=
In-Reply-To: <CA+w+GKTti0_edCPPPJ6ibZcphfi51MgKdndQy1kyi-0uEXCHRQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
	<CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>
	<CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>
	<CA+w+GKTti0_edCPPPJ6ibZcphfi51MgKdndQy1kyi-0uEXCHRQ@mail.gmail.com>
Message-ID: <13429f00cbb7f361b4cdf309f0e063b3@xbt.hk>

According to the Oxford Dictionary, "coin" as a verb means "invent (a 
new word or phrase)". Undoubtedly you created the first functional SPV 
client but please retract the claim "I coined the term SPV" or that's 
plagiarism.

And I'd like to highlight the following excerpt from the whitepaper: 
"the simplified method can be fooled by an attacker's fabricated 
transactions for as long as the attacker can continue to overpower the 
network. One strategy to protect against this would be to accept alerts 
from network nodes when they detect an invalid block, prompting the 
user's software to download the full block and alerted transactions to 
confirm the inconsistency."

Header only clients without any fraud detecting mechanism are functional 
but incomplete SPV implementations, according to Sathoshi's original 
definition. This might be good enough for the first generation SPV 
wallet, but eventually SPV clients should be ready to detect any rule 
violation in the blockchain, including things like block size (as 
Satoshi mentioned "invalid block", not just "invalid transaction").

Mike Hearn via bitcoin-dev ? 2015-10-02 08:23 ??:
> FWIW the "coining" I am referring to is here:
> 
> https://bitcointalk.org/index.php?topic=7972.msg116285#msg116285 [4]
> 
> OK, with that, here goes. Firstly some terminology. I'm going to call
> these things SPV clients for "simplified payment verification".
> Headers-only is kind of a mouthful and "lightweight client" is too
> vague, as there are several other designs that could be described as
> lightweight like RPC frontend and Stefans WebCoin API approach
> 
> At that time nobody used the term "SPV wallet" to refer to what apps
> like BreadWallet or libraries like bitcoinj do. Satoshi used the term
> "client only mode", Jeff was calling them "headers only client" etc.
> So I said, I'm going to call them SPV wallets after the section of the
> whitepaper that most precisely describes their operation.


From marcel at jamin.net  Fri Oct  2 14:10:10 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Fri, 2 Oct 2015 16:10:10 +0200
Subject: [bitcoin-dev] Crossing the line? [Was: Re: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!]
In-Reply-To: <13429f00cbb7f361b4cdf309f0e063b3@xbt.hk>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
	<CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>
	<CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>
	<CA+w+GKTti0_edCPPPJ6ibZcphfi51MgKdndQy1kyi-0uEXCHRQ@mail.gmail.com>
	<13429f00cbb7f361b4cdf309f0e063b3@xbt.hk>
Message-ID: <CAAUq4872k8x=N9vvsT2RZ-nKWgW3=OcsJL8OfWeDRe84UB_qiQ@mail.gmail.com>

2015-10-02 15:14 GMT+02:00 jl2012 via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org>:

> According to the Oxford Dictionary, "coin" as a verb means "invent (a new
> word or phrase)". Undoubtedly you created the first functional SPV client
> but please retract the claim "I coined the term SPV" or that's plagiarism.
>
>
Or simply stop pursuing this silly distraction.


> And I'd like to highlight the following excerpt from the whitepaper: "the
> simplified method can be fooled by an attacker's fabricated transactions
> for as long as the attacker can continue to overpower the network. One
> strategy to protect against this would be to accept alerts from network
> nodes when they detect an invalid block, prompting the user's software to
> download the full block and alerted transactions to confirm the
> inconsistency."
>
> Header only clients without any fraud detecting mechanism are functional
> but incomplete SPV implementations, according to Sathoshi's original
> definition. This might be good enough for the first generation SPV wallet,
> but eventually SPV clients should be ready to detect any rule violation in
> the blockchain, including things like block size (as Satoshi mentioned
> "invalid block", not just "invalid transaction").
>
> Mike Hearn via bitcoin-dev ? 2015-10-02 08:23 ??:
>
>> FWIW the "coining" I am referring to is here:
>>
>> https://bitcointalk.org/index.php?topic=7972.msg116285#msg116285 [4]
>>
>> OK, with that, here goes. Firstly some terminology. I'm going to call
>> these things SPV clients for "simplified payment verification".
>> Headers-only is kind of a mouthful and "lightweight client" is too
>> vague, as there are several other designs that could be described as
>> lightweight like RPC frontend and Stefans WebCoin API approach
>>
>> At that time nobody used the term "SPV wallet" to refer to what apps
>> like BreadWallet or libraries like bitcoinj do. Satoshi used the term
>> "client only mode", Jeff was calling them "headers only client" etc.
>> So I said, I'm going to call them SPV wallets after the section of the
>> whitepaper that most precisely describes their operation.
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/d26d51af/attachment.html>

From gmaxwell at gmail.com  Fri Oct  2 16:37:07 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 2 Oct 2015 16:37:07 +0000
Subject: [bitcoin-dev] Crossing the line? [Was: Re: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!]
In-Reply-To: <CA+w+GKTti0_edCPPPJ6ibZcphfi51MgKdndQy1kyi-0uEXCHRQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
	<CECF25CD-6DF0-412F-9FF4-5AE3249C0A39@taoeffect.com>
	<CADm_WcaKQLTtuOxcvby0VFnhY-qEfC4WChNF+TtEr2yLJr_w-g@mail.gmail.com>
	<CA+w+GKTti0_edCPPPJ6ibZcphfi51MgKdndQy1kyi-0uEXCHRQ@mail.gmail.com>
Message-ID: <CAAS2fgSe3AW-5g4dJTffd1AieUNwNRH7kTrE4c+ejddssC2V1A@mail.gmail.com>

On Fri, Oct 2, 2015 at 12:23 PM, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> At that time nobody used the term "SPV wallet" to refer to what apps like
> BreadWallet or libraries like bitcoinj do. Satoshi used the term "client
> only mode", Jeff was calling them "headers only client" etc. So I said, I'm
> going to call them SPV wallets after the section of the whitepaper that most
> precisely describes their operation.

https://bitcointalk.org/index.php?topic=125.msg1149#msg1149  (a full
year before your post, as someone else had already responded to you on
Reddit; client mode was just what implementation inside Bitcoin was
called)

But this is silly. The only point I was making was that when you were
referring to the limitations of BitcoinJ which would not generalize to
not state it as a property of SPV I think it is preferable to make
that decision,especially when it would not generalize to ones that
implemented everything described in section 8, or even just more
complete checks on the data they were already receiving. Who coined
the tern is irrelevant to that (although you indisputably did not use
even the abbreviation before others). Jtimon's later post on the
misuse of fallacious arguments should have been enough that I
shouldn't have to spell this out.

From peter_r at gmx.com  Fri Oct  2 16:38:26 2015
From: peter_r at gmx.com (Peter R)
Date: Fri, 2 Oct 2015 09:38:26 -0700
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CABm2gDrOt2m6xfYjtVJne6Cm2nawXtA2-a4y7kaEA1fEgkUUUA@mail.gmail.com>
Message-ID: <EA4673B8-C895-40F8-A71D-4BD5045A57D8@gmx.com>

> On Oct 2, 2015, at 1:20 AM, Jorge Tim?n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Oct 2, 2015 10:03 AM, "Daniele Pinna via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> > should an algorithm that guarantees protection from ASIC/FPGA optimization be found.
> This is demonstrably impossible: anything that can be done with software can be done with hardware. This is computer science 101.  And specialized hardware can always be more efficient, at least energy-wise.
> 
I encourage Alex and Dmitry to consider submitting their paper to Ledger, where it will be reviewed objectively and with an open mind.  The authors have motivated their work, framed it in its scholarly context, and made explicit the contributions their paper makes.  Their manuscript, "Asymmetric proof-of-work based on the Generalized Birthday problem," clearly represents a great deal of work by the authors and I commend them for their efforts.  

In the link Adam Back provided, Greg Maxwell mentioned that ?it is far from clear that 'memory hardness' is actually a useful goal.?  I agree with this statement; however, regardless of whether memory hardness turns out to be a useful goal in regards to cryptocurrency or not, a paper analyzing memory-hard proof-of-work schemes is certainly useful in helping us to figure that out. 

Best regards,
Peter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/7b817d44/attachment.html>

From gmaxwell at gmail.com  Fri Oct  2 16:45:45 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 2 Oct 2015 16:45:45 +0000
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CAEgR2PFCLKSDveHQ1xZX0zSdT6_C=ee0-JCQ3REARhCLU6nCYg@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CALqxMTH6r8eJN2Xw+nn1z=6x9Q3TRSQQ6ZMXsmHPyX8dNx+EgA@mail.gmail.com>
	<CAEgR2PFCLKSDveHQ1xZX0zSdT6_C=ee0-JCQ3REARhCLU6nCYg@mail.gmail.com>
Message-ID: <CAAS2fgTSjnjk60_c0nc4UYYV-w3ZonO_6HuLW+k-SVPyCSc-jQ@mail.gmail.com>

On Fri, Oct 2, 2015 at 8:30 AM, Daniele Pinna via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> The recently published paper I referenced cite's the Cuckoo cycle algorithm,
> discusses its limitations and explains how their proposed algorithm greatly
> improves on it.

They discuss a very old version of the Cuckoo cycle paper, and I
believe none of their analysis is applicable to the most recent
revision. :(

In any case, I commented more about functions of this class here:
https://www.reddit.com/r/Bitcoin/comments/3n5nws/research_paper_asymmetric_proofofwork_based_on/cvl922x

I don't believe changing the POW function is impossible in principle,
but I expect it would only happen due to problems with the composition
of current hash-power and not even if it were universally agreed that
some other construction were technically better (though that is a high
bar.)

From whit at whitjack.me  Fri Oct  2 19:03:05 2015
From: whit at whitjack.me (Whit Jack)
Date: Fri, 2 Oct 2015 12:03:05 -0700
Subject: [bitcoin-dev] BIP Proposal:
Message-ID: <A05E6A18-C93F-4878-9D94-D6A53FBA512E@whitjack.me>

/* I do not want to make anyone angry, this is sarcasm, if you are not interested, please stop here */

I would like to propose a block size algorithm based off the use of extra unneeded, unwanted data.  I?m looking to see if anyone would be able to help me find potential flaws.

==Abstract==

This BIP proposes replacing the current static blocksize with a 2-part blocksize algorithm to decide on the blocksize balancing power between the miners and users.  I propose an easy to implement solution for reaching consensus based on a number of factors (or variables as you programmy types like to call it).

Transaction volume and buzzword usage have been growing in a heavily correlated way for the past 6 years.  If we were to base the blocksize on the usage of buzzwords, we could grow the blocksize at a reasonable rate to scale with demand.


I have outlined specifics at https://github.com/whitj00/bips/blob/master/bip-whit.mediawiki

Thanks,
Whit

From luke at dashjr.org  Fri Oct  2 21:31:21 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 2 Oct 2015 21:31:21 +0000
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
Message-ID: <201510022131.22411.luke@dashjr.org>

On Friday, October 02, 2015 8:02:43 AM Daniele Pinna via bitcoin-dev wrote:
> I am however interested in the dev-list's stance on potentially
> altering the bitcoin PoW protocol should an algorithm that guarantees
> protection from ASIC/FPGA optimization be found.
> 
> I assume that, given the large amount of money invested by some miners into
> their industrial farms this would represent a VERY contentious hard fork.
> 
> It is, however, also true that a novel optimization-resistant algorithm
> could greatly ameliorate decentralization in the bitcoin network due to a
> resurgence of desktop/cellphone mining.
> 
> Where do the core devs stand on this matter, hypothetical as it may be?

Besides ASIC-proof being even tehoretically impossible, assuming we had a PoW 
that worked using mere RAM-as-the-ASIC, this would probably not be good in 
the long term for decentralisation, as it is only a matter of time until 
botnets would bankrupt all the legitimate miners out of operation.

Restarting the mining with a new algorithm as a reaction and defence against 
centralised hoarding of mining ASICs (as we are seeing now), would be 
acceptable. It would not necessarily be contentions *to the economy*, as such 
hoarding-miners do not participate in the economy in any meaningful way (they 
do not accept payments from other bitcoin users).

Luke

From dscotese at litmocracy.com  Fri Oct  2 21:37:09 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Fri, 2 Oct 2015 14:37:09 -0700
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
	algorithm
In-Reply-To: <CAAS2fgTSjnjk60_c0nc4UYYV-w3ZonO_6HuLW+k-SVPyCSc-jQ@mail.gmail.com>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<CALqxMTH6r8eJN2Xw+nn1z=6x9Q3TRSQQ6ZMXsmHPyX8dNx+EgA@mail.gmail.com>
	<CAEgR2PFCLKSDveHQ1xZX0zSdT6_C=ee0-JCQ3REARhCLU6nCYg@mail.gmail.com>
	<CAAS2fgTSjnjk60_c0nc4UYYV-w3ZonO_6HuLW+k-SVPyCSc-jQ@mail.gmail.com>
Message-ID: <CAGLBAhc1kE2ahuUe8hpSC2kh4Z49=-jDS+6U=mE+L7foWMoo=g@mail.gmail.com>

If the PoW function is changed, it ought to change slowly so as not to drop
a brick wall in front of the miners speeding toward the ever-receding goal
of protecting the blockchain.  Who's going to get on that path if the
bitcoin community does that?

But it can be done slowly.  If most of the entries is the list of possible
PoW functions are double-SHA256, then the few that aren't will offer the
healthy goal sought by those who like the idea of changing it.  The healthy
goal is for general computing machines to help protect the blockchain in an
incentivized way.  There's a sick goal too, which is to destroy large
investments in mining.  I hope no one has that goal.

At
http://bitcoin.stackexchange.com/questions/35679/is-it-possible-to-make-pow-asic-resistant-through-dynamically-generated-hash-cha/40475#40475
I proposed that ongoing competitions for the creation of new hash
algorithms could feed an ASIC-resistant PoW, defined using the
as-yet-unknowable winners of such competitions.  It is possible to make an
ASIC resistant algorithm, but it isn't a programmable algorithm - it's one
that requires human intervention.  The hash of the next block is a good
example - there's no programmable algorithm that can find it because too
much human intervention is required, but it's an algorithm well-enough
defined for us to build a billion dollar system on top of it.

That being said, I've started looking at two different kinds of
decentralization.  The literal actually-in-different-places kind is
categorically different than the much more important, virtual
impervious-to-coercion kind.  The behavior of the "centralized" oil cartel
is a good example.  The participants cheat.  This is a fundamental
principle in the debate between free-marketeers and authoritarians
regarding the emergence of monopoly.  Without coercion, monopolies fall
apart.  There's nothing coercive about our use of the double-SHA256, so in
my mind, the centralization it has so far produced is not dangerous.  It's
scary, sure, but until coercion is used to prevent me and my friends from
buying our own ASICs, it remains impervious to coercion.

Sorry for the long email that didn't make any apparent progress.  The
thinking is what matters to me, and seeing two kinds of decentralization
and recognizing that a change in PoW can be slow enough to avoid hurting
existing miners are items I haven't seen anyone else recognize, so I had to
bring them up.

notplato

On Fri, Oct 2, 2015 at 9:45 AM, Gregory Maxwell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Fri, Oct 2, 2015 at 8:30 AM, Daniele Pinna via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > The recently published paper I referenced cite's the Cuckoo cycle
> algorithm,
> > discusses its limitations and explains how their proposed algorithm
> greatly
> > improves on it.
>
> They discuss a very old version of the Cuckoo cycle paper, and I
> believe none of their analysis is applicable to the most recent
> revision. :(
>
> In any case, I commented more about functions of this class here:
>
> https://www.reddit.com/r/Bitcoin/comments/3n5nws/research_paper_asymmetric_proofofwork_based_on/cvl922x
>
> I don't believe changing the POW function is impossible in principle,
> but I expect it would only happen due to problems with the composition
> of current hash-power and not even if it were universally agreed that
> some other construction were technically better (though that is a high
> bar.)
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/23af5503/attachment.html>

From milly at bitcoins.info  Fri Oct  2 23:19:11 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Fri, 2 Oct 2015 19:19:11 -0400
Subject: [bitcoin-dev] Dev-list's stance on potentially altering the PoW
 algorithm
In-Reply-To: <201510022131.22411.luke@dashjr.org>
References: <CAEgR2PFQtr78B3t147=3Ko4VnTGevb0QCySk=hDSqeFHZk=MPQ@mail.gmail.com>
	<201510022131.22411.luke@dashjr.org>
Message-ID: <560F10EF.8020906@bitcoins.info>

> Restarting the mining with a new algorithm as a reaction and defence against
> centralised hoarding of mining ASICs (as we are seeing now), would be
> acceptable. It would not necessarily be contentions *to the economy*, as such
> hoarding-miners do not participate in the economy in any meaningful way (they
> do not accept payments from other bitcoin users).
>
> Luke

I don't see any basis for these claims.  Under this theory developers 
also do not "participate in the economy" either.  These are questions 
for economists and not developers.

Maybe "we" could change the language of Core to prevent the 
centralization of developers?  Maybe switch over to FORTRAN?   lol

Russ



From root at haskoin.com  Sat Oct  3 12:42:24 2015
From: root at haskoin.com (Jean-Pierre Rupp)
Date: Sat, 3 Oct 2015 13:42:24 +0100
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
Message-ID: <560FCD30.9020902@haskoin.com>

Hello,

I have been reviewing BIP-45 today.  There is a privacy problem with it
that should at least be mentioned in the document.

When using the same extended public key for all multisig activity, and
dealing with different cosigners in separate multisig accounts, reuse of
the same set of public keys means that all cosigners from all accounts
will be able to monitor multisig activity from every other cosigner, in
every other account.

Besides privacy considerations, HD wallet's non-reuse of public keys
provide some defence against wallets that do not implement deterministic
signing, and use poor entropy for signature nonces.

Unless users are expected to establish a single cosigning account, this
scheme will result in reuse of public keys, and degradation of privacy.

I understand that for convenience it is useful to have a single extended
public key that can be handed to every cosigner.  This makes setting up
accounts or recovering from data loss a easier.

I suggest that privacy & potential security degradation due to increased
public key reuse in the case of users with multiple multisig accounts
should get a mention in the BIP-45 document.

Greetings


On 25/04/14 23:27, Manuel Araoz wrote:
> Hi, I'm part of the team building copay
> <https://github.com/bitpay/copay>, a multisignature P2SH HD
> wallet. We've been following the discussion regarding standardizing the
> structure for branches both on this list and on github (1
> <https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki>, 2
> <https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki>, 3
> <https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki>, 4
> <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki>, 5
> <https://github.com/bitcoin/bips/pull/52>). Soon, we realized the
> assumptions in the discussions were not true for a multisig hd wallet,
> so we wanted to share our current approach to that, to get feedback and
> see if we can arrive to a new standard (and possibly a new BIP)
> 
> These are our assumptions: 
>  - N parties want to share an m-of-n wallet.
>  - Each party must generate their master private keys independently.
>  - Use multisig P2SH for all addresses.
>  - Use BIP32 to derive public keys, then create a multisig script, and
> use the P2SH address for that.
>  - The address generation process should not require communicating with
> other parties. (Thus, all parties must be able to generate all public keys)
>  - Transaction creation + signing requires communication between
> parties, of course.
> 
> -------------------------------------------------
> 
> Following BIP43, we're be using:
> 
> 
> m / purpose' / *
> 
> where /purpose/ is the hardened derivation scheme based on the new BIP
> number.
> We then define the following levels:
> 
> 
> m / purpose' / cosigner_index / change / address_index
> 
> Each level has a special meaning detailed below:
> 
> /cosigner_index/ <http://en.wikipedia.org/wiki/Co-signing>: the index of
> the party creating this address. The indices can be determined
> independently by lexicographically sorting the master public keys of
> each cosigner.
> 
> /change/: 0 for change, 1 for receive address.
> 
> /address_index/: Addresses are numbered from index 0 in sequentially
> increasing manner. We're currently syncing the max used index for each
> branch between all parties when they connect, but we're open to
> considering removing the index sync and doing the more elegant
> used-address discovery via a gap limit, as discussed in BIP44
> <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#address-gap-limit>.
> We feel 20 might be too low though. 
> 
> *Wallet high-level description:*
> Each party generates their own extended master keypair and shares the
> extended purpose' public key with the others, which is stored encrypted.
> Each party can generate any of the other's derived public keys, but only
> his own private keys. 
> 
> *General address generation procedure:*
> When generating an address, each party can independently generate the N
> needed public keys. They do this by deriving the public key in each of
> the different trees, but using the same path. They can then generate the
> multisig script and the corresponding p2sh address. In this way, each
> path corresponds to an address, but the public keys for that address
> come from different trees.
> 
> *Receive address case:*
> Each cosigner generates addresses only on his own branch. One of the n
> cosigners wants to receive a payment, and the others are offline. He
> knows the last used index in his own branch, because only he generates
> addresses there. Thus, he can generate the public keys for all of the
> others using the next index, and calculate the needed script for the
> address. 
> 
> /Example: /Cosigner #2 wants to receive a payment to the shared wallet.
> His last used index on his own branch is 4. Then, the path for the next
> receive address is m/$purpose/2/1/5. He uses this same path in all of
> the cosigners trees to generate a public key for each one, and from that
> he gets the new p2sh address.
> 
> *Change address case:*
> Again, each cosigner generates addresses only on his own branch. One of
> the n cosigners wants to create an outgoing payment, for which he'll
> need a change address. He generates a new address using the same
> procedure as above, but using a separate index to track the used change
> addresses. 
> /
> Example: /Cosigner #5 wants to send a payment from the shared wallet,
> for which he'll need a change address. His last used change index on his
> own branch is 11. Then, the path for the next change address is
> m/$purpose/5/0/12. He uses this same path in all of the cosigners trees
> to generate a public key for each one, and from that he gets the new
> p2sh address.
> 
> 
> *Transaction creation and signing:*
> When creating a transaction, first one of the parties creates a
> Transaction Proposal. This is a transaction that spends some output
> stored in any of the p2sh multisig addresses (corresponding to any of
> the copayers' branches). This proposal is sent to the other parties, who
> decide if they want to sign. If they approve the proposal, they can
> generate their needed private key for that specific address (using the
> same path that generated the public key in that address, but deriving
> the private key instead), and sign it. Once the proposal reaches m
> signatures, any cosigner can broadcast it to the network, becoming
> final. The specifics of how this proposal is structured, and the
> protocol to accept or reject it, belong to another BIP, in my opinion. 
> 
> *Final comments:*
> - We're currently lexicographically sorting the public keys for each
> address separately. We've read Mike Belshe's comments about sorting the
> master public keys and then using the same order for all derived
> addresses, but we couldn't think of any benefits of doing that (I mean,
> the benefits of knowing whose public key is which).
> - We originally thought we would need a non-hardened version of purpose
> for the path, because we needed every party to be able to generate all
> the public keys of the others. With the proposed path, is it true that
> the cosigners will be able to generate them, by knowing the extended
> purpose public key for each copayer? (m/purpose')
> - The reason for using separate branches for each cosigner is we don't
> want two of them generating the same address and receiving simultaneous
> payments to it. The ideal case is that each address receives at most one
> payment, requested by the corresponding cosigner. 
> 
> 
> Thoughts?
> Manuel
> 
> 
> ------------------------------------------------------------------------------
> Start Your Social Network Today - Download eXo Platform
> Build your Enterprise Intranet with eXo Platform Software
> Java Based Open Source Intranet - Social, Extensible, Cloud Ready
> Get Started Now And Turn Your Intranet Into A Collaboration Platform
> http://p.sf.net/sfu/ExoPlatform
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

From pete at petertodd.org  Sat Oct  3 14:30:56 2015
From: pete at petertodd.org (Peter Todd)
Date: Sat, 3 Oct 2015 16:30:56 +0200
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
	motivate the change
Message-ID: <20151003143056.GA27942@muck>

BIP68 and BIP112 collectively define the CHECKSEQUENCEVERIFY semantics,
which can be summarized conceptually as a relative CHECKLOCKTIMEVERIFY.
However, CSV does define behavior for the previously undefined nSequence
field, which is the only "free-form" field we currently have in the
transaction serialization format that can be used for future upgrades -
we should justify this new behavior carefully as it limits our options
in the future. Adding new fields to the serialization format is very
difficult, due to the very broad system-wide impact of the hard-fork
required to do so.

So we need to make the case for two main things:

1) We have applications that need a relative (instead of absolute CLTV)

2) Additionally to RCLTV, we need to implement this via nSequence

To show we need RCLTV BIP112 provides the example "Escrow with Timeout",
which is a need that was brought up by GreenAddress, among others; I
don't think we have an issue there, though getting more examples would
be a good thing. (the CLTV BIP describes seven use cases, and one
additional future use-case)

However I don't think we've done a good job showing why we need to
implement this feature via nSequence. BIP68 describes the new nSequence
semantics, and gives the rational for them as being a
"Consensus-enforced tx replacement" mechanism, with a bidirectional
payment channel as an example of this in action. However, the
bidirectional payment channel concept itself can be easily implemented
with CLTV alone. There is a small drawback in that the initial
transaction could be delayed, reducing the overall time the channel
exists, but the protocol already assumes that transactions can be
reliably confirmed within a day - significantly less than the proposed
30 days duration of the channel. That example alone I don't think
justifies a fairly complex soft-fork that limits future upgrades; we
need more justification.

So, what else can the community come up with? nSequence itself exists
because of a failed feature that turned out to not work as intended;
it'd be a shame to make that kind of mistake again, so let's get our
semantics and use-cases in the BIPs and documented before we deploy.

-- 
'peter'[:-1]@petertodd.org
00000000000000000ea95b4a24d0a510d4b5a98186f904dc16da07c41189d8b8
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151003/f75f22e9/attachment.sig>

From jl2012 at xbt.hk  Sat Oct  3 18:49:20 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Sat, 03 Oct 2015 14:49:20 -0400
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <20151003143056.GA27942@muck>
References: <20151003143056.GA27942@muck>
Message-ID: <e7b394187fd96bd77a1c49f7c9b7a9b2@xbt.hk>

BIP68 allows per-input locktime, though I don't know how this could be 
useful.

BIP68 and BIP112 are mostly ready. If we try to reimplement 
relative-locktime without using nSequence, we may need to wait for 
another year for deployment.

A compromise is to make BIP68 optional, indicated by a bit in tx 
nVersion, as I suggested earlier (1). This will allow deploying 
relative-locktime without further delay while not permanently limiting 
future upgrades.

(1) 
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010043.html

Peter Todd via bitcoin-dev ? 2015-10-03 10:30 ??:
> BIP68 and BIP112 collectively define the CHECKSEQUENCEVERIFY semantics,
> which can be summarized conceptually as a relative CHECKLOCKTIMEVERIFY.
> However, CSV does define behavior for the previously undefined 
> nSequence
> field, which is the only "free-form" field we currently have in the
> transaction serialization format that can be used for future upgrades -
> we should justify this new behavior carefully as it limits our options
> in the future. Adding new fields to the serialization format is very
> difficult, due to the very broad system-wide impact of the hard-fork
> required to do so.
> 
> So we need to make the case for two main things:
> 
> 1) We have applications that need a relative (instead of absolute CLTV)
> 
> 2) Additionally to RCLTV, we need to implement this via nSequence
> 
> To show we need RCLTV BIP112 provides the example "Escrow with 
> Timeout",
> which is a need that was brought up by GreenAddress, among others; I
> don't think we have an issue there, though getting more examples would
> be a good thing. (the CLTV BIP describes seven use cases, and one
> additional future use-case)
> 
> However I don't think we've done a good job showing why we need to
> implement this feature via nSequence. BIP68 describes the new nSequence
> semantics, and gives the rational for them as being a
> "Consensus-enforced tx replacement" mechanism, with a bidirectional
> payment channel as an example of this in action. However, the
> bidirectional payment channel concept itself can be easily implemented
> with CLTV alone. There is a small drawback in that the initial
> transaction could be delayed, reducing the overall time the channel
> exists, but the protocol already assumes that transactions can be
> reliably confirmed within a day - significantly less than the proposed
> 30 days duration of the channel. That example alone I don't think
> justifies a fairly complex soft-fork that limits future upgrades; we
> need more justification.
> 
> So, what else can the community come up with? nSequence itself exists
> because of a failed feature that turned out to not work as intended;
> it'd be a shame to make that kind of mistake again, so let's get our
> semantics and use-cases in the BIPs and documented before we deploy.
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From odinn.cyberguerrilla at riseup.net  Sun Oct  4 06:46:07 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Sun, 04 Oct 2015 06:46:07 +0000
Subject: [bitcoin-dev] Incentives to run full nodes
In-Reply-To: <55D4124B.6070700@riseup.net>
References: <6EC9DDF352DC4838AE9B088AB372428A25E1F42A@DS04>	<20150817212912.GA15817@muck>
	<CAB+qUq79BgiTGFS1yLxxogg8907jCUtNDmBhnikLWc1fqofNyg@mail.gmail.com>
	<55D4124B.6070700@riseup.net>
Message-ID: <5610CB2F.90002@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello,

Some background on this....


A very long while ago I posted to the bitcoin-development mailing list
some ABIS concepts having to do with microdonations:

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-December/00
3791.html
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004
049.html

And an interesting post (which led me to explore BCN) via nullc:
https://news.ycombinator.com/item?id=7765455
(posted 1 & 1/3 year ago).


Anyway, some long while ago this discussion came up about "Incentives
to run full nodes," and the last post in the thread was here:

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/006083
.html

Since that time, some new developments have come to light which the
participants in that thread may find interesting;

Please see in part,

https://bytecoin.org/news/bytecoin-wallet-1.0.8-release-introduces-micro
- -donations/

This presents a working implementation in BCN; the concept as
implemented there is arguably viable in BTC as well.

Please explore, play with, discuss, etc.

Cheers,

- - O

odinn:
> Potentially relevant...
> 
> "Incentivizing the running of full nodes"
> 
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/0060
28
>
> 
.html
> 
> (However, the issue to which I referred here is now closed)
> 
> View whole thread:
> 
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/thre
ad
>
> 
.html#6028
> 
> On 08/17/2015 02:44 PM, Chris Pacia via bitcoin-dev wrote:
> 
>> On Aug 17, 2015 5:29 PM, "Peter Todd via bitcoin-dev" 
>> <bitcoin-dev at lists.linuxfoundation.org 
>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote: From the 
>> point of view of a
>>> wallet, it's not very secure to use Hearn-style SPV mode, and 
>>> volunteers running full nodes doesn't help things. Sybil 
>>> attacking the IP address space is pretty easy in comparison to 
>>> aquiring hashing power sufficient to create false
>>> confirmations, so any attacker able to do the former will
>>> likely be running the full node you're connecting too anyway.
>>> Ultimately, Hearn-style SPV is a close approximation to just
>>> trusting anyone with a non-trivial amount of hashing power.
>>> (and getting that is surprisingly easy, e.g. w/ SPV mining)
> 
>> Can you explain how the spv node fails against an attacker with a
>>  non-trivial amount of hash power where a full node doesn't? To 
>> attack an spv wallet that is waiting for 6 or 10 confirmations,
>> you would not only need to Sybil them but also summon a massive
>> amount of hashing power to create a chain of headers (while
>> forgoing the opportunity to mine valid blocks with that hash
>> power).
> 
>> But could someone with that much hash power not Sybil a full
>> node and give them a chain for valid blocks (but on an orphan
>> fork)? The failure model doesn't seem specific to spv to me.
> 
> 
> 
>> _______________________________________________ bitcoin-dev
>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWEMsvAAoJEGxwq/inSG8CcU8IAMJ+ZYMFzjETUDEZNyUnVd3v
SJCNauufTOcqxLzQoGIj4Y66PDnk9doRy/KJUGhKNtg4vjxiEk+GGHRH02ktvnQB
6MGuDCJS+MLeGi2W2QMr1NdHl09kRo306F5ZgjtZnOqX0mhwhOrIUylpoevcBnSQ
maJ5hpmxqyhxozEyYyu50HwcMQrXeWKZ8G0VSkTqmY5wf0s98MGrFLWSujwsva0e
p4hvG6YgBH85ne7dnBSH/sySreJpRMA0aac/+1j9U3LVvMTsmuaPc71aGI791o/y
+KV+UZ8bgHldfi+NSK8wA4eRi4JQrt+ruE63XlfYl29gWINqsGeVtpW/W3jeDnI=
=KDER
-----END PGP SIGNATURE-----

From odinn.cyberguerrilla at riseup.net  Sun Oct  4 06:59:27 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Sun, 04 Oct 2015 06:59:27 +0000
Subject: [bitcoin-dev] Incentives to run full nodes
In-Reply-To: <5610CB2F.90002@riseup.net>
References: <6EC9DDF352DC4838AE9B088AB372428A25E1F42A@DS04>	<20150817212912.GA15817@muck>	<CAB+qUq79BgiTGFS1yLxxogg8907jCUtNDmBhnikLWc1fqofNyg@mail.gmail.com>	<55D4124B.6070700@riseup.net>
	<5610CB2F.90002@riseup.net>
Message-ID: <5610CE4F.1000800@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

(Note:  Due to being very tired I have issued a correction to my post
below so as to make sure I have not been misunderstood.)

odinn via bitcoin-dev:
> Hello,
> 
> Some background on this....
> 
> 
> A very long while ago I posted to the bitcoin-development mailing
> list some ABIS concepts having to do with microdonations:
> 
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-December/
00
>
> 
3791.html
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/0
04
>
> 
049.html
> 
> And an interesting post (which led me to explore BCN) via nullc: 
> https://news.ycombinator.com/item?id=7765455 (posted 1 & 1/3 year
> ago).

(I realize the way I wrote the above paragraph made it sound like I
posted the above post at https://news.ycombinator.com/item?id=7765455
but I just want to point out here that I did not; I meant to say that
I read an interesting post which led me to explore BCN that was
published by nullc.)

> 
> 
> Anyway, some long while ago this discussion came up about
> "Incentives to run full nodes," and the last post in the thread was
> here:
> 
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/0060
83
>
> 
.html
> 
> Since that time, some new developments have come to light which
> the participants in that thread may find interesting;
> 
> Please see in part,
> 
> https://bytecoin.org/news/bytecoin-wallet-1.0.8-release-introduces-mic
ro
>
> 
- -donations/
> 
> This presents a working implementation in BCN; the concept as 
> implemented there is arguably viable in BTC as well.
> 
> Please explore, play with, discuss, etc.
> 
> Cheers,
> 
> - O
> 
> odinn:
>> Potentially relevant...
> 
>> "Incentivizing the running of full nodes"
> 
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/006
0
>
>> 
28
> 
> 
> .html
> 
>> (However, the issue to which I referred here is now closed)
> 
>> View whole thread:
> 
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/thr
e
>
>> 
ad
> 
> 
> .html#6028
> 
>> On 08/17/2015 02:44 PM, Chris Pacia via bitcoin-dev wrote:
> 
>>> On Aug 17, 2015 5:29 PM, "Peter Todd via bitcoin-dev" 
>>> <bitcoin-dev at lists.linuxfoundation.org 
>>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote: From the
>>>  point of view of a
>>>> wallet, it's not very secure to use Hearn-style SPV mode, and
>>>>  volunteers running full nodes doesn't help things. Sybil 
>>>> attacking the IP address space is pretty easy in comparison
>>>> to aquiring hashing power sufficient to create false 
>>>> confirmations, so any attacker able to do the former will 
>>>> likely be running the full node you're connecting too
>>>> anyway. Ultimately, Hearn-style SPV is a close approximation
>>>> to just trusting anyone with a non-trivial amount of hashing
>>>> power. (and getting that is surprisingly easy, e.g. w/ SPV
>>>> mining)
> 
>>> Can you explain how the spv node fails against an attacker with
>>> a non-trivial amount of hash power where a full node doesn't?
>>> To attack an spv wallet that is waiting for 6 or 10
>>> confirmations, you would not only need to Sybil them but also
>>> summon a massive amount of hashing power to create a chain of
>>> headers (while forgoing the opportunity to mine valid blocks
>>> with that hash power).
> 
>>> But could someone with that much hash power not Sybil a full 
>>> node and give them a chain for valid blocks (but on an orphan 
>>> fork)? The failure model doesn't seem specific to spv to me.
> 
> 
> 
>>> _______________________________________________ bitcoin-dev 
>>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWEM5PAAoJEGxwq/inSG8C48UH/A9mfVaP2h1nOD2po2yaDCLA
xJuMIhrgo81q+WAbwFk4ac3bu3R/RzLLM7yA2IWDiPJrt6gCvEgIjzsHcG7+q5Bd
s7dPEFnibPzpqXjnVh6FcfpuW/MCT3AXiSvnsKiLh99v+oz9g50fIpOMYuOTk/Sy
816xqKbDfKEHzkWzeOv5gV61AzNS7PDWjfRqRV/Om5+J/MZt/kgXJ8UqEVmYbLXM
wIOWA1Vl4BZtQBiQpyDBjBUDhU0YboVXOMIbmx+ffDXKydcErLwFOCBp3XjVOMti
y0B56kmPko5xKH4/n53WFLH32ILd7dZNtK4KzhmyPjeJ+yXdfFTmR3Ayo4wvP2s=
=UvrH
-----END PGP SIGNATURE-----

From aj at erisian.com.au  Sun Oct  4 08:35:25 2015
From: aj at erisian.com.au (Anthony Towns)
Date: Sun, 4 Oct 2015 18:35:25 +1000
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <20151003143056.GA27942@muck>
References: <20151003143056.GA27942@muck>
Message-ID: <20151004083525.GA18291@navy>

On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via bitcoin-dev wrote:
> So we need to make the case for two main things:
> 1) We have applications that need a relative (instead of absolute CLTV)
> 2) Additionally to RCLTV, we need to implement this via nSequence

> However I don't think we've done a good job showing why we need to
> implement this feature via nSequence. BIP68 describes the new nSequence
> semantics, and gives the rational for them as being a
> "Consensus-enforced tx replacement" mechanism, with a bidirectional
> payment channel as an example of this in action. However, the
> bidirectional payment channel concept itself can be easily implemented
> with CLTV alone.

Do you mean "with RCLTV alone" here?

RCLTV/OP_CSV is used in lightning commitment transactions to enforce a
delay between publishing the commitment transaction, and spending the
output -- that delay is needed so that the counterparty has time to
prove the commitment was revoked and claim the outputs as a penalty.

Using absolute CLTV instead would mean that once the effective delay a
commitment transaction has decreases over time -- initially it will be
longer than desirable, causing unwanted delays in claiming funds when no
cheating is going on; but over time it will become too short, which
means there is not enough time to prove cheating (and the channel has to
be closed prematurely). You can trade those things off and pick
something that works, but it's always going to be bad.

> There is a small drawback in that the initial
> transaction could be delayed, reducing the overall time the channel
> exists, but the protocol already assumes that transactions can be
> reliably confirmed within a day - significantly less than the proposed
> 30 days duration of the channel.

Compared to using a CLTV with 30 days duration, With RCLTV a channel
could be available for years (ie 20x longer), but in the case of problems
funds could be reclaimed within hours or days (ie 30x faster).

But that's all about RCLTV vs CLTV, not about RCLTV vs nSequence/OP_CSV.
ie, it needs BIP 112 (OP_CSV) but not necessarily BIP 68 (nSequence
relative locktime), if they could be disentangled.

You could do all that with "<n> OP_CHECK_HEIGHT_DELTA_VERIFY"
that ignores nSequence, and directly compares the height of the current
block versus the input tx's block (or the diff of their timestamps?)
though, I think?

I think the disadvantage is that (a) you have to look into the input
transaction's block height when processing the script; and (b) you don't
have an easy lookup to check whether the transaction can be included in
the next block.

You could maybe avoid (b) by using locktime though. Have "<n>
OP_CHECK_RELATIVE_LOCKTIME_VERIFY" compare the transactions locktime
against the input's block height or time; if the locktime is 0 or too low,
the transaction is invalid. (So if nLockTime is in blockheight, you can
only spend inputs with blockheight based OP_CRLTV tests; and if it's in
blocktime, you can only spend inputs with blocktime based OP_CRLTV. "n"
does need to encode whether it's time/block height though).

That way, when you see a txn:

 - run the script. if you see <n> RCLTV, then
    + if the tx's locktime isn't set, it's invalid; drop it
    + if the input txn is unconfirmed, it's invalid; try again later
    + workout "locktime - n" if that's >= the input tx's block
      height/time, it's good; keep it in mempool, forward it, etc

 - if you're mining, include the tx when locktime hits, just like you
   would any other valid tx with a locktime

I think the use cases for BIP68 (nSequence) are of the form:

 1) published input; here's a signed tx that spends it to you, usable
    after a delay. might as well just use absolute locktime here, though.

 2) here's an unpublished input, you can build your own transaction to
    spend it, just not immediately after it's published. BIP112 is
    required, and OP_RCLTV as defined above works fine, just include it
    in the published input's script.

 3) here's an unpublished input, and a signed transaction spending it,
    that you can use to spend it after a delay. BIP68 is enough; but
    OP_RCLTV in the second transaction works here. however without
    normalised tx ids, the input could be malleated before publication,
    so maybe this use case isn't actually important anyway.

So I think OP_CRLTV alone works fine for them too...

(Does that make sense, or am I missing something obvious?)

Cheers,
aj


From s7r at sky-ip.org  Sun Oct  4 12:04:16 2015
From: s7r at sky-ip.org (s7r)
Date: Sun, 4 Oct 2015 15:04:16 +0300
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <20151004083525.GA18291@navy>
References: <20151003143056.GA27942@muck> <20151004083525.GA18291@navy>
Message-ID: <561115C0.3080601@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi aj,

On 10/4/2015 11:35 AM, Anthony Towns via bitcoin-dev wrote:
> On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via
> bitcoin-dev wrote:
>> So we need to make the case for two main things: 1) We have
>> applications that need a relative (instead of absolute CLTV) 2)
>> Additionally to RCLTV, we need to implement this via nSequence
> 
>> However I don't think we've done a good job showing why we need
>> to implement this feature via nSequence. BIP68 describes the new
>> nSequence semantics, and gives the rational for them as being a 
>> "Consensus-enforced tx replacement" mechanism, with a
>> bidirectional payment channel as an example of this in action.
>> However, the bidirectional payment channel concept itself can be
>> easily implemented with CLTV alone.
> 
> Do you mean "with RCLTV alone" here?
> 
> RCLTV/OP_CSV is used in lightning commitment transactions to
> enforce a delay between publishing the commitment transaction, and
> spending the output -- that delay is needed so that the
> counterparty has time to prove the commitment was revoked and claim
> the outputs as a penalty.
> 

I partially understand - can you please provide a simple Alice and Bob
example here with the exact scenario? Thanks. Why is there a need to
'delay between publishing the commitment transaction and spending the
output'? If the absolute CLTV script reached its maturity it means
something went wrong (e.g. counterparty cheated or got hit by a bus)
so what is with the delay time needed for proving that the commitment
was revoked? I assume an absolute CLTV script reaching its maturity
(nLockTime) is the proof itself that the commitment was revoked - but
maybe I'm missing something obvious, sorry if this is the case.

> Using absolute CLTV instead would mean that once the effective
> delay a commitment transaction has decreases over time -- initially
> it will be longer than desirable, causing unwanted delays in
> claiming funds when no cheating is going on; but over time it will
> become too short, which means there is not enough time to prove
> cheating (and the channel has to be closed prematurely). You can
> trade those things off and pick something that works, but it's
> always going to be bad.
> 
I agree, I see the logic here. Absolute CLTV is not necessary inferior
to RCLTV - there are use cases and use cases. For example, you can
avoid unnecessary waiting until the nLockTime expires if you use
absolute CLTV in combination with P2SH (2/2). Again, it always depends
on the use case - it might be a good solution, it might not be such a
good solution, but even absolute CLTV alone clearly fixes a lot of
things and takes smart contracts to the next level.

>> There is a small drawback in that the initial transaction could
>> be delayed, reducing the overall time the channel exists, but the
>> protocol already assumes that transactions can be reliably
>> confirmed within a day - significantly less than the proposed 30
>> days duration of the channel.
> 
> Compared to using a CLTV with 30 days duration, With RCLTV a
> channel could be available for years (ie 20x longer), but in the
> case of problems funds could be reclaimed within hours or days (ie
> 30x faster).
> 
Indeed. I for one _need_ CLTV / RCLTV in my day to day use cases, it
would be neat to have both, but if I can only have (for the time
being) absolute CLTV so be it - it's still a lot better.

> But that's all about RCLTV vs CLTV, not about RCLTV vs
> nSequence/OP_CSV. ie, it needs BIP 112 (OP_CSV) but not necessarily
> BIP 68 (nSequence relative locktime), if they could be
> disentangled.
> 
> You could do all that with "<n> OP_CHECK_HEIGHT_DELTA_VERIFY" that
> ignores nSequence, and directly compares the height of the current 
> block versus the input tx's block (or the diff of their
> timestamps?) though, I think?
> 
> I think the disadvantage is that (a) you have to look into the
> input transaction's block height when processing the script; and
> (b) you don't have an easy lookup to check whether the transaction
> can be included in the next block.
> 
> You could maybe avoid (b) by using locktime though. Have "<n> 
> OP_CHECK_RELATIVE_LOCKTIME_VERIFY" compare the transactions
> locktime against the input's block height or time; if the locktime
> is 0 or too low, the transaction is invalid. (So if nLockTime is in
> blockheight, you can only spend inputs with blockheight based
> OP_CRLTV tests; and if it's in blocktime, you can only spend inputs
> with blocktime based OP_CRLTV. "n" does need to encode whether it's
> time/block height though).
> 
> That way, when you see a txn:
> 
> - run the script. if you see <n> RCLTV, then + if the tx's locktime
> isn't set, it's invalid; drop it + if the input txn is unconfirmed,
> it's invalid; try again later + workout "locktime - n" if that's >=
> the input tx's block height/time, it's good; keep it in mempool,
> forward it, etc
> 
> - if you're mining, include the tx when locktime hits, just like
> you would any other valid tx with a locktime
> 
> I think the use cases for BIP68 (nSequence) are of the form:
> 
> 1) published input; here's a signed tx that spends it to you,
> usable after a delay. might as well just use absolute locktime
> here, though.
> 
> 2) here's an unpublished input, you can build your own transaction
> to spend it, just not immediately after it's published. BIP112 is 
> required, and OP_RCLTV as defined above works fine, just include
> it in the published input's script.
> 
> 3) here's an unpublished input, and a signed transaction spending
> it, that you can use to spend it after a delay. BIP68 is enough;
> but OP_RCLTV in the second transaction works here. however without 
> normalised tx ids, the input could be malleated before
> publication, so maybe this use case isn't actually important
> anyway.
> 
> So I think OP_CRLTV alone works fine for them too...
> 
> (Does that make sense, or am I missing something obvious?)
> 
> Cheers, aj
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBCAAGBQJWERXAAAoJEIN/pSyBJlsRypMH/2Q+jVRf4hWtPr9cs/06pXM9
mKHd2OPDEJO8HjSe+cIMCxOz76EZxXglUEkK4YV/huP0Tp0bcMp6EJxsZVD9L78k
dugyh2747ddL6aqRmt0ducTEfIC/Q4BxPA2HRQZkvyyIUQv2Tyo780bC0y8BwUpb
j/BQjFZwk4QgqkTlf5lbCgn85alOKHki2El04iALHc27pUiDWKQPPeNOy6po6mmD
/csvh4XOTQwCVy384ljuFBp0+QN7Z/zx4E8i6GqV2BmfNcveTG6Fc5KrHr2Ud4Th
RD8k6n9mLaPs6ufhVkgUiUqPzQsJ+ns+mm7OEUdd645Kxqxg3Tu1u32DgdpRcHk=
=U0N6
-----END PGP SIGNATURE-----

From root at haskoin.com  Sun Oct  4 15:18:07 2015
From: root at haskoin.com (Jean-Pierre Rupp)
Date: Sun, 4 Oct 2015 16:18:07 +0100
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <560FCD30.9020902@haskoin.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
	<560FCD30.9020902@haskoin.com>
Message-ID: <5611432F.5070209@haskoin.com>

I have a possible solution:

Take all public keys encoded in the purpose-specific extended public
keys (m/45') of all cosigners and sort them lexicographically, according
to BIP-45.  Serialize this information and calculate its HASH160
(RIPEMD160 ? HASH256).  Split the output in five 32-bit chunks, setting
the MSB on all of them to 0. Use these 32-bit chunks to build a
derivation path from the purpose-specific extended public keys.  Treat
this derivation path as if it was the purpose-specific extended public
key in BIP-45.

This scheme will avoid public key sharing, and as long as you share your
purpose-specific extended public key only with your cosigners, it should
be relatively hard for a passive observer to link activity between
different cosigning accounts.

On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:
> Hello,
> 
> I have been reviewing BIP-45 today.  There is a privacy problem with it
> that should at least be mentioned in the document.
> 
> When using the same extended public key for all multisig activity, and
> dealing with different cosigners in separate multisig accounts, reuse of
> the same set of public keys means that all cosigners from all accounts
> will be able to monitor multisig activity from every other cosigner, in
> every other account.
> 
> Besides privacy considerations, HD wallet's non-reuse of public keys
> provide some defence against wallets that do not implement deterministic
> signing, and use poor entropy for signature nonces.
> 
> Unless users are expected to establish a single cosigning account, this
> scheme will result in reuse of public keys, and degradation of privacy.
> 
> I understand that for convenience it is useful to have a single extended
> public key that can be handed to every cosigner.  This makes setting up
> accounts or recovering from data loss a easier.
> 
> I suggest that privacy & potential security degradation due to increased
> public key reuse in the case of users with multiple multisig accounts
> should get a mention in the BIP-45 document.
> 
> Greetings

From thomas.kerin at gmail.com  Sun Oct  4 17:24:59 2015
From: thomas.kerin at gmail.com (Thomas Kerin)
Date: Sun, 04 Oct 2015 18:24:59 +0100
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <5611432F.5070209@haskoin.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>	<560FCD30.9020902@haskoin.com>
	<5611432F.5070209@haskoin.com>
Message-ID: <561160EB.30505@gmail.com>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi Jean Pierre,

This is a problem I've considered before, though I have to say I prefer
your solution.

The problem is, how can a person who restores his wallet from just a
seed restore
all his multi-signature addresses with other parties?

Your proposal is nice because all participants are equal, and it
minimalizes the data
required for recovery because it's deterministic, and the (extended)
public key is the first
piece of metadata you'll ask for from others.. Let it be the only thing
we need!

Regards amending BIP45 - BIP's are not amended after the fact, however
bad it may be
in retrospect. It might be best to write a BIP specifying a
"pseudorandom & deterministic
path generation for HD/multi-signature accounts"

TK

On 04/10/15 16:18, Jean-Pierre Rupp via bitcoin-dev wrote:
> I have a possible solution:
>
> Take all public keys encoded in the purpose-specific extended public
> keys (m/45') of all cosigners and sort them lexicographically, according
> to BIP-45.  Serialize this information and calculate its HASH160
> (RIPEMD160 ? HASH256).  Split the output in five 32-bit chunks, setting
> the MSB on all of them to 0. Use these 32-bit chunks to build a
> derivation path from the purpose-specific extended public keys.  Treat
> this derivation path as if it was the purpose-specific extended public
> key in BIP-45.
>
> This scheme will avoid public key sharing, and as long as you share your
> purpose-specific extended public key only with your cosigners, it should
> be relatively hard for a passive observer to link activity between
> different cosigning accounts.
>
> On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:
>> Hello,
>>
>> I have been reviewing BIP-45 today.  There is a privacy problem with it
>> that should at least be mentioned in the document.
>>
>> When using the same extended public key for all multisig activity, and
>> dealing with different cosigners in separate multisig accounts, reuse of
>> the same set of public keys means that all cosigners from all accounts
>> will be able to monitor multisig activity from every other cosigner, in
>> every other account.
>>
>> Besides privacy considerations, HD wallet's non-reuse of public keys
>> provide some defence against wallets that do not implement deterministic
>> signing, and use poor entropy for signature nonces.
>>
>> Unless users are expected to establish a single cosigning account, this
>> scheme will result in reuse of public keys, and degradation of privacy.
>>
>> I understand that for convenience it is useful to have a single extended
>> public key that can be handed to every cosigner.  This makes setting up
>> accounts or recovering from data loss a easier.
>>
>> I suggest that privacy & potential security degradation due to increased
>> public key reuse in the case of users with multiple multisig accounts
>> should get a mention in the BIP-45 document.
>>
>> Greetings
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

- -- 
My PGP key can be found here: <https://thomaskerin.io/me.pub.asc>
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCgAGBQJWEWDlAAoJEAiDZR291eTlFAkQALgiiKX+VzLOwLK13S0EcE0v
RZeC8hqS5AEi/wpOYC2H0TFaHhDqDgy7Pt7nTt/vfOr9QFbJm076I/iFIhLPPAWf
rRg5kzL6ebOyX1NLmALcNgE9L+Jwz09kdzLUj+xZesJfu1AiSMgND38vFq4CmRfg
YSnWI4iMSP3OoMO5Akjq7m9Ww/lENPDmxTrz2ET9KwKPEkjrdt3c0ipQcs+/vGuU
RfRCUwxcdu/0nl5JhltxMV6wUMjdJ3AGbamWZpL+vA+jT5paOd4ORjc64huQGtFQ
W7l8ynbbVqtXlYYs9mXCMm70316sdo5ZpOXzQmplwtuHWVYt9ssS1aLkBoLYCBtU
i95Ki79S2ooeIjDEqI6FKpgVnLTmUbhudg/vk7eA0+RoNh3SBEHV2HmZ5yTBNtjk
P2a2tRmrbe3CmrdogbJzaweZenzoR82PziF7DAb/2JqtccPSdTW/GrAGyCoe0O5B
PId/iELHKpQepvybp+5PI6q2Atgzut4ze+a2vBiXjbiU3j0sX0XWg5fu9R9Ea1Bw
5+BY71GSa20OTDYEsp5esrl5/AUFj4ivB2OWFok77nGi2rTK+rKL3qMvbmYjAKUV
rWN4m6r8pU2hdhBCEJkXjg57whiMYn5w7ILlrbK5lLEu5qo0txoRtBPaid+y4mkK
moZU0LtvSQSX6ZaojQ/v
=Vs6z
-----END PGP SIGNATURE-----


From byron at mirror.co  Sun Oct  4 21:04:24 2015
From: byron at mirror.co (Byron Gibson)
Date: Sun, 4 Oct 2015 14:04:24 -0700
Subject: [bitcoin-dev] Bitcoin network simulation testing?
Message-ID: <CAOVG1oNimYpzSnB7NUuugagufbD1JnZmAWsuXhMjq45dEF=w-g@mail.gmail.com>

Hi all, is anyone using simulators like Shadow (https://shadow.github.io),
BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed changes
to Bitcoin?  I have a few questions about their capabilities and
limitations.

Byron Gibson
http://mirror.co/
https://keybase.io/byrongibson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151004/59d85ff6/attachment.html>

From matias at bitpay.com  Mon Oct  5 06:57:16 2015
From: matias at bitpay.com (Matias Alejo Garcia)
Date: Mon, 5 Oct 2015 03:57:16 -0300
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <561160EB.30505@gmail.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
	<560FCD30.9020902@haskoin.com> <5611432F.5070209@haskoin.com>
	<561160EB.30505@gmail.com>
Message-ID: <CA+vKqYeBDHEGRgCsuAp3wQKb9idH085e5K3uNdeRLFvc9MTpdQ@mail.gmail.com>

Hi,

Sorry the late response. Going back to the original message:


> > On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:
> >> I have been reviewing BIP-45 today.  There is a privacy problem with it
> >> that should at least be mentioned in the document.
> >>
> >> When using the same extended public key for all multisig activity, and
> >> dealing with different cosigners in separate multisig accounts, reuse of
> >> the same set of public keys means that all cosigners from all accounts
> >> will be able to monitor multisig activity from every other cosigner, in
> >> every other account.
>

I am not completely sure what you mean by 'account' and 'mutisig activity'.
You seem to imply
that the same set of extended public keys will be used in more that one
wallet, which it is
not required (and certainly not recommended) by BIP45.

According to BIP45, a singing party, in order to generate a wallet address,
needs the extended public keys of all the other parties, so each party will
be able to see the transaction history of the wallet they are sharing, but
if the party has other wallets with other copayers the xpub should be
completely different.

mat?as



-- 
BitPay.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/d1abcff0/attachment-0001.html>

From odinn.cyberguerrilla at riseup.net  Mon Oct  5 07:10:56 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Mon, 05 Oct 2015 07:10:56 +0000
Subject: [bitcoin-dev] Incentives to run full nodes, revisited
Message-ID: <56122280.8000104@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512


Due to the previous post on this subject
( http://is.gd/x6g5q5 ) having fractured links
please see the following, with working implementation
(in BCN) shown at: http://abis.io

This is intended to be implemented in different currencies, and so far
has been implemented in one (BCN - GUI wallet).  The concept is
feasible in BTC as well.

Comments welcome.

Developer's blog:

https://bytecoin.org/news/bytecoin-wallet-1.0.8-release-introduces-micro
- -donations/

(Above link can be found also at http://abis.io)

See also:

https://odinn.cyberguerrilla.org/index.php/2015/10/03/greater-giving-pot
ential/

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWEiKAAAoJEGxwq/inSG8Cr18IAKEIBaHp7qkA2xJVTLyXmYkh
RWJg92cjD2Oy82ZkbdGjOJr9XjLFfwiYyZIZucKs1drafjOQvDllNpqII1/grWio
igwEW0eWl/of2tACK6u5i9bCXcfYi4MnMV1rF1DM0etSjRZUu//bX8qrwiwXvAzZ
RmuRlSFvBYE3BuIbd7ekQGfzkXjIVlHerXSDQcELwVhbnQKTYDk/i/4SzmPFHg9Y
S2Zp/SWVQANqvnfuZPjNvbmNXJEdgIzmiUfx2F3ap+5qxtLOJ28zNGnFB+UPRTzr
enlpnxmaUGBkJOEDrQzu0AKoNIeZRyJ6dpzjmMmvsnwo2VW27dKg+NEAOC4zD/U=
=Axnt
-----END PGP SIGNATURE-----

From g1liusbitcoin at gmail.com  Mon Oct  5 09:16:14 2015
From: g1liusbitcoin at gmail.com (G1lius Caesar)
Date: Mon, 5 Oct 2015 11:16:14 +0200
Subject: [bitcoin-dev] Bitcoin dev IRC meeting in layman's terms
Message-ID: <CAHK+0KQpR7Y+auB5VTSUxLnc09DEvgKCZ_QZUBZFfFWw0sP7Qg@mail.gmail.com>

As per request of Luke-jr I'm sending a copy of my post on reddit
https://www.reddit.com/r/Bitcoin/comments/3nh0s4/bitcoin_dev_irc_meeting_in_laymans_terms_or_an/
to the mailing list.

This was intended to be a simple explanation of the weekly dev meeting for
people to understand what you guys are working on, not as a summary for
other devs.
However, if this is in any way, shape or form useful for the mailing-list
I'll gladly post a copy of this every week (or a modified version of it).

Any comments, suggestions, etc. are welcome.
Mail me at G1liusbitcoin at gmail.com
Tweet me @G1lius


If you are to skim through this, skip "background" as you likely already
know this.





Please bare in mind I'm not a developer and I'd have problems coding "hello
world!", so some things might be incorrect or plain wrong.
Like any other write-up it likely contains personal biases, although I try
to stay as neutral as I can.

The full IRC-logs can be found here
http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/01#l1443726030.0.

There are no decisions being made in these meetings, so if I say "everyone
agrees" this means everyone present in the meeting, that's not consensus,
but since a fair amount of devs are present it's a good representation.

Main topics discussed where:
Mempool limiting
BIP68 + CHECKSEQUENCEVERIFY
CLTV soft fork deployment
libconsensus merge time window


**Mempool limiting**


- background

When a transaction is relayed across the network it is held by the nodes in
memory, until it gets into a block. All these transactions that sit in
memory are called the memorypool or mempool for short.
Like we could see during the spam-attack if there's a big back-log of
transactions that couldn't make it in the blockchain this mempool can get
pretty big resulting in nodes crashing.

To stop this from happening devs are trying to find a way to limit this
mempool, so a mechanism to reject and/or remove transactions from the
mempool. The hard part here is to make it so nodes can't be attacked by
abusing this mechanism.

There are multiple worked out ideas for this, namely:
Limit mempool by throwing away the cheapest txn and setting min realy fee
to it ( https://github.com/bitcoin/bitcoin/pull/6722 )
Mempool limiting with descendant package tracking (
https://github.com/bitcoin/bitcoin/pull/6557 )
exponential rising effective min relay feerate (
https://github.com/bitcoin/bitcoin/pull/6673 )


- meeting comments

devs are leaning towards 6722 (throwing away the cheapest txn and setting
min relay fee to it) because it's the more simpler approach and possibly
less edge-cases.
The idea behind it is to have a mem-pool that gives a good approximation on
what'll be included in the next blocks, meaning higher fee transactions.
This approach also helps to build a fee-estimator.
Some devs propose to include a time-based eviction as well.


- meeting conclusion

6722 should be completed and 6722, 6557 and 6673 should be attacked by the
others to try and find edge-cases.
The default mempool size should be 300Mb.



**Chain limits**

- background

Related to mempool limiting.
Chain in this context means connected transactions. When you send a
transaction that depends on another transaction that has yet to be
confirmed we talk about a chain of transactions.
Miners ideally take the whole chain into account instead of just every
single transaction (although that's not widely implemented afaik). So while
a single transaction might not have a sufficient fee, a depending
transaction could have a high enough fee to make it worthwhile to mine both.
This is commonly known as child-pays-for-parent.
Since you can make these chains very big it's possible to clog up the
mempool this way.
The first unconfirmed transaction is called the ancestor and the
transactions depending on it the descendants. The total amount of
transactions is referred to as "packages".

- meeting comments

All of the mempool limiting approaches are way easier to attack if you have
bigger chain limits.
the reason to have larger descendant packages is you can't control that
yourself, somebody pays you and bob, and bob chains off a million
descendants and he ends up screwing you.
if you have a say 900kb ancestor package limit, then even if the ancestor
fee rate is reasonably high, default mining code is likely going to find
100kb of very high fee txs to include first, and then there won't be room
for your ancestor package.
Morcos proposes 25/250kb for ancestors and 50/500kb for descendants,
meaning max. either 25 transactions or 250kb in size for ancestors.
Most seem to be fine with those limits and even smaller.

-meeting conclusion

morcos writes a chain-limit proposal to post on the mailing list in order
to find possible usecases for large chain transactions.



**CHECKLOCKTIMEVERIFY softfork**

- background

Commonly referred to as: How you thought nLockTime worked before you
actually tried to use it.
There's a fair amount of demand for this and the code is reviewed and has
been running on sidechains alpha for 6 months.
The only real issue is how and when it's merged.
Currently softforks have been done by the isSuperMajority mechanism,
meaning when 95% of the last X blocks has a version number higher than X
the fork is deployed.
A new way of doing this is currently being worked on and that uses all bits
of the version number, appropriately being called versionbits. So instead
of a fork happening when the version is larger than (for example)
00000000011 (3), a fork happens when (for example) the 3rd bit is up (so
00100000011).
This way softforks can be deployed simultaneous and independent of each
other.

- meeting comments

Questions are being posed whether we wait for other time-related BIP's
and/or versionbits, or do it now using isSuperMajority.
If versionbits is deployed later it needs to wait for all supermajority
softforks to be over.
Vladimir van der Laan doesn't want to deploy any soft forks in major
releases (0.12 in this case) so that people explicitly upgrade for the
softfork not for other things.
You could roll out multiple supermajority forks as long as they are
cumulative.
Talks seem to converge to using supermajority to deploy checkLockTimeVerify
and checkSequenceVerify if it's ready by the end of October.

- meeting conclusion

checkLockTimeVerify backports (deployment in older versions) needs to be
reviewed as well as BIP68, 112 and 113 (all the time-related BIP's).



**Libconsensus**

- background

Satoshi wasn't the best programmer out there, which leaves a pretty messy
code. Ideally you'd have the part of the code that influences the network
consensus separately, but in bitcoin it's all intertwined.
Libconsensus is what eventually should become this part. This way people
can more easily make changes in the non-consensus part without fear of
causing a network fork.
This however is a slow and dangerous project of moving lot's of code
around.

- meeting comments

Lot's of discussion on when existing changes should be merged, when the
code should be frozen for next release etc.
In linux changes are merged right after a major release. jtimon notices
this was planned for after 0.10 and 0.11 too, but nothing happened.
There seems to be a lack of planning and overview as to what where has to
go.

- meeting conclusion

jtimon will provide a high level rationale for what and where things should
move so people can make comments and review according to this rationale.


**Participants**


dstadulis     Daniel Stadulis
wumpus Wladimir J. van der Laan
morcos Alex Morcos
gmaxwell     Gregory Maxwell
btcdrak btcdrak
jonasshnelli Jonas Schnelli
maaku Mark Friedenbach
sdaftuar Suhas Daftuar
sipa Pieter Wuille
BlueMatt    Matt Corallo
CodeShark Eric Lombrozo
Luke-Jr Luke Dashjr
bsm117532 Bob McElrath
jgarzik Jeff Garzik
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/e3625be8/attachment.html>

From hearn at vinumeris.com  Mon Oct  5 10:59:54 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 5 Oct 2015 12:59:54 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
Message-ID: <CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>

Putting aside stupid arguments about who is older or who starting using the
term SPV wallet first, let me try and make a better suggestion than what's
in the BIP. How about the following:

A new flag is introduced to Core, --scriptchecks=[all,standardonly,none].
The default is all. When set to "standardonly", non-standard scripts are
not checked but others are. This is similar to the behaviour during a soft
fork. In "none" you have something a bit like SPV mode, but still
calculating the UTXO set. This flag is simple and can be implemented in a
few lines of code. Then an unused opcode is used for CLTV, so making it a
hard fork.

This has the following advantages:

   - Nodes that want the pseudo-SPV behaviour of a soft fork can opt in to
   it if they want it. This prioritises availability (in a sense) over
   correctness.

   - But otherwise, nodes will prioritise correctness by default, which is
   how it should be. This isn't PHP where nonsensical code the interpreter
   doesn't understand just does ...... something. This is financial software
   where money is at risk. I feel very strongly about this: undefined
   behaviour is fine *if you opted into getting it. *Otherwise it should be
   avoided whenever possible.

   - SPV wallets do the right thing by default.

   - IsStandard doesn't silently become a part of the consensus rules.

   - All other software gets simpler. It's not just SPV wallets. Block
   explorers, for example, can just add a single line to their opcode map.
   With a soft fork they have to implement the entire soft fork logic just to
   figure out when an opcode transitioned from OP_NOP to CLTV and make sure
   they render old scripts differently to new scripts. And they face tricky
   questions - do they render an opcode as a NOP if the miner who built it was
   un-upgraded, or do they calculate the flag day and change all of them after
   that? It's just an explosion of complexity.

Many people by now have accepted that hard forks are simpler, conceptually
cleaner, and prioritise correctness of results over availability of
results. I think these arguments are strong.

So let me try addressing the counter-arguments one more time:

   - Hard forks require everyone to upgrade and soft forks don't. I still
   feel this one has never actually been explained. There is no difference to
   the level of support required to trigger the change. With the suggestion
   above, if someone can't or won't upgrade their full node but can no longer
   verify the change, they can simply restart with -scriptchecks=standardonly
   and get the soft fork behaviour. Or they can upgrade and get their old
   security level back.

   - Hard forks are somehow bad or immoral or can lead to "schisms". This
   is just saying, if we hold a vote, the people who lose the vote might try
   starting a civil war and refuse to accept the change. That's not a reason
   to not hold votes.

   But at any rate, they can do that with soft forks too: just decide that
   any output that contains OP_CLTV doesn't make it into the UTXO set.
   Eventually coins that trace back to such an output will become unusable in
   the section of the economy that decided to pick a fight.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/563a298c/attachment-0001.html>

From jgarzik at gmail.com  Mon Oct  5 11:23:39 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Mon, 5 Oct 2015 07:23:39 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
Message-ID: <CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>

- It is true that hard forks produce a much cleaner outcome, in terms of
well defined behavior across the entire network.

- Replacing an opcode should not result in undefined behavior.  The
non-upgraded behavior is defined and deterministic.

- IsStandard remains an assistant.  Miners may mine non-standard
transactions.

- "Hard forks require everyone to upgrade and soft forks don't"   Doesn't
require tons of explanation:  Non upgraded clients continue working on the
network even after the rules are upgraded.

All those corrections aside, I do think there has been too much hysteria
surrounding hard forks.  Hard forks, when done right, produce a much
cleaner system for users.








On Mon, Oct 5, 2015 at 6:59 AM, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Putting aside stupid arguments about who is older or who starting using
> the term SPV wallet first, let me try and make a better suggestion than
> what's in the BIP. How about the following:
>
> A new flag is introduced to Core, --scriptchecks=[all,standardonly,none].
> The default is all. When set to "standardonly", non-standard scripts are
> not checked but others are. This is similar to the behaviour during a soft
> fork. In "none" you have something a bit like SPV mode, but still
> calculating the UTXO set. This flag is simple and can be implemented in a
> few lines of code. Then an unused opcode is used for CLTV, so making it a
> hard fork.
>
> This has the following advantages:
>
>    - Nodes that want the pseudo-SPV behaviour of a soft fork can opt in
>    to it if they want it. This prioritises availability (in a sense) over
>    correctness.
>
>    - But otherwise, nodes will prioritise correctness by default, which
>    is how it should be. This isn't PHP where nonsensical code the interpreter
>    doesn't understand just does ...... something. This is financial software
>    where money is at risk. I feel very strongly about this: undefined
>    behaviour is fine *if you opted into getting it. *Otherwise it should
>    be avoided whenever possible.
>
>    - SPV wallets do the right thing by default.
>
>    - IsStandard doesn't silently become a part of the consensus rules.
>
>    - All other software gets simpler. It's not just SPV wallets. Block
>    explorers, for example, can just add a single line to their opcode map.
>    With a soft fork they have to implement the entire soft fork logic just to
>    figure out when an opcode transitioned from OP_NOP to CLTV and make sure
>    they render old scripts differently to new scripts. And they face tricky
>    questions - do they render an opcode as a NOP if the miner who built it was
>    un-upgraded, or do they calculate the flag day and change all of them after
>    that? It's just an explosion of complexity.
>
> Many people by now have accepted that hard forks are simpler, conceptually
> cleaner, and prioritise correctness of results over availability of
> results. I think these arguments are strong.
>
> So let me try addressing the counter-arguments one more time:
>
>    - Hard forks require everyone to upgrade and soft forks don't. I still
>    feel this one has never actually been explained. There is no difference to
>    the level of support required to trigger the change. With the suggestion
>    above, if someone can't or won't upgrade their full node but can no longer
>    verify the change, they can simply restart with -scriptchecks=standardonly
>    and get the soft fork behaviour. Or they can upgrade and get their old
>    security level back.
>
>    - Hard forks are somehow bad or immoral or can lead to "schisms". This
>    is just saying, if we hold a vote, the people who lose the vote might try
>    starting a civil war and refuse to accept the change. That's not a reason
>    to not hold votes.
>
>    But at any rate, they can do that with soft forks too: just decide
>    that any output that contains OP_CLTV doesn't make it into the UTXO set.
>    Eventually coins that trace back to such an output will become unusable in
>    the section of the economy that decided to pick a fight.
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/6fe4130c/attachment.html>

From hearn at vinumeris.com  Mon Oct  5 11:28:13 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 5 Oct 2015 13:28:13 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
Message-ID: <CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>

Well, let's agree to disagree on these two things:

- I define "working" for a full node as verifying everything; if a node
starts skipping bits then I'd say it's not really "working" according to
its original design goals

- Saying the pre-fork behaviour is defined and deterministic is true, but
only in the sense that reading an uninitialised variable in C is defined
and deterministic. It reads whatever happens to be at that stack position:
easily defined. For many programs, that may be the same value each time:
deterministic. Nonetheless, it's considered undefined behaviour by the C
specification and programmers that rely on it can easily create security
holes.

In the same way, I'd consider a node running a script with a NOP and
reaching the opposite conclusion from other nodes to be a case of undefined
behaviour leading to a non-fully-working node.

But these are arguments about the semantics of words. I think we both know
what each other is getting at.

On Mon, Oct 5, 2015 at 1:23 PM, Jeff Garzik <jgarzik at gmail.com> wrote:

>
> - It is true that hard forks produce a much cleaner outcome, in terms of
> well defined behavior across the entire network.
>
> - Replacing an opcode should not result in undefined behavior.  The
> non-upgraded behavior is defined and deterministic.
>
> - IsStandard remains an assistant.  Miners may mine non-standard
> transactions.
>
> - "Hard forks require everyone to upgrade and soft forks don't"   Doesn't
> require tons of explanation:  Non upgraded clients continue working on the
> network even after the rules are upgraded.
>
> All those corrections aside, I do think there has been too much hysteria
> surrounding hard forks.  Hard forks, when done right, produce a much
> cleaner system for users.
>
>
>
>
>
>
>
>
> On Mon, Oct 5, 2015 at 6:59 AM, Mike Hearn via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Putting aside stupid arguments about who is older or who starting using
>> the term SPV wallet first, let me try and make a better suggestion than
>> what's in the BIP. How about the following:
>>
>> A new flag is introduced to Core, --scriptchecks=[all,standardonly,none].
>> The default is all. When set to "standardonly", non-standard scripts are
>> not checked but others are. This is similar to the behaviour during a soft
>> fork. In "none" you have something a bit like SPV mode, but still
>> calculating the UTXO set. This flag is simple and can be implemented in a
>> few lines of code. Then an unused opcode is used for CLTV, so making it a
>> hard fork.
>>
>> This has the following advantages:
>>
>>    - Nodes that want the pseudo-SPV behaviour of a soft fork can opt in
>>    to it if they want it. This prioritises availability (in a sense) over
>>    correctness.
>>
>>    - But otherwise, nodes will prioritise correctness by default, which
>>    is how it should be. This isn't PHP where nonsensical code the interpreter
>>    doesn't understand just does ...... something. This is financial software
>>    where money is at risk. I feel very strongly about this: undefined
>>    behaviour is fine *if you opted into getting it. *Otherwise it should
>>    be avoided whenever possible.
>>
>>    - SPV wallets do the right thing by default.
>>
>>    - IsStandard doesn't silently become a part of the consensus rules.
>>
>>    - All other software gets simpler. It's not just SPV wallets. Block
>>    explorers, for example, can just add a single line to their opcode map.
>>    With a soft fork they have to implement the entire soft fork logic just to
>>    figure out when an opcode transitioned from OP_NOP to CLTV and make sure
>>    they render old scripts differently to new scripts. And they face tricky
>>    questions - do they render an opcode as a NOP if the miner who built it was
>>    un-upgraded, or do they calculate the flag day and change all of them after
>>    that? It's just an explosion of complexity.
>>
>> Many people by now have accepted that hard forks are simpler,
>> conceptually cleaner, and prioritise correctness of results over
>> availability of results. I think these arguments are strong.
>>
>> So let me try addressing the counter-arguments one more time:
>>
>>    - Hard forks require everyone to upgrade and soft forks don't. I
>>    still feel this one has never actually been explained. There is no
>>    difference to the level of support required to trigger the change. With the
>>    suggestion above, if someone can't or won't upgrade their full node but can
>>    no longer verify the change, they can simply restart with
>>    -scriptchecks=standardonly and get the soft fork behaviour. Or they can
>>    upgrade and get their old security level back.
>>
>>    - Hard forks are somehow bad or immoral or can lead to "schisms".
>>    This is just saying, if we hold a vote, the people who lose the vote might
>>    try starting a civil war and refuse to accept the change. That's not a
>>    reason to not hold votes.
>>
>>    But at any rate, they can do that with soft forks too: just decide
>>    that any output that contains OP_CLTV doesn't make it into the UTXO set.
>>    Eventually coins that trace back to such an output will become unusable in
>>    the section of the economy that decided to pick a fight.
>>
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/1aabb5c5/attachment.html>

From root at haskoin.com  Mon Oct  5 11:43:46 2015
From: root at haskoin.com (Jean-Pierre Rupp)
Date: Mon, 5 Oct 2015 12:43:46 +0100
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <561160EB.30505@gmail.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
	<560FCD30.9020902@haskoin.com> <5611432F.5070209@haskoin.com>
	<561160EB.30505@gmail.com>
Message-ID: <56126272.6020908@haskoin.com>

Let?s do this.

On 04/10/15 18:24, Thomas Kerin wrote:
> Regards amending BIP45 - BIP's are not amended after the fact, however
> bad it may be
> in retrospect. It might be best to write a BIP specifying a
> "pseudorandom & deterministic
> path generation for HD/multi-signature accounts"

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/037a6743/attachment-0001.sig>

From jtimon at jtimon.cc  Mon Oct  5 12:04:12 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 5 Oct 2015 14:04:12 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
Message-ID: <CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>

On Oct 5, 2015 1:28 PM, "Mike Hearn via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Well, let's agree to disagree on these two things:
>
> - I define "working" for a full node as verifying everything; if a node
starts skipping bits then I'd say it's not really "working" according to
its original design goals

But assuming the hashrate majority has upgraded (and we're using 95% as the
miner upgrade confirmation threshold to start activation, so that
assumption seems pretty safe), a non-upgraded full node and an upgraded
full will converge on what they see: "the most-work valid chain" will be
the same for both. A non-upgraded full node wallet waiting for several
confirmations (for example, 6 confirmations) will be just as safe as an
upgraded one. In that sense, it keeps working. On top of that, nodes (of
any kind) can use unknown block version numbers to notify the user or even
stop working (the same notification mechanism you would use with hardforks).

I agree that hardforks are necessary and we should deploy a hardfork asap
to show the world they are indeed possible (bip99 proposes a likely
uncontroversial one), but I still believe that is clear that softfork
deployment is preferrable in many cases like this one.

Are you going to produce a bip65 hardfork alternative to try to convince
people of its advantages over bip65 (it is not clear to me how you include
a new script operand via hardfork)?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/b9f495ac/attachment.html>

From clem.ds at gmail.com  Mon Oct  5 12:08:27 2015
From: clem.ds at gmail.com (=?UTF-8?Q?Cl=C3=A9ment_Elbaz?=)
Date: Mon, 05 Oct 2015 12:08:27 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
Message-ID: <CAP63atY+yH5BinWYAyxkqER5wA9Lj6pFC0LritSDLcDuBVbXrg@mail.gmail.com>

It will get correct results about :
- the existence every block
- the existence of every transaction

It will get incorrect results :
- about the *nature* of some transactions
- and therefore, about the balances of some wallets.

I fully agree with Mike here.

Le lun. 5 oct. 2015 ? 14:04, Jorge Tim?n <
bitcoin-dev at lists.linuxfoundation.org> a ?crit :

>
> On Oct 5, 2015 1:28 PM, "Mike Hearn via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > Well, let's agree to disagree on these two things:
> >
> > - I define "working" for a full node as verifying everything; if a node
> starts skipping bits then I'd say it's not really "working" according to
> its original design goals
>
> But assuming the hashrate majority has upgraded (and we're using 95% as
> the miner upgrade confirmation threshold to start activation, so that
> assumption seems pretty safe), a non-upgraded full node and an upgraded
> full will converge on what they see: "the most-work valid chain" will be
> the same for both. A non-upgraded full node wallet waiting for several
> confirmations (for example, 6 confirmations) will be just as safe as an
> upgraded one. In that sense, it keeps working. On top of that, nodes (of
> any kind) can use unknown block version numbers to notify the user or even
> stop working (the same notification mechanism you would use with hardforks).
>
> I agree that hardforks are necessary and we should deploy a hardfork asap
> to show the world they are indeed possible (bip99 proposes a likely
> uncontroversial one), but I still believe that is clear that softfork
> deployment is preferrable in many cases like this one.
>
> Are you going to produce a bip65 hardfork alternative to try to convince
> people of its advantages over bip65 (it is not clear to me how you include
> a new script operand via hardfork)?
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/eea49466/attachment.html>

From hearn at vinumeris.com  Mon Oct  5 12:10:40 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 5 Oct 2015 14:10:40 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
Message-ID: <CA+w+GKS-AZGBSwuN1dgEs6wa-R=jHE0fmfmQ0TL9Cw9b6L71UQ@mail.gmail.com>

Hi Jorge,

I'm glad we seem to be reaching agreement that hard forks aren't so bad
really and can even have advantages. It seems the remaining area of
disagreement is this rollout specifically.

> a non-upgraded full node and an upgraded full will converge on what they
> see: "the most-work valid chain" will be the same for both.
>
Indeed it will, but the point of fully verifying is to *not* converge with
the miner majority, if something goes wrong and they aren't following the
same rules as you. Defining "work" as "converge with miner majority" is
fine for SPV wallets and a correct or at least reasonable definition. But
not for fully verifying nodes, where non-convergence is an explicit design
goal! That's the only thing that stops miners awarding themselves infinite
free money!

> Are you going to produce a bip65 hardfork alternative to try to convince
> people of its advantages over bip65 (it is not clear to me how you include
> a new script operand via hardfork)?
>
No, I'm focused on the block size issue right now. I don't think there's
much point in improving the block chain protocol if most users are going to
be unable to use it. But the modification is simple, right? You just
replace this bit:

  CHECKLOCKTIMEVERIFY redefines the existing NOP2 opcode

with this

  CHECKLOCKTIMEVERIFY defines a new opcode (0xc0)

and that's it. The section *upgrade and testing plan* only says TBD so that
part doesn't even need to change at all, as it's not written yet.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/46cc6d47/attachment.html>

From jtimon at jtimon.cc  Mon Oct  5 12:16:03 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 5 Oct 2015 14:16:03 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CAP63atY+yH5BinWYAyxkqER5wA9Lj6pFC0LritSDLcDuBVbXrg@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
	<CAP63atY+yH5BinWYAyxkqER5wA9Lj6pFC0LritSDLcDuBVbXrg@mail.gmail.com>
Message-ID: <CABm2gDqi2tHHVN6NqsGwhUka+Scza-UcLe=_UhxZx8hvytt5BQ@mail.gmail.com>

On Oct 5, 2015 2:08 PM, "Cl?ment Elbaz" <clem.ds at gmail.com> wrote:
>
> It will get correct results about :
> - the existence every block
> - the existence of every transaction
>
> It will get incorrect results :
> - about the nature of some transactions

Given the assumptions above, only of transactions without enough
confirmations.

> - and therefore, about the balances of some wallets.

Not if the wallet waits for enough confirmations.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/51a36627/attachment.html>

From root at haskoin.com  Mon Oct  5 12:18:56 2015
From: root at haskoin.com (Jean-Pierre Rupp)
Date: Mon, 5 Oct 2015 13:18:56 +0100
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <CA+vKqYeBDHEGRgCsuAp3wQKb9idH085e5K3uNdeRLFvc9MTpdQ@mail.gmail.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
	<560FCD30.9020902@haskoin.com> <5611432F.5070209@haskoin.com>
	<561160EB.30505@gmail.com>
	<CA+vKqYeBDHEGRgCsuAp3wQKb9idH085e5K3uNdeRLFvc9MTpdQ@mail.gmail.com>
Message-ID: <56126AB0.3030107@haskoin.com>

When I talk about multisig account I mean an arrangement among a set of
cosigners to be signatories of multi-signature transactions requiring a
set number of signatures, as specified in BIP-45.

Example:

Juan: xpub123...
Pedro: xpub456...
Jos?: xpub789...

They all agree to create a 2-of-3 multisig ?account? following BIP-45.
Their extended public keys are all path m/45' from their wallet?s master
private key, as per the standard.

Perhaps Pedro wants to also participate in a 2-of-2 cosigning
arrangement with a merchant that will deliver a laptop to him, so Pedro
provides this merchant with the same extended public key derived from
path m/45', and the merchant provides Pedro with his own:

Pedro: xpub456...
ElCheapoPC: xpub987...

Now, suppose that the first cosigner[1] in each of the accounts
generates a set of public keys for a multisig redeem script to obtain a
P2SH address from. The derivation path m/45'/0/0/1 is used as per
BIP-45.  Pedro?s public key for that address in each account will be the
same.

Every cosigner?s address public key is obtained following the same
derivation path from the cosigner?s master key, therefore, it is easy to
know what public keys Pedro is likely to use in both 2-of-3 account
{Juan, Pedro, Jos?} and 2-of-2 account {Pedro, ElCheapoPC}, by only
knowing Pedro?s m/45' purpose-specific extended public key.  By scanning
the blockchain for Pedro?s public keys, Jos? can see that Pedro had a
2-of-2 multi-signature arrangement with somebody else (ElCheapoPC),
although he does not necessarily know its identity, and how much money
was transacted in that arrangement, without having to know the extended
public key from ElCheapoPC.

By adopting the scheme I proposed earlier as an improvement, cosigners
with Pedro would have to know ElCheapoPC?s extended public key in order
to eavesdrop on any transaction between Pedro and ElCheapoPC.

[1] According to lexicographic order of serialized public keys contained
in each of the xpubs, as per BIP-45 specification.

On 05/10/15 07:57, Matias Alejo Garcia wrote:
> 
> Hi,
> 
> Sorry the late response. Going back to the original message:
>  
> 
>     > On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:
>     >> I have been reviewing BIP-45 today.  There is a privacy problem
>     with it
>     >> that should at least be mentioned in the document.
>     >>
>     >> When using the same extended public key for all multisig
>     activity, and
>     >> dealing with different cosigners in separate multisig accounts,
>     reuse of
>     >> the same set of public keys means that all cosigners from all
>     accounts
>     >> will be able to monitor multisig activity from every other
>     cosigner, in
>     >> every other account.
> 
> 
> I am not completely sure what you mean by 'account' and 'mutisig
> activity'. You seem to imply
> that the same set of extended public keys will be used in more that one
> wallet, which it is 
> not required (and certainly not recommended) by BIP45.
> 
> According to BIP45, a singing party, in order to generate a wallet
> address, needs the extended public keys of all the other parties, so
> each party will be able to see the transaction history of the wallet
> they are sharing, but if the party has other wallets with other copayers
> the xpub should be completely different.
> 
> mat?as
> 
> 
> 
> -- 
> BitPay.com

From clem.ds at gmail.com  Mon Oct  5 12:29:49 2015
From: clem.ds at gmail.com (=?UTF-8?Q?Cl=C3=A9ment_Elbaz?=)
Date: Mon, 05 Oct 2015 12:29:49 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDqi2tHHVN6NqsGwhUka+Scza-UcLe=_UhxZx8hvytt5BQ@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
	<CAP63atY+yH5BinWYAyxkqER5wA9Lj6pFC0LritSDLcDuBVbXrg@mail.gmail.com>
	<CABm2gDqi2tHHVN6NqsGwhUka+Scza-UcLe=_UhxZx8hvytt5BQ@mail.gmail.com>
Message-ID: <CAP63atYmt5zEexcon+-jBTFcc=toAX0Bbn5J+R0Yktb1MbZirQ@mail.gmail.com>

I fail to see how the number of confirmations has anything to do with it.

With a non-upgraded Bitcoin software during a soft fork, you get the same
blocks as everyone else, and you get the same confirmed transactions as
everyone else. So you do have the exact same "writings" as everyone else to
calculate your balance.

The problem is that some transactions that are meaningless to you are
actually meaningful to people using an upgraded Bitcoin software.

Therefore during a softfork, while you can not miss the *existence* of a
transaction, you can miss its *meaning*.

If Bitcoin was just a decentralized whiteboard for people to write on it,
that would be no problem.

But as soon as you try to actually use Bitcoin (that is, calculate the
accurate balance of a wallet in a very broad sense), you can be led a wrong
result if you did not upgrade, which is a critical problem for financial
software.

And because nothing prevent people to send you transactions of a new type,
you have no way to "opt out" of this problem.



Le lun. 5 oct. 2015 ? 14:16, Jorge Tim?n <jtimon at jtimon.cc> a ?crit :

>
> On Oct 5, 2015 2:08 PM, "Cl?ment Elbaz" <clem.ds at gmail.com> wrote:
> >
> > It will get correct results about :
> > - the existence every block
> > - the existence of every transaction
> >
> > It will get incorrect results :
> > - about the nature of some transactions
>
> Given the assumptions above, only of transactions without enough
> confirmations.
>
> > - and therefore, about the balances of some wallets.
>
> Not if the wallet waits for enough confirmations.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/8c333034/attachment.html>

From dev at jonasschnelli.ch  Mon Oct  5 12:32:56 2015
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Mon, 5 Oct 2015 14:32:56 +0200
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <56126AB0.3030107@haskoin.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
	<560FCD30.9020902@haskoin.com> <5611432F.5070209@haskoin.com>
	<561160EB.30505@gmail.com>
	<CA+vKqYeBDHEGRgCsuAp3wQKb9idH085e5K3uNdeRLFvc9MTpdQ@mail.gmail.com>
	<56126AB0.3030107@haskoin.com>
Message-ID: <56126DF8.20602@jonasschnelli.ch>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


> Perhaps Pedro wants to also participate in a 2-of-2 cosigning 
> arrangement with a merchant that will deliver a laptop to him, so
> Pedro provides this merchant with the same extended public key
> derived from path m/45', and the merchant provides Pedro with his
> own:

What holds you back from using m/i'/45' where i' is your multisig
"account" number?

Within your BIP45 wallet (lets assume Copay), you would not provide
the xpubkey at m/45', instead you would provide your xpubkey at m/i'/45'
.

It's probably no longer pure BIP45.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBAgAGBQJWEm34AAoJECnUvLZBb1Ps+TgP/RmIxp31GOF9JDYVvSpaWfjf
NhB7o5/AiQ5rNv2BL5Wdoebb3EHzPTjzf/gGq3vSHQkm+c5rnDO8kTtwlNog7HN3
djtlbdhftlqcWdgBYNRstMj52NlfQKz4exvaPTsFlxUS02VzafPhssde9H7KdBHw
HoePJziOku6ibHW3u2CdEtGHYSRZ0w7xUmGYUjYc9LRa86Gl5aHFOzTVmboQgNW+
MACb30gSjMGP6i4iHsuwYMpc7DJ1SyooqAL64Z+YN/ZJayHatJIxVx8GGPC2HW5g
nj1LuJacK5VA2VtqtnRhVP0IEm4rKSgSzJz/534lB8/6RFejR0VnjzLZcMsa2TcQ
7yWf6xAN3ijMWi8mxG2RL/2xZiH3txpdMLme3e5YyZ8sgDw04zJI8lKRkg8kN8Wo
G8JQ/6hAzK9OhceoCnazE1ODXRiKa/jXvtfdiuzAb7Q3zFbnXNT2b7dshU0eY6iW
GWBmOInBROfoAqt43gQIMC0gpBsQc9JlVN5s6CgPxhEAMsZI/akKm4qufGbvb767
USgzh6UPE+secLkgjZC/lVKmk7rD+7poJjZB5XzaGdKAxzpFTqw/gLXhfG17TVPA
ZwA2UFhnHVitP839RenrCxWORng2F8gDO/ElWTWtwCq7+c2UxEOxSiKfTOahEoFw
LmOUFxn5iMSbdBEbkm54
=cbgc
-----END PGP SIGNATURE-----

From jtimon at jtimon.cc  Mon Oct  5 13:24:54 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 5 Oct 2015 15:24:54 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
Message-ID: <CABm2gDoxzYWM2VSq1WLRSD61LaVNkQ2puwOEEuRP78s6+WRYCA@mail.gmail.com>

"Consensus" it's a term we use for consensus critical code and we
refer to different machines (potentially with different software)
validating in exactly the same way.
I think also using the term for people agreeing on what those
consensus rules is confusing, so in BIP99 I used the term
"uncontroversial" instead.
>From BIP99 current's content (improvements welcomed):

"
Uncontroversial consensus upgrades

"Uncontroversial" is something though to define in this context. What
if a single user decides he won't upgrade no matter what and he
doesn't even attempt to explain his decision? Obviously, such a user
should be just ignored. But what if the circumstances are slightly
different? What if they're 2, 10 users? Where's the line? It is
possible that we can never have a better definition than "I know it
when I see it" [citation].
"

The fact that there's at least 3 different proposals for a blocksize
increase, that there's not a lot of data comparing different possible
block sizes and its potential effects on block propagation and that
the development progress has enormously slowed down during months of
discussion are, in my opinion, clear signs that none of the current
proposals are "uncontroversial", even by this vague definition.

I believe BIP65 is uncontroversial since no reasonable objections to
the feature itself have been raised, it has been widely reviewed and
tested. The only complain is about it is it's softfork deployment
mechanism.

Was deployment of bip16, bip30 or bip66 controversial (which were
deployed via softforks, some of them even with people [ie Mike Hearn]
preferring always hardforks over softforks) uncontroversial?
I believe they were all (maybe with the exception of bip16)
uncontroversial. That's the story bip99 is telling, but bip99 is not
finished so we can change that if it makes sense.
We could say that they have been "Unilateral softforks", but I don't
think that would be fair for the miners who helped deploy it. Or we
could always create a new category in bip99 (please, propose a new
category of softforks if you think there's some potential case that's
not covered).

This is not about Mike Hearn or you or any person in particular.
"Uncontroversial" is so far defined in a vague way, if you think you
can put a more formal definition forward, please do so (provided that
it's not an absurd definition which allows any individual to block
everything without reasonable arguments). I'm more than happy
improving bip99 before we move it from its current "draft" status.

If Mike Hearn (and you) are right, I should update bip99 to NEVER
recommend softforks for consensus rule changes.
But I still believe it is uncontroversial that softforks have great
advantages in many cases (even if not everybody understand this).
I want bip99 itself to be uncontroversial, so please nit/nack fast,
nit/nack often and please please please nit/nack on time (while bip99
is still a draft).

From jtimon at jtimon.cc  Mon Oct  5 13:29:19 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 5 Oct 2015 15:29:19 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
Message-ID: <CABm2gDqFbm4A2R7whQbCDxXKjvkdTmTKU2HV3+E+8c9EPdtnTw@mail.gmail.com>

On Fri, Oct 2, 2015 at 4:12 AM, GC via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Or, you know, enter some discussions on what exactly are the issues that SPV
> clients face during soft forks and see if anything can be done (on all
> sides) to mitigate the risks.

This has already been discussed. The recommended risk mitigation
mechanism for softforks it's just the same as the one for hardforks:
unknown block version notifications.

From jtimon at jtimon.cc  Mon Oct  5 15:33:30 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 5 Oct 2015 17:33:30 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKS-AZGBSwuN1dgEs6wa-R=jHE0fmfmQ0TL9Cw9b6L71UQ@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
	<CA+w+GKS-AZGBSwuN1dgEs6wa-R=jHE0fmfmQ0TL9Cw9b6L71UQ@mail.gmail.com>
Message-ID: <CABm2gDpgpRg9U5ToNM98pQgz8VRwT8o817zrpJgOj06PwySk_Q@mail.gmail.com>

On Mon, Oct 5, 2015 at 2:10 PM, Mike Hearn <hearn at vinumeris.com> wrote:
> Hi Jorge,
>
> I'm glad we seem to be reaching agreement that hard forks aren't so bad
> really and can even have advantages. It seems the remaining area of
> disagreement is this rollout specifically.
>>
>> a non-upgraded full node and an upgraded full will converge on what they
>> see: "the most-work valid chain" will be the same for both.
>
> Indeed it will, but the point of fully verifying is to not converge with the
> miner majority, if something goes wrong and they aren't following the same
> rules as you. Defining "work" as "converge with miner majority" is fine for
> SPV wallets and a correct or at least reasonable definition. But not for
> fully verifying nodes, where non-convergence is an explicit design goal!
> That's the only thing that stops miners awarding themselves infinite free
> money!

As Greg explained to you repeatedly, a softfork won't cause a
non-upgraded full node to start accepting blocks that create more
subsidy than is valid.
It's only the new rule (in this case, BIP65) that they won't validate.
That's very different security from an SPV node, and as Greg also
explained, SPV nodes could be much more secure than bitcoinj nodes
(they could, for example, validate the coinbase transaction of every
block).
If a non-upgraded node it's not a "full node" for you, that's fine,
but it is for everyone else. So please stop confusing other people.
Assuming the majority of the hashrate upgraded, there's almost no risk
for non-upgraded full nodes.

>> Are you going to produce a bip65 hardfork alternative to try to convince
>> people of its advantages over bip65 (it is not clear to me how you include a
>> new script operand via hardfork)?
>
> No, I'm focused on the block size issue right now. I don't think there's
> much point in improving the block chain protocol if most users are going to
> be unable to use it. But the modification is simple, right? You just replace
> this bit:
>
>   CHECKLOCKTIMEVERIFY redefines the existing NOP2 opcode
>
> with this
>
>   CHECKLOCKTIMEVERIFY defines a new opcode (0xc0)
>
> and that's it. The section upgrade and testing plan only says TBD so that
> part doesn't even need to change at all, as it's not written yet.

Thanks, I wasn't aware that there was room for new opcodes that
weren't noops already.
Can you give an example of an attack in which a non-upgraded full node
wallet is defrauded with BIP65 but could not with the hardfork
alternative (that nobody seems to be willing to implement)?
Please, don't assume 0 confirmation transactions or similar
unreasonable assumptions (ie see section 11 "Calculations" of the
Bitcoin whitepaper).

From jtimon at jtimon.cc  Mon Oct  5 15:42:56 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 5 Oct 2015 17:42:56 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CAP63atYmt5zEexcon+-jBTFcc=toAX0Bbn5J+R0Yktb1MbZirQ@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
	<CAP63atY+yH5BinWYAyxkqER5wA9Lj6pFC0LritSDLcDuBVbXrg@mail.gmail.com>
	<CABm2gDqi2tHHVN6NqsGwhUka+Scza-UcLe=_UhxZx8hvytt5BQ@mail.gmail.com>
	<CAP63atYmt5zEexcon+-jBTFcc=toAX0Bbn5J+R0Yktb1MbZirQ@mail.gmail.com>
Message-ID: <CABm2gDq7woaxPxSCTz6szzQdngjpXiBuT4319tUEQGgyfcEw4A@mail.gmail.com>

On Mon, Oct 5, 2015 at 2:29 PM, Cl?ment Elbaz <clem.ds at gmail.com> wrote:
> The problem is that some transactions that are meaningless to you are
> actually meaningful to people using an upgraded Bitcoin software.
>
> Therefore during a softfork, while you can not miss the existence of a
> transaction, you can miss its meaning.

Why would you care about payments to other people?
The scriptPubKey's that you give to your payers certainly have meaning to you.

> But as soon as you try to actually use Bitcoin (that is, calculate the
> accurate balance of a wallet in a very broad sense), you can be led a wrong
> result if you did not upgrade, which is a critical problem for financial
> software.

What is it important that you are able to calculate balances of
wallets that aren't yours?

> And because nothing prevent people to send you transactions of a new type,
> you have no way to "opt out" of this problem.

Why would anyone "pay you" to a scriptPubKey you don't understand?

I can "pay" the bill of my internet services by burying cash in a park
nearby my house for my provider to pick up later.
But if I don't tell my provider, it will never know. If I inform it, I
will get an answer: "no, sorry, we won't accept this new 'form of
payment' of yours as payment".

From sergio.d.lerner at gmail.com  Mon Oct  5 15:56:33 2015
From: sergio.d.lerner at gmail.com (Sergio Demian Lerner)
Date: Mon, 5 Oct 2015 12:56:33 -0300
Subject: [bitcoin-dev] This thread is not about the soft/hard fork technical
	debate
Message-ID: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>

Some of the people on this mailing list are blindly discussing the
technicalities of a soft/hard fork without realizing that is not Mike's
main intention. At least I perceive (and maybe others too) something else
is happening.

Let me try to clarify: the discussion has nothing to do with technical
arguments. I generally like more hard forks than soft forks (but I won't
explain why because this is not a technical thread), but for CLTV this is
quite irrelevant (but I won't explain why..), and I want CLTV to be
deployed asap.

Mike's intention is to criticize the informal governance model of Bitcoin
Core development and he has strategically pushed the discussion to a
dead-end where the group either:

1) ignores him, which is against the established criteria that all
technical objections coming from anyone must be addressed until that person
agrees, so that a change can be uncontroversial. If the group moves forward
with the change, then the "uncontroversial" criteria is violated and then
credibility is lost. So a new governance model would be required for which
the change is within the established rules.

2) respond to his technical objections one after the other, on never ending
threads, bringing the project to a standstill.

As I don't want 2) to happen, then 1) must happen, which is what Mike
wants. I have nothing for or against Mike personally. I just think Mike
Hearn has won this battle. But having a more formal decision making process
may not be too bad for Bitcoin, maybe it can actually be good.

Best regards
 from a non-developer to my dearest developer friends,
  Sergio.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/4d07e31d/attachment.html>

From nxtchg at hush.com  Mon Oct  5 16:39:53 2015
From: nxtchg at hush.com (NxtChg)
Date: Mon, 05 Oct 2015 19:39:53 +0300
Subject: [bitcoin-dev]
	=?utf-8?q?This_thread_is_not_about_the_soft/hard_fo?=
	=?utf-8?q?rk_technical=09debate?=
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <20151005163953.5BA1420106@smtp.hushmail.com>

>I just think Mike Hearn has won this battle.

Unless the Core camp isn't concerned with credibility because they see XT as a disruptive attack.

So it's very easy to justify banning a single individual in the name of "restoring peace and order". We've already seen such suggestion.

Peter R was banned on /r/bitcoin, Mike was banned on IRC.

The new governance model seems to be "consensus by exclusion".


From hearn at vinumeris.com  Mon Oct  5 16:46:28 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 5 Oct 2015 18:46:28 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDpgpRg9U5ToNM98pQgz8VRwT8o817zrpJgOj06PwySk_Q@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
	<CA+w+GKS-AZGBSwuN1dgEs6wa-R=jHE0fmfmQ0TL9Cw9b6L71UQ@mail.gmail.com>
	<CABm2gDpgpRg9U5ToNM98pQgz8VRwT8o817zrpJgOj06PwySk_Q@mail.gmail.com>
Message-ID: <CA+w+GKRjURkV40iG=6RLhFyQ-t2G_YAinKk7Os_8zK4+hyYJaw@mail.gmail.com>

>
> As Greg explained to you repeatedly, a softfork won't cause a
> non-upgraded full node to start accepting blocks that create more
> subsidy than is valid.
>

It was an example. Adam Back's extension blocks proposal would, in fact,
allow for a soft forking change that creates more subsidy than is valid (or
does anything else) by hiding one block inside another.

Anyway, I think you got my point.


> That's very different security from an SPV node, and as Greg
> also explained, SPV nodes could be much more secure than bitcoinj
> nodes (they could, for example, validate the coinbase transaction of
> every block).
>

I'm pretty sure Gregory did not use such an example because it's dead
wrong. You cannot verify the size of a coinbase without being a fully
verifying node because you need to know the fees in the block, and
calculating that requires access to the entire UTXO set.

This sort of thing is why I get annoyed when people lecture me about SPV
wallets and the things they "should" do. None of you guys has built one. I
keep seeing wild statements about theoretical unicorn wallets that nobody
has even designed, and how all existing wallets are crappy and insecure
because they don't meet your ever shifting goal posts.

To everyone making such statements I say: go away and build an SPV wallet
of your own from scratch. Then you will understand the engineering
tradeoffs involved much better, and be in a much better position to debate
what they should or should not be doing.

And bear in mind if it weren't for the work myself and a few others did on
SPV wallets, everyone would be using web wallets instead. Then you'd all
just complain about that instead.


> Can you give an example of an attack in which a non-upgraded full node
> wallet is defrauded with BIP65 but could not with the hardfork
> alternative (that nobody seems to be willing to implement)?
>

Making it a hard fork instead is changing one line of code (ignoring the
code to set up the flag day, which can be based on the code for BIP101). If
it comes down to it, then I'll do the work to change that one line. But
obviously I'd need to see agreement from the maintainers that such a pull
req would be merged first.

The example is this: find someone that accepts 1-block confirmed
transactions in return for something valuable. There are plenty of them out
there. Once the soft fork starts, send a P2SH transaction that defines a
new output controlled by OP_CLTV. It will be incorporated into the UTXO set
by all miners because it's opaque (p2sh).

Now send a transaction that pays the merchant, and make it spend your
OP_CLTV output with an invalid script. New nodes will reject it as a rule
violator. Old nodes won't. So at some point an old miner will create a
block containing your invalid transaction, the merchant will think they got
paid, they'll give you the stuff and the fraud is done.


> Please, don't assume 0 confirmation transactions or similar
> unreasonable assumptions (ie see section 11 "Calculations" of the
> Bitcoin whitepaper).
>

This is just embarrassing - do any of you guys at Blockstream actually use
Bitcoin in the real world? Virtually all payments that aren't moving money
into/out of exchange wallets are 0-confirm in reality. I described a
1-confirm attack above, but really ... come on.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/601a316d/attachment.html>

From luke at dashjr.org  Mon Oct  5 16:51:57 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Mon, 5 Oct 2015 16:51:57 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <201510051651.58728.luke@dashjr.org>

On Monday, October 05, 2015 3:56:33 PM Sergio Demian Lerner via bitcoin-dev 
wrote:
> Some of the people on this mailing list are blindly discussing the
> technicalities of a soft/hard fork without realizing that is not Mike's
> main intention. At least I perceive (and maybe others too) something else
> is happening.
> 
> Let me try to clarify: the discussion has nothing to do with technical
> arguments. I generally like more hard forks than soft forks (but I won't
> explain why because this is not a technical thread), but for CLTV this is
> quite irrelevant (but I won't explain why..), and I want CLTV to be
> deployed asap.
> 
> Mike's intention is to criticize the informal governance model of Bitcoin
> Core development and he has strategically pushed the discussion to a
> dead-end where the group either:
> 
> 1) ignores him, which is against the established criteria that all
> technical objections coming from anyone must be addressed until that person
> agrees, so that a change can be uncontroversial. If the group moves forward
> with the change, then the "uncontroversial" criteria is violated and then
> credibility is lost. So a new governance model would be required for which
> the change is within the established rules.
> 
> 2) respond to his technical objections one after the other, on never ending
> threads, bringing the project to a standstill.
> 
> As I don't want 2) to happen, then 1) must happen, which is what Mike
> wants. I have nothing for or against Mike personally. I just think Mike
> Hearn has won this battle. But having a more formal decision making process
> may not be too bad for Bitcoin, maybe it can actually be good.

This discussion is *necessarily* about soft/hard fork technicalities, as 
there is no governance in Bitcoin beyond the *nature* of the consensus 
protocol. The "established criteria" you mention is merely the nature of 
hardforks. It is completely inapplicable and has never been the necessary 
case for softforks, which can be enforced by merely a miner majority.

Luke

From hearn at vinumeris.com  Mon Oct  5 16:56:38 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 5 Oct 2015 18:56:38 +0200
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>

Hey Sergio,

To clarify: my *single* objection is that CLTV should be a hard fork. I
haven't been raising never-ending technical objections, there's only one.

I *have* been answering all the various reasons being brought up why I'm
wrong and soft forks are awesome .... and there do seem to be a limitless
number of such emails .... but on my side it's still just a single
objection. If CLTV is a hard fork then I won't be objecting anymore, right?

CLTV deployment is clearly controversial. Many developers other than me
have noted that hard forks are cleaner, and have other desirable
properties. I'm not the only one who sees a big question mark over soft
forks.

As everyone in the Bitcoin community has been clearly told that
controversial changes to the consensus rules must not happen, it's clear
that CLTV cannot happen in its current form.

Now I'll be frank - you are quite correct that I fully expect the Core
maintainers to ignore this controversy and do CLTV as a soft fork anyway.
I'm a cynic. I don't think "everyone must agree" is workable and have said
so from the start. Faced with a choice of going back on their public
statements or having to make changes to something they clearly want, I
expect them to redefine what "real consensus" means. I hope I'm wrong, but
if I'm not ..... well, at least everyone will see what Gavin and I have
been talking about for so many months.

But I'd rather the opcode is tweaked. There's real financial risks to a
soft fork.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/ea317e9d/attachment-0001.html>

From truthcoin at gmail.com  Mon Oct  5 17:01:39 2015
From: truthcoin at gmail.com (Paul Sztorc)
Date: Mon, 5 Oct 2015 13:01:39 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
Message-ID: <5612ACF3.2080006@gmail.com>

On 10/5/2015 12:56 PM, Mike Hearn via bitcoin-dev wrote:
>
> As everyone in the Bitcoin community has been clearly told that
> controversial changes to the consensus rules must not happen, it's
> clear that CLTV cannot happen in its current form.


From btcdrak at gmail.com  Mon Oct  5 17:03:05 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Mon, 5 Oct 2015 18:03:05 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <CADJgMzvMLTu8pmOVVJfg5xUWHMWiAcAUJXig2B=qX9Oimu+vGw@mail.gmail.com>

You are absolutely right and this is something I have often unsuccessfully
tried to explain as "disruption strategies". The problem is that most
people in the technical community assume good faith at all times, which
plays right into the frame required for disruption.

However, I would like to challenge your assumption of point 1 that that by
Mike making a rabble, it somehow makes CLTV deployment controversial. His
arguments have  been refuted.

Mike has not presented anything convincing and history actually shows that
ISM works, and we have learned how to make it even more streamlined. We
know ISM has consensus because miners have accepted ISM for past softfork
rollouts.

Simply making a noise does not make something controversial. When it is
controversial, it is obvious and plain to see.

On Mon, Oct 5, 2015 at 4:56 PM, Sergio Demian Lerner via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Some of the people on this mailing list are blindly discussing the
> technicalities of a soft/hard fork without realizing that is not Mike's
> main intention. At least I perceive (and maybe others too) something else
> is happening.
>
> Let me try to clarify: the discussion has nothing to do with technical
> arguments. I generally like more hard forks than soft forks (but I won't
> explain why because this is not a technical thread), but for CLTV this is
> quite irrelevant (but I won't explain why..), and I want CLTV to be
> deployed asap.
>
> Mike's intention is to criticize the informal governance model of Bitcoin
> Core development and he has strategically pushed the discussion to a
> dead-end where the group either:
>
> 1) ignores him, which is against the established criteria that all
> technical objections coming from anyone must be addressed until that person
> agrees, so that a change can be uncontroversial. If the group moves forward
> with the change, then the "uncontroversial" criteria is violated and then
> credibility is lost. So a new governance model would be required for which
> the change is within the established rules.
>
> 2) respond to his technical objections one after the other, on never
> ending threads, bringing the project to a standstill.
>
> As I don't want 2) to happen, then 1) must happen, which is what Mike
> wants. I have nothing for or against Mike personally. I just think Mike
> Hearn has won this battle. But having a more formal decision making process
> may not be too bad for Bitcoin, maybe it can actually be good.
>
> Best regards
>  from a non-developer to my dearest developer friends,
>   Sergio.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/a541ef59/attachment.html>

From tomz at freedommail.ch  Mon Oct  5 17:26:12 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Mon, 05 Oct 2015 18:26:12 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CADJgMzvMLTu8pmOVVJfg5xUWHMWiAcAUJXig2B=qX9Oimu+vGw@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CADJgMzvMLTu8pmOVVJfg5xUWHMWiAcAUJXig2B=qX9Oimu+vGw@mail.gmail.com>
Message-ID: <2142297.qudDqxHTIz@garp>

On Monday 5. October 2015 18.03.05 Btc Drak via bitcoin-dev wrote:
> However, I would like to challenge your assumption of point 1 that that by
> Mike making a rabble, it somehow makes CLTV deployment controversial. His
> arguments have  been refuted.

Unsuccessfully.

> Simply making a noise does not make something controversial. When it is
> controversial, it is obvious and plain to see.

I think its plain to see the soft fork is controversial.

But that?s not the point.

The point is that Bitcoin Core claims to have a consensus mechanism and sticks 
to "no change" on not reaching a consensus. And that rule is the reason why 
bigger blocks were blocked for years.

History has shown that for many decision making processes this doesn't work, 
and this argument has been made to Core. 
Until today this was essentially a rule that hurt the things that Mike was 
really passionate about.
Today this hurts the things that some other devs are passionate about.

I think today is the day that everyone should agree that the past is the past 
and we all learned our lesson and Bitcoin Core will make decisions a different 
way.

From s7r at sky-ip.org  Mon Oct  5 17:33:04 2015
From: s7r at sky-ip.org (s7r)
Date: Mon, 5 Oct 2015 20:33:04 +0300
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <5612B450.3040703@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hello,

First, this only makes reference to hard forks not to soft forks. This
is very important because we are trying to apply a hard fork
requirement to a soft fork procedure which obviously won't work.

Your statement that 'all objections coming from anyone must be
addressed until that person agrees' is not applicable in reality. What
if that person objecting is explained several times, with plausible
and verifiable technical arguments, and that person still doesn't
agree (either on purpose, either really doesn't understand the
explanations)? What will we do in this case? Assume it's controversial
because someone refuses to or simply doesn't understand? This seams at
least a little bit unfair.

It's like we are in a court room where a text from a law (like this
requirement from that BIP) can be twisted and interpreted in various
way in an endless debate. We cannot apply everything as-it-is-stated
word-by-word and apply it _blindly_ like robots in every situation,
everything always depends on context and other factors.

For example, I don't see this controversial nor a violation of the BIP
requirements. Mike had some fair objections, they were explained by
gmaxwell and Jorge, everybody understood. The explanation is clear,
with plausible practical examples, so from my point of view the
objections have no arguments to sustain the claim. I don't see
anything controversial here. Now of course it's Mike's right to reject
those explanations, but what's the 'controversial' here?

On 10/5/2015 6:56 PM, Sergio Demian Lerner via bitcoin-dev wrote:
> Some of the people on this mailing list are blindly discussing the 
> technicalities of a soft/hard fork without realizing that is not
> Mike's main intention. At least I perceive (and maybe others too)
> something else is happening.
> 
> Let me try to clarify: the discussion has nothing to do with
> technical arguments. I generally like more hard forks than soft
> forks (but I won't explain why because this is not a technical
> thread), but for CLTV this is quite irrelevant (but I won't explain
> why..), and I want CLTV to be deployed asap.
> 
> Mike's intention is to criticize the informal governance model of 
> Bitcoin Core development and he has strategically pushed the
> discussion to a dead-end where the group either:
> 
> 1) ignores him, which is against the established criteria that all 
> technical objections coming from anyone must be addressed until
> that person agrees, so that a change can be uncontroversial. If the
> group moves forward with the change, then the "uncontroversial"
> criteria is violated and then credibility is lost. So a new
> governance model would be required for which the change is within
> the established rules.
> 
> 2) respond to his technical objections one after the other, on
> never ending threads, bringing the project to a standstill.
> 
> As I don't want 2) to happen, then 1) must happen, which is what
> Mike wants. I have nothing for or against Mike personally. I just
> think Mike Hearn has won this battle. But having a more formal
> decision making process may not be too bad for Bitcoin, maybe it
> can actually be good.
> 
> Best regards from a non-developer to my dearest developer friends, 
> Sergio.
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBCAAGBQJWErRQAAoJEIN/pSyBJlsRxJMIAI9eoPny6B2VOH/wSkfeeVbu
bZ+0ZBLfDIwzQ2Tqn0DZQ8TWHfHPHacA7IxtTRnkSqPTMcDUgZ5/URBE4Tt8p2F2
zDda0NjqMUIJIBkLHRHzApRTK+BcshtarSbGJOr7HUaOb2hyDnQp1bzOMPGpIdTq
YA5EY39SdzzJaF7uto/bhFj6g51kdxux2epbmbaJjUHFUO1+6RAw/irI6hkyzWzi
VS8l6ZpXiaV3Y1pU+Nc60sa4GacYwKvFmvve7DTIYVsPV6KzJmbT924n5TW3191H
JBxRnUUqoWEae/h85pOQiYbJGX/EtXOmy2CZcGm0TkL3vXsAwxiDQyz8NlNyAOI=
=ClSy
-----END PGP SIGNATURE-----

From peter_r at gmx.com  Mon Oct  5 17:33:55 2015
From: peter_r at gmx.com (Peter R)
Date: Mon, 5 Oct 2015 10:33:55 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <5612ACF3.2080006@gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
	<5612ACF3.2080006@gmail.com>
Message-ID: <5570C084-0C2D-4B79-A78E-B25699600EA9@gmx.com>

Dear Bitcoin Development Community:

I would like to share my opinion that Mike is correct regarding the soft fork versus hard fork debate. I agree that CLTV should be done with a hard fork for the reasons that Mike has discussed several times in the past (mainly that a hard forks requires active consensus while a soft fork requires only indifference).  I believe this is a controversial change and?if Core Dev believes that controversial changes to the consensus rules must not happen?then my interpretation is that CLTV should not happen in its current form.  

I also agree with Mike that Core's requirement for unanimous consensus results in development grid lock and should be revisited.  In my opinion, the idea that unanimity is required should be replaced with the idea that the longest chain composed of valid transactions is the correct chain.  It shouldn?t matter really how the chain becomes the longest?only that it does.  

I believe that a good way to return power to the bitcoin community is to foster mutiple forkwise-compatible implementations of the protocol.  Each implementation could have its own governance model and design objectives and use techniques like BIP101?s 750/1000 signalling mechanism to activate changes that may be desirable to the community.  If a super majority does not support the change, then it won?t be activated.  I created an animated GIF that visualizes one possibility for how multiple protocol implementations might emerge over time:

https://www.reddit.com/r/bitcoinxt/comments/3nhq9t/deprecating_bitcoin_core_visualizing_the/ <https://www.reddit.com/r/bitcoinxt/comments/3nhq9t/deprecating_bitcoin_core_visualizing_the/>

Decentralizing development and supporting multiple forkwise-compatible implementations of the protocol is a worthwhile goal that will simultaneously make Bitcoin more robust and more responsive to the will of the market.

Nodes would express their acceptance of a block by mining on top of it.  Consensus would be determined by the code we choose to run. 

Best regards,
Peter 


> On Oct 5, 2015, at 10:01 AM, Paul Sztorc via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> On 10/5/2015 12:56 PM, Mike Hearn via bitcoin-dev wrote:
>> 
>> As everyone in the Bitcoin community has been clearly told that
>> controversial changes to the consensus rules must not happen, it's
>> clear that CLTV cannot happen in its current form.
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/c03eef97/attachment-0001.html>

From btcdrak at gmail.com  Mon Oct  5 17:35:53 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Mon, 5 Oct 2015 18:35:53 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
Message-ID: <CADJgMztrk+EQ7+eBzE1K6SZTJBfbSfj3Ji34HWDkX3H_X4MzWg@mail.gmail.com>

On Mon, Oct 5, 2015 at 5:56 PM, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> CLTV deployment is clearly controversial. Many developers other than me
> have noted that hard forks are cleaner, and have other desirable
> properties. I'm not the only one who sees a big question mark over soft
> forks.
>

No, that is not correct and you are distorting facts to fit your argument.
We have discussed the tradeoffs of each method in general, but that does
not make hard forks or soft forks controversial in an of itself.

There is technical consensus to roll out CLTV by ISM, and if somehow you
are right, it will come out during deployment in much the same way as your
recent attempt at rolling out a controversial hardfork.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/45f8c2cb/attachment.html>

From btcdrak at gmail.com  Mon Oct  5 17:52:25 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Mon, 5 Oct 2015 18:52:25 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <2142297.qudDqxHTIz@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CADJgMzvMLTu8pmOVVJfg5xUWHMWiAcAUJXig2B=qX9Oimu+vGw@mail.gmail.com>
	<2142297.qudDqxHTIz@garp>
Message-ID: <CADJgMzu3oNzyc9AONzPZwH4maxbwV+rZny54JTf06CFLyvjj3w@mail.gmail.com>

On Mon, Oct 5, 2015 at 6:26 PM, Tom Zander via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> History has shown that for many decision making processes this doesn't
> work,
> and this argument has been made to Core.
> Until today this was essentially a rule that hurt the things that Mike was
> really passionate about.
> Today this hurts the things that some other devs are passionate about.
>

If you are referring to some of Mike's PRs that were either refused or
reverted, it was because they where substantial technical objections to
them. This isn't even in the same ballpark.

Surely you see the absurdity of arguing against soft forks after we
successfully used them already for BIP34 and BIP66?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/bc7c4a65/attachment.html>

From nxtchg at hush.com  Mon Oct  5 17:56:20 2015
From: nxtchg at hush.com (NxtChg)
Date: Mon, 05 Oct 2015 20:56:20 +0300
Subject: [bitcoin-dev]
	=?utf-8?q?This_thread_is_not_about_the_soft/hard_fo?=
	=?utf-8?q?rk=09technical_debate?=
In-Reply-To: <5570C084-0C2D-4B79-A78E-B25699600EA9@gmx.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
	<5612ACF3.2080006@gmail.com>
	<5570C084-0C2D-4B79-A78E-B25699600EA9@gmx.com> 
Message-ID: <20151005175620.A0FA720109@smtp.hushmail.com>

>Each implementation could have its own governance model 
>and design objectives and use techniques like BIP101?s 750/1000 
>signalling mechanism to activate changes that may be desirable to 
>the community.

I was shushed here 3 months ago for the same suggestion :)

http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009294.html


From gmaxwell at gmail.com  Mon Oct  5 18:04:48 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 5 Oct 2015 18:04:48 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <2142297.qudDqxHTIz@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CADJgMzvMLTu8pmOVVJfg5xUWHMWiAcAUJXig2B=qX9Oimu+vGw@mail.gmail.com>
	<2142297.qudDqxHTIz@garp>
Message-ID: <CAAS2fgQhWSLSZgNr9rUQ6-iamnh0ZsHdXui59e7xmTa94zYhpw@mail.gmail.com>

On Mon, Oct 5, 2015 at 5:26 PM, Tom Zander via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Monday 5. October 2015 18.03.05 Btc Drak via bitcoin-dev wrote:
>> However, I would like to challenge your assumption of point 1 that that by
>> Mike making a rabble, it somehow makes CLTV deployment controversial. His
>> arguments have  been refuted.
>
> Unsuccessfully.

I think rather successfully. That Mike himself continues to misexplain
things is not surprising since he has all but outright said that his
motivation here is to disrupt Bitcoin in order to try to force his
blocksize hardfork on people. Since this motivation is uncorrelated
with any property of soft-forks or CLTV we should not expect his
position to change.

> The point is that Bitcoin Core claims to have a consensus mechanism and sticks
> to "no change" on not reaching a consensus. And that rule is the reason why
> bigger blocks were blocked for years.

You're repeating Mike's claims there-- not anyone elses. Take your
complaint up with him-- not the list.

From matias at bitpay.com  Mon Oct  5 18:04:44 2015
From: matias at bitpay.com (Matias Alejo Garcia)
Date: Mon, 5 Oct 2015 15:04:44 -0300
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <56126AB0.3030107@haskoin.com>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
	<560FCD30.9020902@haskoin.com> <5611432F.5070209@haskoin.com>
	<561160EB.30505@gmail.com>
	<CA+vKqYeBDHEGRgCsuAp3wQKb9idH085e5K3uNdeRLFvc9MTpdQ@mail.gmail.com>
	<56126AB0.3030107@haskoin.com>
Message-ID: <CA+vKqYcqYS4_0aDK_=TtVsEDVMhJzDmtHvzm6YRdNFX2mhztgg@mail.gmail.com>

On Mon, Oct 5, 2015 at 9:18 AM, Jean-Pierre Rupp <root at haskoin.com> wrote:
>
> Perhaps Pedro wants to also participate in a 2-of-2 cosigning
> arrangement with a merchant that will deliver a laptop to him, so Pedro
> provides this merchant with the same extended public key derived from
> path m/45', and the merchant provides Pedro with his own:
>
> Pedro: xpub456...
> ElCheapoPC: xpub987...
>


Thanks for the explanation. OK, maybe that should be stated on BIP45, but
it was never the idea that you reuse your xpub for different wallet, as I
mention
on the original reply. The only implementation of BIP45 I am aware of
(Copay),
use completely different xprivs for each wallet.



>
> On 05/10/15 07:57, Matias Alejo Garcia wrote:
> >
> > Hi,
> >
> > Sorry the late response. Going back to the original message:
> >
> >
> >     > On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:
> >     >> I have been reviewing BIP-45 today.  There is a privacy problem
> >     with it
> >     >> that should at least be mentioned in the document.
> >     >>
> >     >> When using the same extended public key for all multisig
> >     activity, and
> >     >> dealing with different cosigners in separate multisig accounts,
> >     reuse of
> >     >> the same set of public keys means that all cosigners from all
> >     accounts
> >     >> will be able to monitor multisig activity from every other
> >     cosigner, in
> >     >> every other account.
> >
> >
> > I am not completely sure what you mean by 'account' and 'mutisig
> > activity'. You seem to imply
> > that the same set of extended public keys will be used in more that one
> > wallet, which it is
> > not required (and certainly not recommended) by BIP45.
> >
> > According to BIP45, a singing party, in order to generate a wallet
> > address, needs the extended public keys of all the other parties, so
> > each party will be able to see the transaction history of the wallet
> > they are sharing, but if the party has other wallets with other copayers
> > the xpub should be completely different.
> >
> > mat?as
> >
> >
> >
> > --
> > BitPay.com
>



-- 
BitPay.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/62a9eebf/attachment.html>

From gmaxwell at gmail.com  Mon Oct  5 18:35:13 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 5 Oct 2015 18:35:13 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>

On Mon, Oct 5, 2015 at 3:56 PM, Sergio Demian Lerner via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> 1) ignores him, which is against the established criteria that all technical
> objections coming from anyone must be addressed until that person agrees, so
> that a change can be uncontroversial. If the group moves forward with the
> change, then the "uncontroversial" criteria is violated and then credibility
> is lost. So a new governance model would be required for which the change is
> within the established rules.
>
> 2) respond to his technical objections one after the other, on never ending
> threads, bringing the project to a standstill.

I don't agree-- I think you've made the mistake of just accepting the
particular framing that Mike has provide; one that (no shock) only
supports his conclusions.

I am aware of no instance where an active contributor to core has made
the claim that no change to consensus can happen without 100% support
(and doubly so, 100% including people who are expressly trying to
disrupt the project by posing opposition which, as you note, is
largely unrelated to the merits of the proposals). Mike has lead you
to believe people have claimed this, but no one has-- it's a view
which is simple, clear, and completely not reflecting reality. Don't
fall for strawman arguments.

In this situation it is also a particularly strong apples/oranges comparison:

Soft forks can happen at any time at the whim of miners-- no
technology which we are aware of (beyond the technology of
centralization) is able to prevent them-- they are not necessarily
even detectable; on this basis they are categorically different than
hard forks.

Moreover, the space of soft-forks the contributors to Bitcoin Core
would ever consider is a tiny space of all possible soft-forks, and
are ones which cannot be rationally understood to meaningfully
undermine the properties provided by the rules enforced within the
software; again making them different from some other proposals and of
a lesser concern.

Finally, the behavior of the technology arising from the inherent
compatibility, radically lowers (in most of our experience and
opinion) the cost of deployment; again-- making them different. They
prevent a industry wide flag day, and tight release synchronization
which is harmful to decentralization promoting software diversity.

As I think I commented in one of my messages-- I respond to the
technical arguments not because I believe they are earnestly
motivated, but because they provide an avenue for learning for myself
and others. Even someone trying to disrupt the process and nothing
else can help us learn by acting as an adversary that causes us to
extend our minds and understanding. The process for CLTV has been
ongoing for something like a year and a half and has little risk of
being substantially disrupted at this point.

From tomz at freedommail.ch  Mon Oct  5 18:33:00 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Mon, 05 Oct 2015 19:33 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAAS2fgQhWSLSZgNr9rUQ6-iamnh0ZsHdXui59e7xmTa94zYhpw@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2142297.qudDqxHTIz@garp>
	<CAAS2fgQhWSLSZgNr9rUQ6-iamnh0ZsHdXui59e7xmTa94zYhpw@mail.gmail.com>
Message-ID: <10955467.d0sKIOBqLD@garp>

On Monday 5. October 2015 18.04.48 Gregory Maxwell wrote:
> > Unsuccessfully.
> 
> I think rather successfully.

Arguing that BIP66 rollout was a full success is in the same park of 
"successful" ?
Where for weeks people were told not to trust the longest chain until it was 
30 blocks.
Lets put that in perspective. The main functionality of Bitcoin  
Frankly, if that fiasco happened in a company, people would get fired for 
gross misconduct.

Bottom line is that there is a horrible track record of doing soft forks in 
the past, there are some really good technical reasons why this should not 
happen again. 

And the defence against this argument is to do character assassination because 
you think he has ulterior motives?  Like you say in this part;

> That Mike himself continues to misexplain
> things is not surprising since he has all but outright said that his
> motivation here is to disrupt Bitcoin in order to try to force his
> blocksize hardfork on people. 

"all but outright said" is still not said. Is still just a suspicion you have. 
And you are accusing a man of something he didn't do.
That?s just not right.

> > The point is that Bitcoin Core claims to have a consensus mechanism and
> > sticks to "no change" on not reaching a consensus. And that rule is the
> > reason why bigger blocks were blocked for years.
> 
> You're repeating Mike's claims there-- not anyone elses. Take your
> complaint up with him-- not the list.

There is no complaint. Why do you think there is?
Are you claiming that not reaching consensus is NOT the reason that bigger 
blocks are not in Bitcoin Core?


Reaching consensus is an admirable goal. But its exactly that, a goal.
And anyone that is a perfectionist will know that in the real world goals are 
often not reached. That doesn't make them less useful. That makes them goals.
This specific goal is in conflict of building a good product and a well 
functioning community.

A good product and a well functioning community needs rules and needs timely 
decisions and conflict resolution.
It does not need muting of valuable voices, it does not need character 
assassinations and it really doesn't need egos.

I suggest reading this book;
http://www.artofcommunityonline.org/



From morcos at gmail.com  Mon Oct  5 18:45:57 2015
From: morcos at gmail.com (Alex Morcos)
Date: Mon, 5 Oct 2015 14:45:57 -0400
Subject: [bitcoin-dev] Proposed new policy for transactions that depend
 on other unconfirmed transactions
In-Reply-To: <CAPWm=eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ@mail.gmail.com>
References: <CAPWm=eWuvC8zYM_ipAnaQttKQQG2Vas6np_bAFkxG31eR5w=xQ@mail.gmail.com>
	<55D77A7F.40402@mattcorallo.com>
	<CAJN5wHVzzo-dD6FFyaydEDm27HK2OkWxC0o0Pxcy-N9wTfv8Gw@mail.gmail.com>
	<CAPWm=eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ@mail.gmail.com>
Message-ID: <CAPWm=eVVdyYxePrXur17P=FdMpUvNmByz30hey5=R46PQPhf-Q@mail.gmail.com>

I'd like to propose updates to the new policy limits on unconfirmed
transaction chains.

The existing limits in master and scheduled for release in 0.12 are:
Ancestor packages = 100 txs and 900kb total size
Descendant packages = 1000 txs and 2500kb total size

Before 0.12 is released I would like to propose a significant reduction in
these limits. In the course of analyzing algorithms for mempool limiting,
it became clear that large packages of unconfirmed transactions were the
primary vector for mempool clogging or relay fee boosting attacks. Feedback
from the initial proposed limits was that they were too generous anyway.

The proposed new limits are:
Ancestor packages = 25 txs and 100kb total size
Descendant packages = 25 txs and 100kb total size

Based on historical transaction data, the most restrictive of these limits
is the 25 transaction count on descendant packages. Over the period of
April and May of this year (before stress tests), 5.8% of transactions
would have violated this limit alone. Applying all the limits together
would have affected 6.1% of transactions.

Please keep in mind these are policy limits that affect transactions which
depend on other unconfirmed transactions only. They are not a change to
consensus rules and do not affect how many chained txs a valid block may
contain. Furthermore, any transaction that was unable to be relayed due to
these limits need only wait for some of its unconfirmed ancestors to be
included in a block and then it could be successfully broadcast. This is
unlikely to affect the total time from creation to inclusion in a block.
Finally, these limits are command line arguments that can easily be changed
on an individual node basis in Bitcoin Core.

Please give your feedback if you know of legitimate use cases that would be
hindered by these limits.

Thanks,
Alex

On Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com> wrote:

> Thanks for everyone's review.  These policy changes have been merged in to
> master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which just
> implements these limits and no mempool limiting yet.  The default ancestor
> package size limit is 900kb not 1MB.
>
> Yes I think these limits are generous, but they were designed to be as
> generous as was computationally feasible so they were unobjectionable
> (since the existing policy was no limits).  This does not preclude future
> changes to policy that would reduce these limits.
>
>
>
>
>
> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>
> wrote:
>
>> The limits Alex proposed are generous (bordering on obscene!), but
>> dropping that down to allowing only two levels of chained unconfirmed
>> transactions is too tight.
>>
>> Use case: Brokered asset transfers may require sets of transactions with
>> a dependency tree depth of 3 to be published together. ( N seller txs, 1
>> broker bridge tx, M buyer txs )
>>
>> If the originally proposed depth limit of 100 does not provide a
>> sufficient cap on memory consumption or loop/recursion depth, a depth limit
>> of 10 would provide plenty of headroom for this 3 level use case and
>> similar patterns.
>>
>> -Danny
>>
>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> I dont see any problem with such limits. Though, hell, if you limited
>>> entire tx dependency trees (ie transactions and all required unconfirmed
>>> transactions for them) to something like 10 txn, maximum two levels
>>> deep, I also wouldnt have a problem.
>>>
>>> Matt
>>>
>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:
>>> > Hi everyone,
>>> >
>>> >
>>> > I'd like to propose a new set of requirements as a policy on when to
>>> > accept new transactions into the mempool and relay them.  This policy
>>> > would affect transactions which have as inputs other transactions which
>>> > are not yet confirmed in the blockchain.
>>> >
>>> > The motivation for this policy is 6470
>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit the
>>> > size of a mempool.  As discussed in that pull
>>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736>,
>>> > once the mempool is full a new transaction must be able to pay not only
>>> > for the transaction it would evict, but any dependent transactions that
>>> > would be removed from the mempool as well.  In order to make sure this
>>> > is always feasible, I'm proposing 4 new policy limits.
>>> >
>>> > All limits are command line configurable.
>>> >
>>> > The first two limits are required to make sure no chain of transactions
>>> > will be too large for the eviction code to handle:
>>> >
>>> > Max number of descendant txs : No transaction shall be accepted if it
>>> > would cause another transaction in the mempool to have too many
>>> > descendant transactions (all of which would have to be evicted if the
>>> > ancestor transaction was evicted).  Default: 1000
>>> >
>>> > Max descendant size : No transaction shall be accepted if it would
>>> cause
>>> > another transaction in the mempool to have the total size of all its
>>> > descendant transactions be too great.  Default : maxmempool / 200  =
>>> 2.5MB
>>> >
>>> > The third limit is required to make sure calculating the state required
>>> > for sorting and limiting the mempool and enforcing the first 2 limits
>>> is
>>> > computationally feasible:
>>> >
>>> > Max number of ancestor txs:  No transaction shall be accepted if it has
>>> > too many ancestor transactions which are not yet confirmed (ie, in the
>>> > mempool). Default: 100
>>> >
>>> > The fourth limit is required to maintain the pre existing policy goal
>>> > that all transactions in the mempool should be mineable in the next
>>> block.
>>> >
>>> > Max ancestor size: No transaction shall be accepted if the total size
>>> of
>>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB
>>> >
>>> > (All limits include the transaction itself.)
>>> >
>>> > For reference, these limits would have affected less than 2% of
>>> > transactions entering the mempool in April or May of this year.  During
>>> > the period of 7/6 through 7/14, while the network was under stress
>>> test,
>>> > as many as 25% of the transactions would have been affected.
>>> >
>>> > The code to implement the descendant package tracking and new policy
>>> > limits can be found in 6557
>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off of
>>> 6470.
>>> >
>>> > Thanks,
>>> > Alex
>>> >
>>> >
>>> >
>>> > _______________________________________________
>>> > bitcoin-dev mailing list
>>> > bitcoin-dev at lists.linuxfoundation.org
>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>> >
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/6e2a78a3/attachment.html>

From not.mike.hearn at gmail.com  Mon Oct  5 18:50:54 2015
From: not.mike.hearn at gmail.com (NotMike Hearn)
Date: Mon, 5 Oct 2015 14:50:54 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <10955467.d0sKIOBqLD@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2142297.qudDqxHTIz@garp>
	<CAAS2fgQhWSLSZgNr9rUQ6-iamnh0ZsHdXui59e7xmTa94zYhpw@mail.gmail.com>
	<10955467.d0sKIOBqLD@garp>
Message-ID: <CAKfs=Z8=wHee9aMaezbMArj2AOE1xEVFHR4_BY6ahtAoz1yfdw@mail.gmail.com>

For soft forks, consensus is required. In fact, we (today) have miners who
individually choose to mine blocks that are completely empty, with no known
input from (or communication with) the outside world. This is a consensus
process. Users can switch back and forth all they like, and this only
happens when there is unanimous miner-developer consensus. Most of the time
they don't even know, that they are under consensus.

It is only "controversial hard forks" which DON'T require wide agreement
and developer endorsements. Hear me out.

This is because, with zero dev-agreement, we have two benefits: first,
there are tremendous security issues which can be fixed by trying more than
one hard fork at once (these fixes can prevent loss of funds), and, second,
because each fork is equally Acked and Nacked (a Schrodinger's Ack, if you
will), they will have equal standing, and therefore users will be equally
indifferent to both forks and they will both live for a long time (and
users will be able to pick the fork that best fits them, empowering the
user).

People have overlooked how simple this issue is because of the political
climate. We need a climate change, pardon the pun.

On Mon, Oct 5, 2015 at 2:33 PM, Tom Zander via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Monday 5. October 2015 18.04.48 Gregory Maxwell wrote:
> > > Unsuccessfully.
> >
> > I think rather successfully.
>
> Arguing that BIP66 rollout was a full success is in the same park of
> "successful" ?
> Where for weeks people were told not to trust the longest chain until it
> was
> 30 blocks.
> Lets put that in perspective. The main functionality of Bitcoin
> Frankly, if that fiasco happened in a company, people would get fired for
> gross misconduct.
>
> Bottom line is that there is a horrible track record of doing soft forks in
> the past, there are some really good technical reasons why this should not
> happen again.
>
> And the defence against this argument is to do character assassination
> because
> you think he has ulterior motives?  Like you say in this part;
>
> > That Mike himself continues to misexplain
> > things is not surprising since he has all but outright said that his
> > motivation here is to disrupt Bitcoin in order to try to force his
> > blocksize hardfork on people.
>
> "all but outright said" is still not said. Is still just a suspicion you
> have.
> And you are accusing a man of something he didn't do.
> That?s just not right.
>
> > > The point is that Bitcoin Core claims to have a consensus mechanism and
> > > sticks to "no change" on not reaching a consensus. And that rule is the
> > > reason why bigger blocks were blocked for years.
> >
> > You're repeating Mike's claims there-- not anyone elses. Take your
> > complaint up with him-- not the list.
>
> There is no complaint. Why do you think there is?
> Are you claiming that not reaching consensus is NOT the reason that bigger
> blocks are not in Bitcoin Core?
>
>
> Reaching consensus is an admirable goal. But its exactly that, a goal.
> And anyone that is a perfectionist will know that in the real world goals
> are
> often not reached. That doesn't make them less useful. That makes them
> goals.
> This specific goal is in conflict of building a good product and a well
> functioning community.
>
> A good product and a well functioning community needs rules and needs
> timely
> decisions and conflict resolution.
> It does not need muting of valuable voices, it does not need character
> assassinations and it really doesn't need egos.
>
> I suggest reading this book;
> http://www.artofcommunityonline.org/
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/ff7bea8c/attachment-0001.html>

From danny.thorpe at gmail.com  Mon Oct  5 18:51:23 2015
From: danny.thorpe at gmail.com (Danny Thorpe)
Date: Mon, 5 Oct 2015 11:51:23 -0700
Subject: [bitcoin-dev] Proposed new policy for transactions that depend
 on other unconfirmed transactions
In-Reply-To: <CAPWm=eVVdyYxePrXur17P=FdMpUvNmByz30hey5=R46PQPhf-Q@mail.gmail.com>
References: <CAPWm=eWuvC8zYM_ipAnaQttKQQG2Vas6np_bAFkxG31eR5w=xQ@mail.gmail.com>
	<55D77A7F.40402@mattcorallo.com>
	<CAJN5wHVzzo-dD6FFyaydEDm27HK2OkWxC0o0Pxcy-N9wTfv8Gw@mail.gmail.com>
	<CAPWm=eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ@mail.gmail.com>
	<CAPWm=eVVdyYxePrXur17P=FdMpUvNmByz30hey5=R46PQPhf-Q@mail.gmail.com>
Message-ID: <CAJN5wHXJkFefminbnY6O93PUkQKCyLpvM57TCp+4q6p6CEzhzg@mail.gmail.com>

What does "package" mean here?

When you say 25 txs, does that mean maximum linked chain depth, or total
number of dependent transactions regardless of chain depth?

Thanks,
-Danny



On Mon, Oct 5, 2015 at 11:45 AM, Alex Morcos via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I'd like to propose updates to the new policy limits on unconfirmed
> transaction chains.
>
> The existing limits in master and scheduled for release in 0.12 are:
> Ancestor packages = 100 txs and 900kb total size
> Descendant packages = 1000 txs and 2500kb total size
>
> Before 0.12 is released I would like to propose a significant reduction in
> these limits. In the course of analyzing algorithms for mempool limiting,
> it became clear that large packages of unconfirmed transactions were the
> primary vector for mempool clogging or relay fee boosting attacks. Feedback
> from the initial proposed limits was that they were too generous anyway.
>
> The proposed new limits are:
> Ancestor packages = 25 txs and 100kb total size
> Descendant packages = 25 txs and 100kb total size
>
> Based on historical transaction data, the most restrictive of these limits
> is the 25 transaction count on descendant packages. Over the period of
> April and May of this year (before stress tests), 5.8% of transactions
> would have violated this limit alone. Applying all the limits together
> would have affected 6.1% of transactions.
>
> Please keep in mind these are policy limits that affect transactions which
> depend on other unconfirmed transactions only. They are not a change to
> consensus rules and do not affect how many chained txs a valid block may
> contain. Furthermore, any transaction that was unable to be relayed due to
> these limits need only wait for some of its unconfirmed ancestors to be
> included in a block and then it could be successfully broadcast. This is
> unlikely to affect the total time from creation to inclusion in a block.
> Finally, these limits are command line arguments that can easily be changed
> on an individual node basis in Bitcoin Core.
>
> Please give your feedback if you know of legitimate use cases that would
> be hindered by these limits.
>
> Thanks,
> Alex
>
> On Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com> wrote:
>
>> Thanks for everyone's review.  These policy changes have been merged in
>> to master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which
>> just implements these limits and no mempool limiting yet.  The default
>> ancestor package size limit is 900kb not 1MB.
>>
>> Yes I think these limits are generous, but they were designed to be as
>> generous as was computationally feasible so they were unobjectionable
>> (since the existing policy was no limits).  This does not preclude future
>> changes to policy that would reduce these limits.
>>
>>
>>
>>
>>
>> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>
>> wrote:
>>
>>> The limits Alex proposed are generous (bordering on obscene!), but
>>> dropping that down to allowing only two levels of chained unconfirmed
>>> transactions is too tight.
>>>
>>> Use case: Brokered asset transfers may require sets of transactions with
>>> a dependency tree depth of 3 to be published together. ( N seller txs, 1
>>> broker bridge tx, M buyer txs )
>>>
>>> If the originally proposed depth limit of 100 does not provide a
>>> sufficient cap on memory consumption or loop/recursion depth, a depth limit
>>> of 10 would provide plenty of headroom for this 3 level use case and
>>> similar patterns.
>>>
>>> -Danny
>>>
>>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>
>>>> I dont see any problem with such limits. Though, hell, if you limited
>>>> entire tx dependency trees (ie transactions and all required unconfirmed
>>>> transactions for them) to something like 10 txn, maximum two levels
>>>> deep, I also wouldnt have a problem.
>>>>
>>>> Matt
>>>>
>>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:
>>>> > Hi everyone,
>>>> >
>>>> >
>>>> > I'd like to propose a new set of requirements as a policy on when to
>>>> > accept new transactions into the mempool and relay them.  This policy
>>>> > would affect transactions which have as inputs other transactions
>>>> which
>>>> > are not yet confirmed in the blockchain.
>>>> >
>>>> > The motivation for this policy is 6470
>>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit
>>>> the
>>>> > size of a mempool.  As discussed in that pull
>>>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736
>>>> >,
>>>> > once the mempool is full a new transaction must be able to pay not
>>>> only
>>>> > for the transaction it would evict, but any dependent transactions
>>>> that
>>>> > would be removed from the mempool as well.  In order to make sure this
>>>> > is always feasible, I'm proposing 4 new policy limits.
>>>> >
>>>> > All limits are command line configurable.
>>>> >
>>>> > The first two limits are required to make sure no chain of
>>>> transactions
>>>> > will be too large for the eviction code to handle:
>>>> >
>>>> > Max number of descendant txs : No transaction shall be accepted if it
>>>> > would cause another transaction in the mempool to have too many
>>>> > descendant transactions (all of which would have to be evicted if the
>>>> > ancestor transaction was evicted).  Default: 1000
>>>> >
>>>> > Max descendant size : No transaction shall be accepted if it would
>>>> cause
>>>> > another transaction in the mempool to have the total size of all its
>>>> > descendant transactions be too great.  Default : maxmempool / 200  =
>>>> 2.5MB
>>>> >
>>>> > The third limit is required to make sure calculating the state
>>>> required
>>>> > for sorting and limiting the mempool and enforcing the first 2 limits
>>>> is
>>>> > computationally feasible:
>>>> >
>>>> > Max number of ancestor txs:  No transaction shall be accepted if it
>>>> has
>>>> > too many ancestor transactions which are not yet confirmed (ie, in the
>>>> > mempool). Default: 100
>>>> >
>>>> > The fourth limit is required to maintain the pre existing policy goal
>>>> > that all transactions in the mempool should be mineable in the next
>>>> block.
>>>> >
>>>> > Max ancestor size: No transaction shall be accepted if the total size
>>>> of
>>>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB
>>>> >
>>>> > (All limits include the transaction itself.)
>>>> >
>>>> > For reference, these limits would have affected less than 2% of
>>>> > transactions entering the mempool in April or May of this year.
>>>> During
>>>> > the period of 7/6 through 7/14, while the network was under stress
>>>> test,
>>>> > as many as 25% of the transactions would have been affected.
>>>> >
>>>> > The code to implement the descendant package tracking and new policy
>>>> > limits can be found in 6557
>>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off of
>>>> 6470.
>>>> >
>>>> > Thanks,
>>>> > Alex
>>>> >
>>>> >
>>>> >
>>>> > _______________________________________________
>>>> > bitcoin-dev mailing list
>>>> > bitcoin-dev at lists.linuxfoundation.org
>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>> >
>>>> _______________________________________________
>>>> bitcoin-dev mailing list
>>>> bitcoin-dev at lists.linuxfoundation.org
>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>
>>>
>>>
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/a1640a71/attachment.html>

From tomz at freedommail.ch  Mon Oct  5 18:51:26 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Mon, 05 Oct 2015 19:51:26 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <5612B450.3040703@sky-ip.org>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<5612B450.3040703@sky-ip.org>
Message-ID: <5064742.QS0Fsqp6LJ@garp>

On Monday 5. October 2015 20.33.04 s7r via bitcoin-dev wrote:
> For example, I don't see this controversial nor a violation of the BIP
> requirements. Mike had some fair objections, they were explained by
> gmaxwell and Jorge, everybody understood. The explanation is clear,
> with plausible practical examples, so from my point of view the
> objections have no arguments to sustain the claim.

I enjoyed reading them, but I have to admit I'm not convinced and for me the 
objections stand.

Softforks are unnecessarily dangerous and I feel entirely avoidable. It is a 
risk that not worth taking.

From tomz at freedommail.ch  Mon Oct  5 19:13:35 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Mon, 05 Oct 2015 20:13:35 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
Message-ID: <1489086.kGfJeeyi4a@garp>

Gregory,

you are good at language and its easy to write eloquent words.

Looking at this little dialog, for instance;

On Mon, Oct 5, 2015 at 3:56 PM, Sergio Demian Lerner wrote:
> > 1) ignores him, which is against the established criteria that all
> > technical objections coming from anyone must be addressed until that
> > person agrees, so that a change can be uncontroversial.
[snip]
On Monday 5. October 2015 18.35.13 Gregory Maxwell via bitcoin-dev wrote:
> I am aware of no instance where an active contributor to core has made
> the claim that no change to consensus can happen without 100% support

This *seems* to read like the same thing. But it is not.  Your version is more 
polarizing and changes the intent quite dramatically.

It is an eloquent change, but not really the topic we were discussing. It also 
makes you attack Mike (calling him out as having a strawman) without basis.
For the second time in this thread. 
I would suggest arguing on the topic, not on the man.


From root at haskoin.com  Mon Oct  5 19:36:05 2015
From: root at haskoin.com (Jean-Pierre Rupp)
Date: Mon, 5 Oct 2015 20:36:05 +0100
Subject: [bitcoin-dev] [Bitcoin-development] New BIP32 structure for
 P2SH multisig wallets [BIP-45]
In-Reply-To: <56126DF8.20602@jonasschnelli.ch>
References: <CABQSq2Q98K5zbUbQAqSE4OYez2QuOaWTt+9n5iZmSR2boynf_Q@mail.gmail.com>
	<560FCD30.9020902@haskoin.com> <5611432F.5070209@haskoin.com>
	<561160EB.30505@gmail.com>
	<CA+vKqYeBDHEGRgCsuAp3wQKb9idH085e5K3uNdeRLFvc9MTpdQ@mail.gmail.com>
	<56126AB0.3030107@haskoin.com> <56126DF8.20602@jonasschnelli.ch>
Message-ID: <5612D125.8000102@haskoin.com>

Sure,

You always have these alternatives, but the problem is that it starts to
become harder to restore your wallet from the initial mnemonic if
something goes wrong.

Say you lose all your wallet information except for your mnemonic,
extended public keys from all people you established multi-signature
accounts with, and you know which arrangement you had with each of your
cosigners (2-of-3, 2-of-2, etc.).  Your software will not have a hard
time rebuilding all accounts from information obtained from the public
blockchain.  Adding a new dimension, here the i' derivation, will make
things harder.  You would need to know this piece of data too.

Another good thing about using the same derivation always is that you
can give every cosigner only that single piece of information, that
single xpub, in order to establish multisig relationships.  There is no
need to use a different one per relationship.  This simplifies the
workflow for establishing new multi-signature accounts significantly.

Greetings

On 05/10/15 13:32, Jonas Schnelli wrote:
> What holds you back from using m/i'/45' where i' is your multisig
> "account" number?
> 
> Within your BIP45 wallet (lets assume Copay), you would not provide
> the xpubkey at m/45', instead you would provide your xpubkey at m/i'/45'
> .
> 
> It's probably no longer pure BIP45.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/2cb6453b/attachment-0001.sig>

From milly at bitcoins.info  Mon Oct  5 19:36:50 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 5 Oct 2015 15:36:50 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
Message-ID: <5612D152.2030601@bitcoins.info>

>Even someone trying to disrupt the process and nothing
> else can help us learn by acting as an adversary that causes us to
> extend our minds and understanding.

Interesting use of terms for a decentralized system.  Can these terms be 
defined?

"the process"

"us" (is there also a "them"?)


Russ






From gmaxwell at gmail.com  Mon Oct  5 19:41:30 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 5 Oct 2015 19:41:30 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <1489086.kGfJeeyi4a@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
Message-ID: <CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>

On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> It is an eloquent change, but not really the topic we were discussing. It also
> makes you attack Mike (calling him out as having a strawman) without basis.
> For the second time in this thread.
> I would suggest arguing on the topic, not on the man.

Such a shame you appear to reserve that wisdom for those you disagree
with, biting your tongue when others emit all forms of ad hominem--
such as suggesting we've spent less volunteer time on Bitcoin and thus
our opinion has less merit (or that we haven't written certian kinds
of software (even when, ironically, we have!), and thus our opinion
doesn't have merit, and so on). I think everyone would benefit from
it, especially as that kind of correction is best received from
someone who agrees with you.

In this case, I think, however your correction is also misplaced at
least on this message; though I would otherwise welcome it.  I'm not
complaining about the man; but pointing out the behavior of stating an
opinion no one as held as theirs and attacking it is not a productive
way to hold a discussion. It's an argument or a behavior, not a
person, and beyond calling it bad I attempted to explaining (perhaps
poorly) why its bad.

What Sergio is saying is not the same; Mike argued some established
criteria existed where it didn't-- and I was pointing that out; and
talking about how the situation here is not very similar to the one
that Mike was trying to draw a parallel to. I enumerated a number of
specific reasons why this is the case. If the differences between
Sergio's comments and mine are still unclear after this clarification,
I'd be glad to talk it through with you off-list-- in spite of your
(welcome) compliments, communication is just fundamentally difficult,
and no amount eloquence changes that. If there is continued
misunderstanding, I do not doubt its my fault; but it's probably not a
good use of hundreds/thousands of people's time for you to help me
interactively improve my explanation on list. :)

From morcos at gmail.com  Mon Oct  5 20:02:40 2015
From: morcos at gmail.com (Alex Morcos)
Date: Mon, 5 Oct 2015 16:02:40 -0400
Subject: [bitcoin-dev] Proposed new policy for transactions that depend
 on other unconfirmed transactions
In-Reply-To: <CAJN5wHXJkFefminbnY6O93PUkQKCyLpvM57TCp+4q6p6CEzhzg@mail.gmail.com>
References: <CAPWm=eWuvC8zYM_ipAnaQttKQQG2Vas6np_bAFkxG31eR5w=xQ@mail.gmail.com>
	<55D77A7F.40402@mattcorallo.com>
	<CAJN5wHVzzo-dD6FFyaydEDm27HK2OkWxC0o0Pxcy-N9wTfv8Gw@mail.gmail.com>
	<CAPWm=eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ@mail.gmail.com>
	<CAPWm=eVVdyYxePrXur17P=FdMpUvNmByz30hey5=R46PQPhf-Q@mail.gmail.com>
	<CAJN5wHXJkFefminbnY6O93PUkQKCyLpvM57TCp+4q6p6CEzhzg@mail.gmail.com>
Message-ID: <CAPWm=eWfnuW98aLhaULCM5BAXThOz1E_APLC+Yd2uOJ4-B4PsA@mail.gmail.com>

Yes, total number of dependent transactions regardless of chain depth.

A descendant package means all the transactions that can not be included in
a block before the transaction in question.

An ancestor package means all the transactions that are required to be
included in a block before the transaction in question can be.




On Mon, Oct 5, 2015 at 2:51 PM, Danny Thorpe <danny.thorpe at gmail.com> wrote:

> What does "package" mean here?
>
> When you say 25 txs, does that mean maximum linked chain depth, or total
> number of dependent transactions regardless of chain depth?
>
> Thanks,
> -Danny
>
>
>
> On Mon, Oct 5, 2015 at 11:45 AM, Alex Morcos via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> I'd like to propose updates to the new policy limits on unconfirmed
>> transaction chains.
>>
>> The existing limits in master and scheduled for release in 0.12 are:
>> Ancestor packages = 100 txs and 900kb total size
>> Descendant packages = 1000 txs and 2500kb total size
>>
>> Before 0.12 is released I would like to propose a significant reduction
>> in these limits. In the course of analyzing algorithms for mempool
>> limiting, it became clear that large packages of unconfirmed transactions
>> were the primary vector for mempool clogging or relay fee boosting attacks.
>> Feedback from the initial proposed limits was that they were too generous
>> anyway.
>>
>> The proposed new limits are:
>> Ancestor packages = 25 txs and 100kb total size
>> Descendant packages = 25 txs and 100kb total size
>>
>> Based on historical transaction data, the most restrictive of these
>> limits is the 25 transaction count on descendant packages. Over the period
>> of April and May of this year (before stress tests), 5.8% of transactions
>> would have violated this limit alone. Applying all the limits together
>> would have affected 6.1% of transactions.
>>
>> Please keep in mind these are policy limits that affect transactions
>> which depend on other unconfirmed transactions only. They are not a change
>> to consensus rules and do not affect how many chained txs a valid block may
>> contain. Furthermore, any transaction that was unable to be relayed due to
>> these limits need only wait for some of its unconfirmed ancestors to be
>> included in a block and then it could be successfully broadcast. This is
>> unlikely to affect the total time from creation to inclusion in a block.
>> Finally, these limits are command line arguments that can easily be changed
>> on an individual node basis in Bitcoin Core.
>>
>> Please give your feedback if you know of legitimate use cases that would
>> be hindered by these limits.
>>
>> Thanks,
>> Alex
>>
>> On Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com> wrote:
>>
>>> Thanks for everyone's review.  These policy changes have been merged in
>>> to master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which
>>> just implements these limits and no mempool limiting yet.  The default
>>> ancestor package size limit is 900kb not 1MB.
>>>
>>> Yes I think these limits are generous, but they were designed to be as
>>> generous as was computationally feasible so they were unobjectionable
>>> (since the existing policy was no limits).  This does not preclude future
>>> changes to policy that would reduce these limits.
>>>
>>>
>>>
>>>
>>>
>>> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>
>>> wrote:
>>>
>>>> The limits Alex proposed are generous (bordering on obscene!), but
>>>> dropping that down to allowing only two levels of chained unconfirmed
>>>> transactions is too tight.
>>>>
>>>> Use case: Brokered asset transfers may require sets of transactions
>>>> with a dependency tree depth of 3 to be published together. ( N seller txs,
>>>> 1 broker bridge tx, M buyer txs )
>>>>
>>>> If the originally proposed depth limit of 100 does not provide a
>>>> sufficient cap on memory consumption or loop/recursion depth, a depth limit
>>>> of 10 would provide plenty of headroom for this 3 level use case and
>>>> similar patterns.
>>>>
>>>> -Danny
>>>>
>>>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <
>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>>
>>>>> I dont see any problem with such limits. Though, hell, if you limited
>>>>> entire tx dependency trees (ie transactions and all required
>>>>> unconfirmed
>>>>> transactions for them) to something like 10 txn, maximum two levels
>>>>> deep, I also wouldnt have a problem.
>>>>>
>>>>> Matt
>>>>>
>>>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:
>>>>> > Hi everyone,
>>>>> >
>>>>> >
>>>>> > I'd like to propose a new set of requirements as a policy on when to
>>>>> > accept new transactions into the mempool and relay them.  This policy
>>>>> > would affect transactions which have as inputs other transactions
>>>>> which
>>>>> > are not yet confirmed in the blockchain.
>>>>> >
>>>>> > The motivation for this policy is 6470
>>>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit
>>>>> the
>>>>> > size of a mempool.  As discussed in that pull
>>>>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736
>>>>> >,
>>>>> > once the mempool is full a new transaction must be able to pay not
>>>>> only
>>>>> > for the transaction it would evict, but any dependent transactions
>>>>> that
>>>>> > would be removed from the mempool as well.  In order to make sure
>>>>> this
>>>>> > is always feasible, I'm proposing 4 new policy limits.
>>>>> >
>>>>> > All limits are command line configurable.
>>>>> >
>>>>> > The first two limits are required to make sure no chain of
>>>>> transactions
>>>>> > will be too large for the eviction code to handle:
>>>>> >
>>>>> > Max number of descendant txs : No transaction shall be accepted if it
>>>>> > would cause another transaction in the mempool to have too many
>>>>> > descendant transactions (all of which would have to be evicted if the
>>>>> > ancestor transaction was evicted).  Default: 1000
>>>>> >
>>>>> > Max descendant size : No transaction shall be accepted if it would
>>>>> cause
>>>>> > another transaction in the mempool to have the total size of all its
>>>>> > descendant transactions be too great.  Default : maxmempool / 200
>>>>> =  2.5MB
>>>>> >
>>>>> > The third limit is required to make sure calculating the state
>>>>> required
>>>>> > for sorting and limiting the mempool and enforcing the first 2
>>>>> limits is
>>>>> > computationally feasible:
>>>>> >
>>>>> > Max number of ancestor txs:  No transaction shall be accepted if it
>>>>> has
>>>>> > too many ancestor transactions which are not yet confirmed (ie, in
>>>>> the
>>>>> > mempool). Default: 100
>>>>> >
>>>>> > The fourth limit is required to maintain the pre existing policy goal
>>>>> > that all transactions in the mempool should be mineable in the next
>>>>> block.
>>>>> >
>>>>> > Max ancestor size: No transaction shall be accepted if the total
>>>>> size of
>>>>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB
>>>>> >
>>>>> > (All limits include the transaction itself.)
>>>>> >
>>>>> > For reference, these limits would have affected less than 2% of
>>>>> > transactions entering the mempool in April or May of this year.
>>>>> During
>>>>> > the period of 7/6 through 7/14, while the network was under stress
>>>>> test,
>>>>> > as many as 25% of the transactions would have been affected.
>>>>> >
>>>>> > The code to implement the descendant package tracking and new policy
>>>>> > limits can be found in 6557
>>>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off
>>>>> of 6470.
>>>>> >
>>>>> > Thanks,
>>>>> > Alex
>>>>> >
>>>>> >
>>>>> >
>>>>> > _______________________________________________
>>>>> > bitcoin-dev mailing list
>>>>> > bitcoin-dev at lists.linuxfoundation.org
>>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>> >
>>>>> _______________________________________________
>>>>> bitcoin-dev mailing list
>>>>> bitcoin-dev at lists.linuxfoundation.org
>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>
>>>>
>>>>
>>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/6dd5377c/attachment-0001.html>

From steven.pine at gmail.com  Mon Oct  5 20:05:23 2015
From: steven.pine at gmail.com (Steven Pine)
Date: Mon, 5 Oct 2015 16:05:23 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
Message-ID: <CAAjy6kC_Je-Gcgvadtr-9+GBYid7ifQ8=DM_XEc7u6ATkka_-g@mail.gmail.com>

It's pretty clear Mike has turned into  concern troll and bully. He insults
people, mischaracterizes others, quibbles over words and definitions and
has stated numerous times in other forums he has no interest in building
consensus changes he doesn't agree with himself.

He's lost his integrity and trust and why the core developers waste their
time with his antics is beyond me, let Mike fork Bitcoin, develop XT, and
ignore his input on core unless some XT feature is deemed good enough to
incorporate, that is how a thousand other open source projects deal with
trolls like Mike.
On Oct 5, 2015 3:41 PM, "Gregory Maxwell via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > It is an eloquent change, but not really the topic we were discussing.
> It also
> > makes you attack Mike (calling him out as having a strawman) without
> basis.
> > For the second time in this thread.
> > I would suggest arguing on the topic, not on the man.
>
> Such a shame you appear to reserve that wisdom for those you disagree
> with, biting your tongue when others emit all forms of ad hominem--
> such as suggesting we've spent less volunteer time on Bitcoin and thus
> our opinion has less merit (or that we haven't written certian kinds
> of software (even when, ironically, we have!), and thus our opinion
> doesn't have merit, and so on). I think everyone would benefit from
> it, especially as that kind of correction is best received from
> someone who agrees with you.
>
> In this case, I think, however your correction is also misplaced at
> least on this message; though I would otherwise welcome it.  I'm not
> complaining about the man; but pointing out the behavior of stating an
> opinion no one as held as theirs and attacking it is not a productive
> way to hold a discussion. It's an argument or a behavior, not a
> person, and beyond calling it bad I attempted to explaining (perhaps
> poorly) why its bad.
>
> What Sergio is saying is not the same; Mike argued some established
> criteria existed where it didn't-- and I was pointing that out; and
> talking about how the situation here is not very similar to the one
> that Mike was trying to draw a parallel to. I enumerated a number of
> specific reasons why this is the case. If the differences between
> Sergio's comments and mine are still unclear after this clarification,
> I'd be glad to talk it through with you off-list-- in spite of your
> (welcome) compliments, communication is just fundamentally difficult,
> and no amount eloquence changes that. If there is continued
> misunderstanding, I do not doubt its my fault; but it's probably not a
> good use of hundreds/thousands of people's time for you to help me
> interactively improve my explanation on list. :)
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/bcabeadc/attachment.html>

From milly at bitcoins.info  Mon Oct  5 20:21:17 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 5 Oct 2015 16:21:17 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAAjy6kC_Je-Gcgvadtr-9+GBYid7ifQ8=DM_XEc7u6ATkka_-g@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<CAAjy6kC_Je-Gcgvadtr-9+GBYid7ifQ8=DM_XEc7u6ATkka_-g@mail.gmail.com>
Message-ID: <5612DBBD.90104@bitcoins.info>

On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:
> It's pretty clear Mike has turned into  concern troll and bully.

"troll" and, even worse, "concern troll" are terms generally used by 
teenagers on places like Reddit to complain about someone who doesn't 
agree with them. It is not rally a valid term to use in technical 
discussions. Several of the developers on here act as bullies by 
wielding power they have accumulated in a a system which they claim is 
decentralized.  It is not clear at all so your premise is faulty.

>has stated numerous times in other forums he has no
> interest in building consensus changes he doesn't agree with himself.

What exactly do you expect?  Bitcoin is not a charity, it is built on 
incentives.

> He's lost his integrity and trust and why the core developers

Only a very small minority of the developers have "integrity and trust." 
Most are pretty irrational and untrustworthy if you look at their 
discussions outside of their technical expertise.  Bitcoin is not 
supposed to have a model where users are not forced to trust a small 
group such as the core developers.  It sounds to me like you suggest 
giving that up the idea of decentralization so you can gain control over 
the "official" software releases.

Russ

Russ







From santino.napolitano at yandex.com  Mon Oct  5 20:28:00 2015
From: santino.napolitano at yandex.com (Santino Napolitano)
Date: Mon, 05 Oct 2015 23:28:00 +0300
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAAjy6kC_Je-Gcgvadtr-9+GBYid7ifQ8=DM_XEc7u6ATkka_-g@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<CAAjy6kC_Je-Gcgvadtr-9+GBYid7ifQ8=DM_XEc7u6ATkka_-g@mail.gmail.com>
Message-ID: <791141444076880@web10g.yandex.ru>

While this isn't really the place to discuss it, I respectfully disagree. Mike appears to be making a point concerning Bitcoin protocol authorship and on the perceived value of soft-forks. It doesn't look like simple trolling to me. Mike and Gregory are both extremely intelligent and well-versed in Bitcoin and both should be listened to earnestly and equally while receiving our full professional respect.

At this stage it's becoming readily apparent to at least me (and without putting words into his mouth it would seem Gavin has experienced a similar realisation; please correct if I'm mistaken) that Bitcoin protocol authorship and individual implementation development need to be separated asap. I have no suggestions for the structure of this separation but as soon as it happens the better, IMO. It's likely messages like this would then no longer be seen on this list and Bitcoin Core developers could focus on their implementation's development free from distraction while other implementers and Core developers could discuss protocol issues in a more relevant forum in a more civilized and constructive manner.

05.10.2015, 23:05, "Steven Pine via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org>:
> ?It's pretty clear Mike has turned into? concern troll and bully. He insults people, mischaracterizes others, quibbles over words and definitions and has stated numerous times in other forums he has no interest in building consensus changes he doesn't agree with himself.
>
> ?He's lost his integrity and trust and why the core developers waste their time with his antics is beyond me, let Mike fork Bitcoin, develop XT, and ignore his input on core unless some XT feature is deemed good enough to incorporate, that is how a thousand other open source projects deal with trolls like Mike.
>
> ?On Oct 5, 2015 3:41 PM, "Gregory Maxwell via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> ?On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev
>> ?<bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> ?It is an eloquent change, but not really the topic we were discussing. It also
>>> ?makes you attack Mike (calling him out as having a strawman) without basis.
>>> ?For the second time in this thread.
>>> ?I would suggest arguing on the topic, not on the man.
>>
>> ?Such a shame you appear to reserve that wisdom for those you disagree
>> ?with, biting your tongue when others emit all forms of ad hominem--
>> ?such as suggesting we've spent less volunteer time on Bitcoin and thus
>> ?our opinion has less merit (or that we haven't written certian kinds
>> ?of software (even when, ironically, we have!), and thus our opinion
>> ?doesn't have merit, and so on). I think everyone would benefit from
>> ?it, especially as that kind of correction is best received from
>> ?someone who agrees with you.
>>
>> ?In this case, I think, however your correction is also misplaced at
>> ?least on this message; though I would otherwise welcome it.? I'm not
>> ?complaining about the man; but pointing out the behavior of stating an
>> ?opinion no one as held as theirs and attacking it is not a productive
>> ?way to hold a discussion. It's an argument or a behavior, not a
>> ?person, and beyond calling it bad I attempted to explaining (perhaps
>> ?poorly) why its bad.
>>
>> ?What Sergio is saying is not the same; Mike argued some established
>> ?criteria existed where it didn't-- and I was pointing that out; and
>> ?talking about how the situation here is not very similar to the one
>> ?that Mike was trying to draw a parallel to. I enumerated a number of
>> ?specific reasons why this is the case. If the differences between
>> ?Sergio's comments and mine are still unclear after this clarification,
>> ?I'd be glad to talk it through with you off-list-- in spite of your
>> ?(welcome) compliments, communication is just fundamentally difficult,
>> ?and no amount eloquence changes that. If there is continued
>> ?misunderstanding, I do not doubt its my fault; but it's probably not a
>> ?good use of hundreds/thousands of people's time for you to help me
>> ?interactively improve my explanation on list. :)
>> ?_______________________________________________
>> ?bitcoin-dev mailing list
>> ?bitcoin-dev at lists.linuxfoundation.org
>> ?https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> ?,
>
> ?_______________________________________________
> ?bitcoin-dev mailing list
> ?bitcoin-dev at lists.linuxfoundation.org
> ?https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From tomz at freedommail.ch  Mon Oct  5 20:35:05 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Mon, 05 Oct 2015 21:35:05 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
Message-ID: <2081461.sDX5ARzIdv@garp>

On Monday 5. October 2015 19.41.30 Gregory Maxwell wrote:
> On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev
> 
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > It is an eloquent change, but not really the topic we were discussing. It
> > also makes you attack Mike (calling him out as having a strawman) without
> > basis. For the second time in this thread.
> > I would suggest arguing on the topic, not on the man.
> 
> Such a shame you appear to reserve that wisdom for those you disagree
> with, biting your tongue when others emit all forms of ad hominem--

You are special only in your eloquent use of the language. Consider yourself 
lucky :)

> In this case, I think, however your correction is also misplaced at
> least on this message; though I would otherwise welcome it.

I would not expect anything less.

> I'm not complaining about the man;
> but pointing out the behavior of stating an
> opinion no one has held as theirs and attacking it is not a productive
> way to hold a discussion. It's an argument or a behavior, not a
> person, and beyond calling it bad I attempted to explaining (perhaps
> poorly) why its bad.

Thanks for explaining your thinking.

Fortunately I can say that while we certainly value your opinion, when peoples 
opinions are hard to read, as you indicated they can be, we should look at 
their actions. The group has followed the consensus rule quite rigorously, 
which I applaud.
But next to that people like Black and Laan have given strong verbal 
indications confirming the practice you personally keep explaining is not 
real.


When I was a little boy of maybe 12 years, I remember reading a short story, 
that stuck with me.  It was about a man that had vowed to never lie. He was 
invited to a dinner party and asked to assist with another man's accusation of 
a crime he claimed to not have committed.
The end result was that the accused man was indeed guilty, but he minced his 
words so well that every sentence uttered was true. To the layman he seemed 
truthful and pleasant. Certainly innocent.
But to the man that never lied, his stories quickly fell apart as he himself 
had had years of practice with the same. And the guilty man was jailed.


I really enjoy reading your emails and github posts too, they have an 
eloquence and a brashness.

>  If there is continued
> misunderstanding, I do not doubt its my fault; but it's probably not a
> good use of hundreds/thousands of people's time for you to help me
> interactively improve my explanation on list.

Quite.

From dscotese at litmocracy.com  Mon Oct  5 20:54:38 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Mon, 5 Oct 2015 13:54:38 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <2081461.sDX5ARzIdv@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
Message-ID: <CAGLBAhenb3D2FYZQFgGhyWT9JafwwVMzCow=tFbNfQdLJpdx0g@mail.gmail.com>

I prefer the hard fork because the complexity introduced by soft forks
scares me.

At
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011309.html
Gregory wrote: "Security requires a bit of vigilance, inherently." and
[A non-upgraded miner will end up] "*> producing invalid blocks forever
until** the owner shuts it down and upgrades. * This is the outcome
guaranteed for absentee miners with a hard fork, but it is not guaranteed
for a soft fork."

It seems that the main benefit of a soft-fork is that it allows
participants on the network to keep participating even if they aren't
vigilant enough to notice and upgrade when that is safest.  Are there other
reasons that might entice me if that one by itself is not enough?

Gregory provided two more: [Using soft-forks] "radically lowers (in most of
our experience and
opinion) the cost of deployment; again-- making them different. They
prevent a industry wide flag day, and tight release synchronization  which
is harmful to decentralization promoting software diversity."

I understand these benefits.  The cost in complexity is still too high for
me, and I think most of the pain in "cost of deployment", "industry-wide
flag days," and "tight release synchronization," as well as the
centralizing effect of those things can be minimized with waiting periods.
The promotion of software diversity offered by soft-forks is pretty cool,
but that gets close to messing with fungibility.
<http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011309.html>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/fdb2dc46/attachment-0001.html>

From gmaxwell at gmail.com  Mon Oct  5 20:56:34 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 5 Oct 2015 20:56:34 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <2081461.sDX5ARzIdv@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
Message-ID: <CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>

On Mon, Oct 5, 2015 at 8:35 PM, Tom Zander via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Fortunately I can say that while we certainly value your opinion, when peoples
> opinions are hard to read, as you indicated they can be, we should look at
> their actions. The group has followed the consensus rule quite rigorously,
> which I applaud.

What "consensus rule" do you refer to?

Indeed, I suggest you look to actions-- it's not hard to find changes
in Bitcoin Core that one contributor or another disliked. Did you try?
 (In this case, I don't even believe we have any regulator
contributors that disagree).
-- even for changes that effected system consensus, in fact. These
things were not hard-forks, however, as there never has been one (+/-
terminology disputes); and part of the point I was making was that the
standard for that is different, and that these differences begin with
technological fundamentals.

From tomz at freedommail.ch  Mon Oct  5 21:08:23 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Mon, 05 Oct 2015 22:08:23 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
Message-ID: <1819769.E416F0XigG@garp>

On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:
>  (In this case, I don't even believe we have any regulator
> contributors that disagree).

Regular contributor?

Please explain how for a fork in the protocol should you only listen to 
regular Bitcoin Core contributors?


From milly at bitcoins.info  Mon Oct  5 21:16:26 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 5 Oct 2015 17:16:26 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <1819769.E416F0XigG@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<1819769.E416F0XigG@garp>
Message-ID: <5612E8AA.2000803@bitcoins.info>

> Regular contributor?
>
> Please explain how for a fork in the protocol should you only listen to
> regular Bitcoin Core contributors?

This is an artifact of a small centralized group of developers that 
wants to hold on to power.  This is why there is so much objection to 
documenting some sort of process since that would highlight issues such 
as this.

Russ



From gmaxwell at gmail.com  Mon Oct  5 21:26:01 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 5 Oct 2015 21:26:01 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <1819769.E416F0XigG@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<1819769.E416F0XigG@garp>
Message-ID: <CAAS2fgRU3D7_9b=4rpG8B3HHnk_80Dw0WJTavvx5+1jFS6ZmEw@mail.gmail.com>

On Mon, Oct 5, 2015 at 9:08 PM, Tom Zander via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:
>>  (In this case, I don't even believe we have any regulator
>> contributors that disagree).
>
> Regular contributor?
>
> Please explain how for a fork in the protocol should you only listen to
> regular Bitcoin Core contributors?

I'm providing some perspective and scope-- referencing again your
comment about following actions-- what element of the many dozens of
responses suggests to you that _anyone_ is not being listened to?

While I'm sure its not intended; your selective editing ends up
butchering the meaning---- I pointed out that there have been
disputes, even ones involving regular contributors (and, implicitly,
that I'm not lying by omission in not mentioning that the dispute was
a joke or from someone well known to attack Bitcoin) or-- in other
words, evidence that the disagreement was not less meaningful than
what you're talking about here. That's all, sorry I was unclear again.

Did you see in my message that I invited you to take a look for
examples-- I think they're easily found and you would find it
informative. I really recommend spending some time looking.

From peter_r at gmx.com  Mon Oct  5 21:27:30 2015
From: peter_r at gmx.com (Peter R)
Date: Mon, 5 Oct 2015 14:27:30 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <1819769.E416F0XigG@garp>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<1819769.E416F0XigG@garp>
Message-ID: <9269B3FB-2ED2-469D-9FE2-783CC2EB252C@gmx.com>

> On Oct 5, 2015, at 2:08 PM, Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:
>> (In this case, I don't even believe we have any regulator
>> contributors that disagree).
> 
> Regular contributor?
> 
> Please explain how for a fork in the protocol should you only listen to 
> regular Bitcoin Core contributors?

Furthermore, Bitcoin is significantly more than a "software project": it sits at a unique intersection of computer science, economics, physics, law and more.  While I agree that minor bug-fixes and code-maintenance-type issues should be dealt with quietly by developers, decisions regarding Bitcoin?s governance and its evolution should be shaped by an interdisciplinary group of stakeholders from across the community.  The hard- vs soft-fork debate is not just a code maintenance issue.  

Once again, let?s use the current gridlock in Core to rally the growth of new forkwise-compatible implementations of the protocol.  Gavin and Mike?s initiative with BIP101 and Bitcoin XT should be encouraged as one possible model for coming to consensus on hard-forking changes.  

Best regards,
Peter




From gmaxwell at gmail.com  Mon Oct  5 21:30:43 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 5 Oct 2015 21:30:43 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <9269B3FB-2ED2-469D-9FE2-783CC2EB252C@gmx.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<1819769.E416F0XigG@garp>
	<9269B3FB-2ED2-469D-9FE2-783CC2EB252C@gmx.com>
Message-ID: <CAAS2fgTLH2LNKZp1AMO_Gq_ba2KdryyrL8r1bMPQ0gFPAV4GTQ@mail.gmail.com>

On Mon, Oct 5, 2015 at 9:27 PM, Peter R via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Once again, let?s use the current gridlock

Allow me to state unequivocally-- since we've had problems with people
stating non-factuals as fact without getting adequately clear
correction--, there is no gridlock here and an effort to manufacturer
one for political reasons will not be successful.

Cheers,

From milly at bitcoins.info  Mon Oct  5 21:36:50 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 5 Oct 2015 17:36:50 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAAS2fgTLH2LNKZp1AMO_Gq_ba2KdryyrL8r1bMPQ0gFPAV4GTQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<1819769.E416F0XigG@garp>
	<9269B3FB-2ED2-469D-9FE2-783CC2EB252C@gmx.com>
	<CAAS2fgTLH2LNKZp1AMO_Gq_ba2KdryyrL8r1bMPQ0gFPAV4GTQ@mail.gmail.com>
Message-ID: <5612ED72.1060802@bitcoins.info>

On 10/5/2015 5:30 PM, Gregory Maxwell via bitcoin-dev wrote:
> On Mon, Oct 5, 2015 at 9:27 PM, Peter R via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Once again, let?s use the current gridlock
>

> there is no gridlock here and an effort to manufacturer
> one for political reasons will not be successful.

Worthless discussion over the definition of "gridlock."

Russ



From peter_r at gmx.com  Mon Oct  5 21:37:03 2015
From: peter_r at gmx.com (Peter R)
Date: Mon, 5 Oct 2015 14:37:03 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAAS2fgTLH2LNKZp1AMO_Gq_ba2KdryyrL8r1bMPQ0gFPAV4GTQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<1819769.E416F0XigG@garp>
	<9269B3FB-2ED2-469D-9FE2-783CC2EB252C@gmx.com>
	<CAAS2fgTLH2LNKZp1AMO_Gq_ba2KdryyrL8r1bMPQ0gFPAV4GTQ@mail.gmail.com>
Message-ID: <DC9B9DEE-77DA-4EDE-B734-F56412EC3EDA@gmx.com>


> On Oct 5, 2015, at 2:30 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> 
> On Mon, Oct 5, 2015 at 9:27 PM, Peter R via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Once again, let?s use the current gridlock
> 
> Allow me to state unequivocally-- since we've had problems with people
> stating non-factuals as fact without getting adequately clear
> correction--, there is no gridlock here and an effort to manufacturer
> one for political reasons will not be successful.

I disagree.  There is gridlock in the Core Dev development process.  

Peter


From morcos at gmail.com  Mon Oct  5 22:03:48 2015
From: morcos at gmail.com (Alex Morcos)
Date: Mon, 5 Oct 2015 18:03:48 -0400
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <561115C0.3080601@sky-ip.org>
References: <20151003143056.GA27942@muck> <20151004083525.GA18291@navy>
	<561115C0.3080601@sky-ip.org>
Message-ID: <CAPWm=eUiXAagzasLmKQWRT5EKnMxfeiv6J7M9mm+MhDzG_VwQg@mail.gmail.com>

Peter,

Your concern about whether this is the best way to use the nSequence field;
would that be addressed by providing more high order bits to signal
different uses of the field?  At a certain point we're really not limiting
the future at all and there is something to be said for not letting the
perfect be the enemy of the good.  I think it would be nice to make forward
progress on BIPS 68,112, and 113 and move towards getting them finalized
and implemented.  (Although I do suspect they aren't quite ready to go out
with CLTV)

What is the reasoning for having single second resolution on the time based
sequence number locks?  Might it not make some sense to reduce that
resolution and leave more low order bits as well?

Alex

On Sun, Oct 4, 2015 at 8:04 AM, s7r via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
> Hi aj,
>
> On 10/4/2015 11:35 AM, Anthony Towns via bitcoin-dev wrote:
> > On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via
> > bitcoin-dev wrote:
> >> So we need to make the case for two main things: 1) We have
> >> applications that need a relative (instead of absolute CLTV) 2)
> >> Additionally to RCLTV, we need to implement this via nSequence
> >
> >> However I don't think we've done a good job showing why we need
> >> to implement this feature via nSequence. BIP68 describes the new
> >> nSequence semantics, and gives the rational for them as being a
> >> "Consensus-enforced tx replacement" mechanism, with a
> >> bidirectional payment channel as an example of this in action.
> >> However, the bidirectional payment channel concept itself can be
> >> easily implemented with CLTV alone.
> >
> > Do you mean "with RCLTV alone" here?
> >
> > RCLTV/OP_CSV is used in lightning commitment transactions to
> > enforce a delay between publishing the commitment transaction, and
> > spending the output -- that delay is needed so that the
> > counterparty has time to prove the commitment was revoked and claim
> > the outputs as a penalty.
> >
>
> I partially understand - can you please provide a simple Alice and Bob
> example here with the exact scenario? Thanks. Why is there a need to
> 'delay between publishing the commitment transaction and spending the
> output'? If the absolute CLTV script reached its maturity it means
> something went wrong (e.g. counterparty cheated or got hit by a bus)
> so what is with the delay time needed for proving that the commitment
> was revoked? I assume an absolute CLTV script reaching its maturity
> (nLockTime) is the proof itself that the commitment was revoked - but
> maybe I'm missing something obvious, sorry if this is the case.
>
> > Using absolute CLTV instead would mean that once the effective
> > delay a commitment transaction has decreases over time -- initially
> > it will be longer than desirable, causing unwanted delays in
> > claiming funds when no cheating is going on; but over time it will
> > become too short, which means there is not enough time to prove
> > cheating (and the channel has to be closed prematurely). You can
> > trade those things off and pick something that works, but it's
> > always going to be bad.
> >
> I agree, I see the logic here. Absolute CLTV is not necessary inferior
> to RCLTV - there are use cases and use cases. For example, you can
> avoid unnecessary waiting until the nLockTime expires if you use
> absolute CLTV in combination with P2SH (2/2). Again, it always depends
> on the use case - it might be a good solution, it might not be such a
> good solution, but even absolute CLTV alone clearly fixes a lot of
> things and takes smart contracts to the next level.
>
> >> There is a small drawback in that the initial transaction could
> >> be delayed, reducing the overall time the channel exists, but the
> >> protocol already assumes that transactions can be reliably
> >> confirmed within a day - significantly less than the proposed 30
> >> days duration of the channel.
> >
> > Compared to using a CLTV with 30 days duration, With RCLTV a
> > channel could be available for years (ie 20x longer), but in the
> > case of problems funds could be reclaimed within hours or days (ie
> > 30x faster).
> >
> Indeed. I for one _need_ CLTV / RCLTV in my day to day use cases, it
> would be neat to have both, but if I can only have (for the time
> being) absolute CLTV so be it - it's still a lot better.
>
> > But that's all about RCLTV vs CLTV, not about RCLTV vs
> > nSequence/OP_CSV. ie, it needs BIP 112 (OP_CSV) but not necessarily
> > BIP 68 (nSequence relative locktime), if they could be
> > disentangled.
> >
> > You could do all that with "<n> OP_CHECK_HEIGHT_DELTA_VERIFY" that
> > ignores nSequence, and directly compares the height of the current
> > block versus the input tx's block (or the diff of their
> > timestamps?) though, I think?
> >
> > I think the disadvantage is that (a) you have to look into the
> > input transaction's block height when processing the script; and
> > (b) you don't have an easy lookup to check whether the transaction
> > can be included in the next block.
> >
> > You could maybe avoid (b) by using locktime though. Have "<n>
> > OP_CHECK_RELATIVE_LOCKTIME_VERIFY" compare the transactions
> > locktime against the input's block height or time; if the locktime
> > is 0 or too low, the transaction is invalid. (So if nLockTime is in
> > blockheight, you can only spend inputs with blockheight based
> > OP_CRLTV tests; and if it's in blocktime, you can only spend inputs
> > with blocktime based OP_CRLTV. "n" does need to encode whether it's
> > time/block height though).
> >
> > That way, when you see a txn:
> >
> > - run the script. if you see <n> RCLTV, then + if the tx's locktime
> > isn't set, it's invalid; drop it + if the input txn is unconfirmed,
> > it's invalid; try again later + workout "locktime - n" if that's >=
> > the input tx's block height/time, it's good; keep it in mempool,
> > forward it, etc
> >
> > - if you're mining, include the tx when locktime hits, just like
> > you would any other valid tx with a locktime
> >
> > I think the use cases for BIP68 (nSequence) are of the form:
> >
> > 1) published input; here's a signed tx that spends it to you,
> > usable after a delay. might as well just use absolute locktime
> > here, though.
> >
> > 2) here's an unpublished input, you can build your own transaction
> > to spend it, just not immediately after it's published. BIP112 is
> > required, and OP_RCLTV as defined above works fine, just include
> > it in the published input's script.
> >
> > 3) here's an unpublished input, and a signed transaction spending
> > it, that you can use to spend it after a delay. BIP68 is enough;
> > but OP_RCLTV in the second transaction works here. however without
> > normalised tx ids, the input could be malleated before
> > publication, so maybe this use case isn't actually important
> > anyway.
> >
> > So I think OP_CRLTV alone works fine for them too...
> >
> > (Does that make sense, or am I missing something obvious?)
> >
> > Cheers, aj
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.22 (MingW32)
>
> iQEcBAEBCAAGBQJWERXAAAoJEIN/pSyBJlsRypMH/2Q+jVRf4hWtPr9cs/06pXM9
> mKHd2OPDEJO8HjSe+cIMCxOz76EZxXglUEkK4YV/huP0Tp0bcMp6EJxsZVD9L78k
> dugyh2747ddL6aqRmt0ducTEfIC/Q4BxPA2HRQZkvyyIUQv2Tyo780bC0y8BwUpb
> j/BQjFZwk4QgqkTlf5lbCgn85alOKHki2El04iALHc27pUiDWKQPPeNOy6po6mmD
> /csvh4XOTQwCVy384ljuFBp0+QN7Z/zx4E8i6GqV2BmfNcveTG6Fc5KrHr2Ud4Th
> RD8k6n9mLaPs6ufhVkgUiUqPzQsJ+ns+mm7OEUdd645Kxqxg3Tu1u32DgdpRcHk=
> =U0N6
> -----END PGP SIGNATURE-----
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/ee853e6f/attachment-0001.html>

From btcdrak at gmail.com  Mon Oct  5 22:56:27 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Mon, 5 Oct 2015 23:56:27 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <5570C084-0C2D-4B79-A78E-B25699600EA9@gmx.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
	<5612ACF3.2080006@gmail.com>
	<5570C084-0C2D-4B79-A78E-B25699600EA9@gmx.com>
Message-ID: <CADJgMzscJZZ_k19KN67UC9gYM_3J-serKNPVq_gro4-85exL3A@mail.gmail.com>

On Mon, Oct 5, 2015 at 6:33 PM, Peter R via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I also agree with Mike that Core's requirement for unanimous consensus
> results in development grid lock and should be revisited.
>

There is no development gridlock. Look at the IRC logs for core-dev; look
at the pull requests; look a the merge history: Development is vibrant.
Developers are very active. You are manufacturing a crisis convenient to
your narrative, but it is far from the actual reality on the ground.

Please desist from this intellectual dishonesty and toxicity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/4d591b1b/attachment.html>

From milly at bitcoins.info  Mon Oct  5 23:05:51 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 5 Oct 2015 19:05:51 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CADJgMzscJZZ_k19KN67UC9gYM_3J-serKNPVq_gro4-85exL3A@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
	<5612ACF3.2080006@gmail.com>
	<5570C084-0C2D-4B79-A78E-B25699600EA9@gmx.com>
	<CADJgMzscJZZ_k19KN67UC9gYM_3J-serKNPVq_gro4-85exL3A@mail.gmail.com>
Message-ID: <5613024F.7010309@bitcoins.info>

On 10/5/2015 6:56 PM, Btc Drak via bitcoin-dev wrote:
> There is no development gridlock. Look at the IRC logs for core-dev;

> Please desist from this intellectual dishonesty and toxicity.

A system where anyone can veto a change promotes gridlock.  Most people 
not on the devlpoment team see the block size debate as "gridlock." 
Much like "spam" "attack" and "decentralized" everyone has their own 
definition so arguing over it is generally pointless.

Russ



From elombrozo at gmail.com  Mon Oct  5 23:18:12 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Mon, 05 Oct 2015 16:18:12 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical	debate
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <82F8B78A-2031-4ADE-B882-DBE68D5AD7AD@gmail.com>

I agree with you, Sergio, up until the part about someone having won a battle. There's a difference between sincere technical objections and someone just being a dick. I think in this case this line has been crossed (and I don't think I'm alone here).

- Eric

On October 5, 2015 8:56:33 AM PDT, Sergio Demian Lerner via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Some of the people on this mailing list are blindly discussing the
>technicalities of a soft/hard fork without realizing that is not Mike's
>main intention. At least I perceive (and maybe others too) something
>else
>is happening.
>
>Let me try to clarify: the discussion has nothing to do with technical
>arguments. I generally like more hard forks than soft forks (but I
>won't
>explain why because this is not a technical thread), but for CLTV this
>is
>quite irrelevant (but I won't explain why..), and I want CLTV to be
>deployed asap.
>
>Mike's intention is to criticize the informal governance model of
>Bitcoin
>Core development and he has strategically pushed the discussion to a
>dead-end where the group either:
>
>1) ignores him, which is against the established criteria that all
>technical objections coming from anyone must be addressed until that
>person
>agrees, so that a change can be uncontroversial. If the group moves
>forward
>with the change, then the "uncontroversial" criteria is violated and
>then
>credibility is lost. So a new governance model would be required for
>which
>the change is within the established rules.
>
>2) respond to his technical objections one after the other, on never
>ending
>threads, bringing the project to a standstill.
>
>As I don't want 2) to happen, then 1) must happen, which is what Mike
>wants. I have nothing for or against Mike personally. I just think Mike
>Hearn has won this battle. But having a more formal decision making
>process
>may not be too bad for Bitcoin, maybe it can actually be good.
>
>Best regards
> from a non-developer to my dearest developer friends,
>  Sergio.
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/40e4516c/attachment.html>

From mark at friedenbach.org  Tue Oct  6 00:19:06 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Mon, 5 Oct 2015 17:19:06 -0700
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <CAPWm=eUiXAagzasLmKQWRT5EKnMxfeiv6J7M9mm+MhDzG_VwQg@mail.gmail.com>
References: <20151003143056.GA27942@muck> <20151004083525.GA18291@navy>
	<561115C0.3080601@sky-ip.org>
	<CAPWm=eUiXAagzasLmKQWRT5EKnMxfeiv6J7M9mm+MhDzG_VwQg@mail.gmail.com>
Message-ID: <CAOG=w-uEwwDGA3_RF1Epp=xLG7rS4y2O7f9EOfAUa1hAiWkLGQ@mail.gmail.com>

Alex, decreasing granularity is a soft-fork, increasing is a hard-fork.
Therefore I've kept the highest possible precision (1 second, 1 block) with
the expectation that at some point in the future if we need more low-order
bits we can soft-fork them to other purposes, we can decrease granularity
at that time.

On Mon, Oct 5, 2015 at 3:03 PM, Alex Morcos via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Peter,
>
> Your concern about whether this is the best way to use the nSequence
> field; would that be addressed by providing more high order bits to signal
> different uses of the field?  At a certain point we're really not limiting
> the future at all and there is something to be said for not letting the
> perfect be the enemy of the good.  I think it would be nice to make forward
> progress on BIPS 68,112, and 113 and move towards getting them finalized
> and implemented.  (Although I do suspect they aren't quite ready to go out
> with CLTV)
>
> What is the reasoning for having single second resolution on the time
> based sequence number locks?  Might it not make some sense to reduce that
> resolution and leave more low order bits as well?
>
> Alex
>
> On Sun, Oct 4, 2015 at 8:04 AM, s7r via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA256
>>
>> Hi aj,
>>
>> On 10/4/2015 11:35 AM, Anthony Towns via bitcoin-dev wrote:
>> > On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via
>> > bitcoin-dev wrote:
>> >> So we need to make the case for two main things: 1) We have
>> >> applications that need a relative (instead of absolute CLTV) 2)
>> >> Additionally to RCLTV, we need to implement this via nSequence
>> >
>> >> However I don't think we've done a good job showing why we need
>> >> to implement this feature via nSequence. BIP68 describes the new
>> >> nSequence semantics, and gives the rational for them as being a
>> >> "Consensus-enforced tx replacement" mechanism, with a
>> >> bidirectional payment channel as an example of this in action.
>> >> However, the bidirectional payment channel concept itself can be
>> >> easily implemented with CLTV alone.
>> >
>> > Do you mean "with RCLTV alone" here?
>> >
>> > RCLTV/OP_CSV is used in lightning commitment transactions to
>> > enforce a delay between publishing the commitment transaction, and
>> > spending the output -- that delay is needed so that the
>> > counterparty has time to prove the commitment was revoked and claim
>> > the outputs as a penalty.
>> >
>>
>> I partially understand - can you please provide a simple Alice and Bob
>> example here with the exact scenario? Thanks. Why is there a need to
>> 'delay between publishing the commitment transaction and spending the
>> output'? If the absolute CLTV script reached its maturity it means
>> something went wrong (e.g. counterparty cheated or got hit by a bus)
>> so what is with the delay time needed for proving that the commitment
>> was revoked? I assume an absolute CLTV script reaching its maturity
>> (nLockTime) is the proof itself that the commitment was revoked - but
>> maybe I'm missing something obvious, sorry if this is the case.
>>
>> > Using absolute CLTV instead would mean that once the effective
>> > delay a commitment transaction has decreases over time -- initially
>> > it will be longer than desirable, causing unwanted delays in
>> > claiming funds when no cheating is going on; but over time it will
>> > become too short, which means there is not enough time to prove
>> > cheating (and the channel has to be closed prematurely). You can
>> > trade those things off and pick something that works, but it's
>> > always going to be bad.
>> >
>> I agree, I see the logic here. Absolute CLTV is not necessary inferior
>> to RCLTV - there are use cases and use cases. For example, you can
>> avoid unnecessary waiting until the nLockTime expires if you use
>> absolute CLTV in combination with P2SH (2/2). Again, it always depends
>> on the use case - it might be a good solution, it might not be such a
>> good solution, but even absolute CLTV alone clearly fixes a lot of
>> things and takes smart contracts to the next level.
>>
>> >> There is a small drawback in that the initial transaction could
>> >> be delayed, reducing the overall time the channel exists, but the
>> >> protocol already assumes that transactions can be reliably
>> >> confirmed within a day - significantly less than the proposed 30
>> >> days duration of the channel.
>> >
>> > Compared to using a CLTV with 30 days duration, With RCLTV a
>> > channel could be available for years (ie 20x longer), but in the
>> > case of problems funds could be reclaimed within hours or days (ie
>> > 30x faster).
>> >
>> Indeed. I for one _need_ CLTV / RCLTV in my day to day use cases, it
>> would be neat to have both, but if I can only have (for the time
>> being) absolute CLTV so be it - it's still a lot better.
>>
>> > But that's all about RCLTV vs CLTV, not about RCLTV vs
>> > nSequence/OP_CSV. ie, it needs BIP 112 (OP_CSV) but not necessarily
>> > BIP 68 (nSequence relative locktime), if they could be
>> > disentangled.
>> >
>> > You could do all that with "<n> OP_CHECK_HEIGHT_DELTA_VERIFY" that
>> > ignores nSequence, and directly compares the height of the current
>> > block versus the input tx's block (or the diff of their
>> > timestamps?) though, I think?
>> >
>> > I think the disadvantage is that (a) you have to look into the
>> > input transaction's block height when processing the script; and
>> > (b) you don't have an easy lookup to check whether the transaction
>> > can be included in the next block.
>> >
>> > You could maybe avoid (b) by using locktime though. Have "<n>
>> > OP_CHECK_RELATIVE_LOCKTIME_VERIFY" compare the transactions
>> > locktime against the input's block height or time; if the locktime
>> > is 0 or too low, the transaction is invalid. (So if nLockTime is in
>> > blockheight, you can only spend inputs with blockheight based
>> > OP_CRLTV tests; and if it's in blocktime, you can only spend inputs
>> > with blocktime based OP_CRLTV. "n" does need to encode whether it's
>> > time/block height though).
>> >
>> > That way, when you see a txn:
>> >
>> > - run the script. if you see <n> RCLTV, then + if the tx's locktime
>> > isn't set, it's invalid; drop it + if the input txn is unconfirmed,
>> > it's invalid; try again later + workout "locktime - n" if that's >=
>> > the input tx's block height/time, it's good; keep it in mempool,
>> > forward it, etc
>> >
>> > - if you're mining, include the tx when locktime hits, just like
>> > you would any other valid tx with a locktime
>> >
>> > I think the use cases for BIP68 (nSequence) are of the form:
>> >
>> > 1) published input; here's a signed tx that spends it to you,
>> > usable after a delay. might as well just use absolute locktime
>> > here, though.
>> >
>> > 2) here's an unpublished input, you can build your own transaction
>> > to spend it, just not immediately after it's published. BIP112 is
>> > required, and OP_RCLTV as defined above works fine, just include
>> > it in the published input's script.
>> >
>> > 3) here's an unpublished input, and a signed transaction spending
>> > it, that you can use to spend it after a delay. BIP68 is enough;
>> > but OP_RCLTV in the second transaction works here. however without
>> > normalised tx ids, the input could be malleated before
>> > publication, so maybe this use case isn't actually important
>> > anyway.
>> >
>> > So I think OP_CRLTV alone works fine for them too...
>> >
>> > (Does that make sense, or am I missing something obvious?)
>> >
>> > Cheers, aj
>> -----BEGIN PGP SIGNATURE-----
>> Version: GnuPG v2.0.22 (MingW32)
>>
>> iQEcBAEBCAAGBQJWERXAAAoJEIN/pSyBJlsRypMH/2Q+jVRf4hWtPr9cs/06pXM9
>> mKHd2OPDEJO8HjSe+cIMCxOz76EZxXglUEkK4YV/huP0Tp0bcMp6EJxsZVD9L78k
>> dugyh2747ddL6aqRmt0ducTEfIC/Q4BxPA2HRQZkvyyIUQv2Tyo780bC0y8BwUpb
>> j/BQjFZwk4QgqkTlf5lbCgn85alOKHki2El04iALHc27pUiDWKQPPeNOy6po6mmD
>> /csvh4XOTQwCVy384ljuFBp0+QN7Z/zx4E8i6GqV2BmfNcveTG6Fc5KrHr2Ud4Th
>> RD8k6n9mLaPs6ufhVkgUiUqPzQsJ+ns+mm7OEUdd645Kxqxg3Tu1u32DgdpRcHk=
>> =U0N6
>> -----END PGP SIGNATURE-----
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/24d01ebc/attachment-0001.html>

From btcdrak at gmail.com  Tue Oct  6 00:28:57 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 6 Oct 2015 01:28:57 +0100
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <20151003143056.GA27942@muck>
References: <20151003143056.GA27942@muck>
Message-ID: <CADJgMzuVxGYvowcMvbVtMYSBw7vnTRa28rtY9swqqs+wX8ECwg@mail.gmail.com>

Regarding the keeping nSequence for future expansion I believe this has
been covered in the specification section of BIP68[1]: For transaction
version >= 2, if the MSB of nSequence is unset, the field is interpreted as
relative locktime, otherwise no special consensus meaning is attached (and
thus free for repurposing in the future). Effectively if the MSB is set,
the remaining 31 bits (out of 32) are free.

Also please note the BIP112 text has been updated with several more
usecases.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/47ce0e5c/attachment.html>

From tomh at thinlink.com  Tue Oct  6 01:37:24 2015
From: tomh at thinlink.com (Tom Harding)
Date: Mon, 5 Oct 2015 18:37:24 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
Message-ID: <561325D4.5030800@thinlink.com>

On 10/5/2015 1:56 PM, Gregory Maxwell via bitcoin-dev wrote:
> In this case, I don't even believe we have any regulator contributors
> that disagree.

Since Gavin Andresen chose you to be one of 4 people who decides whose
contributions are accepted to the Core project, shouldn't you recuse
yourself from referencing "regular contributor" as some kind of bar to
an opinion being worthy?

You don't want to be accused of squelching a person's opinions by
nacking or sitting on commits, then turning around and branding those
opinions as worthless because they are not from a "regular contributor."
Do you?



From rusty at rustcorp.com.au  Tue Oct  6 01:58:49 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Tue, 06 Oct 2015 12:28:49 +1030
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
	motivate the change
In-Reply-To: <20151003143056.GA27942@muck>
References: <20151003143056.GA27942@muck>
Message-ID: <87lhbgn4fa.fsf@rustcorp.com.au>

Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> However I don't think we've done a good job showing why we need to
> implement this feature via nSequence.

It could be implemented in other ways, but nSequence is the neatest and
most straightforward I've seen.

- I'm not aware of any other (even vague) proposal for its use?  Enlighten?
- BIP68 reserves much of it for future use already.

If we apply infinite caution we could never use nSequence, as there
might be a better use tommorrow.

Cheers,
Rusty.

From peter_r at gmx.com  Tue Oct  6 03:20:33 2015
From: peter_r at gmx.com (Peter R)
Date: Mon, 5 Oct 2015 20:20:33 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <561325D4.5030800@thinlink.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<561325D4.5030800@thinlink.com>
Message-ID: <8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>


> On Oct 5, 2015, at 6:37 PM, Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> On 10/5/2015 1:56 PM, Gregory Maxwell via bitcoin-dev wrote:
>> In this case, I don't even believe we have any regulator contributors
>> that disagree.
> 
> Since Gavin Andresen chose you to be one of 4 people who decides whose
> contributions are accepted to the Core project, shouldn't you recuse
> yourself from referencing "regular contributor" as some kind of bar to
> an opinion being worthy?
> 
> You don't want to be accused of squelching a person's opinions by
> nacking or sitting on commits, then turning around and branding those
> opinions as worthless because they are not from a "regular contributor."
> Do you?

Great point, Tom! 

In fact, you?ve just explained the dynamics that create ?centralizing pressure? in regards to development:  If the weight of a person?s opinion is proportional to how many commits that person has made, and if the probability of getting a commit pulled is proportional to the weight of that person?s opinion, well?I?m pretty sure this results in a differential equation that has a solution that results in ever-increasing centralized control of the code base.  

I believe we should work to deprecate the idea that Core is somehow the ?core of Bitcoin," in favour of multiple competing implementations. XT and btcd are two working examples of this idea.  Let?s make it easier for the community to determine the evolution of Bitcoin by making it easier for the community to express their vote based on the code we choose to run.  

Best regards,
Peter

From milly at bitcoins.info  Tue Oct  6 03:39:59 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 5 Oct 2015 23:39:59 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<561325D4.5030800@thinlink.com>
	<8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
Message-ID: <5613428F.4080504@bitcoins.info>

> I believe we should work to deprecate the idea that Core is somehow the ?core of Bitcoin,"

I never did understand the terminology.  There were "core developers" 
which i understood to mean the primary developers of the Bitcoin 
software.  Then, suddenly, the software's name was changed from QT to 
"Core."  That seemed to me to be different meaning of the word "Core" 
yet it was often treated as the same.  So a developer who is not one of 
the anointed 5 is a "Core developer" because they work on Bitcoin Core. 
  The anointed 5 would be "Core Core Developers?"

In any case if I could get a list of "Core Developers" as referenced in 
the copyright notice that would also be good since that is a legal notice.

Russ




From luke at dashjr.org  Tue Oct  6 04:54:13 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 6 Oct 2015 04:54:13 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <5613428F.4080504@bitcoins.info>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
	<5613428F.4080504@bitcoins.info>
Message-ID: <201510060454.14127.luke@dashjr.org>

On Tuesday, October 06, 2015 3:39:59 AM Milly Bitcoin via bitcoin-dev wrote:
> In any case if I could get a list of "Core Developers" as referenced in
> the copyright notice that would also be good since that is a legal notice.

The copyright notice refers to the fact that each contributor owns copyright 
to his own contributions. There is no legal group that owns copyright to the 
entirety of the code.

Luke

From not.mike.hearn at gmail.com  Tue Oct  6 05:07:44 2015
From: not.mike.hearn at gmail.com (NotMike Hearn)
Date: Tue, 6 Oct 2015 01:07:44 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<561325D4.5030800@thinlink.com>
	<8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
Message-ID: <CAKfs=Z-NuTrsSsLjPLFDatM9ye3_FLW=-hDrhQjO+biRvt=buw@mail.gmail.com>

>
>
> On Mon, Oct 5, 2015 at 11:20 PM, Peter R via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> > On Oct 5, 2015, at 6:37 PM, Tom Harding via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > On 10/5/2015 1:56 PM, Gregory Maxwell via bitcoin-dev wrote:
> >> In this case, I don't even believe we have any regulator contributors
> >> that disagree.
> >
> > Since Gavin Andresen chose you to be one of 4 people who decides whose
> > contributions are accepted to the Core project, shouldn't you recuse
> > yourself from referencing "regular contributor" as some kind of bar to
> > an opinion being worthy?
> >
> > You don't want to be accused of squelching a person's opinions by
> > nacking or sitting on commits, then turning around and branding those
> > opinions as worthless because they are not from a "regular contributor."
> > Do you?
>
> Great point, Tom!
>
> In fact, you?ve just explained the dynamics that create ?centralizing
> pressure? in regards to development:  If the weight of a person?s opinion
> is proportional to how many commits that person has made, and if the
> probability of getting a commit pulled is proportional to the weight of
> that person?s opinion, well?I?m pretty sure this results in a differential
> equation that has a solution that results in ever-increasing centralized
> control of the code base.
>

Really great stuff, Mr. R! We can use differential equations to measure
centralization pressure (I'm pretty sure, good idea). If we want
decentralization (or even mere stability), we must impose a
counterbalancing rule such that each past commit makes one *less* likely to
get their next commit pulled. For example, a "one man one commit" policy.


>
> I believe we should work to deprecate the idea that Core is somehow the
> ?core of Bitcoin," in favour of multiple competing implementations. XT and
> btcd are two working examples of this idea.  Let?s make it easier for the
> community to determine the evolution of Bitcoin by making it easier for the
> community to express their vote based on the code we choose to run.
>

Yes, this is essential. Greg, stop making it so hard for me to  determine
the evolution of Bitcoin by making it hard to express my vote based on the
code I choose to run. Blockstream is always doing that I am sick of it.

Mr. R really understands these concepts at a deep level and people need to
pay more attention to what he has to say. Nash equilibriums are very
important mathematical concept, for example:
https://www.reddit.com/r/Bitcoin/comments/3nhq5a/deprecating_bitcoin_core_visualizing_the/


>
> Best regards,
> Peter
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/251be515/attachment-0001.html>

From milly at bitcoins.info  Tue Oct  6 05:08:12 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 6 Oct 2015 01:08:12 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <201510060454.14127.luke@dashjr.org>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
	<5613428F.4080504@bitcoins.info> <201510060454.14127.luke@dashjr.org>
Message-ID: <5613573C.1080002@bitcoins.info>

> The copyright notice refers to the fact that each contributor owns copyright
> to his own contributions. There is no legal group that owns copyright to the
> entirety of the code.
>

No, that is not what such a notice means.  The part after the "c" in the 
circle is the legal owner.  If the legal owners are not properly 
identified then the notice is not valid.

---
 From Nolo:

What is a valid copyright notice?

A copyright notice should contain:
?the word "copyright"
?a "c" in a circle (?)
?the date of publication, and
?the name of either the author or the owner of all the copyright rights 
in the published work.

For example, the correct copyright for the fourth edition of The 
Copyright Handbook, by Stephen Fishman (Nolo), is Copyright ? 1998 by 
Stephen Fishman.

---
from USPTO:

Use of the notice informs the public that a work is protected by 
copyright, identifies the copyright owner, and shows the year of first 
publication.
---

Russ



From peter_r at gmx.com  Tue Oct  6 05:33:43 2015
From: peter_r at gmx.com (Peter R)
Date: Mon, 5 Oct 2015 22:33:43 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAKfs=Z-NuTrsSsLjPLFDatM9ye3_FLW=-hDrhQjO+biRvt=buw@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<2081461.sDX5ARzIdv@garp>
	<CAAS2fgSsJ10P7YYAAsV4P6no3pC=WYozWuN64u=WLSB3h6cHwA@mail.gmail.com>
	<561325D4.5030800@thinlink.com>
	<8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
	<CAKfs=Z-NuTrsSsLjPLFDatM9ye3_FLW=-hDrhQjO+biRvt=buw@mail.gmail.com>
Message-ID: <0682C961-08D4-4855-972C-F39464F7A9DA@gmx.com>


> If we want decentralization (or even mere stability), we must impose a counterbalancing rule such that each past commit makes one *less* likely to get their next commit pulled. For example, a "one man one commit" policy.

Haha great stuff, NotMike!

Indeed, it?s not enough to keep the block size limit small so that every man can run his own node, we also must also implement your proposed ?one man, one commit? policy!  Think of the decentralization if everyone Bitcoin user is also contributing code!    /s

Peter



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/50a2d880/attachment.html>

From milly at bitcoins.info  Tue Oct  6 05:49:40 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 6 Oct 2015 01:49:40 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <5613573C.1080002@bitcoins.info>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
	<5613428F.4080504@bitcoins.info> <201510060454.14127.luke@dashjr.org>
	<5613573C.1080002@bitcoins.info>
Message-ID: <561360F4.2010906@bitcoins.info>

Maybe you are confused with a compilation notice that would say "All 
Content Copyright and other rights reserved by its Respective Owners" or 
something similar.  That is not the same thing as claiming ownership 
using the "c" inside the circle.

There is also a difference between claiming a copyright for individual 
works as part of a compilation as opposed to claiming a copyright on the 
compilation itself (which is what the current notice is).

Russ


On 10/6/2015 1:08 AM, Milly Bitcoin wrote:
>> The copyright notice refers to the fact that each contributor owns
>> copyright
>> to his own contributions. There is no legal group that owns copyright
>> to the
>> entirety of the code.
>>
>
> No, that is not what such a notice means.  The part after the "c" in the
> circle is the legal owner.  If the legal owners are not properly
> identified then the notice is not valid.
>
> ---
>  From Nolo:
>
> What is a valid copyright notice?
>
> A copyright notice should contain:
> ?the word "copyright"
> ?a "c" in a circle (?)
> ?the date of publication, and
> ?the name of either the author or the owner of all the copyright rights
> in the published work.
>
> For example, the correct copyright for the fourth edition of The
> Copyright Handbook, by Stephen Fishman (Nolo), is Copyright ? 1998 by
> Stephen Fishman.
>
> ---
> from USPTO:
>
> Use of the notice informs the public that a work is protected by
> copyright, identifies the copyright owner, and shows the year of first
> publication.
> ---
>
> Russ
>



From luke at dashjr.org  Tue Oct  6 05:53:20 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 6 Oct 2015 05:53:20 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <561360F4.2010906@bitcoins.info>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<5613573C.1080002@bitcoins.info> <561360F4.2010906@bitcoins.info>
Message-ID: <201510060553.21578.luke@dashjr.org>

Copyright doesn't care how notices are written. They are merely informative 
to humans reading them. Anyhow, this is not development related, so please 
direct any further discussion of it to me directly (with any applicable CCs) 
and NOT to the mailing list.

Thanks,

Luke

On Tuesday, October 06, 2015 5:49:40 AM Milly Bitcoin via bitcoin-dev wrote:
> Maybe you are confused with a compilation notice that would say "All
> Content Copyright and other rights reserved by its Respective Owners" or
> something similar.  That is not the same thing as claiming ownership
> using the "c" inside the circle.
> 
> There is also a difference between claiming a copyright for individual
> works as part of a compilation as opposed to claiming a copyright on the
> compilation itself (which is what the current notice is).
> 
> Russ
> 
> On 10/6/2015 1:08 AM, Milly Bitcoin wrote:
> >> The copyright notice refers to the fact that each contributor owns
> >> copyright
> >> to his own contributions. There is no legal group that owns copyright
> >> to the
> >> entirety of the code.
> > 
> > No, that is not what such a notice means.  The part after the "c" in the
> > circle is the legal owner.  If the legal owners are not properly
> > identified then the notice is not valid.
> > 
> > ---
> > 
> >  From Nolo:
> > What is a valid copyright notice?
> > 
> > A copyright notice should contain:
> > ?the word "copyright"
> > ?a "c" in a circle (?)
> > ?the date of publication, and
> > ?the name of either the author or the owner of all the copyright rights
> > in the published work.
> > 
> > For example, the correct copyright for the fourth edition of The
> > Copyright Handbook, by Stephen Fishman (Nolo), is Copyright ? 1998 by
> > Stephen Fishman.
> > 
> > ---
> > from USPTO:
> > 
> > Use of the notice informs the public that a work is protected by
> > copyright, identifies the copyright owner, and shows the year of first
> > publication.
> > ---
> > 
> > Russ
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From milly at bitcoins.info  Tue Oct  6 06:03:49 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 6 Oct 2015 02:03:49 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <201510060553.21578.luke@dashjr.org>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<5613573C.1080002@bitcoins.info> <561360F4.2010906@bitcoins.info>
	<201510060553.21578.luke@dashjr.org>
Message-ID: <56136445.6020806@bitcoins.info>

This list is about "Development discussion list for Bitcoin protocol and 
its implementation" So legal notices placed on the software is relevant 
to the list.

It is also relevant that you go around speaking with authority when you 
have no idea what you are talking about.  A copyright is a legal notice 
and the courts care how the notice is written.  The purpose of the 
notice is to notify people of potential litigation if they use the 
software in a certain way.  You want to claim "off topic" because you 
caught spouting nonsense and you want to divert attention elsewhere.

Russ



On 10/6/2015 1:53 AM, Luke Dashjr wrote:
> Copyright doesn't care how notices are written. They are merely informative
> to humans reading them. Anyhow, this is not development related, so please
> direct any further discussion of it to me directly (with any applicable CCs)
> and NOT to the mailing list.
>
> Thanks,
>
> Luke



From aj at erisian.com.au  Tue Oct  6 06:20:31 2015
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 6 Oct 2015 16:20:31 +1000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRjURkV40iG=6RLhFyQ-t2G_YAinKk7Os_8zK4+hyYJaw@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
	<CA+w+GKS-AZGBSwuN1dgEs6wa-R=jHE0fmfmQ0TL9Cw9b6L71UQ@mail.gmail.com>
	<CABm2gDpgpRg9U5ToNM98pQgz8VRwT8o817zrpJgOj06PwySk_Q@mail.gmail.com>
	<CA+w+GKRjURkV40iG=6RLhFyQ-t2G_YAinKk7Os_8zK4+hyYJaw@mail.gmail.com>
Message-ID: <20151006062030.GB1054@navy>

On Mon, Oct 05, 2015 at 06:46:28PM +0200, Mike Hearn via bitcoin-dev wrote:
> The example is this: find someone that accepts 1-block confirmed
> transactions in return for something valuable. There are plenty of them out
> there. Once the soft fork starts, send a P2SH transaction that defines a
> new output controlled by OP_CLTV. It will be incorporated into the UTXO set
> by all miners because it's opaque (p2sh).
> 
> Now send a transaction that pays the merchant, and make it spend your
> OP_CLTV output with an invalid script. New nodes will reject it as a rule
> violator. Old nodes won't.

Old nodes running bitcoind will see it as OP_NOP2, and will reject it
unless they've manually disabled SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS,
which (aiui) has been available since bitcoin 0.10 [0], but not backported
to 0.8 or 0.9.

[0] https://github.com/bitcoin/bitcoin/commit/0391423

That covers about 4700/5880 nodes going by bitnodes.21.co; but I can't
tell how many miners it covers.

Further, AIUI, nodes running 0.8 or 0.9 will still apply IsStandard()
checks to scripts attempting to spend p2sh outputs [1], so will also
fail to either mine or relay your OP_NOP2 payment.

[1] https://github.com/bitcoin/bitcoin/commit/6259937

> So at some point an old miner will create a
> block containing your invalid transaction, the merchant will think they got
> paid, they'll give you the stuff and the fraud is done.

My understanding is that this isn't supposed to be a problem because you
won't be able to find an old miner that will do that; released versions
of bitcoin already block it by default.

Sure, someone could disable those checks and not pay attention to a soft
fork that will cause their blocks to be orphaned, but I'm not seeing why
that's any different a threat compared to someone deliberately mining
invalid blocks to do 1-confirmation doublespends against merchants not
running a full node.

At least, that's my understanding, and I'm not an expert, so corrections
appreciated.

Cheers,
aj

From cipher.anthem at gmx.com  Tue Oct  6 07:17:14 2015
From: cipher.anthem at gmx.com (cipher anthem)
Date: Tue, 6 Oct 2015 09:17:14 +0200
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <5612DBBD.90104@bitcoins.info>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CAAS2fgQ3Qs=s7qwhxjwJa9cLJLMJg+LXjPQDCGUDMEjyrHqO_A@mail.gmail.com>
	<1489086.kGfJeeyi4a@garp>
	<CAAS2fgSyWaRfXHKWZYzZ4X8ksMECaO47dTXum67XwpTTYnbDXg@mail.gmail.com>
	<CAAjy6kC_Je-Gcgvadtr-9+GBYid7ifQ8=DM_XEc7u6ATkka_-g@mail.gmail.com>,
	<5612DBBD.90104@bitcoins.info>
Message-ID: <trinity-4a10aebe-091a-4dac-bdac-36384ef9df63-1444115834646@3capp-mailcom-bs03>

> Sent:?Monday, October 05, 2015 at 8:21 PM
> From:?"Milly Bitcoin via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org>
> To:?bitcoin-dev at lists.linuxfoundation.org
> Subject:?Re: [bitcoin-dev] This thread is not about the soft/hard fork technical debate
> On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:
>> It's pretty clear Mike has turned into concern troll and bully.

> "troll" and, even worse, "concern troll" are terms generally used by
> teenagers on places like Reddit to complain about someone who doesn't
> agree with them.

They should substitute troll for cultist so they appear more professional...

From tomz at freedommail.ch  Tue Oct  6 07:14:35 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Tue, 06 Oct 2015 08:14:35 +0100
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAAS2fgRU3D7_9b=4rpG8B3HHnk_80Dw0WJTavvx5+1jFS6ZmEw@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<1819769.E416F0XigG@garp>
	<CAAS2fgRU3D7_9b=4rpG8B3HHnk_80Dw0WJTavvx5+1jFS6ZmEw@mail.gmail.com>
Message-ID: <2156873.BPPaGcvT6q@garp>

On Monday 5. October 2015 21.26.01 Gregory Maxwell wrote:
> On Mon, Oct 5, 2015 at 9:08 PM, Tom Zander via bitcoin-dev
> 
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:
> >>  (In this case, I don't even believe we have any regulator
> >> 
> >> contributors that disagree).
> > 
> > Regular contributor?
> > 
> > Please explain how for a fork in the protocol should you only listen to
> > regular Bitcoin Core contributors?
> 
> I'm providing some perspective and scope-- referencing again your
> comment about following actions-- what element of the many dozens of
> responses suggests to you that _anyone_ is not being listened to?

Have you ever been at a meeting where you didn't feel like you were being 
listened to?
You get comments like;
 ?I respond to the technical arguments not because I believe they are
 earnestly motivated, but because they provide an avenue for learning for
 myself and others.?

 ?"there is no gridlock here? After several respected members stated there is
 disagreement.

 ?That Mike himself continues to misexplain things is not surprising since he
 has all but outright said that ?[snip]  Which is putting words in the mouth 
of someone you disagree with.


But what really gives a lot of people here the suggestion that members of the 
community that are against the softfork are not being listened to is the 
simple undeniable fact that an alternative or a remedy is not even considered.
There is no code. There is no question posted by the authors which flags to 
use.

Actions speak much louder than words. Read the topic of this thread!
The actions show a disregard for the many objections.  Consensus is not build 
by repeating again and again the arguments that you belief will convince your 
debate-opponent. It is about reaching a middle ground. If either side of the 
debate refuses to budge from their position, you have gridlock.

What came of the request made to PeterT to document the risks and required 
changes in wallets should this soft fork continue?

Why is it soo bad to use a hardfork (with proper voting) instead of a softfork 
that we are in a place that the Bitcoin Core team is willing to throw out a 
lot of goodwill and show their true colours in hundreds of mails that leave 
the opposing side of this debate feeling ignored and left out?


I don't feel specifically unique or special. Nobody needs to reply to this 
email. I don't claim peoples time.

All I'm doing is spelling out what has been living in the back of my head, and 
with me a great deal of others, about how this is playing out.

If you choose to ignore this and you force a softfork, I belief you may be 
surprised at how many active players in the Bitcoin marketplace may see that 
the "Bitcoin Core" team is not an ally any longer.
It is good to remember that the graveyards are filled with people that 
believed to be unreplaceable.
Bitcoin will go on.

Have a nice day!

From elombrozo at gmail.com  Tue Oct  6 07:20:38 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Tue, 06 Oct 2015 07:20:38 +0000
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <trinity-4a10aebe-091a-4dac-bdac-36384ef9df63-1444115834646@3capp-mailcom-bs03>
Message-ID: <em15654dcc-2b93-4166-9464-bd2b7f322616@platinum>

I prefer the term "clown".

Can we please move on?

------ Original Message ------
From: "cipher anthem via bitcoin-dev" 
<bitcoin-dev at lists.linuxfoundation.org>
To: milly at bitcoins.info
Cc: bitcoin-dev at lists.linuxfoundation.org
Sent: 10/6/2015 12:17:14 AM
Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork 
technical debate

>>  Sent: Monday, October 05, 2015 at 8:21 PM
>>  From: "Milly Bitcoin via bitcoin-dev" 
>><bitcoin-dev at lists.linuxfoundation.org>
>>  To: bitcoin-dev at lists.linuxfoundation.org
>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard 
>>fork technical debate
>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:
>>>  It's pretty clear Mike has turned into concern troll and bully.
>
>>  "troll" and, even worse, "concern troll" are terms generally used by
>>  teenagers on places like Reddit to complain about someone who doesn't
>>  agree with them.
>
>They should substitute troll for cultist so they appear more 
>professional...
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From marcel at jamin.net  Tue Oct  6 07:29:13 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Tue, 6 Oct 2015 09:29:13 +0200
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <em15654dcc-2b93-4166-9464-bd2b7f322616@platinum>
References: <trinity-4a10aebe-091a-4dac-bdac-36384ef9df63-1444115834646@3capp-mailcom-bs03>
	<em15654dcc-2b93-4166-9464-bd2b7f322616@platinum>
Message-ID: <CAAUq484f_fb2WJY7YvW+urV_pPw3FKA6OhXUBDDHUfqp6bcSWQ@mail.gmail.com>

This is childish and very disappointing to see.

2015-10-06 9:20 GMT+02:00 Eric Lombrozo via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org>:

> I prefer the term "clown".
>
> Can we please move on?
>
> ------ Original Message ------
> From: "cipher anthem via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org>
> To: milly at bitcoins.info
> Cc: bitcoin-dev at lists.linuxfoundation.org
> Sent: 10/6/2015 12:17:14 AM
> Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork
> technical debate
>
>  Sent: Monday, October 05, 2015 at 8:21 PM
>>>  From: "Milly Bitcoin via bitcoin-dev" <
>>> bitcoin-dev at lists.linuxfoundation.org>
>>>  To: bitcoin-dev at lists.linuxfoundation.org
>>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork
>>> technical debate
>>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:
>>>
>>>>  It's pretty clear Mike has turned into concern troll and bully.
>>>>
>>>
>>  "troll" and, even worse, "concern troll" are terms generally used by
>>>  teenagers on places like Reddit to complain about someone who doesn't
>>>  agree with them.
>>>
>>
>> They should substitute troll for cultist so they appear more
>> professional...
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/10d3c219/attachment.html>

From not.mike.hearn at gmail.com  Tue Oct  6 08:34:57 2015
From: not.mike.hearn at gmail.com (NotMike Hearn)
Date: Tue, 6 Oct 2015 04:34:57 -0400
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAAUq484f_fb2WJY7YvW+urV_pPw3FKA6OhXUBDDHUfqp6bcSWQ@mail.gmail.com>
References: <trinity-4a10aebe-091a-4dac-bdac-36384ef9df63-1444115834646@3capp-mailcom-bs03>
	<em15654dcc-2b93-4166-9464-bd2b7f322616@platinum>
	<CAAUq484f_fb2WJY7YvW+urV_pPw3FKA6OhXUBDDHUfqp6bcSWQ@mail.gmail.com>
Message-ID: <CAKfs=Z-P+ni1nYOqZvP7HGzp3ERa_hHk=VQQzo0o+8_n6FHf0w@mail.gmail.com>

I think I can solve the debate and give everyone what they want.

Some people want BIP65, others do not.

We can roll out 65 in a clever way, such that Greg/PeterT can get it, but
Mike and Peter R don't need to have it (both versions can run alongside
each other). Even better, people can switch back and forth between versions
as much as they like.

How might this work? Well, paradoxically, we could do this by *imposing
additional constraints* on transaction validation, such that transactions
made a very specific certain way will always look valid to non-CLTVers, but
for CLTVers they will not be valid unless the CLTV rules are followed. The
obvious concern is that non-CLTV people might receive invalid payments.
However, their software is already set up to request payments in a non-CLTV
way, so, luckily, this is actually not a problem at all! SPV clients can
elect to only connect to nodes which are non-CLTV.

Problem solved!

I am happy to have solved this problem for you all, and ended this discord
harmoniously. If we all put our heads together, these words of founding
father Aretha Franklin will ring true: "there's nothing we can't overcome".


On Tue, Oct 6, 2015 at 3:29 AM, Marcel Jamin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> This is childish and very disappointing to see.
>
> 2015-10-06 9:20 GMT+02:00 Eric Lombrozo via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org>:
>
>> I prefer the term "clown".
>>
>> Can we please move on?
>>
>> ------ Original Message ------
>> From: "cipher anthem via bitcoin-dev" <
>> bitcoin-dev at lists.linuxfoundation.org>
>> To: milly at bitcoins.info
>> Cc: bitcoin-dev at lists.linuxfoundation.org
>> Sent: 10/6/2015 12:17:14 AM
>> Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork
>> technical debate
>>
>>  Sent: Monday, October 05, 2015 at 8:21 PM
>>>>  From: "Milly Bitcoin via bitcoin-dev" <
>>>> bitcoin-dev at lists.linuxfoundation.org>
>>>>  To: bitcoin-dev at lists.linuxfoundation.org
>>>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork
>>>> technical debate
>>>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:
>>>>
>>>>>  It's pretty clear Mike has turned into concern troll and bully.
>>>>>
>>>>
>>>  "troll" and, even worse, "concern troll" are terms generally used by
>>>>  teenagers on places like Reddit to complain about someone who doesn't
>>>>  agree with them.
>>>>
>>>
>>> They should substitute troll for cultist so they appear more
>>> professional...
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/7173bb2e/attachment.html>

From pete at petertodd.org  Tue Oct  6 11:09:18 2015
From: pete at petertodd.org (Peter Todd)
Date: Tue, 6 Oct 2015 13:09:18 +0200
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <CAOG=w-uEwwDGA3_RF1Epp=xLG7rS4y2O7f9EOfAUa1hAiWkLGQ@mail.gmail.com>
References: <20151003143056.GA27942@muck> <20151004083525.GA18291@navy>
	<561115C0.3080601@sky-ip.org>
	<CAPWm=eUiXAagzasLmKQWRT5EKnMxfeiv6J7M9mm+MhDzG_VwQg@mail.gmail.com>
	<CAOG=w-uEwwDGA3_RF1Epp=xLG7rS4y2O7f9EOfAUa1hAiWkLGQ@mail.gmail.com>
Message-ID: <20151006110917.GA10136@muck>

On Mon, Oct 05, 2015 at 05:19:06PM -0700, Mark Friedenbach via bitcoin-dev wrote:
> Alex, decreasing granularity is a soft-fork, increasing is a hard-fork.
> Therefore I've kept the highest possible precision (1 second, 1 block) with
> the expectation that at some point in the future if we need more low-order
> bits we can soft-fork them to other purposes, we can decrease granularity
> at that time.

You should write that up in the BIP, along with a description of how
exactly that would go; I suspect the most obvious way of dong that
upgrade - just increase precision for everyone - would break
compatbility too much to be practical.

-- 
'peter'[:-1]@petertodd.org
000000000000000010734953ce486a820b6f7907e879b1b6e30fccf603098bef
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/54e180b3/attachment-0001.sig>

From venzen at mail.bihthai.net  Tue Oct  6 17:28:37 2015
From: venzen at mail.bihthai.net (Venzen Khaosan)
Date: Wed, 7 Oct 2015 00:28:37 +0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
Message-ID: <561404C5.80705@mail.bihthai.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Sergio Demain,

You and I have had our altercation, in private, about your assumptions
of authority in this community. That was fine when you told me "for
fuck's sake" on IRC. I'm a man and I made you see your error and
apologize for your trespass.

Now, you present me and the list with an interpretation of some higher
goal that an obviously low-level participant, Mike Hearn, is actioning
here.

No. What you espouse is not what Hearn had premeditated. It all
happened in your mind. "Agent" (quoting popular media) Hearn is a
compulsive contrarian and has a verifiable track record of opposing
and arguing against consensus wherever he endevors. According to
Snowden, he did harm to the public and to colleagues vis-a-vis NSA
surveillance while he held office at Google and he is doing the same
via XT. He is no longer at Google - supposedly by free will. I would
venture, from his own stated goals, that he is in Bitcoin in search of
a salary, even though he displays a fundamental lack of understanding
of Open Source methodology and ideology. And a misconception of
Bitcoin's ability to scale.

The self-proclaimed glory of bitcoinj is a false and empty claim. I
have had to code my nodes to ignore bitjoinj because of its disregard
for protocol policy. For numerous reasons they are more of an irritant
than a positive presence on the network.

You, Lerner, not having an issue with his fallacious position and
actions, speaks about you, too. But you "have nothing for or against
Mike personally" so he's just another participant, regardless of his
behavior and track record, then you give him a thumbs up? Many, maybe
a majority, including Satoshi, have expressed deplorement of O'Hearn
and Andresen. With or without Satoshi you can see the terminal
consensus breach these two populists had engaged in for yourself.
Please answer me and the list how their action does not warrant
rejection from the community?

Yet, for the rest of list members: Agent Hearn, a known co-operative,
shows up with challenges and you respond as if to an equal? A former
head-man, before things fell apart, now an accomplice of Agent Hearn,
Andresen, sprays criticism and you dutifully answer, as if to a Big
Man? Who is he? That self-proclaimed grumpy old-timer? "Run to Google
benchmarks" and there you go. Google? Come on! This is the man who
broke the fundamental consensus rule and now he's got you introducing
Google dependencies into Bitcoin? You're OK with that? Go to XT, you
won't find me or anyone in the community objecting to you and Gavin
playing with Google and all sorts of prefab code there.

Sergio, don't presume to tell me or the list what another man is
saying or what rhythmless jive he's playing. Like everyone here, I
have eyes to see and a mind to comprehend: Hearn is not capable of the
double-play you imply. Nor are you, for that matter. So, thanks for
cutting the cake and showing your true colors, but best you don't
speak for someone else. Speak for yourself so everything is clear and
allegiances don't taint you and whatever you may want to speak, for
yourself, later.


On 10/05/2015 10:56 PM, Sergio Demian Lerner via bitcoin-dev wrote:
> Some of the people on this mailing list are blindly discussing the 
> technicalities of a soft/hard fork without realizing that is not
> Mike's main intention. At least I perceive (and maybe others too)
> something else is happening.
> 
> Let me try to clarify: the discussion has nothing to do with
> technical arguments. I generally like more hard forks than soft
> forks (but I won't explain why because this is not a technical
> thread), but for CLTV this is quite irrelevant (but I won't explain
> why..), and I want CLTV to be deployed asap.
> 
> Mike's intention is to criticize the informal governance model of 
> Bitcoin Core development and he has strategically pushed the
> discussion to a dead-end where the group either:
> 
> 1) ignores him, which is against the established criteria that all 
> technical objections coming from anyone must be addressed until
> that person agrees, so that a change can be uncontroversial. If the
> group moves forward with the change, then the "uncontroversial"
> criteria is violated and then credibility is lost. So a new
> governance model would be required for which the change is within
> the established rules.
> 
> 2) respond to his technical objections one after the other, on
> never ending threads, bringing the project to a standstill.
> 
> As I don't want 2) to happen, then 1) must happen, which is what
> Mike wants. I have nothing for or against Mike personally. I just
> think Mike Hearn has won this battle. But having a more formal
> decision making process may not be too bad for Bitcoin, maybe it
> can actually be good.
> 
> Best regards from a non-developer to my dearest developer friends, 
> Sergio.
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJWFATEAAoJEGwAhlQc8H1mlBgH/288r/v0J0FFj2HukN3l4YLj
5+2d4WRJk/r4jfTUQvBiinmEph0cNuY8gtCYssCsipiOe5Ep0k8oQ3Jd/KWx0fIn
v7eCRzHBLkPTDHd7gnrGSnIsHy1xpO7MGM79ROMOMjoQJUZqborxSxRfJVt5Mdqo
bxMcDL0n+tJbKa4dbmjLtARH6EbTIWvE7kKh8c5ZHbLkXTOPSt6gCL9GKSVM+i1u
mlF1m1TEBLSq4jQ2WJk/8aHHbN5IQr2KzpAEneP3tKqSvl/33b2oaW42LVKbxk95
kDnbtKrBChrHGbLeQ/SRb9NADmvIcnDim4NviphsEarPdl/9OyTW36x2u1j0Slk=
=zgDh
-----END PGP SIGNATURE-----

From venzen at mail.bihthai.net  Tue Oct  6 18:23:33 2015
From: venzen at mail.bihthai.net (Venzen Khaosan)
Date: Wed, 7 Oct 2015 01:23:33 +0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
Message-ID: <561411A5.4020905@mail.bihthai.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Tell you what, eloquent guy...

Give me 15 minutes in a public open mic session with you and i'll
remove you from your high horse and close your voice in Bitcoin, for
good.

Guaranteed. You're too stupid for me to let you run loose with client
funds and this great innovation.

Anytime, anywhere. I'm ready to dismantle your intellectual bankruptcy
in front of the world.

I'll go for your psychological throat first.

Sincerely,
Venzen Khaosan.



On 10/05/2015 11:56 PM, Mike Hearn via bitcoin-dev wrote:
> Hey Sergio,
> 
> To clarify: my /single/ objection is that CLTV should be a hard
> fork. I haven't been raising never-ending technical objections,
> there's only one.
> 
> I /have/ been answering all the various reasons being brought up
> why I'm wrong and soft forks are awesome .... and there do seem to
> be a limitless number of such emails .... but on my side it's still
> just a single objection. If CLTV is a hard fork then I won't be
> objecting anymore, right?
> 
> CLTV deployment is clearly controversial. Many developers other
> than me have noted that hard forks are cleaner, and have other
> desirable properties. I'm not the only one who sees a big question
> mark over soft forks.
> 
> As everyone in the Bitcoin community has been clearly told that 
> controversial changes to the consensus rules must not happen, it's
> clear that CLTV cannot happen in its current form.
> 
> Now I'll be frank - you are quite correct that I fully expect the
> Core maintainers to ignore this controversy and do CLTV as a soft
> fork anyway. I'm a cynic. I don't think "everyone must agree" is
> workable and have said so from the start. Faced with a choice of
> going back on their public statements or having to make changes to
> something they clearly want, I expect them to redefine what "real
> consensus" means. I hope I'm wrong, but if I'm not ..... well, at
> least everyone will see what Gavin and I have been talking about
> for so many months.
> 
> But I'd rather the opcode is tweaked. There's real financial risks
> to a soft fork.
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJWFBGjAAoJEGwAhlQc8H1mn2cH/0pTx1C0FK8shPSPaC3xB6sA
DpGTMrLWNai3i9VTwkUw8UvbqeL2QtZDghPdkDcvbmvOMc3UrOMQbc1eQ1eL6i3g
DiUCqUShOIAIvWJXGPTPNBulWBW9VkgK0y3uOprTd5D0VWKpWvDj+DMNqHaAC2Ab
JAfHx0mHlkTfrcBl30eAJWxoqG/ohu5QvTIP64AsK6w53qlbMcB13cES8mS/HJX9
MUtBcCbYRfF3Gu+OeYaEzzzXeuwsqql9qHr2wZYe9rECkSmYgL0DT5+WZiLY8B/x
E3dFtufR7yAHr91/gj9itOKf+unumhduX8LY8ubuIKmuwjdj30MDdNy7fqZ3uGs=
=lftV
-----END PGP SIGNATURE-----

From venzen at mail.bihthai.net  Tue Oct  6 18:28:41 2015
From: venzen at mail.bihthai.net (Venzen Khaosan)
Date: Wed, 7 Oct 2015 01:28:41 +0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <561411A5.4020905@mail.bihthai.net>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
	<561411A5.4020905@mail.bihthai.net>
Message-ID: <561412D9.3050603@mail.bihthai.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

That's for Mike Hearn. Sooner the better. Hong Kong, December?
Venzen Khaosan


On 10/07/2015 01:23 AM, Venzen Khaosan via bitcoin-dev wrote:
> Tell you what, eloquent guy...
> 
> Give me 15 minutes in a public open mic session with you and i'll 
> remove you from your high horse and close your voice in Bitcoin,
> for good.
> 
> Guaranteed. You're too stupid for me to let you run loose with
> client funds and this great innovation.
> 
> Anytime, anywhere. I'm ready to dismantle your intellectual
> bankruptcy in front of the world.
> 
> I'll go for your psychological throat first.
> 
> Sincerely, Venzen Khaosan.
> 
> 
> 
> On 10/05/2015 11:56 PM, Mike Hearn via bitcoin-dev wrote:
>> Hey Sergio,
> 
>> To clarify: my /single/ objection is that CLTV should be a hard 
>> fork. I haven't been raising never-ending technical objections, 
>> there's only one.
> 
>> I /have/ been answering all the various reasons being brought up 
>> why I'm wrong and soft forks are awesome .... and there do seem
>> to be a limitless number of such emails .... but on my side it's
>> still just a single objection. If CLTV is a hard fork then I
>> won't be objecting anymore, right?
> 
>> CLTV deployment is clearly controversial. Many developers other 
>> than me have noted that hard forks are cleaner, and have other 
>> desirable properties. I'm not the only one who sees a big
>> question mark over soft forks.
> 
>> As everyone in the Bitcoin community has been clearly told that 
>> controversial changes to the consensus rules must not happen,
>> it's clear that CLTV cannot happen in its current form.
> 
>> Now I'll be frank - you are quite correct that I fully expect
>> the Core maintainers to ignore this controversy and do CLTV as a
>> soft fork anyway. I'm a cynic. I don't think "everyone must
>> agree" is workable and have said so from the start. Faced with a
>> choice of going back on their public statements or having to make
>> changes to something they clearly want, I expect them to redefine
>> what "real consensus" means. I hope I'm wrong, but if I'm not
>> ..... well, at least everyone will see what Gavin and I have been
>> talking about for so many months.
> 
>> But I'd rather the opcode is tweaked. There's real financial
>> risks to a soft fork.
> 
> 
>> _______________________________________________ bitcoin-dev
>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJWFBLWAAoJEGwAhlQc8H1mRM8H/0p2sz0gtu62bB+NrllRgU20
C4imzMr904X7JicqDsGhtySGdyk8DuHBSK4k1A3pOgPb+DoNQhcOUfZ2ZTNgR2tT
yjJHrJP2X+g8YixyQiQNBf65bogTgeBGEizh/H33RSGzdHwoIfeVS5Qja/AMUnk1
4XO8d+t5OdtYdKANmR/uUZikrnOXd6KIt9rmJhYUjqmLWXbHzQkhES0mFvJ1BdVZ
ZHNjnWzoE74NAEmPqhhhtU/GCFKQhBq7HHAnqkMoeWk0mgJoGCc+b/4/PwchmUJq
CmVO2TJFrnHb4tYAFgw14tdbSe5ERYT0pHW4qM3gJlYL1ik03k0iQDZZ0eStaXM=
=bwvw
-----END PGP SIGNATURE-----

From naama.kates at gmail.com  Tue Oct  6 19:34:39 2015
From: naama.kates at gmail.com (naama.kates at gmail.com)
Date: Tue, 6 Oct 2015 12:34:39 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <561412D9.3050603@mail.bihthai.net>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<CA+w+GKSNa3TWgHXrp3=3gXdAbE6vVjW_uzus3_2YG9gzKJSskg@mail.gmail.com>
	<561411A5.4020905@mail.bihthai.net>
	<561412D9.3050603@mail.bihthai.net>
Message-ID: <9C7B3D81-76FC-4893-8166-A184C1614D31@gmail.com>

Hey all, nice to meet you... I'm new to the community and thus, after taking that first step of signing up, have been reading/scanning these threads over the last few days without contributing my own two ?-- not, um, 'trolling', just, you know, educating myself and getting familiar with the group ethos and etiquette.  

It wasn't until I'd read ~10 posts that I  understood the initial purpose of the thread!  As few others have mentioned, I'm a bit surprised, at all the back and forth ? la hip-hop 'battling' ;-) It certainly obfuscates-- while entertaining-- to the point where a newbie like myself might drop out... Perhaps this is intentional-- to maintain exclusivity and weed out the uninitiated.  I dunno.  But if not, I'm just noting, as something of an outsider, that it took a while.

But I'd like to contribute.  With what little knowledge I possess, I'm inclined to favor hardfork... Is there a more suitable place to address this?  Perhaps to work on code?  For this specific project, that is...  Anyone point me to a map somewhere?  LOL.

Thanks to all for reading, and much admiration to you all and the work you've done, my latter comments notwithstanding!  

Cheers,
N



> On Oct 6, 2015, at 11:28 AM, Venzen Khaosan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> That's for Mike Hearn. Sooner the better. Hong Kong, December?
> Venzen Khaosan
> 
> 
>> On 10/07/2015 01:23 AM, Venzen Khaosan via bitcoin-dev wrote:
>> Tell you what, eloquent guy...
>> 
>> Give me 15 minutes in a public open mic session with you and i'll 
>> remove you from your high horse and close your voice in Bitcoin,
>> for good.
>> 
>> Guaranteed. You're too stupid for me to let you run loose with
>> client funds and this great innovation.
>> 
>> Anytime, anywhere. I'm ready to dismantle your intellectual
>> bankruptcy in front of the world.
>> 
>> I'll go for your psychological throat first.
>> 
>> Sincerely, Venzen Khaosan.
>> 
>> 
>> 
>>> On 10/05/2015 11:56 PM, Mike Hearn via bitcoin-dev wrote:
>>> Hey Sergio,
>> 
>>> To clarify: my /single/ objection is that CLTV should be a hard 
>>> fork. I haven't been raising never-ending technical objections, 
>>> there's only one.
>> 
>>> I /have/ been answering all the various reasons being brought up 
>>> why I'm wrong and soft forks are awesome .... and there do seem
>>> to be a limitless number of such emails .... but on my side it's
>>> still just a single objection. If CLTV is a hard fork then I
>>> won't be objecting anymore, right?
>> 
>>> CLTV deployment is clearly controversial. Many developers other 
>>> than me have noted that hard forks are cleaner, and have other 
>>> desirable properties. I'm not the only one who sees a big
>>> question mark over soft forks.
>> 
>>> As everyone in the Bitcoin community has been clearly told that 
>>> controversial changes to the consensus rules must not happen,
>>> it's clear that CLTV cannot happen in its current form.
>> 
>>> Now I'll be frank - you are quite correct that I fully expect
>>> the Core maintainers to ignore this controversy and do CLTV as a
>>> soft fork anyway. I'm a cynic. I don't think "everyone must
>>> agree" is workable and have said so from the start. Faced with a
>>> choice of going back on their public statements or having to make
>>> changes to something they clearly want, I expect them to redefine
>>> what "real consensus" means. I hope I'm wrong, but if I'm not
>>> ..... well, at least everyone will see what Gavin and I have been
>>> talking about for so many months.
>> 
>>> But I'd rather the opcode is tweaked. There's real financial
>>> risks to a soft fork.
>> 
>> 
>>> _______________________________________________ bitcoin-dev
>>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
>> _______________________________________________ bitcoin-dev mailing
>> list bitcoin-dev at lists.linuxfoundation.org 
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.22 (GNU/Linux)
> 
> iQEcBAEBAgAGBQJWFBLWAAoJEGwAhlQc8H1mRM8H/0p2sz0gtu62bB+NrllRgU20
> C4imzMr904X7JicqDsGhtySGdyk8DuHBSK4k1A3pOgPb+DoNQhcOUfZ2ZTNgR2tT
> yjJHrJP2X+g8YixyQiQNBf65bogTgeBGEizh/H33RSGzdHwoIfeVS5Qja/AMUnk1
> 4XO8d+t5OdtYdKANmR/uUZikrnOXd6KIt9rmJhYUjqmLWXbHzQkhES0mFvJ1BdVZ
> ZHNjnWzoE74NAEmPqhhhtU/GCFKQhBq7HHAnqkMoeWk0mgJoGCc+b/4/PwchmUJq
> CmVO2TJFrnHb4tYAFgw14tdbSe5ERYT0pHW4qM3gJlYL1ik03k0iQDZZ0eStaXM=
> =bwvw
> -----END PGP SIGNATURE-----
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From naama.kates at gmail.com  Tue Oct  6 19:40:25 2015
From: naama.kates at gmail.com (naama.kates at gmail.com)
Date: Tue, 6 Oct 2015 12:40:25 -0700
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
	technical debate
In-Reply-To: <CAKfs=Z-P+ni1nYOqZvP7HGzp3ERa_hHk=VQQzo0o+8_n6FHf0w@mail.gmail.com>
References: <trinity-4a10aebe-091a-4dac-bdac-36384ef9df63-1444115834646@3capp-mailcom-bs03>
	<em15654dcc-2b93-4166-9464-bd2b7f322616@platinum>
	<CAAUq484f_fb2WJY7YvW+urV_pPw3FKA6OhXUBDDHUfqp6bcSWQ@mail.gmail.com>
	<CAKfs=Z-P+ni1nYOqZvP7HGzp3ERa_hHk=VQQzo0o+8_n6FHf0w@mail.gmail.com>
Message-ID: <B03B9E2B-3B07-4C1B-9AF1-9BAB78B21770@gmail.com>

Just read the proposal for the dual modes... Think it would be best... Protocol question?  Do we discuss the algorithms here on this forum?  Or...

Sorry again for my thick skull!

Nina K

Sent from my iPhone

> On Oct 6, 2015, at 1:34 AM, NotMike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> I think I can solve the debate and give everyone what they want.
> 
> Some people want BIP65, others do not.
> 
> We can roll out 65 in a clever way, such that Greg/PeterT can get it, but Mike and Peter R don't need to have it (both versions can run alongside each other). Even better, people can switch back and forth between versions as much as they like.
> 
> How might this work? Well, paradoxically, we could do this by *imposing additional constraints* on transaction validation, such that transactions made a very specific certain way will always look valid to non-CLTVers, but for CLTVers they will not be valid unless the CLTV rules are followed. The obvious concern is that non-CLTV people might receive invalid payments. However, their software is already set up to request payments in a non-CLTV way, so, luckily, this is actually not a problem at all! SPV clients can elect to only connect to nodes which are non-CLTV.
> 
> Problem solved!
> 
> I am happy to have solved this problem for you all, and ended this discord harmoniously. If we all put our heads together, these words of founding father Aretha Franklin will ring true: "there's nothing we can't overcome".
> 
> 
>> On Tue, Oct 6, 2015 at 3:29 AM, Marcel Jamin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> This is childish and very disappointing to see.
>> 
>> 2015-10-06 9:20 GMT+02:00 Eric Lombrozo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>:
>>> I prefer the term "clown".
>>> 
>>> Can we please move on?
>>> 
>>> ------ Original Message ------
>>> From: "cipher anthem via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org>
>>> To: milly at bitcoins.info
>>> Cc: bitcoin-dev at lists.linuxfoundation.org
>>> Sent: 10/6/2015 12:17:14 AM
>>> Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork technical debate
>>> 
>>>>>  Sent: Monday, October 05, 2015 at 8:21 PM
>>>>>  From: "Milly Bitcoin via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org>
>>>>>  To: bitcoin-dev at lists.linuxfoundation.org
>>>>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork technical debate
>>>>>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:
>>>>>>  It's pretty clear Mike has turned into concern troll and bully.
>>>> 
>>>>>  "troll" and, even worse, "concern troll" are terms generally used by
>>>>>  teenagers on places like Reddit to complain about someone who doesn't
>>>>>  agree with them.
>>>> 
>>>> They should substitute troll for cultist so they appear more professional...
>>>> _______________________________________________
>>>> bitcoin-dev mailing list
>>>> bitcoin-dev at lists.linuxfoundation.org
>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>> 
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
>> 
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/a9d956f7/attachment-0001.html>

From joseph at lightning.network  Tue Oct  6 20:00:31 2015
From: joseph at lightning.network (Joseph Poon)
Date: Tue, 6 Oct 2015 13:00:31 -0700
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <20151003143056.GA27942@muck>
References: <20151003143056.GA27942@muck>
Message-ID: <20151006200031.GA4076@lightning.network>

Hi Peter,

On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via bitcoin-dev wrote:
> So we need to make the case for two main things:
> 
> 1) We have applications that need a relative (instead of absolute CLTV)

Lightning network needs RCLTV for bidireciontal payment channels without
an explicit expiration date. Without a relative locktime, there is an
economic tradeoff between longer channel expiry dates due to lower fees,
and the time-value delay for non-cooperation. Due to this tradeoff,
there is a risk that people may create channels with entities which they
believe will be around in the future and act in a particular way. In
other words, it is possible that people will attach reputation as part
of their decision-making for channel creation.

> 2) Additionally to RCLTV, we need to implement this via nSequence
> 
> However I don't think we've done a good job showing why we need to
> implement this feature via nSequence. BIP68 describes the new nSequence
> semantics, and gives the rational for them as being a
> "Consensus-enforced tx replacement" mechanism, with a bidirectional
> payment channel as an example of this in action. However, the
> bidirectional payment channel concept itself can be easily implemented
> with CLTV alone. There is a small drawback in that the initial
> transaction could be delayed, reducing the overall time the channel
> exists, but the protocol already assumes that transactions can be
> reliably confirmed within a day - significantly less than the proposed
> 30 days duration of the channel. That example alone I don't think
> justifies a fairly complex soft-fork that limits future upgrades; we
> need more justification.

The examples (including for Lightning Network) in BIP 112 provides a
rationale for using a relative locktime which cannot be achieved using
CLTV/hard-nLocktime alone. Without BIP 112, I agree the example in BIP
68 can also be done with nLocktime, but I think they sort of go
together?

However, there are some advantages to using some kind of relative
locktime field such as nSequence over purely a script opcode. This is
especially useful if one presumes some kind of long-term malleability
fix which does not include directly signing the TXID of the parent
transaction. It allows one to update dependent spending transactions
after-the-fact; after transactions are signed. If there are
unbroadcasted 2-of-2 multisig output transactions, where Tx1 is
confirmed on-chain and off-chain Tx2 spends from Tx1, they can elect to
spend Tx3a from the output of Tx2. Tx3a can have an nSequence value
which requires a minimum of 100 block confirmations of Tx2 to elapse
before Tx3a can be broadcast. As neither Tx2 or Tx3a have yet broadcast,
they can elect to double-spend Tx2 with a new transaction with a lower
nSequence value, e.g. Tx3b. This is important, as Tx2 will *always* be
spendable so creating new revocation rules is useful for Tx2.

I think Mark had once described the general idea is to have a similar
separation of the opcode and the actual validation of block height in
the codebase as nLockTime/OP_CLTV, as having pure validation in the
script which may make things a bit ugly.

> So, what else can the community come up with? nSequence itself exists
> because of a failed feature that turned out to not work as intended;
> it'd be a shame to make that kind of mistake again, so let's get our
> semantics and use-cases in the BIPs and documented before we deploy.

I agree. There may be some impact for future changes in Bitcoin, wrt BIP
68. For BIP 112, I think the impact could be minimal, but there may be
future interpretations of nSequence. In particular, in the long term
there may be some kind of need for some kind of "timestop" bit (to
define whether to count relative blockheight or timestopped
blockheight), which already consumes unreserved space. To account for
more than one upgrade, the next future upgrade after BIP 68 may be
implemented by taking the unused most significant bit in nSequence as
defined in BIP 68 in combination with using up a version field bit.
jl1202 had previously suggested doing this for BIP 68 itself:
e7b394187fd96bd77a1c49f7c9b7a9b2 at xbt.hk
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011358.html

As-is, the only actual tradeoff made by BIP 68 is reducing range by
half. I think BIP 68 works as-is or with burning an nVersion bit today,
as it should allow for future (necessary) upgrades.

-- 
Joseph Poon

From naama.kates at gmail.com  Tue Oct  6 20:14:28 2015
From: naama.kates at gmail.com (naama.kates at gmail.com)
Date: Tue, 6 Oct 2015 13:14:28 -0700
Subject: [bitcoin-dev] Bitcoin network simulation testing?
In-Reply-To: <CAOVG1oNimYpzSnB7NUuugagufbD1JnZmAWsuXhMjq45dEF=w-g@mail.gmail.com>
References: <CAOVG1oNimYpzSnB7NUuugagufbD1JnZmAWsuXhMjq45dEF=w-g@mail.gmail.com>
Message-ID: <E8AC44C1-310F-44AE-AB5E-63064A3DE1BE@gmail.com>

Hi Byron, 

I've been using shadow a bit-- I think these simulators are important for testing, but Shadow, at least, certainly seems to have limitations, in some crucial respects.  Running shadow w Tor (which is only logical, because many BCT transactions transpire over Tor) is not as 'light' as presented and slows my own box down quite a bit, so the stats can't possibly be accurate... I don't know if this answers any questions or if you've had this experience at all -- perhaps it is negligible on a more powerful machine than my own-- or perhaps there is an adjustment still unaccounted?

Regards,
Nina K

Sent from my iPhone

> On Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> Hi all, is anyone using simulators like Shadow (https://shadow.github.io), BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed changes to Bitcoin?  I have a few questions about their capabilities and limitations.
> 
> Byron Gibson
> http://mirror.co/
> https://keybase.io/byrongibson
> 
>    
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/0526cce0/attachment.html>

From amiller at cs.umd.edu  Tue Oct  6 21:00:07 2015
From: amiller at cs.umd.edu (Andrew Miller)
Date: Tue, 6 Oct 2015 14:00:07 -0700
Subject: [bitcoin-dev] Bitcoin network simulation testing?
In-Reply-To: <E8AC44C1-310F-44AE-AB5E-63064A3DE1BE@gmail.com>
References: <CAOVG1oNimYpzSnB7NUuugagufbD1JnZmAWsuXhMjq45dEF=w-g@mail.gmail.com>
	<E8AC44C1-310F-44AE-AB5E-63064A3DE1BE@gmail.com>
Message-ID: <CAF7tpEyPqMVXBmbNcSKKywo=sstWxca+4h6_-Tp3-5t_vofbWA@mail.gmail.com>

Shadow uses virtual time, entirely decoupled from real time. So while it
may slow down your machine, this would not affect the stats collected

(although it does make shadow somewhat unpleasant to run, unless you have a
fast machine,  compared to abstract simulators that avoid running the
actual Bitcoin code).
Hi Byron,

I've been using shadow a bit-- I think these simulators are important for
testing, but Shadow, at least, certainly seems to have limitations, in some
crucial respects.  Running shadow w Tor (which is only logical, because
many BCT transactions transpire over Tor) is not as 'light' as presented
and slows my own box down quite a bit, so the stats can't possibly be
accurate... I don't know if this answers any questions or if you've had
this experience at all -- perhaps it is negligible on a more powerful
machine than my own-- or perhaps there is an adjustment still unaccounted?

Regards,
Nina K

Sent from my iPhone

On Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

Hi all, is anyone using simulators like Shadow (https://shadow.github.io),
BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed changes
to Bitcoin?  I have a few questions about their capabilities and
limitations.

Byron Gibson
http://mirror.co/
https://keybase.io/byrongibson



_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/4a166b23/attachment.html>

From moonpunter at gmail.com  Tue Oct  6 22:14:08 2015
From: moonpunter at gmail.com (phm)
Date: Tue, 6 Oct 2015 17:14:08 -0500
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <561360F4.2010906@bitcoins.info>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<8EF9A9A8-3EBE-4427-9745-1C494DF12E9A@gmx.com>
	<5613428F.4080504@bitcoins.info> <201510060454.14127.luke@dashjr.org>
	<5613573C.1080002@bitcoins.info> <561360F4.2010906@bitcoins.info>
Message-ID: <561447B0.3030903@gmail.com>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

In any case this is basically the purpose of version tracking software
such as Git or CVS or any other. It would not be hard to figure out who
had done what. I see you're splitting hairs over nothing as usual,
though, Russ, so I'll leave you to it.

phm

Milly Bitcoin via bitcoin-dev wrote:
> Maybe you are confused with a compilation notice that would say "All Content Copyright and other rights reserved by its Respective Owners" or something similar.  That is not the same thing as claiming ownership using the "c" inside the circle. > > There is also a difference between claiming a copyright for
individual works as part of a compilation as opposed to claiming a
copyright on the compilation itself (which is what the current notice
is). > > Russ > > > On 10/6/2015 1:08 AM, Milly Bitcoin wrote: >>> The
copyright notice refers to the fact that each contributor owns >>>
copyright >>> to his own contributions. There is no legal group that
owns copyright >>> to the >>> entirety of the code. >>> >> >> No, that
is not what such a notice means.  The part after the "c" in the >>
circle is the legal owner.  If the legal owners are not properly >>
identified then the notice is not valid. >> >> --- >>  From Nolo: >> >>
What is a valid copyright notice? >> >> A copyright notice should
contain: >> ?the word "copyright" >> ?a "c" in a circle (?) >> ?the date
of publication, and >> ?the name of either the author or the owner of
all the copyright rights >> in the published work. >> >> For example,
the correct copyright for the fourth edition of The >> Copyright
Handbook, by Stephen Fishman (Nolo), is Copyright ? 1998 by >> Stephen
Fishman. >> >> --- >> from USPTO: >> >> Use of the notice informs the
public that a work is protected by >> copyright, identifies the
copyright owner, and shows the year of first >> publication. >> --- >>
>> Russ >> > > > _______________________________________________ >
bitcoin-dev mailing list > bitcoin-dev at lists.linuxfoundation.org >
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJWFEewAAoJEIUV926tz9E87a4P/21Znk1tx/ZCA4eykig75S9I
d0xyLRREVL/SBOBzE8kJh1YmiHAG1ziHzsgpobNn/N2VuKanCKSXuR3niV5WRtYw
+Oa4uVZUNtAtXKSrFSiGpwJoZN5JnUADcx4sK7En3Z5gFEYSAPrMwvm+M0upl9rd
5b2/VQ/dm3fDUnntnz4DfhV3otEbcLo6imaaV6RDIPru61Fc20blHJhQPEX0laex
N1rUiUvsyUL9H66fGFYmm/6YJcO26k3gPNmmODJdApv7uTVfHBj3c2r4xKSIDVES
WxdL+DdyzJQU6Ng95793QTx29Wn8pV1FlMkC9TQ3biQ1ivoAAKbvxzI27swbPx7d
WGu/ATDj3UN2RBY3hzTTpMIVK5kITVo+QGtA8cg+KcLjVPaasYdb13zy/pE6PO8J
4AWd/nYP/bQlkrebeFylY7vQi6TNCDtpfkJE2r8H+3RovqigN+pLLVhuEVlOBtM1
7N5gAvJWqKtUIgzNKte+eS/yaOFBhHp+veC+QfNMDechC4OGM7IDVdf9oVy9DSCX
68XThI62AT+uhKjvs8ZG3L88AUiiYK6RC4YCUZVoydbQHovmvQRL3Wb36n+krcGH
iV3n3lfk7+D9IrX6ieRwmHpa9a7VAIekqUuCSBdsXBCUM5zNz48bRNJSofjWLtSm
5p0mp5jQxte8loevZztf
=psJx
-----END PGP SIGNATURE-----


From sergio.d.lerner at gmail.com  Wed Oct  7 00:04:53 2015
From: sergio.d.lerner at gmail.com (Sergio Demian Lerner)
Date: Tue, 6 Oct 2015 21:04:53 -0300
Subject: [bitcoin-dev] This thread is not about the soft/hard fork
 technical debate
In-Reply-To: <561404C5.80705@mail.bihthai.net>
References: <CAKzdR-rPoByn=+CgsTc1ZnLkjwtYyJnbQLbn-VHOvz0dLciefQ@mail.gmail.com>
	<561404C5.80705@mail.bihthai.net>
Message-ID: <CAKzdR-rHSJPfTwxdnmm5wmEThi0-BDyFji3V9+5V4CMbfZ51WA@mail.gmail.com>

Hi Venzen,
 I don't know you and I never said "for fuck's sake" to anyone on IRC. I
don't use IRC, and almost never say 4 letter words.

I wonder how technically savvy people trust IRC ids. Could you send me the
link where such an impostor said something to you in my name?

Your e-mail reads like a TV plot. To me, agent Hearn is just Mike. Agent
Lerner is just an Argentinian dude with some spare time to write here. But
maybe you know something I don't....

Best regards!
 Sergio.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/011abf61/attachment-0001.html>

From bitcoin-dev at rgrant.org  Wed Oct  7 05:07:48 2015
From: bitcoin-dev at rgrant.org (Ryan Grant)
Date: Wed, 7 Oct 2015 01:07:48 -0400
Subject: [bitcoin-dev] on rough consensus
Message-ID: <CAMnpzfpixzTgYzvhQM_v1pWg1OHWZ49oz7qd+q_7NE_Gajqx7w@mail.gmail.com>

Bitcoin's participants can improve their ability to stay on a valuable
and censorship resistant blockchain by individually and informally
absorbing cultural wisdom regarding "rough consensus".  This does not
require writing any formal rules about what rough consensus is.  It is
a matter of participation with an understanding.

  https://www.ietf.org/tao.html#rfc.section.2

    In many ways, the IETF runs on the beliefs of its participants.
    One of the "founding beliefs" is embodied in an early quote about
    the IETF from David Clark: "We reject kings, presidents and
    voting.  We believe in rough consensus and running code".

A June 2015 bitcoin-dev thread, arguing about consensus, included the
usual range of responses; ranging from claims that any objection must
block consensus to a definition based on US Justice Stewart's "I'll
know it when I see it".  (It's funny because it's true.  We can
explain it better, though.)

  "Concerns Regarding Threats by a Developer to Remove Commit Access
  from Other Developers"
  http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008772.html

An August 2015 cryptography-list thread presents the idea that rough
consensus can be used as a tool for hindering progress.  The specific
threat was that two protocol options could be made to seem equally
good.  To solve this example, identify that as the problem, then
engage a judgement to pick one solution "good enough" (but that does
not lead to a dead-end for other goals of the project), and go with
it.  There is room, within "rough consensus", for such action to
defend against the attack; as you can see from other excerpts in this
message.

  "[Cryptography] asymmetric attacks on crypto-protocols - the rough
  consensus attack"
  http://www.metzdowd.com/pipermail/cryptography/2015-August/026151.html

To learn about forming a useful "rough consensus", see the very
readable "Tao of the IETF", and RFC 7282.

  "The Tao of the IETF"
  https://www.ietf.org/tao.html
    (previously RFC 4677)

  RFC 7282
  "On Consensus and Humming in the IETF"
  https://tools.ietf.org/html/rfc7282

Strong objections don't block rough consensus:

  https://www.ietf.org/tao.html#getting.things.done

    Rough consensus has been defined in many ways; a simple version is
    that it means that strongly held objections must be debated until
    most people are satisfied that these objections are wrong.

  https://tools.ietf.org/html/rfc7282

    Having full consensus, or unanimity, would be ideal, but we don't
    require it: Requiring full consensus allows a single intransigent
    person who simply keeps saying "No!" to stop the process cold.  We
    only require rough consensus: If the chair of a working group
    determines that a technical issue brought forward by an objector
    has been truly considered by the working group, and the working
    group has made an informed decision that the objection has been
    answered or is not enough of a technical problem to prevent moving
    forward, the chair can declare that there is rough consensus to go
    forward, the objection notwithstanding.

The working group chair's responsibility is different from that of
either a vote counter or a benign dictator:

  http://tools.ietf.org/html/rfc2418

    Note that 51% of the working group does not qualify as "rough
    consensus" and 99% is better than rough.  It is up to the Chair to
    determine if rough consensus has been reached.

  https://tools.ietf.org/html/rfc7282

    3.  Rough consensus is achieved when all issues are addressed, but
         not necessarily accommodated

      [...]

      If the chair finds, in their technical judgement, that the issue
      has truly been considered, and that the vast majority of the
      working group has come to the conclusion that the tradeoff is
      worth making, even in the face of continued objection from the
      person(s) who raised the issue, the chair can declare that the
      group has come to rough consensus.  (And even though this is
      framed in terms of a "vast majority", even that is not
      necessarily true.  This point is discussed in more detail in
      Sections 6 and 7.)

      [...]

      The chair of a working group who is about to find that there is
      only rough consensus is going to have to decide that not only
      has the working group taken the objection seriously, but that it
      has **fully examined the ramifications** of not making a change
      to accommodate it, and that the outcome does not constitute a
      failure to meet the technical requirements of the work.

      [...]

    6.  One hundred people for and five people against might not be
         rough consensus

      [...] one of the great strengths of using consensus over voting:
      It isn't possible to use "vote stuffing" (simply recruiting a
      large number of people to support a particular side, even people
      who have never participated in a working group or the IETF at
      all) to change the outcome of a consensus call.  As long as the
      chair is looking for outstanding technical objections and not
      counting heads, vote stuffing shouldn't affect the outcome of
      the consensus call.

    7.  Five people for and one hundred people against might still be
         rough consensus

      [...Sybil attack] it is within bounds for the chair to say, "We
      have objections, but the objections have been sufficiently
      answered, and the objectors seem uninterested in participating
      in the discussion.  Albeit rough in the extreme, there is rough
      consensus to go with the current solution."

      [...] it is likely that if a working group got this
      dysfunctional, it would put the whole concept of coming to rough
      consensus at risk.  But still, the correct outcome in this case
      is to look at the very weak signal against the huge background
      noise in order to find the rough consensus.

Working group chairs can help direct discussion:

  https://www.ietf.org/tao.html#rfc.section.4.1

    Sometimes discussions get stuck on contentious points and the
    chair may need to steer people toward productive interaction and
    then declare when rough consensus has been met and the discussion
    is over.

Some working groups segregate the role of forming a consensus from
communicating the consensus:

  https://www.ietf.org/tao.html#rfc.section.4.2

    Another method that some Working Groups adopt is to have a Working
    Group "secretary" to handle the juggling of the documents and the
    changes.  The secretary can run the issue tracker if there is one,
    or can simply be in charge of watching that all of the decisions
    that are made on the mailing list are reflected in newer versions
    of the documents.

Bitcoin Core is neither an IETF working group, nor should it aim to
curate its network protocol ruleset as one.  The IETF uses a steering
group, formal variance procedures, an appeals board, and a director
(to send even higher appeals to).  All of those positions could become
points of attack, if Bitcoin were to attempt to use or copy them.
That said, most IETF appeal routes are merely authorized to undo a
prior ruling of consensus, opening for reconsideration prior dismissed
points of argument (on their technical merits).  In Bitcoin, if
developers know what to work on, and can speak clearly enough to the
economic majority, then the system is working; regardless of whether
any role exists taking all the responsibility that an IETF working
group chair would take.

It is absolutely the case that resolving excessive roughness in shared
consensus takes more work than either votes or dictatorship.  It is
also the case that rough consensus is a good defense against
committing to decisions with subtle undesirable long-term effects.
That is why the IETF cares about it, and that same long-term threat is
important in Bitcoin's ecosystem as well.


/// References and Selected IETF Excerpts ///

  "The Tao of the IETF"
  https://www.ietf.org/tao.html

    A 2012 continuation of 2006's RFC 4677, itself first published in
    1994.


  BCP 25
  http://tools.ietf.org/html/rfc2418
    (1998)

    3.3. Session management

      Working groups make decisions through a "rough consensus"
      process.  IETF consensus does not require that all participants
      agree although this is, of course, preferred.  In general, the
      dominant view of the working group shall prevail.  (However, it
      must be noted that "dominance" is not to be determined on the
      basis of volume or persistence, but rather a more general sense
      of agreement.)  Consensus can be determined by a show of hands,
      humming, or any other means on which the WG agrees (by rough
      consensus, of course).  Note that 51% of the working group does
      not qualify as "rough consensus" and 99% is better than rough.
      It is up to the Chair to determine if rough consensus has been
      reached.

      In the case where a consensus, which has been reached during a
      face-to-face meeting, is being **verified on a mailing list**,
      the people who were in the meeting and expressed agreement must
      be taken into account.  If there were 100 people in a meeting
      and only a few people on the mailing list disagree with the
      consensus of the meeting then the consensus should be seen as
      being verified.  Note that enough time should be given to the
      verification process for the mailing list readers to understand
      and consider any objections that may be raised on the list.  The
      normal two week last-call period should be sufficient for this.

      [...]

      To facilitate making forward progress, a Working Group Chair may
      wish to decide to reject or defer the input from a member, based
      upon the following criteria:

        - Old

          The input pertains to a topic that already has been resolved
          and is redundant with information previously available;

        - Minor

          The input is new and pertains to a topic that has already
          been resolved, but it is felt to be of minor import to the
          existing decision;

        - Timing

          The input pertains to a topic that the working group has not
          yet opened for discussion; or

        - Scope

          The input is outside of the scope of the working group
          charter.

    [...]


  RFC 2026
  "The Internet Standards Process -- Revision 3"
  http://tools.ietf.org/html/rfc2026#section-6.5

    6.5 Conflict Resolution and Appeals
    [...]


  RFC 7282
  "On Consensus and Humming in the IETF"
  https://tools.ietf.org/html/rfc7282

    1.  Introduction

      [...] our credo is that we don't let a single individual dictate
      decisions (a king or president), nor should decisions be made by
      a vote, nor do we want decisions to be made in a vacuum without
      practical experience.  Instead, we strive to make our decisions
      by the consent of all participants, though allowing for some
      dissent (rough consensus), and to have the actual products of
      engineering (running code) trump theoretical designs.

      Having full consensus, or unanimity, would be ideal, but we
      don't require it: Requiring full consensus allows a single
      intransigent person who simply keeps saying "No!" to stop the
      process cold.  We only require rough consensus: If the chair of
      a working group determines that a technical issue brought
      forward by an objector has been truly considered by the working
      group, and the working group has made an informed decision that
      the objection has been answered or is not enough of a technical
      problem to prevent moving forward, the chair can declare that
      there is rough consensus to go forward, the objection
      notwithstanding.

    2.  Lack of disagreement is more important than agreement

      [...] **determining** consensus and **coming to** consensus are
      different things than **having** consensus [emphasis in
      original].

      [...]If at the end of the discussion some people have not gotten
      the choice that they prefer, but they have become convinced that
      the chosen solution is acceptable, albeit less appealing, they
      have still come to consensus.  Consensus doesn't require that
      everyone is happy and agrees that the chosen solution is the
      best one.  Consensus is when everyone is sufficiently satisfied
      with the chosen solution, such that they **no longer have
      specific objections** to it.

      [...] "Can anyone not live with choice A?" is more likely to
      only hear from folks who think that choice A is impossible to
      engineer given some constraints.  Following up with, "What are
      the reasons you object to choice A?" is also essential.

      [...]

      There is also an important point to be made about reaching
      consensus and "compromising": Unfortunately, the word
      "compromise" gets used in two different ways, and though one
      sort of compromising to come to consensus is good (and
      important), the other sort of compromising in order to achieve
      consensus can actually be harmful.  As mentioned earlier,
      engineering always involves balancing tradeoffs, and figuring
      out whether one engineering decision makes more sense on balance
      compared to another involves making engineering "compromises":
      We might have to compromise processor speed for lower power
      consumption, or compromise throughput for congestion resistance.
      Those sorts of compromises are among **engineering choices**,
      and they are **expected and essential**.  We always want to be
      weighing tradeoffs and collectively choosing the set that best
      meets the full set of requirements.

      However, there is another sense of "compromise" that involves
      compromising between people, not engineering principles.  For
      example, a minority of a group might object to a particular
      proposal, and even after discussion still think the proposal is
      deeply problematic, but decide that they don't have the energy
      to argue against it and say, "Forget it, do what you want".
      That surely can be called a compromise, but a chair might
      mistakenly take this to mean that they agree, and have therefore
      come to consensus.  But really all that they've done is
      capitulated; they've simply given up by trying to appease the
      others.  That's not coming to consensus; there still exists an
      outstanding unaddressed objection.  Again, if the objection is
      only that the choice is not ideal but is otherwise acceptable,
      such a compromise is fine.  But **conceding** when there is a
      real outstanding technical objection **is not coming to
      consensus**.

      [...]

      Coming to consensus is when everyone (including the person
      making the objection) comes to the conclusion that either the
      objections are valid, and therefore make a change to address the
      objection, or that the objection was not really a matter of
      importance, but **merely a matter of taste**.  Of course, coming
      to full consensus like that does not always happen.  That's why
      in the IETF, we talk about "rough consensus".

    3.  Rough consensus is achieved when all issues are addressed, but
not necessarily accommodated

      [...]

      If the chair finds, in their technical judgement, that the issue
      has truly been considered, and that the vast majority of the
      working group has come to the conclusion that the tradeoff is
      worth making, even in the face of continued objection from the
      person(s) who raised the issue, the chair can declare that the
      group has come to rough consensus.  (And even though this is
      framed in terms of a "vast majority", even that is not
      necessarily true.  This point is discussed in more detail in
      Sections 6 and 7.)

      [...]

      The chair of a working group who is about to find that there is
      only rough consensus is going to have to decide that not only
      has the working group taken the objection seriously, but that it
      has **fully examined the ramifications** of not making a change
      to accommodate it, and that the outcome does not constitute a
      failure to meet the technical requirements of the work.

      In order to do this, the chair will need to have a good idea of
      the purpose and architecture of the work being done, perhaps
      referring to the charter of the working group or a previously
      published requirements document, or even consulting with other
      experts on the topic, and then the chair will use **their own
      technical judgement** to make sure that the solution meets those
      requirements.  It is possible that the chair can come to the
      wrong conclusion, and the chair's conclusion is always
      appealable should that occur, but the chair must use their
      judgement in these cases.  What can't happen is that the chair
      bases their decision solely on hearing a large number of voices
      simply saying, "The objection isn't valid."  That would simply
      be to take a vote.  A **valid justification needs to me made**.

      [...] Indeed, RFC 2418 adds on to [old talk of balloting] by
      stating, "Note that 51% of the working group does not qualify as
      'rough consensus' and 99% is better than rough."  This document
      actually disagrees with the idea that simply balloting or
      otherwise looking at percentages can "determine" consensus.
      While counting heads might give a good guess as to what the
      rough consensus will be, doing so can allow important minority
      views to get lost in the noise.  One of the strengths of a
      consensus model is that minority views are addressed, and using
      a rough consensus model should not take away from that.  That is
      why this document talks a great deal about looking at open
      issues rather than just counting the number of people who do or
      do not support any given issue.  Doing so has some interesting
      and surprising implications that are discussed in subsequent
      sections.

      Any finding of rough consensus needs, at some level, to provide
      a **reasoned explanation** to the person(s) raising the issue of
      why their concern is not going to be accommodated.  A good
      outcome is for the objector to **understand the decision taken
      and accept the outcome**, even though their particular issue is
      not being accommodated in the final product.

      Remember, if the objector feels that the issue is so essential
      that it must be attended to, they always have the option to file
      an appeal.  A technical error is always a valid basis for an
      appeal. [...]

    4.  Humming should be the start of a conversation, not the end

      [...] a show of hands might leave the impression that the number
      of people matters in some formal way.

    5.  Consensus is the path, not the destination

      We don't try to reach consensus in the IETF as an end in itself.
      We use consensus-building as a tool to get to the best technical
      (and sometimes procedural) outcome when we make decisions.
      Experience has shown us that traditional voting leads to gaming
      of the system, "compromises" of the wrong sort as described
      earlier, important minority views being ignored, and, in the
      end, worse technical outcomes.

    6.  One hundred people for and five people against might not be
rough consensus

      [...] one of the great strengths of using consensus over voting:
      It isn't possible to use "vote stuffing" (simply recruiting a
      large number of people to support a particular side, even people
      who have never participated in a working group or the IETF at
      all) to change the outcome of a consensus call.  As long as the
      chair is looking for outstanding technical objections and not
      counting heads, vote stuffing shouldn't affect the outcome of
      the consensus call.

      [...]

      Even if no particular person is still standing up for an issue,
      that doesn't mean an issue can be ignored.  As discussed
      earlier, simple capitulation on an issue is not coming to
      consensus.  But even in a case where someone who is not an
      active participant, who might not care much about the fate of
      the work, raises a substantive issue and subsequently
      disappears, the issue needs to be addressed before the chair can
      claim that rough consensus exists.

    7.  Five people for and one hundred people against might still be
rough consensus

      [...Sybil attack] it is within bounds for the chair to say, "We
      have objections, but the objections have been sufficiently
      answered, and the objectors seem uninterested in participating
      in the discussion.  Albeit rough in the extreme, there is rough
      consensus to go with the current solution."

      [...] it is likely that if a working group got this
      dysfunctional, it would put the whole concept of coming to rough
      consensus at risk.  But still, the correct outcome in this case
      is to look at the very weak signal against the huge background
      noise in order to find the rough consensus.

    9.  Security Considerations

      "He who defends with love will be secure." -- Lao Tzu

From michabailey at gmail.com  Wed Oct  7 06:13:23 2015
From: michabailey at gmail.com (Micha Bailey)
Date: Wed, 7 Oct 2015 09:13:23 +0300
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRjURkV40iG=6RLhFyQ-t2G_YAinKk7Os_8zK4+hyYJaw@mail.gmail.com>
References: <CAKfs=Z_jVKtjeSHM1a6n+ch6WcazkshmDgN4Wi1K_kLBUE4o4w@mail.gmail.com>
	<BLU436-SMTP132FA09C343ACB7C82E6C98C64B0@phx.gbl>
	<CA+w+GKT0Th4Tpk=cCxfJwsMdB5NLrARACU3_qiRn4Ns7z_PXYQ@mail.gmail.com>
	<CADm_WcaVbj98G9acqbwUxYudHhWh01FLpm5KgL3rqHffd5WCXg@mail.gmail.com>
	<CA+w+GKTkos5gwZmN_1c7wUFmJgZMJGzZbaZeWO=Rwt3Ta3Zbzw@mail.gmail.com>
	<CABm2gDp1r78OtM=MfHqvV17-6N=nCG+hFOwqL0R6DHz9SjLmsg@mail.gmail.com>
	<CA+w+GKS-AZGBSwuN1dgEs6wa-R=jHE0fmfmQ0TL9Cw9b6L71UQ@mail.gmail.com>
	<CABm2gDpgpRg9U5ToNM98pQgz8VRwT8o817zrpJgOj06PwySk_Q@mail.gmail.com>
	<CA+w+GKRjURkV40iG=6RLhFyQ-t2G_YAinKk7Os_8zK4+hyYJaw@mail.gmail.com>
Message-ID: <CAAmoQf3o5OLhtcsh4OZ_cp52vf__L7oxow+7CFx7WKQoEHCpFw@mail.gmail.com>

On Monday, October 5, 2015, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> As Greg explained to you repeatedly, a softfork won't cause a
>> non-upgraded full node to start accepting blocks that create more
>> subsidy than is valid.
>>
>
> It was an example. Adam Back's extension blocks proposal would, in fact,
> allow for a soft forking change that creates more subsidy than is valid (or
> does anything else) by hiding one block inside another.
>

Maybe I'm missing something, but wouldn't this turn into a hard fork the
moment you try to spend an output created in one of these extension blocks?
So sure, the block that contains the extension would be considered valid,
but unupgraded validators will not update the UTXO set accordingly, meaning
that those new TXOs can't be spent because, according to their rules, they
don't exist.

>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/a86d8d32/attachment-0001.html>

From venzen at mail.bihthai.net  Wed Oct  7 06:59:38 2015
From: venzen at mail.bihthai.net (Venzen Khaosan)
Date: Wed, 7 Oct 2015 13:59:38 +0700
Subject: [bitcoin-dev] Bitcoin dev list bounce
Message-ID: <5614C2DA.8060204@mail.bihthai.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Warren,

I submitted a public apology for a false accusation I leveled at
Sergio Lerner but my message was bounced by the list.

Can you please confirm if there is a know reason for this.

I had also sent the message to his personal email account, but I think
it is important that a public apology be made as soon as possible, in
the interest of goodwill and setting the record straight.

regards,
Venzen Khaosan
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJWFMLXAAoJEGwAhlQc8H1mDvMH/iLQtUyTKfoeC/ztCRRD4kBl
QCIcFyoFzfF7COg38yvyl0N6V1JnUBTzMw3oSPhphKjH/Y5oRyLB+DQdEO9JQqnG
LDV04cbSEoF1TOPvIPAVCY2QetFruSn3thcfhV5NFdNXwF/zAMrGiRMu6p0OJK+d
6ky1fuhvm4tsfrj74elQH9MGXO5BulsaAQJqyAqxf4w8nG8pU/a+vfa7mPeQ7qbu
ypfNOY14yAk7bxaqy5c6kuSzJ1oCmiQePIIrWjZKffzEiAoTT8y6JpbLrQz5wsIh
HgMr3/Z6ktxMrJjO0Bb5qwq84uweelWzt4UfcO6wjecvnyCcSrjlNCC6BM/HZPg=
=ZsCj
-----END PGP SIGNATURE-----

From adam.back at gmail.com  Wed Oct  7 09:45:24 2015
From: adam.back at gmail.com (Dr Adam Back)
Date: Wed, 7 Oct 2015 11:45:24 +0200
Subject: [bitcoin-dev] extension-blocks/sidechains &
 fractional/coin-cap/demurrage (Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!)
Message-ID: <CALqxMTFAb5_AQfH1ZfWAC6JscttG6puaJGbS43WDZRt9h7cRQg@mail.gmail.com>

Micha I think you are correct, I dont think extension blocks (or
sidechains for that matter) can allow soft-fork increase of the total
Bitcoins in the system, because the main chain still enforces the 21m
coin cap.  A given extension block could go fractional, but if there
was a run to get out, the last users out will lose, or they'll all
take a hair-cut etc.  So presumably users would decline to use an
extension block with fractional bitcoin.

I mean you could view it like say an exchange (mtgox?) that somehow
accidentally or intentionally creates fictional Bitcoin IOUs in it's
system, eg in some kind of pyramid scheme - that doesnt create more
Bitcoins, it just means people who think they have IOUs for real
Bitcoins, are fractional or fake.  With an extension block or
sidechain furthermore it is transparent so they will know they are
fractional.

Relatedly it seems possible to implement a sidechain with advertised
demurrage, with an exit or entrance fee to discourage holding outside
of the chain to avoid demurrage.  There are apparently economic
arguments for why people might opt in to that (higher velocity
economic activity, gresham's law, merchants offering discounts for
buying with demurrage Bitcoins, maybe lower per transaction fees
because say miners can mine the demurrage).  However that is a
different topic, again not changing the number of coins in
circulation.

Adam


On 7 October 2015 at 08:13, Micha Bailey via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
> On Monday, October 5, 2015, Mike Hearn via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>
>>> As Greg explained to you repeatedly, a softfork won't cause a
>>> non-upgraded full node to start accepting blocks that create more
>>> subsidy than is valid.
>>
>>
>> It was an example. Adam Back's extension blocks proposal would, in fact,
>> allow for a soft forking change that creates more subsidy than is valid (or
>> does anything else) by hiding one block inside another.
>
>
> Maybe I'm missing something, but wouldn't this turn into a hard fork the
> moment you try to spend an output created in one of these extension blocks?
> So sure, the block that contains the extension would be considered valid,
> but unupgraded validators will not update the UTXO set accordingly, meaning
> that those new TXOs can't be spent because, according to their rules, they
> don't exist.

From venzen at mail.bihthai.net  Wed Oct  7 10:13:15 2015
From: venzen at mail.bihthai.net (Venzen Khaosan)
Date: Wed, 7 Oct 2015 17:13:15 +0700
Subject: [bitcoin-dev] extension-blocks/sidechains &
 fractional/coin-cap/demurrage (Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!)
In-Reply-To: <CALqxMTFAb5_AQfH1ZfWAC6JscttG6puaJGbS43WDZRt9h7cRQg@mail.gmail.com>
References: <CALqxMTFAb5_AQfH1ZfWAC6JscttG6puaJGbS43WDZRt9h7cRQg@mail.gmail.com>
Message-ID: <5614F03B.5010405@mail.bihthai.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Exactly,

In the coming fee market crunch, any speculator would trade an
extended block in the implied direction and also hedge in the opposite
direction in case it gets rejected.

The speculative public will most likely trade in the same direction,
initially, but arbitrage and futures markets perspectives (generally
more informed) will go the opposite way and create a new chart pattern
that will precede contrarian price motion.

In the end, as the community illusion of non-interdependce fades, we'd
expect bitcoin price to tend to its natural condition: parity with the
most powerful fiat currency out there: the psychological King, the US
dollar.

After decades we could expect an inverse correlation to develop as the
majority world moves from paper to digital - barring a critical
survival event such as a solar EMP, which is due, but which I reserve
judgement upon for investment purposes.

You can buy coffee with XT bitcoins, but that is really small-minded
behavior in the current deflationary environment... Mike Hearn, you
economic imbicile, give me 15 minutes with you in public and I will
knock you out of the Bitcoin space forever...


Venzen Khaosan



On 10/07/2015 04:45 PM, Dr Adam Back via bitcoin-dev wrote:
> Micha I think you are correct, I dont think extension blocks (or 
> sidechains for that matter) can allow soft-fork increase of the
> total Bitcoins in the system, because the main chain still enforces
> the 21m coin cap.  A given extension block could go fractional, but
> if there was a run to get out, the last users out will lose, or
> they'll all take a hair-cut etc.  So presumably users would decline
> to use an extension block with fractional bitcoin.
> 
> I mean you could view it like say an exchange (mtgox?) that
> somehow accidentally or intentionally creates fictional Bitcoin
> IOUs in it's system, eg in some kind of pyramid scheme - that
> doesnt create more Bitcoins, it just means people who think they
> have IOUs for real Bitcoins, are fractional or fake.  With an
> extension block or sidechain furthermore it is transparent so they
> will know they are fractional.
> 
> Relatedly it seems possible to implement a sidechain with
> advertised demurrage, with an exit or entrance fee to discourage
> holding outside of the chain to avoid demurrage.  There are
> apparently economic arguments for why people might opt in to that
> (higher velocity economic activity, gresham's law, merchants
> offering discounts for buying with demurrage Bitcoins, maybe lower
> per transaction fees because say miners can mine the demurrage).
> However that is a different topic, again not changing the number of
> coins in circulation.
> 
> Adam
> 
> 
> On 7 October 2015 at 08:13, Micha Bailey via bitcoin-dev 
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> 
>> 
>> On Monday, October 5, 2015, Mike Hearn via bitcoin-dev 
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>> 
>>>> As Greg explained to you repeatedly, a softfork won't cause
>>>> a non-upgraded full node to start accepting blocks that
>>>> create more subsidy than is valid.
>>> 
>>> 
>>> It was an example. Adam Back's extension blocks proposal would,
>>> in fact, allow for a soft forking change that creates more
>>> subsidy than is valid (or does anything else) by hiding one
>>> block inside another.
>> 
>> 
>> Maybe I'm missing something, but wouldn't this turn into a hard
>> fork the moment you try to spend an output created in one of
>> these extension blocks? So sure, the block that contains the
>> extension would be considered valid, but unupgraded validators
>> will not update the UTXO set accordingly, meaning that those new
>> TXOs can't be spent because, according to their rules, they don't
>> exist.
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJWFPA4AAoJEGwAhlQc8H1m6VMH+wXreRpLb8VweIxVJ9mDJL2g
d3rfhLL+50gZTt8csYJ7f/0BzbcS7nICOlvqn3PLAIu+Usr06iPIJSfHezvJ0GvE
gbspU4lNZArScPjOVhrigrQVuN75KM2a84QW/hf/5Epf6rXWnClqc+IR/I33V/Yg
0LUUFcmSXjOHVE18Yh3PB0ELY5I8/JYSzYX0dTu5qpbWzcjXUDfCfqewLKEgveZB
+QGVrvMDPNxnx1AvMuMsmP3el/lvaNBTtuVjKhYZEgF8NhFB4hm/nLRSrMFOuBju
vZlE8gbAQQlShCicuanL+l8KHiUi4/o3O5dIGoI/FwVoiXDK88158hpDLh1slv0=
=GUI4
-----END PGP SIGNATURE-----

From venzen at mail.bihthai.net  Wed Oct  7 10:19:29 2015
From: venzen at mail.bihthai.net (Venzen Khaosan)
Date: Wed, 7 Oct 2015 17:19:29 +0700
Subject: [bitcoin-dev] Public Debate Challenge
Message-ID: <5614F1B1.2020505@mail.bihthai.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Mike Hearn,

I challenge you to a public debate with the following conditions:

- - the topic is Bitcoin
- - 15 minutes in length (19mins including breaks)
- - 3 sessions of 5 minutes each
- - each speaker makes one statement in each session, not exceeding 2mins
- - 2 minute breaks between sessions
- - we agree to an arbiter
- - a public venue with an international audience
- - I make the first statement versus your already well-established
position and widely publicized views.
- - each speaker commits to making 3 statements and participating in the
full duration of the event - 19 minutes
- - the footage will be published as-is with no editing or right to
forfeiture, showing both participants at all times.
- - to protect myself from your "official" friends, the event will be
unannounced and will start when you see me on an event panel.

sincerely,
Venzen Khaosan
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJWFPGuAAoJEGwAhlQc8H1m/6kH/RBdbnuVa/GwKDwgEJbz6p0W
1OKu51Td/IC9Ty5DRhD8is0tzgPtGdJ9I6BFfd548Nhj954YnHE/sKP5XSa75jke
3ombYCWPILrhk64XzIqBfpunygoERKDOUe1r8MmiSdtWY5XHWNEIWxhmydT2GCdZ
DRO3bMKVxBBGhGROxzh2fHHPQ6N2qSmWPRD6QEHMeTvNlN3YN1NyHYiblYZ+Ox8X
1fvemS7ecWhFRovDimiCxMX5yQQCTBSTWbBvyabkyyWUV3p3qgGk8mt+D7rFlLtt
1KnoY6kerW738E5Nd10xMZ5ifeyiD4wATvijLJ0CIa05kiuy0DkaaDYpd28J9tM=
=Qcvl
-----END PGP SIGNATURE-----

From venzen at mail.bihthai.net  Wed Oct  7 10:39:14 2015
From: venzen at mail.bihthai.net (Venzen Khaosan)
Date: Wed, 7 Oct 2015 17:39:14 +0700
Subject: [bitcoin-dev] Public Debate Challenge
In-Reply-To: <DB5PR07MB09194B72B407A86E4B3D84C1B5360@DB5PR07MB0919.eurprd07.prod.outlook.com>
References: <5614F1B1.2020505@mail.bihthai.net>
	<DB5PR07MB09194B72B407A86E4B3D84C1B5360@DB5PR07MB0919.eurprd07.prod.outlook.com>
Message-ID: <5614F652.2090008@mail.bihthai.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Sure, and I share your view - I want to know what is happening in the
Bitcoin development space when I scan this email account.

Unfortunately, one moral imbecile keeps polluting this space.

I am confident that I have the debating resources and mental savvy to
show this individual to be an intellectual lightweight and a bankrupt
speaker that should shut his mouth, for good, in this list.

I'm not sure where your own allegiances lie, but if you think XT is a
bright idea, you can go there and participate to your heart's content.
In the meantime, this is a Bitcoin Core developer list and
self-proclaimed enemies of Core should not post here or pretend to
have consensus-blocking powers, as O'Hearn keeps capitulating.

Let me put this aspiring lord in his place and then we talk again. I
will knock him down in round 1 and knock him out in round 3. If you
love this man, go to xt-dev list and enjoy and spend your coins in
that alternate chain.

Venzen Khaosan



On 10/07/2015 05:26 PM, Patrick Mccorry (PGR) wrote:
> Hi,
> 
> I do not mean to be rude (I am sure you have the best intentions). 
> But I do not think this e-mail (or the others) are appropriate for 
> the mailing list. I want to be notified by new developments in the 
> community, not really about public debates of character. Please, 
> can these e-mails be kept off-list?
> 
> Paddy
> 
> ________________________________________ From: 
> bitcoin-dev-bounces at lists.linuxfoundation.org 
> <bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of
> Venzen Khaosan via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> Sent: 07 October 2015 11:19
> To: Mike Hearn; Bitcoin Dev Subject: [bitcoin-dev] Public Debate
> Challenge
> 
> Mike Hearn,
> 
> I challenge you to a public debate with the following conditions:
> 
> - the topic is Bitcoin - 15 minutes in length (19mins including 
> breaks) - 3 sessions of 5 minutes each - each speaker makes one 
> statement in each session, not exceeding 2mins - 2 minute breaks 
> between sessions - we agree to an arbiter - a public venue with an 
> international audience - I make the first statement versus your 
> already well-established position and widely publicized views. - 
> each speaker commits to making 3 statements and participating in 
> the full duration of the event - 19 minutes - the footage will be 
> published as-is with no editing or right to forfeiture, showing 
> both participants at all times. - to protect myself from your 
> "official" friends, the event will be unannounced and will start 
> when you see me on an event panel.
> 
> sincerely, Venzen Khaosan 
> _______________________________________________ bitcoin-dev
> mailing list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJWFPZRAAoJEGwAhlQc8H1mKkUH/jAYVoTMT7OW0bg2dquYBmiF
pNbO5oaqO1F3QGLqlLs/S8h/rxkY0tfaae86HEZ/fVNn9r2k6aykmrrztAZdgOT+
p9a7Po/kdd5BPoJ1F84cTxaAiMtl7y8oPyT/np7Ky+Nnyxs2di5eKdV3UK4gKzpt
6xsCR16CinGC8LPveCkGHNgqlk0Of4sNpnkhW945oO2nJzVB3TogvhJQvecZ3hw9
MzIxj59lXI8EL9qhkE0Ufaia1fHfRorCU0qt7mAOxHaZt4Wy3CpgGqrrRGsqXdud
KC3xePRpCaRmLqyUQVXjXdlvANMnXje5dTg9LH0Gseuhb26RGfq7Z3lQ+3kacVo=
=gHMy
-----END PGP SIGNATURE-----

From adam at cypherspace.org  Wed Oct  7 10:42:08 2015
From: adam at cypherspace.org (Adam Back)
Date: Wed, 7 Oct 2015 12:42:08 +0200
Subject: [bitcoin-dev] on rough consensus
In-Reply-To: <CAMnpzfpixzTgYzvhQM_v1pWg1OHWZ49oz7qd+q_7NE_Gajqx7w@mail.gmail.com>
References: <CAMnpzfpixzTgYzvhQM_v1pWg1OHWZ49oz7qd+q_7NE_Gajqx7w@mail.gmail.com>
Message-ID: <CALqxMTFPuPjjPHBEvwVH7xGx4ofUgvYYqcSBcgBJ3mwdMgz3yw@mail.gmail.com>

Thank you for posting that, most informative, and suggest people
arguing here lately to read it carefully.

May I suggest that people who wish to debate what rough consensus
means, to take it to this reddit thread

https://www.reddit.com/r/Bitcoin/comments/3ntga9/bitcoindev_a_brilliant_post_on_defining_consensus/

Thanks again for posting, helpful context/reminder for all.

Adam

On 7 October 2015 at 07:07, Ryan Grant via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Bitcoin's participants can improve their ability to stay on a valuable
> and censorship resistant blockchain by individually and informally
> absorbing cultural wisdom regarding "rough consensus".  This does not
> require writing any formal rules about what rough consensus is.  It is
> a matter of participation with an understanding.
>
>   https://www.ietf.org/tao.html#rfc.section.2
...

From nxtchg at hush.com  Wed Oct  7 10:56:33 2015
From: nxtchg at hush.com (NxtChg)
Date: Wed, 07 Oct 2015 13:56:33 +0300
Subject: [bitcoin-dev] Public Debate Challenge
In-Reply-To: <5614F652.2090008@mail.bihthai.net>
References: <5614F1B1.2020505@mail.bihthai.net>
	<DB5PR07MB09194B72B407A86E4B3D84C1B5360@DB5PR07MB0919.eurprd07.prod.outlook.com>
	<5614F652.2090008@mail.bihthai.net> 
Message-ID: <20151007105633.EE5AD2018E@smtp.hushmail.com>


>Unfortunately, one moral imbecile keeps polluting this space.

Indeed.


From pete at petertodd.org  Wed Oct  7 12:59:22 2015
From: pete at petertodd.org (Peter Todd)
Date: Wed, 7 Oct 2015 14:59:22 +0200
Subject: [bitcoin-dev] Public Debate Challenge
In-Reply-To: <5614F1B1.2020505@mail.bihthai.net>
References: <5614F1B1.2020505@mail.bihthai.net>
Message-ID: <20151007125922.GA29508@muck>

On Wed, Oct 07, 2015 at 05:19:29PM +0700, Venzen Khaosan via bitcoin-dev wrote:
> Mike Hearn,
> 
> I challenge you to a public debate with the following conditions:

This is very off-topic for a development mailing list.

Go away.

-- 
'peter'[:-1]@petertodd.org
000000000000000010734953ce486a820b6f7907e879b1b6e30fccf603098bef
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/5ff37111/attachment.sig>

From aj at erisian.com.au  Wed Oct  7 15:00:14 2015
From: aj at erisian.com.au (Anthony Towns)
Date: Thu, 8 Oct 2015 01:00:14 +1000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
Message-ID: <20151007150014.GA21849@navy>

On Tue, Sep 29, 2015 at 06:31:28PM +0000, Gregory Maxwell via bitcoin-dev wrote:
> On Mon, Sep 28, 2015 at 10:48 AM, Mike Hearn via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > There is no consensus on using a soft fork to deploy this feature. It will
> > result in the same problems as all the other soft forks - SPV wallets will
> > become less reliable during the rollout period. I am against that, as it's
> > entirely avoidable.
> > Make it a hard fork and my objection will be dropped.
> I'm surprised to see this response-- [...]
> I am having a little difficulty making sense of this complaint. [...]

I think I finally understand this objection.

For a hard fork, activated by a majority of nodes/hashpower upgrading
to a new bitcoin release, the behaviour is:

 - upgraded bitcoin nodes: everything works fine

 - non-upgraded bitcoin nodes: total breakage. there will be a push
   alert telling you to upgrade. anyone who doesn't will think they're
   tracking "bitcoin" but will actually be tracking a new "bitcoin-old"
   altcoin. most non-upgraded miners will presumably realise they're
   wasting hashpower and stop doing this pretty quick; and remaining
   miners will only create blocks very slowly due to sudden reduced
   hashpower, without possibility of difficulty adjustment. users who
   don't uprade will try to do transactions, but won't see them confirm
   for hours or days due to lack of hashpower.

 - SPV nodes: they track the upgraded majority, everything works fine
   even if they don't upgrade

For a soft fork, again activated by the majority of upgraded hashpower,
the behaviour is:

 - upgraded bitcoin nodes: everything works fine

 - non-upgraded bitcoin miners willing to mine newly unacceptable txs:
   may produce orphaned blocks; may be able to be forced into producing
   blocks that will be orphaned

 - other non-upgraded bitcoin nodes: everything works fine

 - SPV nodes: partial breakage -- may track invalid blocks for 1-2
   confirmations until the set of "non-upgraded bitcoin miners willing
   to produce newly unacceptable txs" becomes vanishingly few.

In the hard fork case, all non-upgraded nodes get a DoS attack, but
aren't likey to be hit by doublespends. That's inconvenient, but it's
not too bad.

In the soft fork case, if there's likely to be old nodes mining
previously invalid transactions, SPV clients become very unreliable,
to the point of possibly seeing semi-regular double-spends with 1 or
2 confirmation, until miners that aren't paying attention notice their
blocks are getting orphaned and upgrade. That is pretty bad IMHO; and
there are a lot more *people* running SPV clients than bitcoin nodes,
so its impact is potentially worse in both ways.

Comparing generic hard forks versus generic soft forks, the above says
to me that a hard fork would be less harmful to users in general, and
thus a better approach.

*But* a soft fork that only forbids transactions that would previously
not have been mined anyway should be the best of both worlds, as it
automatically reduces the liklihood of old miners building newly invalid
blocks to a vanishingly small probability; which means that upgraded
bitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*
continuing to work fine during the upgrade.

AFAICS, that's what BIP65 achieves, as will similar OP_NOP* replacements
like BIP112.

But that only applies to a subset of potential soft forks, not every
soft fork.

Maybe a good way to think about it is something like this.  Consensus
(IsValid) is always less restrictive than (default) policy (previously
IsStandard, not sure how to summarise it now, maybe it's just OP_NOP
redefinition?).  So choosing a new consensus rule will be one of:

  * even less restrictive than consensus (hard fork)

  * more restrictive than consensus, but less restrictive than policy
    (safe soft fork)

  * more restrictive than IsStandard etc (damaging soft fork)

Hmm, in particular, following this line of thinking it's not clear to
me that BIP68 is actually less restrictive than current policy? At
least, I can't see anything that prevents txs with nSequence set to
something other than 0 or ~0 from being relayed?

If it's not, and nodes currently happily mine and relay transactions
with nSequence set without caring what it's set to, doesn't this mean
BIP68 is of the "damaging soft fork" variety? That is, if it activated
as a soft-fork with a majority of miners using it, but a minority of ~5%
not upgraded, then

 - someone could construct an tx with nSequence set to sometime in
   the future, but not using OP_CSV

 - this tx would get relayed by old nodes (but not upgraded nodes
   due to CheckLockTime)

 - non-upgraded miners would mine it into a block immediately, which
   would then get orphaned by majority hashpower

 - before it got orphaned, non-upgraded nodes and SPV clients would
   be misled and vulnerable to double spend attacks of txs with 0, 1 or
   maybe 2 confirmations

(BIP65 with OP_CLTV and BIP112 with OP_CSV don't have that problem as
they both redefine a non-standard opcode and would not get relayed or
mined by old, non-upgraded nodes, and are thus "safe soft forks" per
above terminology. This is just BIP68)

Can anyone confirm or refute the above?

Cheers,
aj


From j at toom.im  Wed Oct  7 15:46:08 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Wed, 7 Oct 2015 08:46:08 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20151007150014.GA21849@navy>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<20151007150014.GA21849@navy>
Message-ID: <A763EBF7-4FA5-4FE4-9595-01317B264B0A@toom.im>


On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> *But* a soft fork that only forbids transactions that would previously
> not have been mined anyway should be the best of both worlds, as it
> automatically reduces the liklihood of old miners building newly invalid
> blocks to a vanishingly small probability; which means that upgraded
> bitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*
> continuing to work fine during the upgrade.

I agree with pretty much everything you wrote except the above paragraph.

An attacker can create a transaction that would be valid if it were an OP_NOP, but not valid if it were any more restrictive transaction. For example, an attacker might send 1 BTC to an address with  . An old node would consider that OP_CLTV to be OP_NOP, so no signature is necessary for old nodes. Then the attacker buys something from a merchant running old node code or an SPV client, and spends the 1 BTC in that address in a way that is invalid according to OP_CLTV but valid according to OP_NOP, and includes a hefty fee. A miner on the old version includes this transaction into a block, thereby making the block invalid according to the new rules, and rejected by new-client miners. The merchant sees the 1-conf, and maybe even 2-conf, rejoices, and ships. The attacker then has until the OP_CLTV matures to double-spend the coin with new nodes using a valid signature.

Basically, it's trivial to create transactions that exploit the difference in validation rules as long as miners are still on the old version to mine them. Transactions can be created that are guaranteed to be orphaned and trivially double-spendable. Attackers never have to risk actual losses. This can be done as long as miners continue to mine old-version blocks, regardless of their frequency.

Those of you who know Script better than me: would this be an example of a transaction that would be spendable with a valid sig XOR with (far future date OR old code)?

OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY OP_PUSHDATA <locktime far in the future> OP_CLTV
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/c701783e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/c701783e/attachment.sig>

From elombrozo at gmail.com  Wed Oct  7 16:02:14 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 07 Oct 2015 09:02:14 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <A763EBF7-4FA5-4FE4-9595-01317B264B0A@toom.im>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<20151007150014.GA21849@navy>
	<A763EBF7-4FA5-4FE4-9595-01317B264B0A@toom.im>
Message-ID: <B7359445-2B91-4A12-8222-9730D91572C7@gmail.com>

That's why it's important to measure miner adoptance. Note that this isn't a vote - it's an adoption metric for what is presumably a fairly uncontroversial upgrade. If there's contentious controversy amongst miner all bets are off.

Our current mechanisms are imperfect in this regard...as we've seen in the past, miners have deliberately disabled checks despite signaling adoption in their blocks. But a real hashpower supermajority would make such attacks hard to pull off in practice.

- Eric

On October 7, 2015 8:46:08 AM PDT, "Jonathan Toomim (Toomim Bros) via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev
><bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> *But* a soft fork that only forbids transactions that would
>previously
>> not have been mined anyway should be the best of both worlds, as it
>> automatically reduces the liklihood of old miners building newly
>invalid
>> blocks to a vanishingly small probability; which means that upgraded
>> bitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*
>> continuing to work fine during the upgrade.
>
>I agree with pretty much everything you wrote except the above
>paragraph.
>
>An attacker can create a transaction that would be valid if it were an
>OP_NOP, but not valid if it were any more restrictive transaction. For
>example, an attacker might send 1 BTC to an address with  . An old node
>would consider that OP_CLTV to be OP_NOP, so no signature is necessary
>for old nodes. Then the attacker buys something from a merchant running
>old node code or an SPV client, and spends the 1 BTC in that address in
>a way that is invalid according to OP_CLTV but valid according to
>OP_NOP, and includes a hefty fee. A miner on the old version includes
>this transaction into a block, thereby making the block invalid
>according to the new rules, and rejected by new-client miners. The
>merchant sees the 1-conf, and maybe even 2-conf, rejoices, and ships.
>The attacker then has until the OP_CLTV matures to double-spend the
>coin with new nodes using a valid signature.
>
>Basically, it's trivial to create transactions that exploit the
>difference in validation rules as long as miners are still on the old
>version to mine them. Transactions can be created that are guaranteed
>to be orphaned and trivially double-spendable. Attackers never have to
>risk actual losses. This can be done as long as miners continue to mine
>old-version blocks, regardless of their frequency.
>
>Those of you who know Script better than me: would this be an example
>of a transaction that would be spendable with a valid sig XOR with (far
>future date OR old code)?
>
>OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY
>OP_PUSHDATA <locktime far in the future> OP_CLTV
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/cbd40201/attachment-0001.html>

From not.mike.hearn at gmail.com  Wed Oct  7 16:09:06 2015
From: not.mike.hearn at gmail.com (NotMike Hearn)
Date: Wed, 7 Oct 2015 12:09:06 -0400
Subject: [bitcoin-dev] Public Debate Challenge
In-Reply-To: <20151007125922.GA29508@muck>
References: <5614F1B1.2020505@mail.bihthai.net> <20151007125922.GA29508@muck>
Message-ID: <CAKfs=Z9yP4_-m-i+9ndjvQ2fg+KEpdDLu+F2qy45NWXp-Dq3dA@mail.gmail.com>

On Wed, Oct 7, 2015 at 8:59 AM, Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Wed, Oct 07, 2015 at 05:19:29PM +0700, Venzen Khaosan via bitcoin-dev
> wrote:
> > Mike Hearn,
> >
> > I challenge you to a public debate with the following conditions:
>
> This is very off-topic for a development mailing list.
>


I disagree.

Therefore, we do not have a consensus.

As there is no consensus, you need to do one of two things:

1) Post a 10 page, 5 paragraph persuasive essay about how you are a Traitor
to Consensus, and do it
loudly on Reddit, MySpace, LinkedIn, etc, so that everyone in the community
is correctly informed.

2) Do nothing.

This is a very logical argument and is of the utmost seriousness, as what
Peter[:-1] is doing is a threat
to Consensus, which is the very foundation of Bitcoin. These are related
issues.

I question Peter[:-1]'s motives and hereby challenge him to a public debate
with the following conditions:

- - The subject is Bitcoin.
- - The debate may take place at any time at any place.
- - You will not know that the debate has begun until it is over.

Sincerely,
NMH


>
> Go away.
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000010734953ce486a820b6f7907e879b1b6e30fccf603098bef
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/91c6de2f/attachment.html>

From elombrozo at gmail.com  Wed Oct  7 16:25:53 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 07 Oct 2015 09:25:53 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <B7359445-2B91-4A12-8222-9730D91572C7@gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<20151007150014.GA21849@navy>
	<A763EBF7-4FA5-4FE4-9595-01317B264B0A@toom.im>
	<B7359445-2B91-4A12-8222-9730D91572C7@gmail.com>
Message-ID: <4A595469-D2E7-4C6A-9EDC-2DF82B0BD212@gmail.com>

You're right about the potential for 1 bad confirmation even with very low frequency...but with an overwhelming supermajority of hashpower, 2 bad confirmations become quite unlikely, n bad confirmations becomes exponentially unlikely in n.

As part of such soft fork deployments, it's true that old nodes might see a bad confirmation on occasion (even assuming overwhelming supermajority hashpower adoptance). So yes, old nodes and SPV clients should probably require more confirmations right around such a transition...or should upgrade. It is entirely possible to make clients warn the user if the block version is unrecognized, which will help to prevent anyone from accepting bad blocks (although SPV security necessarily relies on miners to validate for them).

On October 7, 2015 9:02:14 AM PDT, Eric Lombrozo <elombrozo at gmail.com> wrote:
>That's why it's important to measure miner adoptance. Note that this
>isn't a vote - it's an adoption metric for what is presumably a fairly
>uncontroversial upgrade. If there's contentious controversy amongst
>miner all bets are off.
>
>Our current mechanisms are imperfect in this regard...as we've seen in
>the past, miners have deliberately disabled checks despite signaling
>adoption in their blocks. But a real hashpower supermajority would make
>such attacks hard to pull off in practice.
>
>- Eric
>
>On October 7, 2015 8:46:08 AM PDT, "Jonathan Toomim (Toomim Bros) via
>bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev
>><bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> *But* a soft fork that only forbids transactions that would
>>previously
>>> not have been mined anyway should be the best of both worlds, as it
>>> automatically reduces the liklihood of old miners building newly
>>invalid
>>> blocks to a vanishingly small probability; which means that upgraded
>>> bitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*
>>> continuing to work fine during the upgrade.
>>
>>I agree with pretty much everything you wrote except the above
>>paragraph.
>>
>>An attacker can create a transaction that would be valid if it were an
>>OP_NOP, but not valid if it were any more restrictive transaction. For
>>example, an attacker might send 1 BTC to an address with  . An old
>node
>>would consider that OP_CLTV to be OP_NOP, so no signature is necessary
>>for old nodes. Then the attacker buys something from a merchant
>running
>>old node code or an SPV client, and spends the 1 BTC in that address
>in
>>a way that is invalid according to OP_CLTV but valid according to
>>OP_NOP, and includes a hefty fee. A miner on the old version includes
>>this transaction into a block, thereby making the block invalid
>>according to the new rules, and rejected by new-client miners. The
>>merchant sees the 1-conf, and maybe even 2-conf, rejoices, and ships.
>>The attacker then has until the OP_CLTV matures to double-spend the
>>coin with new nodes using a valid signature.
>>
>>Basically, it's trivial to create transactions that exploit the
>>difference in validation rules as long as miners are still on the old
>>version to mine them. Transactions can be created that are guaranteed
>>to be orphaned and trivially double-spendable. Attackers never have to
>>risk actual losses. This can be done as long as miners continue to
>mine
>>old-version blocks, regardless of their frequency.
>>
>>Those of you who know Script better than me: would this be an example
>>of a transaction that would be spendable with a valid sig XOR with
>(far
>>future date OR old code)?
>>
>>OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY
>>OP_PUSHDATA <locktime far in the future> OP_CLTV
>>
>>
>>------------------------------------------------------------------------
>>
>>_______________________________________________
>>bitcoin-dev mailing list
>>bitcoin-dev at lists.linuxfoundation.org
>>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>-- 
>Sent from my Android device with K-9 Mail. Please excuse my brevity.

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/eefa3a34/attachment.html>

From j at toom.im  Wed Oct  7 16:26:24 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Wed, 7 Oct 2015 09:26:24 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <B7359445-2B91-4A12-8222-9730D91572C7@gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<20151007150014.GA21849@navy>
	<A763EBF7-4FA5-4FE4-9595-01317B264B0A@toom.im>
	<B7359445-2B91-4A12-8222-9730D91572C7@gmail.com>
Message-ID: <AC65525B-0565-4005-8C58-4E5B5EA81F54@toom.im>



On Oct 7, 2015, at 9:02 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:

> But a real hashpower supermajority would make such attacks hard to pull off in practice.

If you had a 99% hashpower supermajority on the new version, an attacker would still be able to perform this attack once per day. Since the attacker is creating a transaction which is invalid according to new clients, it will just sit around in old clients' mempool until one of them mines a block.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/114cbf39/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/114cbf39/attachment-0001.sig>

From aj at erisian.com.au  Wed Oct  7 16:38:37 2015
From: aj at erisian.com.au (Anthony Towns)
Date: Thu, 8 Oct 2015 02:38:37 +1000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <A763EBF7-4FA5-4FE4-9595-01317B264B0A@toom.im>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<20151007150014.GA21849@navy>
	<A763EBF7-4FA5-4FE4-9595-01317B264B0A@toom.im>
Message-ID: <20151007163837.GA28855@navy>

On Wed, Oct 07, 2015 at 08:46:08AM -0700, Jonathan Toomim (Toomim Bros) via bitcoin-dev wrote:
> On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > *But* a soft fork that only forbids transactions that would previously
> > not have been mined anyway should be the best of both worlds, ...
> I agree with pretty much everything you wrote except the above paragraph.
> An attacker can create a transaction that [...] A miner on the old version 
> includes this transaction into a block, [...]

The point of that case is that there aren't such miners, so that exploit
doesn't apply.

In particular, AIUI, you'll have a hard job right now finding someone to
mine an OP_NOP2 transaction -- eligius might do it, but I don't think many
others will. And you also need your currently OP_NOP2-friendly miner not
to upgrade to an OP_CLTV-validating codebase, so I don't think eligius
will qualify there.

> Those of you who know Script better than me: would this be an example of a transaction that would be spendable with a valid sig XOR with (far future date OR old code)?
> 
> OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY OP_PUSHDATA <locktime far in the future> OP_CLTV

If you want XOR, you'd need something more like:

 OP_IF OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY
 OP_ELSE <locktime> OP_CLTV
 OP_ENDIF

But that' still fail IsStandard and DISCOURAGE_UPGRADABLE_NOPS checks
if you tried spending without a valid sig, so wouldn't be mined by
current nodes. (Not having a sig would also allow anyone to spend it to
themselves, so that might make it hard to use as a basis for double
spends anyway...)

Cheers,
aj

From d at domob.eu  Wed Oct  7 17:25:06 2015
From: d at domob.eu (Daniel Kraft)
Date: Wed, 07 Oct 2015 19:25:06 +0200
Subject: [bitcoin-dev] The new obfuscation patch & GetStats
Message-ID: <56155572.5040501@domob.eu>

Hi!

I hope this is not a stupid question, but I thought I'd ask here first
instead of opening a Github ticket (in case I'm wrong).

With the recently merged "obfuscation" patch, content of the
"chainstate" LevelDB is obfuscated by XOR'ing against a random "key".
This is handled by CLevelDBWrapper's Read/Write methods, which probably
cover most of the usecases.

*However*, shouldn't it also be handled when iterating over the
database?  In particular, I would expect that the obfuscation key is
applied before line 119 in txdb.cpp (i. e., while iterating over the
coin database in CCoinsViewDB::GetStats).

Is there a reason why this need not be done there, or is this an actual
oversight?

Yours,
Daniel

-- 
http://www.domob.eu/
OpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737
Namecoin: id/domob -> https://nameid.org/?name=domob
--
Done:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz
To go: Mon-Pri

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/f6c7e0f9/attachment.sig>

From adam at cypherspace.org  Wed Oct  7 23:07:48 2015
From: adam at cypherspace.org (Adam Back)
Date: Thu, 8 Oct 2015 01:07:48 +0200
Subject: [bitcoin-dev] soft-fork security (Re: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!)
Message-ID: <CALqxMTGs7ro5_TeHAQjB_s1qa+GjQcaLrA5QwODCQOOgDPVP6Q@mail.gmail.com>

On 7 October 2015 at 18:26, Jonathan Toomim (Toomim Bros) via
bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Oct 7, 2015, at 9:02 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:
> If you had a 99% hashpower supermajority on the new version, an attacker
> would still be able to perform this attack once per day.

[ie wait for a non-upgraded miner to win a block]

I dont think that is something strong and new to focus on or worry
about, because in Bitcoin's game theory there are lets say 3 types of
miners we're in aggregate trying to get security from:

a) honest (following protocol) bolstered by financial incentive to
remain honest of subsidy & fees
b) agnostic / lazy (just run software, upgrade when they lose money
and/or get shouted at)
c) dishonest

Bitcoin remains secure with various combinations of percentages.  For
sure you wont have a good time if you assume < 1% are dishonest.

Therefore this attack can already happen, and in fact has.  Users of
bitcoin must behave accordingly with confirmations.

Bitcoin direct is not super secure for unconfirmed (so-called
0-confirm) transactions, or even for 1-confirm transactions.  See also
Finney attack.

That does not prevent people using unconfirmed transactions with risk
scoring, or in high trust settings, or high margin businesses selling
digital artefacts or physical with nominal incremental cost.

But it does mean that one has to keep that in mind.  And it also
motivates lightning network or payment channels (lightning with one
intermediate node vs a network of nodes) - they can provide basically
instant 0-confirm securely, and that seems like the future.

In my opinion anyone relying on unconfirmed transactions needs to
monitor for problems, and have some plan B or workaround if the fraud
rates shoot up (if someone tries to attack it in an organised way),
and also a plan C mid-term plan to do something more robust.  Some
people are less charitable and want to kill unconfirmed transactions
immediately.  The message is the same ultimately.

Adam

From james.obeirne at gmail.com  Wed Oct  7 23:32:03 2015
From: james.obeirne at gmail.com (James O'Beirne)
Date: Wed, 7 Oct 2015 16:32:03 -0700
Subject: [bitcoin-dev] The new obfuscation patch & GetStats
In-Reply-To: <56155572.5040501@domob.eu>
References: <56155572.5040501@domob.eu>
Message-ID: <CAPfvXfLw25J_mXn6b9QO_VDTU3EoVP9zxt7bbN0RF+2coYAdJA@mail.gmail.com>

Hey, Daniel.

Patch author here. Thanks for the diligence; I think this indeed may be an
oversight, though I'm going to need to look into a bit more thoroughly at
home. Curious that it didn't fail any of the automated tests.

Correct me if I'm wrong, but the only actual invocation of that method is
here
<https://github.com/bitcoin/bitcoin/blob/master/src/rpcblockchain.cpp#L448>
(and even then, proxied through a few layers of CCoinView-machinery). In
fact, this line
<https://github.com/bitcoin/bitcoin/blob/master/src/coins.cpp#L48> makes me
suspect that the implementation of GetStats you reference may be dead code.

In any case, you raise a good point: if users of CLevelDBWrapper go
directly for the iterator, they run the risk of dealing with obfuscated
data. This should be remedied somehow.

I'll give it more look this evening.

Thanks again for the find,
James

On Wed, Oct 7, 2015 at 10:25 AM, Daniel Kraft via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi!
>
> I hope this is not a stupid question, but I thought I'd ask here first
> instead of opening a Github ticket (in case I'm wrong).
>
> With the recently merged "obfuscation" patch, content of the
> "chainstate" LevelDB is obfuscated by XOR'ing against a random "key".
> This is handled by CLevelDBWrapper's Read/Write methods, which probably
> cover most of the usecases.
>
> *However*, shouldn't it also be handled when iterating over the
> database?  In particular, I would expect that the obfuscation key is
> applied before line 119 in txdb.cpp (i. e., while iterating over the
> coin database in CCoinsViewDB::GetStats).
>
> Is there a reason why this need not be done there, or is this an actual
> oversight?
>
> Yours,
> Daniel
>
> --
> http://www.domob.eu/
> OpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737
> Namecoin: id/domob -> https://nameid.org/?name=domob
> --
> Done:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz
> To go: Mon-Pri
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/d8da0a40/attachment.html>

From james.obeirne at gmail.com  Thu Oct  8 00:29:25 2015
From: james.obeirne at gmail.com (James O'Beirne)
Date: Wed, 7 Oct 2015 17:29:25 -0700
Subject: [bitcoin-dev] The new obfuscation patch & GetStats
In-Reply-To: <CAPfvXfLw25J_mXn6b9QO_VDTU3EoVP9zxt7bbN0RF+2coYAdJA@mail.gmail.com>
References: <56155572.5040501@domob.eu>
	<CAPfvXfLw25J_mXn6b9QO_VDTU3EoVP9zxt7bbN0RF+2coYAdJA@mail.gmail.com>
Message-ID: <CAPfvXfKxKoAO3n0ru4X3mMvtWkwPQyK4n7YziCac75yap7_YRg@mail.gmail.com>

This has been confirmed as a bug. Thanks again for reporting. I've filed a
fix here (https://github.com/bitcoin/bitcoin/pull/6777), and will be
writing tests to prevent regressions.

On Wed, Oct 7, 2015 at 4:32 PM, James O'Beirne <james.obeirne at gmail.com>
wrote:

> Hey, Daniel.
>
> Patch author here. Thanks for the diligence; I think this indeed may be an
> oversight, though I'm going to need to look into a bit more thoroughly at
> home. Curious that it didn't fail any of the automated tests.
>
> Correct me if I'm wrong, but the only actual invocation of that method is
> here
> <https://github.com/bitcoin/bitcoin/blob/master/src/rpcblockchain.cpp#L448>
> (and even then, proxied through a few layers of CCoinView-machinery). In
> fact, this line
> <https://github.com/bitcoin/bitcoin/blob/master/src/coins.cpp#L48> makes
> me suspect that the implementation of GetStats you reference may be dead
> code.
>
> In any case, you raise a good point: if users of CLevelDBWrapper go
> directly for the iterator, they run the risk of dealing with obfuscated
> data. This should be remedied somehow.
>
> I'll give it more look this evening.
>
> Thanks again for the find,
> James
>
> On Wed, Oct 7, 2015 at 10:25 AM, Daniel Kraft via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi!
>>
>> I hope this is not a stupid question, but I thought I'd ask here first
>> instead of opening a Github ticket (in case I'm wrong).
>>
>> With the recently merged "obfuscation" patch, content of the
>> "chainstate" LevelDB is obfuscated by XOR'ing against a random "key".
>> This is handled by CLevelDBWrapper's Read/Write methods, which probably
>> cover most of the usecases.
>>
>> *However*, shouldn't it also be handled when iterating over the
>> database?  In particular, I would expect that the obfuscation key is
>> applied before line 119 in txdb.cpp (i. e., while iterating over the
>> coin database in CCoinsViewDB::GetStats).
>>
>> Is there a reason why this need not be done there, or is this an actual
>> oversight?
>>
>> Yours,
>> Daniel
>>
>> --
>> http://www.domob.eu/
>> OpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737
>> Namecoin: id/domob -> https://nameid.org/?name=domob
>> --
>> Done:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz
>> To go: Mon-Pri
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/ce7d4d3f/attachment-0001.html>

From lf-lists at mattcorallo.com  Thu Oct  8 03:33:07 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 08 Oct 2015 03:33:07 +0000
Subject: [bitcoin-dev] Proposed new policy for transactions that depend
	on other unconfirmed transactions
In-Reply-To: <CAPWm=eWfnuW98aLhaULCM5BAXThOz1E_APLC+Yd2uOJ4-B4PsA@mail.gmail.com>
References: <CAPWm=eWuvC8zYM_ipAnaQttKQQG2Vas6np_bAFkxG31eR5w=xQ@mail.gmail.com>
	<55D77A7F.40402@mattcorallo.com>
	<CAJN5wHVzzo-dD6FFyaydEDm27HK2OkWxC0o0Pxcy-N9wTfv8Gw@mail.gmail.com>
	<CAPWm=eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ@mail.gmail.com>
	<CAPWm=eVVdyYxePrXur17P=FdMpUvNmByz30hey5=R46PQPhf-Q@mail.gmail.com>
	<CAJN5wHXJkFefminbnY6O93PUkQKCyLpvM57TCp+4q6p6CEzhzg@mail.gmail.com>
	<CAPWm=eWfnuW98aLhaULCM5BAXThOz1E_APLC+Yd2uOJ4-B4PsA@mail.gmail.com>
Message-ID: <272A5405-676C-4CC9-8E17-F3149DDB18AA@mattcorallo.com>

There is a PR up for this change at https://github.com/bitcoin/bitcoin/pull/6771, which is getting some discussion for those following along.

On October 5, 2015 1:02:40 PM PDT, Alex Morcos via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Yes, total number of dependent transactions regardless of chain depth.
>
>A descendant package means all the transactions that can not be
>included in
>a block before the transaction in question.
>
>An ancestor package means all the transactions that are required to be
>included in a block before the transaction in question can be.
>
>
>
>
>On Mon, Oct 5, 2015 at 2:51 PM, Danny Thorpe <danny.thorpe at gmail.com>
>wrote:
>
>> What does "package" mean here?
>>
>> When you say 25 txs, does that mean maximum linked chain depth, or
>total
>> number of dependent transactions regardless of chain depth?
>>
>> Thanks,
>> -Danny
>>
>>
>>
>> On Mon, Oct 5, 2015 at 11:45 AM, Alex Morcos via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> I'd like to propose updates to the new policy limits on unconfirmed
>>> transaction chains.
>>>
>>> The existing limits in master and scheduled for release in 0.12 are:
>>> Ancestor packages = 100 txs and 900kb total size
>>> Descendant packages = 1000 txs and 2500kb total size
>>>
>>> Before 0.12 is released I would like to propose a significant
>reduction
>>> in these limits. In the course of analyzing algorithms for mempool
>>> limiting, it became clear that large packages of unconfirmed
>transactions
>>> were the primary vector for mempool clogging or relay fee boosting
>attacks.
>>> Feedback from the initial proposed limits was that they were too
>generous
>>> anyway.
>>>
>>> The proposed new limits are:
>>> Ancestor packages = 25 txs and 100kb total size
>>> Descendant packages = 25 txs and 100kb total size
>>>
>>> Based on historical transaction data, the most restrictive of these
>>> limits is the 25 transaction count on descendant packages. Over the
>period
>>> of April and May of this year (before stress tests), 5.8% of
>transactions
>>> would have violated this limit alone. Applying all the limits
>together
>>> would have affected 6.1% of transactions.
>>>
>>> Please keep in mind these are policy limits that affect transactions
>>> which depend on other unconfirmed transactions only. They are not a
>change
>>> to consensus rules and do not affect how many chained txs a valid
>block may
>>> contain. Furthermore, any transaction that was unable to be relayed
>due to
>>> these limits need only wait for some of its unconfirmed ancestors to
>be
>>> included in a block and then it could be successfully broadcast.
>This is
>>> unlikely to affect the total time from creation to inclusion in a
>block.
>>> Finally, these limits are command line arguments that can easily be
>changed
>>> on an individual node basis in Bitcoin Core.
>>>
>>> Please give your feedback if you know of legitimate use cases that
>would
>>> be hindered by these limits.
>>>
>>> Thanks,
>>> Alex
>>>
>>> On Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com>
>wrote:
>>>
>>>> Thanks for everyone's review.  These policy changes have been
>merged in
>>>> to master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>,
>which
>>>> just implements these limits and no mempool limiting yet.  The
>default
>>>> ancestor package size limit is 900kb not 1MB.
>>>>
>>>> Yes I think these limits are generous, but they were designed to be
>as
>>>> generous as was computationally feasible so they were
>unobjectionable
>>>> (since the existing policy was no limits).  This does not preclude
>future
>>>> changes to policy that would reduce these limits.
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe
><danny.thorpe at gmail.com>
>>>> wrote:
>>>>
>>>>> The limits Alex proposed are generous (bordering on obscene!), but
>>>>> dropping that down to allowing only two levels of chained
>unconfirmed
>>>>> transactions is too tight.
>>>>>
>>>>> Use case: Brokered asset transfers may require sets of
>transactions
>>>>> with a dependency tree depth of 3 to be published together. ( N
>seller txs,
>>>>> 1 broker bridge tx, M buyer txs )
>>>>>
>>>>> If the originally proposed depth limit of 100 does not provide a
>>>>> sufficient cap on memory consumption or loop/recursion depth, a
>depth limit
>>>>> of 10 would provide plenty of headroom for this 3 level use case
>and
>>>>> similar patterns.
>>>>>
>>>>> -Danny
>>>>>
>>>>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <
>>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>>>
>>>>>> I dont see any problem with such limits. Though, hell, if you
>limited
>>>>>> entire tx dependency trees (ie transactions and all required
>>>>>> unconfirmed
>>>>>> transactions for them) to something like 10 txn, maximum two
>levels
>>>>>> deep, I also wouldnt have a problem.
>>>>>>
>>>>>> Matt
>>>>>>
>>>>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:
>>>>>> > Hi everyone,
>>>>>> >
>>>>>> >
>>>>>> > I'd like to propose a new set of requirements as a policy on
>when to
>>>>>> > accept new transactions into the mempool and relay them.  This
>policy
>>>>>> > would affect transactions which have as inputs other
>transactions
>>>>>> which
>>>>>> > are not yet confirmed in the blockchain.
>>>>>> >
>>>>>> > The motivation for this policy is 6470
>>>>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to
>limit
>>>>>> the
>>>>>> > size of a mempool.  As discussed in that pull
>>>>>> >
><https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736
>>>>>> >,
>>>>>> > once the mempool is full a new transaction must be able to pay
>not
>>>>>> only
>>>>>> > for the transaction it would evict, but any dependent
>transactions
>>>>>> that
>>>>>> > would be removed from the mempool as well.  In order to make
>sure
>>>>>> this
>>>>>> > is always feasible, I'm proposing 4 new policy limits.
>>>>>> >
>>>>>> > All limits are command line configurable.
>>>>>> >
>>>>>> > The first two limits are required to make sure no chain of
>>>>>> transactions
>>>>>> > will be too large for the eviction code to handle:
>>>>>> >
>>>>>> > Max number of descendant txs : No transaction shall be accepted
>if it
>>>>>> > would cause another transaction in the mempool to have too many
>>>>>> > descendant transactions (all of which would have to be evicted
>if the
>>>>>> > ancestor transaction was evicted).  Default: 1000
>>>>>> >
>>>>>> > Max descendant size : No transaction shall be accepted if it
>would
>>>>>> cause
>>>>>> > another transaction in the mempool to have the total size of
>all its
>>>>>> > descendant transactions be too great.  Default : maxmempool /
>200
>>>>>> =  2.5MB
>>>>>> >
>>>>>> > The third limit is required to make sure calculating the state
>>>>>> required
>>>>>> > for sorting and limiting the mempool and enforcing the first 2
>>>>>> limits is
>>>>>> > computationally feasible:
>>>>>> >
>>>>>> > Max number of ancestor txs:  No transaction shall be accepted
>if it
>>>>>> has
>>>>>> > too many ancestor transactions which are not yet confirmed (ie,
>in
>>>>>> the
>>>>>> > mempool). Default: 100
>>>>>> >
>>>>>> > The fourth limit is required to maintain the pre existing
>policy goal
>>>>>> > that all transactions in the mempool should be mineable in the
>next
>>>>>> block.
>>>>>> >
>>>>>> > Max ancestor size: No transaction shall be accepted if the
>total
>>>>>> size of
>>>>>> > all its unconfirmed ancestor transactions is too large. 
>Default: 1MB
>>>>>> >
>>>>>> > (All limits include the transaction itself.)
>>>>>> >
>>>>>> > For reference, these limits would have affected less than 2% of
>>>>>> > transactions entering the mempool in April or May of this year.
>>>>>> During
>>>>>> > the period of 7/6 through 7/14, while the network was under
>stress
>>>>>> test,
>>>>>> > as many as 25% of the transactions would have been affected.
>>>>>> >
>>>>>> > The code to implement the descendant package tracking and new
>policy
>>>>>> > limits can be found in 6557
>>>>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built
>off
>>>>>> of 6470.
>>>>>> >
>>>>>> > Thanks,
>>>>>> > Alex
>>>>>> >
>>>>>> >
>>>>>> >
>>>>>> > _______________________________________________
>>>>>> > bitcoin-dev mailing list
>>>>>> > bitcoin-dev at lists.linuxfoundation.org
>>>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>> >
>>>>>> _______________________________________________
>>>>>> bitcoin-dev mailing list
>>>>>> bitcoin-dev at lists.linuxfoundation.org
>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>>
>>>>>
>>>>>
>>>>
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>>
>>
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/36d65554/attachment.html>

From d at domob.eu  Thu Oct  8 05:14:50 2015
From: d at domob.eu (Daniel Kraft)
Date: Thu, 08 Oct 2015 07:14:50 +0200
Subject: [bitcoin-dev] The new obfuscation patch & GetStats
In-Reply-To: <CAPfvXfKxKoAO3n0ru4X3mMvtWkwPQyK4n7YziCac75yap7_YRg@mail.gmail.com>
References: <56155572.5040501@domob.eu>
	<CAPfvXfLw25J_mXn6b9QO_VDTU3EoVP9zxt7bbN0RF+2coYAdJA@mail.gmail.com>
	<CAPfvXfKxKoAO3n0ru4X3mMvtWkwPQyK4n7YziCac75yap7_YRg@mail.gmail.com>
Message-ID: <5615FBCA.30700@domob.eu>

Hi James!

On 2015-10-08 02:29, James O'Beirne wrote:
> This has been confirmed as a bug. Thanks again for reporting. I've filed
> a fix here (https://github.com/bitcoin/bitcoin/pull/6777), and will be
> writing tests to prevent regressions.

Thanks for the quick fix!

I thought to submit a patch myself today in case the issue is confirmed
as an oversight, but it is very nice to see that this is no longer
necessary at all. :)

Yours,
Daniel

-- 
http://www.domob.eu/
OpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737
Namecoin: id/domob -> https://nameid.org/?name=domob
--
Done:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz
To go: Mon-Pri

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/23096215/attachment.sig>

From taariq.lewis at gmail.com  Thu Oct  8 06:10:37 2015
From: taariq.lewis at gmail.com (Taariq Lewis)
Date: Wed, 7 Oct 2015 23:10:37 -0700
Subject: [bitcoin-dev] Proposed new policy for transactions that depend
 on other unconfirmed transactions
Message-ID: <CAAckazzg=Nh8jDTn9MF-V6aLhQh9BL0kfUMyAOd+1qx6Wfmo-g@mail.gmail.com>

Our comment was posted to Github:
https://github.com/bitcoin/bitcoin/pull/6771#issuecomment-146429708

We, at Serica and DigitalTangible actively use unspent tx chains to allow
our customers to speed their bitcoin user-experience without the need for
them to wait on blockchain confirmations. These transactions are usually
sequential and must happen between our customers and our marketplace of
merchants and other customers. For example, a user agrees to place an order
to purchase bitcoin and then make a bitcoin payment, for a product or
services, with that bitcoin, should their desired price be met while they
are unable to actively monitor their transaction.

We currently do not have a need to chain more than 5 unspents given our
current use cases for onboarding new customers into the bitcoin ecosystem.
Given this PR, we agree with its principle, since the proposal aims to
limit to MAX_ANCESTORS = 25 and MAX_DESCENDANTS = 25, which we think is
reasonable. We have not **yet** seen a use case for more than 25 chains of
unconfirmed in our ecosystem.

However, we would like to publish our viewpoint that we wish to avoid a
slippery slope of restrictions in unspents to fall from from 25 to 2 or
even 0. The limits imposed should not prevent, at minimum, 5 step chains of
transactions that are needed to give a customer temporary control over
funds that they would otherwise not have access to unless they waited for a
confirmation before conducting another transaction. In these situations,
where an instant purchase must be made with customer control, that btc must
be sent to a customers address and then be quickly relayed to a merchant or
another party in a transaction to create a seamless experience. All of this
must happen within 0 confs because our customers will not wait for a whole
confirm and we do not wish to lose the opportunity to make Bitcoin more
available and useful to a broader audience with higher performance demands.

Zero confirmations, when done properly, help increase adoption of Bitcoin
and make it more competitive against other forms of payments. However, we
do think it's good to prevent abuse of the system with reasonable
constraints for the current ecosystem of applications and wallets.

Cheers,
Taariq Lewis & Serica/DigitalTangible team.



>
> ------------------------------
>
> Message: 2
> Date: Mon, 21 Sep 2015 11:02:20 -0400
> From: Alex Morcos <morcos at gmail.com>
> To: Danny Thorpe <danny.thorpe at gmail.com>
> Cc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>
> Subject: Re: [bitcoin-dev] Proposed new policy for transactions that
>         depend on other unconfirmed transactions
> Message-ID:
>         <CAPWm=
> eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> Thanks for everyone's review.  These policy changes have been merged in to
> master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which just
> implements these limits and no mempool limiting yet.  The default ancestor
> package size limit is 900kb not 1MB.
>
> Yes I think these limits are generous, but they were designed to be as
> generous as was computationally feasible so they were unobjectionable
> (since the existing policy was no limits).  This does not preclude future
> changes to policy that would reduce these limits.
>
>
>


-- 
*Taariq Lewis*
p: +1-646-479-6098
e: taariq.lewis at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/36a42736/attachment-0001.html>

From pete at petertodd.org  Thu Oct  8 17:41:20 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 8 Oct 2015 19:41:20 +0200
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <87lhbgn4fa.fsf@rustcorp.com.au>
References: <20151003143056.GA27942@muck>
 <87lhbgn4fa.fsf@rustcorp.com.au>
Message-ID: <20151008174120.GA9291@muck>

On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:
> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> writes:
> > However I don't think we've done a good job showing why we need to
> > implement this feature via nSequence.
> 
> It could be implemented in other ways, but nSequence is the neatest and
> most straightforward I've seen.
> 
> - I'm not aware of any other (even vague) proposal for its use?  Enlighten?

There's three that immediately come to mind:

Gregory Maxwell has proposed it as a way of discouraging miners from
reorging chains, by including some of the low-order bits of a previous
block header in nSequence.

A few people have proposed implementing proof-of-stake blocksize voting
with nSequence.

> - BIP68 reserves much of it for future use already.

Well, a few low-order bits, if you want to use RCLTV functionality; pure
RCLTV would save a lot more bits.

> If we apply infinite caution we could never use nSequence, as there
> might be a better use tommorrow.

Indeed! But lets make sure we have a good argument in the BIP.

-- 
'peter'[:-1]@petertodd.org
00000000000000000de60f807a5fd32057510e7715038ecbc888052861b6a5c1
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/f6069c67/attachment.sig>

From pete at petertodd.org  Thu Oct  8 17:43:29 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 8 Oct 2015 19:43:29 +0200
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <20151003143056.GA27942@muck>
References: <20151003143056.GA27942@muck>
Message-ID: <20151008174329.GB9291@muck>

On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via bitcoin-dev wrote:
> BIP68 and BIP112 collectively define the CHECKSEQUENCEVERIFY semantics,
<snip>

Another issue that came to mind re: CSV review is that there isn't
actually any one pull-req with all the code changes together, making it
hard to be sure what the final effect will be once all three BIPs are
merged.

While evaluating stuff separately is often good, I think this is a case
where the overall design needs to be evaluated as a single unit to fully
understand the behavior.

-- 
'peter'[:-1]@petertodd.org
00000000000000000de60f807a5fd32057510e7715038ecbc888052861b6a5c1
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/9641daab/attachment.sig>

From boris.nk1983 at yahoo.com  Thu Oct  8 19:55:09 2015
From: boris.nk1983 at yahoo.com (Boris Neklabaro)
Date: Thu, 8 Oct 2015 19:55:09 +0000 (UTC)
Subject: [bitcoin-dev] merged multisig inputs
References: <412407605.831804.1444334109584.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <412407605.831804.1444334109584.JavaMail.yahoo@mail.yahoo.com>

Hi,
Is it possible to merge 2 utxos spending from multiple P2SH inputs? Or combined inputs P2SH and P2PKH in a single transaction?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/2d964358/attachment.html>

From gmaxwell at gmail.com  Thu Oct  8 20:03:49 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 8 Oct 2015 20:03:49 +0000
Subject: [bitcoin-dev] merged multisig inputs
In-Reply-To: <412407605.831804.1444334109584.JavaMail.yahoo@mail.yahoo.com>
References: <412407605.831804.1444334109584.JavaMail.yahoo@mail.yahoo.com>
	<412407605.831804.1444334109584.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <CAAS2fgRw+12Y=AgQD0zR_gC3U6RCuOV8=2dz2VHL+=fm2CXCDg@mail.gmail.com>

On Thu, Oct 8, 2015 at 7:55 PM, Boris Neklabaro via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Hi,
>
> Is it possible to merge 2 utxos spending from multiple P2SH inputs? Or
> combined inputs P2SH and P2PKH in a single transaction?

Yes, the signatures for separate inputs are entirely separate.

From boris.nk1983 at yahoo.com  Thu Oct  8 22:53:58 2015
From: boris.nk1983 at yahoo.com (Boris Neklabaro)
Date: Thu, 8 Oct 2015 22:53:58 +0000 (UTC)
Subject: [bitcoin-dev] Mike Hearn, who coined the term SPV is Satoshi
References: <427914048.865318.1444344838445.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <427914048.865318.1444344838445.JavaMail.yahoo@mail.yahoo.com>

Interesting:
http://kke5edzhy54hiee5.onion/(requires Tor Browser)
or without Tor Browser:http://kke5edzhy54hiee5.onion.to/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/9c8c1967/attachment.html>

From telemaco at neomailbox.net  Fri Oct  9 03:18:31 2015
From: telemaco at neomailbox.net (telemaco)
Date: Fri, 9 Oct 2015 05:18:31 +0200
Subject: [bitcoin-dev] Why not checkpointing the transactions?
Message-ID: <56173207.3040601@neomailbox.net>

Hello,

I have been working on database engineering for many years and there are 
some things i don't understand very well about how bitcoin architecture 
works. I have not written here because i would not like to disturb 
development with yet another of those far to implement ideas that does 
not contribute to actual code as sometimes is said here.

On any case today I have been listening the last beyond bitcoin video 
about the new bitshares 2.0 and how they are changing the transaction 
structure to do it more similar to what relational database management 
systems have been doing for 30 years.

Keep a checkpointed state and just carry the new transactions. On rdbms, 
anyone if they want to perform historical research or something, they 
can just get the transaction log backups and reply every single 
transaction since the beginning of history.
Why is bitcoin network replying every single transaction since the 
beginning and not start from a closer state. Why is that information 
even stored on every core node? Couldn't we just have a checkpointed 
state and the new transactions and leave to "historical" nodes or 
collectors the backup of all the transactions since the beginning of 
history?

Replication rdbms have been working with this model for some time, just 
being able to replicate at table, column, index, row or even db level 
between many datacenters/continents and already serving the financial 
world, banks and exchanges. Their tps is very fast because they only 
transfer the smallest number of transactions that nodes decide to be 
suscribed to, maybe japan exchange just needs transactional info from 
japanese stocks on nasdaq or something similar. But even if they 
suscribe to everything, the transactional info is to some extent just a 
very small amount of information.

Couldn't we have just a very small transactional system with the fewest 
number of working transactions and advancing checkpointed states? We 
should be able to have nodes of the size of watches with that structure, 
instead of holding everything for ever for all eternity and hope on 
moore's law to keep us allowing infinite growth. What if 5 internet 
submarine cables get cut on a earth movement or war or there is a 
shortage of materials for chip manufacturing and the network moore's law 
cannot keep up. Shouldn't performance optimization and capacity planning 
go in both ways?. Having a really small working "transaction log" allows 
companies to rely some transactional info to little pdas on warehouses, 
or just relay a small amount of information to a satellite, not every 
single transaction of the company forever.

After all if we could have a very small transactional workload and leave 
behind the overload of all the previous transactions, we could have 
bitcoin nodes on watches and have an incredibly decentralized system 
that nobody can disrupt as the decentralization would be massive. We 
could even create a very small odbc, jdbc connector on the bitcoin 
client and just let any traditional rdbms system handle the heavy load 
and just let bitcoin core rely everyone and his mother to a level that 
noone could ever disrupt a very small amount of transactional data.

Just some thoughts. Please don't be very harsh, i am still researching 
bitcoin code and my intentions are the best as i cannot be more 
passionate about the project.

Thanks,



From elombrozo at gmail.com  Fri Oct  9 03:58:12 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 09 Oct 2015 03:58:12 +0000
Subject: [bitcoin-dev] Making soft forks pluggable
Message-ID: <em9172c2aa-5388-48dc-9d68-b942bdd936e3@platinum>

Before I scare anyone away, please here me out:

It occurs to me it wouldn't be all that difficult to support the ability 
to define soft forks entirely as standalone units that can be trivially 
merged with Bitcoin Core. It would require a few changes in some places 
in the consensus code, but at least for a very wide class of potential 
soft forks, all cases could be covered via only a small number of hooks, 
primarily in main.cpp, consensus/*, script/interpreter.cpp, and 
primitives/*. (Other hooks could be added in non-consensus code such as 
rpcblockchain.cpp or the wallet). It would be possible to build unit 
tests for each soft fork independently and compare enforcement of 
different combinations (as well as simulate these deployment 
combinations on regtest).

Before I get too heavily invested in this idea, though, I'd like to see 
if there are any reasonable objections to such a thing. Of course, 
refactors are generally disruptive in the short-term...but I think what 
I'm talking about can be done without having to move very large chunks 
of code around, with very specifically defined hooks that can be easily 
documented to make backports fairly simple.

My biggest concern (other than being able to convince everyone that we 
won't break anything, which of course I'd have to do a good job of in 
terms of rigor) is whether supporting this feature is a good idea in the 
first place. There's something to be said for it not being *too* easy to 
write and deploy a soft fork...however, unless we open this up a little 
more and make such deployments more routine (and safe) it will take a 
very long time to deploy stuff. A significant motivation behind 
VersionBits (BIP0009) is to make such deployments faster, so if we're 
already doing that perhaps we might as well take this initiative even 
further.

If others think this is a good idea I'll start writing up a detailed 
plan. (NOTE: The current versionbits deployment plan does not require 
this. I am working on an implementation of versionbits that could 
potentially support this plan but doesn't have to.)

If I'm very wrong, I am all ears to *sincere* objections.


- Eric
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/474dbc5d/attachment-0001.html>

From jl2012 at xbt.hk  Fri Oct  9 04:16:50 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Fri, 09 Oct 2015 00:16:50 -0400
Subject: [bitcoin-dev]
 =?utf-8?q?Why_not_checkpointing_the_transactions=3F?=
In-Reply-To: <56173207.3040601@neomailbox.net>
References: <56173207.3040601@neomailbox.net>
Message-ID: <39700e7d3fea68181f88644791e289d6@xbt.hk>

You are mixing multiple issues.

1. It is not possible to "checkpoint" in a totally decentralized and 
trustless way. You need the whole blockchain to confirm its validity, as 
a single invalid tx in the history will invalidate ALL blocks after it, 
even if the invalid tx is irrelevant to you.

2. Downloading the whole blockchain does not mean you need to store the 
whole blockchain. Spent transactions outputs can be safely removed from 
your harddrive. Please read section 7 of Satoshi's paper: 
https://bitcoin.org/bitcoin.pdf . This function is already implemented 
in Bitcoin Core 0.11

3. If you don't even want to download the whole blockchain, you can 
download and validate the portions that your are interested. Satoshi 
called it Simplified Payment Verification (SPV), the section 8 of his 
paper. It is secure as long as >50% of miners are honest. Android 
Bitcoin Wallet is an SPV wallet based on bitcoinj.

Finally, I think this kind of question would be better asked on the 
bitcointalk forum. The mailing list should be more specific to 
development, not merely some vague idea.



telemaco via bitcoin-dev ? 2015-10-08 23:18 ??:
> Hello,
> 
> I have been working on database engineering for many years and there
> are some things i don't understand very well about how bitcoin
> architecture works. I have not written here because i would not like
> to disturb development with yet another of those far to implement
> ideas that does not contribute to actual code as sometimes is said
> here.
> 
> On any case today I have been listening the last beyond bitcoin video
> about the new bitshares 2.0 and how they are changing the transaction
> structure to do it more similar to what relational database management
> systems have been doing for 30 years.
> 
> Keep a checkpointed state and just carry the new transactions. On
> rdbms, anyone if they want to perform historical research or
> something, they can just get the transaction log backups and reply
> every single transaction since the beginning of history.
> Why is bitcoin network replying every single transaction since the
> beginning and not start from a closer state. Why is that information
> even stored on every core node? Couldn't we just have a checkpointed
> state and the new transactions and leave to "historical" nodes or
> collectors the backup of all the transactions since the beginning of
> history?
> 
> Replication rdbms have been working with this model for some time,
> just being able to replicate at table, column, index, row or even db
> level between many datacenters/continents and already serving the
> financial world, banks and exchanges. Their tps is very fast because
> they only transfer the smallest number of transactions that nodes
> decide to be suscribed to, maybe japan exchange just needs
> transactional info from japanese stocks on nasdaq or something
> similar. But even if they suscribe to everything, the transactional
> info is to some extent just a very small amount of information.
> 
> Couldn't we have just a very small transactional system with the
> fewest number of working transactions and advancing checkpointed
> states? We should be able to have nodes of the size of watches with
> that structure, instead of holding everything for ever for all
> eternity and hope on moore's law to keep us allowing infinite growth.
> What if 5 internet submarine cables get cut on a earth movement or war
> or there is a shortage of materials for chip manufacturing and the
> network moore's law cannot keep up. Shouldn't performance optimization
> and capacity planning go in both ways?. Having a really small working
> "transaction log" allows companies to rely some transactional info to
> little pdas on warehouses, or just relay a small amount of information
> to a satellite, not every single transaction of the company forever.
> 
> After all if we could have a very small transactional workload and
> leave behind the overload of all the previous transactions, we could
> have bitcoin nodes on watches and have an incredibly decentralized
> system that nobody can disrupt as the decentralization would be
> massive. We could even create a very small odbc, jdbc connector on the
> bitcoin client and just let any traditional rdbms system handle the
> heavy load and just let bitcoin core rely everyone and his mother to a
> level that noone could ever disrupt a very small amount of
> transactional data.
> 
> Just some thoughts. Please don't be very harsh, i am still researching
> bitcoin code and my intentions are the best as i cannot be more
> passionate about the project.
> 
> Thanks,
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From karra.etc at gmail.com  Fri Oct  9 04:22:32 2015
From: karra.etc at gmail.com (Sriram Karra)
Date: Fri, 9 Oct 2015 09:52:32 +0530
Subject: [bitcoin-dev] Mike Hearn, who coined the term SPV is Satoshi
In-Reply-To: <427914048.865318.1444344838445.JavaMail.yahoo@mail.yahoo.com>
References: <427914048.865318.1444344838445.JavaMail.yahoo@mail.yahoo.com>
	<427914048.865318.1444344838445.JavaMail.yahoo@mail.yahoo.com>
Message-ID: <CAFkt3UPGnngAMmksxKDmkRSpP+yfoSPH9NcnmcVUv7irke5Rqw@mail.gmail.com>

Off topic.
On Oct 9, 2015 4:27 AM, "Boris Neklabaro via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Interesting:
>
> http://kke5edzhy54hiee5.onion/
> (requires Tor Browser)
>
> or without Tor Browser:
> http://kke5edzhy54hiee5.onion.to/
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/5cc5a07c/attachment.html>

From rusty at rustcorp.com.au  Fri Oct  9 01:38:06 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 09 Oct 2015 12:08:06 +1030
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
	motivate the change
In-Reply-To: <20151008174120.GA9291@muck>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck>
Message-ID: <87pp0okeip.fsf@rustcorp.com.au>

Peter Todd <pete at petertodd.org> writes:
> On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:
>> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>> writes:
>> > However I don't think we've done a good job showing why we need to
>> > implement this feature via nSequence.
>> 
>> It could be implemented in other ways, but nSequence is the neatest and
>> most straightforward I've seen.
>> 
>> - I'm not aware of any other (even vague) proposal for its use?  Enlighten?
>
> There's three that immediately come to mind:
>
> Gregory Maxwell has proposed it as a way of discouraging miners from
> reorging chains, by including some of the low-order bits of a previous
> block header in nSequence.
>
> A few people have proposed implementing proof-of-stake blocksize voting
> with nSequence.

Excellent, thanks!  It's good to have such ideas as a compass.  PoS
voting seems like it won't be a problem in 5 bits.

The "prevbits" idea would want more bits; naively 64 would be good, but
I think there are some tricks we can use to make 32 work OK.  We would
have to then split between nLocktime (if available) and multiple
nSequence fields, and it would weaken it for some txs.

There is one easy solution: change the BIP wording from:

-For transactions with an nVersion of 2 or greater,
+For transactions with an nVersion of 2, 

And on every tx bump, we decide whether to keep this scheme (mempool
would enforce it always).

Cheers,
Rusty.

From elombrozo at gmail.com  Fri Oct  9 07:39:59 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 09 Oct 2015 07:39:59 +0000
Subject: [bitcoin-dev] Fw: Making soft forks pluggable
Message-ID: <em78f4e69c-a3ca-4fdd-9f5f-23aeb7e25358@platinum>

I wanted to clarify that this goal is for AFTER the next release in case 
that didn't come across. The point is just to ascertain interest and 
start thinking ahead. VersionBits can be fully ready to go well before 
then and is well underway.

------ Forwarded Message ------
From: "Eric Lombrozo" <elombrozo at gmail.com>
To: "bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org>
Sent: 10/8/2015 8:58:12 PM
Subject: Making soft forks pluggable

Before I scare anyone away, please here me out:

It occurs to me it wouldn't be all that difficult to support the ability 
to define soft forks entirely as standalone units that can be trivially 
merged with Bitcoin Core. It would require a few changes in some places 
in the consensus code, but at least for a very wide class of potential 
soft forks, all cases could be covered via only a small number of hooks, 
primarily in main.cpp, consensus/*, script/interpreter.cpp, and 
primitives/*. (Other hooks could be added in non-consensus code such as 
rpcblockchain.cpp or the wallet). It would be possible to build unit 
tests for each soft fork independently and compare enforcement of 
different combinations (as well as simulate these deployment 
combinations on regtest).

Before I get too heavily invested in this idea, though, I'd like to see 
if there are any reasonable objections to such a thing. Of course, 
refactors are generally disruptive in the short-term...but I think what 
I'm talking about can be done without having to move very large chunks 
of code around, with very specifically defined hooks that can be easily 
documented to make backports fairly simple.

My biggest concern (other than being able to convince everyone that we 
won't break anything, which of course I'd have to do a good job of in 
terms of rigor) is whether supporting this feature is a good idea in the 
first place. There's something to be said for it not being *too* easy to 
write and deploy a soft fork...however, unless we open this up a little 
more and make such deployments more routine (and safe) it will take a 
very long time to deploy stuff. A significant motivation behind 
VersionBits (BIP0009) is to make such deployments faster, so if we're 
already doing that perhaps we might as well take this initiative even 
further.

If others think this is a good idea I'll start writing up a detailed 
plan. (NOTE: The current versionbits deployment plan does not require 
this. I am working on an implementation of versionbits that could 
potentially support this plan but doesn't have to.)

If I'm very wrong, I am all ears to *sincere* objections.


- Eric
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/62d517ca/attachment.html>

From byron at mirror.co  Fri Oct  9 17:11:58 2015
From: byron at mirror.co (Byron Gibson)
Date: Fri, 9 Oct 2015 10:11:58 -0700
Subject: [bitcoin-dev] Bitcoin network simulation testing?
In-Reply-To: <CAF7tpEyPqMVXBmbNcSKKywo=sstWxca+4h6_-Tp3-5t_vofbWA@mail.gmail.com>
References: <CAOVG1oNimYpzSnB7NUuugagufbD1JnZmAWsuXhMjq45dEF=w-g@mail.gmail.com>
	<E8AC44C1-310F-44AE-AB5E-63064A3DE1BE@gmail.com>
	<CAF7tpEyPqMVXBmbNcSKKywo=sstWxca+4h6_-Tp3-5t_vofbWA@mail.gmail.com>
Message-ID: <CAOVG1oOAUKhzYKfYEd20nXSqy0wcn01cO86oxBRutJJpUj9TjQ@mail.gmail.com>

Thanks Nina and Andrew, I may have the capability to run a simulator large
scale on many nodes on AWS/GCE, but am looking to optimize the ROI by
selecting categories of experiments that benefit from a more controlled
environment, rather than be invalidated by its divergence/s from livenet.
But wondering if anyone else has already been doing this, would be nice to
collaborate.

Byron Gibson
CoS | http://mirrorx.com/
https://onename.io/bgibson
https://keybase.io/byrongibson


On Oct 6, 2015 14:00, "Andrew Miller" <amiller at cs.umd.edu> wrote:

> Shadow uses virtual time, entirely decoupled from real time. So while it
> may slow down your machine, this would not affect the stats collected
>
> (although it does make shadow somewhat unpleasant to run, unless you have
> a fast machine,  compared to abstract simulators that avoid running the
> actual Bitcoin code).
> Hi Byron,
>
> I've been using shadow a bit-- I think these simulators are important for
> testing, but Shadow, at least, certainly seems to have limitations, in some
> crucial respects.  Running shadow w Tor (which is only logical, because
> many BCT transactions transpire over Tor) is not as 'light' as presented
> and slows my own box down quite a bit, so the stats can't possibly be
> accurate... I don't know if this answers any questions or if you've had
> this experience at all -- perhaps it is negligible on a more powerful
> machine than my own-- or perhaps there is an adjustment still unaccounted?
>
> Regards,
> Nina K
>
> Sent from my iPhone
>
> On Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Hi all, is anyone using simulators like Shadow (https://shadow.github.io),
> BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed
> changes to Bitcoin?  I have a few questions about their capabilities and
> limitations.
>
> Byron Gibson
> http://mirror.co/
> https://keybase.io/byrongibson
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/91c275bc/attachment-0001.html>

From pindar.wong at gmail.com  Fri Oct  9 22:06:47 2015
From: pindar.wong at gmail.com (Pindar Wong)
Date: Sat, 10 Oct 2015 06:06:47 +0800
Subject: [bitcoin-dev] Bitcoin network simulation testing?
In-Reply-To: <CAOVG1oOAUKhzYKfYEd20nXSqy0wcn01cO86oxBRutJJpUj9TjQ@mail.gmail.com>
References: <CAOVG1oNimYpzSnB7NUuugagufbD1JnZmAWsuXhMjq45dEF=w-g@mail.gmail.com>
	<E8AC44C1-310F-44AE-AB5E-63064A3DE1BE@gmail.com>
	<CAF7tpEyPqMVXBmbNcSKKywo=sstWxca+4h6_-Tp3-5t_vofbWA@mail.gmail.com>
	<CAOVG1oOAUKhzYKfYEd20nXSqy0wcn01cO86oxBRutJJpUj9TjQ@mail.gmail.com>
Message-ID: <CAM7BtUohgYcxQ9mixNAP3ja4Et1MOQsOfoXSWfi-pmXNPhridw@mail.gmail.com>

Byron: I'd be interested to collaborate on this in some fashion.

p.


On Sat, Oct 10, 2015 at 1:11 AM, Byron Gibson via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Thanks Nina and Andrew, I may have the capability to run a simulator large
> scale on many nodes on AWS/GCE, but am looking to optimize the ROI by
> selecting categories of experiments that benefit from a more controlled
> environment, rather than be invalidated by its divergence/s from livenet.
> But wondering if anyone else has already been doing this, would be nice to
> collaborate.
>
> Byron Gibson
> CoS | http://mirrorx.com/
> https://onename.io/bgibson
> https://keybase.io/byrongibson
>
>
> On Oct 6, 2015 14:00, "Andrew Miller" <amiller at cs.umd.edu> wrote:
>
>> Shadow uses virtual time, entirely decoupled from real time. So while it
>> may slow down your machine, this would not affect the stats collected
>>
>> (although it does make shadow somewhat unpleasant to run, unless you have
>> a fast machine,  compared to abstract simulators that avoid running the
>> actual Bitcoin code).
>> Hi Byron,
>>
>> I've been using shadow a bit-- I think these simulators are important for
>> testing, but Shadow, at least, certainly seems to have limitations, in some
>> crucial respects.  Running shadow w Tor (which is only logical, because
>> many BCT transactions transpire over Tor) is not as 'light' as presented
>> and slows my own box down quite a bit, so the stats can't possibly be
>> accurate... I don't know if this answers any questions or if you've had
>> this experience at all -- perhaps it is negligible on a more powerful
>> machine than my own-- or perhaps there is an adjustment still unaccounted?
>>
>> Regards,
>> Nina K
>>
>> Sent from my iPhone
>>
>> On Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Hi all, is anyone using simulators like Shadow (https://shadow.github.io),
>> BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed
>> changes to Bitcoin?  I have a few questions about their capabilities and
>> limitations.
>>
>> Byron Gibson
>> http://mirror.co/
>> https://keybase.io/byrongibson
>>
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151010/df5471b0/attachment.html>

From dstadulis at gmail.com  Fri Oct  9 22:45:37 2015
From: dstadulis at gmail.com (Daniel Stadulis)
Date: Fri, 9 Oct 2015 15:45:37 -0700
Subject: [bitcoin-dev] #bitcoin-dev Weekly Development Meeting Minutes
	2015-10-08
Message-ID: <CAHpxFbGyrZsvVKU4zqH4btF2EYvQ+EL4xPubXSCsk2dLUcK0aw@mail.gmail.com>

More readable Google Doc version with html links here:
https://docs.google.com/document/d/1hCDuOBNpqrZ0NLzvgrs2kDIF3g97sOv-FyneHjQellk/edit?usp=sharing

Meeting Title:
#bitcoin-dev Weekly Development Meeting

Meeting Date:
2015-10-08

Meeting Time:
19:00-20:00 UTC

Participants in Attendance:
dstadulis
wumpus
btcdrak
morcos
petertodd
bsm117532
BlueMatt
gmaxwell
GreenIsMyPepper
phantomcircuit
warren
sipa

IRC Chat Logs:
http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/08#l1444329019.0

???------------------------------
Topics to be discussed:

1. Mempool limiting
2. Partial transaction malleability fix: Low-S change (releases 0.10.3, 0.11.1
backport)
3. CHECKLOCKTIMEVERIFY (CLTV) backport reviews
4. CHECKSEQUENCEVERIFY (CSV) reviews
5. Creation of [bitcoin-discuss] mailing list planning

???------------------------------
2015-10-08 Meeting Conclusions:

Ecosystem Warnings & Alerts:
There is a Bitcoin ecosystem threat with the potential to cause millions of
dollars in losses that needs higher visibility. It's not a Bitcoin Core /
Bitcoin network issue but most Javascript-based Bitcoin software is
affected. The issue, documented here
https://github.com/feross/buffer/pull/81, is about common, critical,
Javascript code that is broken and may cause the generation of incorrect
pubkeys (among other issues). If Javascript is part of your implementation,
you should read the referenced pull request.

#
Action items
Responsible Parties
ETA/Due Date

1
Review/test code for Pull Request #6722 "Limit mempool by throwing away the
cheapest txn and setting min relay fee to it".
All
Unspecified

2
Provide ACK?s/support for low limits on PR #6771 "Policy: Lower default
limits for tx chains".
All
Unspecified

4
Urgent code review and ACKs of CLTV backports PR:
#6706 ?CLTV IsSuperMajority() soft-fork, rebased for v0.10.2?
#6707 ?CLTV IsSuperMajority() soft-fork, rebased for v0.11.0?
All
Unspecified

5
Contact miners about PR #6769 "Test LowS in standardness, removes nuisance
malleability vector" and turning on the long-existing anti-malleability
standardness rules in Bitcoin Core
Bluematt & Gmaxwell
Unspecified

6
Clarification from maaku regarding nSequence for BIP68
Continue review and ACKs of PR
#6312 ?BIP-68: Mempool-only sequence number constraint verification?
#6564 ?BIP-112: Mempool-only CHECKSEQUENCEVERIFY?
#6566 ?BIP-113: Mempool-only median time-past as endpoint for lock-time
calculations?
All
Unspecified

7
Mailing Lists: [bitcoin-discuss] creation, moderators assignment of discuss
and dev list, simple website for mailing list policy.
Warren
Discussion meeting scheduled for: 2015-10-12 19:00-20:00 UTC

Meetingbot Minutes
Minutes(HTML)
http://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.html
Minutes(text)
http://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.txt
IRC Log:
http://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.log.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/6a9cdac3/attachment.html>

From aj at erisian.com.au  Sat Oct 10 07:23:26 2015
From: aj at erisian.com.au (Anthony Towns)
Date: Sat, 10 Oct 2015 17:23:26 +1000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20151007150014.GA21849@navy>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<20151007150014.GA21849@navy>
Message-ID: <20151010072326.GA24099@navy>

On Thu, Oct 08, 2015 at 01:00:14AM +1000, Anthony Towns via bitcoin-dev wrote:
> *But* a soft fork that only forbids transactions that would previously
> not have been mined anyway should be the best of both worlds, [...]

>   * more restrictive than consensus, but less restrictive than policy
>     (safe soft fork)

> Hmm, in particular, following this line of thinking it's not clear to
> me that BIP68 is actually less restrictive than current policy?

As was discussed on the weekly meeting [0], turns out it *is* less
restrictive than current policy. IsStandardTx currently returns a failure
if the tx version is greater than 1, and per BIP68, nSequence will only
be inforced with tx version of 2 or greater.

So afaics, BIP 65 (OP_CLTV), BIP 68 (nSequence) and BIP 112 (OP_CSV)
are all "safe soft forks", and if activated won't cause SPV nodes to
see a significant uptick in reorgs, double-spends etc. (They'll still
be vulnerable to people deliberately spending hashpower to mine invalid
blocks, but that's a problem at any point, independent of whether a
soft-fork is underway)

[0] http://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.log.html#l-312

Cheers,
aj


From g1liusbitcoin at gmail.com  Sat Oct 10 15:22:15 2015
From: g1liusbitcoin at gmail.com (G1lius Caesar)
Date: Sat, 10 Oct 2015 17:22:15 +0200
Subject: [bitcoin-dev] Bitcoin dev meeting in layman's terms (2015-10-8)
Message-ID: <CAHK+0KQvwZhrCO8gQyXP0JW061dLQC2tLBCjcCXRjCrPzAdEiw@mail.gmail.com>

Once again my attempt to summarize and explain the weekly bitcoin developer
meeting in layman's terms.
Link to last weeks layman's summarization:
https://www.mail-archive.com/bitcoin-dev at lists.linuxfoundation.org/msg02445.html



*Disclaimer*

Please bare in mind I'm not a developer and I'd have problems coding "hello
world!", so some things might be incorrect or plain wrong.
Like any other write-up it likely contains personal biases, although I try
to stay as neutral as I can.
There are no decisions being made in these meetings, so if I say "everyone
agrees" this means everyone present in the meeting, that's not consensus,
but since a fair amount of devs are present it's a good representation.
The dev IRC and mailinglist are for bitcoin development purposes. If you
have not contributed actual code to a bitcoin-implementation, this is
probably not the place you want to reach out to. There are many places to
discuss things that the developers read, including this sub-reddit.


link to this week logs (
http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/08#l1444330778.0 )
link to meeting minutes (
https://docs.google.com/document/d/1hCDuOBNpqrZ0NLzvgrs2kDIF3g97sOv-FyneHjQellk/edit
)


Main topics discussed this week where:

Mempool limiting: chain limits
Low-S change
CLTV & CSV review
Creation of bitcoin discuss mailing list


**off-topic but important notice**

This issue ( https://github.com/feross/buffer/pull/81 ) has made most JS
bitcoin software vulnerable to generating incorrect public keys.
"This is an ecosystem threat with the potential to cause millions of
dollars in losses that needs higher visibility; though it's not a bitcoin
core / bitcoin network issue.
Common, critical, JS code is broken that may cause the generation of
incorrect pubkeys (among other issues). Anyone who cares for a JS
implementation should read that PR."


**Mempool limiting: chain limits**

- background

(c/p from last week)
Chain in this context means connected transactions. When you send a
transaction that depends on another transaction that has yet to be
confirmed we talk about a chain of transactions.
Miners ideally take the whole chain into account instead of just every
single transaction (although that's not widely implemented afaik). So while
a single transaction might not have a sufficient fee, a depending
transaction could have a high enough fee to make it worthwhile to mine both.
This is commonly known as child-pays-for-parent.
Since you can make these chains very big it's possible to clog up the
mempool this way.
The first unconfirmed transaction is called the ancestor and the
transactions depending on it the descendants. The total amount of
transactions is reffered to as "packages".

- since last week

As said in "Chain limits" last week Morcos did write a proposal about
lowering the default limits for transaction-chains.
2 use cases came up which are currently in use or happened before:
As example: someone buys bitcoin from a website and can spend those bitcoin
in the marketplace of the same website without waiting for confirmation in
order to improve the bitcoin user-experience. This leaves a sequential
transaction chain. They don't need to chain more than 5 transactions deep
for this, and it falls within the proposed limits.
What's not within the proposed limits is the chain of +/- 100 transactions
a company had during the spam-attacks. These where simply increased
activities by end-users while not enough UTXO's where available (3 to be
precise)(UTXO: unspent transaction output, an output that can be used as
input for a new transaction).
Notably this is with the best practices of using confirmed transactions
first.
Ways this can be solved from the company's end is to have more UTXO's
available before hand, bundling transactions (which requires delaying
customer's request) or using replace-by-fee to add payees (which saves
blockchain space, is cheaper in fees and gets transactions through quicker,
but is not widely deployed by miners atm).
Bare in mind these proposals are for default values for the memorypool, not
in any way hard limits.


- meeting comments

Sense of urgency. Quoting sipa: "my mempool is 2.5G... we better get some
solution!"
Current attack analysis assumes child-pays-for-parent mining, it should
probably be done again without.
Higher limits on number of transactions increase attack-vectors.
Proposed number of transactions gets some push-back, total size limit not.
Mixing default values (for example having a 50% of a 10/10 limit and 50% of
a 100/100 limit) wastes bandwidth while there are too many factors that
limit utility of long chains as well.
25 transaction limit ought to be enough for everyone (for now).

- meeting conclusion

Review & test "Limit mempool by throwing away the cheapest txn and setting
min relay fee to it" ( https://github.com/bitcoin/bitcoin/pull/6722 )
Provide support for "Lower default limits for tx chains" (
https://github.com/bitcoin/bitcoin/pull/6771 ) aka convince people 25
should be enough.



**Low-S change**

- background

This is in regards to the recent malleability attack. Which is caused by a
value 'S' in the ECDSA signature which can be 2 values, a high and low
value and still be valid. Resulting in different transaction id's. more
info:
http://blog.coinkite.com/post/130318407326/ongoing-bitcoin-malleability-attack-low-s-high
A solution for this is to require nodes to have the "low-s" encoding for
signatures.
Downside is that it will block most transactions made by sufficiently out
of date software (+/- pre-march 2014)
This does not replace the need for BIP62, it only eliminates the cheap DOS
attack.


- meeting comments

95% of transactions already confirm to this, and more fixes have been
applied since.
BlueMatt has a node which several people are running that auto-malleates to
low-s transactions.
Questions whether we release it ASAP or wait for the next release and get
it to a couple of miners in the meantime (possibly with
auto-lowS-malleating)


- meeting conclusion

Contact miners about "Test LowS in standardness, removes nuisance
malleability vector" ( https://github.com/bitcoin/bitcoin/pull/6769 )
Release scheduled for the end of the month, together with likely
check-lock-time-verify and possibly check-sequence-verfiy.



**CLTV & CSV backport review**

- background

CLTV: checkLockTimeVerify
CSV: checkSequenceVerify
Both new time-related OP-codes.
Been discussed heavily last week.


- meeting comments

CSV doesn't seem ready enough for release later this month.
There's no clarity on how things look when all 3 time related pull-requests
are merged.
There's a number of people still reviewing the pull-requests.
Uncertainty and confusion about whether the semantics are final or not (in
regards to using bits from nSequence). nSequence are 4 bytes intended for
sequencing time-locked transactions, but this never got used.
Now these bytes are being repurposed for a mixture of things. Currently the
plan is: " bits 0..15 are the relative locktime, bit 30 determines units
(0: height, 1: time w/ 512s granularity), and bit 31 toggles BIP 68 (0: on,
1: off). bits 16..29 are masked off and can take any value."

- meeting conclusion

Clarification from maaku regarding nSequence for BIP68. (after the meeting
he explained he was waiting for opinions, but not enough people seemed to
know the issue at hand)
Continue review of pull requests 6312 (
https://github.com/bitcoin/bitcoin/pull/6312 ), 6564 (
https://github.com/bitcoin/bitcoin/pull/6564 ) and 6566 (
https://github.com/bitcoin/bitcoin/pull/6566 )


**Creation of bitcoin discuss mailing list**

- background

The bitcoin-dev mailing list is intented for technical discussions only.
There's things that don't belong there but need to be discussed anyway.
Now this is done in bitcoin-dev, but the volume of this is getting too big.

There's recently also an influx of really inappropriate posts, level
kindergarden (
https://www.mail-archive.com/bitcoin-dev at lists.linuxfoundation.org/msg02539.html
).


- meeting comments

No clarity about who are the moderators.
Next week there'll be a bitcoin-discuss list created.
Decisions are needed as to who'll become the moderators for that and
bitcoin-dev.
Decisions are needed as to what will be the list and moderation policies.


- meeting conclusion

The bitcoin-discuss list will be created as well as a simple website
listing all the lists and corresponding policies.
A meeting is scheduled on monday to discuss the moderation and policies of
said lists.


**Participants**

morcos           Alex Morcos
gmaxwell         Gregory Maxwell
wumpus           Wladimir J. van der Laan
sipa             Pieter Wuille
BlueMatt         Matt Corallo
btcdrak          btcdrak
petertodd        Peter Todd
warren           Warren Togami
phantomcircuit   Patrick Strateman
dstadulis        Daniel Stadulis
GreenIsMyPepper  ?? Jospeh Poon ??
bsm117532        Bob McElrath
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151010/445f83fe/attachment-0001.html>

From dscotese at litmocracy.com  Sat Oct 10 21:41:24 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Sat, 10 Oct 2015 14:41:24 -0700
Subject: [bitcoin-dev] Masked bits and isStandard
Message-ID: <CAGLBAhcW2Av7X92LjXk+SjK+Dj4Hw4VapGSoiKQggE6wi4r0kg@mail.gmail.com>

Thanks again.  The description of bits 16..29 as "can take any value"
suggests to me an improvement for isStandard: if any bits "can take any
value" without affecting the script then they must be off for the script to
pass isStandard.

If I understand it correctly, this requirement will serve as a backup to
future uses of those bits if such uses are deployed as soft forks.

I'm sorry if my suggestion reflects a poor understanding of isStandard, but
I offer it as evidence on whether the mechanism is as well understood as it
should be, since we use soft forks.  If I have misunderstood, feel free to
educate me with a reply.

Thanks!
Notplato



On Oct 10, 2015, at 8:22 AM, G1lius Caesar via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:


bits 16..29 are masked off and can take any value.



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151010/2aa9f86e/attachment.html>

From digitsu at gmail.com  Mon Oct 12 07:02:51 2015
From: digitsu at gmail.com (digitsu at gmail.com)
Date: Mon, 12 Oct 2015 00:02:51 -0700 (PDT)
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20151007150014.GA21849@navy>
References: <20151007150014.GA21849@navy>
Message-ID: <1444633370859.8a298e9c@Nodemailer>

Thanks for that great breakdown Anthony. I think it helps a lot of us get a better handle on the matter without getting too technical.?


A couple of questions on some of the points you made I'd like to put out there:




First I think your unsaid assumption about the fragility of a soft fork showing incorrect confirmations is dependent on the percentage of hash power that didn't upgrade. ?If using your same numbers this was only 5% of the hash power, the attack is effectively not effective (u less the attacker knew an exact merchant that was unfortunately on the minority of the network.?




-- snip --


?- non-upgraded bitcoin nodes: total breakage. there will be a push

? ?alert telling you to upgrade. anyone who doesn't will think they're

? ?tracking "bitcoin" but will actually be tracking a new "bitcoin-old"

? ?altcoin. most non-upgraded miners will presumably realise they're

? ?wasting hashpower and stop doing this pretty quick; and remaining

? ?miners will only create blocks very slowly due to sudden reduced

? ?hashpower, without possibility of difficulty adjustment.?

----




Is this true? I thought that un-upgraded nodes would just dump the new blocks from the upgraded miner majority as invalid. This how would they even know (besides the PSA) that they were on the wrong side??




----snip---

users who

? ?don't uprade will try to do transactions, but won't see them confirm

? ?for hours or days due to lack of hashpower.






----




But only for txns for users who are using the new OP code right? Regular transactions will get relayed by both upgraded and in-upgraded nodes and miners alike.?








?
Regards,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151012/ce9edfb5/attachment.html>

From aj at erisian.com.au  Mon Oct 12 16:33:47 2015
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 13 Oct 2015 02:33:47 +1000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <1444633370859.8a298e9c@Nodemailer>
References: <20151007150014.GA21849@navy> <1444633370859.8a298e9c@Nodemailer>
Message-ID: <20151012163347.GA11122@navy>

On Mon, Oct 12, 2015 at 12:02:51AM -0700, digitsu412 via bitcoin-dev wrote:
> Thanks for that great breakdown Anthony. I think it helps a lot of us
> get a better handle on the matter without getting too technical.

Glad you found it useful; there's a lot of subtleties in how this
stuff works, and I'm certainly still figuring it out.

> A couple of questions on some of the points you made I'd like to put
> out there:
>
> First I think your unsaid assumption about the fragility of a soft
> fork showing incorrect confirmations is dependent on the percentage
> of hash power that didn't upgrade. ?If using your same numbers this
> was only 5% of the hash power, the attack is effectively not effective
> (u less the attacker knew an exact merchant that was unfortunately on
> the minority of the network.?

Absolutely. So I think there are three scenarios where SPV clients get
affected by orphans, where full nodes wouldn't be worried:

 1. Independent of any soft/hard fork, someone just mines a completely
    invalid block containing invalid transactions (eg, spending a
    non-existant transaction) based of the best current valid block,
    and presents it to SPV clients.

    An SPV client will accept this as valid until it's orphaned by the
    rest of the network building two valid blocks.

    This is expensive since you could have mined a valid block and
    got 25+ bitcoin legitimately, and it also doesn't last very long
    (around 20m on average, but less if you're unlucky), and the timing
    is unpredictable. It also won't get relayed by nodes, so you have
    to do a Sybil attack against the SPV client as well. It's also only
    good for places that accept 1-confirmation transactions; so you're
    probably better off finding somewhere that accepts 0-confirmation
    transactions and doing a Finney attack, where you at least get to keep
    the 25+ bitcoin from the subsidy/fees.

    So it's possible in theory, but seems pretty unlikely to be worth
    the hassle in practice.


 2. There's a "damaging soft-fork", with lock-in occurring immediately
    after 95% of blocks claim to support the soft-fork.

    In this case upgraded miners will only build on blocks from other
    upgraded miners, but non-upgraded miners will build on blocks from
    upgraded miners or non-upgraded miners. But with a ratio of 95:5,
    upgraded miners will tend to find a block every 10.5 minutes, while
    non-upgraded miners will only find one every 3h20m. SPV clients will
    accept the latest block from whichever miner most recently found a
    block, upgraded or not.

    If one of the blocks mined by a non-upgraded node includes a
    transaction that was valid under the old rules, but is not under the
    new rules (which is entirely likely in the damaging soft-fork case),
    that transaction will be trivially vulnerable to double-spends. So
    until the remaining 5% of hashpower upgrades, SPV clients will
    easily be able to be spoofed roughly once every 3h20m (when a
    non-upgraded miner finds a block) for about 20m (until two upgraded
    blocks are found, and the non-upgraded block is orphaned).

    The cost of this attack is borne entirely by the non-upgraded
    miners, who are mining blocks that will always be orphaned -- ie,
    they're still spending electricity on maintaining 5% of hashpower,
    but their "blocks" are all orphaned so they're getting a return of
    0 BTC per day, instead of roughly 180 BTC per day. So presumably
    they won't continue wasting power too long, and this will only be a
    problem for a few days at most, but during that time SPV clients are
    quite vulnerable.

    Also, that assumes that the soft-fork activates immediately on
    hitting 95%. The versionbits proposal will add two weeks' delay
    between seeing 95% of nodes supporting the soft-fork, and enforcing
    the rules, which gives the 5% additional time to upgrade, which
    probably means there won't be much of a window left at all.


 3. AIUI, without versionbits soft-forks are done by bumping the
    block nVersion field (ie, from "2" currently to "3"); then enforcing
    the new rules on blocks with a bumped version; and finally orphaning
    blocks with the old version once 95% of the last 1000 blocks use
    the bumped version. (See BIP 34)

    This means that even with a "safe soft-fork", non-upgraded miners
    will have their blocks orphaned by upgraded miners immediately after
    the soft-fork is activated, and SPV clients will see a similar orphan
    rate (up to 1 in 20 blocks, seeing an block that will get orphaned
    for about ~20 minutes every 3h20m).

    However, in the "safe soft-fork" case, all the transactions included
    in the invalid blocks will also be acceptable to upgraded miners,
    and will likely be included in the replacement blocks anyway. So
    this should be an annoyance, rather than an actual problem. (In
    a safe soft-fork, any transaction you attempt to get only mined
    by non-upgraded nodes will be picked up by upgraded nodes anyway;
    and any transaction you attempt to get mined only be new nodes will
    be mined very quickly so non-upgraded nodes won't have a chance to
    mine a block that double-spends)

    Further while I don't think they actually do it currently, SPV
    clients *could* monitor the block version (they download it anyway),
    and simply decline to accept new version "2" blocks once version "3"
    is seen for 95% of the last 1000 blocks. Then they would not see any
    blocks that will get orphaned, in either safe or damaging soft-forks.

    They couldn't do something similar with versionbits in place, since
    the corresponding bit is cleared once the soft-fork activates. However
    this also means that with versionbits in use, upgraded miners have
    no reason to orphan blocks built by non-upgraded miners; so this
    isn't a problem in the first place...

> -- snip --
> ?- non-upgraded bitcoin nodes: total breakage. there will be a push
> ? ?alert telling you to upgrade. anyone who doesn't will think they're
> ? ?tracking "bitcoin" but will actually be tracking a new "bitcoin-old"
> ? ?altcoin.

This might have been confusing. A hard fork creates two separate
blockchains both starting from the genesis block. The old one that
obeys the old rules, call it "bitcoin-old" and the new one obeying the
new rules, call it "bitcoin-new". The first block making use of the new
features will be unacceptablee on "bitcoin-old", and will be the point
of divergence. At that point, with 95% of hashpower on bitcoin-new,
it will see new blocks every 10.5 minutes, while with 5% of hashpower
bitcoin-old will only see new blocks every 3h20m. (With 75% hashpower,
bitcoin-new would see new blocks every 13m20s, while bitcoin-old would
see new blocks every 40m)

I'm assuming that as far as almost everyone is concerned, the blockchain
with the most hashpower (bitcoin-new in this case) would be called
"bitcoin", but I'm sure people would argue over it.

>             most non-upgraded miners will presumably realise they're
> ? ?wasting hashpower and stop doing this pretty quick; and remaining
> ? ?miners will only create blocks very slowly due to sudden reduced
> ? ?hashpower, without possibility of difficulty adjustment.?
> ----
> Is this true? I thought that un-upgraded nodes would just dump the new
> blocks from the upgraded miner majority as invalid. This how would they
> even know (besides the PSA) that they were on the wrong side??

Since a majority of hashpower switched to a different chain, anyone
running non-upgraded nodes after a hard fork was activated would see far
fewer blocks being found (ie, with 5% of hashpower, that would be every 3
hours, rather than every 10 minutes). This would resolve itself when the
difficulty next reset, but that would be after 2016 blocks, which at 3h20m
per block would take about 9 months rather than the standard 2 weeks.
(With 25% of hashpower, bitcoin-old would see new blocks every 40
minutes, and difficulty would be reset after about 8 weeks)

Until the difficulty reset, if they were mining, they'd also see more
blocks being found by them (eg, if they had 2% of hashpower previously,
instead of finding 2% of blocks, they'd now be finding 40% of blocks,
ie 2/5 instead of 2/100).

Because a hard fork doesn't invalidate any transactions, non-upgraded
nodes would still see almost all the transactions intended for bitcoin-new
(excepting those from miners working on the fork or that explicitly use
new features enabled by the fork) so the mempool would grow pretty large,
given the low rate at which blocks are mined. (If the new feature is
something like a bigger blocksize, which then increases the rate of
transactions in bitcoin-new, then that's even worse for bitcoin-old
nodes!)

And, of course, those numbers get worse if the 5% of hashpower mining
bitcoin-old reduces as miners write it off as not-profitable.

(Maybe full bitcoin nodes should emit a warning that you've probably
been hard-forked off the main chain if they see, say, 4 or fewer blocks
in 5 hours -- with normal hashpower, I think that should only happen
once in something like 6000 years, but if you've got less than about
13% of hashpower left on your chain will happen about 50% of the time.
I don't know if that would actually be helpful compared to a pushed GPG
signed announcement of the hard-fork though)

> ----snip---
>    users who
> ? ?don't uprade will try to do transactions, but won't see them confirm
> ? ?for hours or days due to lack of hashpower.
>
> But only for txns for users who are using the new OP code right? Regular
> transactions will get relayed by both upgraded and in-upgraded nodes
> and miners alike.?

Hmm. Depends what you mean by "users". If the user is running an
SPV wallet, they'll be following the most hashpower and will see
bitcoin-new. With 12 random connections (bitcoinj's default), I think
you'd just need ~1350 of 6000 nodes to have upgraded to have a 95%
chance of seeing bitcoin-new somewhere. So I don't see SPV users having
any problems.

But in the quote above I was talking about users who are running bitcoin
core rather than an SPV client. *They* would have the same problems
mentioned above, because non-upgraded bitcoin core would just totally
ignore the bitcoin-new blockchain.

So if they published a transaction, it would get confirmed quickly on
bitcoin-new, sure, but they wouldn't see that confirmation because their
software is deliberately ignoring bitcoin-new. They'd instead see it as
unconfirmed until it was included in a bitcoin-old block, but those only
come every 40m (25% hashpower) or every 3h20m (5% hashpower).

Worse, most of the bitcoin-new transactions are still valid for
bitcoin-old, so those transactions might get included by the remaining
miners in bitcoin-old -- so you'd have to pay higher fees to get
confirmed in 3h40m in bitcoin-old than you would to get confirmed in
13m in bitcoin-new...


TL;DR: I think my conclusions are:

 - gads this stuff is complicated

 - "safe soft-forks" really are safe (this covers BIP 65 (OP_CLTV) and
   BIPs 68 and 112 (OP_CSV))

 - as currently proposed, versionbits will actually make "damaging
   soft-forks" pretty safe too

 - if there's a hard fork in the wind, and you're running a full node,
   make sure you're on the latest version. maybe run an SPV client as well
   and check you're getting the same answers from both, just to be safe.

Cheers,
aj


From laanwj at gmail.com  Mon Oct 12 16:59:37 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Mon, 12 Oct 2015 18:59:37 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.11.1 release candidate 2 available
Message-ID: <20151012165936.GA25231@amethyst.visucore.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Bitcoin Core version 0.11.1 release candidate 2 is now available from:

  <https://bitcoin.org/bin/bitcoin-core-0.11.1/test>

This is a release candidate for a new minor version release, bringing security
fixes.
(release candidate 1 was never released as binaries)

Please report bugs using the issue tracker at github:

  <https://github.com/bitcoin/bitcoin/issues>

Preliminary release notes for 0.11.1 follow:

Upgrading and downgrading
=========================

How to Upgrade
- --------------

If you are running an older version, shut it down. Wait until it has completely
shut down (which might take a few minutes for older versions), then run the
installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or
bitcoind/bitcoin-qt (on Linux).

Downgrade warning
- ------------------

Because release 0.10.0 and later makes use of headers-first synchronization and
parallel block download (see further), the block files and databases are not
backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

* Blocks will be stored on disk out of order (in the order they are
received, really), which makes it incompatible with some tools or
other programs. Reindexing using earlier versions will also not work
anymore as a result of this.

* The block index database will now hold headers for which no block is
stored on disk, which earlier versions won't support.

If you want to be able to downgrade smoothly, make a backup of your entire data
directory. Without this your node will need start syncing (or importing from
bootstrap.dat) anew afterwards. It is possible that the data from a completely
synchronised 0.10 node may be usable in older versions as-is, but this is not
supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility. There are no
known problems when downgrading from 0.11.x to 0.10.x.

Notable changes
===============

Fix buffer overflow in bundled upnp
- ------------------------------------

Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in
the XML parser during initial network discovery.

Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/

This applies to the distributed executables only, not when building from source or
using distribution provided packages.

Additionally, upnp has been disabled by default. This may result in a lower
number of reachable nodes on IPv4, however this prevents future libupnpc
vulnerabilities from being a structural risk to the network
(see https://github.com/bitcoin/bitcoin/pull/6795).

Test for LowS signatures before relaying
- -----------------------------------------

Make the node require the canonical 'low-s' encoding for ECDSA signatures when
relaying or mining.  This removes a nuisance malleability vector.

Consensus behavior is unchanged.

If widely deployed this change would eliminate the last remaining known vector
for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side
it will block most transactions made by sufficiently out of date software.

Unlike the other avenues to change txids on transactions this
one was randomly violated by all deployed bitcoin software prior to
its discovery. So, while other malleability vectors where made
non-standard as soon as they were discovered, this one has remained
permitted. Even BIP62 did not propose applying this rule to
old version transactions, but conforming implementations have become
much more common since BIP62 was initially written.

Bitcoin Core has produced compatible signatures since a28fb70e in
September 2013, but this didn't make it into a release until 0.9
in March 2014; Bitcoinj has done so for a similar span of time.
Bitcoinjs and electrum have been more recently updated.

This does not replace the need for BIP62 or similar, as miners can
still cooperate to break transactions.  Nor does it replace the
need for wallet software to handle malleability sanely[1]. This
only eliminates the cheap and irritating DOS attack.

[1] On the Malleability of Bitcoin Transactions
Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, ?ukasz Mazurek
http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf

Minimum relay fee default increase
- -----------------------------------

The default for the `-minrelaytxfee` setting has been increased from `0.00001`
to `0.00005`.

This is necessitated by the current transaction flooding, causing
outrageous memory usage on nodes due to the mempool ballooning. This is a
temporary measure, bridging the time until a dynamic method for determining
this fee is merged (which will be in 0.12).

(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11
release notes, in which this value was suggested)

0.11.1 Change log
=================

Detailed release notes follow. This overview includes changes that affect
behavior, not code moves, refactors and string updates. For convenience in locating
the code changes and accompanying discussion, both the pull request and
git merge commit are mentioned.

- - #6438 `2531438` openssl: avoid config file load/race
- - #6439 `980f820` Updated URL location of netinstall for Debian
- - #6384 `8e5a969` qt: Force TLS1.0+ for SSL connections
- - #6471 `92401c2` Depends: bump to qt 5.5
- - #6224 `93b606a` Be even stricter in processing unrequested blocks
- - #6571 `100ac4e` libbitcoinconsensus: avoid a crash in multi-threaded environments
- - #6545 `649f5d9` Do not store more than 200 timedata samples.
- - #6694 `834e299` [QT] fix thin space word wrap line break issue
- - #6703 `1cd7952` Backport bugfixes to 0.11
- - #6750 `5ed8d0b` Recent rejects backport to v0.11
- - #6769 `71cc9d9` Test LowS in standardness, removes nuisance malleability vector.
- - #6789 `b4ad73f` Update miniupnpc to 1.9.20151008
- - #6785 `b4dc33e` Backport to v0.11: In (strCommand == "tx"), return if AlreadyHave()
- - #6412 `0095b9a` Test whether created sockets are select()able
- - #6795 `4dbcec0` net: Disable upnp by default
- - #6793 `e7bcc4a` Bump minrelaytxfee default

Credits
=======

Thanks to everyone who directly contributed to this release:

- - Adam Weiss
- - Alex Morcos
- - Casey Rodarmor
- - Cory Fields
- - fanquake
- - Gregory Maxwell
- - Jonas Schnelli
- - J Ross Nicoll
- - Pavel Jan?k
- - Pavel Vasin
- - Peter Todd
- - Pieter Wuille
- - randy-waterhouse
- - Ross Nicoll
- - Suhas Daftuar
- - tailsjoin
- - ?tcDrak
- - Tom Harding
- - Veres Lajos
- - Wladimir J. van der Laan

And those who contributed additional code review and/or security research:

- - timothy on IRC for reporting the issue
- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos

As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBCgAGBQJWG+bQAAoJEHSBCwEjRsmmvKsH+wQ9mTICJoRL0nlZA/zBRis4
7ys15YFJMd5+8OQvCBw9Rr/FP3FHapHwouTbInl7gd1bED9AYXKFOe/H+nD/w3vO
tyvXbj/H4S6CNFYSlUSvLY28dTnoaSZF7GrIR/TtdQwcYsfXN/TJrZK03EMegMJX
8p9ggTfnUgUnqqYjq1gGSQdJk0aydKe4h8/rcepPkagoertOGUWlEHhZkMbkLt/q
vkZNjwjhf3SmvfwgXRJ37TjTdQB9sHYpZNPkKyI6XZ5J12it8DR8GSsPjPIkknOO
51iTw0Besm0benekFHk3IAgdfCbLokfQnTPFWxQNTzE09T5zV97LLGq1t6TC//k=
=1+qD
-----END PGP SIGNATURE-----

From laanwj at gmail.com  Mon Oct 12 17:01:57 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Mon, 12 Oct 2015 19:01:57 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.10.3 release candidate 2 available
Message-ID: <20151012170156.GB25231@amethyst.visucore.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Bitcoin Core version 0.10.3 release candidate 2 is now available from:

  <https://bitcoin.org/bin/bitcoin-core-0.10.3/test/>

(release candidate 1 never had binaries available)

This is a release candidate for a new minor version release, bringing security
fixes and translation updates.

Please report bugs using the issue tracker at github:

  <https://github.com/bitcoin/bitcoin/issues>

Preliminary releae notes follow:

Upgrading and downgrading
=========================

How to Upgrade
- --------------

If you are running an older version, shut it down. Wait until it has completely
shut down (which might take a few minutes for older versions), then run the
installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or
bitcoind/bitcoin-qt (on Linux).

Downgrade warning
- ------------------

Because release 0.10.0 and later makes use of headers-first synchronization and
parallel block download (see further), the block files and databases are not
backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

* Blocks will be stored on disk out of order (in the order they are
received, really), which makes it incompatible with some tools or
other programs. Reindexing using earlier versions will also not work
anymore as a result of this.

* The block index database will now hold headers for which no block is
stored on disk, which earlier versions won't support.

If you want to be able to downgrade smoothly, make a backup of your entire data
directory. Without this your node will need start syncing (or importing from
bootstrap.dat) anew afterwards. It is possible that the data from a completely
synchronised 0.10 node may be usable in older versions as-is, but this is not
supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility.

Notable changes
===============

Fix buffer overflow in bundled upnp
- ------------------------------------

Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in
the XML parser during initial network discovery.

Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/

This applies to the distributed executables only, not when building from source or
using distribution provided packages.

Additionally, upnp has been disabled by default. This may result in a lower
number of reachable nodes on IPv4, however this prevents future libupnpc
vulnerabilities from being a structural risk to the network
(see https://github.com/bitcoin/bitcoin/pull/6795).

Test for LowS signatures before relaying
- -----------------------------------------

Make the node require the canonical 'low-s' encoding for ECDSA signatures when
relaying or mining.  This removes a nuisance malleability vector.

Consensus behavior is unchanged.

If widely deployed this change would eliminate the last remaining known vector
for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side
it will block most transactions made by sufficiently out of date software.

Unlike the other avenues to change txids on transactions this
one was randomly violated by all deployed bitcoin software prior to
its discovery. So, while other malleability vectors where made
non-standard as soon as they were discovered, this one has remained
permitted. Even BIP62 did not propose applying this rule to
old version transactions, but conforming implementations have become
much more common since BIP62 was initially written.

Bitcoin Core has produced compatible signatures since a28fb70e in
September 2013, but this didn't make it into a release until 0.9
in March 2014; Bitcoinj has done so for a similar span of time.
Bitcoinjs and electrum have been more recently updated.

This does not replace the need for BIP62 or similar, as miners can
still cooperate to break transactions.  Nor does it replace the
need for wallet software to handle malleability sanely[1]. This
only eliminates the cheap and irritating DOS attack.

[1] On the Malleability of Bitcoin Transactions
Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, ?ukasz Mazurek
http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf

Minimum relay fee default increase
- -----------------------------------

The default for the `-minrelaytxfee` setting has been increased from `0.00001`
to `0.00005`.

This is necessitated by the current transaction flooding, causing
outrageous memory usage on nodes due to the mempool ballooning. This is a
temporary measure, bridging the time until a dynamic method for determining
this fee is merged (which will be in 0.12).

(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11.0
release notes, in which this value was suggested)

0.10.3 Change log
=================

Detailed release notes follow. This overview includes changes that affect external
behavior, not code moves, refactors or string updates.

- - #6186 `e4a7d51` Fix two problems in CSubnet parsing
- - #6153 `ebd7d8d` Parameter interaction: disable upnp if -proxy set
- - #6203 `ecc96f5` Remove P2SH coinbase flag, no longer interesting
- - #6226 `181771b` json: fail read_string if string contains trailing garbage
- - #6244 `09334e0` configure: Detect (and reject) LibreSSL
- - #6276 `0fd8464` Fix getbalance * 0
- - #6274 `be64204` Add option `-alerts` to opt out of alert system
- - #6319 `3f55638` doc: update mailing list address
- - #6438 `7e66e9c` openssl: avoid config file load/race
- - #6439 `255eced` Updated URL location of netinstall for Debian
- - #6412 `0739e6e` Test whether created sockets are select()able
- - #6694 `f696ea1` [QT] fix thin space word wrap line brake issue
- - #6704 `743cc9e` Backport bugfixes to 0.10
- - #6769 `1cea6b0` Test LowS in standardness, removes nuisance malleability vector.
- - #6789 `093d7b5` Update miniupnpc to 1.9.20151008
- - #6795 `f2778e0` net: Disable upnp by default
- - #6797 `91ef4d9` Do not store more than 200 timedata samples
- - #6793 `842c48d` Bump minrelaytxfee default

Credits
=======

Thanks to everyone who directly contributed to this release:

- - Adam Weiss
- - Alex Morcos
- - Casey Rodarmor
- - Cory Fields
- - fanquake
- - Gregory Maxwell
- - Jonas Schnelli
- - J Ross Nicoll
- - Luke Dashjr
- - Pavel Vasin
- - Pieter Wuille
- - randy-waterhouse
- - ?tcDrak
- - Tom Harding
- - Veres Lajos
- - Wladimir J. van der Laan

And all those who contributed additional code review and/or security research:

- - timothy on IRC for reporting the issue
- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos

As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBCgAGBQJWG+djAAoJEHSBCwEjRsmmYskH/3bvwLnbRYaeAX71/F/VgOqd
N7Ly6ar00I4nbTpOloRd4xdf2TGaeRyu1Ty7lbK21weCxzsC3Uq7s40zDyBbfgZq
3kDupt9naNVmfXlsCHyiFRqgQnbtJTX1UH7Y8rjjnqPuInNdo0S6ZGBZm04Iqccq
qPfncyK95fd+9g1fow0TP+dIFHrEjD9NtEzsiH58RNtDlpadxNYCjbMjnDriS7wd
k7uOkDx+jBG1X4TwMHEf32PkKssZYzDr4xLP4SkmDTYVqzf24bOiO9nXempxUUQp
E9t1pRklZSZ5chBIRMJHhwci8cRVLmv4cAbXx1cUby4P7WJJC/8t8/fhWxgPddk=
=ar+M
-----END PGP SIGNATURE-----

From aj at erisian.com.au  Mon Oct 12 17:06:37 2015
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 13 Oct 2015 03:06:37 +1000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <1444633370859.8a298e9c@Nodemailer>
References: <20151007150014.GA21849@navy> <1444633370859.8a298e9c@Nodemailer>
Message-ID: <20151012170637.GA21399@navy>

On Mon, Oct 12, 2015 at 12:02:51AM -0700, digitsu412 via bitcoin-dev wrote:
> First I think your unsaid assumption about the fragility of a soft
> fork showing incorrect confirmations is dependent on the percentage
> of hash power that didn't upgrade. ?If using your same numbers this
> was only 5% of the hash power, the attack is effectively not effective
> (u less the attacker knew an exact merchant that was unfortunately on
> the minority of the network.?

Actually, just to take this scenario more explicitly...

Say you've got 5% of hashpower running on old software, along with,
say, 1500 nodes; and meanwhile you've got 95% of hashpower running new
software, along with 4000 nodes.

There's still about 750 nodes running 0.9 or 0.8 of 5400 total according
to bitnodes.21.co/nodes, so those numbers seems at least plausible to
me for the first week or two after a soft-fork is activated.

Eventually an old-rules block gets found by the 5% hashpower. The 4000
new nodes and 95% of hashpower ignore it, of course. With 8 random
connections, old nodes should have 92% chance of seeing an old node
as a peer, so I think around ~1300 of them should still be a connected
subgraph, and the old-rules block should get propogated amongst them
(until two new-rules blocks come along and orphan it).

An SPV client with 12 random connections here has 96% chance of having one
of the ~1300 old nodes as a peer, and if so, will see the old-rules block,
that will be orphaned, and may be at risk from double-spends as a result.

So I think even with just 5% hashpower and ~30% of nodes left running
the old version, a "damaging soft fork" still poses a fairly high risk to
someone receiving payments via an SPV client, and trusting transactions
with few confirmations.

Cheers,
aj

From laanwj at gmail.com  Mon Oct 12 17:17:50 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Mon, 12 Oct 2015 19:17:50 +0200
Subject: [bitcoin-dev] ALERT: Vulnerability in UPnP library used by Bitcoin
	Core
Message-ID: <20151012171749.GA25415@amethyst.visucore.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512


TL;DR disable UPnP in Bitcoin Core as soon as possible, if you still have it enabled.

Upgrading to 0.11.1rc2 or 0.10.3rc2 will also solve the issue, as they bundle a newer libupnpc (as well as disable upnp usage by default.) However these versions are still in the release candidate cycle, there is some risk in using test versions.

See https://bitcoin.org/en/alert/2015-10-12-upnp-vulnerability for details

Wladimir
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBCgAGBQJWG+rxAAoJEHSBCwEjRsmmh14H/jWEqINoAdb9CNE5pOiFv9FG
X51SCeZ/OCQXJ5qQGgcpMfP1w2fPFJwzrrJFIp9D8MUYXc9f6ZHo0A0Uc8LmPlrW
46Wu/TgN0N5XpJ8yDzDk1GxU3fGhGEX897SOxrt8NEUcrJBC1kaLlG01ma2Mf+VJ
wXsn++pgWO/9CCQzRIBNdJf1a8qnMsyRbryW7IsLNGiR4GRKzt9Hcp/p2vVxYFdD
bjVAWsEFnRga0ho0Kpnp5RxFZxVkL03ls6yj9wqZtlMHVGuyVWiwFqMjOV30wBfv
uENkWe/6veIU+Y3PmbuPJv79kRW2xTGZTl1RIKgJAdxVWPJy58a999AToIs/BWM=
=XC8t
-----END PGP SIGNATURE-----

From digitsu at gmail.com  Tue Oct 13 00:08:49 2015
From: digitsu at gmail.com (digitsu at gmail.com)
Date: Mon, 12 Oct 2015 17:08:49 -0700 (PDT)
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20151012170637.GA21399@navy>
References: <20151012170637.GA21399@navy>
Message-ID: <1444694928847.16a3b127@Nodemailer>

Thanks AJ,




That is a must more concise example, which I think makes it very clear all the variables at play.?




I agree with its conclusion.?




Though I'm wondering about its actual significance in ability to do harm as with 5% hash power we would have to wait quite a long time before such a block was created and it would be unpredictable when exactly this would occur, and in order to actually execute such a double spend maliciously you would have to 1) notice that such a block was mined and 2) be in a position to double spend a payment with a merchant for physical goods who you would know was using an SPV wallet at that exact time, correct? (By deliberately publishing a txn which would be blocked by the upgraded network)

Isn't that in itself unlikely enough to make this form of double spend unlikely to be exploitable?




Perhaps with malicious wallet software which always publishes "bad" (will be mostly rejected) txn first and then retries with a normal one?




But I agree with you that if the risk is there why not avoid it if possible. ?



?
Regards,

On Tue, Oct 13, 2015 at 2:06 AM, Anthony Towns via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Mon, Oct 12, 2015 at 12:02:51AM -0700, digitsu412 via bitcoin-dev wrote:
>> First I think your unsaid assumption about the fragility of a soft
>> fork showing incorrect confirmations is dependent on the percentage
>> of hash power that didn't upgrade. ?If using your same numbers this
>> was only 5% of the hash power, the attack is effectively not effective
>> (u less the attacker knew an exact merchant that was unfortunately on
>> the minority of the network.?
> Actually, just to take this scenario more explicitly...
> Say you've got 5% of hashpower running on old software, along with,
> say, 1500 nodes; and meanwhile you've got 95% of hashpower running new
> software, along with 4000 nodes.
> There's still about 750 nodes running 0.9 or 0.8 of 5400 total according
> to bitnodes.21.co/nodes, so those numbers seems at least plausible to
> me for the first week or two after a soft-fork is activated.
> Eventually an old-rules block gets found by the 5% hashpower. The 4000
> new nodes and 95% of hashpower ignore it, of course. With 8 random
> connections, old nodes should have 92% chance of seeing an old node
> as a peer, so I think around ~1300 of them should still be a connected
> subgraph, and the old-rules block should get propogated amongst them
> (until two new-rules blocks come along and orphan it).
> An SPV client with 12 random connections here has 96% chance of having one
> of the ~1300 old nodes as a peer, and if so, will see the old-rules block,
> that will be orphaned, and may be at risk from double-spends as a result.
> So I think even with just 5% hashpower and ~30% of nodes left running
> the old version, a "damaging soft fork" still poses a fairly high risk to
> someone receiving payments via an SPV client, and trusting transactions
> with few confirmations.
> Cheers,
> aj
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151012/1e39a4a9/attachment.html>

From d at domob.eu  Tue Oct 13 11:02:32 2015
From: d at domob.eu (Daniel Kraft)
Date: Tue, 13 Oct 2015 13:02:32 +0200
Subject: [bitcoin-dev] Initial getheaders request
Message-ID: <561CE4C8.3000501@domob.eu>

Hi!

I've stumbled upon the code that does the initial "getheaders" request,
i. e., around line 4960 of src/main.cpp [1].

  [1] https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L4960

For some reason, it uses not pindexBestHeader but the *preceding* block
pindexBestHeader->pprev as the "from argument".  In contrast, the
request on line 4132 [2] (which is done in response to a newly announced
block) *does* use pindexBestHeader.

  [2] https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L4132

I see no apparent reason for using the preceding call; but if I change
it to pindexBestHeader on line 4960 as well, the wallet.py test seems to
get stuck.  I've not been able to figure out from the logs and the code
why this is the case; can anyone help me?  I think this is something
that should really be explained in a comment around line 4960.  If
someone can make me understand, I can write a pull request for that -- I
guess this will save others some time wondering like I do at the moment.

Yours,
Daniel

-- 
http://www.domob.eu/
OpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737
Namecoin: id/domob -> https://nameid.org/?name=domob
--
Done:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz
To go: Mon-Pri

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/45d18433/attachment-0001.sig>

From benjamin.l.cordes at gmail.com  Tue Oct 13 14:25:41 2015
From: benjamin.l.cordes at gmail.com (Benjamin)
Date: Tue, 13 Oct 2015 16:25:41 +0200
Subject: [bitcoin-dev]  Liquid
Message-ID: <CAOoPuRasL-fmQJMfmF-JVyogdMy0EVKfhUAmT44DxQq--XCdKQ@mail.gmail.com>

Hello all,

I was very surprised to learn that Blockstream will implement Sidechains
for exchanges [1], [2] and has been working on this privately. Can somebody
explain this ?announcement?? Just a few comments on this ?proposal?.

?This new construction establishes a security profile inherently superior
to existing methods of rapid transfer and settlement, and is directly
applicable to other problems within existing financial institutions.?

First of all, what does Bitcoin have to do with existing financial
institutions? Secondly, what in do you mean by ?rapid transfer? and
"settlement"? Bitcoin is anonymous, digital cash. There is no such thing as
settlement, there is only the transfer of digital cash and that's it
(settlement is a bad word for this kind of transfer of property). If you
make up new terms define them accurately and don't play the
crypto-buzzword-bingo game.

?This, in addition to increasing the security of funds normally subject to
explicit counterparty risk, fosters conditions that increase market
liquidity and reduce capital requirements for on-blockchain business
models.?

Again ? what does Bitcoin have to do with ?market liquidity? and ?capital
requirements??

?Blockstream's innovative solutions are definitely a game changer for the
Bitcoin industry.?

Does Blockstream have commercial products now?

"These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin, and
Xapo, and discussions are underway with another dozen major institutional
traders and licensed exchanges. "

??? so many questions and no answers.

Regards,
Benjamin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/29ae869a/attachment.html>

From benjamin.l.cordes at gmail.com  Tue Oct 13 14:27:18 2015
From: benjamin.l.cordes at gmail.com (Benjamin)
Date: Tue, 13 Oct 2015 16:27:18 +0200
Subject: [bitcoin-dev] Liquid
In-Reply-To: <CAOoPuRasL-fmQJMfmF-JVyogdMy0EVKfhUAmT44DxQq--XCdKQ@mail.gmail.com>
References: <CAOoPuRasL-fmQJMfmF-JVyogdMy0EVKfhUAmT44DxQq--XCdKQ@mail.gmail.com>
Message-ID: <CAOoPuRZ3Riu+KWXCS7no6ySzOh4ndQ203C0FCdmp1sebLC3B_g@mail.gmail.com>

p.s. the links

[1] https://blockstream.com/2015/10/12/introducing-liquid/
[2] www.coindesk.com/blockstream-commercial-sidechain-bitcoin-exchanges/

On Tue, Oct 13, 2015 at 4:25 PM, Benjamin <benjamin.l.cordes at gmail.com>
wrote:

> Hello all,
>
> I was very surprised to learn that Blockstream will implement Sidechains
> for exchanges [1], [2] and has been working on this privately. Can somebody
> explain this ?announcement?? Just a few comments on this ?proposal?.
>
> ?This new construction establishes a security profile inherently superior
> to existing methods of rapid transfer and settlement, and is directly
> applicable to other problems within existing financial institutions.?
>
> First of all, what does Bitcoin have to do with existing financial
> institutions? Secondly, what in do you mean by ?rapid transfer? and
> "settlement"? Bitcoin is anonymous, digital cash. There is no such thing as
> settlement, there is only the transfer of digital cash and that's it
> (settlement is a bad word for this kind of transfer of property). If you
> make up new terms define them accurately and don't play the
> crypto-buzzword-bingo game.
>
> ?This, in addition to increasing the security of funds normally subject to
> explicit counterparty risk, fosters conditions that increase market
> liquidity and reduce capital requirements for on-blockchain business
> models.?
>
> Again ? what does Bitcoin have to do with ?market liquidity? and ?capital
> requirements??
>
> ?Blockstream's innovative solutions are definitely a game changer for the
> Bitcoin industry.?
>
> Does Blockstream have commercial products now?
>
> "These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,
> and Xapo, and discussions are underway with another dozen major
> institutional traders and licensed exchanges. "
>
> ??? so many questions and no answers.
>
> Regards,
> Benjamin
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/a90a85cc/attachment.html>

From tier.nolan at gmail.com  Tue Oct 13 14:57:00 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Tue, 13 Oct 2015 15:57:00 +0100
Subject: [bitcoin-dev] Liquid
In-Reply-To: <CAOoPuRZ3Riu+KWXCS7no6ySzOh4ndQ203C0FCdmp1sebLC3B_g@mail.gmail.com>
References: <CAOoPuRasL-fmQJMfmF-JVyogdMy0EVKfhUAmT44DxQq--XCdKQ@mail.gmail.com>
	<CAOoPuRZ3Riu+KWXCS7no6ySzOh4ndQ203C0FCdmp1sebLC3B_g@mail.gmail.com>
Message-ID: <CAE-z3OUxFaA5RxdhNwJp3efBeah8J+QzvTXqD3irVoMNkX0X5A@mail.gmail.com>

It is interesting someone trying the sidechain approach.

I guess having trusted third parties to manage the chain was not a short
term thing?  It looks like there is no POW for the Liquid sidechain.

This is an area where the bitcoin could benefit by adding a way to transfer
money to/from sidechain without requiring third parties.

On Tue, Oct 13, 2015 at 3:27 PM, Benjamin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> p.s. the links
>
> [1] https://blockstream.com/2015/10/12/introducing-liquid/
> [2] www.coindesk.com/blockstream-commercial-sidechain-bitcoin-exchanges/
>
> On Tue, Oct 13, 2015 at 4:25 PM, Benjamin <benjamin.l.cordes at gmail.com>
> wrote:
>
>> Hello all,
>>
>> I was very surprised to learn that Blockstream will implement Sidechains
>> for exchanges [1], [2] and has been working on this privately. Can somebody
>> explain this ?announcement?? Just a few comments on this ?proposal?.
>>
>> ?This new construction establishes a security profile inherently superior
>> to existing methods of rapid transfer and settlement, and is directly
>> applicable to other problems within existing financial institutions.?
>>
>> First of all, what does Bitcoin have to do with existing financial
>> institutions? Secondly, what in do you mean by ?rapid transfer? and
>> "settlement"? Bitcoin is anonymous, digital cash. There is no such thing as
>> settlement, there is only the transfer of digital cash and that's it
>> (settlement is a bad word for this kind of transfer of property). If you
>> make up new terms define them accurately and don't play the
>> crypto-buzzword-bingo game.
>>
>> ?This, in addition to increasing the security of funds normally subject
>> to explicit counterparty risk, fosters conditions that increase market
>> liquidity and reduce capital requirements for on-blockchain business
>> models.?
>>
>> Again ? what does Bitcoin have to do with ?market liquidity? and ?capital
>> requirements??
>>
>> ?Blockstream's innovative solutions are definitely a game changer for the
>> Bitcoin industry.?
>>
>> Does Blockstream have commercial products now?
>>
>> "These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,
>> and Xapo, and discussions are underway with another dozen major
>> institutional traders and licensed exchanges. "
>>
>> ??? so many questions and no answers.
>>
>> Regards,
>> Benjamin
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/1747728d/attachment.html>

From djpnewton at gmail.com  Tue Oct 13 19:37:56 2015
From: djpnewton at gmail.com (Daniel Newton)
Date: Wed, 14 Oct 2015 08:37:56 +1300
Subject: [bitcoin-dev] Liquid
In-Reply-To: <CAOoPuRasL-fmQJMfmF-JVyogdMy0EVKfhUAmT44DxQq--XCdKQ@mail.gmail.com>
References: <CAOoPuRasL-fmQJMfmF-JVyogdMy0EVKfhUAmT44DxQq--XCdKQ@mail.gmail.com>
Message-ID: <CAOUBo+9D7LQ-S6Rown_sbxxb9366cQj0c0HcU72B=4sBmmS0rg@mail.gmail.com>

>Again ? what does Bitcoin have to do with ?market liquidity? and ?capital
requirements??

You seem to be conflating bitcoin with blockstream/liquid. Your question
does not make sense.

>Does Blockstream have commercial products now?

Yes. I am sure that was always their plan in order to stay a viable
commercial entity

On Wed, Oct 14, 2015 at 3:25 AM, Benjamin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello all,
>
> I was very surprised to learn that Blockstream will implement Sidechains
> for exchanges [1], [2] and has been working on this privately. Can somebody
> explain this ?announcement?? Just a few comments on this ?proposal?.
>
> ?This new construction establishes a security profile inherently superior
> to existing methods of rapid transfer and settlement, and is directly
> applicable to other problems within existing financial institutions.?
>
> First of all, what does Bitcoin have to do with existing financial
> institutions? Secondly, what in do you mean by ?rapid transfer? and
> "settlement"? Bitcoin is anonymous, digital cash. There is no such thing as
> settlement, there is only the transfer of digital cash and that's it
> (settlement is a bad word for this kind of transfer of property). If you
> make up new terms define them accurately and don't play the
> crypto-buzzword-bingo game.
>
> ?This, in addition to increasing the security of funds normally subject to
> explicit counterparty risk, fosters conditions that increase market
> liquidity and reduce capital requirements for on-blockchain business
> models.?
>
> Again ? what does Bitcoin have to do with ?market liquidity? and ?capital
> requirements??
>
> ?Blockstream's innovative solutions are definitely a game changer for the
> Bitcoin industry.?
>
> Does Blockstream have commercial products now?
>
> "These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,
> and Xapo, and discussions are underway with another dozen major
> institutional traders and licensed exchanges. "
>
> ??? so many questions and no answers.
>
> Regards,
> Benjamin
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/a6367810/attachment-0001.html>

From adam at cypherspace.org  Tue Oct 13 20:52:39 2015
From: adam at cypherspace.org (Adam Back)
Date: Tue, 13 Oct 2015 22:52:39 +0200
Subject: [bitcoin-dev] Liquid
In-Reply-To: <CAOUBo+9D7LQ-S6Rown_sbxxb9366cQj0c0HcU72B=4sBmmS0rg@mail.gmail.com>
References: <CAOoPuRasL-fmQJMfmF-JVyogdMy0EVKfhUAmT44DxQq--XCdKQ@mail.gmail.com>
	<CAOUBo+9D7LQ-S6Rown_sbxxb9366cQj0c0HcU72B=4sBmmS0rg@mail.gmail.com>
Message-ID: <CALqxMTH+2BCLHaGjZN_1SP0rEk=jtQDNiTLmJKZKLiYJxa6-EQ@mail.gmail.com>

Benjamin you may want to read this reddit thread on liquid:

https://www.reddit.com/r/Bitcoin/comments/3ok69l/blockstream_to_launch_first_sidechain_for_bitcoin/

and if you feel your questions are not answered, post them there?

(This list is about bitcoin development so it's not really on topic for here).

Adam

On 13 October 2015 at 21:37, Daniel Newton via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>>Again ? what does Bitcoin have to do with ?market liquidity? and ?capital
>> requirements??
>
> You seem to be conflating bitcoin with blockstream/liquid. Your question
> does not make sense.
>
>>Does Blockstream have commercial products now?
>
> Yes. I am sure that was always their plan in order to stay a viable
> commercial entity
>
> On Wed, Oct 14, 2015 at 3:25 AM, Benjamin via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Hello all,
>>
>> I was very surprised to learn that Blockstream will implement Sidechains
>> for exchanges [1], [2] and has been working on this privately. Can somebody
>> explain this ?announcement?? Just a few comments on this ?proposal?.
>>
>> ?This new construction establishes a security profile inherently superior
>> to existing methods of rapid transfer and settlement, and is directly
>> applicable to other problems within existing financial institutions.?
>>
>> First of all, what does Bitcoin have to do with existing financial
>> institutions? Secondly, what in do you mean by ?rapid transfer? and
>> "settlement"? Bitcoin is anonymous, digital cash. There is no such thing as
>> settlement, there is only the transfer of digital cash and that's it
>> (settlement is a bad word for this kind of transfer of property). If you
>> make up new terms define them accurately and don't play the
>> crypto-buzzword-bingo game.
>>
>> ?This, in addition to increasing the security of funds normally subject to
>> explicit counterparty risk, fosters conditions that increase market
>> liquidity and reduce capital requirements for on-blockchain business
>> models.?
>>
>> Again ? what does Bitcoin have to do with ?market liquidity? and ?capital
>> requirements??
>>
>> ?Blockstream's innovative solutions are definitely a game changer for the
>> Bitcoin industry.?
>>
>> Does Blockstream have commercial products now?
>>
>> "These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,
>> and Xapo, and discussions are underway with another dozen major
>> institutional traders and licensed exchanges. "
>>
>> ??? so many questions and no answers.
>>
>> Regards,
>> Benjamin
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From j at toom.im  Tue Oct 13 21:56:08 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Tue, 13 Oct 2015 14:56:08 -0700
Subject: [bitcoin-dev] Memory leaks?
Message-ID: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>

I just noticed that several of my running bitcoind processes were using around 3+ GB of RAM, even though the mempool itself seemed to be under control.

XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo
{
    "size" : 1896,
    "bytes" : 37341328
}

[total memory usage not shown -- I restarted bitcoind as soon as I noticed, and didn't copy it down from top]

37 MB mempool, >3 GB RAM usage. Normally, when there aren't a lot of unconfirmed txns floating around the network, memory usage is around 600 MB, so this is quite unusual.

After restarting the process and letting it run for a few minutes, I get:

  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
[###] [XXXX]     20   0 1402M  317M 49836 S  1.0  8.2  0:41.71 ./bitcoind -daemon

XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo
{
    "size" : 1072,
    "bytes" : 670000
}

0.67 MB mempool, 317 MB RAM usage. Much more reasonable.


Here's another node I'm running that has been online longer, before restarting:

  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
[###] [XXXX]     20   0 4961M 3540M 11080 S  2.8 45.3  8h20:11 bin/bitcoind -daemon

XXXX at feather:~$ bin/bitcoin-cli getmempoolinfo
{
    "size" : 3045,
    "bytes" : 39656126
}

39 MB mempool, 3540 MB total memory usage. After restarting bitcoind, I see:

[XXXX]@feather:~$ bin/bitcoin-cli stop
Bitcoin server stopping
[XXXX]@feather:~$ bin/bitcoind -daemon
Bitcoin server starting
[XXXX]@feather:~$ sleep 10; bin/bitcoin-cli getmempoolinfo
{
    "size" : 39,
    "bytes" : 47037
}


  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
[###] [XXXX]     20   0 1640M  247M 67960 S  0.0  3.2  0:05.17 bin/bitcoind -daemon




Does anybody have any guesses where we might be leaking memory, or what is using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or similar on my nodes. Maybe there's a leak in the minrelaytxfee code path? Has anyone else seen something similar?

This issue appears to happen both with Bitcoin Core 0.10.1 and with Bitcoin XT 0.11B.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/dc82ee16/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/dc82ee16/attachment.sig>

From odinn.cyberguerrilla at riseup.net  Tue Oct 13 22:49:37 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Tue, 13 Oct 2015 22:49:37 +0000
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
Message-ID: <561D8A81.2020109@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

You should compare this to having set up a node on a completely clean
computer.  It would also help to know what operating system(s) you are
using for both the oldie and the freshie.

Also, dump your XT, is poo.  Then try again, look at Core nodes on
your oldie and freshie.  Watch them for a bit.

Cheers,

O

Jonathan Toomim (Toomim Bros) via bitcoin-dev:
> I just noticed that several of my running bitcoind processes were
> using around 3+ GB of RAM, even though the mempool itself seemed to
> be under control.
> 
> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo { "size" : 1896, 
> "bytes" : 37341328 }
> 
> [total memory usage not shown -- I restarted bitcoind as soon as I
> noticed, and didn't copy it down from top]
> 
> 37 MB mempool, >3 GB RAM usage. Normally, when there aren't a lot
> of unconfirmed txns floating around the network, memory usage is
> around 600 MB, so this is quite unusual.
> 
> After restarting the process and letting it run for a few minutes,
> I get:
> 
> PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+
> Command [###] [XXXX]     20   0 1402M  317M 49836 S  1.0  8.2
> 0:41.71 ./bitcoind -daemon
> 
> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo { "size" : 1072, 
> "bytes" : 670000 }
> 
> 0.67 MB mempool, 317 MB RAM usage. Much more reasonable.
> 
> 
> Here's another node I'm running that has been online longer, before
> restarting:
> 
> PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+
> Command [###] [XXXX]     20   0 4961M 3540M 11080 S  2.8 45.3
> 8h20:11 bin/bitcoind -daemon
> 
> XXXX at feather:~$ bin/bitcoin-cli getmempoolinfo { "size" : 3045, 
> "bytes" : 39656126 }
> 
> 39 MB mempool, 3540 MB total memory usage. After restarting
> bitcoind, I see:
> 
> [XXXX]@feather:~$ bin/bitcoin-cli stop Bitcoin server stopping 
> [XXXX]@feather:~$ bin/bitcoind -daemon Bitcoin server starting 
> [XXXX]@feather:~$ sleep 10; bin/bitcoin-cli getmempoolinfo { "size"
> : 39, "bytes" : 47037 }
> 
> 
> PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+
> Command [###] [XXXX]     20   0 1640M  247M 67960 S  0.0  3.2
> 0:05.17 bin/bitcoind -daemon
> 
> 
> 
> 
> Does anybody have any guesses where we might be leaking memory, or
> what is using the additional 2.4 GB? I've been using
> minrelaytxfee=0.00003 or similar on my nodes. Maybe there's a leak
> in the minrelaytxfee code path? Has anyone else seen something
> similar?
> 
> This issue appears to happen both with Bitcoin Core 0.10.1 and with
> Bitcoin XT 0.11B.
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWHYqAAAoJEGxwq/inSG8Cp8YIAJa9xWA+rNY9ZOTWjOEZGc7Q
IpXqpIyZprhEog6By/rQ7Te+xdUuaIZrMPESEoQIdMlDjRu7V2CWKGr1LbbDf2v9
A6nMhE19tazDSMAcqHlcuWRfpex3C5QD93Oo7h0QvioNLc8cseNsYzqvOW40vIFL
SPJOfor6IFLEi6/0t7OBhVyaXZdhI7XD1IDxeD67IOafCDwHgixFZWS4aCpz4axj
i4B8DNsVgDdeYI2STBiqnL9Sopdnc1q2CwC1ENszR+sCXwIB9vdPOtIjhtWGk1gi
f+/I8IUP/jn2xIjAGixjEePCIFLFV3kI+B6akH8+TsXB4G9C3zHEHTsfCrmLblg=
=VMV3
-----END PGP SIGNATURE-----

From j at toom.im  Tue Oct 13 23:14:46 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Tue, 13 Oct 2015 16:14:46 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <561D8A81.2020109@riseup.net>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<561D8A81.2020109@riseup.net>
Message-ID: <468C1911-C504-4622-BCC8-FF0AAB17E874@toom.im>


On Oct 13, 2015, at 3:49 PM, odinn <odinn.cyberguerrilla at riseup.net> wrote:

> Signed PGP part
> It would also help to know what operating system(s) you are
> using for both the oldie and the freshie.

Linux feather 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u3 (2015-08-04) x86_64 GNU/Linux
Linux server 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux
Linux prime 3.2.0-4-amd64 #1 SMP Debian 3.2.63-2+deb7u2 x86_64 GNU/Linux

This excessive memory consumption was seen on 3 machines, all of which run Debian. All three machines run p2pool as well as bitcoind. Two run XT, one runs Core.

> 
> You should compare this to having set up a node on a completely clean
> computer.


I can't afford to do that. All of the servers I have are being used for something. Also, I'm not sure what it is you're trying to test for with that suggestion. The numbers I'm reporting are for bitcoind's resident set, not for the whole server's memory usage. I don't see how other processes running on the same machine are relevant unless you are suggesting that RPC calls (e.g. getblocktemplate) might be somehow responsible.

> 
> Also, dump your XT, is poo.


Not relevant. I addressed this message to both the Core and XT lists because the issue appears to affect both forks. Let's keep blocksize and governance debates to their own threads, please.

Repeating request: Has anyone else seen something similar? Can you report your mempool size and total bitcoind resident set size for your running full nodes?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/f11fac76/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/f11fac76/attachment-0001.sig>

From dscotese at litmocracy.com  Tue Oct 13 23:52:05 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Tue, 13 Oct 2015 16:52:05 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <468C1911-C504-4622-BCC8-FF0AAB17E874@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<561D8A81.2020109@riseup.net>
	<468C1911-C504-4622-BCC8-FF0AAB17E874@toom.im>
Message-ID: <CAGLBAhdmW6yabrOTFW90jCc9rgH0KapTJFcu2jYLFW6cYdvW_g@mail.gmail.com>

{
"size" : 1085,
"bytes" : 16151768
}

It has been running about a day.  I'll report tomorrow too.  This is a
Windows 8.1 box.

16 million divided by 1085 transactions is almost 15Kb per transaction =
unlikely, right?

On Tue, Oct 13, 2015 at 4:14 PM, Jonathan Toomim (Toomim Bros) <j at toom.im>
wrote:

>
> On Oct 13, 2015, at 3:49 PM, odinn <odinn.cyberguerrilla at riseup.net>
> wrote:
>
> Signed PGP part
> It would also help to know what operating system(s) you are
> using for both the oldie and the freshie.
>
>
> Linux feather 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u3
> (2015-08-04) x86_64 GNU/Linux
> Linux server 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux
> Linux prime 3.2.0-4-amd64 #1 SMP Debian 3.2.63-2+deb7u2 x86_64 GNU/Linux
>
> This excessive memory consumption was seen on 3 machines, all of which run
> Debian. All three machines run p2pool as well as bitcoind. Two run XT, one
> runs Core.
>
> You should compare this to having set up a node on a completely clean
> computer.
>
>
> I can't afford to do that. All of the servers I have are being used for
> something. Also, I'm not sure what it is you're trying to test for with
> that suggestion. The numbers I'm reporting are for bitcoind's resident set,
> not for the whole server's memory usage. I don't see how other processes
> running on the same machine are relevant unless you are suggesting that RPC
> calls (e.g. getblocktemplate) might be somehow responsible.
>
> Also, dump your XT, is poo.
>
>
> Not relevant. I addressed this message to both the Core and XT lists
> because the issue appears to affect both forks. Let's keep blocksize and
> governance debates to their own threads, please.
>
> Repeating request: Has anyone else seen something similar? Can you report
> your mempool size and total bitcoind resident set size for your running
> full nodes?
>
> --
> You received this message because you are subscribed to the Google Groups
> "bitcoin-xt" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to bitcoin-xt+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/696b36c5/attachment.html>

From odinn.cyberguerrilla at riseup.net  Tue Oct 13 23:59:21 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Tue, 13 Oct 2015 23:59:21 +0000
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <468C1911-C504-4622-BCC8-FF0AAB17E874@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<561D8A81.2020109@riseup.net>
	<468C1911-C504-4622-BCC8-FF0AAB17E874@toom.im>
Message-ID: <561D9AD9.7090700@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

You wanted advice... you got it

Jonathan Toomim (Toomim Bros):
> 
> On Oct 13, 2015, at 3:49 PM, odinn
> <odinn.cyberguerrilla at riseup.net> wrote:
> 
>> Signed PGP part It would also help to know what operating
>> system(s) you are using for both the oldie and the freshie.
> 
> Linux feather 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u3
> (2015-08-04) x86_64 GNU/Linux Linux server 3.2.0-4-amd64 #1 SMP
> Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux Linux prime 3.2.0-4-amd64
> #1 SMP Debian 3.2.63-2+deb7u2 x86_64 GNU/Linux
> 
> This excessive memory consumption was seen on 3 machines, all of
> which run Debian. All three machines run p2pool as well as
> bitcoind. Two run XT, one runs Core.
> 
>> 
>> You should compare this to having set up a node on a completely
>> clean computer.
> 
> 
> I can't afford to do that. All of the servers I have are being used
> for something. Also, I'm not sure what it is you're trying to test
> for with that suggestion. The numbers I'm reporting are for
> bitcoind's resident set, not for the whole server's memory usage. I
> don't see how other processes running on the same machine are
> relevant unless you are suggesting that RPC calls (e.g.
> getblocktemplate) might be somehow responsible.
> 
>> 
>> Also, dump your XT, is poo.
> 
> 
> Not relevant. I addressed this message to both the Core and XT
> lists because the issue appears to affect both forks. Let's keep
> blocksize and governance debates to their own threads, please.
> 
> Repeating request: Has anyone else seen something similar? Can you
> report your mempool size and total bitcoind resident set size for
> your running full nodes?
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWHZrZAAoJEGxwq/inSG8CZzQIAKsqKs//Wydv60nXgy5AWAPU
qZ9HuyyWXDKljxzv/Ky5jS7o7B8Ivhnt6zWvkpMTF/R9MLpGrS9jBxXZjHF//ET0
L+eoVrmxwt+rgSjIPSGU/ftF8Jnh1sELecR8FMuCaFR87xraR/7FsJF/233RLWFg
+scNiFEgttyizFNgSq2r1/N3G5e603qXfh0+reaabDX3E+8+PKyUqVaG5E+TUEW0
NIkqi7MuEYd+/Q0SGAYyY/j2BQnebsTB2TbupE/soJkAYqYbCQR8TtrctmwLXTL0
GN+WyWwLYpMio3+7a6oQJ67TBcFxCVmF81zxKM1VIoT0u39VVWeYD1YfxEYFN9Y=
=a6kH
-----END PGP SIGNATURE-----

From j at toom.im  Wed Oct 14 00:08:56 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Tue, 13 Oct 2015 17:08:56 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <CAGLBAhdmW6yabrOTFW90jCc9rgH0KapTJFcu2jYLFW6cYdvW_g@mail.gmail.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<561D8A81.2020109@riseup.net>
	<468C1911-C504-4622-BCC8-FF0AAB17E874@toom.im>
	<CAGLBAhdmW6yabrOTFW90jCc9rgH0KapTJFcu2jYLFW6cYdvW_g@mail.gmail.com>
Message-ID: <B7CB8C10-4885-400C-9E65-A11846BB84C2@toom.im>

> 16 million divided by 1085 transactions is almost 15Kb per transaction = unlikely, right?


The recent spam was about 15 kB per transaction, so that part sounds right.

The anomalous thing that I saw was that the total bitcoind process usage was about 50-100x higher than I would have expected if the mempool was the main determinant of memory usage scaling. Can you tell me how much memory Task Manager is reporting your bitcoin process as using both today and tomorrow?

On Oct 13, 2015, at 4:52 PM, Dave Scotese via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> 
> 
> {
> "size" : 1085,
> "bytes" : 16151768
> }
> It has been running about a day.  I'll report tomorrow too.  This is a Windows 8.1 box.
> 16 million divided by 1085 transactions is almost 15Kb per transaction = unlikely, right?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/b314b4b7/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/b314b4b7/attachment.sig>

From dscotese at litmocracy.com  Wed Oct 14 00:25:29 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Tue, 13 Oct 2015 17:25:29 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <B7CB8C10-4885-400C-9E65-A11846BB84C2@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<561D8A81.2020109@riseup.net>
	<468C1911-C504-4622-BCC8-FF0AAB17E874@toom.im>
	<CAGLBAhdmW6yabrOTFW90jCc9rgH0KapTJFcu2jYLFW6cYdvW_g@mail.gmail.com>
	<B7CB8C10-4885-400C-9E65-A11846BB84C2@toom.im>
Message-ID: <CAGLBAhfs=GAV_W37TOek99A1=vP3kK0X905zsHN+-yt-Bkj4RA@mail.gmail.com>

It was about 360MB (30 minutes ago?), but is now about 460MB.  I'm sure it
won't keep going up that fast.
{
"size" : 3413,
"bytes" : 41892350
}


On Tue, Oct 13, 2015 at 5:08 PM, Jonathan Toomim (Toomim Bros) <j at toom.im>
wrote:

> 16 million divided by 1085 transactions is almost 15Kb per transaction =
> unlikely, right?
>
>
> The recent spam was about 15 kB per transaction, so that part sounds right.
>
> The anomalous thing that I saw was that the total bitcoind process usage
> was about 50-100x higher than I would have expected if the mempool was the
> main determinant of memory usage scaling. Can you tell me how much memory
> Task Manager is reporting your bitcoin process as using both today and
> tomorrow?
>
> On Oct 13, 2015, at 4:52 PM, Dave Scotese via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
> {
> "size" : 1085,
> "bytes" : 16151768
> }
> It has been running about a day.  I'll report tomorrow too.  This is a
> Windows 8.1 box.
> 16 million divided by 1085 transactions is almost 15Kb per transaction =
> unlikely, right?
>
>
> --
> You received this message because you are subscribed to the Google Groups
> "bitcoin-xt" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to bitcoin-xt+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/65f7f6f1/attachment-0001.html>

From Pavel at Janik.cz  Wed Oct 14 07:22:41 2015
From: Pavel at Janik.cz (=?utf-8?Q?Pavel_Jan=C3=ADk?=)
Date: Wed, 14 Oct 2015 09:22:41 +0200
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
Message-ID: <8F8ADC9B-BF4E-45E2-B96F-A9D040D0460C@Janik.cz>

> I just noticed that several of my running bitcoind processes were using around 3+ GB of RAM, even though the mempool itself seemed to be under control.
> 
> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo
> {
>     "size" : 1896,
>     "bytes" : 37341328
> }
> 
> [total memory usage not shown -- I restarted bitcoind as soon as I noticed, and didn't copy it down from top]

The newer versions contain much more accurate reporting of memorypool usage that reflect the real memory usage:

{
  "size": 58536,
  "bytes": 770044257,
  "usage": 1652554832
}

See PR #6410 (Implement accurate memory accounting for mempool).
--  
Pavel Jan?k





From tomz at freedommail.ch  Wed Oct 14 07:58:48 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Wed, 14 Oct 2015 08:58:48 +0100
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
Message-ID: <2354813.5q0TUrZsWe@garp>

On Tuesday 13 Oct 2015 14:56:08 Jonathan Toomim  via bitcoin-dev wrote:
> Does anybody have any guesses where we might be leaking memory, or what is
> using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or
> similar on my nodes. Maybe there's a leak in the minrelaytxfee code path?
> Has anyone else seen something similar?

I suggest running it in valgrind with --leak-check=full for 10 minutes.

  valgrind --leak-check=full src/bitcoind 2>&1 | tee out

This at least will show you any memory leaks at exit.
Naturally, the leaks you observe may just be design issues where cache can 
grow to much and when the cache is cleaned on shutdown you won't see it in the 
valgrind output.

From hearn at vinumeris.com  Wed Oct 14 09:09:40 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Wed, 14 Oct 2015 11:09:40 +0200
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <2354813.5q0TUrZsWe@garp>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<2354813.5q0TUrZsWe@garp>
Message-ID: <CA+w+GKTYNxmCR_mcTmu=u8RkjkJqOD=6_SKsfygGjXB-YpWBXQ@mail.gmail.com>

Leaks are not the only explanation possible. Caches and fragmentation can
also give this sort of effect. Unfortunately the tools to debug this aren't
great. You could try a build with tcmalloc and use it to investigate heap
stats.

Odinn, trolling like a 3 year old will get you swiftly banned. Last warning.
On 14 Oct 2015 9:58 am, "Tom Zander" <tomz at freedommail.ch> wrote:

> On Tuesday 13 Oct 2015 14:56:08 Jonathan Toomim  via bitcoin-dev wrote:
> > Does anybody have any guesses where we might be leaking memory, or what
> is
> > using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or
> > similar on my nodes. Maybe there's a leak in the minrelaytxfee code path?
> > Has anyone else seen something similar?
>
> I suggest running it in valgrind with --leak-check=full for 10 minutes.
>
>   valgrind --leak-check=full src/bitcoind 2>&1 | tee out
>
> This at least will show you any memory leaks at exit.
> Naturally, the leaks you observe may just be design issues where cache can
> grow to much and when the cache is cleaned on shutdown you won't see it in
> the
> valgrind output.
>
> --
> You received this message because you are subscribed to the Google Groups
> "bitcoin-xt" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to bitcoin-xt+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/57de61ea/attachment.html>

From laanwj at gmail.com  Wed Oct 14 09:31:33 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Wed, 14 Oct 2015 11:31:33 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.11.1 release candidate 2 available
In-Reply-To: <20151012165936.GA25231@amethyst.visucore.com>
References: <20151012165936.GA25231@amethyst.visucore.com>
Message-ID: <20151014093132.GA19607@amethyst.visucore.com>

Bitcoin Core 0.11.1 and 0.10.3 final have been tagged, please start your gitian builds,

Wladimir

From laanwj at gmail.com  Wed Oct 14 09:39:14 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Wed, 14 Oct 2015 11:39:14 +0200
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
Message-ID: <20151014093913.GB19607@amethyst.visucore.com>

On Tue, Oct 13, 2015 at 02:56:08PM -0700, Jonathan Toomim (Toomim Bros) via bitcoin-dev wrote:
> I just noticed that several of my running bitcoind processes were using around 3+ GB of RAM, even though the mempool itself seemed to be under control.
> 
> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo
> {
>     "size" : 1896,
>     "bytes" : 37341328
> }
> 
> [total memory usage not shown -- I restarted bitcoind as soon as I noticed, and didn't copy it down from top]

This is *most likely* the mempool, but is just not reported correctly.

In the meantime you can mitigate the mempool growth by setting `-mintxfee`, see
https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding

This will be the default in 0.11.1 and 0.10.3. 0.12.0 will have better mempool management, as well as more precise reporting (as paveljanik already mentions.)

Wladimir

From s7r at sky-ip.org  Wed Oct 14 10:14:33 2015
From: s7r at sky-ip.org (s7r)
Date: Wed, 14 Oct 2015 13:14:33 +0300
Subject: [bitcoin-dev] Lightning Network's effect on miner fees
Message-ID: <561E2B09.3090509@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hello,

I am reading about the Lightning Network and the BIPs which need to be
deployed until it can be fully functional. I have to say it's a neat
solution to scale and have almost instant transactions in a peer 2
peer, distributed and trustless way. I already knows what the needed
BIPs are and what each one does, I am curios about the impact this
will have on miner fees.

If transactions happen in a big percent offchain, and they are only
broadcasted on the mainchain where funds are moved in or out of the
lightning network, this means there will be less transactions on the
mainchain -> less fees collected by the miners. What will happen when
the block reward will go away? Either the fees for the little amount
of onchain transactions will increase to unpractical levels, either
the miners will find it not profitable to keep their hardware plugged
in to mine, so will leave and the effect will be that the hashing
power of the network will decrease. Since the network's hashing power
is a security feature (it makes some attacks impossible or insanely
expensive) I think it's important to anticipate what will happen in
this scenario.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBCAAGBQJWHisJAAoJEIN/pSyBJlsRQfgH/05DTVd+oUNeBt6LzitY/b2a
b4Ubky0vWE5fa7sHxcfMQz4g4dPVKrDrMrpJsx2aY6D8a14tXzHsgyyRqJSZlHZh
CUYvuy+HVje5wSwYRRIFEI+yyJLRrxJYLQuTqd9u/5kpL91Qq1cgzGr9BQgz20vb
tDEP3Z0/08XeUPFA8ZxwjUptfzypVl0euIjsa2bFNFAWN9UYcDqKc0MnqgCYRTx3
F/cm1NVmtFdpE2srTXVOqC0nTdfhHjnd1zmfRpPq0ZZoG43U81PbzC0kZmdz6rkt
kUrtzKEDRLs12FNPVMrNnsHvRpScqoxIelubSvR8U3xrtIHkG9bpYO9EMqX6O4I=
=+sdq
-----END PGP SIGNATURE-----

From odinn.cyberguerrilla at riseup.net  Wed Oct 14 15:19:33 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Wed, 14 Oct 2015 15:19:33 +0000
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <CA+w+GKTYNxmCR_mcTmu=u8RkjkJqOD=6_SKsfygGjXB-YpWBXQ@mail.gmail.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<2354813.5q0TUrZsWe@garp>
	<CA+w+GKTYNxmCR_mcTmu=u8RkjkJqOD=6_SKsfygGjXB-YpWBXQ@mail.gmail.com>
Message-ID: <561E7285.1070202@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

For the record, Mr. Hearn, you do not own this list.  I submit to you
that you have very little to say on this matter at this stage and your
idle threats to "ban people" based on their preferences, suggestions,
or characterizations of your chosen software project are at best very
silly.

I am not and never was on bitcoin-xt at googlegroups.com and thus have
clipped that from the reply-to.

Mike Hearn via bitcoin-dev:
> Leaks are not the only explanation possible. Caches and
> fragmentation can also give this sort of effect. Unfortunately the
> tools to debug this aren't great. You could try a build with
> tcmalloc and use it to investigate heap stats.
> 
> Odinn, trolling like a 3 year old will get you swiftly banned. Last
> warning. On 14 Oct 2015 9:58 am, "Tom Zander" <tomz at freedommail.ch>
> wrote:
> 
>> On Tuesday 13 Oct 2015 14:56:08 Jonathan Toomim  via bitcoin-dev
>> wrote:
>>> Does anybody have any guesses where we might be leaking memory,
>>> or what
>> is
>>> using the additional 2.4 GB? I've been using
>>> minrelaytxfee=0.00003 or similar on my nodes. Maybe there's a
>>> leak in the minrelaytxfee code path? Has anyone else seen
>>> something similar?
>> 
>> I suggest running it in valgrind with --leak-check=full for 10
>> minutes.
>> 
>> valgrind --leak-check=full src/bitcoind 2>&1 | tee out
>> 
>> This at least will show you any memory leaks at exit. Naturally,
>> the leaks you observe may just be design issues where cache can 
>> grow to much and when the cache is cleaned on shutdown you won't
>> see it in the valgrind output.
>> 
>> -- You received this message because you are subscribed to the
>> Google Groups "bitcoin-xt" group. To unsubscribe from this group
>> and stop receiving emails from it, send an email to
>> bitcoin-xt+unsubscribe at googlegroups.com. For more options, visit
>> https://groups.google.com/d/optout.
>> 
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWHnKFAAoJEGxwq/inSG8CoN8H/i4m748xSMkXLgsOO2nqghXr
K3EI98BucU5XF4M/0qW0EjN1PHdkl+EjtUt0POT3mG3hl66PaoA04nMgDrND7V+w
sEXICchAVNx5+AleT65U60iibASZZIlZaXmOtdtCgz7GulmMfsfnNV2IRRvsSO1A
Nl0PuEqPW1/rsJDA58tDb8y2ltMEo5Zi2AYDMvD/AfSuNBqdHM/2IrWSPUwDB7NN
TLq5WXyW5mv7qywIu3/8jk0za6RN4gc1DmpIJHjm4bO+4FoF0oytcaOg5X8uOC1B
pOxhvEM2fTjziXaBJVha/6lrGxfi8/mdLBE68hjB3Q6/KDF9VrugdG0JK0iuDW8=
=YqPh
-----END PGP SIGNATURE-----

From truthcoin at gmail.com  Wed Oct 14 15:19:31 2015
From: truthcoin at gmail.com (Paul Sztorc)
Date: Wed, 14 Oct 2015 11:19:31 -0400
Subject: [bitcoin-dev] Lightning Network's effect on miner fees
In-Reply-To: <561E2B09.3090509@sky-ip.org>
References: <561E2B09.3090509@sky-ip.org>
Message-ID: <561E7283.2080507@gmail.com>

LN transactions are a substitute good for on-chain transactions.

Therefore, demand for on-chain transactions will decrease as a result of
LN, meaning that fees will be lower than they would otherwise be.

However, the two are also perfect compliments, as LN transactions cannot
take place at all without periodic on-chain transactions.

The demand for *all* Bitcoin transactions (LN and otherwise) is itself a
function of innumerable factors, one of which is the question "Which
form of money [Bitcoin or not-Bitcoin] do I think my trading partners
will be using?". By supporting a higher rate of (higher-quality) Bitcoin
transactions, the net result is highly uncertain, but will probably be
that LN actually increases trading fees.

On 10/14/2015 6:14 AM, s7r via bitcoin-dev wrote:
> Hello,
>
> I am reading about the Lightning Network and the BIPs which need to be
> deployed until it can be fully functional. I have to say it's a neat
> solution to scale and have almost instant transactions in a peer 2
> peer, distributed and trustless way. I already knows what the needed
> BIPs are and what each one does, I am curios about the impact this
> will have on miner fees.
>
> If transactions happen in a big percent offchain, and they are only
> broadcasted on the mainchain where funds are moved in or out of the
> lightning network, this means there will be less transactions on the
> mainchain -> less fees collected by the miners. What will happen when
> the block reward will go away? Either the fees for the little amount
> of onchain transactions will increase to unpractical levels, either
> the miners will find it not profitable to keep their hardware plugged
> in to mine, so will leave and the effect will be that the hashing
> power of the network will decrease. Since the network's hashing power
> is a security feature (it makes some attacks impossible or insanely
> expensive) I think it's important to anticipate what will happen in
> this scenario.
> _______________________________________________ > bitcoin-dev mailing list > bitcoin-dev at lists.linuxfoundation.org >
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/e035b6d3/attachment.html>

From kanzure at gmail.com  Wed Oct 14 15:37:14 2015
From: kanzure at gmail.com (Bryan Bishop)
Date: Wed, 14 Oct 2015 10:37:14 -0500
Subject: [bitcoin-dev] Lightning Network's effect on miner fees
In-Reply-To: <561E7283.2080507@gmail.com>
References: <561E2B09.3090509@sky-ip.org>
	<561E7283.2080507@gmail.com>
Message-ID: <CABaSBazTE5r5Xvw8M3DRF+d-Qd6KXbdW8W1E0DPmw5KzfY1j6w@mail.gmail.com>

On Wed, Oct 14, 2015 at 10:19 AM, Paul Sztorc via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> However, the two are also perfect compliments, as LN transactions cannot take place at all without periodic on-chain transactions.

Additionally, lightning network hot wallets are not an ideal place to
store large quantities of BTC and users that don't expect to be
actively using LN should in general prefer confirmed UTXOs for
long-term cold storage. So far the guess that I have seen floating
around is that LN usage will at first be restricted to very tiny
amounts of BTC in tiny hot wallets, since nobody is particularly
interested in running large hot wallets.

- Bryan
http://heybryan.org/
1 512 203 0507

From el33th4x0r at gmail.com  Wed Oct 14 18:02:15 2015
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Wed, 14 Oct 2015 14:02:15 -0400
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
Message-ID: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>

Hi everyone,

We just released the whitepaper describing Bitcoin-NG, a new technique for
addressing some of the scalability challenges faced by Bitcoin.
Surprisingly, Bitcoin-NG can simultaneously increase throughput while
reducing latency, and do so without impacting Bitcoin's open architecture
or changing its trust model. This post illustrates the core technique:
     http://hackingdistributed.com/2015/10/14/bitcoin-ng/
while the whitepaper has all the nitty gritty details:
     http://arxiv.org/abs/1510.02037

Fitting NG on top of the current Bitcoin blockchain is future work that we
think is quite possible. NG is compatible with both Bitcoin as is, as well
as Blockstream-like sidechains, and we currently are not planning to
compete commercially with either technology -- we see NG as being
complementary to both efforts. This is pure science, published and shared
with the community to advance the state of blockchains and to help them
reach throughputs and latencies required of cutting edge fintech
applications. Perhaps it can be adopted, or perhaps it can provide the
spark of inspiration for someone else to come up with even better solutions.

We would be delighted to hear your feedback.
- Ittay Eyal and E. G?n Sirer.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/e2ca2035/attachment.html>

From kanzure at gmail.com  Wed Oct 14 18:12:27 2015
From: kanzure at gmail.com (Bryan Bishop)
Date: Wed, 14 Oct 2015 13:12:27 -0500
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
Message-ID: <CABaSBaxWAsEG71FTy4SrVu94BXokeozmJ80tjsNU8ERpTfFaFA@mail.gmail.com>

On Wed, Oct 14, 2015 at 1:02 PM, Emin G?n Sirer
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> while the whitepaper has all the nitty gritty details:
>      http://arxiv.org/abs/1510.02037

Taking reward compensation back by fraud proofs is not enough to fix
the problems associated with double spending (such as, everyone has to
wait for the "real" confirmations instead of the "possibly
double-spend" confirmations). Some of this was discussed in -wizards
recently:
http://gnusha.org/bitcoin-wizards/2015-09-19.log

For a system based entirely on fraud proofs and threat of fraud
proofs, see fidelity-bonded ledgers:
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-February/002189.html
https://bitcointalk.org/index.php?topic=146307.0

- Bryan
http://heybryan.org/
1 512 203 0507

From sergio.d.lerner at gmail.com  Wed Oct 14 18:14:08 2015
From: sergio.d.lerner at gmail.com (Sergio Demian Lerner)
Date: Wed, 14 Oct 2015 15:14:08 -0300
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
Message-ID: <CAKzdR-oBd4uTeb62FPZwMVA=5rjqRpGqyvK2vTTrm=uvN8SXww@mail.gmail.com>

I'm reading it.

First comment: since a Bitcoin block time is only greater than the median
of the last 11 blocks, a miner could choose the key block time in order to
generate about 400 miniblocks, instead of the average 60 blocks. Not very
bad, but should be taken into account.




On Wed, Oct 14, 2015 at 3:02 PM, Emin G?n Sirer <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi everyone,
>
> We just released the whitepaper describing Bitcoin-NG, a new technique for
> addressing some of the scalability challenges faced by Bitcoin.
> Surprisingly, Bitcoin-NG can simultaneously increase throughput while
> reducing latency, and do so without impacting Bitcoin's open architecture
> or changing its trust model. This post illustrates the core technique:
>      http://hackingdistributed.com/2015/10/14/bitcoin-ng/
> while the whitepaper has all the nitty gritty details:
>      http://arxiv.org/abs/1510.02037
>
> Fitting NG on top of the current Bitcoin blockchain is future work that we
> think is quite possible. NG is compatible with both Bitcoin as is, as well
> as Blockstream-like sidechains, and we currently are not planning to
> compete commercially with either technology -- we see NG as being
> complementary to both efforts. This is pure science, published and shared
> with the community to advance the state of blockchains and to help them
> reach throughputs and latencies required of cutting edge fintech
> applications. Perhaps it can be adopted, or perhaps it can provide the
> spark of inspiration for someone else to come up with even better solutions.
>
> We would be delighted to hear your feedback.
> - Ittay Eyal and E. G?n Sirer.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/7b921e1f/attachment-0001.html>

From ittay.eyal at cornell.edu  Wed Oct 14 18:28:51 2015
From: ittay.eyal at cornell.edu (Ittay)
Date: Wed, 14 Oct 2015 14:28:51 -0400
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CABaSBaxWAsEG71FTy4SrVu94BXokeozmJ80tjsNU8ERpTfFaFA@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<CABaSBaxWAsEG71FTy4SrVu94BXokeozmJ80tjsNU8ERpTfFaFA@mail.gmail.com>
Message-ID: <CABT1wW=xqShMGU0+eDiNyNkr-77fQ_HnyKL87C6iGL-xq8BYVw@mail.gmail.com>

On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com> wrote:

> On Wed, Oct 14, 2015 at 1:02 PM, Emin G?n Sirer
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > while the whitepaper has all the nitty gritty details:
> >      http://arxiv.org/abs/1510.02037
>
> Taking reward compensation back by fraud proofs is not enough to fix
> the problems associated with double spending (such as, everyone has to
> wait for the "real" confirmations instead of the "possibly
> double-spend" confirmations). Some of this was discussed in -wizards
> recently:
> http://gnusha.org/bitcoin-wizards/2015-09-19.log


Fraud proof removes all the attacker's revenue. It's like the attacker
sacrifices an entire block for double spending in the current system. I
think Luke-Jr got it right at that discussion.

Best,
Ittay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/0630ba8f/attachment.html>

From ittay.eyal at cornell.edu  Wed Oct 14 18:38:35 2015
From: ittay.eyal at cornell.edu (Ittay)
Date: Wed, 14 Oct 2015 14:38:35 -0400
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <20151014182055.GC23875@mcelrath.org>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<20151014182055.GC23875@mcelrath.org>
Message-ID: <CABT1wWmMndFzaAML1TTLQ-4R2p6t5UHVKV94gmrzjtAjDSutTg@mail.gmail.com>

On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org> wrote:

> So it seems to me that all I need to do is figure out who the current
> leader is,
> and DDoS him off the network to shut Bitcoin-NG down.
>
> This is a significant advantage to bitcoin's ex-post-facto blocks: no one
> knows
> where the next one will come from.  The only way to shut the network down
> is to
> shut all nodes down.
>

That's an interesting point, but such an attack is difficult to pull off.
Miners
often run multiple well connected nodes, allowing them to propagate their
generated blocks from multiple vantage points.

Best,
Ittay


>
> Emin G?n Sirer via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org]
> wrote:
> > Hi everyone,
> >
> > We just released the whitepaper describing Bitcoin-NG, a new technique
> for
> > addressing some of the scalability challenges faced by Bitcoin.
> Surprisingly,
> > Bitcoin-NG can simultaneously increase throughput while reducing
> latency, and
> > do so without impacting Bitcoin's open architecture or changing its trust
> > model. This post illustrates the core technique:
> >      http://hackingdistributed.com/2015/10/14/bitcoin-ng/
> > while the whitepaper has all the nitty gritty details:
> >      http://arxiv.org/abs/1510.02037
> >
> > Fitting NG on top of the current Bitcoin blockchain is future work that
> we
> > think is quite possible. NG is compatible with both Bitcoin as is, as
> well as
> > Blockstream-like sidechains, and we currently are not planning to compete
> > commercially with either technology -- we see NG as being complementary
> to both
> > efforts. This is pure science, published and shared with the community to
> > advance the state of blockchains and to help them reach throughputs and
> > latencies required of cutting edge fintech applications. Perhaps it can
> be
> > adopted, or perhaps it can provide the spark of inspiration for someone
> else to
> > come up with even better solutions.
> >
> > We would be delighted to hear your feedback.
> > - Ittay Eyal and E. G?n Sirer.
> >
> > !DSPAM:561e98cd301391127216946!
>
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >
> > !DSPAM:561e98cd301391127216946!
>
> --
> Cheers, Bob McElrath
>
> "For every complex problem, there is a solution that is simple, neat, and
> wrong."
>     -- H. L. Mencken
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/82c897aa/attachment.html>

From el33th4x0r at gmail.com  Wed Oct 14 18:39:08 2015
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Wed, 14 Oct 2015 14:39:08 -0400
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <20151014182055.GC23875@mcelrath.org>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<20151014182055.GC23875@mcelrath.org>
Message-ID: <CAPkFh0uQjTijLdG=eicaotKYvPEcKqNZhqC5BmY45pYcRyhALQ@mail.gmail.com>

>So it seems to me that all I need to do is figure out who the current
leader is,
>and DDoS him off the network to shut Bitcoin-NG down.

Good point. If NG is layered on top of Bitcoin, we'd retain all of Bitcoin
as is. This would confer all the benefits of Bitcoin's retrospective
blocks, as well as add the ability to mint microblocks with low latency in
between. And despite the phrase "the leader," the actual leader in NG is a
key, not a specific node. That makes it possible to deter DDoS attacks by
dynamically migrating where in the network the leader is operating in
response to an attack. Finally, DDoS attacks against miners are already
possible, but they seem rare, and I suspect it's at least partly because of
the success of Matt Corallo's high speed bitcoin relay network. Similar
defenses can apply here.

- egs



On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org> wrote:

> So it seems to me that all I need to do is figure out who the current
> leader is,
> and DDoS him off the network to shut Bitcoin-NG down.
>
> This is a significant advantage to bitcoin's ex-post-facto blocks: no one
> knows
> where the next one will come from.  The only way to shut the network down
> is to
> shut all nodes down.
>
> Emin G?n Sirer via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org]
> wrote:
> > Hi everyone,
> >
> > We just released the whitepaper describing Bitcoin-NG, a new technique
> for
> > addressing some of the scalability challenges faced by Bitcoin.
> Surprisingly,
> > Bitcoin-NG can simultaneously increase throughput while reducing
> latency, and
> > do so without impacting Bitcoin's open architecture or changing its trust
> > model. This post illustrates the core technique:
> >      http://hackingdistributed.com/2015/10/14/bitcoin-ng/
> > while the whitepaper has all the nitty gritty details:
> >      http://arxiv.org/abs/1510.02037
> >
> > Fitting NG on top of the current Bitcoin blockchain is future work that
> we
> > think is quite possible. NG is compatible with both Bitcoin as is, as
> well as
> > Blockstream-like sidechains, and we currently are not planning to compete
> > commercially with either technology -- we see NG as being complementary
> to both
> > efforts. This is pure science, published and shared with the community to
> > advance the state of blockchains and to help them reach throughputs and
> > latencies required of cutting edge fintech applications. Perhaps it can
> be
> > adopted, or perhaps it can provide the spark of inspiration for someone
> else to
> > come up with even better solutions.
> >
> > We would be delighted to hear your feedback.
> > - Ittay Eyal and E. G?n Sirer.
> >
> > !DSPAM:561e98cd301391127216946!
>
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >
> > !DSPAM:561e98cd301391127216946!
>
> --
> Cheers, Bob McElrath
>
> "For every complex problem, there is a solution that is simple, neat, and
> wrong."
>     -- H. L. Mencken
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/4aef9442/attachment.html>

From lf-lists at mattcorallo.com  Wed Oct 14 18:57:08 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Wed, 14 Oct 2015 18:57:08 +0000
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CABT1wW=xqShMGU0+eDiNyNkr-77fQ_HnyKL87C6iGL-xq8BYVw@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<CABaSBaxWAsEG71FTy4SrVu94BXokeozmJ80tjsNU8ERpTfFaFA@mail.gmail.com>
	<CABT1wW=xqShMGU0+eDiNyNkr-77fQ_HnyKL87C6iGL-xq8BYVw@mail.gmail.com>
Message-ID: <28CC699B-4DA8-4472-A795-9505418C688A@mattcorallo.com>

That conversation missed a second issue. Namely that there is no way to punish people if there is a double spend in a micro block that happens in key block which reorg'd away the first transaction. eg one miner mines a transaction in a micro block, another miner (either by not having seen the first yet, or being malicious - potentially the same miner) mines a key block which reorgs away the first micro block and then, in their first micro block, mines a double spend. This can happen at any time, so you end up having to fall back to regular full blocks for confirmation times :(.

Also, Greg Slepak brought up a good point on twitter at https://twitter.com/taoeffect/status/654358023138209792. Noting that this model means users could no longer pick transactions in a mining pool which was set up in such a way (it could be tweaked to do so with separate rewards and pubkeys, but now the user can commit fraud at a much lower cost - their own pool reward, not the block's total reward).

On October 14, 2015 11:28:51 AM PDT, Ittay via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com>
>wrote:
>
>> On Wed, Oct 14, 2015 at 1:02 PM, Emin G?n Sirer
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > while the whitepaper has all the nitty gritty details:
>> >      http://arxiv.org/abs/1510.02037
>>
>> Taking reward compensation back by fraud proofs is not enough to fix
>> the problems associated with double spending (such as, everyone has
>to
>> wait for the "real" confirmations instead of the "possibly
>> double-spend" confirmations). Some of this was discussed in -wizards
>> recently:
>> http://gnusha.org/bitcoin-wizards/2015-09-19.log
>
>
>Fraud proof removes all the attacker's revenue. It's like the attacker
>sacrifices an entire block for double spending in the current system. I
>think Luke-Jr got it right at that discussion.
>
>Best,
>Ittay
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/84d65583/attachment-0001.html>

From bob_bitcoin at mcelrath.org  Wed Oct 14 20:52:35 2015
From: bob_bitcoin at mcelrath.org (Bob McElrath)
Date: Wed, 14 Oct 2015 20:52:35 +0000
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
Message-ID: <20151014205235.GD23875@mcelrath.org>

So it seems to me that all I need to do is figure out who the current leader is,
and DDoS him off the network to shut Bitcoin-NG down.

This is a significant advantage to bitcoin's ex-post-facto blocks: no one knows
where the next one will come from.  The only way to shut the network down is to
shut all nodes down.

Emin G?n Sirer via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:
> Hi everyone,
> 
> We just released the whitepaper describing Bitcoin-NG, a new technique for
> addressing some of the scalability challenges faced by Bitcoin. Surprisingly,
> Bitcoin-NG can simultaneously increase throughput while reducing latency, and
> do so without impacting Bitcoin's open architecture or changing its trust
> model. This post illustrates the core technique:
> ? ? ?http://hackingdistributed.com/2015/10/14/bitcoin-ng/
> while the whitepaper has all the nitty gritty details:
> ? ? ?http://arxiv.org/abs/1510.02037
> 
> Fitting NG on top of the current Bitcoin blockchain is future work that we
> think is quite possible. NG is compatible with both Bitcoin as is, as well as
> Blockstream-like sidechains, and we currently are not planning to compete
> commercially with either technology -- we see NG as being complementary to both
> efforts. This is pure science, published and shared with the community to
> advance the state of blockchains and to help them reach throughputs and
> latencies required of cutting edge fintech applications. Perhaps it can be
> adopted, or perhaps it can provide the spark of inspiration for someone else to
> come up with even better solutions.
> 
> We would be delighted to hear your feedback.?
> - Ittay Eyal and E. G?n Sirer.
> 
> !DSPAM:561e98cd301391127216946!

> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> !DSPAM:561e98cd301391127216946!

--
Cheers, Bob McElrath

"For every complex problem, there is a solution that is simple, neat, and wrong."
    -- H. L. Mencken 


From odinn.cyberguerrilla at riseup.net  Wed Oct 14 22:21:19 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Wed, 14 Oct 2015 22:21:19 +0000
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CAPkFh0uQjTijLdG=eicaotKYvPEcKqNZhqC5BmY45pYcRyhALQ@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<20151014182055.GC23875@mcelrath.org>
	<CAPkFh0uQjTijLdG=eicaotKYvPEcKqNZhqC5BmY45pYcRyhALQ@mail.gmail.com>
Message-ID: <561ED55F.2000506@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

This (Bitcoin-NG in concept) could be done as a (issue and pull
request process) to Bitcoin Core itself, amirite?  It seems like it
would provide an interesting issue to open and have healthy discussion
on both mailing list and github, adding the caveat that it would be at
the user's option.  Thus if something like Bitcoin-NG did come to be
it would be something more like a feature that the user could activate
/ deactivate from within Core.  I assume it would be default off, but
with the option to utilize.  Code would thus be available to others as
well.  I am not saying yea or nay on it, just that it seems like this
could be done.

Some notes:

Once a node generates a key block it becomes the leader.  As a leader,
the node is allowed to generate  microblocks  at  a  set  rate
smaller  than  a  predened  maximum.  A  microblock in Bitcoin-NG
contains  ledger  entries  and  a  header.   The  header  contains
the  reference  to the  previous  block,  the  current  GMT  time,  a
 cryptographic  hash  of  its  ledger  entries,  and  a cryptographic
 signature  of  the  header.   The  signature  uses  the  private  key
 that  matches  the public key in the latest key block in the chain.
For a microblock to be valid, all its entries must be valid according
to the specification of the state machine, and the signature has to be
valid.  However, the microblocks, it is said, don't affect the weight
of the chain, because they do not contain proof of work.  It is
assumed by the authors of this model that this situation is critical
for maintaining incentives here.

The questions that then begin to emerge to me are how is this
information managed and protected?  The headers, thus containing
reference(s) to previous block(s), current GMT time(s), cryptographic
hash(es) of ledger entries, and cryptographic signature(s) of the
headers, so forth, and other information.  Can the Bitcoin-NG scheme
be designed or implemented in a manner which supports Stealth sends,
Confidential Transactions, or similar privacy measures?  Or is this
something which cannot be answered at this time?

Emin G?n Sirer via bitcoin-dev:
>> So it seems to me that all I need to do is figure out who the
>> current
> leader is,
>> and DDoS him off the network to shut Bitcoin-NG down.
> 
> Good point. If NG is layered on top of Bitcoin, we'd retain all of
> Bitcoin as is. This would confer all the benefits of Bitcoin's
> retrospective blocks, as well as add the ability to mint
> microblocks with low latency in between. And despite the phrase
> "the leader," the actual leader in NG is a key, not a specific
> node. That makes it possible to deter DDoS attacks by dynamically
> migrating where in the network the leader is operating in response
> to an attack. Finally, DDoS attacks against miners are already 
> possible, but they seem rare, and I suspect it's at least partly
> because of the success of Matt Corallo's high speed bitcoin relay
> network. Similar defenses can apply here.
> 
> - egs
> 
> 
> 
> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org>
> wrote:
> 
>> So it seems to me that all I need to do is figure out who the
>> current leader is, and DDoS him off the network to shut
>> Bitcoin-NG down.
>> 
>> This is a significant advantage to bitcoin's ex-post-facto
>> blocks: no one knows where the next one will come from.  The only
>> way to shut the network down is to shut all nodes down.
>> 
>> Emin G?n Sirer via bitcoin-dev
>> [bitcoin-dev at lists.linuxfoundation.org] wrote:
>>> Hi everyone,
>>> 
>>> We just released the whitepaper describing Bitcoin-NG, a new
>>> technique
>> for
>>> addressing some of the scalability challenges faced by
>>> Bitcoin.
>> Surprisingly,
>>> Bitcoin-NG can simultaneously increase throughput while
>>> reducing
>> latency, and
>>> do so without impacting Bitcoin's open architecture or changing
>>> its trust model. This post illustrates the core technique: 
>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/ while the
>>> whitepaper has all the nitty gritty details: 
>>> http://arxiv.org/abs/1510.02037
>>> 
>>> Fitting NG on top of the current Bitcoin blockchain is future
>>> work that
>> we
>>> think is quite possible. NG is compatible with both Bitcoin as
>>> is, as
>> well as
>>> Blockstream-like sidechains, and we currently are not planning
>>> to compete commercially with either technology -- we see NG as
>>> being complementary
>> to both
>>> efforts. This is pure science, published and shared with the
>>> community to advance the state of blockchains and to help them
>>> reach throughputs and latencies required of cutting edge
>>> fintech applications. Perhaps it can
>> be
>>> adopted, or perhaps it can provide the spark of inspiration for
>>> someone
>> else to
>>> come up with even better solutions.
>>> 
>>> We would be delighted to hear your feedback. - Ittay Eyal and
>>> E. G?n Sirer.
>>> 
>>> !DSPAM:561e98cd301391127216946!
>> 
>>> _______________________________________________ bitcoin-dev
>>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>> 
>>> 
>>> !DSPAM:561e98cd301391127216946!
>> 
>> -- Cheers, Bob McElrath
>> 
>> "For every complex problem, there is a solution that is simple,
>> neat, and wrong." -- H. L. Mencken
>> 
>> 
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWHtVfAAoJEGxwq/inSG8C85kH/2T07oj/JM+bQcgy2kw9rtUa
XHkMNn86kVvtaniSKQ2j+SO9q8HkUI9Rv0Pz+qbX1CyAm6Z1FTCtDKornCnxx7FW
AJyZQSm5n40LUBIc3o2NBJvXKySTO2jpxluw0HAU8BQHSgFWwj1+vocqObDYxRCd
YDlhGd2ITmF55TlR+9seWqRyW+gABUoS+SaxM2yZaqWFlUGyOhYCJYpIo1nfWCZi
1F7/j0E92zu5kS5JJuRE91A4Si0LeTQPtPqXMeVm/UicdQB1a/aI0mzp6VRdm3Bo
gE79r1sKFFgpbQcz68OzPAL3RFTm1Q/C5jcqdy6cQjgp9em/v4uOCS3TKLWlVNQ=
=Einy
-----END PGP SIGNATURE-----

From s7r at sky-ip.org  Wed Oct 14 22:37:32 2015
From: s7r at sky-ip.org (s7r)
Date: Thu, 15 Oct 2015 01:37:32 +0300
Subject: [bitcoin-dev] Lightning Network's effect on miner fees
In-Reply-To: <561E7283.2080507@gmail.com>
References: <561E2B09.3090509@sky-ip.org> <561E7283.2080507@gmail.com>
Message-ID: <561ED92C.2090203@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On 10/14/2015 6:19 PM, Paul Sztorc wrote:
> LN transactions are a substitute good for on-chain transactions.
> 
> Therefore, demand for on-chain transactions will decrease as a
> result of LN, meaning that fees will be lower than they would
> otherwise be.
> 
> However, the two are also perfect compliments, as LN transactions
> cannot take place at all without periodic on-chain transactions.
> 
> The demand for *all* Bitcoin transactions (LN and otherwise) is
> itself a function of innumerable factors, one of which is the
> question "Which form of money [Bitcoin or not-Bitcoin] do I think
> my trading partners will be using?". By supporting a higher rate of
> (higher-quality) Bitcoin transactions, the net result is highly
> uncertain, but will probably be that LN actually increases trading
> fees.

Probably yes. But probably no. Having less hashing power is not good,
and it's unrelated to scalability and decentralization, it's related
to security. Of course we could argue that the hashing power is not
super decentralized at this moment but it's unrelated to the topic.

I'd rather have less decentralized big amount of hashing power as
opposite to less hashing power.

One theory, very close to yours, is that if Bitcoin transactions
demand grows so high that we need the lightning network, there should
be plenty of on chain transactions for miners to collect fees from.

I haven't yet seen the incentives of everyone involved in lightning
network (payment channel end points, hub operators, miners, etc.) but
would it make sense to enforce a % of the fees collected by on payment
hubs to be spent as miner fees, regardless if the transactions from
that hub go on the main chain or not?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBCAAGBQJWHtksAAoJEIN/pSyBJlsR9Y0H+QE/XdW7yauhrNJtp2eIBPg9
zVUanzR2LT0zAkeF5/Xsx3PFoypALOV7R0YNL29jI3F2XkZA8v24wfNvPi0DETcC
ZOxw4G1erIEjjj51Qz4M7okjQecJxPHOJ+Nz6iNZEDFcZG2b15phCRSQKZwSHP+b
Erw6a4NPs1foieZyk260KSOB8lFs9e8bUJfXd4FfA7l60RA9582K6p05aqVtehFW
ONTe8ULv8F0ba+EzVyTodzzY6ehjD+uc31zL6mDFIbiW+InivFbfi2uDVN1BP/US
m99lLHvDEthnkTokFrbDu81kXdD0lHwIu4O0EMzCnw2E0vWi3sGKd+M0P0sv4WA=
=1qxh
-----END PGP SIGNATURE-----

From djpnewton at gmail.com  Wed Oct 14 23:42:31 2015
From: djpnewton at gmail.com (Daniel Newton)
Date: Thu, 15 Oct 2015 12:42:31 +1300
Subject: [bitcoin-dev] Lightning Network's effect on miner fees
In-Reply-To: <561ED92C.2090203@sky-ip.org>
References: <561E2B09.3090509@sky-ip.org> <561E7283.2080507@gmail.com>
	<561ED92C.2090203@sky-ip.org>
Message-ID: <CAOUBo+-7hbaJ9YMG6-WfB-=+6+9mn8U_vjQYqfNf6NwTA0p2yw@mail.gmail.com>

You could make the same argument about changetip, coinbase, bitstamp or any
other entity that operates off chain transactions.

1) There is probably no way of blocking them or enforcing fee collection
from entities that operate off chain transactions
2) They all have to settle on chain eventually

On Thu, Oct 15, 2015 at 11:37 AM, s7r via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
> On 10/14/2015 6:19 PM, Paul Sztorc wrote:
> > LN transactions are a substitute good for on-chain transactions.
> >
> > Therefore, demand for on-chain transactions will decrease as a
> > result of LN, meaning that fees will be lower than they would
> > otherwise be.
> >
> > However, the two are also perfect compliments, as LN transactions
> > cannot take place at all without periodic on-chain transactions.
> >
> > The demand for *all* Bitcoin transactions (LN and otherwise) is
> > itself a function of innumerable factors, one of which is the
> > question "Which form of money [Bitcoin or not-Bitcoin] do I think
> > my trading partners will be using?". By supporting a higher rate of
> > (higher-quality) Bitcoin transactions, the net result is highly
> > uncertain, but will probably be that LN actually increases trading
> > fees.
>
> Probably yes. But probably no. Having less hashing power is not good,
> and it's unrelated to scalability and decentralization, it's related
> to security. Of course we could argue that the hashing power is not
> super decentralized at this moment but it's unrelated to the topic.
>
> I'd rather have less decentralized big amount of hashing power as
> opposite to less hashing power.
>
> One theory, very close to yours, is that if Bitcoin transactions
> demand grows so high that we need the lightning network, there should
> be plenty of on chain transactions for miners to collect fees from.
>
> I haven't yet seen the incentives of everyone involved in lightning
> network (payment channel end points, hub operators, miners, etc.) but
> would it make sense to enforce a % of the fees collected by on payment
> hubs to be spent as miner fees, regardless if the transactions from
> that hub go on the main chain or not?
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.22 (MingW32)
>
> iQEcBAEBCAAGBQJWHtksAAoJEIN/pSyBJlsR9Y0H+QE/XdW7yauhrNJtp2eIBPg9
> zVUanzR2LT0zAkeF5/Xsx3PFoypALOV7R0YNL29jI3F2XkZA8v24wfNvPi0DETcC
> ZOxw4G1erIEjjj51Qz4M7okjQecJxPHOJ+Nz6iNZEDFcZG2b15phCRSQKZwSHP+b
> Erw6a4NPs1foieZyk260KSOB8lFs9e8bUJfXd4FfA7l60RA9582K6p05aqVtehFW
> ONTe8ULv8F0ba+EzVyTodzzY6ehjD+uc31zL6mDFIbiW+InivFbfi2uDVN1BP/US
> m99lLHvDEthnkTokFrbDu81kXdD0lHwIu4O0EMzCnw2E0vWi3sGKd+M0P0sv4WA=
> =1qxh
> -----END PGP SIGNATURE-----
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/0c9e9417/attachment.html>

From truthcoin at gmail.com  Wed Oct 14 23:55:08 2015
From: truthcoin at gmail.com (Paul Sztorc)
Date: Wed, 14 Oct 2015 19:55:08 -0400
Subject: [bitcoin-dev] Lightning Network's effect on miner fees
In-Reply-To: <561ED92C.2090203@sky-ip.org>
References: <561E2B09.3090509@sky-ip.org> <561E7283.2080507@gmail.com>
	<561ED92C.2090203@sky-ip.org>
Message-ID: <561EEB5C.3000500@gmail.com>

On 10/14/2015 6:37 PM, s7r wrote:
> On 10/14/2015 6:19 PM, Paul Sztorc wrote:
> > LN transactions are a substitute good for on-chain transactions.
>
> > Therefore, demand for on-chain transactions will decrease as a
> > result of LN, meaning that fees will be lower than they would
> > otherwise be.
>
> > However, the two are also perfect compliments, as LN transactions
> > cannot take place at all without periodic on-chain transactions.
>
> > The demand for *all* Bitcoin transactions (LN and otherwise) is
> > itself a function of innumerable factors, one of which is the
> > question "Which form of money [Bitcoin or not-Bitcoin] do I think
> > my trading partners will be using?". By supporting a higher rate of
> > (higher-quality) Bitcoin transactions, the net result is highly
> > uncertain, but will probably be that LN actually increases trading
> > fees.
>
> Probably yes. But probably no. Having less hashing power is not good,
> and it's unrelated to scalability and decentralization, it's related
> to security. Of course we could argue that the hashing power is not
> super decentralized at this moment but it's unrelated to the topic.
Who are you talking to? Who said anything about any of this? If you are
talking to me, please don't imply that I don't already know these things.

>
> I'd rather have less decentralized big amount of hashing power as
> opposite to less hashing power.
>
> One theory, very close to yours, is that if Bitcoin transactions
> demand grows so high that we need the lightning network, there should
> be plenty of on chain transactions for miners to collect fees from.
For a given fee amount, LN transactions are worse than on-chain
transactions. So people would only use LN if they preferred cheaper txns.
>
> I haven't yet seen the incentives of everyone involved in lightning
> network (payment channel end points, hub operators, miners, etc.) but
> would it make sense to enforce a % of the fees collected by on payment
> hubs to be spent as miner fees, regardless if the transactions from
> that hub go on the main chain or not?
If you want fees to go up, either decrease supply (lower the blocksize
limit) or increase demand (a popular Bitcoin). There's no need to do
anything roundabout.

Regards,
Paul



From jgarzik at gmail.com  Thu Oct 15 00:02:21 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 14 Oct 2015 20:02:21 -0400
Subject: [bitcoin-dev] Proposed list moderation policy and conduct
Message-ID: <CADm_WcYnq5sk=wdhqx5UysyS=fu7kRUrixOJC=QfoY5np1ATmA@mail.gmail.com>

Introduction
-------------------
This mailing list, bitcoin-dev, aim to facilitate constructive discussion
of issues related to technical development of the bitcoin protocol and the
Bitcoin Core reference implementation.  We can achieve this, in part, by
behaving well towards each other, so that the broadest diversity of
participants - both amateur and professional, new and experienced - feel
that the lists are welcoming and useful.

This proposed policy helps maintain that environment by capturing the
conduct we aspire to when we participate in discussions on bitcoin-dev.

We Strive To:
-------------

*Be friendly and patient*

1. Many of us are volunteers, and so a sense of fun is part of why we do
what we do. Be positive and engaging, rather than snarky.
2. If someone asks for help it is because they need it. Politely suggest
specific documentation or more appropriate venues where appropriate. Avoid
aggressive or vague responses.

*Be civil and considerate*

1. Disagreement is no excuse for poor conduct or personal attacks. A
community where people feel uncomfortable is not a productive one.
2. If you would not feel comfortable saying something to a co-worker or
acquaintance, it is probably not appropriate on this list either.

*Assume good faith*

1. Remember that protocol & engineering questions are often very complex
and difficult to assess. If you disagree, please do so politely, by
disputing logical errors and factual premises rather than by attacking
individuals.
2. If something seems outrageous, check that you did not misinterpret it.
Ask for clarification, rather than assuming the worst.
3. For more, read https://en.wikipedia.org/wiki/Wikipedia:Assume_good_faith

*Respect time and attention*

1. List members are often busy people. As a result, we value concision and
clarity. Emails that are brief and to the point take more time to write,
but are repaid many times over when other members of the list make the same
effort.
2. Conversations should remain focused and on-topic. If you must change the
topic, start a new thread by changing the topic line of your emails. Also,
avoid flooding the list with long threads by reading the entire thread
first, instead of responding quickly to many emails in a short period of
time.
3. New members are welcome, but should be careful to respect the time and
energy of long-time list members by doing research in FAQs and with search
engines before asking questions.
4. Off-topic threads will be directed to other venues.

*Disclose potential conflicts*

1. List discussions often involve interested parties. We expect
participants to be aware when they are conflicted due to employment or
other projects they are involved in, and disclose those interests to other
project members.
2. When in doubt, over-disclose. Perceived conflicts of interest are
important to address, so that the lists? decisions are credible even when
unpopular, difficult or favorable to the interests of one group over
another.



Interpretation
--------------

This policy is not exhaustive or complete. It is not a rulebook; it serves
to distill our common understanding of a collaborative, shared environment
and goals. We expect it to be followed in spirit as much as in the letter.

Enforcement
-----------

Most members of the bitcoin-dev community already comply with this policy,
not because of the existence of the policy, but because they have long
experience participating in open source communities where the conduct
described above is normal and expected. However, failure to observe the
code may be grounds for reprimand, probation, or removal from the lists.

If you have concerns about someone?s conduct:

* *Direct contact*: it is always appropriate to email a list member,
mention that you think their behavior was out of line, and (if necessary)
point them to this document.

* *On-list*: discussing conduct on-list, either as part of another message
or as a standalone thread, is always acceptable. Note, though, that
approaching the person directly can be better, as it tends to make them
less defensive, and it respects the time of other list members, so you
probably want to try direct contact first.

* *Moderators*: You can reach the list moderators through the addresses
they use for on-list communication.


Moderators
----------
The selection of moderators is intended to be a mix from various projects
and roles, and expressly intended to avoid cases where the set of
(moderators) equals the set of (bitcoin core committers) or similar.

TBD
Jeff Garzik
[btcdrak?  Johnathan?   Others were listed in the IRC meeting, but the
bitcoinstats site is down right here]



Further Context
---------------

Other resources, while not formally part of this code of conduct, can
provide useful context and guidance for good behavior.

1. Chapter 6 of Producing OSS, by OSI board member Karl Fogel, describes
common best practices for mailing list participation,
particularly [?You Are What You Write?](
http://producingoss.com/en/communications.html#you-are-what-you-write) and
[?Avoiding Common
Pitfalls"](http://producingoss.com/en/common-pitfalls.html).
2. [RFC 1855](https://www.ietf.org/rfc/rfc1855.txt), particularly section
2.1.1 (?User Guidelines for mail?), also provides useful
guidelines for sending good emails.
3. [The Ubuntu Code of Conduct](
http://www.ubuntu.com/project/about-ubuntu/conduct) provides useful
guidance for group leaders.

This policy was inspired by [the GNOME Code of Conduct](
https://live.gnome.org/CodeOfConduct/), [the Mozilla Community Participation
Guidelines](https://www.mozilla.org/about/policies/participation.html),
[the Ubuntu Code of Conduct](
http://www.ubuntu.com/project/about-ubuntu/conduct), and other codes listed
at [the OpenHatch list of project codes of conduct](
https://openhatch.org/wiki/Project_codes_of_conduct).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/585c3ab5/attachment.html>

From luke at dashjr.org  Thu Oct 15 00:17:34 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 15 Oct 2015 00:17:34 +0000
Subject: [bitcoin-dev] Proposed list moderation policy and conduct
In-Reply-To: <CADm_WcYnq5sk=wdhqx5UysyS=fu7kRUrixOJC=QfoY5np1ATmA@mail.gmail.com>
References: <CADm_WcYnq5sk=wdhqx5UysyS=fu7kRUrixOJC=QfoY5np1ATmA@mail.gmail.com>
Message-ID: <201510150017.37007.luke@dashjr.org>

On Thursday, October 15, 2015 12:02:21 AM Jeff Garzik via bitcoin-dev wrote:
> 2. If someone asks for help it is because they need it. Politely suggest
> specific documentation or more appropriate venues where appropriate. Avoid
> aggressive or vague responses.

This could get noisy. Clarification that only *development* help is 
appropriate for the list would improve it.

> 2. Conversations should remain focused and on-topic. If you must change the
> topic, start a new thread by changing the topic line of your emails.

Probably should note that entirely new threads should be new messages, *not* 
merely a reply with a changed topic (as changing the topic does not in fact 
start a new thread).

> 4. Off-topic threads will be directed to other venues.

Threads like this one are off-topic, yet we have no obvious other venue for 
it.. :(

> *Disclose potential conflicts*

IMO this seems like not only a waste of time, but also futile for anyone not 
exclusively associated with a single company/organization.

> If you have concerns about someone?s conduct:
> * *On-list*: discussing conduct on-list, either as part of another message
> or as a standalone thread, is always acceptable.

Please no. This is off-topic noise.

Luke

From odinn.cyberguerrilla at riseup.net  Thu Oct 15 00:40:47 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Thu, 15 Oct 2015 00:40:47 +0000
Subject: [bitcoin-dev] Proposed list moderation policy and conduct
In-Reply-To: <201510150017.37007.luke@dashjr.org>
References: <CADm_WcYnq5sk=wdhqx5UysyS=fu7kRUrixOJC=QfoY5np1ATmA@mail.gmail.com>
	<201510150017.37007.luke@dashjr.org>
Message-ID: <561EF60F.9030304@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512


I am concerned that someone will always call "off topic" regardless of
how on-topic something actually is.  There is no objective measure of
on-topicness here (or hasn't been) unless we say it has to do with
bitcoin development.

If you say, "Conversations should remain focused and on-topic," as you
have suggested, then presumably you mean, as has also been suggested
in the proposed list moderation policy and conduct document, that we

"aim to facilitate constructive discussion
of issues related to technical development of the bitcoin protocol and
the Bitcoin Core reference implementation"

and thus, that "on-topic" conversations would necessarily be "related
to technical development of the bitcoin protocol and the Bitcoin Core
reference implementation."

Unfortunately, while that is fairly specific to what this list is
about, I think it still will result in a lot of people shouting "Off
Topic!" whenever someone mentions something that might even be
remotely and slightly off the the range.  Thus, I don't think the
current language in the proposed list moderation policy and conduct
document is really that good, and needs much more discussion and
refinement before, well, anything.  It would be a shame if every time
someone brings up something innovative, new or wonderful, or explores
something on the boundaries, they are shouted down with cries of "Off
Topic!" Which, by the way, I see happening A Lot on this list.

Specifically relating to the subject of Disclosure,
It is suggested that people here
"*Disclose potential conflicts*"

"1. List discussions often involve interested parties. We expect
participants to be aware when they are conflicted due to employment or
other projects they are involved in, and disclose those interests to
other project members.
2. When in doubt, over-disclose. Perceived conflicts of interest are
important to address, so that the lists? decisions are credible even
when unpopular, difficult or favorable to the interests of one group
over another."

I don't doubt that this is a fine plan, but those who work for three
letter agencies or have simply signed NDAs (as an example) aren't
going to disclose anything, nada ~ but will be here anyway, pushing
their personal interests.  Reality.

Looking forward to discussion.

Cheers,

O

Luke Dashjr via bitcoin-dev:
> On Thursday, October 15, 2015 12:02:21 AM Jeff Garzik via
> bitcoin-dev wrote:
>> 2. If someone asks for help it is because they need it. Politely
>> suggest specific documentation or more appropriate venues where
>> appropriate. Avoid aggressive or vague responses.
> 
> This could get noisy. Clarification that only *development* help is
>  appropriate for the list would improve it.
> 
>> 2. Conversations should remain focused and on-topic. If you must
>> change the topic, start a new thread by changing the topic line
>> of your emails.
> 
> Probably should note that entirely new threads should be new
> messages, *not* merely a reply with a changed topic (as changing
> the topic does not in fact start a new thread).
> 
>> 4. Off-topic threads will be directed to other venues.
> 
> Threads like this one are off-topic, yet we have no obvious other
> venue for it.. :(
> 
>> *Disclose potential conflicts*
> 
> IMO this seems like not only a waste of time, but also futile for
> anyone not exclusively associated with a single
> company/organization.
> 
>> If you have concerns about someone?s conduct: * *On-list*:
>> discussing conduct on-list, either as part of another message or
>> as a standalone thread, is always acceptable.
> 
> Please no. This is off-topic noise.
> 
> Luke _______________________________________________ bitcoin-dev
> mailing list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWHvYPAAoJEGxwq/inSG8C/AgIAKxEOZpQ5O7cdAGcBceE840d
1Jv29kfErv/+vuasCumbF6yCRljJGqeU/t7YmoWcQzSD5jijBbZ7uB7yXBsoJwyg
xELeEAzV2t7v7zLxi569xVKvdaMrIYvwPB2uOQsfmqZ2+PrSlBsRIhcgB9zeuVyK
5Mtb0cHJx7aDmBhhC4r1IQGNfa8zzfdsNU4BqHR2/l6NmH29p9tb7DPC+83O6xY+
ODn6gDRAFsjC+Cy3gsLNf1J4hEvGOkkSVMJIHEmkdJx2gN306rbc7X7DK7CSQX3E
vmhAmDj419dpTvciOEjuiROGDhawPnBsO37UZJIVC/6yWe4sDk5JvQULU2HiyDo=
=T4vL
-----END PGP SIGNATURE-----

From justus at openbitcoinprivacyproject.org  Thu Oct 15 01:43:25 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Wed, 14 Oct 2015 20:43:25 -0500
Subject: [bitcoin-dev] Proposed list moderation policy and conduct
In-Reply-To: <CADm_WcYnq5sk=wdhqx5UysyS=fu7kRUrixOJC=QfoY5np1ATmA@mail.gmail.com>
References: <CADm_WcYnq5sk=wdhqx5UysyS=fu7kRUrixOJC=QfoY5np1ATmA@mail.gmail.com>
Message-ID: <561F04BD.6000203@openbitcoinprivacyproject.org>

On 14/10/15 19:02, Jeff Garzik via bitcoin-dev wrote:
> *Disclose potential conflicts*
> 
> 1. List discussions often involve interested parties. We expect
> participants to be aware when they are conflicted due to employment or
> other projects they are involved in, and disclose those interests to other
> project members.
> 2. When in doubt, over-disclose. Perceived conflicts of interest are
> important to address, so that the lists? decisions are credible even when
> unpopular, difficult or favorable to the interests of one group over
> another.

Even if we assume everybody will try to approach that topic in good
faith, I don't think it's that simple.

A term that's become popular recently is "Bitcoin maximalist", and it's
frequently used as a slur or insult.

I honestly find that to be incomprehensible. If somebody at a Ford board
meeting started talking about how Ford needed to make sure Toyota was
able to sell enough cars, they wouldn't get very far by labelling their
critics as "Ford maximalists".

Anyone who works at Ford and who isn't a Ford maximalist is in the wrong
job.

And yet in Bitcoin, a much development is funded by companies who offer
products which compete with Bitcoin, or at least would be in competition
if Bitcoin were to achieve unlimited success.

I expect this is a minority view on this list, but my position is that
anyone who is not a Bitcoin maximalists has a potential conflict of
interest if they're also involved in Bitcoin development.

I also suspect this issue is a cause of much user dissatisfaction with
Bitcoin development. If Bitcoin users and investors don't trust that the
developers are working toward the unlimited success case, they can and
will revolt.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/593ed78f/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/593ed78f/attachment-0001.sig>

From lf-lists at mattcorallo.com  Thu Oct 15 01:59:24 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 15 Oct 2015 01:59:24 +0000
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <561ED55F.2000506@riseup.net>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<20151014182055.GC23875@mcelrath.org>
	<CAPkFh0uQjTijLdG=eicaotKYvPEcKqNZhqC5BmY45pYcRyhALQ@mail.gmail.com>
	<561ED55F.2000506@riseup.net>
Message-ID: <E68FE559-87CF-4146-9586-0C4B2CDEBF7A@mattcorallo.com>

Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin protocol one and should be discussed here, not on github.
I really appreciate Ittay and Emin's efforts in this space and their willingness to work with the Bitcoin community on it! It seems it still needs some tuning, but seems like if the pool-mining issues were resolved it could make block relay times irrelevant, at least.

Matt

On October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA512
>
>This (Bitcoin-NG in concept) could be done as a (issue and pull
>request process) to Bitcoin Core itself, amirite?  It seems like it
>would provide an interesting issue to open and have healthy discussion
>on both mailing list and github, adding the caveat that it would be at
>the user's option.  Thus if something like Bitcoin-NG did come to be
>it would be something more like a feature that the user could activate
>/ deactivate from within Core.  I assume it would be default off, but
>with the option to utilize.  Code would thus be available to others as
>well.  I am not saying yea or nay on it, just that it seems like this
>could be done.
>
>Some notes:
>
>Once a node generates a key block it becomes the leader.  As a leader,
>the node is allowed to generate  microblocks  at  a  set  rate
>smaller  than  a  prede>ned  maximum.  A  microblock in Bitcoin-NG
>contains  ledger  entries  and  a  header.   The  header  contains
>the  reference  to the  previous  block,  the  current  GMT  time,  a
> cryptographic  hash  of  its  ledger  entries,  and  a cryptographic
> signature  of  the  header.   The  signature  uses  the  private  key
> that  matches  the public key in the latest key block in the chain.
>For a microblock to be valid, all its entries must be valid according
>to the specification of the state machine, and the signature has to be
>valid.  However, the microblocks, it is said, don't affect the weight
>of the chain, because they do not contain proof of work.  It is
>assumed by the authors of this model that this situation is critical
>for maintaining incentives here.
>
>The questions that then begin to emerge to me are how is this
>information managed and protected?  The headers, thus containing
>reference(s) to previous block(s), current GMT time(s), cryptographic
>hash(es) of ledger entries, and cryptographic signature(s) of the
>headers, so forth, and other information.  Can the Bitcoin-NG scheme
>be designed or implemented in a manner which supports Stealth sends,
>Confidential Transactions, or similar privacy measures?  Or is this
>something which cannot be answered at this time?
>
>Emin G?n Sirer via bitcoin-dev:
>>> So it seems to me that all I need to do is figure out who the
>>> current
>> leader is,
>>> and DDoS him off the network to shut Bitcoin-NG down.
>> 
>> Good point. If NG is layered on top of Bitcoin, we'd retain all of
>> Bitcoin as is. This would confer all the benefits of Bitcoin's
>> retrospective blocks, as well as add the ability to mint
>> microblocks with low latency in between. And despite the phrase
>> "the leader," the actual leader in NG is a key, not a specific
>> node. That makes it possible to deter DDoS attacks by dynamically
>> migrating where in the network the leader is operating in response
>> to an attack. Finally, DDoS attacks against miners are already 
>> possible, but they seem rare, and I suspect it's at least partly
>> because of the success of Matt Corallo's high speed bitcoin relay
>> network. Similar defenses can apply here.
>> 
>> - egs
>> 
>> 
>> 
>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org>
>> wrote:
>> 
>>> So it seems to me that all I need to do is figure out who the
>>> current leader is, and DDoS him off the network to shut
>>> Bitcoin-NG down.
>>> 
>>> This is a significant advantage to bitcoin's ex-post-facto
>>> blocks: no one knows where the next one will come from.  The only
>>> way to shut the network down is to shut all nodes down.
>>> 
>>> Emin G?n Sirer via bitcoin-dev
>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:
>>>> Hi everyone,
>>>> 
>>>> We just released the whitepaper describing Bitcoin-NG, a new
>>>> technique
>>> for
>>>> addressing some of the scalability challenges faced by
>>>> Bitcoin.
>>> Surprisingly,
>>>> Bitcoin-NG can simultaneously increase throughput while
>>>> reducing
>>> latency, and
>>>> do so without impacting Bitcoin's open architecture or changing
>>>> its trust model. This post illustrates the core technique: 
>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/ while the
>>>> whitepaper has all the nitty gritty details: 
>>>> http://arxiv.org/abs/1510.02037
>>>> 
>>>> Fitting NG on top of the current Bitcoin blockchain is future
>>>> work that
>>> we
>>>> think is quite possible. NG is compatible with both Bitcoin as
>>>> is, as
>>> well as
>>>> Blockstream-like sidechains, and we currently are not planning
>>>> to compete commercially with either technology -- we see NG as
>>>> being complementary
>>> to both
>>>> efforts. This is pure science, published and shared with the
>>>> community to advance the state of blockchains and to help them
>>>> reach throughputs and latencies required of cutting edge
>>>> fintech applications. Perhaps it can
>>> be
>>>> adopted, or perhaps it can provide the spark of inspiration for
>>>> someone
>>> else to
>>>> come up with even better solutions.
>>>> 
>>>> We would be delighted to hear your feedback. - Ittay Eyal and
>>>> E. G?n Sirer.
>>>> 
>>>> !DSPAM:561e98cd301391127216946!
>>> 
>>>> _______________________________________________ bitcoin-dev
>>>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>> 
>>>> 
>>>> !DSPAM:561e98cd301391127216946!
>>> 
>>> -- Cheers, Bob McElrath
>>> 
>>> "For every complex problem, there is a solution that is simple,
>>> neat, and wrong." -- H. L. Mencken
>>> 
>>> 
>> 
>> 
>> 
>> _______________________________________________ bitcoin-dev mailing
>> list bitcoin-dev at lists.linuxfoundation.org 
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
>
>- -- 
>http://abis.io ~
>"a protocol concept to enable decentralization
>and expansion of a giving economy, and a new social good"
>https://keybase.io/odinn
>-----BEGIN PGP SIGNATURE-----
>
>iQEcBAEBCgAGBQJWHtVfAAoJEGxwq/inSG8C85kH/2T07oj/JM+bQcgy2kw9rtUa
>XHkMNn86kVvtaniSKQ2j+SO9q8HkUI9Rv0Pz+qbX1CyAm6Z1FTCtDKornCnxx7FW
>AJyZQSm5n40LUBIc3o2NBJvXKySTO2jpxluw0HAU8BQHSgFWwj1+vocqObDYxRCd
>YDlhGd2ITmF55TlR+9seWqRyW+gABUoS+SaxM2yZaqWFlUGyOhYCJYpIo1nfWCZi
>1F7/j0E92zu5kS5JJuRE91A4Si0LeTQPtPqXMeVm/UicdQB1a/aI0mzp6VRdm3Bo
>gE79r1sKFFgpbQcz68OzPAL3RFTm1Q/C5jcqdy6cQjgp9em/v4uOCS3TKLWlVNQ=
>=Einy
>-----END PGP SIGNATURE-----
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From dstadulis at gmail.com  Thu Oct 15 03:35:59 2015
From: dstadulis at gmail.com (Daniel Stadulis)
Date: Wed, 14 Oct 2015 20:35:59 -0700
Subject: [bitcoin-dev] Lightning Network's effect on miner fees
In-Reply-To: <CABaSBazTE5r5Xvw8M3DRF+d-Qd6KXbdW8W1E0DPmw5KzfY1j6w@mail.gmail.com>
References: <561E2B09.3090509@sky-ip.org> <561E7283.2080507@gmail.com>
	<CABaSBazTE5r5Xvw8M3DRF+d-Qd6KXbdW8W1E0DPmw5KzfY1j6w@mail.gmail.com>
Message-ID: <CAHpxFbG2AKsg=SAx_CL2mcJYzOXsZN4iodROLWBEjrXQ8zxFpg@mail.gmail.com>

It makes economic sense to include a transaction on the Lightning Network,
iff the the fee to include the transaction on the blockchain is more than
than the Time Value of Money of the encumbered funds on the Lightening
Nodes amortized across the number of users pushing funds through a LN node.

Large-value transactions are going to hit the blockchain while smaller,
predictable, closer-to-median transaction-rates transactions will go into
the Lightning Network

Blockchain: Car Purchase, House Purchase, Unexpected Medical Expense
Lightning Network: Utility Bill, Groceries, Rent, Mortgage.

> If transactions happen in a big percent offchain, and they are only
> broadcasted on the mainchain where funds are moved in or out of the
> lightning network, this means there will be less transactions on the
> mainchain

This is optimal because the network has minimized the set of
costs/externalities to the minimum necessary to conduct a series of
transactions
>  -> less fees collected by the miners.
?It's tough to make predictions, especially about the future.?
The effect on fees is going to be hard to predict.
1.) One part depends on user behavior around the dynamics of bid-side
demand of fees. I.e. If there is a health ratio of
-users who want 1-block- times but are unwilling/unable to bid up the fee
of their transactions to push out other 1-block-confirmation transactions (AKA
how firm is that fee support presently and under dynamic conditions)
to
-users who take their transactions off the blockchain to LN

2.) New classes of transactions will be possible that aren't possible today.

3.) What market effect will the financial/technical potential of 'instant'
transaction (after a network-joining-intro period) have on Bitcoin's
utility/price/adoption?

It would be elucidating if any blockchain data scientists could study the
effect of the fee market when high-volume exchanges unexpectedly halted
trading.


> What will happen when the block reward will go away?
I believe a more specific question to ask is: What will happen when there
isn't a convincing economic reason for a large majority of hashing power to
be bolstering PoW defense on the main blockchain?  Right now we have a
pretty good handle on the amount of hashing power that's pointed at
extending/defending the 'main' chain but don't have as good intel on how
much idle hashing power there is.  Idle hashing power becomes more of a
threat in market scenarios where chain-extending PoW is scarce (late-game
Bitcoin).

My humble prediction is that the necessary number of block confirmation
will go up and there were be non negligible mining power idle ready to
defend actors' preferred chain.  If this is the scenario that plays out, I
don't think it'll be very concerning;  large-value transaction that will be
on the blockchain have more flexible time-settlement tolerance (no one
needs their home-buying escrow to settle in <= 1 day) and lower-value
transaction that users want/need to be confirmed quickly will be confirmed
'instantly' over Lightning Network or another Bitcoin-anchored protocol.

P.S. I see lots of concern with respect to fee reduction directed at LN
while today there are already off-chain databases that remove fee
pressure.  Like the LN / off-chain databases or not, they will exists.

Daniel Stadulis


On Wed, Oct 14, 2015 at 8:37 AM, Bryan Bishop via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Wed, Oct 14, 2015 at 10:19 AM, Paul Sztorc via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > However, the two are also perfect compliments, as LN transactions cannot
> take place at all without periodic on-chain transactions.
>
> Additionally, lightning network hot wallets are not an ideal place to
> store large quantities of BTC and users that don't expect to be
> actively using LN should in general prefer confirmed UTXOs for
> long-term cold storage. So far the guess that I have seen floating
> around is that LN usage will at first be restricted to very tiny
> amounts of BTC in tiny hot wallets, since nobody is particularly
> interested in running large hot wallets.
>
> - Bryan
> http://heybryan.org/
> 1 512 203 0507
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/310ad764/attachment.html>

From laanwj at gmail.com  Thu Oct 15 08:18:58 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Thu, 15 Oct 2015 10:18:58 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.11.1 released
Message-ID: <20151015081858.GA27194@amethyst.visucore.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Bitcoin Core version 0.11.1 is now available from:

  <https://bitcoin.org/bin/bitcoin-core-0.11.1/>

This is a new minor version release, bringing security fixes. It is recommended
to upgrade to this version as soon as possible.

Torrent magnet link:

    magnet:?xt=urn:btih:c6dd5f10efd99d9129869bb5fbf9cc53fc07cefa&dn=bitcoin-core-0.11.1&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Fopen.demonii.com%3A1337&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F

Please report bugs using the issue tracker at github:

  <https://github.com/bitcoin/bitcoin/issues>

Upgrading and downgrading
=========================

How to Upgrade
- --------------

If you are running an older version, shut it down. Wait until it has completely
shut down (which might take a few minutes for older versions), then run the
installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or
bitcoind/bitcoin-qt (on Linux).

Downgrade warning
- ------------------

Because release 0.10.0 and later makes use of headers-first synchronization and
parallel block download (see further), the block files and databases are not
backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

* Blocks will be stored on disk out of order (in the order they are
received, really), which makes it incompatible with some tools or
other programs. Reindexing using earlier versions will also not work
anymore as a result of this.

* The block index database will now hold headers for which no block is
stored on disk, which earlier versions won't support.

If you want to be able to downgrade smoothly, make a backup of your entire data
directory. Without this your node will need start syncing (or importing from
bootstrap.dat) anew afterwards. It is possible that the data from a completely
synchronised 0.10 node may be usable in older versions as-is, but this is not
supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility. There are no
known problems when downgrading from 0.11.x to 0.10.x.

Notable changes
===============

Fix buffer overflow in bundled upnp
- ------------------------------------

Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in
the XML parser during initial network discovery.

Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/

This applies to the distributed executables only, not when building from source or
using distribution provided packages.

Additionally, upnp has been disabled by default. This may result in a lower
number of reachable nodes on IPv4, however this prevents future libupnpc
vulnerabilities from being a structural risk to the network
(see https://github.com/bitcoin/bitcoin/pull/6795).

Test for LowS signatures before relaying
- -----------------------------------------

Make the node require the canonical 'low-s' encoding for ECDSA signatures when
relaying or mining.  This removes a nuisance malleability vector.

Consensus behavior is unchanged.

If widely deployed this change would eliminate the last remaining known vector
for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side
it will block most transactions made by sufficiently out of date software.

Unlike the other avenues to change txids on transactions this
one was randomly violated by all deployed bitcoin software prior to
its discovery. So, while other malleability vectors where made
non-standard as soon as they were discovered, this one has remained
permitted. Even BIP62 did not propose applying this rule to
old version transactions, but conforming implementations have become
much more common since BIP62 was initially written.

Bitcoin Core has produced compatible signatures since a28fb70e in
September 2013, but this didn't make it into a release until 0.9
in March 2014; Bitcoinj has done so for a similar span of time.
Bitcoinjs and electrum have been more recently updated.

This does not replace the need for BIP62 or similar, as miners can
still cooperate to break transactions.  Nor does it replace the
need for wallet software to handle malleability sanely[1]. This
only eliminates the cheap and irritating DOS attack.

[1] On the Malleability of Bitcoin Transactions
Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, ?ukasz Mazurek
http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf

Minimum relay fee default increase
- -----------------------------------

The default for the `-minrelaytxfee` setting has been increased from `0.00001`
to `0.00005`.

This is necessitated by the current transaction flooding, causing
outrageous memory usage on nodes due to the mempool ballooning. This is a
temporary measure, bridging the time until a dynamic method for determining
this fee is merged (which will be in 0.12).

(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11
release notes, in which this value was suggested)

0.11.1 Change log
=================

Detailed release notes follow. This overview includes changes that affect
behavior, not code moves, refactors and string updates. For convenience in locating
the code changes and accompanying discussion, both the pull request and
git merge commit are mentioned.

- - #6438 `2531438` openssl: avoid config file load/race
- - #6439 `980f820` Updated URL location of netinstall for Debian
- - #6384 `8e5a969` qt: Force TLS1.0+ for SSL connections
- - #6471 `92401c2` Depends: bump to qt 5.5
- - #6224 `93b606a` Be even stricter in processing unrequested blocks
- - #6571 `100ac4e` libbitcoinconsensus: avoid a crash in multi-threaded environments
- - #6545 `649f5d9` Do not store more than 200 timedata samples.
- - #6694 `834e299` [QT] fix thin space word wrap line break issue
- - #6703 `1cd7952` Backport bugfixes to 0.11
- - #6750 `5ed8d0b` Recent rejects backport to v0.11
- - #6769 `71cc9d9` Test LowS in standardness, removes nuisance malleability vector.
- - #6789 `b4ad73f` Update miniupnpc to 1.9.20151008
- - #6785 `b4dc33e` Backport to v0.11: In (strCommand == "tx"), return if AlreadyHave()
- - #6412 `0095b9a` Test whether created sockets are select()able
- - #6795 `4dbcec0` net: Disable upnp by default
- - #6793 `e7bcc4a` Bump minrelaytxfee default

Credits
=======

Thanks to everyone who directly contributed to this release:

- - Adam Weiss
- - Alex Morcos
- - Casey Rodarmor
- - Cory Fields
- - fanquake
- - Gregory Maxwell
- - Jonas Schnelli
- - J Ross Nicoll
- - Luke Dashjr
- - Pavel Jan?k
- - Pavel Vasin
- - Peter Todd
- - Pieter Wuille
- - randy-waterhouse
- - Ross Nicoll
- - Suhas Daftuar
- - tailsjoin
- - ?tcDrak
- - Tom Harding
- - Veres Lajos
- - Wladimir J. van der Laan

And those who contributed additional code review and/or security research:

- - timothy on IRC for reporting the issue
- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos

As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).


-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBCgAGBQJWH2E6AAoJEHSBCwEjRsmmVMAH/0/u/4it6+MI8LCGFZWJFbTk
bZppeUIkGP4oN5XoHrPi++Mqdu+b9i/o5lmwrcZDFuA+DVzzOhTwt4dVzNP9IMey
2G3JfbDWd9lUv4DIR4GkD2CjoGVnZq3pgbHMmsWrcUGEvyl7zDYE51MKTAfljYG+
pfMEdc2LJJJ2GfM3MIXIE70i+5JW+46lqw19qnLpiOW8P9lJ0JMd6xKw6XFi25Z9
ywXloeuEHhsMkBOjhTJizv3CS7s+0LhsHMfXiryIIBWfs8laQh0aQJLELHnsYoFh
M2+RmXBMbdgbugmJBIyFnuS3kDCVNEe/uBWU6RZWSwUSwC/V3L5hBHW8R+vrq6M=
=20Vu
-----END PGP SIGNATURE-----

From laanwj at gmail.com  Thu Oct 15 08:22:19 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Thu, 15 Oct 2015 10:22:19 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.10.3 released
Message-ID: <20151015082219.GB27194@amethyst.visucore.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Bitcoin Core version 0.10.3 is now available from:

  <https://bitcoin.org/bin/bitcoin-core-0.10.3/>

This is a new minor version release, bringing security fixes and translation 
updates.

Please report bugs using the issue tracker at github:

  <https://github.com/bitcoin/bitcoin/issues>

Upgrading and downgrading
=========================

How to Upgrade
- --------------

If you are running an older version, shut it down. Wait until it has completely
shut down (which might take a few minutes for older versions), then run the
installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or
bitcoind/bitcoin-qt (on Linux).

Downgrade warning
- ------------------

Because release 0.10.0 and later makes use of headers-first synchronization and
parallel block download (see further), the block files and databases are not
backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:

* Blocks will be stored on disk out of order (in the order they are
received, really), which makes it incompatible with some tools or
other programs. Reindexing using earlier versions will also not work
anymore as a result of this.

* The block index database will now hold headers for which no block is
stored on disk, which earlier versions won't support.

If you want to be able to downgrade smoothly, make a backup of your entire data
directory. Without this your node will need start syncing (or importing from
bootstrap.dat) anew afterwards. It is possible that the data from a completely
synchronised 0.10 node may be usable in older versions as-is, but this is not
supported and may break as soon as the older version attempts to reindex.

This does not affect wallet forward or backward compatibility.

Notable changes
===============

Fix buffer overflow in bundled upnp
- ------------------------------------

Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in
the XML parser during initial network discovery.

Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/

This applies to the distributed executables only, not when building from source or
using distribution provided packages.

Additionally, upnp has been disabled by default. This may result in a lower
number of reachable nodes on IPv4, however this prevents future libupnpc
vulnerabilities from being a structural risk to the network
(see https://github.com/bitcoin/bitcoin/pull/6795).

Test for LowS signatures before relaying
- -----------------------------------------

Make the node require the canonical 'low-s' encoding for ECDSA signatures when
relaying or mining.  This removes a nuisance malleability vector.

Consensus behavior is unchanged.

If widely deployed this change would eliminate the last remaining known vector
for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side
it will block most transactions made by sufficiently out of date software.

Unlike the other avenues to change txids on transactions this
one was randomly violated by all deployed bitcoin software prior to
its discovery. So, while other malleability vectors where made
non-standard as soon as they were discovered, this one has remained
permitted. Even BIP62 did not propose applying this rule to
old version transactions, but conforming implementations have become
much more common since BIP62 was initially written.

Bitcoin Core has produced compatible signatures since a28fb70e in
September 2013, but this didn't make it into a release until 0.9
in March 2014; Bitcoinj has done so for a similar span of time.
Bitcoinjs and electrum have been more recently updated.

This does not replace the need for BIP62 or similar, as miners can
still cooperate to break transactions.  Nor does it replace the
need for wallet software to handle malleability sanely[1]. This
only eliminates the cheap and irritating DOS attack.

[1] On the Malleability of Bitcoin Transactions
Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, ?ukasz Mazurek
http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf

Minimum relay fee default increase
- -----------------------------------

The default for the `-minrelaytxfee` setting has been increased from `0.00001`
to `0.00005`.

This is necessitated by the current transaction flooding, causing
outrageous memory usage on nodes due to the mempool ballooning. This is a
temporary measure, bridging the time until a dynamic method for determining
this fee is merged (which will be in 0.12).

(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11.0
release notes, in which this value was suggested)

0.10.3 Change log
=================

Detailed release notes follow. This overview includes changes that affect external
behavior, not code moves, refactors or string updates.

- - #6186 `e4a7d51` Fix two problems in CSubnet parsing
- - #6153 `ebd7d8d` Parameter interaction: disable upnp if -proxy set
- - #6203 `ecc96f5` Remove P2SH coinbase flag, no longer interesting
- - #6226 `181771b` json: fail read_string if string contains trailing garbage
- - #6244 `09334e0` configure: Detect (and reject) LibreSSL
- - #6276 `0fd8464` Fix getbalance * 0
- - #6274 `be64204` Add option `-alerts` to opt out of alert system
- - #6319 `3f55638` doc: update mailing list address
- - #6438 `7e66e9c` openssl: avoid config file load/race
- - #6439 `255eced` Updated URL location of netinstall for Debian
- - #6412 `0739e6e` Test whether created sockets are select()able
- - #6694 `f696ea1` [QT] fix thin space word wrap line brake issue
- - #6704 `743cc9e` Backport bugfixes to 0.10
- - #6769 `1cea6b0` Test LowS in standardness, removes nuisance malleability vector.
- - #6789 `093d7b5` Update miniupnpc to 1.9.20151008
- - #6795 `f2778e0` net: Disable upnp by default
- - #6797 `91ef4d9` Do not store more than 200 timedata samples
- - #6793 `842c48d` Bump minrelaytxfee default

Credits
=======

Thanks to everyone who directly contributed to this release:

- - Adam Weiss
- - Alex Morcos
- - Casey Rodarmor
- - Cory Fields
- - fanquake
- - Gregory Maxwell
- - Jonas Schnelli
- - J Ross Nicoll
- - Luke Dashjr
- - Pavel Vasin
- - Pieter Wuille
- - randy-waterhouse
- - ?tcDrak
- - Tom Harding
- - Veres Lajos
- - Wladimir J. van der Laan

And all those who contributed additional code review and/or security research:

- - timothy on IRC for reporting the issue
- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos

As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQEcBAEBCgAGBQJWH2IgAAoJEHSBCwEjRsmm/JoIAMxv8Za87Bm+iss9grwO4Grh
59aeCZp0t0DxQR1UbRYUH6HLoT9cjRpTwfxYLJUOI0rH/BtU3wten4sLLg1BoZjI
hdxcOYb4EG4SvxfkRxwU7lllBbcQxZPsSWCCdI1g2lUOcwqQyaW1uhDoyMkHHJD6
TkvV5zle+kj80VB4c48CAEGLTR8FaXT/WhpWmEleRaCcsqT61cDqZoOCyYRMbNZZ
Olg1M9+SetGC0VGULf1eDj2pAHQn/t0UIsc2lKCUw/b4eetQl5cDOKJFfEZHvJqC
/RVt3DKEP3IZiQb0LQ64UZqe36T29UXlLzVsRygyX7AvP/LQixcNRKMbM0eGI4E=
=kbc/
-----END PGP SIGNATURE-----

From odinn.cyberguerrilla at riseup.net  Thu Oct 15 08:38:35 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Thu, 15 Oct 2015 08:38:35 +0000
Subject: [bitcoin-dev] Proposed list moderation policy and conduct
In-Reply-To: <561F04BD.6000203@openbitcoinprivacyproject.org>
References: <CADm_WcYnq5sk=wdhqx5UysyS=fu7kRUrixOJC=QfoY5np1ATmA@mail.gmail.com>
	<561F04BD.6000203@openbitcoinprivacyproject.org>
Message-ID: <561F660B.3070901@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Another point building on Justus's remarks that I'll make.... (below)

Justus Ranvier via bitcoin-dev:
> On 14/10/15 19:02, Jeff Garzik via bitcoin-dev wrote:
>> *Disclose potential conflicts*
>> 
>> 1. List discussions often involve interested parties. We expect 
>> participants to be aware when they are conflicted due to
>> employment or other projects they are involved in, and disclose
>> those interests to other project members. 2. When in doubt,
>> over-disclose. Perceived conflicts of interest are important to
>> address, so that the lists? decisions are credible even when 
>> unpopular, difficult or favorable to the interests of one group
>> over another.
> 
> Even if we assume everybody will try to approach that topic in
> good faith, I don't think it's that simple.
> 
> A term that's become popular recently is "Bitcoin maximalist", and
> it's frequently used as a slur or insult.
> 
> I honestly find that to be incomprehensible. If somebody at a Ford
> board meeting started talking about how Ford needed to make sure
> Toyota was able to sell enough cars, they wouldn't get very far by
> labelling their critics as "Ford maximalists".
> 
> Anyone who works at Ford and who isn't a Ford maximalist is in the
> wrong job.
> 
> And yet in Bitcoin, a much development is funded by companies who
> offer products which compete with Bitcoin, or at least would be in
> competition if Bitcoin were to achieve unlimited success.


One example that came to mind as I was reading this was, when I
presented an idea that I thought would be good for integration into
Bitcoin Core, explaining in various ways why I felt it would be
worthwhile to explore, I eventually had someone tell me I should go
and develop the idea first as either some sort of independent wallet,
or to demonstrate it would work via an alt.  (This has now occurred,
as a successful implementation of my micro-donations idea has been
demonstrated in an alt.)  I have to wonder, however, when I eventually
bring the micro-donation ideas back in such a form that they could
again be considered in bitcoin-dev, whether or not they would
seriously be considered, in part due to this effect which Justus
Ranvier has described in part ~ that is to say, the effect of people
engaging in the use of "maximalist" or some other label (or labels) as
limiting the extent of discourse which people can engage in.  (I
realize that wasn't exactly where you were going with this Justus, but
I'm just expanding upon the notion of how some labels and categories
can be used to suppress real discussion.)  Or, for example, if people
see me as "conflicted," and someone else doesn't, and I'm confused
about why someone would see me as "conflicted," where does that leave
one?  Quite possibly, stuck in a morass of unproductive commentary (or
maybe just being ignored by moderators who might see quite a few
people as "conflicted").

> 
> I expect this is a minority view on this list, but my position is
> that anyone who is not a Bitcoin maximalists has a potential
> conflict of interest if they're also involved in Bitcoin
> development.
> 
> I also suspect this issue is a cause of much user dissatisfaction
> with Bitcoin development. If Bitcoin users and investors don't
> trust that the developers are working toward the unlimited success
> case, they can and will revolt.
> 

Another thing to consider, although the person(s) proposing the list
moderation policy and conduct document will certainly not want to hear
it, is that the list might be better off without a policy document
that is enforced by moderators.  (An "about" section for what the list
is about, its purpose, and how people are supposed to treat each
other, is probably good... but the enforcement angle that I'm seeing
is probably a bad idea.)  What we stand for here is more than making
people comfortable while technical issues are discussed on a list.
The idea of keeping a protocol free of financial censorship, in
concept, extends to language as well, and thus people should be able
to be free in how they write and speak, even when their peers on the
list don't like what they see in others' expressions.

I recommend removal of the enforcement and moderator sections.
(Technically, there are mods for it already... I suppose... the
question is how you disclose in a "Purpose" or "About" section that
refers to this list who the mods are, or rather, what the roles are of
each person involved in a way that is minimally invasive and lets the
list flow.)

> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWH2YLAAoJEGxwq/inSG8C0aAH/AqYWgZEyRM5d1rAwjt6jNrf
Vqkd+kBCu0+0CQRXHUwJpK07IzFm5CwzSGIwri/VWT+1t/27Lk1Kt9iV4+zxOZhO
RFyo4gmJ6GApZ7N6wlIWD9R2hFdg9Q+taZHgRXiMDMqi8MOJjf5tMAXnYjbMQrSr
ntLY3ESFF0yF3ZGIIptNI4atv6UdhL2po7p+F5GMa7VZp7/e3zw96Uxmd2wkZN0R
3G5VHR2gscn3PooykpH/nhpH4mk0eFsWomuwWXAxfo2JjMhuyIXU0KnUs7ibpfPT
qtOmBW/7DI//IeRJpstAnbc22g6YOqCKrMDgNe0HgVjnmugNpY1/wRh29m+WCpA=
=felI
-----END PGP SIGNATURE-----

From odinn.cyberguerrilla at riseup.net  Thu Oct 15 08:48:18 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Thu, 15 Oct 2015 08:48:18 +0000
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <E68FE559-87CF-4146-9586-0C4B2CDEBF7A@mattcorallo.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<20151014182055.GC23875@mcelrath.org>
	<CAPkFh0uQjTijLdG=eicaotKYvPEcKqNZhqC5BmY45pYcRyhALQ@mail.gmail.com>
	<561ED55F.2000506@riseup.net>
	<E68FE559-87CF-4146-9586-0C4B2CDEBF7A@mattcorallo.com>
Message-ID: <561F6852.8060001@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

So, there could not be, for example, a user decision to activate it?
(versus not activate it)?  I'm wondering if something about this can
be boiled down to allowing the user to make a choice on the matter
(turn it on and off).  In Bitcoin-NG, the protocol as follows (as
described in a general overview of it): every 10 minutes, NG elects a
'leader,' who then vets future transactions as soon as they happen. NG
approach supposedly can run as fast as the network will allow.

If this is the case, and if NG functions without major hiccup,
shouldn't a user (of Core, for example) be able to be given the option
to choose between:

(a) being limited by the blocksize and block interval, or
(b) running out as fast as the network will allow (NG)?

The other questions I had pertained to privacy.  How would this scheme
affect users who would be trying to do things like stealth or
confidential transactions?

Matt Corallo:
> Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin
> protocol one and should be discussed here, not on github. I really
> appreciate Ittay and Emin's efforts in this space and their
> willingness to work with the Bitcoin community on it! It seems it
> still needs some tuning, but seems like if the pool-mining issues
> were resolved it could make block relay times irrelevant, at
> least.
> 
> Matt
> 
> On October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote: This (Bitcoin-NG in
> concept) could be done as a (issue and pull request process) to
> Bitcoin Core itself, amirite?  It seems like it would provide an
> interesting issue to open and have healthy discussion on both
> mailing list and github, adding the caveat that it would be at the
> user's option.  Thus if something like Bitcoin-NG did come to be it
> would be something more like a feature that the user could
> activate / deactivate from within Core.  I assume it would be
> default off, but with the option to utilize.  Code would thus be
> available to others as well.  I am not saying yea or nay on it,
> just that it seems like this could be done.
> 
> Some notes:
> 
> Once a node generates a key block it becomes the leader.  As a
> leader, the node is allowed to generate  microblocks  at  a  set
> rate smaller  than  a  prede>ned  maximum.  A  microblock in
> Bitcoin-NG contains  ledger  entries  and  a  header.   The  header
> contains the  reference  to the  previous  block,  the  current
> GMT  time,  a cryptographic  hash  of  its  ledger  entries,  and
> a cryptographic signature  of  the  header.   The  signature  uses
> the  private  key that  matches  the public key in the latest key
> block in the chain. For a microblock to be valid, all its entries
> must be valid according to the specification of the state machine,
> and the signature has to be valid.  However, the microblocks, it is
> said, don't affect the weight of the chain, because they do not
> contain proof of work.  It is assumed by the authors of this model
> that this situation is critical for maintaining incentives here.
> 
> The questions that then begin to emerge to me are how is this 
> information managed and protected?  The headers, thus containing 
> reference(s) to previous block(s), current GMT time(s),
> cryptographic hash(es) of ledger entries, and cryptographic
> signature(s) of the headers, so forth, and other information.  Can
> the Bitcoin-NG scheme be designed or implemented in a manner which
> supports Stealth sends, Confidential Transactions, or similar
> privacy measures?  Or is this something which cannot be answered at
> this time?
> 
> Emin G?n Sirer via bitcoin-dev:
>>>>> So it seems to me that all I need to do is figure out who
>>>>> the current
>>>> leader is,
>>>>> and DDoS him off the network to shut Bitcoin-NG down.
>>>> 
>>>> Good point. If NG is layered on top of Bitcoin, we'd retain
>>>> all of Bitcoin as is. This would confer all the benefits of
>>>> Bitcoin's retrospective blocks, as well as add the ability to
>>>> mint microblocks with low latency in between. And despite the
>>>> phrase "the leader," the actual leader in NG is a key, not a
>>>> specific node. That makes it possible to deter DDoS attacks
>>>> by dynamically migrating where in the network the leader is
>>>> operating in response to an attack. Finally, DDoS attacks
>>>> against miners are already possible, but they seem rare, and
>>>> I suspect it's at least partly because of the success of Matt
>>>> Corallo's high speed bitcoin relay network. Similar defenses
>>>> can apply here.
>>>> 
>>>> - egs
>>>> 
>>>> 
>>>> 
>>>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath
>>>> <bob at mcelrath.org> wrote:
>>>> 
>>>>> So it seems to me that all I need to do is figure out who
>>>>> the current leader is, and DDoS him off the network to
>>>>> shut Bitcoin-NG down.
>>>>> 
>>>>> This is a significant advantage to bitcoin's ex-post-facto 
>>>>> blocks: no one knows where the next one will come from.
>>>>> The only way to shut the network down is to shut all nodes
>>>>> down.
>>>>> 
>>>>> Emin G?n Sirer via bitcoin-dev 
>>>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:
>>>>>> Hi everyone,
>>>>>> 
>>>>>> We just released the whitepaper describing Bitcoin-NG, a
>>>>>> new technique
>>>>> for
>>>>>> addressing some of the scalability challenges faced by 
>>>>>> Bitcoin.
>>>>> Surprisingly,
>>>>>> Bitcoin-NG can simultaneously increase throughput while 
>>>>>> reducing
>>>>> latency, and
>>>>>> do so without impacting Bitcoin's open architecture or
>>>>>> changing its trust model. This post illustrates the core
>>>>>> technique: 
>>>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/
>>>>>> while the whitepaper has all the nitty gritty details: 
>>>>>> http://arxiv.org/abs/1510.02037
>>>>>> 
>>>>>> Fitting NG on top of the current Bitcoin blockchain is
>>>>>> future work that
>>>>> we
>>>>>> think is quite possible. NG is compatible with both
>>>>>> Bitcoin as is, as
>>>>> well as
>>>>>> Blockstream-like sidechains, and we currently are not
>>>>>> planning to compete commercially with either technology
>>>>>> -- we see NG as being complementary
>>>>> to both
>>>>>> efforts. This is pure science, published and shared with
>>>>>> the community to advance the state of blockchains and to
>>>>>> help them reach throughputs and latencies required of
>>>>>> cutting edge fintech applications. Perhaps it can
>>>>> be
>>>>>> adopted, or perhaps it can provide the spark of
>>>>>> inspiration for someone
>>>>> else to
>>>>>> come up with even better solutions.
>>>>>> 
>>>>>> We would be delighted to hear your feedback. - Ittay Eyal
>>>>>> and E. G?n Sirer.
>>>>>> 
>>>>>> !DSPAM:561e98cd301391127216946!
>>>>> 
>>>>>> _______________________________________________
>>>>>> bitcoin-dev mailing list
>>>>>> bitcoin-dev at lists.linuxfoundation.org 
>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>>
>>>>>>
>>>>>>
>>>>>> 
!DSPAM:561e98cd301391127216946!
>>>>> 
>>>>> -- Cheers, Bob McElrath
>>>>> 
>>>>> "For every complex problem, there is a solution that is
>>>>> simple, neat, and wrong." -- H. L. Mencken
>>>>> 
>>>>> 
>>>> 
>>>> 
>>>> 
>>>> _______________________________________________ bitcoin-dev
>>>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>
>
>>>> 
>> _______________________________________________ bitcoin-dev
>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWH2hSAAoJEGxwq/inSG8CztwH/3kaBDCpci0WMjw9gEUybI+R
320i/cbPHHFO0eEJgWOK0mpYXYiEyoZULRjvHBjTNTS7wUVNmKsnmZDx1n9X9OCS
hQc9yoSZejoulA0f/Sys++N5ku9KPYN9EFnHpmgTtV7OW7aD8L66PCtiAOhNy7WD
T75eXjQvhWCCId1C3lvIzB6X1qTdK1gGMjNHzv49FP6RJDXa7RB7ceKrHwrXQ8J/
kbQvwOjfmGbfDZb0tSvlNKT05s4CWW6TzsUdkg5QfMs16r6b1TAz55LLj7bonTNG
muFhywfBo0oLG0NbTTQTW0pmq9TF8iy8HV/4Z48Yu8bwrZ7UA1+Q7ghV3AFPHyE=
=x4Ek
-----END PGP SIGNATURE-----

From morcos at gmail.com  Thu Oct 15 13:47:33 2015
From: morcos at gmail.com (Alex Morcos)
Date: Thu, 15 Oct 2015 09:47:33 -0400
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <87pp0okeip.fsf@rustcorp.com.au>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
Message-ID: <CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>

Mark,

You seemed interested in changing BIP 68 to use 16 bits for sequence number
in both the block and time versions, making time based sequence numbers
have a resolution of 512 seconds.

I'm in favor of this approach because it leaves aside 14 bits for further
soft forks within the semantics of BIP 68.

It would be nice to know if you're planning this change, and perhaps people
can hold off on review until things are finalized.

I'd cast my "vote" against BIP 68 without this change, but am also open to
being convinced otherwise.

What are other peoples opinions on this?

On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Peter Todd <pete at petertodd.org> writes:
> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:
> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> >> writes:
> >> > However I don't think we've done a good job showing why we need to
> >> > implement this feature via nSequence.
> >>
> >> It could be implemented in other ways, but nSequence is the neatest and
> >> most straightforward I've seen.
> >>
> >> - I'm not aware of any other (even vague) proposal for its use?
> Enlighten?
> >
> > There's three that immediately come to mind:
> >
> > Gregory Maxwell has proposed it as a way of discouraging miners from
> > reorging chains, by including some of the low-order bits of a previous
> > block header in nSequence.
> >
> > A few people have proposed implementing proof-of-stake blocksize voting
> > with nSequence.
>
> Excellent, thanks!  It's good to have such ideas as a compass.  PoS
> voting seems like it won't be a problem in 5 bits.
>
> The "prevbits" idea would want more bits; naively 64 would be good, but
> I think there are some tricks we can use to make 32 work OK.  We would
> have to then split between nLocktime (if available) and multiple
> nSequence fields, and it would weaken it for some txs.
>
> There is one easy solution: change the BIP wording from:
>
> -For transactions with an nVersion of 2 or greater,
> +For transactions with an nVersion of 2,
>
> And on every tx bump, we decide whether to keep this scheme (mempool
> would enforce it always).
>
> Cheers,
> Rusty.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/11660e06/attachment.html>

From ittay.eyal at cornell.edu  Thu Oct 15 15:09:52 2015
From: ittay.eyal at cornell.edu (Ittay)
Date: Thu, 15 Oct 2015 11:09:52 -0400
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <28CC699B-4DA8-4472-A795-9505418C688A@mattcorallo.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<CABaSBaxWAsEG71FTy4SrVu94BXokeozmJ80tjsNU8ERpTfFaFA@mail.gmail.com>
	<CABT1wW=xqShMGU0+eDiNyNkr-77fQ_HnyKL87C6iGL-xq8BYVw@mail.gmail.com>
	<28CC699B-4DA8-4472-A795-9505418C688A@mattcorallo.com>
Message-ID: <CABT1wWm0QXjGAXgrBMT7w+25kcsEJnP8JZ5RSpuk3aefX45+wQ@mail.gmail.com>

Thanks, Matt. Response inline.

On Wed, Oct 14, 2015 at 2:57 PM, Matt Corallo <lf-lists at mattcorallo.com>
wrote:

> That conversation missed a second issue. Namely that there is no way to
> punish people if there is a double spend in a micro block that happens in
> key block which reorg'd away the first transaction. eg one miner mines a
> transaction in a micro block, another miner (either by not having seen the
> first yet, or being malicious - potentially the same miner) mines a key
> block which reorgs away the first micro block and then, in their first
> micro block, mines a double spend. This can happen at any time, so you end
> up having to fall back to regular full blocks for confirmation times :(.
>

If NG is to be used efficiently, microblocks are going to be very frequent,
and so such forks should occur at almost every key-block publication. Short
reorgs as you described are the norm. A user should wait before accepting a
transaction to make sure there was no key-block she missed. The wait time
is chosen according to the network propagation delay (+as much slack as the
user feels necessary). This is similar to the situation in Bitcoin when you
receive a block. To be confident that you have one confirmation you should
wait for the propagation time of the network to make sure there is no
branch you missed.

As for the malicious case: the attacker has to win the key-block, have the
to-be-inverted transaction in the previous epoch, and withhold his
key-block for a while. That being said, indeed our fraud proof scheme
doesn't catch such an event, as it is indistinguishable from benign
behavior.


> Also, Greg Slepak brought up a good point on twitter at
> https://twitter.com/taoeffect/status/654358023138209792. Noting that this
> model means users could no longer pick transactions in a mining pool which
> was set up in such a way (it could be tweaked to do so with separate
> rewards and pubkeys, but now the user can commit fraud at a much lower cost
> - their own pool reward, not the block's total reward).
>

Agreed x3: This is a good point, it is correct, and the tweak is dangerous.
Do you perceive this as a significant practical issue?


>
> On October 14, 2015 11:28:51 AM PDT, Ittay via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>>
>> On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com> wrote:
>>
>>> On Wed, Oct 14, 2015 at 1:02 PM, Emin G?n Sirer
>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> > while the whitepaper has all the nitty gritty details:
>>> >      http://arxiv.org/abs/1510.02037
>>>
>>> Taking reward compensation back by fraud proofs is not enough to fix
>>> the problems associated with double spending (such as, everyone has to
>>> wait for the "real" confirmations instead of the "possibly
>>> double-spend" confirmations). Some of this was discussed in -wizards
>>> recently:
>>> http://gnusha.org/bitcoin-wizards/2015-09-19.log
>>
>>
>> Fraud proof removes all the attacker's revenue. It's like the attacker
>> sacrifices an entire block for double spending in the current system. I
>> think Luke-Jr got it right at that discussion.
>>
>> Best,
>> Ittay
>>
>> ------------------------------
>>
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/784e0876/attachment.html>

From ittay.eyal at cornell.edu  Thu Oct 15 15:12:23 2015
From: ittay.eyal at cornell.edu (Ittay)
Date: Thu, 15 Oct 2015 11:12:23 -0400
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <561F6852.8060001@riseup.net>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<20151014182055.GC23875@mcelrath.org>
	<CAPkFh0uQjTijLdG=eicaotKYvPEcKqNZhqC5BmY45pYcRyhALQ@mail.gmail.com>
	<561ED55F.2000506@riseup.net>
	<E68FE559-87CF-4146-9586-0C4B2CDEBF7A@mattcorallo.com>
	<561F6852.8060001@riseup.net>
Message-ID: <CABT1wWnH8TeMkwwrjqvgOWYbYtLE-CneDwNpf7Py06_EvhOJRQ@mail.gmail.com>

Hi Odinn,

I guess to answer we should separate pure-NG from
the hypothetical overlay-NG that runs on top of Bitcoin.
For pure NG one still has to set a transaction bandwidth
limit due to bandwidth and storage limitations of
the individual clients. This rate can be arbitrarily high
with NG without compromising protocol security.

With overlay NG you cannot run above Bitcoin's
bandwidth because all clients must agree on the ledger,
so different clients cannot run at different rates. You
could do two things:
1. Significantly reduce observed latency (time to first
confirmation). Users get better confidence as more
miners adopt NG.
2. Increase the bandwidth once everyone is on
board.

As for privacy - I don't see why NG would change things.
Such privacy schemes are only concerned with the
transaction DAG. NG does not touch this structure. Am
I missing something?

Thanks,
Ittay


On Thu, Oct 15, 2015 at 4:48 AM, odinn <odinn.cyberguerrilla at riseup.net>
wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
> So, there could not be, for example, a user decision to activate it?
> (versus not activate it)?  I'm wondering if something about this can
> be boiled down to allowing the user to make a choice on the matter
> (turn it on and off).  In Bitcoin-NG, the protocol as follows (as
> described in a general overview of it): every 10 minutes, NG elects a
> 'leader,' who then vets future transactions as soon as they happen. NG
> approach supposedly can run as fast as the network will allow.
>
> If this is the case, and if NG functions without major hiccup,
> shouldn't a user (of Core, for example) be able to be given the option
> to choose between:
>
> (a) being limited by the blocksize and block interval, or
> (b) running out as fast as the network will allow (NG)?
>
> The other questions I had pertained to privacy.  How would this scheme
> affect users who would be trying to do things like stealth or
> confidential transactions?
>
> Matt Corallo:
> > Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin
> > protocol one and should be discussed here, not on github. I really
> > appreciate Ittay and Emin's efforts in this space and their
> > willingness to work with the Bitcoin community on it! It seems it
> > still needs some tuning, but seems like if the pool-mining issues
> > were resolved it could make block relay times irrelevant, at
> > least.
> >
> > Matt
> >
> > On October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org> wrote: This (Bitcoin-NG in
> > concept) could be done as a (issue and pull request process) to
> > Bitcoin Core itself, amirite?  It seems like it would provide an
> > interesting issue to open and have healthy discussion on both
> > mailing list and github, adding the caveat that it would be at the
> > user's option.  Thus if something like Bitcoin-NG did come to be it
> > would be something more like a feature that the user could
> > activate / deactivate from within Core.  I assume it would be
> > default off, but with the option to utilize.  Code would thus be
> > available to others as well.  I am not saying yea or nay on it,
> > just that it seems like this could be done.
> >
> > Some notes:
> >
> > Once a node generates a key block it becomes the leader.  As a
> > leader, the node is allowed to generate  microblocks  at  a  set
> > rate smaller  than  a  prede >ned  maximum.  A  microblock in
> > Bitcoin-NG contains  ledger  entries  and  a  header.   The  header
> > contains the  reference  to the  previous  block,  the  current
> > GMT  time,  a cryptographic  hash  of  its  ledger  entries,  and
> > a cryptographic signature  of  the  header.   The  signature  uses
> > the  private  key that  matches  the public key in the latest key
> > block in the chain. For a microblock to be valid, all its entries
> > must be valid according to the specification of the state machine,
> > and the signature has to be valid.  However, the microblocks, it is
> > said, don't affect the weight of the chain, because they do not
> > contain proof of work.  It is assumed by the authors of this model
> > that this situation is critical for maintaining incentives here.
> >
> > The questions that then begin to emerge to me are how is this
> > information managed and protected?  The headers, thus containing
> > reference(s) to previous block(s), current GMT time(s),
> > cryptographic hash(es) of ledger entries, and cryptographic
> > signature(s) of the headers, so forth, and other information.  Can
> > the Bitcoin-NG scheme be designed or implemented in a manner which
> > supports Stealth sends, Confidential Transactions, or similar
> > privacy measures?  Or is this something which cannot be answered at
> > this time?
> >
> > Emin G?n Sirer via bitcoin-dev:
> >>>>> So it seems to me that all I need to do is figure out who
> >>>>> the current
> >>>> leader is,
> >>>>> and DDoS him off the network to shut Bitcoin-NG down.
> >>>>
> >>>> Good point. If NG is layered on top of Bitcoin, we'd retain
> >>>> all of Bitcoin as is. This would confer all the benefits of
> >>>> Bitcoin's retrospective blocks, as well as add the ability to
> >>>> mint microblocks with low latency in between. And despite the
> >>>> phrase "the leader," the actual leader in NG is a key, not a
> >>>> specific node. That makes it possible to deter DDoS attacks
> >>>> by dynamically migrating where in the network the leader is
> >>>> operating in response to an attack. Finally, DDoS attacks
> >>>> against miners are already possible, but they seem rare, and
> >>>> I suspect it's at least partly because of the success of Matt
> >>>> Corallo's high speed bitcoin relay network. Similar defenses
> >>>> can apply here.
> >>>>
> >>>> - egs
> >>>>
> >>>>
> >>>>
> >>>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath
> >>>> <bob at mcelrath.org> wrote:
> >>>>
> >>>>> So it seems to me that all I need to do is figure out who
> >>>>> the current leader is, and DDoS him off the network to
> >>>>> shut Bitcoin-NG down.
> >>>>>
> >>>>> This is a significant advantage to bitcoin's ex-post-facto
> >>>>> blocks: no one knows where the next one will come from.
> >>>>> The only way to shut the network down is to shut all nodes
> >>>>> down.
> >>>>>
> >>>>> Emin G?n Sirer via bitcoin-dev
> >>>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:
> >>>>>> Hi everyone,
> >>>>>>
> >>>>>> We just released the whitepaper describing Bitcoin-NG, a
> >>>>>> new technique
> >>>>> for
> >>>>>> addressing some of the scalability challenges faced by
> >>>>>> Bitcoin.
> >>>>> Surprisingly,
> >>>>>> Bitcoin-NG can simultaneously increase throughput while
> >>>>>> reducing
> >>>>> latency, and
> >>>>>> do so without impacting Bitcoin's open architecture or
> >>>>>> changing its trust model. This post illustrates the core
> >>>>>> technique:
> >>>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/
> >>>>>> while the whitepaper has all the nitty gritty details:
> >>>>>> http://arxiv.org/abs/1510.02037
> >>>>>>
> >>>>>> Fitting NG on top of the current Bitcoin blockchain is
> >>>>>> future work that
> >>>>> we
> >>>>>> think is quite possible. NG is compatible with both
> >>>>>> Bitcoin as is, as
> >>>>> well as
> >>>>>> Blockstream-like sidechains, and we currently are not
> >>>>>> planning to compete commercially with either technology
> >>>>>> -- we see NG as being complementary
> >>>>> to both
> >>>>>> efforts. This is pure science, published and shared with
> >>>>>> the community to advance the state of blockchains and to
> >>>>>> help them reach throughputs and latencies required of
> >>>>>> cutting edge fintech applications. Perhaps it can
> >>>>> be
> >>>>>> adopted, or perhaps it can provide the spark of
> >>>>>> inspiration for someone
> >>>>> else to
> >>>>>> come up with even better solutions.
> >>>>>>
> >>>>>> We would be delighted to hear your feedback. - Ittay Eyal
> >>>>>> and E. G?n Sirer.
> >>>>>>
> >>>>>> !DSPAM:561e98cd301391127216946!
> >>>>>
> >>>>>> _______________________________________________
> >>>>>> bitcoin-dev mailing list
> >>>>>> bitcoin-dev at lists.linuxfoundation.org
> >>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>>>>>
> >>>>>>
> >>>>>>
> >>>>>>
> !DSPAM:561e98cd301391127216946!
> >>>>>
> >>>>> -- Cheers, Bob McElrath
> >>>>>
> >>>>> "For every complex problem, there is a solution that is
> >>>>> simple, neat, and wrong." -- H. L. Mencken
> >>>>>
> >>>>>
> >>>>
> >>>>
> >>>>
> >>>> _______________________________________________ bitcoin-dev
> >>>> mailing list bitcoin-dev at lists.linuxfoundation.org
> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>>>
> >
> >>>>
> >> _______________________________________________ bitcoin-dev
> >> mailing list bitcoin-dev at lists.linuxfoundation.org
> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >
>
> - --
> http://abis.io ~
> "a protocol concept to enable decentralization
> and expansion of a giving economy, and a new social good"
> https://keybase.io/odinn
> -----BEGIN PGP SIGNATURE-----
>
> iQEcBAEBCgAGBQJWH2hSAAoJEGxwq/inSG8CztwH/3kaBDCpci0WMjw9gEUybI+R
> 320i/cbPHHFO0eEJgWOK0mpYXYiEyoZULRjvHBjTNTS7wUVNmKsnmZDx1n9X9OCS
> hQc9yoSZejoulA0f/Sys++N5ku9KPYN9EFnHpmgTtV7OW7aD8L66PCtiAOhNy7WD
> T75eXjQvhWCCId1C3lvIzB6X1qTdK1gGMjNHzv49FP6RJDXa7RB7ceKrHwrXQ8J/
> kbQvwOjfmGbfDZb0tSvlNKT05s4CWW6TzsUdkg5QfMs16r6b1TAz55LLj7bonTNG
> muFhywfBo0oLG0NbTTQTW0pmq9TF8iy8HV/4Z48Yu8bwrZ7UA1+Q7ghV3AFPHyE=
> =x4Ek
> -----END PGP SIGNATURE-----
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/d5d9c001/attachment-0001.html>

From btcdrak at gmail.com  Thu Oct 15 16:27:43 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 15 Oct 2015 17:27:43 +0100
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
	<CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
Message-ID: <CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>

Alex,

I am sorry for not communicating more clearly. Mark and I discussed your
concerns from the last meeting and he made the change. The BIP text still
needs to be updated, but the discussed change was added to the PR, albeit
squashed making it more non-obvious. BIP68 now explicitly uses 16 bits with
a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK
and SEQUENCE_LOCKTIME_GRANULARITY in the PR
https://github.com/bitcoin/bitcoin/pull/6312.

    /* If CTxIn::nSequence encodes a relative lock-time, this mask is
     * applied to extract that lock-time from the sequence field. */
    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;

    /* In order to use the same number of bits to encode roughly the
     * same wall-clock duration, and because blocks are naturally
     * limited to occur every 600s on average, the minimum granularity
     * for time-based relative lock-time is fixed at 512 seconds.
     * Converting from CTxIn::nSequence to seconds is performed by
     * multiplying by 512 = 2^9, or equivalently shifting up by
     * 9 bits. */
    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;

I am also much happier with this last tightening up of the specification
because it removes ambiguity. 512s granularity makes sense within the
context of the 10 minute block target.

Thank you for spending so much time carefully considering this BIP and
reference implementation and please let me know if there there are any
remaining nits so we can get those addressed.





On Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Mark,
>
> You seemed interested in changing BIP 68 to use 16 bits for sequence
> number in both the block and time versions, making time based sequence
> numbers have a resolution of 512 seconds.
>
> I'm in favor of this approach because it leaves aside 14 bits for further
> soft forks within the semantics of BIP 68.
>
> It would be nice to know if you're planning this change, and perhaps
> people can hold off on review until things are finalized.
>
> I'd cast my "vote" against BIP 68 without this change, but am also open to
> being convinced otherwise.
>
> What are other peoples opinions on this?
>
> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Peter Todd <pete at petertodd.org> writes:
>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:
>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>> >> writes:
>> >> > However I don't think we've done a good job showing why we need to
>> >> > implement this feature via nSequence.
>> >>
>> >> It could be implemented in other ways, but nSequence is the neatest and
>> >> most straightforward I've seen.
>> >>
>> >> - I'm not aware of any other (even vague) proposal for its use?
>> Enlighten?
>> >
>> > There's three that immediately come to mind:
>> >
>> > Gregory Maxwell has proposed it as a way of discouraging miners from
>> > reorging chains, by including some of the low-order bits of a previous
>> > block header in nSequence.
>> >
>> > A few people have proposed implementing proof-of-stake blocksize voting
>> > with nSequence.
>>
>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS
>> voting seems like it won't be a problem in 5 bits.
>>
>> The "prevbits" idea would want more bits; naively 64 would be good, but
>> I think there are some tricks we can use to make 32 work OK.  We would
>> have to then split between nLocktime (if available) and multiple
>> nSequence fields, and it would weaken it for some txs.
>>
>> There is one easy solution: change the BIP wording from:
>>
>> -For transactions with an nVersion of 2 or greater,
>> +For transactions with an nVersion of 2,
>>
>> And on every tx bump, we decide whether to keep this scheme (mempool
>> would enforce it always).
>>
>> Cheers,
>> Rusty.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/04dcdf41/attachment.html>

From adam at cypherspace.org  Thu Oct 15 16:37:13 2015
From: adam at cypherspace.org (Adam Back)
Date: Thu, 15 Oct 2015 18:37:13 +0200
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
	<CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
	<CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
Message-ID: <CALqxMTEG-LVRA9VtYOzNMBUCK_M78Fx6ivVY9NZ8B2rfom5oKA@mail.gmail.com>

Does that pre-judge that block interval would never change from
10mins?  Eg say with IBLT or fountain codes etc and security arguments
for the current limitations of them are found, such that orphan rates
can remain low in a decentralised way with 1min blocks, then the
locktime granularity would be coarse relative to the block interval
(with 512s locktime granularity.

Adam

On 15 October 2015 at 18:27, Btc Drak via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Alex,
>
> I am sorry for not communicating more clearly. Mark and I discussed your
> concerns from the last meeting and he made the change. The BIP text still
> needs to be updated, but the discussed change was added to the PR, albeit
> squashed making it more non-obvious. BIP68 now explicitly uses 16 bits with
> a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK and
> SEQUENCE_LOCKTIME_GRANULARITY in the PR
> https://github.com/bitcoin/bitcoin/pull/6312.
>
>     /* If CTxIn::nSequence encodes a relative lock-time, this mask is
>      * applied to extract that lock-time from the sequence field. */
>     static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;
>
>     /* In order to use the same number of bits to encode roughly the
>      * same wall-clock duration, and because blocks are naturally
>      * limited to occur every 600s on average, the minimum granularity
>      * for time-based relative lock-time is fixed at 512 seconds.
>      * Converting from CTxIn::nSequence to seconds is performed by
>      * multiplying by 512 = 2^9, or equivalently shifting up by
>      * 9 bits. */
>     static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;
>
> I am also much happier with this last tightening up of the specification
> because it removes ambiguity. 512s granularity makes sense within the
> context of the 10 minute block target.
>
> Thank you for spending so much time carefully considering this BIP and
> reference implementation and please let me know if there there are any
> remaining nits so we can get those addressed.
>
>
>
>
>
> On Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Mark,
>>
>> You seemed interested in changing BIP 68 to use 16 bits for sequence
>> number in both the block and time versions, making time based sequence
>> numbers have a resolution of 512 seconds.
>>
>> I'm in favor of this approach because it leaves aside 14 bits for further
>> soft forks within the semantics of BIP 68.
>>
>> It would be nice to know if you're planning this change, and perhaps
>> people can hold off on review until things are finalized.
>>
>> I'd cast my "vote" against BIP 68 without this change, but am also open to
>> being convinced otherwise.
>>
>> What are other peoples opinions on this?
>>
>> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>
>>> Peter Todd <pete at petertodd.org> writes:
>>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:
>>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>>> >> writes:
>>> >> > However I don't think we've done a good job showing why we need to
>>> >> > implement this feature via nSequence.
>>> >>
>>> >> It could be implemented in other ways, but nSequence is the neatest
>>> >> and
>>> >> most straightforward I've seen.
>>> >>
>>> >> - I'm not aware of any other (even vague) proposal for its use?
>>> >> Enlighten?
>>> >
>>> > There's three that immediately come to mind:
>>> >
>>> > Gregory Maxwell has proposed it as a way of discouraging miners from
>>> > reorging chains, by including some of the low-order bits of a previous
>>> > block header in nSequence.
>>> >
>>> > A few people have proposed implementing proof-of-stake blocksize voting
>>> > with nSequence.
>>>
>>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS
>>> voting seems like it won't be a problem in 5 bits.
>>>
>>> The "prevbits" idea would want more bits; naively 64 would be good, but
>>> I think there are some tricks we can use to make 32 work OK.  We would
>>> have to then split between nLocktime (if available) and multiple
>>> nSequence fields, and it would weaken it for some txs.
>>>
>>> There is one easy solution: change the BIP wording from:
>>>
>>> -For transactions with an nVersion of 2 or greater,
>>> +For transactions with an nVersion of 2,
>>>
>>> And on every tx bump, we decide whether to keep this scheme (mempool
>>> would enforce it always).
>>>
>>> Cheers,
>>> Rusty.
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From morcos at gmail.com  Thu Oct 15 16:41:57 2015
From: morcos at gmail.com (Alex Morcos)
Date: Thu, 15 Oct 2015 12:41:57 -0400
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <CALqxMTEG-LVRA9VtYOzNMBUCK_M78Fx6ivVY9NZ8B2rfom5oKA@mail.gmail.com>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
	<CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
	<CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
	<CALqxMTEG-LVRA9VtYOzNMBUCK_M78Fx6ivVY9NZ8B2rfom5oKA@mail.gmail.com>
Message-ID: <CAPWm=eVRespS+FDm4zpnBSi7-UWBV7pE1x+=FubADQfVwEK9RA@mail.gmail.com>

Adam,

The remaining 14 bits can be used to soft fork in finer granularity in the
future.

Alex


On Thu, Oct 15, 2015 at 12:37 PM, Adam Back <adam at cypherspace.org> wrote:

> Does that pre-judge that block interval would never change from
> 10mins?  Eg say with IBLT or fountain codes etc and security arguments
> for the current limitations of them are found, such that orphan rates
> can remain low in a decentralised way with 1min blocks, then the
> locktime granularity would be coarse relative to the block interval
> (with 512s locktime granularity.
>
> Adam
>
> On 15 October 2015 at 18:27, Btc Drak via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > Alex,
> >
> > I am sorry for not communicating more clearly. Mark and I discussed your
> > concerns from the last meeting and he made the change. The BIP text still
> > needs to be updated, but the discussed change was added to the PR, albeit
> > squashed making it more non-obvious. BIP68 now explicitly uses 16 bits
> with
> > a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK and
> > SEQUENCE_LOCKTIME_GRANULARITY in the PR
> > https://github.com/bitcoin/bitcoin/pull/6312.
> >
> >     /* If CTxIn::nSequence encodes a relative lock-time, this mask is
> >      * applied to extract that lock-time from the sequence field. */
> >     static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;
> >
> >     /* In order to use the same number of bits to encode roughly the
> >      * same wall-clock duration, and because blocks are naturally
> >      * limited to occur every 600s on average, the minimum granularity
> >      * for time-based relative lock-time is fixed at 512 seconds.
> >      * Converting from CTxIn::nSequence to seconds is performed by
> >      * multiplying by 512 = 2^9, or equivalently shifting up by
> >      * 9 bits. */
> >     static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;
> >
> > I am also much happier with this last tightening up of the specification
> > because it removes ambiguity. 512s granularity makes sense within the
> > context of the 10 minute block target.
> >
> > Thank you for spending so much time carefully considering this BIP and
> > reference implementation and please let me know if there there are any
> > remaining nits so we can get those addressed.
> >
> >
> >
> >
> >
> > On Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >>
> >> Mark,
> >>
> >> You seemed interested in changing BIP 68 to use 16 bits for sequence
> >> number in both the block and time versions, making time based sequence
> >> numbers have a resolution of 512 seconds.
> >>
> >> I'm in favor of this approach because it leaves aside 14 bits for
> further
> >> soft forks within the semantics of BIP 68.
> >>
> >> It would be nice to know if you're planning this change, and perhaps
> >> people can hold off on review until things are finalized.
> >>
> >> I'd cast my "vote" against BIP 68 without this change, but am also open
> to
> >> being convinced otherwise.
> >>
> >> What are other peoples opinions on this?
> >>
> >> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev
> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >>>
> >>> Peter Todd <pete at petertodd.org> writes:
> >>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:
> >>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> >>> >> writes:
> >>> >> > However I don't think we've done a good job showing why we need to
> >>> >> > implement this feature via nSequence.
> >>> >>
> >>> >> It could be implemented in other ways, but nSequence is the neatest
> >>> >> and
> >>> >> most straightforward I've seen.
> >>> >>
> >>> >> - I'm not aware of any other (even vague) proposal for its use?
> >>> >> Enlighten?
> >>> >
> >>> > There's three that immediately come to mind:
> >>> >
> >>> > Gregory Maxwell has proposed it as a way of discouraging miners from
> >>> > reorging chains, by including some of the low-order bits of a
> previous
> >>> > block header in nSequence.
> >>> >
> >>> > A few people have proposed implementing proof-of-stake blocksize
> voting
> >>> > with nSequence.
> >>>
> >>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS
> >>> voting seems like it won't be a problem in 5 bits.
> >>>
> >>> The "prevbits" idea would want more bits; naively 64 would be good, but
> >>> I think there are some tricks we can use to make 32 work OK.  We would
> >>> have to then split between nLocktime (if available) and multiple
> >>> nSequence fields, and it would weaken it for some txs.
> >>>
> >>> There is one easy solution: change the BIP wording from:
> >>>
> >>> -For transactions with an nVersion of 2 or greater,
> >>> +For transactions with an nVersion of 2,
> >>>
> >>> And on every tx bump, we decide whether to keep this scheme (mempool
> >>> would enforce it always).
> >>>
> >>> Cheers,
> >>> Rusty.
> >>> _______________________________________________
> >>> bitcoin-dev mailing list
> >>> bitcoin-dev at lists.linuxfoundation.org
> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>
> >>
> >>
> >> _______________________________________________
> >> bitcoin-dev mailing list
> >> bitcoin-dev at lists.linuxfoundation.org
> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/fabd688e/attachment-0001.html>

From mark at friedenbach.org  Thu Oct 15 18:31:17 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Thu, 15 Oct 2015 11:31:17 -0700
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <CALqxMTEG-LVRA9VtYOzNMBUCK_M78Fx6ivVY9NZ8B2rfom5oKA@mail.gmail.com>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
	<CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
	<CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
	<CALqxMTEG-LVRA9VtYOzNMBUCK_M78Fx6ivVY9NZ8B2rfom5oKA@mail.gmail.com>
Message-ID: <CAOG=w-uhA+2EduF5rAHJwv7aHXd3VBAJrcxEsHh-+EF2x-u=CA@mail.gmail.com>

Adam, there is really no justification I can see to lower the interblock
interval on the Bitcoin blockchain, primarily due to the effects of network
latency. Lowering the interblock interval and raising the block size are
not equal alternatives - you can always get more throughput in bitcoin by
raising the block size than by lowering the interblock time. And that's
without considering the effect shorter intervals would have on e.g. SPV
client bandwidth or sidechain connectivity proofs. So I find it very
unlikely that such granularity would ever be needed on the Bitcoin block
chain, although if were to happen then extra bits from nSequence could be
used in a soft-fork compatible way.

However it is true that various sidechains such as Liquid will have a much
shorter interblock interval than 10min, as well as customer demand for
protocols with shorter timeouts. It would be nice if such systems did not
HAVE to resort to complex bit shifting to support more precision, and if
protocols written for bitcoin could be reused on such systems with minimal
or no modification.

To that end, it might be preferable to move the flag bit indicating use of
seconds from bit 16 to bit 23 and (by convention only) reserve bits 17..22
to provide higher granularity in a sidechain environment. This keeps the
size of a stack push to 3 bytes while also keeping sufficient room for
high-order bits of relative lock-time in a sidechain that supports shorter
block intervals.

Another alternative is to put the units flag in the least significant bit,
which has the advantage of allowing both units of lock-time to make use of
1-2 byte pushes, but the disadvantage of making lock times of 64..127
2-bytes instead of 1-byte.

Thoughts?

On Thu, Oct 15, 2015 at 9:37 AM, Adam Back via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Does that pre-judge that block interval would never change from
> 10mins?  Eg say with IBLT or fountain codes etc and security arguments
> for the current limitations of them are found, such that orphan rates
> can remain low in a decentralised way with 1min blocks, then the
> locktime granularity would be coarse relative to the block interval
> (with 512s locktime granularity.
>
> Adam
>
> On 15 October 2015 at 18:27, Btc Drak via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > Alex,
> >
> > I am sorry for not communicating more clearly. Mark and I discussed your
> > concerns from the last meeting and he made the change. The BIP text still
> > needs to be updated, but the discussed change was added to the PR, albeit
> > squashed making it more non-obvious. BIP68 now explicitly uses 16 bits
> with
> > a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK and
> > SEQUENCE_LOCKTIME_GRANULARITY in the PR
> > https://github.com/bitcoin/bitcoin/pull/6312.
> >
> >     /* If CTxIn::nSequence encodes a relative lock-time, this mask is
> >      * applied to extract that lock-time from the sequence field. */
> >     static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;
> >
> >     /* In order to use the same number of bits to encode roughly the
> >      * same wall-clock duration, and because blocks are naturally
> >      * limited to occur every 600s on average, the minimum granularity
> >      * for time-based relative lock-time is fixed at 512 seconds.
> >      * Converting from CTxIn::nSequence to seconds is performed by
> >      * multiplying by 512 = 2^9, or equivalently shifting up by
> >      * 9 bits. */
> >     static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;
> >
> > I am also much happier with this last tightening up of the specification
> > because it removes ambiguity. 512s granularity makes sense within the
> > context of the 10 minute block target.
> >
> > Thank you for spending so much time carefully considering this BIP and
> > reference implementation and please let me know if there there are any
> > remaining nits so we can get those addressed.
> >
> >
> >
> >
> >
> > On Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >>
> >> Mark,
> >>
> >> You seemed interested in changing BIP 68 to use 16 bits for sequence
> >> number in both the block and time versions, making time based sequence
> >> numbers have a resolution of 512 seconds.
> >>
> >> I'm in favor of this approach because it leaves aside 14 bits for
> further
> >> soft forks within the semantics of BIP 68.
> >>
> >> It would be nice to know if you're planning this change, and perhaps
> >> people can hold off on review until things are finalized.
> >>
> >> I'd cast my "vote" against BIP 68 without this change, but am also open
> to
> >> being convinced otherwise.
> >>
> >> What are other peoples opinions on this?
> >>
> >> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev
> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >>>
> >>> Peter Todd <pete at petertodd.org> writes:
> >>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:
> >>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> >>> >> writes:
> >>> >> > However I don't think we've done a good job showing why we need to
> >>> >> > implement this feature via nSequence.
> >>> >>
> >>> >> It could be implemented in other ways, but nSequence is the neatest
> >>> >> and
> >>> >> most straightforward I've seen.
> >>> >>
> >>> >> - I'm not aware of any other (even vague) proposal for its use?
> >>> >> Enlighten?
> >>> >
> >>> > There's three that immediately come to mind:
> >>> >
> >>> > Gregory Maxwell has proposed it as a way of discouraging miners from
> >>> > reorging chains, by including some of the low-order bits of a
> previous
> >>> > block header in nSequence.
> >>> >
> >>> > A few people have proposed implementing proof-of-stake blocksize
> voting
> >>> > with nSequence.
> >>>
> >>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS
> >>> voting seems like it won't be a problem in 5 bits.
> >>>
> >>> The "prevbits" idea would want more bits; naively 64 would be good, but
> >>> I think there are some tricks we can use to make 32 work OK.  We would
> >>> have to then split between nLocktime (if available) and multiple
> >>> nSequence fields, and it would weaken it for some txs.
> >>>
> >>> There is one easy solution: change the BIP wording from:
> >>>
> >>> -For transactions with an nVersion of 2 or greater,
> >>> +For transactions with an nVersion of 2,
> >>>
> >>> And on every tx bump, we decide whether to keep this scheme (mempool
> >>> would enforce it always).
> >>>
> >>> Cheers,
> >>> Rusty.
> >>> _______________________________________________
> >>> bitcoin-dev mailing list
> >>> bitcoin-dev at lists.linuxfoundation.org
> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>
> >>
> >>
> >> _______________________________________________
> >> bitcoin-dev mailing list
> >> bitcoin-dev at lists.linuxfoundation.org
> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/d0e24a27/attachment.html>

From odinn.cyberguerrilla at riseup.net  Thu Oct 15 18:43:43 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Thu, 15 Oct 2015 18:43:43 +0000
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CABT1wWnH8TeMkwwrjqvgOWYbYtLE-CneDwNpf7Py06_EvhOJRQ@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<20151014182055.GC23875@mcelrath.org>
	<CAPkFh0uQjTijLdG=eicaotKYvPEcKqNZhqC5BmY45pYcRyhALQ@mail.gmail.com>
	<561ED55F.2000506@riseup.net>
	<E68FE559-87CF-4146-9586-0C4B2CDEBF7A@mattcorallo.com>
	<561F6852.8060001@riseup.net>
	<CABT1wWnH8TeMkwwrjqvgOWYbYtLE-CneDwNpf7Py06_EvhOJRQ@mail.gmail.com>
Message-ID: <561FF3DF.6010008@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello, and thanks for the reply.  I don't think you are missing
anything, I'll continue to observe this thread for further details and
developments on NG generally, security, & privacy.

Ittay:
> Hi Odinn,
> 
> I guess to answer we should separate pure-NG from the hypothetical
> overlay-NG that runs on top of Bitcoin. For pure NG one still has
> to set a transaction bandwidth limit due to bandwidth and storage
> limitations of the individual clients. This rate can be arbitrarily
> high with NG without compromising protocol security.
> 
> With overlay NG you cannot run above Bitcoin's bandwidth because
> all clients must agree on the ledger, so different clients cannot
> run at different rates. You could do two things: 1. Significantly
> reduce observed latency (time to first confirmation). Users get
> better confidence as more miners adopt NG. 2. Increase the
> bandwidth once everyone is on board.
> 
> As for privacy - I don't see why NG would change things. Such
> privacy schemes are only concerned with the transaction DAG. NG
> does not touch this structure. Am I missing something?
> 
> Thanks, Ittay
> 
> 
> On Thu, Oct 15, 2015 at 4:48 AM, odinn
> <odinn.cyberguerrilla at riseup.net> wrote:
> 
> So, there could not be, for example, a user decision to activate
> it? (versus not activate it)?  I'm wondering if something about
> this can be boiled down to allowing the user to make a choice on
> the matter (turn it on and off).  In Bitcoin-NG, the protocol as
> follows (as described in a general overview of it): every 10
> minutes, NG elects a 'leader,' who then vets future transactions as
> soon as they happen. NG approach supposedly can run as fast as the
> network will allow.
> 
> If this is the case, and if NG functions without major hiccup, 
> shouldn't a user (of Core, for example) be able to be given the
> option to choose between:
> 
> (a) being limited by the blocksize and block interval, or (b)
> running out as fast as the network will allow (NG)?
> 
> The other questions I had pertained to privacy.  How would this
> scheme affect users who would be trying to do things like stealth
> or confidential transactions?
> 
> Matt Corallo:
>>>> Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin 
>>>> protocol one and should be discussed here, not on github. I
>>>> really appreciate Ittay and Emin's efforts in this space and
>>>> their willingness to work with the Bitcoin community on it!
>>>> It seems it still needs some tuning, but seems like if the
>>>> pool-mining issues were resolved it could make block relay
>>>> times irrelevant, at least.
>>>> 
>>>> Matt
>>>> 
>>>> On October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev 
>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote: This
>>>> (Bitcoin-NG in concept) could be done as a (issue and pull
>>>> request process) to Bitcoin Core itself, amirite?  It seems
>>>> like it would provide an interesting issue to open and have
>>>> healthy discussion on both mailing list and github, adding
>>>> the caveat that it would be at the user's option.  Thus if
>>>> something like Bitcoin-NG did come to be it would be
>>>> something more like a feature that the user could activate /
>>>> deactivate from within Core.  I assume it would be default
>>>> off, but with the option to utilize.  Code would thus be 
>>>> available to others as well.  I am not saying yea or nay on
>>>> it, just that it seems like this could be done.
>>>> 
>>>> Some notes:
>>>> 
>>>> Once a node generates a key block it becomes the leader.  As
>>>> a leader, the node is allowed to generate  microblocks  at  a
>>>> set rate smaller  than  a  prede >ned  maximum.  A
>>>> microblock in Bitcoin-NG contains  ledger  entries  and  a
>>>> header.   The  header contains the  reference  to the
>>>> previous  block,  the  current GMT  time,  a cryptographic
>>>> hash  of  its  ledger  entries,  and a cryptographic
>>>> signature  of  the  header.   The  signature  uses the
>>>> private  key that  matches  the public key in the latest key 
>>>> block in the chain. For a microblock to be valid, all its
>>>> entries must be valid according to the specification of the
>>>> state machine, and the signature has to be valid.  However,
>>>> the microblocks, it is said, don't affect the weight of the
>>>> chain, because they do not contain proof of work.  It is
>>>> assumed by the authors of this model that this situation is
>>>> critical for maintaining incentives here.
>>>> 
>>>> The questions that then begin to emerge to me are how is
>>>> this information managed and protected?  The headers, thus
>>>> containing reference(s) to previous block(s), current GMT
>>>> time(s), cryptographic hash(es) of ledger entries, and
>>>> cryptographic signature(s) of the headers, so forth, and
>>>> other information.  Can the Bitcoin-NG scheme be designed or
>>>> implemented in a manner which supports Stealth sends,
>>>> Confidential Transactions, or similar privacy measures?  Or
>>>> is this something which cannot be answered at this time?
>>>> 
>>>> Emin G?n Sirer via bitcoin-dev:
>>>>>>>> So it seems to me that all I need to do is figure out
>>>>>>>> who the current
>>>>>>> leader is,
>>>>>>>> and DDoS him off the network to shut Bitcoin-NG
>>>>>>>> down.
>>>>>>> 
>>>>>>> Good point. If NG is layered on top of Bitcoin, we'd
>>>>>>> retain all of Bitcoin as is. This would confer all the
>>>>>>> benefits of Bitcoin's retrospective blocks, as well as
>>>>>>> add the ability to mint microblocks with low latency in
>>>>>>> between. And despite the phrase "the leader," the
>>>>>>> actual leader in NG is a key, not a specific node. That
>>>>>>> makes it possible to deter DDoS attacks by dynamically
>>>>>>> migrating where in the network the leader is operating
>>>>>>> in response to an attack. Finally, DDoS attacks against
>>>>>>> miners are already possible, but they seem rare, and I
>>>>>>> suspect it's at least partly because of the success of
>>>>>>> Matt Corallo's high speed bitcoin relay network.
>>>>>>> Similar defenses can apply here.
>>>>>>> 
>>>>>>> - egs
>>>>>>> 
>>>>>>> 
>>>>>>> 
>>>>>>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath 
>>>>>>> <bob at mcelrath.org> wrote:
>>>>>>> 
>>>>>>>> So it seems to me that all I need to do is figure out
>>>>>>>> who the current leader is, and DDoS him off the
>>>>>>>> network to shut Bitcoin-NG down.
>>>>>>>> 
>>>>>>>> This is a significant advantage to bitcoin's
>>>>>>>> ex-post-facto blocks: no one knows where the next one
>>>>>>>> will come from. The only way to shut the network down
>>>>>>>> is to shut all nodes down.
>>>>>>>> 
>>>>>>>> Emin G?n Sirer via bitcoin-dev 
>>>>>>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:
>>>>>>>>> Hi everyone,
>>>>>>>>> 
>>>>>>>>> We just released the whitepaper describing
>>>>>>>>> Bitcoin-NG, a new technique
>>>>>>>> for
>>>>>>>>> addressing some of the scalability challenges faced
>>>>>>>>> by Bitcoin.
>>>>>>>> Surprisingly,
>>>>>>>>> Bitcoin-NG can simultaneously increase throughput
>>>>>>>>> while reducing
>>>>>>>> latency, and
>>>>>>>>> do so without impacting Bitcoin's open architecture
>>>>>>>>> or changing its trust model. This post illustrates
>>>>>>>>> the core technique: 
>>>>>>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/
>>>>>>>>>
>>>>>>>>> 
while the whitepaper has all the nitty gritty details:
>>>>>>>>> http://arxiv.org/abs/1510.02037
>>>>>>>>> 
>>>>>>>>> Fitting NG on top of the current Bitcoin blockchain
>>>>>>>>> is future work that
>>>>>>>> we
>>>>>>>>> think is quite possible. NG is compatible with
>>>>>>>>> both Bitcoin as is, as
>>>>>>>> well as
>>>>>>>>> Blockstream-like sidechains, and we currently are
>>>>>>>>> not planning to compete commercially with either
>>>>>>>>> technology -- we see NG as being complementary
>>>>>>>> to both
>>>>>>>>> efforts. This is pure science, published and shared
>>>>>>>>> with the community to advance the state of
>>>>>>>>> blockchains and to help them reach throughputs and
>>>>>>>>> latencies required of cutting edge fintech
>>>>>>>>> applications. Perhaps it can
>>>>>>>> be
>>>>>>>>> adopted, or perhaps it can provide the spark of 
>>>>>>>>> inspiration for someone
>>>>>>>> else to
>>>>>>>>> come up with even better solutions.
>>>>>>>>> 
>>>>>>>>> We would be delighted to hear your feedback. -
>>>>>>>>> Ittay Eyal and E. G?n Sirer.
>>>>>>>>> 
>>>>>>>>> !DSPAM:561e98cd301391127216946!
>>>>>>>> 
>>>>>>>>> _______________________________________________ 
>>>>>>>>> bitcoin-dev mailing list 
>>>>>>>>> bitcoin-dev at lists.linuxfoundation.org 
>>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>>>>>
>>>>>>>>>
>>>>>>>>>
>>>>>>>>>
>
>>>>>>>>> 
!DSPAM:561e98cd301391127216946!
>>>>>>>> 
>>>>>>>> -- Cheers, Bob McElrath
>>>>>>>> 
>>>>>>>> "For every complex problem, there is a solution that
>>>>>>>> is simple, neat, and wrong." -- H. L. Mencken
>>>>>>>> 
>>>>>>>> 
>>>>>>> 
>>>>>>> 
>>>>>>> 
>>>>>>> _______________________________________________
>>>>>>> bitcoin-dev mailing list
>>>>>>> bitcoin-dev at lists.linuxfoundation.org 
>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>>>
>>>>
>>>>>>>
>>>>>
>>>>>>> 
_______________________________________________ bitcoin-dev
>>>>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>
>>>>
>
>>>>> 
>> 
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWH/PfAAoJEGxwq/inSG8COLkH/3k/ZlUT2yWNYYmlN8SeU9HW
OqGW2akcHI1ObkUxW6Ljy9JCX2z34Py5c7BnpvBkiDRtAGC7bFpH1nHL5prCCxKS
Q2tjZIuu5stWkyz55fOKZ64SVASitOK7+eGhfmN+L04L+bc9BJU/ifQlU+eTH+35
cftjEFHuDClhy+P7zLPklBr62SZezPnr2kHxyV4pyGY132nKsYuB4gHAU6eI+ZeY
dFBliXXbHrQMGWH414pXz3WzpA20CNUYWpV4iJydJmU9EEM4UOaQ7YjIXBubbu6z
hDa0PYXiwvuM4VAnL7z29Q2FHbFMKmVPH01NffI6uhvpGMVZQ2cqwvhXhOS3aL8=
=4AiZ
-----END PGP SIGNATURE-----

From rusty at rustcorp.com.au  Thu Oct 15 23:18:18 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 16 Oct 2015 09:48:18 +1030
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
	motivate the change
In-Reply-To: <CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
	<CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
	<CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
Message-ID: <87oafzhgat.fsf@rustcorp.com.au>

Btc Drak <btcdrak at gmail.com> writes:
> Alex,
>
> I am sorry for not communicating more clearly. Mark and I discussed your
> concerns from the last meeting and he made the change. The BIP text still
> needs to be updated, but the discussed change was added to the PR, albeit
> squashed making it more non-obvious. BIP68 now explicitly uses 16 bits with
> a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK
> and SEQUENCE_LOCKTIME_GRANULARITY in the PR
> https://github.com/bitcoin/bitcoin/pull/6312.

I like it from a technical perspective.

>From a practical perspective: yuck.  There's currently no way to play
with bitcoind's perception of time, so that's a very long sleep to
blackbox test (which is what my lightning test script does).

So consider this YA feature request :)

Cheers,
Rusty.

From rusty at rustcorp.com.au  Fri Oct 16 01:26:14 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 16 Oct 2015 11:56:14 +1030
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
	motivate the change
In-Reply-To: <87oafzhgat.fsf@rustcorp.com.au>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
	<CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
	<CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
	<87oafzhgat.fsf@rustcorp.com.au>
Message-ID: <878u73hadl.fsf@rustcorp.com.au>

Rusty Russell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:
>>From a practical perspective: yuck.  There's currently no way to play
> with bitcoind's perception of time, so that's a very long sleep to
> blackbox test (which is what my lightning test script does).
>
> So consider this YA feature request :)
 
... Gavin just told me about setmocktime.  That's fast service!

Thanks,
Rusty.

From admin at multipool.us  Sat Oct 17 04:37:30 2015
From: admin at multipool.us (admin at multipool.us)
Date: Fri, 16 Oct 2015 21:37:30 -0700 (PDT)
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
Message-ID: <1206de5a-e807-406e-9584-305a503d78ec@googlegroups.com>

I can do better than that:

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND 
                                                                            
                            
10625 ********  20   0 41.310g 0.035t  51172 S   1.0 57.6  47:11.17 
bitcoind     

Any idea what's going on here?

$ cat /proc/10625/status|grep -i VM
VmPeak: 43647420 kB
VmSize: 43319932 kB
VmLck:        60 kB
VmPin:         0 kB
VmHWM:  38286252 kB
VmRSS:  38014300 kB
VmData: 43103812 kB
VmStk:       236 kB
VmExe:      8844 kB
VmLib:    194656 kB
VmPTE:     79932 kB
VmSwap:        0 kB


On Tuesday, October 13, 2015 at 2:56:15 PM UTC-7, Jonathan Toomim (Toomim 
Bros) wrote:
>
> I just noticed that several of my running bitcoind processes were using 
> around 3+ GB of RAM, even though the mempool itself seemed to be under 
> control.
>
> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo
> {
>     "size" : 1896,
>     "bytes" : 37341328
> }
>
> [total memory usage not shown -- I restarted bitcoind as soon as I 
> noticed, and didn't copy it down from top]
>
> 37 MB mempool, >3 GB RAM usage. Normally, when there aren't a lot of 
> unconfirmed txns floating around the network, memory usage is around 600 
> MB, so this is quite unusual.
>
> After restarting the process and letting it run for a few minutes, I get:
>
>   PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
> [###] [XXXX]     20   0 1402M  317M 49836 S  1.0  8.2  0:41.71 ./bitcoind 
> -daemon
>
> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo
> {
>     "size" : 1072,
>     "bytes" : 670000
> }
>
> 0.67 MB mempool, 317 MB RAM usage. Much more reasonable.
>
>
> Here's another node I'm running that has been online longer, before 
> restarting:
>
>   PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
> [###] [XXXX]     20   0 4961M 3540M 11080 S  2.8 45.3  8h20:11 
> bin/bitcoind -daemon
>
> XXXX at feather:~$ bin/bitcoin-cli getmempoolinfo
> {
>     "size" : 3045,
>     "bytes" : 39656126
> }
>
> 39 MB mempool, 3540 MB total memory usage. After restarting bitcoind, I 
> see:
>
> [XXXX]@feather:~$ bin/bitcoin-cli stop
> Bitcoin server stopping
> [XXXX]@feather:~$ bin/bitcoind -daemon
> Bitcoin server starting
> [XXXX]@feather:~$ sleep 10; bin/bitcoin-cli getmempoolinfo
> {
>     "size" : 39,
>     "bytes" : 47037
> }
>
>
>   PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command
> [###] [XXXX]     20   0 1640M  247M 67960 S  0.0  3.2  0:05.17 
> bin/bitcoind -daemon
>
>
>
>
> Does anybody have any guesses where we might be leaking memory, or what is 
> using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or 
> similar on my nodes. Maybe there's a leak in the minrelaytxfee code path? 
> Has anyone else seen something similar?
>
> This issue appears to happen both with Bitcoin Core 0.10.1 and with 
> Bitcoin XT 0.11B.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151016/4137feab/attachment.html>

From j at toom.im  Sun Oct 18 15:59:11 2015
From: j at toom.im (Jonathan Toomim)
Date: Sun, 18 Oct 2015 08:59:11 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <20151014093913.GB19607@amethyst.visucore.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<20151014093913.GB19607@amethyst.visucore.com>
Message-ID: <F938BD02-3D80-4E99-BD1C-490543187895@toom.im>

On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com> wrote:
> This is *most likely* the mempool, but is just not reported correctly.

I did some testing with PR #6410's better mempool reporting. The improved reporting suggests that actual in-memory usage ("usage":) by CTxMemPool is about 2.5x to 3x higher than the serialized transaction sizes ("bytes":). The excess memory usage that I'm seeing is on the order of 100x higher than the mempool "bytes": value. As such, I think it's unlikely that this is the mempool, or at least not normal/correct mempool behavior.

Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm guessing his bitcoind has been running longer than any of mine. His server definitely has more RAM. I don't know which email list he is subscribed to (probably XT), so I'm sharing it with both lists to make sure you're all aware of how big an issue this can be.

> In the meantime you can mitigate the mempool growth by setting `-mintxfee`, see
> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding

I have mintxfee and minrelaytxfee set to about 0.00003, which is high enough to exclude essentially all of the of the 14700-14800 byte flood transactions. My nodes' mempools only contain about one or two blocks' worth of transactions. So I don't think this is correct either.



Some additional notes on this issue:

1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a Core bitcoind process (commit d78a880) overnight with no mining connected to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around 400 MB of RSS and the mempool was at around "bytes":10MB, "usage": 25MB. I ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes, and RSS climbed to 1180 MB. An hour after that with more getblocktemplates, and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.] getmempoolinfo is still showing "usage" around 25MB or less.

I'll do some more testing with this and see if I can make it repeatable, and record the results more carefully. Expect a follow-up from me in a day or two.

2. valgrind did not show anything super promising. It did report this:

==6880== LEAK SUMMARY:
==6880==    definitely lost: 0 bytes in 0 blocks
==6880==    indirectly lost: 0 bytes in 0 blocks
==6880==      possibly lost: 288 bytes in 1 blocks
==6880==    still reachable: 10,552 bytes in 39 blocks
==6880==         suppressed: 0 bytes in 0 blocks
(Bitcoin Core commit d78a880)

and this:
==6778== LEAK SUMMARY:
==6778==    definitely lost: 0 bytes in 0 blocks
==6778==    indirectly lost: 0 bytes in 0 blocks
==6778==      possibly lost: 320 bytes in 1 blocks
==6778==    still reachable: 10,080 bytes in 32 blocks
==6778==         suppressed: 0 bytes in 0 blocks
(Bitcoin XT commit fe446d)

I haven't found anything in there yet that I think would produce the multi-GB memory usage after running for a few days, but I could be missing it. Email me if you want the full log.

I did not try running getblocktemplate while valgrind was running. I'll have to try that. I also have not let valgrind run for more than an hour.



P.S.: Sorry for all the cross-post confusion and consequent flamewar fallout. While it's probably too late for this thread, I'll make sure to post in a manner that keeps the threads clearly separate in the future (e.g. different subject lines).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151018/b7685007/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151018/b7685007/attachment.sig>

From jtimon at jtimon.cc  Mon Oct 19 10:43:05 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 19 Oct 2015 12:43:05 +0200
Subject: [bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to
 motivate the change
In-Reply-To: <878u73hadl.fsf@rustcorp.com.au>
References: <20151003143056.GA27942@muck> <87lhbgn4fa.fsf@rustcorp.com.au>
	<20151008174120.GA9291@muck> <87pp0okeip.fsf@rustcorp.com.au>
	<CAPWm=eUR1fo4iVX=-J7mO34LvT6akRy5=Cxjn7j64PBn+A_oGQ@mail.gmail.com>
	<CADJgMzsvdG2iE=FhYrgKve_JxtMjFVOS4Gx-0Q8GnqDYF_-qOw@mail.gmail.com>
	<87oafzhgat.fsf@rustcorp.com.au> <878u73hadl.fsf@rustcorp.com.au>
Message-ID: <CABm2gDpGUgK5UMqfsZZBfyuxs4hb+N1Y23if_J8EmXisAqiRUA@mail.gmail.com>

On Fri, Oct 16, 2015 at 3:26 AM, Rusty Russell via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> ... Gavin just told me about setmocktime.  That's fast service!

Once more functions (specially consensus-critical functions) take
nTime explicitly as parameter instead of relying on the
library-unfriendly GetAdjustedTime(), then SetMockTime() will be less
necessary for testing. For example, see
https://github.com/jtimon/bitcoin/commit/88a35548518a27c7d24efe064e1bf4e5b3029578#diff-524ba4b43aa70d393ef51ab42a6d25f2L52

From g1liusbitcoin at gmail.com  Mon Oct 19 13:20:15 2015
From: g1liusbitcoin at gmail.com (G1lius Caesar)
Date: Mon, 19 Oct 2015 15:20:15 +0200
Subject: [bitcoin-dev] Bitcoin dev IRC meeting in layman's terms (2015-10-15)
Message-ID: <CAHK+0KQP8WrqOWW2Dn7GWSXpXke+85bdUh+qvKHceohhQpwz5g@mail.gmail.com>

Once again my attempt to summerize and explain the weekly bitcoin developer
meeting in layman's terms.
Link to last weeks summerization (
https://www.reddit.com/r/Bitcoin/comments/3o7bi6/bitcoin_dev_meeting_in_laymans_terms_2015108/
)
Link to this weeks on reddit:
https://www.reddit.com/r/Bitcoin/comments/3pcinz/bitcoin_dev_irc_meeting_in_laymans_terms_20151015/

*Disclaimer*

Please bear in mind I'm not a developer and I'd have problems coding "hello
world!", so some things might be incorrect or plain wrong.
Like any other write-up it likely contains personal biases, although I try
to stay as neutral as I can.
There are no decisions being made in these meetings, so if I say "everyone
agrees" this means everyone present in the meeting, that's not consensus,
but since a fair amount of devs are present it's a good representation.
The dev IRC and mailinglist are for bitcoin development purposes. If you
have not contributed actual code to a bitcoin-implementation, this is
probably not the place you want to reach out to. There are many places to
discuss things that the developers read, including this sub-reddit.


link to this week logs
http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/15#l1444935660.0
Meeting minutes by meetbot
http://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-15-19.01.html


Main topics discussed where:
Mempool limiting
sendheaders BIP
versionbits
dev/discuss list policy
CHECKSEQUENCEVERIFY


**Mempool limiting**

- background

When a transaction is relayed across the network it is held by the nodes in
memory, until it gets into a block. All these transactions that sit in
memory are called the memorypool or mempool for short.
Like we could see during the spam-attack if there's a big back-log of
transactions that couldn't make it in the blockchain this mempool can get
pretty big resulting in nodes crashing.

To stop this from happening devs are trying to find a way to limit this
mempool, so a mechanism to reject and/or remove transactions from the
mempool. The hard part here is to make it so nodes can't be attacked by
abusing this mechanism.
So far the devs are going with TheBlueMatt's proposal of throwing away the
cheapest txn and setting the min relay fee to it
https://github.com/bitcoin/bitcoin/pull/6722


- meeting comments

While testing, sipa encountered transactions that took 200ms to be accepted
into the mempool.
As it's the first time he has benchmarked this and the pull-request
shouldn't make an impact on these times it likely doesn't have anything to
do with this. However, such times are bad either way.
The average time in sipa's tests is 4ms. (After the meeting Morcos did some
benchmarking (
https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148874040 ) and
confirmed it was not specific to this PR, and pointed out the outliers come
from CheckInputs and HaveInputs (as you might guess, having to do with
checking the inputs)
Question on why we should revert the minrelay (minimum fee for nodes to
relay a transaction) back to 1000 (it has been set to 5000 to quick-fix the
mempool issues), sipa thinks it should be floating as well or the dust
limit becomes ineffective.


- meeting conclusion

Review PR 6722 Limit mempool by throwing away the cheapest txn and setting
min relay fee to it https://github.com/bitcoin/bitcoin/pull/6722
Morcos/sipa will do some more benchmarks and comment on the PR ( morcos'
benchmark results
https://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148874040 )


**sendheaders BIP**

- background

send headers BIP
https://github.com/sdaftuar/bips/blob/add-sendheaders/bip-sendheaders.mediawiki
Copy/paste from the BIP:
Since the introduction of "headers-first" downloading of blocks in 0.10,
blocks will not be processed unless they are able to connect to a (valid)
headers chain. Consequently, block relay generally works as follows:

1. A node (N) announces the new tip with an "inv" message, containing the
block hash
2. A peer (P) responds to the "inv" with a "getheaders" message (to request
headers up to the new tip) and a "getdata" message for the new tip itself
3. N responds with a "headers" message (with the header for the new block
along with any preceding headers unknown to P) and a "block" message
containing the new block
However, in the case where a new block is being announced that builds on
the tip, it would be generally more efficient if the node N just announced
the block header for the new block, rather than just the block hash, and
saved the peer from generating and transmitting the getheaders message (and
the required block locator).



- meeting comments

Question on how to move forward. How to let the nodes know you want the
blockheader instead of the blockhash.
Options:
Extend the version message.
Have an "options" message that can send flags.
Send a "sendheaders" message early when connecting so the way peers want
their block announcement is immediately known.
Send a "sendheaders" message at any time, changing the way peers want their
block announcement from hashes to headers.

No one likes to extend the version message further.
There's no strong advantage to have an "options" message over a
"sendheaders" message.
Having the message being sent early on might be too constraining. Possible
usecase from morcos: "its entirely possible some future optimization may
say, i want to send sendheaders to these peers b/c they announce a lot of
new stuff to me and not these others b/c they don't".
Most people like this to be enable-only, so no message to get back to
receiving blockhashes. Which is how the BIP was drafted.


-meeting conclusion

sdaftuar does a pull-request for the BIP to get a number assigned and
proceeds with the BIP as drafted.



**versionbits**

- background

BIP 9 https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki
Currently softforks have been done by the isSuperMajority mechanism,
meaning when 95% of the last X blocks has a version number higher than Y
the fork is deployed.
A new way of doing this is currently being worked on and that uses all bits
of the version number, appropriately being called versionbits. So instead
of a fork happening when the version is larger than (for example)
00000000011 (3), a fork happens when (for example) the 3rd bit is up (so
00100000011).
This way softforks can be deployed simultaneous and independant of each
other.

- meeting comments

copy/paste from IRC, since I don't know what this specifically means:
CodeShark: so right now it's just a unit that implements the versionbits
logic but does not demonstrate its usage
I thought it would be better to actually integrate in a separate PR, but I
can add a demonstration
sipa: separate commit, same PR - i think we need something that's mergable
as a whole, to be able to see whether the whole thing easily backports

Codeshark (who's implementing versionbits) had some more remarks but no one
present had seemed to reviewed it, so not much use in discussing things
further.


- meeting conclusion

review versionbits implementation
https://github.com/bitcoin/bitcoin/pull/6816


**dev/discuss list policy**

- background

The bitcoin-dev mailing list is intented for technical discussions only.
There's things that don't belong there but need to be discussed anyway.
Now this is done in bitcoin-dev, but the volume of this is getting too big.

There's recently also an influx of really inappropriate posts, level
kindergarden
https://www.mail-archive.com/bitcoin-dev at lists.linuxfoundation.org/msg02539.html.

For the things that don't belong on bitcoin-dev, but need to be discussed
anyway there's a new list being created namely bitcoin-discuss as well as
clear policies and moderation for both.

- meeting comments

Bitcoin-discuss was created, but the admin password wasn't distributed to
jgarzik who's willing to guide the moderatation.
Separate moderation-proposals have been done meanwhile.
People just want it to move on.

- meeting conclusion

Since none of the people who proposed a moderation-scheme are present we'll
let them discuss it among each other and post their decisions publicly.


**CHECKSEQUENCEVERIFY**

- background

CheckLockTimeVerify (CLTV) repurposes the nSequence field (nSequence are 4
bytes intended for sequencing time-locked transactions, but this never got
used). However, there's no way use these values in a bitcoin script.
CheckSequenceVerify (CSV) makes this field accessible to bitcoin scripts.

- meeting comments

CLTV is pretty much done.
Check to see maaku moving one of the bits to allow for other
implementations to have better granularity has any objections.
As long as we're using as few bits as possible the exact semantics are less
important for most people.
sipa points out a possible bug (
https://github.com/bitcoin/bitcoin/pull/6312#discussion_r41899674 ) that
influences the wallet.
CSV is not on target for the end of of the month, although a lot of work
and progress has been made.



- meeting conclusion

Review and ACK/NACK of 6312 BIP-68: Mempool-only sequence number constraint
verification https://github.com/bitcoin/bitcoin/pull/6312
Review and ACK/NACK of 6566 BIP-113: Mempool-only median time-past as
endpoint for lock-time calculations
https://github.com/bitcoin/bitcoin/pull/6566


**Participants**

wumpus     Wladimir J. van der Laan
sipa       Pieter Wuille
btcdrak    btcdrak
gmaxwell   Gregory Maxwell
morcos     Alex Morcos
maaku      Mark Friedenbach
CodeShark  Eric Lombrozo
BlueMatt   Matt Corallo
sdaftuar   Suhas Daftuar
warren     Warren Togami
GreenIsMyPepper  Joseph Poon
davec      Dave Collins
cfields    Cory Fields
jonasschnelli   Jonas Schnelli
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/c7575389/attachment.html>

From decker.christian at gmail.com  Mon Oct 19 14:01:04 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 19 Oct 2015 14:01:04 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
Message-ID: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>

After spending some more time on the normalized transaction ID proposal and
reworking it to be a soft-fork (thanks sipa for helping me figuring out
how), I'd like to propose the BIP again.

As with the previous version, which was using a hard-fork, the normalized
transaction ID is computed only considering the non-malleable parts of a
transaction, i.e., stripping the signatures before computing the hash of
the transaction. This ensures that if a transaction is modified, either by
a third party fishing transactions from the network and re-injecting
modified versions or by one of the signers re-signing it, any transaction
that builds on top of it still remains valid. Furthermore it allows the use
of template transactions, unsigned transactions upon which further
transaction can be built before signing the template transaction and
locking the contract.

Unlike the previous proposal, this is a softfork proposal that redefines
OP_NOP4 with an extensible and parameterized version of the signature
checking opcodes, called OP_CHECKSIGEX. Among other things the parameters
allow to specify that an output with an OP_CHECKSIGEX is to be referenced
by the normalized transaction ID that created it, instead of the instance
transaction ID containing malleable signatures. This BIP uses the
normalized transaction IDs exclusively while signing or checking
signatures, they are not used in any network level message as the previous
version would have done, hence there is no change at network level and old
clients should be able to exchange transactions as before and blocks still
reference the transaction instances.

The proposal is implemented (see below), by computing the normalized
transaction ID when adding them to the UTXO and storing them along with the
coin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and
OP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into
how to best refactor the common functionality into reusable blocks. And the
annotating incoming transactions with their normalized inputs is a bit
cumbersome, maye somebody has some pointers here as well?

BIP Pull request: https://github.com/bitcoin/bips/pull/224
Implementation: https://github.com/cdecker/bitcoin/commits/normtx

I think in the discussion of my previous proposal, most of you welcomed the
introduction of normalized transaction IDs, were it not for the hardfork. I
hope this proposal adresses the previous concerns and that we can move
forward in adding the normalized transaction IDs to the bitcoin protocol.
That being said, I'm always open to suggestions :-)

Regards,
Christian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/2ed7395d/attachment-0001.html>

From tier.nolan at gmail.com  Mon Oct 19 15:23:53 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Mon, 19 Oct 2015 16:23:53 +0100
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
Message-ID: <CAE-z3OUrM=0XsdfdU2d9h6uhCh9vP83X-OZR8NyAYsvYuE1vtg@mail.gmail.com>

On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> As with the previous version, which was using a hard-fork, the normalized
> transaction ID is computed only considering the non-malleable parts of a
> transaction, i.e., stripping the signatures before computing the hash of
> the transaction.
> <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>


Is this proposal recursive?


*Coinbase transaction *

* n-txid = txid


*Non-coinbase transactions*
* replace sigScripts with empty strings
* replace txids in TxIns with n-txid for parents

The 2nd step is recursive starting from the coinbases.

In effect, the rule is that txids are what they would have been if n-txids
had been used right from the start.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/c7c17563/attachment.html>

From admin at multipool.us  Mon Oct 19 19:17:14 2015
From: admin at multipool.us (Multipool Admin)
Date: Mon, 19 Oct 2015 12:17:14 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <F938BD02-3D80-4E99-BD1C-490543187895@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<20151014093913.GB19607@amethyst.visucore.com>
	<F938BD02-3D80-4E99-BD1C-490543187895@toom.im>
Message-ID: <CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>

My nodes are continuously running getblocktemplate and getinfo, and I also
suspected the issue is in either gbt or the rpc server.

The instance only takes a few hours to get up to that memory usage.
On Oct 18, 2015 8:59 AM, "Jonathan Toomim via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com>
> wrote:
>
> This is *most likely* the mempool, but is just not reported correctly.
>
>
> I did some testing with PR #6410's better mempool reporting. The improved
> reporting suggests that actual in-memory usage ("usage":) by CTxMemPool is
> about 2.5x to 3x higher than the serialized transaction sizes ("bytes":).
> The excess memory usage that I'm seeing is on the order of 100x higher than
> the mempool "bytes": value. As such, I think it's unlikely that this is the
> mempool, or at least not normal/correct mempool behavior.
>
> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm
> guessing his bitcoind has been running longer than any of mine. His server
> definitely has more RAM. I don't know which email list he is subscribed to
> (probably XT), so I'm sharing it with both lists to make sure you're all
> aware of how big an issue this can be.
>
> In the meantime you can mitigate the mempool growth by setting
> `-mintxfee`, see
>
> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding
>
>
> I have mintxfee and minrelaytxfee set to about 0.00003, which is high
> enough to exclude essentially all of the of the 14700-14800 byte flood
> transactions. My nodes' mempools only contain about one or two blocks'
> worth of transactions. So I don't think this is correct either.
>
>
>
> Some additional notes on this issue:
>
> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a
> Core bitcoind process (commit d78a880) overnight with no mining connected
> to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around
> 400 MB of RSS and the mempool was at around "bytes":10MB, "usage": 25MB. I
> ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around
> 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes,
> and RSS climbed to 1180 MB. An hour after that with more getblocktemplates,
> and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.]
> getmempoolinfo is still showing "usage" around 25MB or less.
>
> I'll do some more testing with this and see if I can make it repeatable,
> and record the results more carefully. Expect a follow-up from me in a day
> or two.
>
> 2. valgrind did not show anything super promising. It did report this:
>
> ==6880== LEAK SUMMARY:
> ==6880==    definitely lost: 0 bytes in 0 blocks
> ==6880==    indirectly lost: 0 bytes in 0 blocks
> ==6880==      possibly lost: 288 bytes in 1 blocks
> ==6880==    still reachable: 10,552 bytes in 39 blocks
> ==6880==         suppressed: 0 bytes in 0 blocks
> (Bitcoin Core commit d78a880)
>
> and this:
> ==6778== LEAK SUMMARY:
> ==6778==    definitely lost: 0 bytes in 0 blocks
> ==6778==    indirectly lost: 0 bytes in 0 blocks
> ==6778==      possibly lost: 320 bytes in 1 blocks
> ==6778==    still reachable: 10,080 bytes in 32 blocks
> ==6778==         suppressed: 0 bytes in 0 blocks
> (Bitcoin XT commit fe446d)
>
> I haven't found anything in there yet that I think would produce the
> multi-GB memory usage after running for a few days, but I could be missing
> it. Email me if you want the full log.
>
> I did not try running getblocktemplate while valgrind was running. I'll
> have to try that. I also have not let valgrind run for more than an hour.
>
>
>
> P.S.: Sorry for all the cross-post confusion and consequent flamewar
> fallout. While it's probably too late for this thread, I'll make sure to
> post in a manner that keeps the threads clearly separate in the future
> (e.g. different subject lines).
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/e7eae196/attachment.html>

From decker.christian at gmail.com  Mon Oct 19 19:28:49 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 19 Oct 2015 19:28:49 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CAE-z3OUrM=0XsdfdU2d9h6uhCh9vP83X-OZR8NyAYsvYuE1vtg@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<CAE-z3OUrM=0XsdfdU2d9h6uhCh9vP83X-OZR8NyAYsvYuE1vtg@mail.gmail.com>
Message-ID: <CALxbBHV1rwzjrYO5j0hRh1RW51wvt27AHCmN5kvj-EasqgM1+A@mail.gmail.com>

Yes, this has been pointed out in the PR as well. Transactions inputs must
also be normalized by replacing malleable hashes with the normalized
hashes. I will fix the spec and the implementation to reflect this :-)

Regards,
Christian

On Mon, Oct 19, 2015 at 5:24 PM Tier Nolan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> As with the previous version, which was using a hard-fork, the normalized
>> transaction ID is computed only considering the non-malleable parts of a
>> transaction, i.e., stripping the signatures before computing the hash of
>> the transaction.
>> <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>
>
> Is this proposal recursive?
>
>
> *Coinbase transaction *
>
> * n-txid = txid
>
>
> *Non-coinbase transactions*
> * replace sigScripts with empty strings
> * replace txids in TxIns with n-txid for parents
>
> The 2nd step is recursive starting from the coinbases.
>
> In effect, the rule is that txids are what they would have been if n-txids
> had been used right from the start.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/5df79d73/attachment.html>

From s7r at sky-ip.org  Mon Oct 19 22:22:46 2015
From: s7r at sky-ip.org (s7r)
Date: Tue, 20 Oct 2015 01:22:46 +0300
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CAE-z3OUrM=0XsdfdU2d9h6uhCh9vP83X-OZR8NyAYsvYuE1vtg@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<CAE-z3OUrM=0XsdfdU2d9h6uhCh9vP83X-OZR8NyAYsvYuE1vtg@mail.gmail.com>
Message-ID: <56256D36.5050801@sky-ip.org>

So what exactly is used to create the normalized txid (sha256 hash of
what data)? I've read in the linked BIP draft that it will strip the
'malleable parts' but didn't understand what exactly will be used to
calculate the normalized transactions ids and how will the change apply
retro-active for the transactions so deep buried in the blockchain?

Pubkeys (addresses) can be reused infinitely so what guarantees us
unique normalized txids all the time and protection against replay
attacks? The question is not if this issue is covered or not, I know it
is, I am just asking how, in simpler terms.

SCRIPT_CHECKSIGEX_NORMALIZE could be explained better in the document.

Will it also fix > third level malleability (a tx which spends from
another unconfirmed tx which spends from yet another unconfirmed tx)?


On 10/19/2015 6:23 PM, Tier Nolan via bitcoin-dev wrote:
> On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
>     As with the previous version, which was using a hard-fork, the
>     normalized transaction ID is computed only considering the
>     non-malleable parts of a transaction, i.e., stripping the signatures
>     before computing the hash of the transaction.
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> 
> 
> Is this proposal recursive? 
> 
> *Coinbase transaction
> *
> 
> * n-txid = txid
> 
> *Non-coinbase transactions
> *
> * replace sigScripts with empty strings
> * replace txids in TxIns with n-txid for parents
> 
> The 2nd step is recursive starting from the coinbases.
> 
> In effect, the rule is that txids are what they would have been if
> n-txids had been used right from the start.
> 
> 

From admin at multipool.us  Mon Oct 19 22:24:11 2015
From: admin at multipool.us (Multipool Admin)
Date: Mon, 19 Oct 2015 15:24:11 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<20151014093913.GB19607@amethyst.visucore.com>
	<F938BD02-3D80-4E99-BD1C-490543187895@toom.im>
	<CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>
Message-ID: <CAP3QyGLGeDc2qfzmGxmQcTLSJzXL0_uQrY4ab7EjBbQS2fxgug@mail.gmail.com>

I should also mention that this is definitely not an attack coming from
connected nodes.  My node experiencing the issue is only connected to 3
other nodes, all of which I control (via connect=).

--Adam

On Mon, Oct 19, 2015 at 12:17 PM, Multipool Admin <admin at multipool.us>
wrote:

> My nodes are continuously running getblocktemplate and getinfo, and I also
> suspected the issue is in either gbt or the rpc server.
>
> The instance only takes a few hours to get up to that memory usage.
> On Oct 18, 2015 8:59 AM, "Jonathan Toomim via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com>
>> wrote:
>>
>> This is *most likely* the mempool, but is just not reported correctly.
>>
>>
>> I did some testing with PR #6410's better mempool reporting. The improved
>> reporting suggests that actual in-memory usage ("usage":) by CTxMemPool is
>> about 2.5x to 3x higher than the serialized transaction sizes ("bytes":).
>> The excess memory usage that I'm seeing is on the order of 100x higher than
>> the mempool "bytes": value. As such, I think it's unlikely that this is the
>> mempool, or at least not normal/correct mempool behavior.
>>
>> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm
>> guessing his bitcoind has been running longer than any of mine. His server
>> definitely has more RAM. I don't know which email list he is subscribed to
>> (probably XT), so I'm sharing it with both lists to make sure you're all
>> aware of how big an issue this can be.
>>
>> In the meantime you can mitigate the mempool growth by setting
>> `-mintxfee`, see
>>
>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding
>>
>>
>> I have mintxfee and minrelaytxfee set to about 0.00003, which is high
>> enough to exclude essentially all of the of the 14700-14800 byte flood
>> transactions. My nodes' mempools only contain about one or two blocks'
>> worth of transactions. So I don't think this is correct either.
>>
>>
>>
>> Some additional notes on this issue:
>>
>> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a
>> Core bitcoind process (commit d78a880) overnight with no mining connected
>> to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around
>> 400 MB of RSS and the mempool was at around "bytes":10MB, "usage": 25MB. I
>> ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around
>> 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes,
>> and RSS climbed to 1180 MB. An hour after that with more getblocktemplates,
>> and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.]
>> getmempoolinfo is still showing "usage" around 25MB or less.
>>
>> I'll do some more testing with this and see if I can make it repeatable,
>> and record the results more carefully. Expect a follow-up from me in a day
>> or two.
>>
>> 2. valgrind did not show anything super promising. It did report this:
>>
>> ==6880== LEAK SUMMARY:
>> ==6880==    definitely lost: 0 bytes in 0 blocks
>> ==6880==    indirectly lost: 0 bytes in 0 blocks
>> ==6880==      possibly lost: 288 bytes in 1 blocks
>> ==6880==    still reachable: 10,552 bytes in 39 blocks
>> ==6880==         suppressed: 0 bytes in 0 blocks
>> (Bitcoin Core commit d78a880)
>>
>> and this:
>> ==6778== LEAK SUMMARY:
>> ==6778==    definitely lost: 0 bytes in 0 blocks
>> ==6778==    indirectly lost: 0 bytes in 0 blocks
>> ==6778==      possibly lost: 320 bytes in 1 blocks
>> ==6778==    still reachable: 10,080 bytes in 32 blocks
>> ==6778==         suppressed: 0 bytes in 0 blocks
>> (Bitcoin XT commit fe446d)
>>
>> I haven't found anything in there yet that I think would produce the
>> multi-GB memory usage after running for a few days, but I could be missing
>> it. Email me if you want the full log.
>>
>> I did not try running getblocktemplate while valgrind was running. I'll
>> have to try that. I also have not let valgrind run for more than an hour.
>>
>>
>>
>> P.S.: Sorry for all the cross-post confusion and consequent flamewar
>> fallout. While it's probably too late for this thread, I'll make sure to
>> post in a manner that keeps the threads clearly separate in the future
>> (e.g. different subject lines).
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/aaf129a5/attachment.html>

From hearn at vinumeris.com  Tue Oct 20 10:12:12 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Tue, 20 Oct 2015 12:12:12 +0200
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<20151014093913.GB19607@amethyst.visucore.com>
	<F938BD02-3D80-4E99-BD1C-490543187895@toom.im>
	<CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>
Message-ID: <CA+w+GKTU6C7KKFx9dDd_--s1DQCO15n=034Lku2-kTYKf96XYw@mail.gmail.com>

OK, then running under Valgrind whilst sending gbt RPCs would be the next
step.

On Mon, Oct 19, 2015 at 9:17 PM, Multipool Admin <admin at multipool.us> wrote:

> My nodes are continuously running getblocktemplate and getinfo, and I also
> suspected the issue is in either gbt or the rpc server.
>
> The instance only takes a few hours to get up to that memory usage.
> On Oct 18, 2015 8:59 AM, "Jonathan Toomim via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com>
>> wrote:
>>
>> This is *most likely* the mempool, but is just not reported correctly.
>>
>>
>> I did some testing with PR #6410's better mempool reporting. The improved
>> reporting suggests that actual in-memory usage ("usage":) by CTxMemPool is
>> about 2.5x to 3x higher than the serialized transaction sizes ("bytes":).
>> The excess memory usage that I'm seeing is on the order of 100x higher than
>> the mempool "bytes": value. As such, I think it's unlikely that this is the
>> mempool, or at least not normal/correct mempool behavior.
>>
>> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm
>> guessing his bitcoind has been running longer than any of mine. His server
>> definitely has more RAM. I don't know which email list he is subscribed to
>> (probably XT), so I'm sharing it with both lists to make sure you're all
>> aware of how big an issue this can be.
>>
>> In the meantime you can mitigate the mempool growth by setting
>> `-mintxfee`, see
>>
>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding
>>
>>
>> I have mintxfee and minrelaytxfee set to about 0.00003, which is high
>> enough to exclude essentially all of the of the 14700-14800 byte flood
>> transactions. My nodes' mempools only contain about one or two blocks'
>> worth of transactions. So I don't think this is correct either.
>>
>>
>>
>> Some additional notes on this issue:
>>
>> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a
>> Core bitcoind process (commit d78a880) overnight with no mining connected
>> to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around
>> 400 MB of RSS and the mempool was at around "bytes":10MB, "usage": 25MB. I
>> ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around
>> 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes,
>> and RSS climbed to 1180 MB. An hour after that with more getblocktemplates,
>> and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.]
>> getmempoolinfo is still showing "usage" around 25MB or less.
>>
>> I'll do some more testing with this and see if I can make it repeatable,
>> and record the results more carefully. Expect a follow-up from me in a day
>> or two.
>>
>> 2. valgrind did not show anything super promising. It did report this:
>>
>> ==6880== LEAK SUMMARY:
>> ==6880==    definitely lost: 0 bytes in 0 blocks
>> ==6880==    indirectly lost: 0 bytes in 0 blocks
>> ==6880==      possibly lost: 288 bytes in 1 blocks
>> ==6880==    still reachable: 10,552 bytes in 39 blocks
>> ==6880==         suppressed: 0 bytes in 0 blocks
>> (Bitcoin Core commit d78a880)
>>
>> and this:
>> ==6778== LEAK SUMMARY:
>> ==6778==    definitely lost: 0 bytes in 0 blocks
>> ==6778==    indirectly lost: 0 bytes in 0 blocks
>> ==6778==      possibly lost: 320 bytes in 1 blocks
>> ==6778==    still reachable: 10,080 bytes in 32 blocks
>> ==6778==         suppressed: 0 bytes in 0 blocks
>> (Bitcoin XT commit fe446d)
>>
>> I haven't found anything in there yet that I think would produce the
>> multi-GB memory usage after running for a few days, but I could be missing
>> it. Email me if you want the full log.
>>
>> I did not try running getblocktemplate while valgrind was running. I'll
>> have to try that. I also have not let valgrind run for more than an hour.
>>
>>
>>
>> P.S.: Sorry for all the cross-post confusion and consequent flamewar
>> fallout. While it's probably too late for this thread, I'll make sure to
>> post in a manner that keeps the threads clearly separate in the future
>> (e.g. different subject lines).
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>> --
> You received this message because you are subscribed to the Google Groups
> "bitcoin-xt" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to bitcoin-xt+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/c71ef434/attachment-0001.html>

From decker.christian at gmail.com  Tue Oct 20 10:30:33 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Tue, 20 Oct 2015 10:30:33 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <56256D36.5050801@sky-ip.org>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<CAE-z3OUrM=0XsdfdU2d9h6uhCh9vP83X-OZR8NyAYsvYuE1vtg@mail.gmail.com>
	<56256D36.5050801@sky-ip.org>
Message-ID: <CALxbBHVcorvyQnwkDw6O-s6_4uozOY2BB3Aj12H9re2xfyaomA@mail.gmail.com>

On Tue, Oct 20, 2015 at 12:23 AM s7r via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> So what exactly is used to create the normalized txid (sha256 hash of
> what data)? I've read in the linked BIP draft that it will strip the
> 'malleable parts' but didn't understand what exactly will be used to
> calculate the normalized transactions ids and how will the change apply
> retro-active for the transactions so deep buried in the blockchain?
>

The normalization involves two steps:
 - strip the scriptSig scripts in the inputs, i.e., the only part whose
integrity is not guaranteed by the signature itself, by replacing the
scripts with empty strings (var length string of size 0)
 - replace the hashes referencing the outputs being spent with the
normalized hashes of the transaction that created the outputs. This is done
recursively down to the first v2 transactions.

The second part is not yet explained in the draft, but I will amend it as
soon as possible.


> Pubkeys (addresses) can be reused infinitely so what guarantees us
> unique normalized txids all the time and protection against replay
> attacks? The question is not if this issue is covered or not, I know it
> is, I am just asking how, in simpler terms.
>

Non-coinbase transactions can still not be replayed since the normalized
transaction still includes a the normalized transaction hashes of claimed
outputs, hence any attempt to replay a transaction would fail since the
outputs were already spent. For coinbase transactions it is indeed possible
that we create multiple transactions with the same hash (only one of which
would be spendable), hence we do not strip coinbase transactions and rely
on BIP 34 to make the coinbase transactions unique (except for blocks 91842
and 91880 which are the reason we introduced BIP 34 in the first place).
Clarifying the way the normalized transaction ID is computed should remove
any ambiguities I hope.


>
> SCRIPT_CHECKSIGEX_NORMALIZE could be explained better in the document.
>
> Will it also fix > third level malleability (a tx which spends from
> another unconfirmed tx which spends from yet another unconfirmed tx)?
>

Yes, if the computation of the normalized transaction ID includes replacing
input hashes with their normalized counterpart makes a chain of any depth
non-malleable.

HTH,
Christian

>
>
> On 10/19/2015 6:23 PM, Tier Nolan via bitcoin-dev wrote:
> > On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org
> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >
> >     As with the previous version, which was using a hard-fork, the
> >     normalized transaction ID is computed only considering the
> >     non-malleable parts of a transaction, i.e., stripping the signatures
> >     before computing the hash of the transaction.
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >
> >
> > Is this proposal recursive?
> >
> > *Coinbase transaction
> > *
> >
> > * n-txid = txid
> >
> > *Non-coinbase transactions
> > *
> > * replace sigScripts with empty strings
> > * replace txids in TxIns with n-txid for parents
> >
> > The 2nd step is recursive starting from the coinbases.
> >
> > In effect, the rule is that txids are what they would have been if
> > n-txids had been used right from the start.
> >
> >
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/2655d737/attachment.html>

From j at toom.im  Tue Oct 20 12:39:01 2015
From: j at toom.im (Jonathan Toomim)
Date: Tue, 20 Oct 2015 05:39:01 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <CA+w+GKTU6C7KKFx9dDd_--s1DQCO15n=034Lku2-kTYKf96XYw@mail.gmail.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<20151014093913.GB19607@amethyst.visucore.com>
	<F938BD02-3D80-4E99-BD1C-490543187895@toom.im>
	<CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>
	<CA+w+GKTU6C7KKFx9dDd_--s1DQCO15n=034Lku2-kTYKf96XYw@mail.gmail.com>
Message-ID: <1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>

I did that Sunday twice. I'll report the results soon. Short version is that it looks like valgrind is just finding 200 kB to 600 kB of pblocktemplate, which is declared as a static pointer. Not exactly the multi-GB leak I'm looking for, but possibly related.

I've also got two bitcoind processes running on the same machine that I started at the same time, running on different ports, all with the same settings, but one of which is serving getblocktemplate every 5-6 seconds and the other is not, while logging RSS on both every 6 seconds. RSS for the non-serving node is now 734 MB, and for the serving node 1997 MB. Graphs coming soon.


On Oct 20, 2015, at 3:12 AM, Mike Hearn <hearn at vinumeris.com> wrote:

> OK, then running under Valgrind whilst sending gbt RPCs would be the next step.
> 
> On Mon, Oct 19, 2015 at 9:17 PM, Multipool Admin <admin at multipool.us> wrote:
> My nodes are continuously running getblocktemplate and getinfo, and I also suspected the issue is in either gbt or the rpc server.
> 
> The instance only takes a few hours to get up to that memory usage.
> 
> On Oct 18, 2015 8:59 AM, "Jonathan Toomim via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com> wrote:
>> This is *most likely* the mempool, but is just not reported correctly.
> 
> I did some testing with PR #6410's better mempool reporting. The improved reporting suggests that actual in-memory usage ("usage":) by CTxMemPool is about 2.5x to 3x higher than the serialized transaction sizes ("bytes":). The excess memory usage that I'm seeing is on the order of 100x higher than the mempool "bytes": value. As such, I think it's unlikely that this is the mempool, or at least not normal/correct mempool behavior.
> 
> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm guessing his bitcoind has been running longer than any of mine. His server definitely has more RAM. I don't know which email list he is subscribed to (probably XT), so I'm sharing it with both lists to make sure you're all aware of how big an issue this can be.
> 
>> In the meantime you can mitigate the mempool growth by setting `-mintxfee`, see
>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding
> 
> I have mintxfee and minrelaytxfee set to about 0.00003, which is high enough to exclude essentially all of the of the 14700-14800 byte flood transactions. My nodes' mempools only contain about one or two blocks' worth of transactions. So I don't think this is correct either.
> 
> 
> 
> Some additional notes on this issue:
> 
> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a Core bitcoind process (commit d78a880) overnight with no mining connected to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around 400 MB of RSS and the mempool was at around "bytes":10MB, "usage": 25MB. I ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes, and RSS climbed to 1180 MB. An hour after that with more getblocktemplates, and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.] getmempoolinfo is still showing "usage" around 25MB or less.
> 
> I'll do some more testing with this and see if I can make it repeatable, and record the results more carefully. Expect a follow-up from me in a day or two.
> 
> 2. valgrind did not show anything super promising. It did report this:
> 
> ==6880== LEAK SUMMARY:
> ==6880==    definitely lost: 0 bytes in 0 blocks
> ==6880==    indirectly lost: 0 bytes in 0 blocks
> ==6880==      possibly lost: 288 bytes in 1 blocks
> ==6880==    still reachable: 10,552 bytes in 39 blocks
> ==6880==         suppressed: 0 bytes in 0 blocks
> (Bitcoin Core commit d78a880)
> 
> and this:
> ==6778== LEAK SUMMARY:
> ==6778==    definitely lost: 0 bytes in 0 blocks
> ==6778==    indirectly lost: 0 bytes in 0 blocks
> ==6778==      possibly lost: 320 bytes in 1 blocks
> ==6778==    still reachable: 10,080 bytes in 32 blocks
> ==6778==         suppressed: 0 bytes in 0 blocks
> (Bitcoin XT commit fe446d)
> 
> I haven't found anything in there yet that I think would produce the multi-GB memory usage after running for a few days, but I could be missing it. Email me if you want the full log.
> 
> I did not try running getblocktemplate while valgrind was running. I'll have to try that. I also have not let valgrind run for more than an hour.
> 
> 
> 
> P.S.: Sorry for all the cross-post confusion and consequent flamewar fallout. While it's probably too late for this thread, I'll make sure to post in a manner that keeps the threads clearly separate in the future (e.g. different subject lines).
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> --
> You received this message because you are subscribed to the Google Groups "bitcoin-xt" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to bitcoin-xt+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/0f37ce9f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/0f37ce9f/attachment.sig>

From j at toom.im  Wed Oct 21 03:01:16 2015
From: j at toom.im (Jonathan Toomim)
Date: Tue, 20 Oct 2015 20:01:16 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<20151014093913.GB19607@amethyst.visucore.com>
	<F938BD02-3D80-4E99-BD1C-490543187895@toom.im>
	<CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>
	<CA+w+GKTU6C7KKFx9dDd_--s1DQCO15n=034Lku2-kTYKf96XYw@mail.gmail.com>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
Message-ID: <984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>

More notes:

1. I ran a side-by-side comparison with two bitcoind processes (Core, same recent git commit as before) on the same computer with the same settings running on different ports. With both processes, I logged RSS (via /proc/$pid/status) every 6 seconds. With one of those processes, I also ran bitcoin-cli getblocktemplate > /dev/null every 6 seconds. I let that run for about 30 hours. A graph and links to the CSVs of raw data are below. Results seem pretty clear: the getblocktemplate RPC is implicated in this issue.


http://toom.im/files/memlog8518.csv
http://toom.im/files/memlog-nogbt-8503.csv
http://toom.im/files/bitcoind_memory_usage_gbt.png


2. I ran valgrind twice, for about 6 hours each, on bitcoind while hitting it with getblocktemplate every 6 hours. Full valgrind output can be found at these two URLs:

http://toom.im/files/valgrind-gbt-1.log
http://toom.im/files/valgrind-gbt-2.log

The summary:

==4064== LEAK SUMMARY:
==4064==    definitely lost: 0 bytes in 0 blocks
==4064==    indirectly lost: 0 bytes in 0 blocks
==4064==      possibly lost: 288 bytes in 1 blocks
==4064==    still reachable: 527,594 bytes in 4,367 blocks
==4064==         suppressed: 0 bytes in 0 blocks
The main components of that still reachable section seem to just be one output of CreateNewBlock that's cached in case another getblocktemplate request is received before any new transactions come in:

==4064== 98,304 bytes in 1 blocks are still reachable in loss record 39 of 40
==4064==    at 0x4C29180: operator new(unsigned long) (vg_replace_malloc.c:324)
==4064==    by 0x28EAA1: __gnu_cxx::new_allocator<CTransaction>::allocate(unsigned long, void const*) (new_allocator.h:104)
==4064==    by 0x27EE44: __gnu_cxx::__alloc_traits<std::allocator<CTransaction> >::allocate(std::allocator<CTransaction>&, unsigned long) (alloc_traits.h:182)
==4064==    by 0x26DFB0: std::_Vector_base<CTransaction, std::allocator<CTransaction> >::_M_allocate(unsigned long) (stl_vector.h:170)
==4064==    by 0x2D5BDE: std::vector<CTransaction, std::allocator<CTransaction> >::_M_insert_aux(__gnu_cxx::__normal_iterator<CTransaction*, std::vector<CTransaction, std::allocator<CTransaction> > >, CTransaction const&) (vector.tcc:353)
==4064==    by 0x2D3FF8: std::vector<CTransaction, std::allocator<CTransaction> >::push_back(CTransaction const&) (stl_vector.h:925)
==4064==    by 0x2D113E: CreateNewBlock(CScript const&) (miner.cpp:298)
==4064==    by 0x442D78: getblocktemplate(UniValue const&, bool) (rpcmining.cpp:513)
==4064==    by 0x390CEB: CRPCTable::execute(std::string const&, UniValue const&) const (rpcserver.cpp:526)
==4064==    by 0x41C5AB: HTTPReq_JSONRPC(HTTPRequest*, std::string const&) (httprpc.cpp:125)
==4064==    by 0x3559BD: boost::detail::function::void_function_invoker2<bool (*)(HTTPRequest*, std::string const&), void, HTTPRequest*, std::string const&>::invoke(boost::detail::function::function_buffer&, HTTPRequest*, std::string const&) (function_template.hpp:112)
==4064==    by 0x422520: boost::function2<void, HTTPRequest*, std::string const&>::operator()(HTTPRequest*, std::string const&) const (function_template.hpp:767)

There are a few other similar loss records (mostly referring to pblock or pblocktemplate in CreateNewBlock(...), but I see nothing that can explain the multi-GB memory consumption.

3. One user on the bitcointalk p2pool thread (https://bitcointalk.org/index.php?topic=18313.msg12733791#msg12733791) claimed that he had this memory usage issue on Linux, but not on Mac OS X, under a GBT workload in both situations. If this is true, that would suggest this might be a fragmentation issue due to poor memory allocation. The other likely hypothesis is bloated caches. Looking into those two possibilities will be my next steps.



On Oct 20, 2015, at 5:39 AM, Jonathan Toomim <j at toom.im> wrote:

> I did that Sunday twice. I'll report the results soon. Short version is that it looks like valgrind is just finding 200 kB to 600 kB of pblocktemplate, which is declared as a static pointer. Not exactly the multi-GB leak I'm looking for, but possibly related.
> 
> I've also got two bitcoind processes running on the same machine that I started at the same time, running on different ports, all with the same settings, but one of which is serving getblocktemplate every 5-6 seconds and the other is not, while logging RSS on both every 6 seconds. RSS for the non-serving node is now 734 MB, and for the serving node 1997 MB. Graphs coming soon.
> 
> 
> On Oct 20, 2015, at 3:12 AM, Mike Hearn <hearn at vinumeris.com> wrote:
> 
>> OK, then running under Valgrind whilst sending gbt RPCs would be the next step.
>> 
>> On Mon, Oct 19, 2015 at 9:17 PM, Multipool Admin <admin at multipool.us> wrote:
>> My nodes are continuously running getblocktemplate and getinfo, and I also suspected the issue is in either gbt or the rpc server.
>> 
>> The instance only takes a few hours to get up to that memory usage.
>> 
>> On Oct 18, 2015 8:59 AM, "Jonathan Toomim via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com> wrote:
>>> This is *most likely* the mempool, but is just not reported correctly.
>> 
>> I did some testing with PR #6410's better mempool reporting. The improved reporting suggests that actual in-memory usage ("usage":) by CTxMemPool is about 2.5x to 3x higher than the serialized transaction sizes ("bytes":). The excess memory usage that I'm seeing is on the order of 100x higher than the mempool "bytes": value. As such, I think it's unlikely that this is the mempool, or at least not normal/correct mempool behavior.
>> 
>> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm guessing his bitcoind has been running longer than any of mine. His server definitely has more RAM. I don't know which email list he is subscribed to (probably XT), so I'm sharing it with both lists to make sure you're all aware of how big an issue this can be.
>> 
>>> In the meantime you can mitigate the mempool growth by setting `-mintxfee`, see
>>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding
>> 
>> I have mintxfee and minrelaytxfee set to about 0.00003, which is high enough to exclude essentially all of the of the 14700-14800 byte flood transactions. My nodes' mempools only contain about one or two blocks' worth of transactions. So I don't think this is correct either.
>> 
>> 
>> 
>> Some additional notes on this issue:
>> 
>> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a Core bitcoind process (commit d78a880) overnight with no mining connected to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around 400 MB of RSS and the mempool was at around "bytes":10MB, "usage": 25MB. I ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes, and RSS climbed to 1180 MB. An hour after that with more getblocktemplates, and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.] getmempoolinfo is still showing "usage" around 25MB or less.
>> 
>> I'll do some more testing with this and see if I can make it repeatable, and record the results more carefully. Expect a follow-up from me in a day or two.
>> 
>> 2. valgrind did not show anything super promising. It did report this:
>> 
>> ==6880== LEAK SUMMARY:
>> ==6880==    definitely lost: 0 bytes in 0 blocks
>> ==6880==    indirectly lost: 0 bytes in 0 blocks
>> ==6880==      possibly lost: 288 bytes in 1 blocks
>> ==6880==    still reachable: 10,552 bytes in 39 blocks
>> ==6880==         suppressed: 0 bytes in 0 blocks
>> (Bitcoin Core commit d78a880)
>> 
>> and this:
>> ==6778== LEAK SUMMARY:
>> ==6778==    definitely lost: 0 bytes in 0 blocks
>> ==6778==    indirectly lost: 0 bytes in 0 blocks
>> ==6778==      possibly lost: 320 bytes in 1 blocks
>> ==6778==    still reachable: 10,080 bytes in 32 blocks
>> ==6778==         suppressed: 0 bytes in 0 blocks
>> (Bitcoin XT commit fe446d)
>> 
>> I haven't found anything in there yet that I think would produce the multi-GB memory usage after running for a few days, but I could be missing it. Email me if you want the full log.
>> 
>> I did not try running getblocktemplate while valgrind was running. I'll have to try that. I also have not let valgrind run for more than an hour.
>> 
>> 
>> 
>> P.S.: Sorry for all the cross-post confusion and consequent flamewar fallout. While it's probably too late for this thread, I'll make sure to post in a manner that keeps the threads clearly separate in the future (e.g. different subject lines).
>> 
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
>> 
>> --
>> You received this message because you are subscribed to the Google Groups "bitcoin-xt" group.
>> To unsubscribe from this group and stop receiving emails from it, send an email to bitcoin-xt+unsubscribe at googlegroups.com.
>> For more options, visit https://groups.google.com/d/optout.
>> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/d35c68f8/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/d35c68f8/attachment-0001.sig>

From luke at dashjr.org  Wed Oct 21 06:18:54 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 21 Oct 2015 06:18:54 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
Message-ID: <201510210618.56159.luke@dashjr.org>

On Monday, October 19, 2015 2:01:04 PM Christian Decker via bitcoin-dev wrote:
> The proposal is implemented (see below), by computing the normalized
> transaction ID when adding them to the UTXO and storing them along with the
> coin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and
> OP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into
> how to best refactor the common functionality into reusable blocks. And the
> annotating incoming transactions with their normalized inputs is a bit
> cumbersome, maye somebody has some pointers here as well?

This doesn't completely close malleability (which should be documented in the 
BIP), so I'm not sure it's worth the cost, especially if closing malleability 
later on would need more. How about specifying flags upfront in the UTXO-
creating transaction specifying which parts the signature will cover? This 
would allow implementation of fully malleability-proof wallets.

Additionally, you have a flag to control whether the opcode behaves as VERIFY 
or not. Non-VERIFY is not possible as a softfork (without doing a second/new 
P2SH) since it can be negated.

Luke

From tomz at freedommail.ch  Wed Oct 21 07:29:19 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Wed, 21 Oct 2015 08:29:19 +0100
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
	<984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
Message-ID: <1445414983.m7gvNPDAo8@garp>

On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:
>  claimed that he had this memory usage issue on Linux, but not on Mac OS X,
> under a GBT workload in both situations. If this is true, that would
> suggest this might be a fragmentation issue due to poor memory allocation.

Please make sure you measure your memory usage correctly on Linux, it is 
notoriously easy to get misleading info from tools like top.

I use this one on Linux. 

$cat ~/bin/showmemusage 
#!/bin/sh
if test -z "$1"; then
    echo "need a pid"
    exit
fi

mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \
sed 's#^#+#' ) | bc`
echo "$mem KB"
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/5d946397/attachment.sig>

From decker.christian at gmail.com  Wed Oct 21 07:39:45 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 21 Oct 2015 07:39:45 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <201510210618.56159.luke@dashjr.org>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
Message-ID: <CALxbBHVdXrdh6fdSyLdkPP_D4MSbofOr01kc9L9QuQTWZ33N1w@mail.gmail.com>

On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:

> On Monday, October 19, 2015 2:01:04 PM Christian Decker via bitcoin-dev
> wrote:
> > The proposal is implemented (see below), by computing the normalized
> > transaction ID when adding them to the UTXO and storing them along with
> the
> > coin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and
> > OP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into
> > how to best refactor the common functionality into reusable blocks. And
> the
> > annotating incoming transactions with their normalized inputs is a bit
> > cumbersome, maye somebody has some pointers here as well?


> This doesn't completely close malleability (which should be documented in
> the
> BIP), so I'm not sure it's worth the cost, especially if closing
> malleability
> later on would need more. How about specifying flags upfront in the UTXO-
> creating transaction specifying which parts the signature will cover? This
> would allow implementation of fully malleability-proof wallets.
>

As far as I see it the only remaining venues for malleability are the use
of sighash flags that are not SIGHASH_ALL, as mentioned in the BIP. Any use
of non-sighash_all flags is already an explicit permission to modify the
transactions, by adding and removing inputs and outputs, so I don't see how
these can be made non-malleable. Am I missing something?


>
> Additionally, you have a flag to control whether the opcode behaves as
> VERIFY
> or not. Non-VERIFY is not possible as a softfork (without doing a
> second/new
> P2SH) since it can be negated.
>

Yes, this is my mistake and has been pointed out in the PR, I will amend
the PR to make the verify flag mandatory, which also guarantees that the
top of the stack contains a non-null element, thus resulting in a
successful evaluation on non-updated clients.


>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/3a229156/attachment.html>

From gmaxwell at gmail.com  Wed Oct 21 07:48:39 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 21 Oct 2015 07:48:39 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <201510210618.56159.luke@dashjr.org>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
Message-ID: <CAAS2fgT4DU1MuOwo0Qr4yMNRamajD=KrOVP93pzApWMpry-Srg@mail.gmail.com>

On Wed, Oct 21, 2015 at 6:18 AM, Luke Dashjr via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Monday, October 19, 2015 2:01:04 PM Christian Decker via bitcoin-dev wrote:
>> The proposal is implemented (see below), by computing the normalized
>> transaction ID when adding them to the UTXO and storing them along with the
>> coin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and
>> OP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into
>> how to best refactor the common functionality into reusable blocks. And the
>> annotating incoming transactions with their normalized inputs is a bit
>> cumbersome, maye somebody has some pointers here as well?
>
> This doesn't completely close malleability (which should be documented in the
> BIP), so I'm not sure it's worth the cost, especially if closing malleability
> later on would need more. How about specifying flags upfront in the UTXO-
> creating transaction specifying which parts the signature will cover? This
> would allow implementation of fully malleability-proof wallets.
>
> Additionally, you have a flag to control whether the opcode behaves as VERIFY
> or not. Non-VERIFY is not possible as a softfork (without doing a second/new
> P2SH) since it can be negated.

Flagability cannot work recursively which is necessary for any
improvement to be useful for multi-phase protocols. (which, I think,
is the only real application of this class of improvement-- third
party mutation can be prevented by enforced canonical encodings;)

One still wants sighash flags--, but they're going to inherently
result in malleability.

I'm still sad that uniform segregated witeness is so hard to deploy,
adding another id to every utxo set won't be a nice cost. :( But I
have been trying for a long time to come up with anything better and
not being successful.

From luke at dashjr.org  Wed Oct 21 07:52:16 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 21 Oct 2015 07:52:16 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHVdXrdh6fdSyLdkPP_D4MSbofOr01kc9L9QuQTWZ33N1w@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
	<CALxbBHVdXrdh6fdSyLdkPP_D4MSbofOr01kc9L9QuQTWZ33N1w@mail.gmail.com>
Message-ID: <201510210752.17527.luke@dashjr.org>

On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:
> On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:
> > This doesn't completely close malleability (which should be documented in
> > the BIP), so I'm not sure it's worth the cost, especially if closing
> > malleability later on would need more. How about specifying flags upfront
> > in the UTXO-creating transaction specifying which parts the signature
> > will cover? This would allow implementation of fully malleability-proof
> > wallets.
> 
> As far as I see it the only remaining venues for malleability are the use
> of sighash flags that are not SIGHASH_ALL, as mentioned in the BIP. Any use
> of non-sighash_all flags is already an explicit permission to modify the
> transactions, by adding and removing inputs and outputs, so I don't see how
> these can be made non-malleable. Am I missing something?

Signer malleability is still a notable concern needing consideration. Ideally, 
wallets should be trying to actively CoinJoin, bump fees on, etc any pending 
transactions in the background. These forms of malleability affect nearly as 
many real use cases as third-party malleability.

Luke

From ross.bennetts at gmail.com  Wed Oct 21 07:59:28 2015
From: ross.bennetts at gmail.com (Ross Bennetts)
Date: Wed, 21 Oct 2015 18:59:28 +1100
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<20151014093913.GB19607@amethyst.visucore.com>
	<F938BD02-3D80-4E99-BD1C-490543187895@toom.im>
	<CAP3QyGJNBdsBtxYjOprRJ=YW2v-N_CopVQeSgDs6J4J8LMWuxA@mail.gmail.com>
	<CA+w+GKTU6C7KKFx9dDd_--s1DQCO15n=034Lku2-kTYKf96XYw@mail.gmail.com>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
	<984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
Message-ID: <CANUnK2SK-fbV1CBnW6ZhUhZ5-Jv-Y5WBMse-erej7h0FQ0a3Pg@mail.gmail.com>

On Wed, Oct 21, 2015 at 2:01 PM, Jonathan Toomim <j at toom.im> wrote:

> 3. One user on the bitcointalk p2pool thread (
> https://bitcointalk.org/index.php?topic=18313.msg12733791#msg12733791)
> claimed that he had this memory usage issue on Linux, but not on Mac OS X,
> under a GBT workload in both situations.
>
>
Thanks for the thorough investigation.
FYI, I believe I've experienced this issue on both Linux & Mac OSX.
I've moved my P2Pool/bitcoind node (rossbennetts.com:9332) from Ubuntu to
OSX since my P2Pool instability began and they both seem to become flaky
after a few hours of uptime (since ~v0.10.something). I've tried both core
and xt.
Two other bitcoin nodes, one connected to electrum-server and one
standalone, seem fine.

//long term lurker, first time poster...
   Ross...

-- 
Ross M. W. Bennetts
https://rossbennetts.com/

E-mail: ross.bennetts at gmail.com
Twitter: https://twitter.com/rmwb/
Flickr: https://flickr.com/photos/rmwb/
Instagram: https://instagram.com/rmwb/
Facebook: https://facebook.com/ross.bennetts
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/cc80ea55/attachment-0001.html>

From gmaxwell at gmail.com  Wed Oct 21 08:26:47 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 21 Oct 2015 08:26:47 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CAAS2fgT4DU1MuOwo0Qr4yMNRamajD=KrOVP93pzApWMpry-Srg@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
	<CAAS2fgT4DU1MuOwo0Qr4yMNRamajD=KrOVP93pzApWMpry-Srg@mail.gmail.com>
Message-ID: <CAAS2fgR7X2j9buFQXvgmWZCfoasRa=nLB5efnu-ZnqFZC+SeuQ@mail.gmail.com>

On Wed, Oct 21, 2015 at 7:48 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> I'm still sad that uniform segregated witeness is so hard to deploy,
> adding another id to every utxo set won't be a nice cost. :( But I
> have been trying for a long time to come up with anything better and
> not being successful.

Oh good. Luke solved it.

To deploy SW without a disruptive flag day this encoding could be used:

A new P2SH like scriptPubkey type is defined. In the soft-fork, the
scriptsig for this scriptPubkey is required to be empty.

Signatures are not covered under txid, but carried along side. Then
committed to in blocks in a separate hashtree.

The only disadvantage to the approach used in elements alpha that I
can come up with so far (in the few minutes since luke turned my can't
into a can) is that that the approach in EA did not disrupt the normal
relay handling process, and this would, since relay that transports
the extradata either needs to use a different hash that includes the
witness, or have a separate mechanism for witness transport.

From decker.christian at gmail.com  Wed Oct 21 08:31:42 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 21 Oct 2015 08:31:42 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <201510210752.17527.luke@dashjr.org>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
	<CALxbBHVdXrdh6fdSyLdkPP_D4MSbofOr01kc9L9QuQTWZ33N1w@mail.gmail.com>
	<201510210752.17527.luke@dashjr.org>
Message-ID: <CALxbBHVnb-bLx47RcST0ZP2pg2YPzC5TvCDjL1qXqEQLN2qSGA@mail.gmail.com>

On Wed, Oct 21, 2015 at 9:52 AM Luke Dashjr <luke at dashjr.org> wrote:

> On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:
> > On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:
> > > This doesn't completely close malleability (which should be documented
> in
> > > the BIP), so I'm not sure it's worth the cost, especially if closing
> > > malleability later on would need more. How about specifying flags
> upfront
> > > in the UTXO-creating transaction specifying which parts the signature
> > > will cover? This would allow implementation of fully malleability-proof
> > > wallets.
> >
> > As far as I see it the only remaining venues for malleability are the use
> > of sighash flags that are not SIGHASH_ALL, as mentioned in the BIP. Any
> use
> > of non-sighash_all flags is already an explicit permission to modify the
> > transactions, by adding and removing inputs and outputs, so I don't see
> how
> > these can be made non-malleable. Am I missing something?
>
> Signer malleability is still a notable concern needing consideration.
> Ideally,
> wallets should be trying to actively CoinJoin, bump fees on, etc any
> pending
> transactions in the background. These forms of malleability affect nearly
> as
> many real use cases as third-party malleability.
>
> Luke
>

How is signer malleability still a problem if we remove the signatures from
the transaction ID of the transaction and all preceding transactions? The
signer can re-sign a transaction but it won't change the transaction ID.

It is still possible to double-spend transactions that do not have enough
fees, so just starting a new round of CoinJoin is sufficient to bump fees
for all parties that participate, and that would also result in the
double-spent low fee transaction to be discarded, resolving the state of
all coins in the first CoinJoin tx.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/87444434/attachment.html>

From luke at dashjr.org  Wed Oct 21 08:39:41 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 21 Oct 2015 08:39:41 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHVnb-bLx47RcST0ZP2pg2YPzC5TvCDjL1qXqEQLN2qSGA@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210752.17527.luke@dashjr.org>
	<CALxbBHVnb-bLx47RcST0ZP2pg2YPzC5TvCDjL1qXqEQLN2qSGA@mail.gmail.com>
Message-ID: <201510210839.42420.luke@dashjr.org>

On Wednesday, October 21, 2015 8:31:42 AM Christian Decker wrote:
> On Wed, Oct 21, 2015 at 9:52 AM Luke Dashjr <luke at dashjr.org> wrote:
> > On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:
> > > On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:
> > > > This doesn't completely close malleability (which should be
> > > > documented
> > 
> > in
> > 
> > > > the BIP), so I'm not sure it's worth the cost, especially if closing
> > > > malleability later on would need more. How about specifying flags
> > 
> > upfront
> > 
> > > > in the UTXO-creating transaction specifying which parts the signature
> > > > will cover? This would allow implementation of fully
> > > > malleability-proof wallets.
> > > 
> > > As far as I see it the only remaining venues for malleability are the
> > > use of sighash flags that are not SIGHASH_ALL, as mentioned in the
> > > BIP. Any
> > 
> > use
> > 
> > > of non-sighash_all flags is already an explicit permission to modify
> > > the transactions, by adding and removing inputs and outputs, so I
> > > don't see
> > 
> > how
> > 
> > > these can be made non-malleable. Am I missing something?
> > 
> > Signer malleability is still a notable concern needing consideration.
> > Ideally,
> > wallets should be trying to actively CoinJoin, bump fees on, etc any
> > pending
> > transactions in the background. These forms of malleability affect nearly
> > as
> > many real use cases as third-party malleability.
> > 
> > Luke
> 
> How is signer malleability still a problem if we remove the signatures from
> the transaction ID of the transaction and all preceding transactions? The
> signer can re-sign a transaction but it won't change the transaction ID.

The signer can also change the order of the inputs, the inputs themselves, 
add/remove outputs, etc... all which should be possible without becoming a 
different logical transaction. The only unique property of the logical 
transaction is the scriptPubKey/address.

Luke

From decker.christian at gmail.com  Wed Oct 21 08:44:53 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 21 Oct 2015 08:44:53 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <201510210839.42420.luke@dashjr.org>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210752.17527.luke@dashjr.org>
	<CALxbBHVnb-bLx47RcST0ZP2pg2YPzC5TvCDjL1qXqEQLN2qSGA@mail.gmail.com>
	<201510210839.42420.luke@dashjr.org>
Message-ID: <CALxbBHWOp9Q67bqSd4h=2+28PT_2stWzMBQ=nSvxPqKocx_xtQ@mail.gmail.com>

Hm, that is true as long as the signer is the only signer of the
transaction, otherwise he'd be invalidating the signatures of the other
signers. That can however be fixed by having a canonical ordering of Inputs
and Outputs, which has been discussed before in order to decrease
information that can be gained about the spender. Maybe we can defer to
that effort?

On Wed, Oct 21, 2015 at 10:41 AM Luke Dashjr <luke at dashjr.org> wrote:

> On Wednesday, October 21, 2015 8:31:42 AM Christian Decker wrote:
> > On Wed, Oct 21, 2015 at 9:52 AM Luke Dashjr <luke at dashjr.org> wrote:
> > > On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:
> > > > On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:
> > > > > This doesn't completely close malleability (which should be
> > > > > documented
> > >
> > > in
> > >
> > > > > the BIP), so I'm not sure it's worth the cost, especially if
> closing
> > > > > malleability later on would need more. How about specifying flags
> > >
> > > upfront
> > >
> > > > > in the UTXO-creating transaction specifying which parts the
> signature
> > > > > will cover? This would allow implementation of fully
> > > > > malleability-proof wallets.
> > > >
> > > > As far as I see it the only remaining venues for malleability are the
> > > > use of sighash flags that are not SIGHASH_ALL, as mentioned in the
> > > > BIP. Any
> > >
> > > use
> > >
> > > > of non-sighash_all flags is already an explicit permission to modify
> > > > the transactions, by adding and removing inputs and outputs, so I
> > > > don't see
> > >
> > > how
> > >
> > > > these can be made non-malleable. Am I missing something?
> > >
> > > Signer malleability is still a notable concern needing consideration.
> > > Ideally,
> > > wallets should be trying to actively CoinJoin, bump fees on, etc any
> > > pending
> > > transactions in the background. These forms of malleability affect
> nearly
> > > as
> > > many real use cases as third-party malleability.
> > >
> > > Luke
> >
> > How is signer malleability still a problem if we remove the signatures
> from
> > the transaction ID of the transaction and all preceding transactions? The
> > signer can re-sign a transaction but it won't change the transaction ID.
>
> The signer can also change the order of the inputs, the inputs themselves,
> add/remove outputs, etc... all which should be possible without becoming a
> different logical transaction. The only unique property of the logical
> transaction is the scriptPubKey/address.
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/c06fc8ff/attachment.html>

From luke at dashjr.org  Wed Oct 21 08:46:43 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 21 Oct 2015 08:46:43 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHWOp9Q67bqSd4h=2+28PT_2stWzMBQ=nSvxPqKocx_xtQ@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210839.42420.luke@dashjr.org>
	<CALxbBHWOp9Q67bqSd4h=2+28PT_2stWzMBQ=nSvxPqKocx_xtQ@mail.gmail.com>
Message-ID: <201510210846.43988.luke@dashjr.org>

On Wednesday, October 21, 2015 8:44:53 AM Christian Decker wrote:
> Hm, that is true as long as the signer is the only signer of the
> transaction, otherwise he'd be invalidating the signatures of the other
> signers.

Or he can just have the other signers re-sign with the modified version.
Even if it only worked with a single signer, it's still a form of malleability 
that your BIP does not presently solve, but would be desirable to solve...

Luke

From decker.christian at gmail.com  Wed Oct 21 08:49:26 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 21 Oct 2015 08:49:26 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CAAS2fgR7X2j9buFQXvgmWZCfoasRa=nLB5efnu-ZnqFZC+SeuQ@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
	<CAAS2fgT4DU1MuOwo0Qr4yMNRamajD=KrOVP93pzApWMpry-Srg@mail.gmail.com>
	<CAAS2fgR7X2j9buFQXvgmWZCfoasRa=nLB5efnu-ZnqFZC+SeuQ@mail.gmail.com>
Message-ID: <CALxbBHV14BW+S809rX0TuAjB65b90=1bnN6pondQO6qWVPi3+w@mail.gmail.com>

On Wed, Oct 21, 2015 at 10:26 AM Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Oct 21, 2015 at 7:48 AM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
> > I'm still sad that uniform segregated witeness is so hard to deploy,
> > adding another id to every utxo set won't be a nice cost. :( But I
> > have been trying for a long time to come up with anything better and
> > not being successful.
>
> Oh good. Luke solved it.
>
> To deploy SW without a disruptive flag day this encoding could be used:
>
> A new P2SH like scriptPubkey type is defined. In the soft-fork, the
> scriptsig for this scriptPubkey is required to be empty.
>
> Signatures are not covered under txid, but carried along side. Then
> committed to in blocks in a separate hashtree.
>
>
Isn't that sort of what this BIP describes as well? Except that we use the
scriptSig to transport the signatures internally to the transactions and
strip them when it comes to signing/checking? The wire format and transport
of transactions do not change so old clients continue to fetch and process
transactions as before, they just can't verify the TX. Blocks still
reference the instance but verification uses the stripped TX with the
signatures on the side, etc.


> The only disadvantage to the approach used in elements alpha that I
> can come up with so far (in the few minutes since luke turned my can't
> into a can) is that that the approach in EA did not disrupt the normal
> relay handling process, and this would, since relay that transports
> the extradata either needs to use a different hash that includes the
> witness, or have a separate mechanism for witness transport.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/caeecce7/attachment-0001.html>

From decker.christian at gmail.com  Wed Oct 21 08:50:45 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 21 Oct 2015 08:50:45 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHV14BW+S809rX0TuAjB65b90=1bnN6pondQO6qWVPi3+w@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
	<CAAS2fgT4DU1MuOwo0Qr4yMNRamajD=KrOVP93pzApWMpry-Srg@mail.gmail.com>
	<CAAS2fgR7X2j9buFQXvgmWZCfoasRa=nLB5efnu-ZnqFZC+SeuQ@mail.gmail.com>
	<CALxbBHV14BW+S809rX0TuAjB65b90=1bnN6pondQO6qWVPi3+w@mail.gmail.com>
Message-ID: <CALxbBHU2si5J7QzsBjicOzw=z2u2eGDBna_APv+cWAMo5DmmJA@mail.gmail.com>

Ok, so the normalization step could add a sorting step for inputs/outputs
(which is going to be nasty for SIGHASH_SINGLE), that would solve the issue.

On Wed, Oct 21, 2015 at 10:49 AM Christian Decker <
decker.christian at gmail.com> wrote:

> On Wed, Oct 21, 2015 at 10:26 AM Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
>
>> On Wed, Oct 21, 2015 at 7:48 AM, Gregory Maxwell <gmaxwell at gmail.com>
>> wrote:
>> > I'm still sad that uniform segregated witeness is so hard to deploy,
>> > adding another id to every utxo set won't be a nice cost. :( But I
>> > have been trying for a long time to come up with anything better and
>> > not being successful.
>>
>> Oh good. Luke solved it.
>>
>> To deploy SW without a disruptive flag day this encoding could be used:
>>
>> A new P2SH like scriptPubkey type is defined. In the soft-fork, the
>> scriptsig for this scriptPubkey is required to be empty.
>>
>> Signatures are not covered under txid, but carried along side. Then
>> committed to in blocks in a separate hashtree.
>>
>>
> Isn't that sort of what this BIP describes as well? Except that we use the
> scriptSig to transport the signatures internally to the transactions and
> strip them when it comes to signing/checking? The wire format and transport
> of transactions do not change so old clients continue to fetch and process
> transactions as before, they just can't verify the TX. Blocks still
> reference the instance but verification uses the stripped TX with the
> signatures on the side, etc.
>
>
>> The only disadvantage to the approach used in elements alpha that I
>> can come up with so far (in the few minutes since luke turned my can't
>> into a can) is that that the approach in EA did not disrupt the normal
>> relay handling process, and this would, since relay that transports
>> the extradata either needs to use a different hash that includes the
>> witness, or have a separate mechanism for witness transport.
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/1328d072/attachment.html>

From gmaxwell at gmail.com  Wed Oct 21 10:14:01 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 21 Oct 2015 10:14:01 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHV14BW+S809rX0TuAjB65b90=1bnN6pondQO6qWVPi3+w@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210618.56159.luke@dashjr.org>
	<CAAS2fgT4DU1MuOwo0Qr4yMNRamajD=KrOVP93pzApWMpry-Srg@mail.gmail.com>
	<CAAS2fgR7X2j9buFQXvgmWZCfoasRa=nLB5efnu-ZnqFZC+SeuQ@mail.gmail.com>
	<CALxbBHV14BW+S809rX0TuAjB65b90=1bnN6pondQO6qWVPi3+w@mail.gmail.com>
Message-ID: <CAAS2fgSPn9WeC+aw1OSyoRNbO3gTJTnTe6cwuOb0ydCNs95A4A@mail.gmail.com>

On Wed, Oct 21, 2015 at 8:49 AM, Christian Decker
<decker.christian at gmail.com> wrote:
> Isn't that sort of what this BIP describes as well? Except that we use the
> scriptSig to transport the signatures internally to the transactions and
> strip them when it comes to signing/checking? The wire format and transport
> of transactions do not change so old clients continue to fetch and process
> transactions as before, they just can't verify the TX. Blocks still
> reference the instance but verification uses the stripped TX with the
> signatures on the side, etc.

"sort of"

Using the sighash normalization doesn't allow creating a utxo set or
scanning the blockchain while only transferring ~1/3rd of the data
(allowing for reduced security fast start, and private lite wallets);
it requires txin ID rewriting when the witness changes on a parent
transaction; it requires hashing each transaction multiple times (for
the normalized ID, and the old ID), it requires storing two IDs for
every transaction in the UTXO set. -- but indeed, it's easier to
deploy (though not infinitely easier as I thought before).

From j at toom.im  Wed Oct 21 17:58:15 2015
From: j at toom.im (Jonathan Toomim)
Date: Wed, 21 Oct 2015 10:58:15 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <1445414983.m7gvNPDAo8@garp>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
	<984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
	<1445414983.m7gvNPDAo8@garp>
Message-ID: <7E6110E8-F590-406A-9FBE-522BCFBC5989@toom.im>

The method I was using was essentially

	grep VmRSS /proc/$pid/status

Comparing these two methods, I get

Your method (PSS):
	2408313
My method (RSS):
	VmRSS:	 2410396 kB

On Oct 21, 2015, at 12:29 AM, Tom Zander <tomz at freedommail.ch> wrote:

> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:
> Please make sure you measure your memory usage correctly on Linux, it is
> notoriously easy to get misleading info from tools like top.
> 
> I use this one on Linux.
> 
> $cat ~/bin/showmemusage
> #!/bin/sh
> if test -z "$1"; then
>    echo "need a pid"
>    exit
> fi
> 
> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \
> sed 's#^#+#' ) | bc`
> echo "$mem KB"


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/b272a7de/attachment.sig>

From danny.thorpe at gmail.com  Wed Oct 21 18:22:25 2015
From: danny.thorpe at gmail.com (Danny Thorpe)
Date: Wed, 21 Oct 2015 11:22:25 -0700
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <201510210846.43988.luke@dashjr.org>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210839.42420.luke@dashjr.org>
	<CALxbBHWOp9Q67bqSd4h=2+28PT_2stWzMBQ=nSvxPqKocx_xtQ@mail.gmail.com>
	<201510210846.43988.luke@dashjr.org>
Message-ID: <CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>

A signer modifying the order of inputs or changing outputs when
"re-signing" a transaction (which already has dependent child transactions
spending its outputs) seems like quite a different hazard than a malicious
third party modifying a transaction in the mempool by twiddling opcodes in
the signature scripts.  The former seems like more a matter of keeping your
own house in order (an internal affair) while the latter is an external
threat beyond the transaction writer's control.

While I agree that having a canonical ordering for inputs and outputs might
be useful in some cases, there are also use cases where the relative
positions of inputs and outputs are significant, where reordering would
change the semantics of the transaction.  SIGHASH_SINGLE, for example,
makes an association between an input index and an output index. Open Asset
colored coins are identified by the order of inputs and outputs.

Let's keep canonical ordering separate from the normalized transaction ID
proposal. Baby steps. Normalized transaction IDs provide an immediate
benefit against the hazard of third party manipulation of transactions in
the mempool, even without canonical ordering.

-Danny





On Wed, Oct 21, 2015 at 1:46 AM, Luke Dashjr via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Wednesday, October 21, 2015 8:44:53 AM Christian Decker wrote:
> > Hm, that is true as long as the signer is the only signer of the
> > transaction, otherwise he'd be invalidating the signatures of the other
> > signers.
>
> Or he can just have the other signers re-sign with the modified version.
> Even if it only worked with a single signer, it's still a form of
> malleability
> that your BIP does not presently solve, but would be desirable to solve...
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/3ab09100/attachment.html>

From gmaxwell at gmail.com  Wed Oct 21 19:27:54 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 21 Oct 2015 19:27:54 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210839.42420.luke@dashjr.org>
	<CALxbBHWOp9Q67bqSd4h=2+28PT_2stWzMBQ=nSvxPqKocx_xtQ@mail.gmail.com>
	<201510210846.43988.luke@dashjr.org>
	<CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>
Message-ID: <CAAS2fgTjG2yC1Zxqc6bgTk=Z2rAQbW6mnW7pef3jSNKcOZ4fng@mail.gmail.com>

On Wed, Oct 21, 2015 at 6:22 PM, Danny Thorpe via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> outputs) seems like quite a different hazard than a malicious third party
> modifying a transaction in the mempool by twiddling opcodes in the signature
> scripts.  The former seems like more a matter of keeping your own house in

Indeed they are different, but canonical encoding enforcement prevents
the third party malleability completely on ordinary transactions.

It is an an _immediate_ solution which is already deployed as a
standardness rule-- once miners update to 0.11.1 or 0.10.3 (or
equivalent) only miners will be able to malleable ordinary payments,
to the best of our current understanding.

[snip]
> proposal. Baby steps. Normalized transaction IDs provide an immediate
> benefit against the hazard of third party manipulation of transactions in
> the mempool, even without canonical ordering.

The thing being discussed here does not provide an immediate benefit
to that particular issue.  It addresses multistep contracts and other
cases.

But it does not prevent third party mutation until people change their
public keys to new scheme (which based on p2sh we should expect a well
over a year deployment), which they cannot being doing until a soft
fork is made and settled in the network, for which the code is not yet
written. CLTV suggests that the current timeframe for a soft fork is
around a year and though I'd like to see that improved.

So canonical encoding is both sufficient (to the best of our current
understanding) for preventing third party malleability on ordinary
transactions, and the _only_ option for to have an actually immediate
benefit.

Please don't mix up third party malleability with this work which is
important in its own right.

From luke at dashjr.org  Wed Oct 21 23:20:30 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 21 Oct 2015 23:20:30 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210846.43988.luke@dashjr.org>
	<CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>
Message-ID: <201510212320.31052.luke@dashjr.org>

On Wednesday, October 21, 2015 6:22:25 PM Danny Thorpe wrote:
> Let's keep canonical ordering separate from the normalized transaction ID
> proposal. Baby steps. Normalized transaction IDs provide an immediate
> benefit against the hazard of third party manipulation of transactions in
> the mempool, even without canonical ordering.

My point is that third-party manipulation is not much more of a problem than 
signing-party manipulation. Solving the former (at a high cost), without 
solving the latter, seems not worth it IMO.

Luke

From rusty at rustcorp.com.au  Thu Oct 22 01:29:11 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 22 Oct 2015 11:59:11 +1030
Subject: [bitcoin-dev] Mailing List Moderation Now Active.
Message-ID: <878u6velnc.fsf@rustcorp.com.au>

Hi all,

We aim to make the list more contentful and productive; to get devs to
resubscribe we need to maximize high-value interactions.

  - Currently 5 moderators.  BtcDrak, me, G1lius, Kanzure and Johnathan.
    As far as I know we're entirely unconnected, and we cover Asia/Europe/US.

  - Moderation will last 3 months.  Then we'll have an unmoderated on-list
    discussion as to whether it should continue, or change.

  - Appeals for/against moderation decisions should be directed to Jeff, who
    will have final say.  General moderation feedback just send to me.

  - All rejected posts will be forwarded to a list for public viewing:
    https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/

  - Everyone starts moderated, and the mod bit gets cleared as they post.
    It gets set again if someone notices or reports a violation.

  - Moderation rules:
    - No offensive posts, no personal attacks.
    - Posts must concern the near-term development of the bitcoin core
      code or bitcoin protocol.
    - Posts must contribute to bitcoin development.
    - Generally encouraged: patches, notification of pull requests, BIP
      proposals, academic paper announcements.  And discussions that follow.
    - Generally discouraged: shower thoughts, wild speculation, jokes, +1s,
      non-technical bitcoin issues, rehashing settled topics without new
      data, moderation concerns.
    - Detailed patch discussion generally better on the GitHub PR.
    - Meta-discussion is better on bitcoin-discuss:
      https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-discuss

  - We will make mistakes, we are human, so please be patient.

Your friendly moderators.

From luke at dashjr.org  Thu Oct 22 05:53:59 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 22 Oct 2015 05:53:59 +0000
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
Message-ID: <201510220554.00367.luke@dashjr.org>

On Friday, April 24, 2015 8:00:46 PM Justus Ranvier wrote:
> This link contains an RFC for a new type of Bitcoin address called a
> "payment code"

Sorry for the late review. I'm concerned with the "notification address" 
requirement, which entails address reuse and blockchain spam. Since it entails 
address reuse, the recipient is forced to either leave them unspent forever 
(bloating the UTXO set), or spend it which potentially compromises the private 
key, and (combined with the payment code) possibly as much as the entire 
wallet.

Instead, I suggest making it a single zero-value OP_RETURN output with two 
pushes: 1) a hash of the recipient's payment code, and 2) the encrypted 
payment code. This can be searched with standard bloom filters, or indexed 
with whatever other optimised algorithms are desired. At the same time, it 
never uses any space in the UTXO set, and never needs to be 
spent/mixed/dusted.

Luke

From decker.christian at gmail.com  Thu Oct 22 08:26:58 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 22 Oct 2015 08:26:58 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <201510212320.31052.luke@dashjr.org>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210846.43988.luke@dashjr.org>
	<CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>
	<201510212320.31052.luke@dashjr.org>
Message-ID: <CALxbBHUK_na0qKEBrkCzV2oAUc90wpL4z=7h6Zuu4XzaKEazrA@mail.gmail.com>

I think the scenario of the single signer re-ordering the outputs and
inputs and then re-signing the transaction is in the same category of
simple double-spends. The signer could just as well sign a completely
different transaction spending the same coins to somewhere else, so I don't
think there is a lot we can do about it even if we instate a canonical
ordering. Even if we order the inputs and outputs the signer can just add a
new input and output and we would have a different transaction.

Normalized transaction IDs do help in the case that the single signer wants
to immediately follow up its transaction with another transaction spending
the first one's change output, and it prevents any modification in the
multi-signer scenario.

On Thu, Oct 22, 2015 at 1:21 AM Luke Dashjr <luke at dashjr.org> wrote:

> On Wednesday, October 21, 2015 6:22:25 PM Danny Thorpe wrote:
> > Let's keep canonical ordering separate from the normalized transaction ID
> > proposal. Baby steps. Normalized transaction IDs provide an immediate
> > benefit against the hazard of third party manipulation of transactions in
> > the mempool, even without canonical ordering.
>
> My point is that third-party manipulation is not much more of a problem
> than
> signing-party manipulation. Solving the former (at a high cost), without
> solving the latter, seems not worth it IMO.
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/5181dce4/attachment-0001.html>

From luke at dashjr.org  Thu Oct 22 09:05:26 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 22 Oct 2015 09:05:26 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHUK_na0qKEBrkCzV2oAUc90wpL4z=7h6Zuu4XzaKEazrA@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510212320.31052.luke@dashjr.org>
	<CALxbBHUK_na0qKEBrkCzV2oAUc90wpL4z=7h6Zuu4XzaKEazrA@mail.gmail.com>
Message-ID: <201510220905.27124.luke@dashjr.org>

On Thursday, October 22, 2015 8:26:58 AM Christian Decker wrote:
> I think the scenario of the single signer re-ordering the outputs and
> inputs and then re-signing the transaction is in the same category of
> simple double-spends. The signer could just as well sign a completely
> different transaction spending the same coins to somewhere else, so I don't
> think there is a lot we can do about it even if we instate a canonical
> ordering. Even if we order the inputs and outputs the signer can just add a
> new input and output and we would have a different transaction.
> 
> Normalized transaction IDs do help in the case that the single signer wants
> to immediately follow up its transaction with another transaction spending
> the first one's change output, and it prevents any modification in the
> multi-signer scenario.

Except that unlike malicious double spending, adding more outputs to 
unconfirmed transactions is what wallets *should ideally be doing every time 
they send another transaction*. Spending unconfirmed change is the wrong 
approach. So half-fixing malleability as this PR would, encourages 
inefficient behaviour in multiple ways (first, by not making it malleability-
safe; second, by encouraging spending unconfirmed change).

Luke

From gmaxwell at gmail.com  Thu Oct 22 08:57:29 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 22 Oct 2015 08:57:29 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CALxbBHUK_na0qKEBrkCzV2oAUc90wpL4z=7h6Zuu4XzaKEazrA@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210846.43988.luke@dashjr.org>
	<CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>
	<201510212320.31052.luke@dashjr.org>
	<CALxbBHUK_na0qKEBrkCzV2oAUc90wpL4z=7h6Zuu4XzaKEazrA@mail.gmail.com>
Message-ID: <CAAS2fgTGaonZ=f9LbwYBa7_wnJdfmr-z3_7aTT8d1NewFHGS7g@mail.gmail.com>

On Thu, Oct 22, 2015 at 8:26 AM, Christian Decker via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Normalized transaction IDs do help in the case that the single signer wants
> to immediately follow up its transaction with another transaction spending
> the first one's change output, and it prevents any modification in the
> multi-signer scenario.

For ordinary transactions which are not performing interesting smart
contracts that particular is better addressed via canonical encoding,
which is immediately available and doesn't have the associated costs
(new pubkey type adoption, 20%-30% UTXO size increase, need for nodes
to fixup txid references, etc.).

Please, as I said up-thread: this is good and importantstuff to work
on, but it shouldn't be oversold.

From decker.christian at gmail.com  Thu Oct 22 11:54:17 2015
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 22 Oct 2015 11:54:17 +0000
Subject: [bitcoin-dev] [BIP] Normalized transaction IDs
In-Reply-To: <CAAS2fgTGaonZ=f9LbwYBa7_wnJdfmr-z3_7aTT8d1NewFHGS7g@mail.gmail.com>
References: <CALxbBHU+kdEAh_4+B663vknAAr8OKZpUzVTACORPZi47E=Ehkw@mail.gmail.com>
	<201510210846.43988.luke@dashjr.org>
	<CAJN5wHXSbZPuXN7PQRyOgOMuk2Ogooiww3hW93uNipQJnfkeOg@mail.gmail.com>
	<201510212320.31052.luke@dashjr.org>
	<CALxbBHUK_na0qKEBrkCzV2oAUc90wpL4z=7h6Zuu4XzaKEazrA@mail.gmail.com>
	<CAAS2fgTGaonZ=f9LbwYBa7_wnJdfmr-z3_7aTT8d1NewFHGS7g@mail.gmail.com>
Message-ID: <CALxbBHWaQ=_w0F=LkJHDxUB6QVM8MpH_Y-n2U3eowxYVpdBmQA@mail.gmail.com>

Indeed the reason I got started with all of this is the use of normalized
transaction IDs within smart contracts with multiple signers. Sorry if I
was perceived as overselling it :-)

So to summarize the discussions that have been on-going here as well as in
the PR so far, most people seem to agree that the BIP is an improvement for
smart-contracts as well as the third-party modification scenario. It comes
at the cost of increased UTXO size due to the additional hash being stored
per transaction with unclaimed outputs and some additional computations.
The additional computation is for the normalized ID computation and the
swapping in of normalized IDs during verification. No additional coin
lookups are needed as they are retrieved and cached anyway when verifying
the transaction. Would everybody agree with this assessment so far?

On the PR there were some additional suggestions of treating singlesig
transactions as 1-of-1 transactions and using Schnorr signatures for the
new opcode. Schnorr has been in the works for a long time and gives a
multitude of advantages, e.g., batch validation, and seems like a good
addition. Since the verify flag is mandatory due to the soft-fork migration
and we might merge singlesig and multisig into a single opcode we can
replace the bitmap of flags with a simple version number. Clients would
fall back to OP_NOP behaviour for versions they do not implement,
maintaining soft-fork semantics to build more future signing and
verification methods.

On Thu, Oct 22, 2015 at 10:57 AM Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Thu, Oct 22, 2015 at 8:26 AM, Christian Decker via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > Normalized transaction IDs do help in the case that the single signer
> wants
> > to immediately follow up its transaction with another transaction
> spending
> > the first one's change output, and it prevents any modification in the
> > multi-signer scenario.
>
> For ordinary transactions which are not performing interesting smart
> contracts that particular is better addressed via canonical encoding,
> which is immediately available and doesn't have the associated costs
> (new pubkey type adoption, 20%-30% UTXO size increase, need for nodes
> to fixup txid references, etc.).
>
> Please, as I said up-thread: this is good and importantstuff to work
> on, but it shouldn't be oversold.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/f94cd31f/attachment.html>

From justus at openbitcoinprivacyproject.org  Thu Oct 22 14:55:14 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Thu, 22 Oct 2015 09:55:14 -0500
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <201510220554.00367.luke@dashjr.org>
References: <201510220554.00367.luke@dashjr.org>
Message-ID: <5628F8D2.1010709@openbitcoinprivacyproject.org>

On 22/10/15 00:53, Luke Dashjr wrote:
> Sorry for the late review. I'm concerned with the "notification address" 
> requirement, which entails address reuse and blockchain spam. Since it entails 
> address reuse, the recipient is forced to either leave them unspent forever 
> (bloating the UTXO set), or spend it which potentially compromises the private 
> key, and (combined with the payment code) possibly as much as the entire 
> wallet.
> 
> Instead, I suggest making it a single zero-value OP_RETURN output with two 
> pushes: 1) a hash of the recipient's payment code, and 2) the encrypted 
> payment code. This can be searched with standard bloom filters, or indexed 
> with whatever other optimised algorithms are desired. At the same time, it 
> never uses any space in the UTXO set, and never needs to be 
> spent/mixed/dusted.

The notification transaction portion is my least-favorite portion of the
spec, but I don't see any alternatives that provide an unambiguous
improvement, including your suggestion.

One of the most highly-weighted goals of this proposal is to be usable
on as many mobile/light wallets as possible.

I know for sure that all existing platforms for balance querying index
by address. Support for bloom filters or other querying methods is less
comprehensive, meaning the set of wallets that can support payment codes
would be smaller.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/915cb984/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/915cb984/attachment.sig>

From admin at multipool.us  Thu Oct 22 16:06:51 2015
From: admin at multipool.us (Multipool Admin)
Date: Thu, 22 Oct 2015 09:06:51 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <1445414983.m7gvNPDAo8@garp>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
	<984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
	<1445414983.m7gvNPDAo8@garp>
Message-ID: <CAP3QyG+QnZ+51w=z_eM1+gQsWEO+Aj5FztyLNid8ym6duabesQ@mail.gmail.com>

This is a real issue.  The bitcoind process is getting killed every few
days when it reaches around 55gb of usage on my server.
On Oct 21, 2015 12:29 AM, "Tom Zander via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:
> >  claimed that he had this memory usage issue on Linux, but not on Mac OS
> X,
> > under a GBT workload in both situations. If this is true, that would
> > suggest this might be a fragmentation issue due to poor memory
> allocation.
>
> Please make sure you measure your memory usage correctly on Linux, it is
> notoriously easy to get misleading info from tools like top.
>
> I use this one on Linux.
>
> $cat ~/bin/showmemusage
> #!/bin/sh
> if test -z "$1"; then
>     echo "need a pid"
>     exit
> fi
>
> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \
> sed 's#^#+#' ) | bc`
> echo "$mem KB"
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/c5e051f0/attachment-0001.html>

From j at toom.im  Thu Oct 22 16:27:59 2015
From: j at toom.im (Jonathan Toomim)
Date: Thu, 22 Oct 2015 09:27:59 -0700
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <CAP3QyG+QnZ+51w=z_eM1+gQsWEO+Aj5FztyLNid8ym6duabesQ@mail.gmail.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
	<984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
	<1445414983.m7gvNPDAo8@garp>
	<CAP3QyG+QnZ+51w=z_eM1+gQsWEO+Aj5FztyLNid8ym6duabesQ@mail.gmail.com>
Message-ID: <EE15A8BE-0606-4610-B5A8-0C3C1BC5017E@toom.im>

You may want to add a cron job to restart bitcoind every day or two as a damage control mechanism until we figure this out.

On Oct 22, 2015, at 9:06 AM, Multipool Admin <admin at multipool.us> wrote:

> This is a real issue.  The bitcoind process is getting killed every few days when it reaches around 55gb of usage on my server.
> 
> On Oct 21, 2015 12:29 AM, "Tom Zander via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:
> >  claimed that he had this memory usage issue on Linux, but not on Mac OS X,
> > under a GBT workload in both situations. If this is true, that would
> > suggest this might be a fragmentation issue due to poor memory allocation.
> 
> Please make sure you measure your memory usage correctly on Linux, it is
> notoriously easy to get misleading info from tools like top.
> 
> I use this one on Linux.
> 
> $cat ~/bin/showmemusage
> #!/bin/sh
> if test -z "$1"; then
>     echo "need a pid"
>     exit
> fi
> 
> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \
> sed 's#^#+#' ) | bc`
> echo "$mem KB"
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> --
> You received this message because you are subscribed to the Google Groups "bitcoin-xt" group.
> To unsubscribe from this group and stop receiving emails from it, send an email to bitcoin-xt+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/4307d12c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/4307d12c/attachment.sig>

From btcdrak at gmail.com  Thu Oct 22 17:01:53 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 22 Oct 2015 18:01:53 +0100
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <EE15A8BE-0606-4610-B5A8-0C3C1BC5017E@toom.im>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
	<984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
	<1445414983.m7gvNPDAo8@garp>
	<CAP3QyG+QnZ+51w=z_eM1+gQsWEO+Aj5FztyLNid8ym6duabesQ@mail.gmail.com>
	<EE15A8BE-0606-4610-B5A8-0C3C1BC5017E@toom.im>
Message-ID: <CADJgMzvVJQxaoB7m=voo60whG4NQGV2jf0riN4QoM8eLGABxkA@mail.gmail.com>

I think this thread has gotten to the stage where it should be moved
to an issue on Github and not continue to CC the bitcoin-dev list (or
any other list tbh).

On Thu, Oct 22, 2015 at 5:27 PM, Jonathan Toomim via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> You may want to add a cron job to restart bitcoind every day or two as a
> damage control mechanism until we figure this out.
>
> On Oct 22, 2015, at 9:06 AM, Multipool Admin <admin at multipool.us> wrote:
>
> This is a real issue.  The bitcoind process is getting killed every few days
> when it reaches around 55gb of usage on my server.
>
> On Oct 21, 2015 12:29 AM, "Tom Zander via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:
>> >  claimed that he had this memory usage issue on Linux, but not on Mac OS
>> > X,
>> > under a GBT workload in both situations. If this is true, that would
>> > suggest this might be a fragmentation issue due to poor memory
>> > allocation.
>>
>> Please make sure you measure your memory usage correctly on Linux, it is
>> notoriously easy to get misleading info from tools like top.
>>
>> I use this one on Linux.
>>
>> $cat ~/bin/showmemusage
>> #!/bin/sh
>> if test -z "$1"; then
>>     echo "need a pid"
>>     exit
>> fi
>>
>> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \
>> sed 's#^#+#' ) | bc`
>> echo "$mem KB"
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> --
> You received this message because you are subscribed to the Google Groups
> "bitcoin-xt" group.
> To unsubscribe from this group and stop receiving emails from it, send an
> email to bitcoin-xt+unsubscribe at googlegroups.com.
> For more options, visit https://groups.google.com/d/optout.
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From luke at dashjr.org  Thu Oct 22 20:43:16 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 22 Oct 2015 20:43:16 +0000
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <5628F8D2.1010709@openbitcoinprivacyproject.org>
References: <201510220554.00367.luke@dashjr.org>
	<5628F8D2.1010709@openbitcoinprivacyproject.org>
Message-ID: <201510222043.17582.luke@dashjr.org>

On Thursday, October 22, 2015 2:55:14 PM Justus Ranvier wrote:
> On 22/10/15 00:53, Luke Dashjr wrote:
> > Sorry for the late review. I'm concerned with the "notification address"
> > requirement, which entails address reuse and blockchain spam. Since it
> > entails address reuse, the recipient is forced to either leave them
> > unspent forever (bloating the UTXO set), or spend it which potentially
> > compromises the private key, and (combined with the payment code)
> > possibly as much as the entire wallet.
> > 
> > Instead, I suggest making it a single zero-value OP_RETURN output with
> > two pushes: 1) a hash of the recipient's payment code, and 2) the
> > encrypted payment code. This can be searched with standard bloom
> > filters, or indexed with whatever other optimised algorithms are
> > desired. At the same time, it never uses any space in the UTXO set, and
> > never needs to be
> > spent/mixed/dusted.
> 
> The notification transaction portion is my least-favorite portion of the
> spec, but I don't see any alternatives that provide an unambiguous
> improvement, including your suggestion.
> 
> One of the most highly-weighted goals of this proposal is to be usable
> on as many mobile/light wallets as possible.
> 
> I know for sure that all existing platforms for balance querying index
> by address. Support for bloom filters or other querying methods is less
> comprehensive, meaning the set of wallets that can support payment codes
> would be smaller.

No, they just need to improve their software, and only to support receiving 
with payment codes (not sending to them). BIPs should in general not be 
designed around current software, especially in this case where there is no 
benefit to doing so (since it requires software upgrades anyway).

Luke

From justus at openbitcoinprivacyproject.org  Thu Oct 22 20:58:58 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Thu, 22 Oct 2015 15:58:58 -0500
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <201510222043.17582.luke@dashjr.org>
References: <201510220554.00367.luke@dashjr.org>
	<5628F8D2.1010709@openbitcoinprivacyproject.org>
	<201510222043.17582.luke@dashjr.org>
Message-ID: <56294E12.60301@openbitcoinprivacyproject.org>

On 22/10/15 15:43, Luke Dashjr wrote:
> BIPs should in general not be 
> designed around current software

I strongly disagree with this statement.

There is a version byte in the payment code specification for a reason.

Version 1 payment codes are designed to be deployable by wallet
implementers today, without requiring them to wait on any network-level
changes whatsoever, which includes IsStandard() redefinitions, or
yet-to-be-invented-and-deployed filtering schemes.

As far as I know, multi-push OP_RETURN outputs are not standard
transactions and so wallet users can not rely on transactions containing
them to be relayed through the network, therefore any improvement to the
protocol which requires that feature is not appropriate for version 1.

When additional capabilities are deployed in the network such that
Bitcoin users can rely on their existence, that would be a great time to
specify a version 2 payment code that uses those features and encourage
users to upgrade (which should be a fairly smooth process since their
actual keys don't need to change).
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/d079a180/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/d079a180/attachment-0001.sig>

From kristovatlas.lists at gmail.com  Thu Oct 22 21:05:39 2015
From: kristovatlas.lists at gmail.com (Kristov Atlas)
Date: Thu, 22 Oct 2015 17:05:39 -0400
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <201510222043.17582.luke@dashjr.org>
References: <201510220554.00367.luke@dashjr.org>
	<5628F8D2.1010709@openbitcoinprivacyproject.org>
	<201510222043.17582.luke@dashjr.org>
Message-ID: <CAGH37SJfZC0AA1mvrfhj5r8-Vb4UBM66-bpx9w1MAec1NFKHpQ@mail.gmail.com>

The consequence of previous ECDH address proposals "not designing around
current software" is a sustained ~70% of transactions reusing addresses, as
you saw in my Reddit post recently.

If you have a fear that an inferior proposal will gain popularity, you can
always propose a superior one. If it's *actually* superior, it will win out.

On Thu, Oct 22, 2015 at 4:43 PM, Luke Dashjr via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Thursday, October 22, 2015 2:55:14 PM Justus Ranvier wrote:
> > On 22/10/15 00:53, Luke Dashjr wrote:
> > > Sorry for the late review. I'm concerned with the "notification
> address"
> > > requirement, which entails address reuse and blockchain spam. Since it
> > > entails address reuse, the recipient is forced to either leave them
> > > unspent forever (bloating the UTXO set), or spend it which potentially
> > > compromises the private key, and (combined with the payment code)
> > > possibly as much as the entire wallet.
> > >
> > > Instead, I suggest making it a single zero-value OP_RETURN output with
> > > two pushes: 1) a hash of the recipient's payment code, and 2) the
> > > encrypted payment code. This can be searched with standard bloom
> > > filters, or indexed with whatever other optimised algorithms are
> > > desired. At the same time, it never uses any space in the UTXO set, and
> > > never needs to be
> > > spent/mixed/dusted.
> >
> > The notification transaction portion is my least-favorite portion of the
> > spec, but I don't see any alternatives that provide an unambiguous
> > improvement, including your suggestion.
> >
> > One of the most highly-weighted goals of this proposal is to be usable
> > on as many mobile/light wallets as possible.
> >
> > I know for sure that all existing platforms for balance querying index
> > by address. Support for bloom filters or other querying methods is less
> > comprehensive, meaning the set of wallets that can support payment codes
> > would be smaller.
>
> No, they just need to improve their software, and only to support receiving
> with payment codes (not sending to them). BIPs should in general not be
> designed around current software, especially in this case where there is no
> benefit to doing so (since it requires software upgrades anyway).
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/e2f8647f/attachment.html>

From jgarzik at gmail.com  Thu Oct 22 21:26:42 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 22 Oct 2015 17:26:42 -0400
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
Message-ID: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>

Here is the beginnings of an implementation to replace leveldb with sqlite:
https://github.com/jgarzik/bitcoin/tree/2015_sqlite

It builds, but still needs work before passing tests.

It was noted that leveldb is unmaintained, and this is part of researching
alternatives that are maintained and reliable.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/751780a6/attachment.html>

From luke at dashjr.org  Thu Oct 22 21:47:27 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 22 Oct 2015 21:47:27 +0000
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <56294E12.60301@openbitcoinprivacyproject.org>
References: <201510220554.00367.luke@dashjr.org>
	<201510222043.17582.luke@dashjr.org>
	<56294E12.60301@openbitcoinprivacyproject.org>
Message-ID: <201510222147.28878.luke@dashjr.org>

On Thursday, October 22, 2015 8:58:58 PM Justus Ranvier wrote:
> I strongly disagree with this statement.

Well, I strongly disagree with adopting the BIP as it stands.

> Version 1 payment codes are designed to be deployable by wallet
> implementers today, without requiring them to wait on any network-level
> changes whatsoever, which includes IsStandard() redefinitions, or
> yet-to-be-invented-and-deployed filtering schemes.

No, those are not network-level changes. They are mere software changes that 
can be deployed along with the rest of the proposal.

> As far as I know, multi-push OP_RETURN outputs are not standard
> transactions and so wallet users can not rely on transactions containing
> them to be relayed through the network, therefore any improvement to the
> protocol which requires that feature is not appropriate for version 1.

"Standard" means defined in a BIP. To date, there are no standard 
transactions using OP_RETURN period. IsStandard is a node policy that should 
have no influence on future BIPs.

> When additional capabilities are deployed in the network such that
> Bitcoin users can rely on their existence, that would be a great time to
> specify a version 2 payment code that uses those features and encourage
> users to upgrade (which should be a fairly smooth process since their
> actual keys don't need to change).

Such changes should not be made until there is a standard for them.

Luke

From justus at openbitcoinprivacyproject.org  Thu Oct 22 22:01:10 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Thu, 22 Oct 2015 17:01:10 -0500
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <201510222147.28878.luke@dashjr.org>
References: <201510220554.00367.luke@dashjr.org>
	<201510222043.17582.luke@dashjr.org>
	<56294E12.60301@openbitcoinprivacyproject.org>
	<201510222147.28878.luke@dashjr.org>
Message-ID: <56295CA6.4080208@openbitcoinprivacyproject.org>

On 22/10/15 16:47, Luke Dashjr wrote:
> Well, I strongly disagree with adopting the BIP as it stands.

That's fine. Nobody is required to adopt an informational BIP if they do
not wish to do so.

> No, those are not network-level changes. They are mere software changes that 
> can be deployed along with the rest of the proposal.

They are "mere software changes" outside the control of the users and
wallet developers who may wish to use and implement payment codes, so
are indistinguishable from a network-level change.

> "Standard" means defined in a BIP. To date, there are no standard 
> transactions using OP_RETURN period. IsStandard is a node policy that should 
> have no influence on future BIPs.

Since Bitcoin Core 0.11, 80 byte OP_RETURN transactions are standard, so
that's what payment codes use:

https://github.com/bitcoin/bitcoin/commit/fcf646c

Whether or not it "should" have an influence, it is an absolute fact
that Bitcoin users are affected by it.

A user whose transactions are not relayed or mined doesn't care about
the politics surrounding node policy.

Designing standards without putting the needs of its intended users
first is a great way to see the standard fail.

> Such changes should not be made until there is a standard for them.

Have you ever heard the term "permissionless innovation" by chance?
Particularly in reference to Bitcoin?

If you don't like payment codes, then don't use them.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/31d89835/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/31d89835/attachment-0001.sig>

From fireduck at gmail.com  Thu Oct 22 21:56:18 2015
From: fireduck at gmail.com (=?UTF-8?B?Sm9zZXBoIEdsZWFzb24g4pGI?=)
Date: Thu, 22 Oct 2015 21:56:18 +0000
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
Message-ID: <CA+ASnrH6VEawDmmD8FwQPFGYyJvsuicyTcHWxg-AU9RikwK8hg@mail.gmail.com>

I have done a lot of recent work on local key value stores, mostly for a
java electrum server I am working on.

I'd suggest considering LMDB.  One downside is that it is memory mapped so
32-bit systems that need over 2gb of storage are right out.  Other than
that, it is quite fast and seems reliable in my testing.


On Thu, Oct 22, 2015 at 2:37 PM Jeff Garzik via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Here is the beginnings of an implementation to replace leveldb with
> sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite
>
> It builds, but still needs work before passing tests.
>
> It was noted that leveldb is unmaintained, and this is part of researching
> alternatives that are maintained and reliable.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/50d97fdf/attachment.html>

From patrick.strateman at gmail.com  Thu Oct 22 21:54:14 2015
From: patrick.strateman at gmail.com (Patrick Strateman)
Date: Thu, 22 Oct 2015 14:54:14 -0700
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
Message-ID: <56295B06.8010200@gmail.com>

Benchmarks?

I cant imagine that's very fast.

On 10/22/2015 02:26 PM, Jeff Garzik via bitcoin-dev wrote:
> Here is the beginnings of an implementation to replace leveldb with
> sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite
>
> It builds, but still needs work before passing tests.
>
> It was noted that leveldb is unmaintained, and this is part of
> researching alternatives that are maintained and reliable.
>
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/a4fb1966/attachment.html>

From pete at petertodd.org  Fri Oct 23 01:22:48 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 22 Oct 2015 21:22:48 -0400
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <56294E12.60301@openbitcoinprivacyproject.org>
References: <201510220554.00367.luke@dashjr.org>
	<5628F8D2.1010709@openbitcoinprivacyproject.org>
	<201510222043.17582.luke@dashjr.org>
	<56294E12.60301@openbitcoinprivacyproject.org>
Message-ID: <20151023012248.GD22161@savin.petertodd.org>

On Thu, Oct 22, 2015 at 03:58:58PM -0500, Justus Ranvier via bitcoin-dev wrote:
> On 22/10/15 15:43, Luke Dashjr wrote:
> > BIPs should in general not be 
> > designed around current software
> 
> I strongly disagree with this statement.
> 
> There is a version byte in the payment code specification for a reason.
> 
> Version 1 payment codes are designed to be deployable by wallet
> implementers today, without requiring them to wait on any network-level
> changes whatsoever, which includes IsStandard() redefinitions, or
> yet-to-be-invented-and-deployed filtering schemes.
> 
> As far as I know, multi-push OP_RETURN outputs are not standard
> transactions and so wallet users can not rely on transactions containing
> them to be relayed through the network, therefore any improvement to the
> protocol which requires that feature is not appropriate for version 1.

FWIW multi-push OP_RETURN outputs will be standard in v0.12.0:

https://github.com/bitcoin/bitcoin/pull/6424

-- 
'peter'[:-1]@petertodd.org
0000000000000000066dc6b040d8be42153f784df37745b46c4ad667e0788781
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/ee1cb995/attachment.sig>

From rusty at rustcorp.com.au  Fri Oct 23 06:41:49 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 23 Oct 2015 17:11:49 +1030
Subject: [bitcoin-dev] Memory leaks?
In-Reply-To: <CADJgMzvVJQxaoB7m=voo60whG4NQGV2jf0riN4QoM8eLGABxkA@mail.gmail.com>
References: <99C42DE7-814A-48F8-AB28-A5ADD77A9FD9@toom.im>
	<1FE17DEB-8F77-4A60-A644-46A4F97D0E24@toom.im>
	<984D5FD5-9871-43FC-BD44-5F2E6EFD0671@toom.im>
	<1445414983.m7gvNPDAo8@garp>
	<CAP3QyG+QnZ+51w=z_eM1+gQsWEO+Aj5FztyLNid8ym6duabesQ@mail.gmail.com>
	<EE15A8BE-0606-4610-B5A8-0C3C1BC5017E@toom.im>
	<CADJgMzvVJQxaoB7m=voo60whG4NQGV2jf0riN4QoM8eLGABxkA@mail.gmail.com>
Message-ID: <87fv12axxu.fsf@rustcorp.com.au>

Btc Drak via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:
> I think this thread has gotten to the stage where it should be moved
> to an issue on Github and not continue to CC the bitcoin-dev list (or
> any other list tbh).

Agreed.  I couldn't see an issue, so I've opened one.  Let's track this
there, please.

https://github.com/bitcoin/bitcoin/issues/6876

Cheers,
Rusty.

From dev at jonasschnelli.ch  Fri Oct 23 06:53:20 2015
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Fri, 23 Oct 2015 08:53:20 +0200
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
Message-ID: <5629D960.8060109@jonasschnelli.ch>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

> Here is the beginnings of an implementation to replace leveldb
> with sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite
> 
> It builds, but still needs work before passing tests.

Nice work!

Although not sure if we should focus directly on sqlite4 (could be
optional with a configure flag and a subtree [until stable], sqlite3
supported over depends).

Also i personally would recommend to not implement it as a
replacement, instead, support multiple backends (wrapper header /
different wrapper implementations [leveldb / sqlite3 / sqlite4]). But
? agreed ? should not be the focus, but a nice additional flexibility
if it not require much more work.
And ? in theory ? multiple database back-ends would allow migration.

Before investigating to deep, i think we need a dbwrapper bench tool
that represents our needs and our style how we hit the database.
Gavins recently added bench target / bench environment could be used
for that.

/jonas
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1

iQIcBAEBAgAGBQJWKdlgAAoJECnUvLZBb1Ps7J8P/2L6215fd0rWGv5uvbLSnQvm
hy1T2AaOfH5HXd2m95icaKYk+ugvQAL80Q/67YwZbPLsT4fErgegw8n75Z6nh/Pc
OJ1EtAvD+Kc/Vm0Wcvt421HXwnm4f+j+8eoEvpG6DdC8gfIG+efhM7DljeNbPFrA
ieNe7XrQ1EZ29lMzpQv0nx3bi6tUHOWuazk82B6vnK49MjH7nrUFipcc18nXbSpM
ZKjQakXmfqIBG8QP9ZUYUlW4aoG0oaOoZnGjQA2LeXBJpIPLpE/WPg0XaXubC+No
232CJNtNyUOmjkb2qbep6vSYgqGJNy1HbCU5y3qooxJhFnKdo63CQsyJKSpL/ssi
0lWraNxjbacxsBn+63In3wEkj02orwm2zTO4I77wCrZmJgpvBFb9bZWTeL8DCYSG
DTkZoKWEK74xvm+dNpEWXK9Lm1ltfyhPdaFeMoRDub4w2uuYlk3KuD8Vdy81HYJb
sak8FbkiWw9xx2OP9+G56Arf9W6mnJ3YHJGrY4SXeRAfuNYwGFHIGt6I1JobuHy4
VWmcHuooz/Q9JLUu3Rr3HsEdXYgCmgmWuzTgWG+Hx92Y6XLWV5pOX+vFRO6J5fSm
aTYPD4GsTM3FROXw5ezlXJ+2y1+ITzmrfm03fEDQvoIyH0TwBqBc5sMBBkma5DDR
0HUthPHWCD+AxbBPbRVa
=CUMX
-----END PGP SIGNATURE-----

From lucasbetschart at gmail.com  Fri Oct 23 07:45:09 2015
From: lucasbetschart at gmail.com (Lucas Betschart)
Date: Fri, 23 Oct 2015 09:45:09 +0200
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
Message-ID: <CAAox1Hg-O7Y63mH6RQCtWqZRL52MZK6xSAxgBDDXhf6_bHkH0w@mail.gmail.com>

Facebook has a LevelDB fork which is maintained.
It's called RocksDB and the API seems to be nearly the same as for LevelDB,
thus maybe easy to replace: http://rocksdb.org/
https://github.com/facebook/rocksdb

Although I don't know if we might have some negative effects for our
use-case since RocksDB was optimized for big databases running on multiple
cores.


2015-10-22 23:26 GMT+02:00 Jeff Garzik via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org>:

> Here is the beginnings of an implementation to replace leveldb with
> sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite
>
> It builds, but still needs work before passing tests.
>
> It was noted that leveldb is unmaintained, and this is part of researching
> alternatives that are maintained and reliable.
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/2f7f59b1/attachment-0001.html>

From tomz at freedommail.ch  Fri Oct 23 10:30:37 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Fri, 23 Oct 2015 11:30:37 +0100
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
Message-ID: <3162730.lzR74nC3xW@garp>

On Thursday 22 Oct 2015 17:26:42 Jeff Garzik via bitcoin-dev wrote:
> It was noted that leveldb is unmaintained, and this is part of researching
> alternatives that are maintained and reliable.

Apart from it being unmaintained, any links to what are problems with levelDB?


From hearn at vinumeris.com  Fri Oct 23 11:30:22 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Fri, 23 Oct 2015 13:30:22 +0200
Subject: [bitcoin-dev] Mailing List Moderation Now Active.
In-Reply-To: <878u6velnc.fsf@rustcorp.com.au>
References: <878u6velnc.fsf@rustcorp.com.au>
Message-ID: <CA+w+GKSo75Y3bum+NOVjvaSiqyAozirg=PUrF-3ACg5GRXcp2w@mail.gmail.com>

>
>     - Posts must concern the near-term development of the bitcoin core
>       code or bitcoin protocol.
>

Are block size discussions considered acceptable, then?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/8d456d44/attachment.html>

From justus at openbitcoinprivacyproject.org  Fri Oct 23 15:57:14 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Fri, 23 Oct 2015 10:57:14 -0500
Subject: [bitcoin-dev] [Bitcoin-development] Reusable payment codes
In-Reply-To: <20151023012248.GD22161@savin.petertodd.org>
References: <201510220554.00367.luke@dashjr.org>
	<5628F8D2.1010709@openbitcoinprivacyproject.org>
	<201510222043.17582.luke@dashjr.org>
	<56294E12.60301@openbitcoinprivacyproject.org>
	<20151023012248.GD22161@savin.petertodd.org>
Message-ID: <562A58DA.1020403@openbitcoinprivacyproject.org>

On 22/10/15 20:22, Peter Todd wrote:
> FWIW multi-push OP_RETURN outputs will be standard in v0.12.0:
> 
> https://github.com/bitcoin/bitcoin/pull/6424
> 

As I said before, once the prerequisites for a better notification
method are usable in the network, I'd love to define a version 2 payment
code that uses such an better notification system.

In the meantime. every block mined shows very consistent 70% address reuse.

Anything that can bring that number down is a good thing. Even if
version 1 payment codes could only potentially drop that number from 70%
to 30% instead of to 0%, they'd still be worth using while we wait for
version 2.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/bcaecfa8/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/bcaecfa8/attachment.sig>

From mikko2162 at yahoo.com  Sat Oct 24 16:30:00 2015
From: mikko2162 at yahoo.com (cAmiLLe miGnon tRixia P. Anecito)
Date: Sun, 25 Oct 2015 00:30:00 +0800
Subject: [bitcoin-dev] (no subject)
Message-ID: <1445704200.39729.YahooMailAndroidMobile@web193104.mail.sg3.yahoo.com>



Sent from Yahoo Mail on Android

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151025/99498579/attachment.html>

From email at willwhite.uk  Mon Oct 26 12:12:03 2015
From: email at willwhite.uk (Will White)
Date: Mon, 26 Oct 2015 12:12:03 +0000
Subject: [bitcoin-dev] Bitcoin URI for multiple addresses without using URLs
Message-ID: <562E1893.2070209@willwhite.uk>

Dear bitcoin-dev,

I'm making a website to tell my bitcoin wallet program to donate to more 
than one address at a time. BIP71 needs me to include a URL to do this, 
and then the wallet has to find out the information from the URL. I'd 
prefer to just send my wallet a URI with all the information it needs to 
make the donations.

Please would you tell me if this idea is BIP-able?

Will

From joroark at vt.edu  Mon Oct 26 18:06:56 2015
From: joroark at vt.edu (Douglas Roark)
Date: Mon, 26 Oct 2015 11:06:56 -0700
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <3162730.lzR74nC3xW@garp>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
	<3162730.lzR74nC3xW@garp>
Message-ID: <562E6BC0.7010002@vt.edu>

On 2015/10/23 03:30, Tom Zander via bitcoin-dev wrote:
> On Thursday 22 Oct 2015 17:26:42 Jeff Garzik via bitcoin-dev wrote:
>> It was noted that leveldb is unmaintained, and this is part of researching
>> alternatives that are maintained and reliable.
> 
> Apart from it being unmaintained, any links to what are problems with levelDB?

While not exactly the most rigorous link,
https://en.wikipedia.org/wiki/LevelDB#Bugs_and_Reliability seems like an
okay place to start. One thing I can attest to is that, when Armory used
LevelDB (0.8 - 0.92, IIRC), quite a few users had DB corruption issues,
particularly on Windows. Even when a switch to LMDB occurred for 0.93,
loads of complaints would come in from users whose LevelDB-based Core
DBs would fail. I know that the guy who moved Armory over to LMDB would
love to have more time in the day so that he could write a Core patch
that does the same. It's a very sore spot for him.

(FWIW, LMDB seems to work quite nicely, at least once you patch up the
source a little bit. The latest version is also compatible with Core's
cross-compiling scheme. I'd love to see it added to Core one day.)

Doug

From andreas at schildbach.de  Tue Oct 27 09:12:52 2015
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 27 Oct 2015 10:12:52 +0100
Subject: [bitcoin-dev] Bitcoin URI for multiple addresses without using
	URLs
In-Reply-To: <562E1893.2070209@willwhite.uk>
References: <562E1893.2070209@willwhite.uk>
Message-ID: <n0nf6f$pam$1@ger.gmane.org>

On 10/26/2015 01:12 PM, Will White via bitcoin-dev wrote:

> I'm making a website to tell my bitcoin wallet program to donate to more
> than one address at a time. BIP71 needs me to include a URL to do this,
> and then the wallet has to find out the information from the URL. I'd
> prefer to just send my wallet a URI with all the information it needs to
> make the donations.

You can do this using a BIP70 payment request. It allows you to specify
several scripts (addresses) to pay to, and the individual amounts for
each script.

BIP70 payment requests can be transmitted via NFC, Bluetooth, HTTP(S),
Mail... see
https://github.com/schildbach/bitcoin-wallet/wiki/Payment-Requests for
an overview.




From xor at freenetproject.org  Tue Oct 27 15:21:58 2015
From: xor at freenetproject.org (xor)
Date: Tue, 27 Oct 2015 16:21:58 +0100
Subject: [bitcoin-dev] Mailing List Moderation Now Active.
In-Reply-To: <878u6velnc.fsf@rustcorp.com.au>
References: <878u6velnc.fsf@rustcorp.com.au>
Message-ID: <15718474.uA0ggx9rdo@1337h4x0r>

On Thursday, October 22, 2015 11:59:11 AM Rusty Russell via bitcoin-dev wrote:
>   - All rejected posts will be forwarded to a list for public viewing:
>     https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/

They are not readable, they all say:
> An embedded message was scrubbed...
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151027/63721ace/attachment.sig>

From lf-lists at mattcorallo.com  Wed Oct 28 02:08:52 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Wed, 28 Oct 2015 02:08:52 +0000
Subject: [bitcoin-dev] Bitcoin-NG whitepaper.
In-Reply-To: <CABT1wWm0QXjGAXgrBMT7w+25kcsEJnP8JZ5RSpuk3aefX45+wQ@mail.gmail.com>
References: <CAPkFh0viwmkUvjo4Qj50TNnkA5kG3z-3dLGExjkmDacE4E49Ow@mail.gmail.com>
	<CABaSBaxWAsEG71FTy4SrVu94BXokeozmJ80tjsNU8ERpTfFaFA@mail.gmail.com>
	<CABT1wW=xqShMGU0+eDiNyNkr-77fQ_HnyKL87C6iGL-xq8BYVw@mail.gmail.com>
	<28CC699B-4DA8-4472-A795-9505418C688A@mattcorallo.com>
	<CABT1wWm0QXjGAXgrBMT7w+25kcsEJnP8JZ5RSpuk3aefX45+wQ@mail.gmail.com>
Message-ID: <56302E34.7070906@mattcorallo.com>

Oops, just realized I never responded to this...

On 10/15/15 15:09, Ittay wrote:
> Thanks, Matt. Response inline. 
> 
> On Wed, Oct 14, 2015 at 2:57 PM, Matt Corallo <lf-lists at mattcorallo.com
> <mailto:lf-lists at mattcorallo.com>> wrote:
> 
>     That conversation missed a second issue. Namely that there is no way
>     to punish people if there is a double spend in a micro block that
>     happens in key block which reorg'd away the first transaction. eg
>     one miner mines a transaction in a micro block, another miner
>     (either by not having seen the first yet, or being malicious -
>     potentially the same miner) mines a key block which reorgs away the
>     first micro block and then, in their first micro block, mines a
>     double spend. This can happen at any time, so you end up having to
>     fall back to regular full blocks for confirmation times :(.
> 
> 
> If NG is to be used efficiently, microblocks are going to be very
> frequent, and so such forks should occur at almost every key-block
> publication. Short reorgs as you described are the norm. A user should
> wait before accepting a transaction to make sure there was no key-block
> she missed. The wait time is chosen according to the network propagation
> delay (+as much slack as the user feels necessary). This is similar to
> the situation in Bitcoin when you receive a block. To be confident that
> you have one confirmation you should wait for the propagation time of
> the network to make sure there is no branch you missed. 

I think you're overstating how short the wait times can be. They need to
be much longer than the network propagation delay.

> As for the malicious case: the attacker has to win the key-block, have
> the to-be-inverted transaction in the previous epoch, and withhold his
> key-block for a while. That being said, indeed our fraud proof scheme
> doesn't catch such an event, as it is indistinguishable from benign
> behavior. 

The attacker does not need to withold their keyblock at all. All the
attacker does is, for every transaction they ever send, after it is
included in a microblock, set their hashpower to start mining a keyblock
immediately prior to this microblock. When they find a keyblock, they
immediately announce it and start creating microblocks, the first of
which double-spends the previous transaction. If they dont win the key
block, oh well, their payment went through normally and they couldn't
double-spend.

In chatting with Glenn about this, we roughly agreed that the
confirmation time for microblocks possibly doesn't need to be a full
key-block, but it needs to be a reasonable period after which such an
attacker would lose more in fees than the value of their double-spend
(ie because the key-block afterwards gets 20% more in fees than the
key-block before hand). In any case, the game theory here starts to get
rather complicated and it doesn't make me want to suggest accepting
microblocks as confirmations is safe.

>     Also, Greg Slepak brought up a good point on twitter at
>     https://twitter.com/taoeffect/status/654358023138209792. Noting that
>     this model means users could no longer pick transactions in a mining
>     pool which was set up in such a way (it could be tweaked to do so
>     with separate rewards and pubkeys, but now the user can commit fraud
>     at a much lower cost - their own pool reward, not the block's total
>     reward).
> 
> 
> Agreed x3: This is a good point, it is correct, and the tweak is dangerous. 
> Do you perceive this as a significant practical issue? 

It is not a practical issue today because no one does it, but it is a
massive issue in that the splitting of pool rewards and transaction
selection is one of the few easy wins we have left in the fight against
mining centralization. Mining centralization today is absolutely awful,
and closing off our only big win would be tragic.

>     On October 14, 2015 11:28:51 AM PDT, Ittay via bitcoin-dev
>     <bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
> 
>         On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com
>         <mailto:kanzure at gmail.com>> wrote:
> 
>             On Wed, Oct 14, 2015 at 1:02 PM, Emin G?n Sirer
>             <bitcoin-dev at lists.linuxfoundation.org
>             <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>             > while the whitepaper has all the nitty gritty details:
>             >      http://arxiv.org/abs/1510.02037
> 
>             Taking reward compensation back by fraud proofs is not
>             enough to fix
>             the problems associated with double spending (such as,
>             everyone has to
>             wait for the "real" confirmations instead of the "possibly
>             double-spend" confirmations). Some of this was discussed in
>             -wizards
>             recently:
>             http://gnusha.org/bitcoin-wizards/2015-09-19.log
> 
> 
>         Fraud proof removes all the attacker's revenue. It's like the
>         attacker sacrifices an entire block for double spending in the
>         current system. I think Luke-Jr got it right at that discussion. 
> 
>         Best, 
>         Ittay 
> 
>         ------------------------------------------------------------------------
> 
>         bitcoin-dev mailing list
>         bitcoin-dev at lists.linuxfoundation.org
>         <mailto:bitcoin-dev at lists.linuxfoundation.org>
>         https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 

From j at toom.im  Wed Oct 28 04:26:52 2015
From: j at toom.im (Jonathan Toomim)
Date: Tue, 27 Oct 2015 21:26:52 -0700
Subject: [bitcoin-dev] Composite priority: combining fees and bitcoin-days
	into one number
Message-ID: <291B85A6-D8D4-443B-B03B-C675CBEEC662@toom.im>

Assigning 5% of block space based on bitcoin-days destroyed (BDD) and the other 95% based on fees seems like a rather awkward approach to me. For one thing, it means two code paths in pretty much every procedure dealing with a constrained resource (e.g. mempool, CNB). This makes code harder two write, harder to maintain, and slower to execute. As a result, some people have proposed eliminating BDD priority altogether. I have another idea.

We can create and maintain a conversion rate between BDD and fees to create a composite priority metric. Then we just do compPrio = BDD * conversionRate + txFee.

How do we calculate conversionRate? We want the following equation to be true:

sum(fees) = sum(BDD) * conversionRate * BDDweight

So we sum up the mempool fees, and we sum up the mempool BDD. We get a policy statement from the command line for a relative weight of BDD vs fees (default 0.05), and then conversionRate = (summedFees / summedBDD) * BDDWeight.

As an optimization, rather than scanning over the whole mempool to calculate this, we can just store the sum and add or subtract from it each time a tx enters or leaves the mempool. In order to minimize drift (the BDD for a transaction changes over time), we recalculate the whole thing each time a new block is found.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151027/bb663efd/attachment.sig>

From luke at dashjr.org  Wed Oct 28 07:13:55 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 28 Oct 2015 07:13:55 +0000
Subject: [bitcoin-dev] Composite priority: combining fees and
	bitcoin-days into one number
In-Reply-To: <291B85A6-D8D4-443B-B03B-C675CBEEC662@toom.im>
References: <291B85A6-D8D4-443B-B03B-C675CBEEC662@toom.im>
Message-ID: <201510280713.56677.luke@dashjr.org>

On Wednesday, October 28, 2015 4:26:52 AM Jonathan Toomim via bitcoin-dev 
wrote:
> Assigning 5% of block space based on bitcoin-days destroyed (BDD) and the
> other 95% based on fees seems like a rather awkward approach to me. For
> one thing, it means two code paths in pretty much every procedure dealing
> with a constrained resource (e.g. mempool, CNB). This makes code harder
> two write, harder to maintain, and slower to execute.

This is all in the realm of node policy, which must be easy to 
modify/customise in a flexible manner. So simplifying other code in a way that 
makes the policy harder to configure is not a welcome change.

That is, by making the code simpler, if you make custom policies (such as the 
current default) harder, it is better to leave the main code less simple.

Luke

From hearn at vinumeris.com  Wed Oct 28 10:26:56 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Wed, 28 Oct 2015 11:26:56 +0100
Subject: [bitcoin-dev] Mailing List Moderation Now Active.
In-Reply-To: <CABsx9T32Y94cXyubaedpicH=izCEBBN662b0oTNSi5sN6hnM=w@mail.gmail.com>
References: <878u6velnc.fsf@rustcorp.com.au>
	<CA+w+GKSo75Y3bum+NOVjvaSiqyAozirg=PUrF-3ACg5GRXcp2w@mail.gmail.com>
	<CABsx9T32Y94cXyubaedpicH=izCEBBN662b0oTNSi5sN6hnM=w@mail.gmail.com>
Message-ID: <CA+w+GKRcR2jL_39NuS-Yvu1xLc4y6A4tU5dxDN9+5Z2jUc_mrg@mail.gmail.com>

This post by Gavin got rejected by the moderators.

Without a doubt this moderation policy is already a disaster. I'm fully
expecting this message to get rejected too, but so you can see it Rusty: so
far in the reject bin there are messages from:

   - Well known uber-troll Gavin Andresen
   - And his partner in crime, Sergio Damian Lerner
   - Someone discussing a bug
   - Someone who wants to discuss CLTV
   - Someone pointing out that censorship of technical discussion is rarely
   a good idea
   - Someone pointing out that censorship of people complaining about
   censorship is also taking place.

WTF?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/254d91ec/attachment.html>

From gavinandresen at gmail.com  Wed Oct 28 14:06:22 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 28 Oct 2015 10:06:22 -0400
Subject: [bitcoin-dev] Compatibility requirements for hard or soft forks
Message-ID: <CABsx9T0Evf3B_NtmdKxc_M1xRQh-jSC4JzTHCx8Ez9RzCypvMg@mail.gmail.com>

I'm hoping this fits under the moderation rule of "short-term changes to
the Bitcoin protcol" (I'm not exactly clear on what is meant by
"short-term"; it would be lovely if the moderators would start a thread on
bitcoin-discuss to clarify that):


Should it be a requirement that ANY one-megabyte transaction that is valid
under the existing rules also be valid under new rules?

Pro:  There could be expensive-to-validate transactions created and given a
lockTime in the future stored somewhere safe. Their owners may have no
other way of spending the funds (they might have thrown away the private
keys), and changing validation rules to be more strict so that those
transactions are invalid would be an unacceptable confiscation of funds.

Con: It is extremely unlikely there are any such large, timelocked
transactions, because the Core code has had a clear policy for years that
100,000-byte transactions are &quot;standard&quot; and are relayed and
mined, and
larger transactions are not. The requirement should be relaxed so that only
valid 100,000-byte transaction under old consensus rules must be valid
under new consensus rules (larger transactions may or may not be valid).


I had to wrestle with that question when I implemented BIP101/Bitcoin XT
when deciding on a limit for signature hashing (and decided the right
answer was to support any "non-attack"1MB transaction; see
https://bitcoincore.org/~gavin/ValidationSanity.pdf for more details).

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/061c73f2/attachment.html>

From tomz at freedommail.ch  Wed Oct 28 15:52:53 2015
From: tomz at freedommail.ch (Tom Zander)
Date: Wed, 28 Oct 2015 15:52:53 +0000
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <562E6BC0.7010002@vt.edu>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
	<3162730.lzR74nC3xW@garp> <562E6BC0.7010002@vt.edu>
Message-ID: <2265352.UXJLTKs9q7@garp>

On Monday 26 Oct 2015 11:06:56 Douglas Roark via bitcoin-dev wrote:
> While not exactly the most rigorous link,
> https://en.wikipedia.org/wiki/LevelDB#Bugs_and_Reliability seems like an
> okay place to start.

Thanks for that link!

Another Google open source product I'll avoid like the plague ;)

From seanl at literati.org  Wed Oct 28 20:28:00 2015
From: seanl at literati.org (Sean Lynch)
Date: Wed, 28 Oct 2015 20:28:00 +0000
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CAAox1Hg-O7Y63mH6RQCtWqZRL52MZK6xSAxgBDDXhf6_bHkH0w@mail.gmail.com>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
	<CAAox1Hg-O7Y63mH6RQCtWqZRL52MZK6xSAxgBDDXhf6_bHkH0w@mail.gmail.com>
Message-ID: <CAHKdp-nbP6e6aDyU3hs3o7PfORsW=1xaEJ4Zyp8QNrubXUeQDg@mail.gmail.com>

On Fri, Oct 23, 2015 at 1:23 AM Lucas Betschart via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Facebook has a LevelDB fork which is maintained.
> It's called RocksDB and the API seems to be nearly the same as for
> LevelDB, thus maybe easy to replace: http://rocksdb.org/
> https://github.com/facebook/rocksdb
>
> Although I don't know if we might have some negative effects for our
> use-case since RocksDB was optimized for big databases running on multiple
> cores.
>

While RocksDB is pretty decent, note that it's optimized for flash. Not
sure how well it will work on spinning disks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/a9c13b86/attachment.html>

From jgarzik at gmail.com  Wed Oct 28 21:11:47 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 28 Oct 2015 17:11:47 -0400
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CAHKdp-nbP6e6aDyU3hs3o7PfORsW=1xaEJ4Zyp8QNrubXUeQDg@mail.gmail.com>
References: <CADm_WcaLQzigsdmFR43JqiCYJVpmqkhVDc8GiVG=UN+Z1zg7+w@mail.gmail.com>
	<CAAox1Hg-O7Y63mH6RQCtWqZRL52MZK6xSAxgBDDXhf6_bHkH0w@mail.gmail.com>
	<CAHKdp-nbP6e6aDyU3hs3o7PfORsW=1xaEJ4Zyp8QNrubXUeQDg@mail.gmail.com>
Message-ID: <CADm_WcYYgumV8mYO1zvW-dwzR4j9Sp4Hp6Zef4vDO8aVN-eTmg@mail.gmail.com>

On Wed, Oct 28, 2015 at 4:28 PM, Sean Lynch <seanl at literati.org> wrote:

> On Fri, Oct 23, 2015 at 1:23 AM Lucas Betschart via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Facebook has a LevelDB fork which is maintained.
>> It's called RocksDB and the API seems to be nearly the same as for
>> LevelDB, thus maybe easy to replace: http://rocksdb.org/
>> https://github.com/facebook/rocksdb
>>
>> Although I don't know if we might have some negative effects for our
>> use-case since RocksDB was optimized for big databases running on multiple
>> cores.
>>
>
> While RocksDB is pretty decent, note that it's optimized for flash. Not
> sure how well it will work on spinning disks.
>

That's OK for our purposes.  We have a huge database which already
incentivized having zero seek time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/4d05bbae/attachment.html>

From j at toom.im  Wed Oct 28 22:41:39 2015
From: j at toom.im (Jonathan Toomim)
Date: Wed, 28 Oct 2015 15:41:39 -0700
Subject: [bitcoin-dev] Composite priority: combining fees and
	bitcoin-days into one number
In-Reply-To: <201510280713.56677.luke@dashjr.org>
References: <291B85A6-D8D4-443B-B03B-C675CBEEC662@toom.im>
	<201510280713.56677.luke@dashjr.org>
Message-ID: <554CB626-4CCC-4607-9A1F-E583A52989A6@toom.im>


On Oct 28, 2015, at 12:13 AM, Luke Dashjr <luke at dashjr.org> wrote:

> On Wednesday, October 28, 2015 4:26:52 AM Jonathan Toomim via bitcoin-dev
> wrote:
> 
> This is all in the realm of node policy, which must be easy to
> modify/customise in a flexible manner. So simplifying other code in a way that
> makes the policy harder to configure is not a welcome change.
> 
> That is, by making the code simpler, if you make custom policies (such as the
> current default) harder, it is better to leave the main code less simple.

I think the only custom policy that this change would make harder to implement is the current default policy of 5% reserved space. Right now, in e.g. CreateNewBlock, you have two loops, each of which follows a completely different policy, plus additional code for corner cases like ensuring that a tx isn't added twice. If I were a miner and a mediocre programmer (which I actually am, on both accounts), and I wanted to change the mining policy, I would probably take a look at that code, groan, give up, and go sharpen my pickaxe instead.

This change could be written in an abstract way. We could define an API that is calibrated on the whole mempool, then has a method that takes transactions and returns priority scores.

If someone wanted to write a reserved-space algorithm in this priority API scheme, then they could just set it up so that most transactions would get a priority score between e.g. zero and 8999, and any transactions that were supposed to be prioritized would get a priority level over 9000. Easy enough?


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/a63666af/attachment.sig>

From luke at dashjr.org  Thu Oct 29 00:55:53 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 29 Oct 2015 00:55:53 +0000
Subject: [bitcoin-dev] Composite priority: combining fees and
	bitcoin-days into one number
In-Reply-To: <554CB626-4CCC-4607-9A1F-E583A52989A6@toom.im>
References: <291B85A6-D8D4-443B-B03B-C675CBEEC662@toom.im>
	<201510280713.56677.luke@dashjr.org>
	<554CB626-4CCC-4607-9A1F-E583A52989A6@toom.im>
Message-ID: <201510290055.53979.luke@dashjr.org>

On Wednesday, October 28, 2015 10:41:39 PM Jonathan Toomim wrote:
> On Oct 28, 2015, at 12:13 AM, Luke Dashjr <luke at dashjr.org> wrote:
> > On Wednesday, October 28, 2015 4:26:52 AM Jonathan Toomim via bitcoin-dev
> > wrote:
> > 
> > This is all in the realm of node policy, which must be easy to
> > modify/customise in a flexible manner. So simplifying other code in a way
> > that makes the policy harder to configure is not a welcome change.
> > 
> > That is, by making the code simpler, if you make custom policies (such as
> > the current default) harder, it is better to leave the main code less
> > simple.
> 
> I think the only custom policy that this change would make harder to
> implement is the current default policy of 5% reserved space. Right now,
> in e.g. CreateNewBlock, you have two loops, each of which follows a
> completely different policy, plus additional code for corner cases like
> ensuring that a tx isn't added twice. If I were a miner and a mediocre
> programmer (which I actually am, on both accounts), and I wanted to change
> the mining policy, I would probably take a look at that code, groan, give
> up, and go sharpen my pickaxe instead.

Yes, I hope to improve the code significantly.

> This change could be written in an abstract way. We could define an API
> that is calibrated on the whole mempool, then has a method that takes
> transactions and returns priority scores.

Trying to communicate policies as simple numbers is significantly more 
complicated for the policy-writer than what we have now.

> If someone wanted to write a reserved-space algorithm in this priority API
> scheme, then they could just set it up so that most transactions would get
> a priority score between e.g. zero and 8999, and any transactions that
> were supposed to be prioritized would get a priority level over 9000. Easy
> enough?

No, because it gets exponentially harder when there are more than two factors 
involved.

Luke

From telemaco at neomailbox.net  Thu Oct 29 06:57:39 2015
From: telemaco at neomailbox.net (telemaco)
Date: Thu, 29 Oct 2015 07:57:39 +0100
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
Message-ID: <5631C363.5060705@neomailbox.net>

Why not allow two options:

1/ a default RocksDB/SQLite/LevelDB (whatever is decided)
2/ alternative provide instructions for connection to any other rdbms 
using odbc or jdbc.

Why not allowing async disk writes or incredibly fast database systems 
if someone wants to have a node in a very fast datacenter or connected 
with their existing leveraged dataservers. It is the traditional 
approach to just use the open standard for database connectivity.

Any person or any organization would just need to have one machine with 
their bitcoin node with a rdbms client installed (SAP Sybase client, or 
oracle client, or microsoft). The bitcoin node would just store their 
data using the odbc/jdbc protocol on ANY rdbms installed anywhere in 
their organization (other machine or the same). They would just need to 
issue a "create table" with a very simple table structure and they would 
benefit from async and indexes and using their already licensed, and 
configured system of their choosing, with bitcoin information being 
available to thousands of software packages and available aswell to 
thousands of programmers that work with rdbms and not just "RocksDB" or 
some obscure database system.

Why not "outsource" totally that data management part to the already 
existing with decades of experience database world. People would be able 
to create incredibly easy bitcoin statistics/graphs/analisys with 
existing software packages (hey even excel or libreoffice like) or 
connect bitcoin data to their own sources and if so they chose analyze 
bitcoin data on a datawarehouse or any imaginable approach. Of course 
every transaction would be have to do through the bitcoin node and only 
the data management would be on rdbms side.



From luke at dashjr.org  Thu Oct 29 08:03:50 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 29 Oct 2015 08:03:50 +0000
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <5631C363.5060705@neomailbox.net>
References: <5631C363.5060705@neomailbox.net>
Message-ID: <201510290803.52734.luke@dashjr.org>

On Thursday, October 29, 2015 6:57:39 AM telemaco via bitcoin-dev wrote:
> Why not allow two options:
> 
> 1/ a default RocksDB/SQLite/LevelDB (whatever is decided)
> 2/ alternative provide instructions for connection to any other rdbms
> using odbc or jdbc.

I predict this would be a disaster. UTXO storage is CONSENSUS-CRITICAL code.
Any divergence in implementation behaviour, including bugs AND bugfixes, may 
cause consensus failure. For this to have a reasonable *hope* of working, we 
need to choose one storage engine, and *will* need to maintain consensus-
compatibility of it ourselves (since nobody else cares).

Fixing LevelDB frankly seems like an easier task than switching to anything 
SQL-based, which would require a *lot* more *difficult-to-get-consensus-
compatible* code that we are all (or at least mostly) very unfamiliar with.

Research is fine, but let's be realistic about deployment.

Luke

From gmaxwell at gmail.com  Thu Oct 29 08:17:27 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 29 Oct 2015 08:17:27 +0000
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <5631C363.5060705@neomailbox.net>
References: <5631C363.5060705@neomailbox.net>
Message-ID: <CAAS2fgQ=+5b4tht9SeGVJPXDbqKan=Y8x7Q5F=uT5iiq+BnHJA@mail.gmail.com>

On Thu, Oct 29, 2015 at 6:57 AM, telemaco via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Why not "outsource" totally that data management part to the already
> existing with decades of experience database world. People would be able to
> create incredibly easy bitcoin statistics/graphs/analisys with existing
> software packages (hey even excel or libreoffice like) or connect bitcoin
> data to their own sources and if so they chose analyze bitcoin data on a
> datawarehouse or any imaginable approach. Of course every transaction would
> be have to do through the bitcoin node and only the data management would be
> on rdbms side.

The word "database" is likely confusing people here.  This is not a
database in an ordinary sense.

The bitcoin core consensus engine requires a highly optimized ultra
compact data structure to perform the lookups for coin existence. The
data stored is highly compressed and very specialized, it would not be
useful to other applications.  Right now, on boring laptop hardware,
during network synchronization updates to this database run at over
10,000 records per second, while the system is also busy doing the
other validation chores of a node. This is backended by a high
performance transactional key value store.  The need for performance
here is essential to even keeping up with the network, it's not about
enabling any kind of fancy querying (bitcoin core does not offer fancy
querying), it's about the base load that every node must handle to
usably sync up and keep up with the Bitcoin network.

The backend can be swapped out for something else that provides the
same properties, but doing so does not give you any of the
inspection/analytics that you're looking for.  Systems that do that
exist, and they require databases taking hundreds of gigabytes of
storage and take days to weeks to import the network data.  They're
great for what they're for, but they're not suitable for consensus use
in the system for space efficiency, performance, and consensus
consistency reasons.

From simon at bitcartel.com  Fri Oct 30 03:04:19 2015
From: simon at bitcartel.com (Simon Liu)
Date: Thu, 29 Oct 2015 20:04:19 -0700
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <201510290803.52734.luke@dashjr.org>
References: <5631C363.5060705@neomailbox.net>
	<201510290803.52734.luke@dashjr.org>
Message-ID: <5632DE33.7030600@bitcartel.com>

Storage of UTXO data looks like an implementation detail and thus one
would have thought that the choice of database would not increase the
odds of consensus protocol failure.

Btcd, a full node implementation written in Go, already provides a
database interface which supports different backends:

https://github.com/btcsuite/btcd/tree/master/database

Given that UTXO storage is considered critical, it seems reasonable to
let a node operator decide for themselves if they want data stored in
LevelDB (which is not fully ACID compliant) or a database like Sqlite,
Oracle, DB2 etc.

If the storage requirements for UTXO data are fairly simple, consisting
mainly of puts and gets, there is a decent argument that using a
dedicated key-value store provides superior performance over a
traditional SQL database.

However, from a practical perspective, given that nodes operate on a
range of different hardware and even a little Raspberry Pi can run a
full node and keep up with the network, why not let those users with the
resources to operate big iron databases do so?  It would be a good
feature to have.


On 10/29/2015 01:03 AM, Luke Dashjr via bitcoin-dev wrote:
> I predict this would be a disaster. UTXO storage is CONSENSUS-CRITICAL code.
> Any divergence in implementation behaviour, including bugs AND bugfixes, may 
> cause consensus failure. For this to have a reasonable *hope* of working, we 
> need to choose one storage engine, and *will* need to maintain consensus-
> compatibility of it ourselves (since nobody else cares).
> 
> Fixing LevelDB frankly seems like an easier task than switching to anything 
> SQL-based, which would require a *lot* more *difficult-to-get-consensus-
> compatible* code that we are all (or at least mostly) very unfamiliar with.
> 
> Research is fine, but let's be realistic about deployment.
> 
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From gmaxwell at gmail.com  Fri Oct 30 03:35:33 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 30 Oct 2015 03:35:33 +0000
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <5632DE33.7030600@bitcartel.com>
References: <5631C363.5060705@neomailbox.net>
	<201510290803.52734.luke@dashjr.org>
	<5632DE33.7030600@bitcartel.com>
Message-ID: <CAAS2fgTga_vTfOKrFu_hEzXSfTfg9FRfJ6aL6ginuGFqnbm7=w@mail.gmail.com>

On Fri, Oct 30, 2015 at 3:04 AM, Simon Liu via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Given that UTXO storage is considered critical, it seems reasonable to

This sounds like a misunderstanding of what consensus criticial means.
It does not mean that it must be right (though obviously that is
preferable) but that it must be _consistent_, between all nodes.

> full node and keep up with the network, why not let those users with the
> resources to operate big iron databases do so?  It would be a good
> feature to have.

Because it provides no value, the data is opaque and propritarily
encoded with a compression function which we may change from version
to version, and because many of these alternatives are enormously
slow; enough that they present problems with falling behind the
network even on high performance hardware.

Moreover, additional functional which will not be sufficiently used
will not adequately maintained and result in increased maintains costs
and more bugs.

From gmaxwell at gmail.com  Fri Oct 30 04:28:47 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 30 Oct 2015 04:28:47 +0000
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <3CB90C47-293E-4C18-A381-E5203483D68F@gmx.com>
References: <5631C363.5060705@neomailbox.net>
	<201510290803.52734.luke@dashjr.org>
	<5632DE33.7030600@bitcartel.com>
	<CAAS2fgTga_vTfOKrFu_hEzXSfTfg9FRfJ6aL6ginuGFqnbm7=w@mail.gmail.com>
	<3CB90C47-293E-4C18-A381-E5203483D68F@gmx.com>
Message-ID: <CAAS2fgRdK4bDr3x_y9UpdH234PQSfD7U539HBLA==+hLQJ_7Fw@mail.gmail.com>

On Fri, Oct 30, 2015 at 4:04 AM, Peter R <peter_r at gmx.com> wrote:
> Can you give a specific example of how nodes that used different database technologies might determine different answers to whether a given transaction is valid or invalid?  I?m not a database expert, but to me it would seem that if all the unspent outputs can be found in the database, and if the relevant information about each output can be retrieved without corruption, then that?s all that really matters as far as the database is concerned.

If you add to those set of assumptions the handling of write ordering
is the same (e.g. multiple updates in an change end up with the same
entry surviving) and read/write interleave returning the same results
then it wouldn't.

But databases sometimes have errors which cause them to fail to return
records, or to return stale data. And if those exist consistency must
be maintained; and "fixing" the bug can cause a divergence in
consensus state that could open users up to theft.

Case in point, prior to leveldb's use in Bitcoin Core it had a bug
that, under rare conditions, could cause it to consistently return not
found on records that were really there (I'm running from memory so I
don't recall the specific cause).  Leveldb fixed this serious bug in a
minor update.  But deploying a fix like this in an uncontrolled manner
in the bitcoin network would potentially cause a fork in the consensus
state; so any such fix would need to be rolled out in an orderly
manner.

> I?d like a concrete example to help me understand why more than one implementation of something like the UTXO database would be unreasonable.

It's not unreasonable, but great care is required around the specifics.

Bitcoin consensus implements a mathematical function that defines the
operation of the system and above all else all systems must agree (or
else the state can diverge and permit double-spends);  if you could
prove that a component behaves identically under all inputs to another
function then it can be replaced without concern but this is something
that cannot be done generally for all software, and proving
equivalence even in special cases it is an open area of research.  The
case where the software itself is identical or nearly so is much
easier to gain confidence in the equivalence of a change through
testing and review.

With that cost in mind one must then consider the other side of the
equation-- utxo database is an opaque compressed representation,
several of the posts here have been about desirability of blockchain
analysis interfaces, and I agree they're sometimes desirable but
access to the consensus utxo database is not helpful for that.
Similarly, other things suggested are so phenomenally slow that it's
unlikely that a node would catch up and stay synced even on powerful
hardware.  Regardless, in Bitcoin core the storage engine for this is
fully internally abstracted and so it is relatively straight forward
for someone to drop something else in to experiment with; whatever the
motivation.

I think people are falling into a trap of thinking "It's a <database>,
I know a <black box> for that!"; but the application and needs are
very specialized here; no less than, say-- the table of pre-computed
EC points used for signing in the ECDSA application. It just so
happens that on the back of the very bitcoin specific cryptographic
consensus algorithim there was a slot where a pre-existing high
performance key-value store fit; and so we're using one and saving
ourselves some effort.  If, in the future, Bitcoin Core adopts a
merkelized commitment for the UTXO it would probably need to stop
using any off-the-shelf key value store entirely, in order to avoid a
20+ fold write inflation from updating hash tree paths (And Bram Cohen
has been working on just such a thing, in fact).

From peter_r at gmx.com  Fri Oct 30 04:04:22 2015
From: peter_r at gmx.com (Peter R)
Date: Thu, 29 Oct 2015 21:04:22 -0700
Subject: [bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db
In-Reply-To: <CAAS2fgTga_vTfOKrFu_hEzXSfTfg9FRfJ6aL6ginuGFqnbm7=w@mail.gmail.com>
References: <5631C363.5060705@neomailbox.net>
	<201510290803.52734.luke@dashjr.org>
	<5632DE33.7030600@bitcartel.com>
	<CAAS2fgTga_vTfOKrFu_hEzXSfTfg9FRfJ6aL6ginuGFqnbm7=w@mail.gmail.com>
Message-ID: <3CB90C47-293E-4C18-A381-E5203483D68F@gmx.com>


> On Oct 29, 2015, at 8:35 PM, Gregory Maxwell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> On Fri, Oct 30, 2015 at 3:04 AM, Simon Liu via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Given that UTXO storage is considered critical, it seems reasonable to
> 
> This sounds like a misunderstanding of what consensus criticial means.
> It does not mean that it must be right (though obviously that is
> preferable) but that it must be _consistent_, between all nodes.

Can you give a specific example of how nodes that used different database technologies might determine different answers to whether a given transaction is valid or invalid?  I?m not a database expert, but to me it would seem that if all the unspent outputs can be found in the database, and if the relevant information about each output can be retrieved without corruption, then that?s all that really matters as far as the database is concerned.

Let?s use an unspent pay-to-pubkey-hash output as an example: Alice spends this to Bob (she signs it properly), the TX propagates across the network and?then what?  Do some nodes disagree on whether or not the TX is valid?  What exactly would they disagree on?  Are you suggesting that a database bug would cause some nodes to think the output was actually already spent, while others can correctly see that it?s unspent?  Or maybe some nodes think the output doesn?t exist while others do?  Or are you suggesting that the details about this output might be retrieved with errors from certain databases but correctly from others?  

I?d like a concrete example to help me understand why more than one implementation of something like the UTXO database would be unreasonable.    

Peter


From bob_bitcoin at mcelrath.org  Fri Oct 30 16:36:04 2015
From: bob_bitcoin at mcelrath.org (Bob McElrath)
Date: Fri, 30 Oct 2015 16:36:04 +0000
Subject: [bitcoin-dev] UTXO set commitment hash
Message-ID: <20151030163604.GA29303@mcelrath.org>

The state of bitcoin transactions can be committed to in blocks by keeping two
running hashes, one of unspent transaction outputs and one of spent transaction
outputs.  A "running hash" $R$ I define as being computed by taking the previous
value of the hash $r$, concatenating it with the new data $x$, and hashing it:
\[
    R = hash(r|x).
\]
In the case of the UTXO set, the data $x$ can be taken to be the concatenation
(txid|vout|amount) for all outputs, let's call this running hash hTXO.  Because
data cannot be "removed" from this set commitment, a second hash can be computed
consisting of the spent outputs, let's call this hSTXO.  Thus the pair of hashes
(hTXO, hSTXO) is equivalent to a hash of all unspent outputs.  These hashes can
be placed into a block's Merkle tree by miners with a soft fork.  It can be
reduced to a single hash hUXTO = hash(hTXO|hSXTO) if desired.

By defining *how* to compute (hTXO, hSXTO) we can define an implementation
independent definition of consensus that is extremely cheap to compute.  The
order in which outputs are hashed is clearly important, but bitcoin has a well
defined ordering already in terms of the order in which transactions appear in
blocks, and the sequential order of outputs.

In the recent discussion surrounding leveldb and jgarzik's new sqlite branch, it
has been brought up repeatedly by gmaxwell that this db is "consensus critical".
As a data structure storing the state of transactions, of course it's consensus
critical.  However there's only one right answer to what the set of UTXOs is.
Any other result reported by the db is simply wrong.  By creating and publishing
(hTXO, hSXTO), miners can publish their view of the transaction state, and any
implementation can be validated against it.

As I understand it, leveldb is in the bitcoin core source tree because it could
have bugs and give the wrong answer for a given UTXO (see BIP50).  This is worse
than a consensus failure, it's just wrong, and the argument that we have to keep
leveldb around and maintain it because it could be wrong is pretty ugly, and I
don't think anyone actually wants to do this.  Let's not be wrong in the first
place, and let's choose databases based on performance and other considerations.
"Not being wrong" should go without saying, regardless of implementation
details.

It should be noted that (hTXO, hSXTO) can be computed twice, once without the
database (while processing a new block) and once by requesting the same data
from the database.  So bad database behavior can be detected and prevented from
causing consensus failures.  And then we can remove leveldb from the core.

--
Cheers, Bob McElrath

"For every complex problem, there is a solution that is simple, neat, and wrong."
    -- H. L. Mencken 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151030/387372b6/attachment.sig>

From rusty at rustcorp.com.au  Sat Oct 31 03:43:13 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Sat, 31 Oct 2015 14:13:13 +1030
Subject: [bitcoin-dev] Compatibility requirements for hard or soft forks
In-Reply-To: <CABsx9T0Evf3B_NtmdKxc_M1xRQh-jSC4JzTHCx8Ez9RzCypvMg@mail.gmail.com>
References: <CABsx9T0Evf3B_NtmdKxc_M1xRQh-jSC4JzTHCx8Ez9RzCypvMg@mail.gmail.com>
Message-ID: <8737wrwvn2.fsf@rustcorp.com.au>

Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:
> Should it be a requirement that ANY one-megabyte transaction that is valid
> under the existing rules also be valid under new rules?
>
> Pro:  There could be expensive-to-validate transactions created and given a
> lockTime in the future stored somewhere safe. Their owners may have no
> other way of spending the funds (they might have thrown away the private
> keys), and changing validation rules to be more strict so that those
> transactions are invalid would be an unacceptable confiscation of funds.

Not just lockTime; potentially any tx locked away in a safe.

Consider low-S enforcement: high chance a non-expert user will be unable
to spend an old transaction.  They need to compromise their privacy
and/or spend time and money.  A milder "confiscation" but a more likely
one.

By that benchmark, we should aim for "reasonable certainty".  A
transaction which would never have been generated by any known software
is the minimum bar.  Adding "...which would have to be deliberately
stupid with many redundant OP_CHECKSIG etc" surpasses it.  The only extra
safeguard I can think of is clear, widespread notification of the
change.

Cheers,
Rusty.

