From jgarzik at exmulti.com  Sun Jun 12 02:23:58 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 11 Jun 2011 22:23:58 -0400
Subject: [Bitcoin-development] Preparing 0.3.23-rc1 release
Message-ID: <BANLkTi=2VOhGTgX4HA_en00DATFbeWGVtg@mail.gmail.com>

Current git HEAD has been proposed to Gavin & the rest of the dev team
as 0.3.23-rc1.

As soon as Gavin gives his ACK, we have builds ready to upload.

We wanted this to be a fast, bugfix-only release.  The main focus was
to deploy a fix for connections taking forever, due to a large portion
of the network not accepting incoming TCP connections.

git shortlog for 0.3.23-rc1 (presuming Gavin's ACK):
Dean Lee (1):
      Updated Chinese Simp translation

Doug Huff (3):
      Fix rfc1918 and rfc3927 compliance for ignoring non-internet-routable host
      Add common temp files to .gitignore.
      Demystify a few magic numbers.

Han Lin Yap (2):
      Added Swedish translation
      Remove unused variable

Jeff Garzik (4):
      Bump version to 0.3.23.
      Reduce minimum TX fee for new transactions, to 0.0005.
      Lower minimum relay TX fee to 0.0001 (from 0.0005) BTC.
      Add minimal release process docs.

Matt Corallo (1):
      Fix CPU Usage bug when using -nolisten and have no connections.

Nils Schneider (1):
      create keypool in LoadWallet()

Pieter Wuille (3):
      Update transactions already in the wallet when rescanning.
      Fix for small change outputs
      Faster timeout when connecting


-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Sun Jun 12 04:48:10 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sun, 12 Jun 2011 00:48:10 -0400
Subject: [Bitcoin-development] [ANN] Bitcoin v0.3.23 release candidate
	available
Message-ID: <BANLkTineGhQW33aZ0oLvGf9vJY8XLxjxPg@mail.gmail.com>

Win32, Linux and source releases for bitcoin v0.3.23rc1 have been uploaded to
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.23/test/

This is another quick bugfix release, trying to deal with the influx
of new bitcoin users.

Main items of note:

* P2P connect-to-node logic changed to reduce timeout a bit.  The
network saw a huge influx of new users, who do not permit incoming
connections.  This change is a short-term hack, to more quickly hunt
for useful P2P connections.  Better "leaf node" logic is in the works,
but this should let us limp along until then.
* Transaction fee reduced to 0.0005 for new transactions (NOTE: free
transactions are, of course, still supported as they always were)
* Client will relay transactions with fees as low as 0.0001 BTC

Full git changelog:

Dean Lee (1):
      Updated Chinese Simp translation

Doug Huff (3):
      Fix rfc1918 and rfc3927 compliance for ignoring non-internet-routable host
      Add common temp files to .gitignore.
      Demystify a few magic numbers.

Han Lin Yap (2):
      Added Swedish translation
      Remove unused variable

Jeff Garzik (4):
      Bump version to 0.3.23.
      Reduce minimum TX fee for new transactions, to 0.0005.
      Lower minimum relay TX fee to 0.0001 (from 0.0005) BTC.
      Add minimal release process docs.

Matt Corallo (1):
      Fix CPU Usage bug when using -nolisten and have no connections.

Nils Schneider (1):
      create keypool in LoadWallet()

Pieter Wuille (3):
      Update transactions already in the wallet when rescanning.
      Fix for small change outputs
      Faster timeout when connecting


-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From decker.christian at gmail.com  Mon Jun 13 08:55:04 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 13 Jun 2011 10:55:04 +0200
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
Message-ID: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>

Hi all.

Just wanted to carry the discussion from the Forum over to the dev-list.

We have quite a few bootstrapping mechanisms, starting with the overly
complex (IMHO) IRC bootstrapping, which is often suspected as bot-activity.
Then we have a few hardcoded nodes and some fallback nodes. I was wondering
why we didn't adopt BitTorrent tracker bootstrapping until now? It's
basically all it does. Given a hash (SHA1 hash of the genesis bloc would be
nice ^^) it gives you a list of other nodes with the same hash.

Given that there are quite a few open trackers (accepting and tracking any
hash you throw at them) we could just decide to use 2-3 of those to
bootstrap.

The downside would be that they return bencoded data, which has to be
interpreted first, but it's easier than implementing the IRC stuff, I think.

Any comments?

Regards,
Chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110613/099e3077/attachment.html>

From jgarzik at exmulti.com  Mon Jun 13 09:09:53 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 13 Jun 2011 05:09:53 -0400
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
Message-ID: <BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>

On Mon, Jun 13, 2011 at 4:55 AM, Christian Decker
<decker.christian at gmail.com> wrote:
> We have quite a few bootstrapping mechanisms, starting with the overly
> complex (IMHO) IRC bootstrapping, which is often suspected as bot-activity.
> Then we have a few hardcoded nodes and some fallback nodes. I was wondering
> why we didn't adopt BitTorrent tracker bootstrapping until now? It's
> basically all it does. Given a hash (SHA1 hash of the genesis bloc would be
> nice ^^) it gives you a list of other nodes with the same hash.

It seems to offer few benefits over DNS seeding, while potentially
potentially creating a vulnerable hot spot in the DHT.  Sybil attacks
on DHTs are well documented.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Mon Jun 13 09:56:35 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 13 Jun 2011 05:56:35 -0400
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
	<BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
Message-ID: <BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>

On Mon, Jun 13, 2011 at 5:38 AM, Christian Decker
<decker.christian at gmail.com> wrote:
> BitTorrent trackers are used to handle several thousands of requests, so
> they would probably scale well enough. I'm not even talking about using the
> DHT trackers, but using old fashioned HTTP based trackers. The fact that
> each bitcoin client would contact the tracker would make it very hard for an
> attacker to get bootstrapping clients to exclusively connect to his
> compromised clients. I would say that using a tracker such as OpenBittorrent
> provides the same advantages as using an IRC channel.

And how does the client discover HTTP trackers?  You're either
hardcoding -those- into the client, or adding an additional bootstrap
step to discover them.  Either way, it has the same problems as other
current methods.

The history and experience of gnutella's web caches vs. UDP host
caches seems highly relevant here.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From decker.christian at gmail.com  Mon Jun 13 09:38:13 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 13 Jun 2011 11:38:13 +0200
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
Message-ID: <BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>

Don't get me wrong, DNS Seeding is an excellent way to bootstrap via trusted
nodes, I'm not trying to replace it.
What I'm trying to get rid of is the IRC bootstrapping and the hardcoded
nodes in the client, they're easy targets.

BitTorrent trackers are used to handle several thousands of requests, so
they would probably scale well enough. I'm not even talking about using the
DHT trackers, but using old fashioned HTTP based trackers. The fact that
each bitcoin client would contact the tracker would make it very hard for an
attacker to get bootstrapping clients to exclusively connect to his
compromised clients. I would say that using a tracker such as OpenBittorrent
provides the same advantages as using an IRC channel.

On Mon, Jun 13, 2011 at 11:09 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:

> On Mon, Jun 13, 2011 at 4:55 AM, Christian Decker
> <decker.christian at gmail.com> wrote:
> > We have quite a few bootstrapping mechanisms, starting with the overly
> > complex (IMHO) IRC bootstrapping, which is often suspected as
> bot-activity.
> > Then we have a few hardcoded nodes and some fallback nodes. I was
> wondering
> > why we didn't adopt BitTorrent tracker bootstrapping until now? It's
> > basically all it does. Given a hash (SHA1 hash of the genesis bloc would
> be
> > nice ^^) it gives you a list of other nodes with the same hash.
>
> It seems to offer few benefits over DNS seeding, while potentially
> potentially creating a vulnerable hot spot in the DHT.  Sybil attacks
> on DHTs are well documented.
>
> --
> Jeff Garzik
> exMULTI, Inc.
> jgarzik at exmulti.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110613/2d8c427a/attachment.html>

From vladimir at marchenko.co.uk  Mon Jun 13 10:54:16 2011
From: vladimir at marchenko.co.uk (Vladimir Marchenko)
Date: Mon, 13 Jun 2011 11:54:16 +0100
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
	<BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
	<BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>
Message-ID: <BANLkTi=X4vZn_Oe6iYirp9++jwfXHJaqwg@mail.gmail.com>

one possible bootstrap method of last resort,

1. create a convention of bitcoind listening on a specific last octest
of IPv4 address, let's say, .14 when possible. Those of us who have
access to IP space would use .14's.

2. if no other bootstrap method works, client could start scanning
x.x.x.14 addresses, perhaps in some semi-intelligent order (starting
from more pobable /8's and /16's), if enough people place bitcoind on
x.x.x.14 than after a 10-100 thousand checks it bound to find a
bitcoind peer.

It's messy, with all the excessive scanning etc... but it does not
depend on anything except a bunch of bitcoind by convention preferring
listening on x.x.x.14's.

Given that this is a method of last resort in bootrap chain it whould
hopefully not lead to DDOS on those unlucky to own *.14 and not
running bitcoind there. Also the more people are running bitcoind on
.14, the quicker it would find a peer, the less scanning to do. It is
kind of self-regualting.

For whatever it worth...


On 13 June 2011 10:56, Jeff Garzik <jgarzik at exmulti.com> wrote:
> On Mon, Jun 13, 2011 at 5:38 AM, Christian Decker
> <decker.christian at gmail.com> wrote:
>> BitTorrent trackers are used to handle several thousands of requests, so
>> they would probably scale well enough. I'm not even talking about using the
>> DHT trackers, but using old fashioned HTTP based trackers. The fact that
>> each bitcoin client would contact the tracker would make it very hard for an
>> attacker to get bootstrapping clients to exclusively connect to his
>> compromised clients. I would say that using a tracker such as OpenBittorrent
>> provides the same advantages as using an IRC channel.
>
> And how does the client discover HTTP trackers? ?You're either
> hardcoding -those- into the client, or adding an additional bootstrap
> step to discover them. ?Either way, it has the same problems as other
> current methods.
>
> The history and experience of gnutella's web caches vs. UDP host
> caches seems highly relevant here.
>
> --
> Jeff Garzik
> exMULTI, Inc.
> jgarzik at exmulti.com
>
> ------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From decker.christian at gmail.com  Mon Jun 13 11:48:38 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 13 Jun 2011 13:48:38 +0200
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTi=X4vZn_Oe6iYirp9++jwfXHJaqwg@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
	<BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
	<BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>
	<BANLkTi=X4vZn_Oe6iYirp9++jwfXHJaqwg@mail.gmail.com>
Message-ID: <BANLkTikbQpU8+NMT_-f2mVNe-cGLY-ZeuQ@mail.gmail.com>

Yes, those trackers would be hard coded, just like the IRC servers and
channels are hardcoded right now.

The advantages over IRC and DNS Seeds are:
 - sporadic HTTP requests to a tracker, as opposed to keeping an IRC
connection open at all times
 - no virus/botnet like behaviour (automatically join IRC channel with
cryptic name), ISPs tend to bother network admins (like myself) with alerts
when they see this...
 - adapts faster than DNS Seeds which require configuration changes on seed
should the nodes become unreachable
 - we already use HTTP to determine our external IP, so it would be a
consolidation of transports
 - more peers than DNS Seeds (better load balancing)

As for Vladimirs proposal, seems like an extreme measure, that is not really
practical. Also it leads to network partitions since nodes will prefer their
own /8 and /16 networks. IPv6 will also soon be a problem for this method.

On Mon, Jun 13, 2011 at 12:54 PM, Vladimir Marchenko <
vladimir at marchenko.co.uk> wrote:

> one possible bootstrap method of last resort,
>
> 1. create a convention of bitcoind listening on a specific last octest
> of IPv4 address, let's say, .14 when possible. Those of us who have
> access to IP space would use .14's.
>
> 2. if no other bootstrap method works, client could start scanning
> x.x.x.14 addresses, perhaps in some semi-intelligent order (starting
> from more pobable /8's and /16's), if enough people place bitcoind on
> x.x.x.14 than after a 10-100 thousand checks it bound to find a
> bitcoind peer.
>
> It's messy, with all the excessive scanning etc... but it does not
> depend on anything except a bunch of bitcoind by convention preferring
> listening on x.x.x.14's.
>
> Given that this is a method of last resort in bootrap chain it whould
> hopefully not lead to DDOS on those unlucky to own *.14 and not
> running bitcoind there. Also the more people are running bitcoind on
> .14, the quicker it would find a peer, the less scanning to do. It is
> kind of self-regualting.
>
> For whatever it worth...
>
>
> On 13 June 2011 10:56, Jeff Garzik <jgarzik at exmulti.com> wrote:
> > On Mon, Jun 13, 2011 at 5:38 AM, Christian Decker
> > <decker.christian at gmail.com> wrote:
> >> BitTorrent trackers are used to handle several thousands of requests, so
> >> they would probably scale well enough. I'm not even talking about using
> the
> >> DHT trackers, but using old fashioned HTTP based trackers. The fact that
> >> each bitcoin client would contact the tracker would make it very hard
> for an
> >> attacker to get bootstrapping clients to exclusively connect to his
> >> compromised clients. I would say that using a tracker such as
> OpenBittorrent
> >> provides the same advantages as using an IRC channel.
> >
> > And how does the client discover HTTP trackers?  You're either
> > hardcoding -those- into the client, or adding an additional bootstrap
> > step to discover them.  Either way, it has the same problems as other
> > current methods.
> >
> > The history and experience of gnutella's web caches vs. UDP host
> > caches seems highly relevant here.
> >
> > --
> > Jeff Garzik
> > exMULTI, Inc.
> > jgarzik at exmulti.com
> >
> >
> ------------------------------------------------------------------------------
> > EditLive Enterprise is the world's most technically advanced content
> > authoring tool. Experience the power of Track Changes, Inline Image
> > Editing and ensure content is compliant with Accessibility Checking.
> > http://p.sf.net/sfu/ephox-dev2dev
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
> ------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110613/d921638d/attachment.html>

From jgarzik at exmulti.com  Mon Jun 13 16:51:02 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 13 Jun 2011 12:51:02 -0400
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTikbQpU8+NMT_-f2mVNe-cGLY-ZeuQ@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
	<BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
	<BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>
	<BANLkTi=X4vZn_Oe6iYirp9++jwfXHJaqwg@mail.gmail.com>
	<BANLkTikbQpU8+NMT_-f2mVNe-cGLY-ZeuQ@mail.gmail.com>
Message-ID: <BANLkTimTu3PNLTgv052-RZHHKTOUnrpT+g@mail.gmail.com>

On Mon, Jun 13, 2011 at 7:48 AM, Christian Decker
<decker.christian at gmail.com> wrote:
> The advantages over IRC and DNS Seeds are:
> ?- sporadic HTTP requests to a tracker, as opposed to keeping an IRC
> connection open at all times

No advantage over DNS (you're talking about IRC)

> ?- no virus/botnet like behaviour (automatically join IRC channel with
> cryptic name), ISPs tend to bother network admins (like myself) with alerts
> when they see this...

No advantage over DNS (you're talking about IRC)

> ?- adapts faster than DNS Seeds which require configuration changes on seed
> should the nodes become unreachable

False.  A proper DNS seed actively samples the bitcoin network for live nodes.

> ?- we already use HTTP to determine our external IP, so it would be a
> consolidation of transports

Irrelevant -- it's still a bunch of additional code.  We "already use"
DNS lookups as well, so I could apply similar logic to DNS seeding.

> ?- more peers than DNS Seeds (better load balancing)

This is an invalid assumption, based on an overly simplistic sampling.
 DNS seeds are perfectly capable of returning new and useful peers on
each query.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From vladimir at marchenko.co.uk  Mon Jun 13 18:00:59 2011
From: vladimir at marchenko.co.uk (Vladimir Marchenko)
Date: Mon, 13 Jun 2011 19:00:59 +0100
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTimTu3PNLTgv052-RZHHKTOUnrpT+g@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
	<BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
	<BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>
	<BANLkTi=X4vZn_Oe6iYirp9++jwfXHJaqwg@mail.gmail.com>
	<BANLkTikbQpU8+NMT_-f2mVNe-cGLY-ZeuQ@mail.gmail.com>
	<BANLkTimTu3PNLTgv052-RZHHKTOUnrpT+g@mail.gmail.com>
Message-ID: <BANLkTi=XUxZOXP-U8swyfBuu7ntjo6VyUg@mail.gmail.com>

Jeff is absolutely correct, stating that DNS bootstrapping can
potentially be very robust.

Consider, for example, that seeds can be hosted by services like
zerigo, who provide decent management API's, as well as by thousands
of small VPS operated by people all over the world. Moreover, if
namecoin lives up to it's promises than some seeds can be hosted using
it's tlds, and as such we would get around centralised ICANN/registrar
weakness.

The most practical way I see how to improve DNS bootstrapping is
publishing build instructions for a simple DNS server build and a
script which feeds it with node data. Something simple like djbdns plus
a perl script, or similar zerigo API script, would do. Than anyone can
host it. All left to do than is to hardcode a bunch of such DNS seeds
into the client.

Hardcoding seeds is not good enough? Get a convention that anyone
owning a bitcoin.* domain should point seed.bitcoin.* to a decent DNS
seed. Than clients simply scan 100-200 tld's to find working
seed.bitcoin.*

I am not quite sure, though, is if this would enable some attacks by
poisoned seeds.

Vladimir.



From gavinandresen at gmail.com  Mon Jun 13 18:41:35 2011
From: gavinandresen at gmail.com (Gavin)
Date: Mon, 13 Jun 2011 14:41:35 -0400
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <BANLkTi=XUxZOXP-U8swyfBuu7ntjo6VyUg@mail.gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
	<BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
	<BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>
	<BANLkTi=X4vZn_Oe6iYirp9++jwfXHJaqwg@mail.gmail.com>
	<BANLkTikbQpU8+NMT_-f2mVNe-cGLY-ZeuQ@mail.gmail.com>
	<BANLkTimTu3PNLTgv052-RZHHKTOUnrpT+g@mail.gmail.com>
	<BANLkTi=XUxZOXP-U8swyfBuu7ntjo6VyUg@mail.gmail.com>
Message-ID: <329684AF-0A85-4116-A191-72562ADB9BE7@gmail.com>

> The most practical way I see how to improve DNS bootstrapping is
> publishing build instructions for a simple DNS server build and a
> script which feeds it with node data. Something simple like djbdns plus
> a perl script, or similar zerigo API script, would do. Than anyone can
> host it. All left to do than is to hardcode a bunch of such DNS seeds
> into the client.

Adding that code to bitcoin in a contrib/dns folder seems like a good idea.  I'd be happy to run a dns seed.


From jgarzik at exmulti.com  Mon Jun 13 20:16:14 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 13 Jun 2011 16:16:14 -0400
Subject: [Bitcoin-development] Bootstrapping via BitTorrent trackers
In-Reply-To: <329684AF-0A85-4116-A191-72562ADB9BE7@gmail.com>
References: <BANLkTin_qs4bDabnu+b3K1hTzLzr4JKHsg@mail.gmail.com>
	<BANLkTimDGr-yX9zgS3qWPZALprWCsFieXg@mail.gmail.com>
	<BANLkTi=oYjydw7sT=sqSN3sHMhM+pq=c6w@mail.gmail.com>
	<BANLkTikNd6rqssQ1bHGhPURc7tiXLkBGwQ@mail.gmail.com>
	<BANLkTi=X4vZn_Oe6iYirp9++jwfXHJaqwg@mail.gmail.com>
	<BANLkTikbQpU8+NMT_-f2mVNe-cGLY-ZeuQ@mail.gmail.com>
	<BANLkTimTu3PNLTgv052-RZHHKTOUnrpT+g@mail.gmail.com>
	<BANLkTi=XUxZOXP-U8swyfBuu7ntjo6VyUg@mail.gmail.com>
	<329684AF-0A85-4116-A191-72562ADB9BE7@gmail.com>
Message-ID: <BANLkTi=iOeVUJ7ktwWddH1heiNmyn5v52w@mail.gmail.com>

On Mon, Jun 13, 2011 at 2:41 PM, Gavin <gavinandresen at gmail.com> wrote:
>> The most practical way I see how to improve DNS bootstrapping is
>> publishing build instructions for a simple DNS server build and a
>> script which feeds it with node data. Something simple like djbdns plus
>> a perl script, or similar zerigo API script, would do. Than anyone can
>> host it. All left to do than is to hardcode a bunch of such DNS seeds
>> into the client.
>
> Adding that code to bitcoin in a contrib/dns folder seems like a good idea.

Agreed.  I'll see if I can put together a couple different solutions,
and stick them in there.  ETA 3-4 weeks though, given current bugfix
workload + personal issues (moving to a new house).

I had a thought related to this, but readily admit I haven't thought
this through:  create an RPC in bitcoin that returns a random
selection of fresh P2P node addresses, from addr.dat.  One problem I
was running into was accessing this data from outside bitcoin.

Using ArtForz' half-a-node as a base was a possibility, but creating
"getnodes" RPC seemed far easier.

djbdns (tinydns) is great for this:  it is highly scalable and stable,
and its input is a -very- simple text format, easier to generate than
BIND zone files.

> I'd be happy to run a dns seed.

Great!  A big missing piece is simply trusted people running DNS seeds
on stable connectivity, once the DNS software is there.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Mon Jun 13 20:44:11 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 13 Jun 2011 16:44:11 -0400
Subject: [Bitcoin-development] Ready for 0.3.23 release?
Message-ID: <BANLkTikipPm9QU5NRnsKhfN6iF-Ua6duBg@mail.gmail.com>

(cc'd the devs that I'm not sure are on the dev mailing list yet)


Version 0.3.23 doesn't seem to have major issues, and testing has been
unremarkable.  I think we can go ahead and push it out.

ACK for final release of 0.3.23?

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Mon Jun 13 23:46:16 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 13 Jun 2011 19:46:16 -0400
Subject: [Bitcoin-development] Bitcoin v0.3.23 released
Message-ID: <BANLkTim1FP5t=4erKYeomB011WPo4xshow@mail.gmail.com>

Win32, Linux and source releases (MacOSX soon) for bitcoin v0.3.23
have been uploaded to
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.23/

This is another quick bugfix release, trying to deal with the influx
of new bitcoin users.

Priority for next version:  wallet encryption

Main items of note:

    * P2P connect-to-node logic changed to reduce timeout a bit.  The
network saw a huge influx of new users, who do not permit incoming
connections.  This change is a short-term hack, to more quickly hunt
for useful P2P connections.  Better "leaf node" logic is in the works,
but this should let us limp along until then.
    * Transaction fee reduced to 0.0005 for new transactions (see note below)
    * Client will relay transactions with fees as low as 0.0001 BTC
(see note below)


NOTE:  There has been some fee confusion recently.  Free transactions
are supported and relayed as they always have been, according to
special anti-spam rules.  See
https://en.bitcoin.it/wiki/Transaction_fees for details.

Full git changelog:

Dean Lee (1):
      Updated Chinese Simp translation

Doug Huff (3):
      Fix rfc1918 and rfc3927 compliance for ignoring non-internet-routable host
      Add common temp files to .gitignore.
      Demystify a few magic numbers.

Han Lin Yap (2):
      Added Swedish translation
      Remove unused variable

Jeff Garzik (4):
      Bump version to 0.3.23.
      Reduce minimum TX fee for new transactions, to 0.0005.
      Lower minimum relay TX fee to 0.0001 (from 0.0005) BTC.
      Add minimal release process docs.

Matt Corallo (1):
      Fix CPU Usage bug when using -nolisten and have no connections.

Nils Schneider (1):
      create keypool in LoadWallet()

Pieter Wuille (3):
      Update transactions already in the wallet when rescanning.
      Fix for small change outputs
      Faster timeout when connecting

There were no changes between -rc1 and -final.  Wanted to get this out
ASAP, and move on to wallet crypto.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Mon Jun 13 23:59:08 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 13 Jun 2011 19:59:08 -0400
Subject: [Bitcoin-development] Release priorities for v0.4?
Message-ID: <BANLkTikOEWZQur8EqumWH0jU=07-4vAFhg@mail.gmail.com>

With increased reports of stolen wallets, I humbly submit that wallet
crypto should be a top priority for the next version.
https://github.com/bitcoin/bitcoin/pull/232

Anyway...  start pulling :)

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From mike at plan99.net  Tue Jun 14 16:44:41 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 14 Jun 2011 18:44:41 +0200
Subject: [Bitcoin-development] Bumping up against flood control limits again?
Message-ID: <BANLkTinuEayfr5S9NEcW+cTLpv2r8iwRgDXYniOAHgQ43zwGqQ@mail.gmail.com>

Block sizes have started to get quite large once again. Whilst testing
chain download today I was disconnected due to going over the 10mb
flood control limit. Infuriatingly, I can't reproduce this reliably.
But at 500 blocks an average of 20kb per block will cause this. As we
can see from the block explorer, the average is probably quite close
to that.

The flood control seems like a pretty serious scalability limitation.
I can see a few solutions. One is to raise the limit again. Another is
to raise the limit and simultaneously lower the batch size. 500 blocks
in one message means very large messages no matter how big the flood
control limit is. Going down to 100 or even 50 would hurt chain
download speed quite a bit in high latency environments, but chain
download is already a serious bottleneck.

Thoughts?



From dizzyd at dizzyd.com  Tue Jun 14 17:07:59 2011
From: dizzyd at dizzyd.com (Dave Smith)
Date: Tue, 14 Jun 2011 11:07:59 -0600
Subject: [Bitcoin-development] Bumping up against flood control limits
	again?
In-Reply-To: <BANLkTinuEayfr5S9NEcW+cTLpv2r8iwRgDXYniOAHgQ43zwGqQ@mail.gmail.com>
References: <BANLkTinuEayfr5S9NEcW+cTLpv2r8iwRgDXYniOAHgQ43zwGqQ@mail.gmail.com>
Message-ID: <BANLkTinFaj+vXD4uOqaA63j9sA2vrq3bbg@mail.gmail.com>

Does it make more sense to have the flood limit based on size in bytes
versus # of blocks?

(I'm a n00b, so pardon my ignorance). :)

D.

On Tue, Jun 14, 2011 at 10:44 AM, Mike Hearn <mike at plan99.net> wrote:
> Block sizes have started to get quite large once again. Whilst testing
> chain download today I was disconnected due to going over the 10mb
> flood control limit. Infuriatingly, I can't reproduce this reliably.
> But at 500 blocks an average of 20kb per block will cause this. As we
> can see from the block explorer, the average is probably quite close
> to that.
>
> The flood control seems like a pretty serious scalability limitation.
> I can see a few solutions. One is to raise the limit again. Another is
> to raise the limit and simultaneously lower the batch size. 500 blocks
> in one message means very large messages no matter how big the flood
> control limit is. Going down to 100 or even 50 would hurt chain
> download speed quite a bit in high latency environments, but chain
> download is already a serious bottleneck.
>
> Thoughts?
>
> ------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jgarzik at exmulti.com  Tue Jun 14 17:14:21 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 14 Jun 2011 13:14:21 -0400
Subject: [Bitcoin-development] Bumping up against flood control limits
	again?
In-Reply-To: <BANLkTinuEayfr5S9NEcW+cTLpv2r8iwRgDXYniOAHgQ43zwGqQ@mail.gmail.com>
References: <BANLkTinuEayfr5S9NEcW+cTLpv2r8iwRgDXYniOAHgQ43zwGqQ@mail.gmail.com>
Message-ID: <BANLkTik78Lokrm_09RW5EBkq2mJC3kMzxA@mail.gmail.com>

On Tue, Jun 14, 2011 at 12:44 PM, Mike Hearn <mike at plan99.net> wrote:
> Block sizes have started to get quite large once again. Whilst testing
> chain download today I was disconnected due to going over the 10mb
> flood control limit. Infuriatingly, I can't reproduce this reliably.
> But at 500 blocks an average of 20kb per block will cause this. As we
> can see from the block explorer, the average is probably quite close
> to that.
>
> The flood control seems like a pretty serious scalability limitation.
> I can see a few solutions. One is to raise the limit again. Another is
> to raise the limit and simultaneously lower the batch size. 500 blocks
> in one message means very large messages no matter how big the flood
> control limit is. Going down to 100 or even 50 would hurt chain
> download speed quite a bit in high latency environments, but chain
> download is already a serious bottleneck.

The main goal was not flood control but preventing an internal buffer
memory explosion.  We already have the block chain on disk, so in
theory, if we can -eliminate- the outgoing network buffer and simply
use a pointer into the block chain file, we can send as much data as
we want.

HTTP servers certainly don't buffer huge amounts in memory; they would
keel over if so.  HTTP servers have been working on the reverse, in
fact:  moving the data-pushing over to sendfile(2) syscall and similar
optimizations.

This is an unfortunate relic of how bitcoin P2P code is written.  If
the remote side has reduced their TCP window to zero, bitcoin will
still buffer so that it may continue processing other P2P traffic from
other nodes.  That makes sense in the case of tiny, 31-byte address
messages -- one must handle the case of a half-sent message before
write(2) refuses additional data -- but not huge block chain download
messages.

The P2P code just wasn't written for huge amounts of streaming data,
and needs some serious thinking...  I agree 100% that it is an issue
we will start bumping into, if we haven't already.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jan at uos.de  Tue Jun 14 19:45:30 2011
From: jan at uos.de (jan at uos.de)
Date: Tue, 14 Jun 2011 21:45:30 +0200
Subject: [Bitcoin-development] Question about dust spam rule
Message-ID: <20110614194530.GA3152@dax.lan.local>

Hi there!

As can been seen from this code block

  // To limit dust spam, require MIN_TX_FEE/MIN_RELAY_TX_FEE if any output is less than 0.01
  if (nMinFee < nBaseFee)
      BOOST_FOREACH(const CTxOut& txout, vout)
          if (txout.nValue < CENT)
              nMinFee = nBaseFee;

a fee is required as soon as any output is less than CENT.

I was wondering: would it be possible to loosen this rule to something
like "if _all_ outputs are less than CENT" or maybe "if more than 50% of
all outputs are less than CENT"?

The reason is, that I'm currently working on a project, where I would
like to take a small cut on transactions passing through (probably not
an usual requirement) and a lot of those small cuts would probably bump
into this rule.

Isn't this rule mainly meant to prevent lots of transactions with small
coins? So "all small coins" should work as well as "any small coins" or
am I missing something? (things like creating large transactions should
already be caught by other rules, right?)

Regards!
Jan



From jgarzik at exmulti.com  Wed Jun 15 06:06:26 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 15 Jun 2011 02:06:26 -0400
Subject: [Bitcoin-development] Protocol versioning
Message-ID: <BANLkTi=4UeK2D0cCHYGp1tHUTGA2iyWHcA@mail.gmail.com>

This issue has been simmering for a while...

I agree with the following general principles, and it sounds like
others on the forums do too:

GP1) Alternative implementations of a protocol are beneficial to the ecosystem.

GP2) Tying together protocol and client version is sub-optimal, and
undesirable long term.

The current, coarse-grained scheme was clearly preferred by satoshi.
He knew what a chore creating a fully compliant client would be, and
when I joined (July 2010), was actively discouraging alternative
client efforts.  Also, tying protocol and client version together
certainly eased the deployment of changes.

Protocol development has clearly slowed, and we have at least one
major alternative client in the works (bitcoinj), so it seems fair to
revisit those assumptions and preferences.

Here are several mini-proposals for the Satoshi Client (anyone got a
better nickname?) along these lines, which should better prepare the
bitcoin protocol for the long term:

MP1) Avoid creating four-component version numbers (W.X.Y.Z), and use
pszSubVer as a client identification string.  This proposal originally
came from Mike Hearn, IIRC.

MP2) remove IP transactions in v0.4

MP3) create constants for protocol version, and audit code to split
client version from protocol version.  This is a THORNY patch, and far
more difficult than https://github.com/bitcoin/bitcoin/pull/63
implies.  The code has various data structures and such versioned, so
it is difficult to pick out at quick glance which 'version' is which.

MP4) split protocol and client versions in v0.4 -- though you will not
actually notice a change until v0.4.1, when the client version changes
but the protocol version does not.

MP5) Use a single bit inside 'nServices' to indicate the presence of
an optional "capabilities" message.  The purpose of this is to enable
minor protocol changes without having to change the protocol version.
Thus, nodes may advertise /features/ rather than simply "I support all
features >= version X".  Most mature protocols support this sort of
thing, rather than the simpler, coarse-grained version number system.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From decker.christian at gmail.com  Wed Jun 15 12:46:24 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 15 Jun 2011 14:46:24 +0200
Subject: [Bitcoin-development] Protocol versioning
In-Reply-To: <BANLkTi=4UeK2D0cCHYGp1tHUTGA2iyWHcA@mail.gmail.com>
References: <BANLkTi=4UeK2D0cCHYGp1tHUTGA2iyWHcA@mail.gmail.com>
Message-ID: <BANLkTikCQ8g9bEpf2uosKm1Q_K_SSrh0nQ@mail.gmail.com>

On Wed, Jun 15, 2011 at 8:06 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:

> This issue has been simmering for a while...
>
> I agree with the following general principles, and it sounds like
> others on the forums do too:
>
> GP1) Alternative implementations of a protocol are beneficial to the
> ecosystem.
>
> GP2) Tying together protocol and client version is sub-optimal, and
> undesirable long term.
>
> The current, coarse-grained scheme was clearly preferred by satoshi.
> He knew what a chore creating a fully compliant client would be, and
> when I joined (July 2010), was actively discouraging alternative
> client efforts.  Also, tying protocol and client version together
> certainly eased the deployment of changes.
>
> Protocol development has clearly slowed, and we have at least one
> major alternative client in the works (bitcoinj), so it seems fair to
> revisit those assumptions and preferences.
>
Looking back I have to agree that binding the protocol to the client version
was in fact good, since it allowed for a fast evolution along with the then
only client. My proposal to split the both may have come too early, but I
personally grew frustrated when implementing my own networking stack. With
the protocol having matured, and changes becoming ever less frequent, I'd be
happy for the split to happen.

>
> Here are several mini-proposals for the Satoshi Client (anyone got a
> better nickname?) along these lines, which should better prepare the
> bitcoin protocol for the long term:
>
I called it Mainline client (like the original Bittorrent client) as a hint
that this is the reference implementation everybody should refer to, but
Satoshi Client has a nice sound too :-)

>
> MP1) Avoid creating four-component version numbers (W.X.Y.Z), and use
> pszSubVer as a client identification string.  This proposal originally
> came from Mike Hearn, IIRC.
>
The version number being incremented each time a breaking change to the
protocol has been made? Mike and I discussed that quite a while back, and
using the String as client specific identifier with a version number (mainly
for statistical purposes) sounds like a good idea, similar to User Agent
strings in HTTP.

>
> MP2) remove IP transactions in v0.4
>

> MP3) create constants for protocol version, and audit code to split
> client version from protocol version.  This is a THORNY patch, and far
> more difficult than https://github.com/bitcoin/bitcoin/pull/63
> implies.  The code has various data structures and such versioned, so
> it is difficult to pick out at quick glance which 'version' is which.
>
Yeah, sorry for that one :-)
I posted the request to the issue tracker before that pull, and I was asked
to submit a pull request with the needed changes, which sounded a bit
strange for a conceptual change like this one. Isn't a gradual switch
possible? I'd leave the version number as is and simply don't increment it,
so if the code does not rely on specific values for pszSubVer it shouldn't
break at all.

>
> MP4) split protocol and client versions in v0.4 -- though you will not
> actually notice a change until v0.4.1, when the client version changes
> but the protocol version does not.
>
So we could consider version 40000 the first "stable" protocol release?
Sounds good.

>
> MP5) Use a single bit inside 'nServices' to indicate the presence of
> an optional "capabilities" message.  The purpose of this is to enable
> minor protocol changes without having to change the protocol version.
> Thus, nodes may advertise /features/ rather than simply "I support all
> features >= version X".  Most mature protocols support this sort of
> thing, rather than the simpler, coarse-grained version number system.
>
Always happy to hear you like my idea :D

All in all I'm really looking forward to this.

Regards,
Chris

>
> --
> Jeff Garzik
> exMULTI, Inc.
> jgarzik at exmulti.com
>
>
> ------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110615/fb8ab67d/attachment.html>

From dhuff at jrbobdobbs.org  Wed Jun 15 13:04:06 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Wed, 15 Jun 2011 08:04:06 -0500
Subject: [Bitcoin-development] Protocol versioning
In-Reply-To: <BANLkTikCQ8g9bEpf2uosKm1Q_K_SSrh0nQ@mail.gmail.com>
References: <BANLkTi=4UeK2D0cCHYGp1tHUTGA2iyWHcA@mail.gmail.com>
	<BANLkTikCQ8g9bEpf2uosKm1Q_K_SSrh0nQ@mail.gmail.com>
Message-ID: <B13FEBE4-EE87-47F4-AE90-17A6673BF7F2@jrbobdobbs.org>


On Jun 15, 2011, at 7:46 AM, Christian Decker wrote:

> On Wed, Jun 15, 2011 at 8:06 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:
> Here are several mini-proposals for the Satoshi Client (anyone got a
> better nickname?) along these lines, which should better prepare the
> bitcoin protocol for the long term:
> I called it Mainline client (like the original Bittorrent client) as a hint that this is the reference implementation everybody should refer to, but Satoshi Client has a nice sound too :-)


I propose "Reference client." Seeing as that's what it is, the original reference implementation.

-- 
Douglas Huff


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110615/aac13554/attachment.html>

From mjmvisser at gmail.com  Wed Jun 15 14:27:51 2011
From: mjmvisser at gmail.com (Mark Visser)
Date: Wed, 15 Jun 2011 10:27:51 -0400
Subject: [Bitcoin-development] Release priorities for v0.4?
In-Reply-To: <BANLkTikOEWZQur8EqumWH0jU=07-4vAFhg@mail.gmail.com>
References: <BANLkTikOEWZQur8EqumWH0jU=07-4vAFhg@mail.gmail.com>
Message-ID: <1B652E42-B585-4F51-ABAD-A74B45492084@gmail.com>

[n00b alert]

I humbly suggest allowing the wallet.dat location to be specified in the preferences. Being able to easily physically disconnect a wallet by unplugging a USB key seems like a good idea.

cheers,
Mark




From jgarzik at exmulti.com  Wed Jun 15 16:50:31 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 15 Jun 2011 12:50:31 -0400
Subject: [Bitcoin-development] Release priorities for v0.4?
In-Reply-To: <1B652E42-B585-4F51-ABAD-A74B45492084@gmail.com>
References: <BANLkTikOEWZQur8EqumWH0jU=07-4vAFhg@mail.gmail.com>
	<1B652E42-B585-4F51-ABAD-A74B45492084@gmail.com>
Message-ID: <BANLkTikFaYqvO5=A-eJwR7aBqau+ba5r9Q@mail.gmail.com>

On Wed, Jun 15, 2011 at 10:27 AM, Mark Visser <mjmvisser at gmail.com> wrote:
> I humbly suggest allowing the wallet.dat location to be specified in the preferences. Being able to easily physically disconnect a wallet by unplugging a USB key seems like a good idea.

That's what -datadir is for.  Unfortunately -all- databases must be in
the datadir, because wallet.dat is a berkeley db, and we need a
transactional environment.  That makes it difficult to move just one
file.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From theodore.witkamp at gmail.com  Wed Jun 15 17:32:39 2011
From: theodore.witkamp at gmail.com (Theodore Witkamp)
Date: Wed, 15 Jun 2011 10:32:39 -0700
Subject: [Bitcoin-development] Release priorities for v0.4?
In-Reply-To: <BANLkTikFaYqvO5=A-eJwR7aBqau+ba5r9Q@mail.gmail.com>
References: <BANLkTikOEWZQur8EqumWH0jU=07-4vAFhg@mail.gmail.com>
	<1B652E42-B585-4F51-ABAD-A74B45492084@gmail.com>
	<BANLkTikFaYqvO5=A-eJwR7aBqau+ba5r9Q@mail.gmail.com>
Message-ID: <BANLkTinKvkGb4S__9fczOSWadtGZTL87og@mail.gmail.com>

On Wed, Jun 15, 2011 at 9:50 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:
> On Wed, Jun 15, 2011 at 10:27 AM, Mark Visser <mjmvisser at gmail.com> wrote:
>> I humbly suggest allowing the wallet.dat location to be specified in the preferences. Being able to easily physically disconnect a wallet by unplugging a USB key seems like a good idea.
>
> That's what -datadir is for. ?Unfortunately -all- databases must be in
> the datadir, because wallet.dat is a berkeley db, and we need a
> transactional environment. ?That makes it difficult to move just one
> file.

I am a Berkley DB ignoramus , but how is specifying the wallet file
path different than using a symlink?

Also I think that allowing the user to open more than one wallet helps
the user develop an intuition for the system.
A simple task like opening transferring coins from one to the other is
currently very awkward on the same installation.

Ted



From theodore.witkamp at gmail.com  Wed Jun 15 17:32:39 2011
From: theodore.witkamp at gmail.com (Theodore Witkamp)
Date: Wed, 15 Jun 2011 10:32:39 -0700
Subject: [Bitcoin-development] Release priorities for v0.4?
In-Reply-To: <BANLkTikFaYqvO5=A-eJwR7aBqau+ba5r9Q@mail.gmail.com>
References: <BANLkTikOEWZQur8EqumWH0jU=07-4vAFhg@mail.gmail.com>
	<1B652E42-B585-4F51-ABAD-A74B45492084@gmail.com>
	<BANLkTikFaYqvO5=A-eJwR7aBqau+ba5r9Q@mail.gmail.com>
Message-ID: <BANLkTinKvkGb4S__9fczOSWadtGZTL87og@mail.gmail.com>

On Wed, Jun 15, 2011 at 9:50 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:
> On Wed, Jun 15, 2011 at 10:27 AM, Mark Visser <mjmvisser at gmail.com> wrote:
>> I humbly suggest allowing the wallet.dat location to be specified in the preferences. Being able to easily physically disconnect a wallet by unplugging a USB key seems like a good idea.
>
> That's what -datadir is for. ?Unfortunately -all- databases must be in
> the datadir, because wallet.dat is a berkeley db, and we need a
> transactional environment. ?That makes it difficult to move just one
> file.

I am a Berkley DB ignoramus , but how is specifying the wallet file
path different than using a symlink?

Also I think that allowing the user to open more than one wallet helps
the user develop an intuition for the system.
A simple task like opening transferring coins from one to the other is
currently very awkward on the same installation.

Ted



From bgroff at lavabit.com  Thu Jun 16 04:53:40 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Thu, 16 Jun 2011 00:53:40 -0400 (EDT)
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced sendescrow
 and redeemescrow API calls
Message-ID: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>

I have a pull request here:

https://github.com/bitcoin/bitcoin/pull/319

>From the README:

  Bitcoin "escrow" are coins that are under the control of multiple
  parties.  The initial implementation allows n parties to vote, with
  k good signatures needed (k <= n).

  This eliminates single points of failure and reduces the trust required
  in many transaction use cases.

Use cases include Escrow (without trusting the escrow agent with the
coins), immediate payment and funds locked with multi-party signatures.

This was inspired by https://forum.bitcoin.org/index.php?topic=8821.0 and
https://forum.bitcoin.org/index.php?topic=4723.msg68804 .

Feedback on the pull is very much appreciated.






From gavinandresen at gmail.com  Thu Jun 16 16:32:57 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 16 Jun 2011 12:32:57 -0400
Subject: [Bitcoin-development] Development priorities
Message-ID: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>

Right!  I'm back from the CIA, and trying to ignore all the reporters
who want to talk with me.

I want to do a quick brain dump on what I think the short-term
development priorities are.  Here's my list:

1) Scaling-up issues, like disconnections when downloading the block chain.

2) Wallet security.

3) Unit testing framework.  There was a PULL that had the start of
boost unit tests; I think that is a critical need, along with a good
suite of test cases.

Those are the big issues for me.  Anything that slows those down I'm
going to ignore (example: love the idea of escrow transactions, but I
do NOT want to add nifty new features when we're having trouble
keeping the features we're using now working properly).

Does everybody agree those are the critical priorities? (try not to
let this thread wander into a discussion of HOW to do stuff, just WHAT
the priorities aught to be)


-- 
--
Gavin Andresen
http://clearcoin.com/



From luke at dashjr.org  Thu Jun 16 17:12:41 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 16 Jun 2011 13:12:41 -0400
Subject: [Bitcoin-development] Development priorities
In-Reply-To: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
References: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
Message-ID: <201106161312.43850.luke@dashjr.org>

I'd put wallet security before scaling, but inevitably, I'm not sure there's 
too much anyone can do about that. Even if the wallet is encrypted, it just 
takes a little more complex code to steal funds if you've infected your 
target.

On Thursday, June 16, 2011 12:32:57 PM Gavin Andresen wrote:
> Right!  I'm back from the CIA, and trying to ignore all the reporters
> who want to talk with me.
> 
> I want to do a quick brain dump on what I think the short-term
> development priorities are.  Here's my list:
> 
> 1) Scaling-up issues, like disconnections when downloading the block 
chain.
> 
> 2) Wallet security.
> 
> 3) Unit testing framework.  There was a PULL that had the start of
> boost unit tests; I think that is a critical need, along with a good
> suite of test cases.
> 
> Those are the big issues for me.  Anything that slows those down I'm
> going to ignore (example: love the idea of escrow transactions, but I
> do NOT want to add nifty new features when we're having trouble
> keeping the features we're using now working properly).
> 
> Does everybody agree those are the critical priorities? (try not to
> let this thread wander into a discussion of HOW to do stuff, just WHAT
> the priorities aught to be)



From jgarzik at exmulti.com  Thu Jun 16 17:59:56 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Thu, 16 Jun 2011 13:59:56 -0400
Subject: [Bitcoin-development] Development priorities
In-Reply-To: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
References: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
Message-ID: <BANLkTimV+0mSqqmLYJeTdvxhM2PjtyXXMw@mail.gmail.com>

On Thu, Jun 16, 2011 at 12:32 PM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> 1) Scaling-up issues, like disconnections when downloading the block chain.
>
> 2) Wallet security.

Agreed, though security professionals (and luke-jr) are already
pointing out the wallet crypto mainly eliminates a bit of bad PR,
rather than being a major crime deterrent.

zooko on IRC had a pretty good suggestion:  introduce a built-in
facility for air-gapped wallets (multiple wallets), so that loss of
your everyday transactional wallet does not mean loss of everything.

You can do this manually, but we need something for all the people who
(a) don't know crypto, and (b) simply download and run the client
without thinking much about security.


> 3) Unit testing framework. ?There was a PULL that had the start of
> boost unit tests; I think that is a critical need, along with a good
> suite of test cases.

Three points, on testing:

T1) autotools has a minimal testing framework built into it.  "make
check" builds, and then runs tests.  Each test is a program or script,
that returns 0 on success and 1 on failure.  "make distcheck" builds,
runs tests, and then creates the distribution tarball if the tests
succeed.

T2) I wouldn't narrow the focus to "unit tests", as stress tests and
other comprehensive, automated tests are quite useful as well

but most importantly...

T3) Don't hold v0.4 release for this.  As we say in kernel-land, we
have a test lab called "the internet"  Test suites have clear software
engineering value, but they largely "guard the past" -- making sure
you don't repeat past mistakes, rather than being a good indicator of
possible upcoming problems.  The best testing is always in the field.
That always finds more problems than unit testing ever does.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From luke at dashjr.org  Thu Jun 16 18:18:46 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 16 Jun 2011 14:18:46 -0400
Subject: [Bitcoin-development] Development priorities
In-Reply-To: <BANLkTimV+0mSqqmLYJeTdvxhM2PjtyXXMw@mail.gmail.com>
References: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
	<BANLkTimV+0mSqqmLYJeTdvxhM2PjtyXXMw@mail.gmail.com>
Message-ID: <201106161418.48804.luke@dashjr.org>

On Thursday, June 16, 2011 1:59:56 PM Jeff Garzik wrote:
> > 2) Wallet security.
> 
> Agreed, though security professionals (and luke-jr) are already
> pointing out the wallet crypto mainly eliminates a bit of bad PR,
> rather than being a major crime deterrent.
> 
> zooko on IRC had a pretty good suggestion:  introduce a built-in
> facility for air-gapped wallets (multiple wallets), so that loss of
> your everyday transactional wallet does not mean loss of everything.

Even if you do this, a cracker can still simply send your encrypted wallet to 
himself, secure-delete your local one, kill your client, and demand you 
publish your password if you want some portion of your coins back.

I'm not sure there's *any* defense for an insecure PC. Maybe Bitcoin will end 
up forcing people to reconsider their priorities when it comes to security...



From phantomcircuit at covertinferno.org  Thu Jun 16 18:24:01 2011
From: phantomcircuit at covertinferno.org (phantomcircuit)
Date: Thu, 16 Jun 2011 20:24:01 +0200
Subject: [Bitcoin-development] Development priorities
In-Reply-To: <201106161418.48804.luke@dashjr.org>
References: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>	<BANLkTimV+0mSqqmLYJeTdvxhM2PjtyXXMw@mail.gmail.com>
	<201106161418.48804.luke@dashjr.org>
Message-ID: <4DFA4A41.70104@covertinferno.org>

On 06/16/11 20:18, Luke-Jr wrote:
> On Thursday, June 16, 2011 1:59:56 PM Jeff Garzik wrote:
>>> 2) Wallet security.
>> Agreed, though security professionals (and luke-jr) are already
>> pointing out the wallet crypto mainly eliminates a bit of bad PR,
>> rather than being a major crime deterrent.
>>
>> zooko on IRC had a pretty good suggestion:  introduce a built-in
>> facility for air-gapped wallets (multiple wallets), so that loss of
>> your everyday transactional wallet does not mean loss of everything.
> Even if you do this, a cracker can still simply send your encrypted wallet to 
> himself, secure-delete your local one, kill your client, and demand you 
> publish your password if you want some portion of your coins back.
>
> I'm not sure there's *any* defense for an insecure PC. Maybe Bitcoin will end 
> up forcing people to reconsider their priorities when it comes to security...
Jeff's scratch off branch modified to use email (as unique salt) and
password would eliminate the need for a static wallet.dat for 99% of the
userbase.  This seems like a much better solution than encryption. 
(Although obviously it's still vulnerable to key loggers).



From jgarzik at exmulti.com  Thu Jun 16 21:51:16 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Thu, 16 Jun 2011 17:51:16 -0400
Subject: [Bitcoin-development] Bitcoin v0.3.23 released
In-Reply-To: <BANLkTim1FP5t=4erKYeomB011WPo4xshow@mail.gmail.com>
References: <BANLkTim1FP5t=4erKYeomB011WPo4xshow@mail.gmail.com>
Message-ID: <BANLkTikm_wQhKExMaC1ZDCAJ663+rhP3CA@mail.gmail.com>

Some minor updates to the released files:

1. Linux tarball regenerated with properly named directory inside.
2. Win32 .zip archive added.
3. PGP-signed SHA1SUM.asc added to SF

The following are the updated checksums:

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

d7a34e1151dedfba5af1bf7496ed041f5b4955e5  bitcoin-0.3.23-linux.tar.gz
42e8a86a97edcafb12d09fa69b56ad0451baa140  bitcoin-0.3.23-macosx.zip
779c6bb227801a51084be9594dc185d0a054ed53  bitcoin-0.3.23-src.tar.gz
12952b1c4a15ce55564500dace18ee22eb2feaa8  bitcoin-0.3.23-win32-setup.exe
89194d3b3ee87f450f520cf365b863e0fab8bc9f  bitcoin-0.3.23-win32.zip
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQIVAwUBTfp5k9odwg8tvwyoAQIJ9Q/9GHiSA8oEuQM29qu1laCD45AY9lnsJeNN
ZNRiAE92WJ7SiSKxW6V1M1phMk4IMG/0MmR8L/PRqJfWDg+6FQzAzpZLobH0Hnfl
MujhKIhRcP1zs7m/t/zwjQxRXT+N6UotfdwvO+GLbBnUSVZC2zr/9XdSs65gLIhq
lMkJUwYLEBvuXvo98Sbp5MeXHdfWUqAQufuYnMvRsCT9BcX5cP8cmaxvICLANRbc
89kU+7JQ7fauiHTnYJ0GkK/xIyCnlwfGsEe8GQsIgWF0RBpayszCxSOsuzFYMsED
7cIjN9AscDiJ3UmhXSg6xbRi4LZGXm195TmMdxJdRNHWqjfpFkxEXoW7iuUvxVDU
tiMMA+yXMTUSdbn2IxdZFLqKpgXcpf05T91g9w/ll1VMxkmOOcTSZc5dCbMMUn0z
kA12PagjDlH+xz3Qab9GNV13XlHKbG0VT8AsE1No+HJCV8qugMdI6hgZqMDucbmQ
U2KiG0EpwNx2G31l2K99yIxuumE7nDslhkfzSosVXhgHwqzr4ukl5ykFwfZnJjHF
BJ0zrcWCViGes+3awHwASQvlIGcvXprEzC0ZKEsbalZkAoCYYiGoZbNHtEMq3lZq
d0siUzwEPA31xfS/dACbX8ml8jC0jBmEy296WZ2LX7pZOcqa2ayMbGE81tg+5Nvy
UYihPYX4FS0=
=9NXu
-----END PGP SIGNATURE-----

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From bgroff at lavabit.com  Fri Jun 17 03:05:59 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Thu, 16 Jun 2011 23:05:59 -0400 (EDT)
Subject: [Bitcoin-development] Development priorities
In-Reply-To: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
References: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
Message-ID: <14784.137.56.163.46.1308279959.squirrel@lavabit.com>

> 1) Scaling-up issues, like disconnections when downloading the block
> chain.
>
> 2) Wallet security.
>
> 3) Unit testing framework.  There was a PULL that had the start of
> boost unit tests; I think that is a critical need, along with a good
> suite of test cases.

I agree that these are critical and I'd love to help, especially on #2 and
#3.  #3 will, by necessity, include a thorough review of the code, which
may uncover latent issues.

I think that for #2 it would also be good to publish a "Best security
practices" document to try and educate the user base.

> Those are the big issues for me.  Anything that slows those down I'm
> going to ignore (example: love the idea of escrow transactions, but I
> do NOT want to add nifty new features when we're having trouble
> keeping the features we're using now working properly).

That is understandable.  However, something to think about later is that
multi-signature coins can help with #2, even with compromised end-user
machines.

--
Bobby Groff






From witchspace81 at gmail.com  Fri Jun 17 06:42:30 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 17 Jun 2011 06:42:30 +0000
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
Message-ID: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>

Hello,

I think my Qt GUI is pretty much ready for merging. I've been using it for a
while and all functionality works.

What is the current roadmap for including the autotools build system, so
that it will be possible to support multiple GUIs? 0.4.0?

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110617/f52640b9/attachment.html>

From brendan at bbqsrc.net  Fri Jun 17 07:05:16 2011
From: brendan at bbqsrc.net (Brendan Molloy)
Date: Fri, 17 Jun 2011 17:05:16 +1000
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
Message-ID: <4DFAFCAC.80909@bbqsrc.net>

Is there a link to this GUI code?

John Smith wrote:
> Hello,
> 
> I think my Qt GUI is pretty much ready for merging. I've been using it for a
> while and all functionality works.
> 
> What is the current roadmap for including the autotools build system, so
> that it will be possible to support multiple GUIs? 0.4.0?
> 
> JS
> 
> 
> ------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-- 
Regards,
Brendan Molloy

M: +61 434 069 776
T: @piecritic
W: http://bbqsrc.net
E: brendan at bbqsrc.net



From pieter.wuille at gmail.com  Fri Jun 17 10:31:25 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 17 Jun 2011 12:31:25 +0200
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
Message-ID: <20110617103124.GA7177@ulyssis.org>

On Fri, Jun 17, 2011 at 06:42:30AM +0000, John Smith wrote:
> Hello,
> 
> I think my Qt GUI is pretty much ready for merging. I've been using it for a
> while and all functionality works.
> 
> What is the current roadmap for including the autotools build system, so
> that it will be possible to support multiple GUIs? 0.4.0?

I'm in favor of merging autotools now, unless there are still known issues with
it, such as mingw32 compatibility?

If the Qt port is functionally complete and stable, I'd vote to have it merged as
well under these conditions:
* the changes to the 'core' are minimal/trivial
* marked as 'experimental', and not enabled by default

The only disadvantage of another GUI is that the (necessary) cleanup of RPC/GUI
code will now need makes changes in 3 places instead of 2, but as I understand
it, there are much more people willing to work on Qt code than on wx code?

-- 
Pieter



From luke at dashjr.org  Fri Jun 17 13:29:54 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 17 Jun 2011 09:29:54 -0400
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <20110617103124.GA7177@ulyssis.org>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
	<20110617103124.GA7177@ulyssis.org>
Message-ID: <201106170929.57750.luke@dashjr.org>

On Friday, June 17, 2011 6:31:25 AM Pieter Wuille wrote:
> The only disadvantage of another GUI is that the (necessary) cleanup of
> RPC/GUI code will now need makes changes in 3 places instead of 2, but as
> I understand it, there are much more people willing to work on Qt code
> than on wx code?

I'm not sure the Wallet protocol implementation needs to touch the GUI code at 
all, except when porting the GUI to use it. Therefore, if the code is already 
written, I don't see any harm in merging it.



From dhuff at jrbobdobbs.org  Fri Jun 17 14:10:35 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Fri, 17 Jun 2011 09:10:35 -0500
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <201106170929.57750.luke@dashjr.org>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
	<20110617103124.GA7177@ulyssis.org>
	<201106170929.57750.luke@dashjr.org>
Message-ID: <BANLkTi=g5-xHk4rCo=0zm4GFeLNMuONe2w@mail.gmail.com>

Agreed. The sooner qt gets merged the sooner real GUI improvements will be
made.
On Jun 17, 2011 8:30 AM, "Luke-Jr" <luke at dashjr.org> wrote:
> On Friday, June 17, 2011 6:31:25 AM Pieter Wuille wrote:
>> The only disadvantage of another GUI is that the (necessary) cleanup of
>> RPC/GUI code will now need makes changes in 3 places instead of 2, but as
>> I understand it, there are much more people willing to work on Qt code
>> than on wx code?
>
> I'm not sure the Wallet protocol implementation needs to touch the GUI
code at
> all, except when porting the GUI to use it. Therefore, if the code is
already
> written, I don't see any harm in merging it.
>
>
------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110617/0ec9e113/attachment.html>

From gavinandresen at gmail.com  Fri Jun 17 16:27:22 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 17 Jun 2011 12:27:22 -0400
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
Message-ID: <BANLkTinMTivemc92F9pVoxkpEzkzyK2EGg@mail.gmail.com>

I'm in favor of dropping the wxWidgets GUI and replacing it with a Qt
GUI. I think supporting more than one GUI for the reference client is
a bad idea.

Qt is LGPL, so license for that is not an issue.
John, you willing to release your code under the bitcoin MIT license?

Everybody else:  anybody object to replacing "the devil we know"
(wxWidgets) with Qt?

-- 
--
Gavin Andresen



From luke at dashjr.org  Fri Jun 17 20:37:07 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 17 Jun 2011 16:37:07 -0400
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <BANLkTinMTivemc92F9pVoxkpEzkzyK2EGg@mail.gmail.com>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
	<BANLkTinMTivemc92F9pVoxkpEzkzyK2EGg@mail.gmail.com>
Message-ID: <201106171637.09478.luke@dashjr.org>

On Friday, June 17, 2011 12:27:22 PM Gavin Andresen wrote:
> I'm in favor of dropping the wxWidgets GUI and replacing it with a Qt
> GUI. I think supporting more than one GUI for the reference client is
> a bad idea.
> 
> Qt is LGPL, so license for that is not an issue.
> John, you willing to release your code under the bitcoin MIT license?
> 
> Everybody else:  anybody object to replacing "the devil we know"
> (wxWidgets) with Qt?

So long as we can get a solid name for it. Obviously I can't continue to call 
it wxBitcoin if it's strictly Qt...



From jgarzik at exmulti.com  Fri Jun 17 22:59:00 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Fri, 17 Jun 2011 18:59:00 -0400
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <201106171637.09478.luke@dashjr.org>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
	<BANLkTinMTivemc92F9pVoxkpEzkzyK2EGg@mail.gmail.com>
	<201106171637.09478.luke@dashjr.org>
Message-ID: <BANLkTikGHcjoaW0JGu89kk8zdJaVHodtUg@mail.gmail.com>

On Fri, Jun 17, 2011 at 4:37 PM, Luke-Jr <luke at dashjr.org> wrote:
> So long as we can get a solid name for it. Obviously I can't continue to call
> it wxBitcoin if it's strictly Qt...

I've started calling the github/bitcoin/bitcoin.git the Satoshi
Client, GUI or not.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From pieter.wuille at gmail.com  Sun Jun 19 00:30:49 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 19 Jun 2011 02:30:49 +0200
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
Message-ID: <20110619003048.GA26366@ulyssis.org>

On Fri, Jun 17, 2011 at 06:42:30AM +0000, John Smith wrote:
> Hello,
> 
> I think my Qt GUI is pretty much ready for merging. I've been using it for a
> while and all functionality works.
> 
> What is the current roadmap for including the autotools build system, so
> that it will be possible to support multiple GUIs? 0.4.0?

The consensus seems to be to merge autotools and qtgui. However, autotools is
apparently not tested (enough) on native windows and osx platforms.

Anyone on this list with either development environnement, and willingness
to test?

-- 
Pieter




From luke at dashjr.org  Sun Jun 19 01:37:26 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 18 Jun 2011 21:37:26 -0400
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
Message-ID: <201106182137.29377.luke@dashjr.org>

On Friday, June 17, 2011 2:42:30 AM John Smith wrote:
> I think my Qt GUI is pretty much ready for merging. I've been using it for
> a while and all functionality works.

Before this gets merged, I'd like to check: does it work ok if Qt is built 
without glib support?



From jgarzik at exmulti.com  Sun Jun 19 02:12:32 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 18 Jun 2011 22:12:32 -0400
Subject: [Bitcoin-development] Wallet class merged -- rebasing needed
Message-ID: <BANLkTinuciS2cmp1XN9zefk27tCAJVF7hw@mail.gmail.com>

OK, sipa pulled his wallet code movement + wallet class stuff.

Wallet import/export and crypto will need a rebase.  Other code will
too, but those are the big ticket items that we want to merge in the
short term.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From mike at plan99.net  Sun Jun 19 14:26:32 2011
From: mike at plan99.net (Mike Hearn)
Date: Sun, 19 Jun 2011 16:26:32 +0200
Subject: [Bitcoin-development] Development priorities
In-Reply-To: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
References: <BANLkTimZ5j7=1G89uRO9f7fHPdmDMpLMqg@mail.gmail.com>
Message-ID: <BANLkTim5M+hSjbp-RBM=qZASY+=ub6h7Qg@mail.gmail.com>

Probably patches for this bug would also be high priority:

   http://forum.bitcoin.org/index.php?topic=19168.0

It should be an easy fix.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110619/01a17fed/attachment.html>

From dhuff at jrbobdobbs.org  Sun Jun 19 21:54:28 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Sun, 19 Jun 2011 16:54:28 -0500
Subject: [Bitcoin-development] Bitcoin fun day!
Message-ID: <2B2201C1-E59F-47D4-BF67-08FDB0DDE386@jrbobdobbs.org>

In light of recent events in the "bitcoin community" I have decided that private disclosure of issues is doing nothing but making them more prevalent.

In light of this decision I would like to report multiple CSRF vulnerabilities in http://clearcoin.appspot.com .

This set of CSRFs are particularly nasty since this is hosted on appspot and uses google account auth. So long as you stay logged into your google account you are vulnerable to this CSRF.

Things tested:
  Changing refund address.
  Releasing funds.

POC code (open this in any browser even from a local file):
==========
<html><head><title>test</title></head>
  <body>
  <form id="refund_address_form" action="https://clearcoin.appspot.com/set_refund_address" method="POST"> 
      <label for="refund_address">Your bitcoin address:</label> 
      <input type="text" name="refund_address" id="refund_address" size="60" value="PUT ANY ADDRESS HERE"
             class="text ui-widget-content ui-corner-all" autofocus required placeholder="refund bitcoin address"/> (required)
  </form> 
  </body>
</html>
==========

Javascript auto submittal, hiding in an iframe, and other obfuscation methods are left as an exercise to the list.

This site is run and maintained by Gavin Anderson, aka, the lead bitcoin maintainer.

You should know better Gavin.

-- 
Douglas Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3737 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110619/eb27ed0c/attachment.p7s>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110619/eb27ed0c/attachment.sig>

From gavinandresen at gmail.com  Sun Jun 19 22:33:14 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sun, 19 Jun 2011 18:33:14 -0400
Subject: [Bitcoin-development] Bitcoin fun day!
In-Reply-To: <2B2201C1-E59F-47D4-BF67-08FDB0DDE386@jrbobdobbs.org>
References: <2B2201C1-E59F-47D4-BF67-08FDB0DDE386@jrbobdobbs.org>
Message-ID: <BANLkTikiBz52hVreTVJM4Q15rtfGLVE2sQ@mail.gmail.com>

Some of us take private disclosures of vulnerabilities very seriously.

In any case, the ClearCoin CSRF vulnerability is fixed.  Thank you for
bringing it to my attention.

On Sun, Jun 19, 2011 at 5:54 PM, Doug Huff <dhuff at jrbobdobbs.org> wrote:
> In light of this decision I would like to report multiple CSRF vulnerabilities in http://clearcoin.appspot.com .
>
> This set of CSRFs are particularly nasty since this is hosted on appspot and uses google account auth. So long as you stay logged into your google account you are vulnerable to this CSRF.


-- 
--
Gavin Andresen
http://clearcoin.com/



From dhuff at jrbobdobbs.org  Sun Jun 19 22:36:27 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Sun, 19 Jun 2011 17:36:27 -0500
Subject: [Bitcoin-development] Bitcoin fun day!
In-Reply-To: <BANLkTikiBz52hVreTVJM4Q15rtfGLVE2sQ@mail.gmail.com>
References: <2B2201C1-E59F-47D4-BF67-08FDB0DDE386@jrbobdobbs.org>
	<BANLkTikiBz52hVreTVJM4Q15rtfGLVE2sQ@mail.gmail.com>
Message-ID: <BANLkTin8YrrgcRC7MQBo0grcMME-nfW=GA@mail.gmail.com>

I know. Please do not take this as a personal attack. Blame MagicalTux's
irresponsible behaviour as of late. :(
On Jun 19, 2011 5:34 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> Some of us take private disclosures of vulnerabilities very seriously.
>
> In any case, the ClearCoin CSRF vulnerability is fixed. Thank you for
> bringing it to my attention.
>
> On Sun, Jun 19, 2011 at 5:54 PM, Doug Huff <dhuff at jrbobdobbs.org> wrote:
>> In light of this decision I would like to report multiple CSRF
vulnerabilities in http://clearcoin.appspot.com .
>>
>> This set of CSRFs are particularly nasty since this is hosted on appspot
and uses google account auth. So long as you stay logged into your google
account you are vulnerable to this CSRF.
>
>
> --
> --
> Gavin Andresen
> http://clearcoin.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110619/7d4ef3fb/attachment.html>

From mjmvisser at gmail.com  Mon Jun 20 02:34:03 2011
From: mjmvisser at gmail.com (Mark Visser)
Date: Sun, 19 Jun 2011 22:34:03 -0400
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge [Mac
	update]
In-Reply-To: <20110619003048.GA26366@ulyssis.org>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
	<20110619003048.GA26366@ulyssis.org>
Message-ID: <3562E09F-A129-4D97-9624-6002544C7430@gmail.com>

Hi everyone,

I spent some time today with the bitcoin-qt client and autotools on mac. The qt client builds and runs with a few small changes (mostly just #including boost/filesystem/operations.hpp in a few places).

Autotools + qt will take a bit longer. I've got something *almost* working, but I won't have a chance to finish it for the rest of the week. I'll push the changes to github tomorrow (Monday) so anyone else can take a crack at it if they so wish.

cheers,
-Mark

On 2011-06-18, at 8:30 PM, Pieter Wuille wrote:

> On Fri, Jun 17, 2011 at 06:42:30AM +0000, John Smith wrote:
>> Hello,
>> 
>> I think my Qt GUI is pretty much ready for merging. I've been using it for a
>> while and all functionality works.
>> 
>> What is the current roadmap for including the autotools build system, so
>> that it will be possible to support multiple GUIs? 0.4.0?
> 
> The consensus seems to be to merge autotools and qtgui. However, autotools is
> apparently not tested (enough) on native windows and osx platforms.
> 
> Anyone on this list with either development environnement, and willingness
> to test?
> 
> -- 
> Pieter
> 
> 
> ------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From dhuff at jrbobdobbs.org  Tue Jun 21 04:49:26 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Mon, 20 Jun 2011 23:49:26 -0500
Subject: [Bitcoin-development] More plausible mtgox.com post-mortem
	(Bitcoin fun week!)
In-Reply-To: <76D936F8-2746-4CEE-861A-A99D1BAD11D7@jrbobdobbs.org>
References: <76D936F8-2746-4CEE-861A-A99D1BAD11D7@jrbobdobbs.org>
Message-ID: <D091767C-EF92-4B63-9C29-924F32AE34D7@jrbobdobbs.org>

Oh ya, forgot this tidbit. Thanks gmaxwell!:

Not mentioned here is that fact that dozens of MTGOX hashed passwords were quietly disclosed on a hash cracking forum on Fri Jun 17, 2011 5:21 am 
(http://forum.insidepro.com/viewtopic.php?t=9124&postdays=0&postorder=asc&start=75&sid=1a9e31567fe815c0eea63c40c39fb707 post by "georgeclooney")

Since the overwhelming majority but not all of the hashes match the mtgox database that was posted on this forum (now deleted) and elsewhere I suspect that this post may have been generated from an earlier dump than was disclosed on the forums and everywhere else after the big event.

This appears to be significantly ahead of the prior claimed breach, and is consistent with the great many other mtgox users claiming that their accounts were robbed prior to the big event on Sunday, which I believe would have been too early to be results of the mtgox database leak according to the official timeline re: auditor compromise.

On Jun 20, 2011, at 11:17 PM, Doug Huff wrote:

> I have two independent sources claiming known SQLi vulnerabilities in MtGox.
> 
> One of said SQLi vulnerabilties was confirmed to be patched on the 16th.
> The other was not patched, to anyone's knowledge, at the time of the market crash and database leak. The one that was not patched could have plausibly been used to dump the user table.
> 
> The details follow in these chat logs. POC for the referenced xss+csrf is also provided. Whether or not it is still an issue is not known for sure at this time as the site cannot be accessed.
> 
> It has also been found that MtGox exposes it's admin user interface even if a user does not have the admin flag set on their account. As of now it is thought that most actions attempted to be used will throw permission errors. Once again. This cannot be confirmed at this time. https://mtgox.com/app/webroot/code/admin
> 
> MagicalTux, now that your claim "The site was not compromised with a SQL injection as many are reporting, so in effect the site was not hacked." Please respond. The truth this time.
> 
> MagicalTux's official response at the time of this writing is also attached. It is available at:
> https://support.mtgox.com/entries/20208066-huge-bitcoin-sell-off-due-to-a-compromised-account-rollback
> 
> These logs are not modified except for user's hostmasks at their request due to MagicalTux's new found policy of committing libel against his users based on login logs, since he apparently doesn't keep order book logs for orders that go through immediately, by his own admission. Classy.
> 
> Mirrors:
> http://privatepaste.com/93e8a9cd64 (#bitcoin-hax log)
> http://privatepaste.com/47a50cab5b (sig)
> http://www.mediafire.com/?m7o4z3oz9nyd3v3 (#bitcoin-hax log)
> http://www.mediafire.com/?nzcpa5mwpw9ccbb (sig)
> http://privatepaste.com/e4bacfae37 (PovAddict log)
> http://privatepaste.com/9dc5daf8a0 (sig)
> http://www.mediafire.com/?bflr76anvv835ib (PovAddict log)
> http://www.mediafire.com/?rl250c2dahw7dx9 (sig)
> http://privatepaste.com/6dad3927d6 (XSS + CSRF)
> http://privatepaste.com/45e5aa0d30 (sig)
> http://www.mediafire.com/?synt5sjcbkl9zvq (XSS + CSRF)
> http://www.mediafire.com/?uv7be34198pseoo (sig)

-- 
Doug Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3737 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110620/11e15a1e/attachment.p7s>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110620/11e15a1e/attachment.sig>

From mike at plan99.net  Wed Jun 22 13:24:36 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 22 Jun 2011 15:24:36 +0200
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
Message-ID: <BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>

Thanks for writing this. It's great to see somebody run with the contracts
protocol.

Your proposed protocol is simpler than the one I suggested, so I updated the
Contracts wiki page to use it. However your implementation, as pointed out
by Gavin, is too complicated. See my proposal on the wiki here:

  https://en.bitcoin.it/wiki/Contracts

I think you can just use an output script of

  2 <K1> <K2> <K3> 3 CHECKMULTISIGVERIFY



On Thu, Jun 16, 2011 at 6:53 AM, <bgroff at lavabit.com> wrote:

> I have a pull request here:
>
> https://github.com/bitcoin/bitcoin/pull/319
>
> >From the README:
>
>  Bitcoin "escrow" are coins that are under the control of multiple
>  parties.  The initial implementation allows n parties to vote, with
>  k good signatures needed (k <= n).
>
>  This eliminates single points of failure and reduces the trust required
>  in many transaction use cases.
>
> Use cases include Escrow (without trusting the escrow agent with the
> coins), immediate payment and funds locked with multi-party signatures.
>
> This was inspired by https://forum.bitcoin.org/index.php?topic=8821.0 and
> https://forum.bitcoin.org/index.php?topic=4723.msg68804 .
>
> Feedback on the pull is very much appreciated.
>
>
>
>
>
> ------------------------------------------------------------------------------
> EditLive Enterprise is the world's most technically advanced content
> authoring tool. Experience the power of Track Changes, Inline Image
> Editing and ensure content is compliant with Accessibility Checking.
> http://p.sf.net/sfu/ephox-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110622/94aeaa9f/attachment.html>

From mike at plan99.net  Wed Jun 22 13:42:11 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 22 Jun 2011 15:42:11 +0200
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
Message-ID: <BANLkTin112Lriqg7cMo3P3WnFvVrcYPEK1d_T5x8Xcgf_gTc8Q@mail.gmail.com>

Oh, one other thing - as you point out yourself, escrow is only one use case
for multsig transactions. So I suggest you don't use the word in the patch.
Maybe instead call them multisign or multipay transactions.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110622/38c43886/attachment.html>

From gavinandresen at gmail.com  Wed Jun 22 14:08:05 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 22 Jun 2011 10:08:05 -0400
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
Message-ID: <BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>

On Wed, Jun 22, 2011 at 9:24 AM, Mike Hearn <mike at plan99.net> wrote:
> I think you can just use an output script of
> ? 2 <K1> <K2> <K3> 3 CHECKMULTISIGVERIFY

I think it is time to start experimenting with MULTISIG transactions on testnet.

Mike:  Did Satoshi ever tell you what he was thinking for the best way
to implement MULTISIG transactions?
I'm wondering if hard-coding new standard script templates in
script.cpp Solver():

 vTemplates.push_back(CScript() << OP_1 << OP_PUBKEY << OP_PUBKEY <<
OP_2 << OP_CHECKMULTISIGVERIFY);
 vTemplates.push_back(CScript() << OP_2 << OP_PUBKEY << OP_PUBKEY <<
OP_2 << OP_CHECKMULTISIGVERIFY);
 vTemplates.push_back(CScript() << OP_1 << OP_PUBKEY << OP_PUBKEY <<
OP_PUBKEY << OP_3 << OP_CHECKMULTISIGVERIFY);
 vTemplates.push_back(CScript() << OP_2 << OP_PUBKEY << OP_PUBKEY <<
OP_PUBKEY << OP_3 << OP_CHECKMULTISIGVERIFY);
 vTemplates.push_back(CScript() << OP_3 << OP_PUBKEY << OP_PUBKEY <<
OP_PUBKEY << OP_3 << OP_CHECKMULTISIGVERIFY);

... would be the right approach to support 1/2 of 2 and 1/2/3 of 3
signatures.  It'd be nice if there were generic
OP_N << OP_PUBKEY_N << OP_N  ... template matching opcodes, but there aren't.

I'm also wondering if it makes sense to just support 2-of-2 (for
validate-on-multiple-devices) and 2-of-3 (for escrow) for now.

I think all of these could use a new type of bitcoin payment address;
it might make sense for THAT to be generic, maybe containing:
 version byte
 m
 n
 hash of xor of all n public keys
 checksum

I'm most interested in the 2-of-2 case; I think merchants and
exchanges need bitcoin deposit/payment addresses that they can make
secure by requiring a 2-step signature process for spending those
funds.

-- 
--
Gavin Andresen
http://clearcoin.com/



From pieter.wuille at gmail.com  Wed Jun 22 14:18:37 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 22 Jun 2011 16:18:37 +0200
Subject: [Bitcoin-development] Roadmap for autotools / Qt gui merge
In-Reply-To: <20110619003048.GA26366@ulyssis.org>
References: <BANLkTi=S0_K7kftB-+driDFiXBQ6LDhSPQ@mail.gmail.com>
	<20110619003048.GA26366@ulyssis.org>
Message-ID: <20110622141836.GA16598@ulyssis.org>

On Sun, Jun 19, 2011 at 02:30:49AM +0200, Pieter Wuille wrote:
> The consensus seems to be to merge autotools and qtgui. However, autotools is
> apparently not tested (enough) on native windows and osx platforms.
> 
> Anyone on this list with either development environnement, and willingness
> to test?

Jaromil has his autotools branch rebased against git master, and included Mark's
NOSIGPIPE/NOSIGNAL patch (needs a commit summary, though).

Can people test this compiles+works on several systems (ubuntu, fedora(?), mingw
crosscompile, osx, ...)?

  See https://github.com/jaromil/bitcoin/commits/autotools3

For me, it works on Ubuntu 10.10 amd64, including wx gui.

-- 
Pieter



From mike at plan99.net  Wed Jun 22 14:49:51 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 22 Jun 2011 16:49:51 +0200
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
	<BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>
Message-ID: <BANLkTinUbJ6CKczHiyX2esMyRWgUrJ_9ASeOqZbRj+23GZgjcQ@mail.gmail.com>

> Mike: ?Did Satoshi ever tell you what he was thinking for the best way
> to implement MULTISIG transactions?

He didn't. Satoshi told me very little unfortunately. What he did tell
me, I've written up about half of it. I still have high frequency
trading and some details of obscure SIGHASH types to go, but I wanted
to find examples to illustrate them first as Satoshi only gave the
vaguest of outlines.

> I'm wondering if hard-coding new standard script templates in
> script.cpp Solver():

CHECKMULTISIG allows up to 20 keys, I think. So it'd probably be
better to just have a bit of custom logic that checks if the script is
of the right form.

> ... would be the right approach to support 1/2 of 2 and 1/2/3 of 3
> signatures. ?It'd be nice if there were generic
> OP_N << OP_PUBKEY_N << OP_N ?... template matching opcodes, but there aren't.

I suppose they could be added if need be. Template matching opcodes
might come in useful later when clients only want to download
transactions of interest to them.

> I'm also wondering if it makes sense to just support 2-of-2 (for
> validate-on-multiple-devices) and 2-of-3 (for escrow) for now.

Given the costs involved with adding new transaction types, I'd go for
allowing any number of signatures up to the max.

> I think all of these could use a new type of bitcoin payment address;
> it might make sense for THAT to be generic, maybe containing:
> ?version byte
> ?m
> ?n
> ?hash of xor of all n public keys
> ?checksum

I don't understand what this is for. For triggering such a transaction
via the UI, I think establishing a higher level protocol would be
needed. It's a separate step.

For instance, it's not safe to use escrow until you've checked that
the escrow key is owned by who you think it is. Otherwise a buyer
could give you a 2-of-3 transaction where they own both keys. So there
needs to be some kind of protocol (probably HTTP based) where the
buyer communicates to the merchant a list of acceptable escrow
agencies, the merchant intersects with the list of agencies it
accepts, there needs to be a way to request a pubkey from a remote
domain, one side needs to be able to challenge that domain with a
nonce, etc. It's quite complicated and would need to be specced out
independently of supporting multipay transactions.

> I'm most interested in the 2-of-2 case; I think merchants and
> exchanges need bitcoin deposit/payment addresses that they can make
> secure by requiring a 2-step signature process for spending those
> funds.

Yes it's one way to achieve security. Having BitBanks that store your
coins and require you to verify tx acceptance with an external device
is even stronger, because that external device can be guaranteed
virus/clone-proof. Some banks do this today for wire transfers (they
implicitly assume you get the wire details out of band or that no
virus can rewrite wiring instructions to point somewhere else).

But it'll be a while yet before any such company arises. Until then
2-of-2 transactions are probably a good halfway point.



From gavinandresen at gmail.com  Wed Jun 22 15:32:49 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 22 Jun 2011 11:32:49 -0400
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTinUbJ6CKczHiyX2esMyRWgUrJ_9ASeOqZbRj+23GZgjcQ@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
	<BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>
	<BANLkTinUbJ6CKczHiyX2esMyRWgUrJ_9ASeOqZbRj+23GZgjcQ@mail.gmail.com>
Message-ID: <BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>

...
>> I think all of these could use a new type of bitcoin payment address;
>> it might make sense for THAT to be generic, maybe containing:
>> ?version byte
>> ?m
>> ?n
>> ?hash of xor of all n public keys
>> ?checksum
>
> I don't understand what this is for. For triggering such a transaction
> via the UI, I think establishing a higher level protocol would be
> needed. It's a separate step.

You're right, it doesn't make sense.  The use case I would like to work is:

I setup an escrow that requires m of n signatures to release funds,
securely getting public keys from the other n-1 parties.

Now we all need to fund the escrow. Or maybe other people can fund the
escrow (it just takes m of n of us to decide when/how/where to spend
the funds).

It would be spiffy to publish a new type of bitcoin address that is an
"m of n address", that anybody could pay into, but would require m of
n signatures to spend.  Publishing a really really long address with
all n public keys would work.

It would be great if the "higher level protocol" for pay-to-escrow was
just get a bitcoin address via https (or other secure mechanism), like
we do now for pay-to-single-party.  Where the person you're paying has
their own mechanisms for generating or fetching/authenticating the
public keys, and knows which bitcoin addresses they've published.

All of which makes me wonder if the straightforward "n PUBKEYS m
CHECKMULTISIG" transaction type is the right thing to do.
Following the pattern of our standard DUP HASH160 etc. transaction
type, maybe 2 of 2 and 2 of three should be:

2DUP ADD HASH160 ...hash(pubkey1+2)... EQUALVERIFY 2 2 ROLL CHECKMULTISIGVERIFY
3DUP ADD  ADD HASH160 ...hash(pubkey1+2+3)... EQUALVERIFY 2 3 ROLL
CHECKMULTISIGVERIFY

Spending those transactions would mean putting the m signatures and
the n public keys in the TxIn, but sending funds you'd only need the
hash of the sum of the public keys.

-- 
--
Gavin Andresen
http://clearcoin.com/



From bgroff at lavabit.com  Wed Jun 22 16:01:47 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Wed, 22 Jun 2011 12:01:47 -0400 (EDT)
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTin112Lriqg7cMo3P3WnFvVrcYPEK1d_T5x8Xcgf_gTc8Q@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
	<BANLkTin112Lriqg7cMo3P3WnFvVrcYPEK1d_T5x8Xcgf_gTc8Q@mail.gmail.com>
Message-ID: <26145.212.28.72.39.1308758507.squirrel@lavabit.com>

> Oh, one other thing - as you point out yourself, escrow is only one use
> case
> for multsig transactions. So I suggest you don't use the word in the
> patch.
> Maybe instead call them multisign or multipay transactions.


Agreed.  I'll rename to multisign.

--
Bobby Groff





From mike at plan99.net  Wed Jun 22 16:02:05 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 22 Jun 2011 18:02:05 +0200
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
	<BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>
	<BANLkTinUbJ6CKczHiyX2esMyRWgUrJ_9ASeOqZbRj+23GZgjcQ@mail.gmail.com>
	<BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>
Message-ID: <BANLkTikThwkSBjmxqkVTqdht1dM6=SVO+MFu_-NB0BaNLpy5yg@mail.gmail.com>

> All of which makes me wonder if the straightforward "n PUBKEYS m
> CHECKMULTISIG" transaction type is the right thing to do.

As far as I understand the only reason for hashing the public key is
for typing convenience. Otherwise we'd all just pass raw public keys
around and use the simple form seen in the direct-to-ip case.

But as there'd need to be a higher level protocol on top of the
multipay transactions in order to verify who the other parties are,
there's no need for typing convenience. It'd all be done
automatically.



From bgroff at lavabit.com  Wed Jun 22 16:23:46 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Wed, 22 Jun 2011 12:23:46 -0400 (EDT)
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
	<BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>
	<BANLkTinUbJ6CKczHiyX2esMyRWgUrJ_9ASeOqZbRj+23GZgjcQ@mail.gmail.com>
	<BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>
Message-ID: <59140.77.247.181.162.1308759826.squirrel@lavabit.com>

Gavin said:

> It would be spiffy to publish a new type of bitcoin address that is an
> "m of n address", that anybody could pay into, but would require m of
> n signatures to spend.  Publishing a really really long address with
> all n public keys would work.

I currently have 2,ADDR1,ADDR2,ADDR3 (2-of-3 example) as this new address
type.

>
> It would be great if the "higher level protocol" for pay-to-escrow was
> just get a bitcoin address via https (or other secure mechanism), like
> we do now for pay-to-single-party.  Where the person you're paying has
> their own mechanisms for generating or fetching/authenticating the
> public keys, and knows which bitcoin addresses they've published.

Agreed.

> All of which makes me wonder if the straightforward "n PUBKEYS m
> CHECKMULTISIG" transaction type is the right thing to do.
> Following the pattern of our standard DUP HASH160 etc. transaction
> type, maybe 2 of 2 and 2 of three should be:
>
> 2DUP ADD HASH160 ...hash(pubkey1+2)... EQUALVERIFY 2 2 ROLL
> CHECKMULTISIGVERIFY
> 3DUP ADD  ADD HASH160 ...hash(pubkey1+2+3)... EQUALVERIFY 2 3 ROLL
> CHECKMULTISIGVERIFY
>
> Spending those transactions would mean putting the m signatures and
> the n public keys in the TxIn, but sending funds you'd only need the
> hash of the sum of the public keys.

This is similar to the way the current implementation works.  It uses
HASH160, but there's no attempt to save space by hashing the sum of the
pubkeys.  The major advantage of summing is shorter address for the end
user to copy-paste.  The disadvantage is the need for long term storage of
the key set so you know what keys to sign with.

> --
> Gavin Andresen
> http://clearcoin.com/

--
Bobby Groff





From bgroff at lavabit.com  Wed Jun 22 19:33:12 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Wed, 22 Jun 2011 15:33:12 -0400 (EDT)
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <59140.77.247.181.162.1308759826.squirrel@lavabit.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
	<BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>
	<BANLkTinUbJ6CKczHiyX2esMyRWgUrJ_9ASeOqZbRj+23GZgjcQ@mail.gmail.com>
	<BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>
	<59140.77.247.181.162.1308759826.squirrel@lavabit.com>
Message-ID: <37401.137.56.163.46.1308771192.squirrel@lavabit.com>

> Gavin said:
>> 3DUP ADD  ADD HASH160 ...hash(pubkey1+2+3)... EQUALVERIFY 2 3 ROLL
>> CHECKMULTISIGVERIFY

On second thought, I'm not sure this is workable.  You would have to
distribute each party's pubkey ahead of time, otherwise you run the risk
that a party falls off the face of the earth and then you can't provide
the pubkeys to have hash(pubkey1+2+3) EQUALVERIFY.

If you have to distribute the pubkeys ahead of time, then the reduction in
address length becomes moot.

So it seems to be either distribute the pubkeys or distribute the
hash160(pubkey)'s.

--
Bobby Groff





From bgroff at lavabit.com  Wed Jun 22 20:44:38 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Wed, 22 Jun 2011 16:44:38 -0400 (EDT)
Subject: [Bitcoin-development] [PULL] Add scriptPubKey enforced
 sendescrow and redeemescrow API calls
In-Reply-To: <BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>
References: <18440.87.106.138.84.1308200020.squirrel@lavabit.com>
	<BANLkTi=FTLnU-riNVYssnR9FLdcEeZX7gOS6Zdv1f_XDcJoSSg@mail.gmail.com>
	<BANLkTikkBoHBr8z6Uv7oGU_KuT0bvgx3HA@mail.gmail.com>
	<BANLkTinUbJ6CKczHiyX2esMyRWgUrJ_9ASeOqZbRj+23GZgjcQ@mail.gmail.com>
	<BANLkTikP-VheXQyXikH6jvaqnWfH_cNjnw@mail.gmail.com>
Message-ID: <11814.46.19.138.242.1308775478.squirrel@lavabit.com>

Gavin wrote:

> It would be spiffy to publish a new type of bitcoin address that is an
> "m of n address", that anybody could pay into, but would require m of
> n signatures to spend.  Publishing a really really long address with
> all n public keys would work.

Here's a strawman use-case for a browser centric flow for a 2-of-3 scenario.

Funding:

* User is on Merchant site on the checkout page
* User selects a transaction Observer (I'm trying to get away from using
the word escrow, because the funds are not held by the third party)
* Merchant redirects to the Observer, passing in the Merchant's payout
address
* The User enters User's address
* Observer presents multisign address
"2,merchant-addr,user-addr,observer-addr" and terms and conditions - i.e.
under what circumstances the Observer will sign
* User copy/pastes the multisign address to their bitcoin client and sends
funds
* After some blocks go by, merchant ships

Redemption:

* Merchant reminds User to release funds
* User creates a partial tx paying out to merchant-addr and emails or
copy-pastes to Merchant
* Merchant signs and publishes the tx

Funding requires two pastes and redemption requires one.  A browser
plug-in would reduce the User effort to a couple of confirmatory clicks -
"do you want to send X BTC to Merchant Y with Observer Z?" and "do you
want to release X BTC to Merchant Y?".

--
Bobby Groff





From jan at uos.de  Thu Jun 23 21:51:43 2011
From: jan at uos.de (jan at uos.de)
Date: Thu, 23 Jun 2011 23:51:43 +0200
Subject: [Bitcoin-development] Speeding up "getbalance <account>" calls
Message-ID: <20110623215143.GA3351@dax.lan.local>

Hi there!

Instawallet has enjoyed steady growth and I'm running into a bottleneck
now with "getbalance <someaccounthere>" taking quite some time to
complete. My understanding is, that this is because bitcoind runs
through all relevant transactions each time anew to compute the balance.
I was hoping the list could give me some pointers/ideas on how I can
improve this.

I might start to do account handling completely in my application at
some point, but for now I would like to continue letting bitcoind handle
this, so I don't have to worry about thinks like block chain reorgs.

Basically I don't have enough familiarity with the source code to feel
confident about doing fairly invasive changes. So right now I'm planning
to implement a very simple cache (directly in bitcoind), which just
caches calls to getbalance and simply invalidates the whole cache as
soon as a new block or a transaction that affects the wallet comes in.
I'm hoping this will help a little bit, although with blocks arriving
every 10 minutes on average it's not really the perfect solution.

Maybe one step better would be to only invalidate cache entries that are
affected by a new transaction or by transactions arriving in a block.
This would need to take block chain reorgs into account though, which
seems fairly complicated. Maybe I could simply invalidate the whole
cache on reorgs, which should be seldom enough that it's not a big
problem. Where would be a good place in the source code to hook into to
notice block chain reorgs?

The perfect solution would be, of course, if bitcoind could keep running
balances of all accounts and update them as new information becomes
available. But as I said, I don't feel that I have a good overview of
all the corner cases to make such an improvement. I guess an extensive
test suite testing all sorts of esoteric block chain reorgs would really
be a nice thing to have. :-)

Regards!
Jan



From witchspace81 at gmail.com  Fri Jun 24 05:30:54 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 24 Jun 2011 05:30:54 +0000
Subject: [Bitcoin-development] Speeding up "getbalance <account>" calls
In-Reply-To: <20110623215143.GA3351@dax.lan.local>
References: <20110623215143.GA3351@dax.lan.local>
Message-ID: <BANLkTi=eSgC0T_mKn660dZv1h+g-Z9TU+g@mail.gmail.com>

Jan,

On Thu, Jun 23, 2011 at 9:51 PM, <jan at uos.de> wrote:

> Hi there!
>
> Instawallet has enjoyed steady growth and I'm running into a bottleneck
> now with "getbalance <someaccounthere>" taking quite some time to
> complete. My understanding is, that this is because bitcoind runs
> through all relevant transactions each time anew to compute the balance.
> I was hoping the list could give me some pointers/ideas on how I can
> improve this.
>

I think the easiest way to speed this up would be to scan the wallet every
time a block comes in or something else changes in the block chain (or, if
you prefer, some pre-set interval of N minutes). Then go over the entire
wallet and the accumulate balances for all accounts. This could be done in
amortized linear time using a hash_map.

1) This reduces the time the API takes to return the balance for an account
to a predictable, very short time. Just the time to look up the balance in
the hash table (and return 0 on miss). The number crunching happens in the
network thread, not while you're waiting on the API.

2) Less bug-prone than "incremental caching" as you propose, and doesn't
require determining which accounts are influenced by a new block

3) Block chain reorgs are no problem.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110624/3762c70c/attachment.html>

From bitcoin-list at bluematt.me  Mon Jun 27 01:20:23 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 27 Jun 2011 03:20:23 +0200
Subject: [Bitcoin-development] [PULL] Wallet Private Key Encryption Take 3
Message-ID: <1309137623.3689.4.camel@Desktop666>

Rebased onto wallet class and ready for "wtf is this crap" messages ;)

https://github.com/bitcoin/bitcoin/pull/352

Matt 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/0582dfc0/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/0582dfc0/attachment.sig>

From dhuff at jrbobdobbs.org  Mon Jun 27 19:36:08 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Mon, 27 Jun 2011 14:36:08 -0500
Subject: [Bitcoin-development] Bitcoin app bundle inclusion
Message-ID: <F7DD2164-18AF-4FE5-BD73-247CC1CD4484@jrbobdobbs.org>

Hey Laszlo,

We're just wanting to make sure that it's ok to include your Info.plist and BitcoinAppIcon.icns into the upstream source repository so that osx build can be automated without needing external source requirements (outside of lib deps).

Is this licensed under MIT or similar or would you be willing to put it in the Public Domain or other compatible license.

-- 
Doug Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3737 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/911f9ce7/attachment.p7s>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/911f9ce7/attachment.sig>

From mike at plan99.net  Mon Jun 27 20:46:11 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 27 Jun 2011 22:46:11 +0200
Subject: [Bitcoin-development] [ANNOUNCE] BitCoinJ v0.2
Message-ID: <BANLkTimgmB-gviqWfLb6dNMAzzX8wYy7WQ@mail.gmail.com>

[also sent to bitcoin-development@]

I'm pleased to announce BitCoinJ v0.2. There have been over 100 commits
since the first release back in March, which have added:

   - Full support for block chain re-orgs, including recognition of dead
   transactions (that will never be included in the chain).
   - Persistence of the block chain using multiple, pluggable stores. A
   BoundedOverheadBlockStore is provided that is suitable for usage on mobile
   devices where low memory usage and instant startup time are requirements.
   - A much larger test suite
   - IRC, DNS  and seed list peer discovery
   - ASN.1 key export
   - Many many bugfixes and minor API improvements.

This release represents the work of many people. In particular I'd like to
thank:

   - Andreas Schildbach
   - Miron Cuperman
   - Gary Rowe
   - Thilo Planz
   - Micheal Swiggs
   - Noa Resare
   - John Sample
   - Xiaofeng Guo

-- 
Google Switzerland GmbH
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/4cbcfc89/attachment.html>

From jimmy.winn at gmail.com  Mon Jun 27 21:02:22 2011
From: jimmy.winn at gmail.com (Jim Nguyen)
Date: Mon, 27 Jun 2011 14:02:22 -0700
Subject: [Bitcoin-development] [ANNOUNCE] BitCoinJ v0.2
In-Reply-To: <BANLkTimgmB-gviqWfLb6dNMAzzX8wYy7WQ@mail.gmail.com>
References: <BANLkTimgmB-gviqWfLb6dNMAzzX8wYy7WQ@mail.gmail.com>
Message-ID: <BANLkTi=iqPmbTrAPawQMG6isgYmnZzbSjw@mail.gmail.com>

This is great!  Good job guys!

Jim

On Mon, Jun 27, 2011 at 1:46 PM, Mike Hearn <mike at plan99.net> wrote:

> [also sent to bitcoin-development@]
>
> I'm pleased to announce BitCoinJ v0.2. There have been over 100 commits
> since the first release back in March, which have added:
>
>    - Full support for block chain re-orgs, including recognition of dead
>    transactions (that will never be included in the chain).
>    - Persistence of the block chain using multiple, pluggable stores. A
>    BoundedOverheadBlockStore is provided that is suitable for usage on mobile
>    devices where low memory usage and instant startup time are requirements.
>    - A much larger test suite
>    - IRC, DNS  and seed list peer discovery
>    - ASN.1 key export
>    - Many many bugfixes and minor API improvements.
>
> This release represents the work of many people. In particular I'd like to
> thank:
>
>    - Andreas Schildbach
>    - Miron Cuperman
>    - Gary Rowe
>    - Thilo Planz
>    - Micheal Swiggs
>    - Noa Resare
>    - John Sample
>    - Xiaofeng Guo
>
> --
> Google Switzerland GmbH
>
>
>
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security
> threats, fraudulent activity, and more. Splunk takes this data and makes
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/4f60f38e/attachment.html>

From mike at plan99.net  Mon Jun 27 21:04:36 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 27 Jun 2011 23:04:36 +0200
Subject: [Bitcoin-development] [ANNOUNCE] BitCoinSharp
Message-ID: <BANLkTi=zdn-ELG4xsVS7oyNQKO6dwtt99g@mail.gmail.com>

This evening I'd also like to announce the BitCoinSharp project by
Nathan Baulch. It's big enough to deserve its own email, IMHO.

Nathan has done a complete port of BitCoinJ into C#, thus opening the
world of Bitcoin up to .NET developers everywhere.

You can browse the code here:

  http://code.google.com/p/bitcoinsharp/source/browse/

Visual Studio SLN files are provided to help you get started. The
PingService example is a good place to start reading:

  http://code.google.com/p/bitcoinsharp/source/browse/src/Examples/PingService.cs

I'm hopeful that we've now covered nearly all the bases in terms of
languages and platforms. Everyone should be able to write interesting
Bitcoin apps no matter what their background or preferred toolchain.



From dhuff at jrbobdobbs.org  Mon Jun 27 22:10:23 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Mon, 27 Jun 2011 17:10:23 -0500
Subject: [Bitcoin-development] Fwd: Bitcoin app bundle inclusion
References: <B9DB2C99-48F2-487E-8D9D-FA1C8FA1EC15@heliacal.net>
Message-ID: <3043ECEC-0651-45F5-B013-04278853D0F3@jrbobdobbs.org>



Begin forwarded message:

> From: solar <laszlo.hanyecz at heliacal.net>
> Date: June 27, 2011 5:09:12 PM CDT
> To: Doug Huff <dhuff at jrbobdobbs.org>
> Subject: Re: Bitcoin app bundle inclusion
> 
> That's fine, I actually wanted to check it but wasn't sure where it belonged.  There isn't any license, it's just public domain.
> 
> Thanks,
> Laszlo
> 
> 
> 
> On Jun 27, 2011, at 3:36 PM, Doug Huff wrote:
> 
>> Hey Laszlo,
>> 
>> We're just wanting to make sure that it's ok to include your Info.plist and BitcoinAppIcon.icns into the upstream source repository so that osx build can be automated without needing external source requirements (outside of lib deps).
>> 
>> Is this licensed under MIT or similar or would you be willing to put it in the Public Domain or other compatible license.
>> 
>> -- 
>> Doug Huff
>> 
>> 
> 

-- 
Doug Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3737 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/ce64e496/attachment.p7s>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/ce64e496/attachment.sig>

From bitcoin-list at bluematt.me  Tue Jun 28 01:33:46 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 28 Jun 2011 03:33:46 +0200
Subject: [Bitcoin-development] [PULL] Wallet Private Key Encryption Take
 3
In-Reply-To: <1309137623.3689.4.camel@Desktop666>
References: <1309137623.3689.4.camel@Desktop666>
Message-ID: <1309224826.3689.6.camel@Desktop666>

OK, after a lot of good discussion and a tiny bit of results, I would
submit that Wallet Encryption is in a pull-able state.  Can I get final
comments/ACKs

Matt

On Mon, 2011-06-27 at 03:20 +0200, Matt Corallo wrote:
> Rebased onto wallet class and ready for "wtf is this crap" messages ;)
> 
> https://github.com/bitcoin/bitcoin/pull/352
> 
> Matt 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110628/b6f50e47/attachment.sig>

From gavinandresen at gmail.com  Tue Jun 28 02:08:57 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 27 Jun 2011 22:08:57 -0400
Subject: [Bitcoin-development] Test away
Message-ID: <BANLkTi=ELrQjh=ocB53mpdfPcK601qFHgQ@mail.gmail.com>

I got Steve-from-the-Forum's boost unit test skeleton code compiling
and running, so there's now a src/test directory and you can 'make -f
makefile.unix test_bitcoin'

More tests are very welcome. I'd welcome higher-level tests (not just
code unit tests), too.

And speaking of testing:  if you know a good QA test manager type
person interested in bitcoin, I think we can wrangle up funding for
somebody to put together a team to help test bitcoin (and hopefully
pull requests). I think lack of testing resources for core bitocin is
a big weakness right now.

-- 
--
Gavin Andresen



From dhuff at jrbobdobbs.org  Tue Jun 28 02:48:17 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Mon, 27 Jun 2011 21:48:17 -0500
Subject: [Bitcoin-development] Fwd: Live mtgox.com trade matching bug.
References: <D024B465-AD6C-4AAD-A07F-956223929B6F@jrbobdobbs.org>
Message-ID: <C9421AA2-D741-4989-9DA8-395D1F532F52@jrbobdobbs.org>



Begin forwarded message:

> From: Doug Huff <mith at jrbobdobbs.org>
> Date: June 27, 2011 9:46:13 PM CDT
> To: full-disclosure at lists.grok.org.uk, "Mt.Gox" <info at mtgox.com>
> Cc: Bitcoin Dev Development <bitcoin-development at lists.sourceforge.net>
> Subject: Live mtgox.com trade matching bug.
> 
> Step 1: Have USD available for spending on mtgox.com.
> Step 2: Put in a buy order large enough to drain your account. Low enough under the current trading price that it will not execute immediately.
> Step 3: Withdraw all USD funds.
> Step 4: Wait for market to fall enough to meet your order.
> Step 5: ...(self explanatory)...
> 
> There's a bit of luck in being able to take advantage, obviously.
> 
> I would suggest you take the site down asap until this is corrected or publicly show how this order will never execute:
> 
> ==========
> Welcome <username removed> 0.00000000 ?TC 424.44901
> Buying  138468.901  0.01  Active  1384.69  06/26 15:27  cancel
> ==========
> 
> I cannot guarantee this order will execute but from everything I've observed about the new trade matching code I have no reason to believe it will not.
> 
> At the very least this could be used to influence market conditions if it is only a display bug.
> 
> -- 
> Douglas Huff
> 
> 

-- 
Doug Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3737 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/d3cb2cbe/attachment.p7s>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110627/d3cb2cbe/attachment.sig>

From mike at plan99.net  Tue Jun 28 06:34:14 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Jun 2011 08:34:14 +0200
Subject: [Bitcoin-development] [ANNOUNCE] BitCoinSharp
In-Reply-To: <DA6FEDE0-8C45-4416-B8BC-FDABC857A87A@heliacal.net>
References: <BANLkTi=zdn-ELG4xsVS7oyNQKO6dwtt99g@mail.gmail.com>
	<DA6FEDE0-8C45-4416-B8BC-FDABC857A87A@heliacal.net>
Message-ID: <BANLkTik4m832G_C_P8+oXSt+6QA4QtpC7Q@mail.gmail.com>

Sure.

On Tue, Jun 28, 2011 at 2:49 AM, solar <laszlo.hanyecz at heliacal.net> wrote:
> Great work on this guys! ?I have a small request though.. could you please include the recent fix to join a random #bitcoinXX channel on IRC (instead of #bitcoin)? ?It is in the c++ code that way, it's just a randomly selected number from 00 to 99.
>
> Thanks,
> Laszlo Hanyecz
>
>
> On Jun 27, 2011, at 5:04 PM, Mike Hearn wrote:
>
>> This evening I'd also like to announce the BitCoinSharp project by
>> Nathan Baulch. It's big enough to deserve its own email, IMHO.
>>
>> Nathan has done a complete port of BitCoinJ into C#, thus opening the
>> world of Bitcoin up to .NET developers everywhere.
>>
>> You can browse the code here:
>>
>> ?http://code.google.com/p/bitcoinsharp/source/browse/
>>
>> Visual Studio SLN files are provided to help you get started. The
>> PingService example is a good place to start reading:
>>
>> ?http://code.google.com/p/bitcoinsharp/source/browse/src/Examples/PingService.cs
>>
>> I'm hopeful that we've now covered nearly all the bases in terms of
>> languages and platforms. Everyone should be able to write interesting
>> Bitcoin apps no matter what their background or preferred toolchain.
>>
>> ------------------------------------------------------------------------------
>> All of the data generated in your IT infrastructure is seriously valuable.
>> Why? It contains a definitive record of application performance, security
>> threats, fraudulent activity, and more. Splunk takes this data and makes
>> sense of it. IT sense. And common sense.
>> http://p.sf.net/sfu/splunk-d2d-c2
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



From mike at plan99.net  Tue Jun 28 06:35:59 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Jun 2011 08:35:59 +0200
Subject: [Bitcoin-development] Fwd: Live mtgox.com trade matching bug.
In-Reply-To: <C9421AA2-D741-4989-9DA8-395D1F532F52@jrbobdobbs.org>
References: <D024B465-AD6C-4AAD-A07F-956223929B6F@jrbobdobbs.org>
	<C9421AA2-D741-4989-9DA8-395D1F532F52@jrbobdobbs.org>
Message-ID: <BANLkTi=RASna0vQ0bYGc8ApWC++PsNqSAg@mail.gmail.com>

Hi Doug,

Could we keep the Mt Gox related stuff off bitcoin-development please?
It's not related to the core software.

On Tue, Jun 28, 2011 at 4:48 AM, Doug Huff <dhuff at jrbobdobbs.org> wrote:
>
>
> Begin forwarded message:
>
>> From: Doug Huff <mith at jrbobdobbs.org>
>> Date: June 27, 2011 9:46:13 PM CDT
>> To: full-disclosure at lists.grok.org.uk, "Mt.Gox" <info at mtgox.com>
>> Cc: Bitcoin Dev Development <bitcoin-development at lists.sourceforge.net>
>> Subject: Live mtgox.com trade matching bug.
>>
>> Step 1: Have USD available for spending on mtgox.com.
>> Step 2: Put in a buy order large enough to drain your account. Low enough under the current trading price that it will not execute immediately.
>> Step 3: Withdraw all USD funds.
>> Step 4: Wait for market to fall enough to meet your order.
>> Step 5: ...(self explanatory)...
>>
>> There's a bit of luck in being able to take advantage, obviously.
>>
>> I would suggest you take the site down asap until this is corrected or publicly show how this order will never execute:
>>
>> ==========
>> Welcome <username removed> 0.00000000 ?TC 424.44901
>> Buying ?138468.901 ?0.01 ?Active ?1384.69 ?06/26 15:27 ?cancel
>> ==========
>>
>> I cannot guarantee this order will execute but from everything I've observed about the new trade matching code I have no reason to believe it will not.
>>
>> At the very least this could be used to influence market conditions if it is only a display bug.
>>
>> --
>> Douglas Huff
>>
>>
>
> --
> Doug Huff
>
>
>
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security
> threats, fraudulent activity, and more. Splunk takes this data and makes
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



From luke at dashjr.org  Tue Jun 28 06:57:20 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 28 Jun 2011 02:57:20 -0400
Subject: [Bitcoin-development] Fwd: Live mtgox.com trade matching bug.
In-Reply-To: <BANLkTi=RASna0vQ0bYGc8ApWC++PsNqSAg@mail.gmail.com>
References: <D024B465-AD6C-4AAD-A07F-956223929B6F@jrbobdobbs.org>
	<C9421AA2-D741-4989-9DA8-395D1F532F52@jrbobdobbs.org>
	<BANLkTi=RASna0vQ0bYGc8ApWC++PsNqSAg@mail.gmail.com>
Message-ID: <201106280257.22961.luke@dashjr.org>

On Tuesday, June 28, 2011 2:35:59 AM Mike Hearn wrote:
> Could we keep the Mt Gox related stuff off bitcoin-development please?
> It's not related to the core software.

MtGox's code is just as related as BitcoinJ or any other Bitcoin software, 
IMO.



From mike at plan99.net  Tue Jun 28 09:52:58 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Jun 2011 11:52:58 +0200
Subject: [Bitcoin-development] Fwd: Live mtgox.com trade matching bug.
In-Reply-To: <201106280257.22961.luke@dashjr.org>
References: <D024B465-AD6C-4AAD-A07F-956223929B6F@jrbobdobbs.org>
	<C9421AA2-D741-4989-9DA8-395D1F532F52@jrbobdobbs.org>
	<BANLkTi=RASna0vQ0bYGc8ApWC++PsNqSAg@mail.gmail.com>
	<201106280257.22961.luke@dashjr.org>
Message-ID: <BANLkTimzHDW0Xkr52hNPt6TA21uLWE3JKtMnuLzE6QcM8MoefA@mail.gmail.com>

>> Could we keep the Mt Gox related stuff off bitcoin-development please?
>> It's not related to the core software.
>
> MtGox's code is just as related as BitcoinJ or any other Bitcoin software,
> IMO.

It's closed source, so nobody here can do anything about it (unlike
other software discussed here).



From bitcoin-list at bluematt.me  Tue Jun 28 11:54:31 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 28 Jun 2011 13:54:31 +0200
Subject: [Bitcoin-development] Fwd: Live mtgox.com trade matching bug.
In-Reply-To: <BANLkTimzHDW0Xkr52hNPt6TA21uLWE3JKtMnuLzE6QcM8MoefA@mail.gmail.com>
References: <D024B465-AD6C-4AAD-A07F-956223929B6F@jrbobdobbs.org>
	<C9421AA2-D741-4989-9DA8-395D1F532F52@jrbobdobbs.org>
	<BANLkTi=RASna0vQ0bYGc8ApWC++PsNqSAg@mail.gmail.com>
	<201106280257.22961.luke@dashjr.org>
	<BANLkTimzHDW0Xkr52hNPt6TA21uLWE3JKtMnuLzE6QcM8MoefA@mail.gmail.com>
Message-ID: <1309262071.3689.8.camel@Desktop666>

On Tue, 2011-06-28 at 11:52 +0200, Mike Hearn wrote:
> >> Could we keep the Mt Gox related stuff off bitcoin-development please?
> >> It's not related to the core software.
> >
> > MtGox's code is just as related as BitcoinJ or any other Bitcoin software,
> > IMO.
> 
> It's closed source, so nobody here can do anything about it (unlike
> other software discussed here).

And this is also no where near the right place to be disclosing security
vulnerabilities.  Whether you like the guy/site or not, keep those prive
for a reasonable amount of time for them to be fixed (that means more
than an hour).

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110628/2bb09b36/attachment.sig>

From dhuff at jrbobdobbs.org  Tue Jun 28 13:24:26 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Tue, 28 Jun 2011 08:24:26 -0500
Subject: [Bitcoin-development] Fwd: Live mtgox.com trade matching bug.
In-Reply-To: <BANLkTi=RASna0vQ0bYGc8ApWC++PsNqSAg@mail.gmail.com>
References: <D024B465-AD6C-4AAD-A07F-956223929B6F@jrbobdobbs.org>
	<C9421AA2-D741-4989-9DA8-395D1F532F52@jrbobdobbs.org>
	<BANLkTi=RASna0vQ0bYGc8ApWC++PsNqSAg@mail.gmail.com>
Message-ID: <3AF78BB9-3D12-47B5-995E-387E489297ED@jrbobdobbs.org>

Begin forwarded message:

> From: Doug Huff <dhuff at jrbobdobbs.org>
> Date: June 27, 2011 11:28:28 PM CDT
> To: Gavin Andresen <gavinandresen at gmail.com>
> Subject: Re: [Bitcoin-development] Fwd: Live mtgox.com trade matching bug.
> 
> Already talked to Jeff and agreed to stop posting them here. There is just currently no other forum for such reports. I think he was going to talk to you about starting a bitcoin-vendor-sec or similar list.
> 
> I agree it does not belong there.
> 
> On Jun 27, 2011, at 11:22 PM, Gavin Andresen wrote:
> 
>> The bitcoin-development list is for discussion of core bitcoin
>> development, not about Mt.Gox or other sites or software that uses
>> bitcoin.
>> 
>> -- 
>> --
>> Gavin Andresen
> 
> -- 
> Doug Huff
> 
> 

-- 
Doug Huff

On Jun 28, 2011, at 1:35 AM, Mike Hearn wrote:

> Hi Doug,
> 
> Could we keep the Mt Gox related stuff off bitcoin-development please?
> It's not related to the core software.
> 
> On Tue, Jun 28, 2011 at 4:48 AM, Doug Huff <dhuff at jrbobdobbs.org> wrote:
>> 
>> 
>> Begin forwarded message:
>> 
>>> From: Doug Huff <mith at jrbobdobbs.org>
>>> Date: June 27, 2011 9:46:13 PM CDT
>>> To: full-disclosure at lists.grok.org.uk, "Mt.Gox" <info at mtgox.com>
>>> Cc: Bitcoin Dev Development <bitcoin-development at lists.sourceforge.net>
>>> Subject: Live mtgox.com trade matching bug.
>>> 
>>> Step 1: Have USD available for spending on mtgox.com.
>>> Step 2: Put in a buy order large enough to drain your account. Low enough under the current trading price that it will not execute immediately.
>>> Step 3: Withdraw all USD funds.
>>> Step 4: Wait for market to fall enough to meet your order.
>>> Step 5: ...(self explanatory)...
>>> 
>>> There's a bit of luck in being able to take advantage, obviously.
>>> 
>>> I would suggest you take the site down asap until this is corrected or publicly show how this order will never execute:
>>> 
>>> ==========
>>> Welcome <username removed> 0.00000000 ?TC 424.44901
>>> Buying  138468.901  0.01  Active  1384.69  06/26 15:27  cancel
>>> ==========
>>> 
>>> I cannot guarantee this order will execute but from everything I've observed about the new trade matching code I have no reason to believe it will not.
>>> 
>>> At the very least this could be used to influence market conditions if it is only a display bug.
>>> 
>>> --
>>> Douglas Huff
>>> 
>>> 
>> 
>> --
>> Doug Huff
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> All of the data generated in your IT infrastructure is seriously valuable.
>> Why? It contains a definitive record of application performance, security
>> threats, fraudulent activity, and more. Splunk takes this data and makes
>> sense of it. IT sense. And common sense.
>> http://p.sf.net/sfu/splunk-d2d-c2
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 

-- 
Doug Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3737 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110628/1d39d1a3/attachment.p7s>

From jgarzik at exmulti.com  Tue Jun 28 17:48:47 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 28 Jun 2011 13:48:47 -0400
Subject: [Bitcoin-development] satoshi client v0.4 priorities
Message-ID: <BANLkTin=_y_GGFO0JT9Z8jdmGwGEm7Yrvw@mail.gmail.com>

(copying part of a conversation from IRC)

IMO, wallet crypto and wallet import/export are the two "must have"
features for v0.4.  wallet crypto rationale is obvious.  sipa's wallet
import/export might need a rebase, but it seems important for further
wallet security, such as printing out and storing a private key in a
bank's safety deposit box.

autotools and other stuff can wait, if they hold up the release of
wallet crypto.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From dhuff at jrbobdobbs.org  Tue Jun 28 18:39:22 2011
From: dhuff at jrbobdobbs.org (Doug Huff)
Date: Tue, 28 Jun 2011 13:39:22 -0500
Subject: [Bitcoin-development] satoshi client v0.4 priorities
In-Reply-To: <BANLkTin=_y_GGFO0JT9Z8jdmGwGEm7Yrvw@mail.gmail.com>
References: <BANLkTin=_y_GGFO0JT9Z8jdmGwGEm7Yrvw@mail.gmail.com>
Message-ID: <41C9602E-0234-4357-9B75-E0A4DA65B117@jrbobdobbs.org>

sipa already rebased his showwallet tree. It's missing the segfault fix (or was yesterday) but said fix merges cleanly. I'm not entirely sure it's ready for pulling but it is in a functional state.

On Jun 28, 2011, at 12:48 PM, Jeff Garzik wrote:

> (copying part of a conversation from IRC)
> 
> IMO, wallet crypto and wallet import/export are the two "must have"
> features for v0.4.  wallet crypto rationale is obvious.  sipa's wallet
> import/export might need a rebase, but it seems important for further
> wallet security, such as printing out and storing a private key in a
> bank's safety deposit box.
> 
> autotools and other stuff can wait, if they hold up the release of
> wallet crypto.
> 
> -- 
> Jeff Garzik
> exMULTI, Inc.
> jgarzik at exmulti.com
> 
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security 
> threats, fraudulent activity, and more. Splunk takes this data and makes 
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-- 
Doug Huff


-------------- next part --------------
A non-text attachment was scrubbed...
Name: PGP.sig
Type: application/pgp-signature
Size: 881 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110628/e85b0c9e/attachment.sig>

From bitcoin-list at bluematt.me  Tue Jun 28 19:50:28 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 28 Jun 2011 21:50:28 +0200
Subject: [Bitcoin-development] satoshi client v0.4 priorities
In-Reply-To: <41C9602E-0234-4357-9B75-E0A4DA65B117@jrbobdobbs.org>
References: <BANLkTin=_y_GGFO0JT9Z8jdmGwGEm7Yrvw@mail.gmail.com>
	<41C9602E-0234-4357-9B75-E0A4DA65B117@jrbobdobbs.org>
Message-ID: <1309290628.3689.9.camel@Desktop666>

I believe he meant rebase onto wallet encryption.

On Tue, 2011-06-28 at 13:39 -0500, Doug Huff wrote:
> sipa already rebased his showwallet tree. It's missing the segfault fix (or was yesterday) but said fix merges cleanly. I'm not entirely sure it's ready for pulling but it is in a functional state.
> 
> On Jun 28, 2011, at 12:48 PM, Jeff Garzik wrote:
> 
> > (copying part of a conversation from IRC)
> > 
> > IMO, wallet crypto and wallet import/export are the two "must have"
> > features for v0.4.  wallet crypto rationale is obvious.  sipa's wallet
> > import/export might need a rebase, but it seems important for further
> > wallet security, such as printing out and storing a private key in a
> > bank's safety deposit box.
> > 
> > autotools and other stuff can wait, if they hold up the release of
> > wallet crypto.
> > 
> > -- 
> > Jeff Garzik
> > exMULTI, Inc.
> > jgarzik at exmulti.com
> > 
> > ------------------------------------------------------------------------------
> > All of the data generated in your IT infrastructure is seriously valuable.
> > Why? It contains a definitive record of application performance, security 
> > threats, fraudulent activity, and more. Splunk takes this data and makes 
> > sense of it. IT sense. And common sense.
> > http://p.sf.net/sfu/splunk-d2d-c2
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security 
> threats, fraudulent activity, and more. Splunk takes this data and makes 
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2d-c2
> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110628/210deb52/attachment.sig>

