From alfred_hodler at protonmail.com  Fri Jul  1 12:41:45 2022
From: alfred_hodler at protonmail.com (Alfred Hodler)
Date: Fri, 01 Jul 2022 12:41:45 +0000
Subject: [bitcoin-dev] [BIP proposal] Private Payments
In-Reply-To: <CAHGSxGvfe_quLxrFTPtsHsrtw25h6LiT4m_xrT8aiG-pUf=AYg@mail.gmail.com>
References: <rH1Js_T_UWcAg9lS9NDw_Qb6Js5bgs8rPILej69BjqsEZcJZwsvHhZRilkkOQZRGXabai63hrGgbTP2Yk99ojKEN6fU6HT4TmukiafqiKjo=@protonmail.com>
 <CAHGSxGvfe_quLxrFTPtsHsrtw25h6LiT4m_xrT8aiG-pUf=AYg@mail.gmail.com>
Message-ID: <ssSz15zsnav_kwhbS29ErU1VEi1DleCTSVuahEbHvAsA7sGWIAJswrai3f51PrO7JH6w8qmN1BdFd5cuNrFt-6NmC-13TI6Q4aayS-DACfs=@protonmail.com>

Hi Clark,

Thanks for your input.

I agree with your proposal to use bech32 instead of base58. It looks sound to me and as you said, the standard would benefit from more compact QR codes. The `pay1` prefix is fairly recognizable.

> I don't see how this would work, and others have pointed out that the
> cost of block space is itself an anti-spam measure.

I agree.

> A third-party service could offer to publish OP_RETURN notification
> payloads in the blockchain for a fee, paid over Lightning Network.
> This completely de-links Alice's notification from her wallet, while
> accepting the less-known privacy implications of a Lightning payment.
> The service would remain ignorant of Bob's identity in any event. Such
> a service would also be incentivized to charge market rates for the
> potential privacy boost and for block space.

The manner of publishing or outsourcing notifications cannot be enforced by the standard but we can add this as a recommendation. We can also release such a service in tandem with the BIP in order to encourage its use. The fact that the service would use its own coins would be beneficial to notifiers since they wouldn't have to engage in coin control on their end.

I'm not too familiar with the innerworkings of Lightning, but it is my understanding that a message can be embedded in each payment. The message in this case can be the OP_RETURN payload. That way both the payment and the notification payload are sent out in one go. Please correct me if I'm wrong.

The downside is that this isn't as censorship resistant as direct notifications but that's probably not going to be a big problem in reality. If these services ever go down, users should still be able to notify from their own wallets.

> Alternatively, the service publishes the block height along with the
> notification data contained within that block. Light clients could
> download relevant blocks over the p2p network and perform full
> validation.

This sounds better than requesting transaction data, both from the standpoint of simplicity and privacy. The danger is that the service drops notifications, either on purpose or by accident, eventually causing clients to miss notifications. Two possible solutions: a) the service publishes Merkle Trees b) each client subscribes to more than one service.

Alfred


From ChristopherA at lifewithalacrity.com  Fri Jul  1 17:37:57 2022
From: ChristopherA at lifewithalacrity.com (Christopher Allen)
Date: Fri, 1 Jul 2022 10:37:57 -0700
Subject: [bitcoin-dev] [BIP proposal] Private Payments
In-Reply-To: <ssSz15zsnav_kwhbS29ErU1VEi1DleCTSVuahEbHvAsA7sGWIAJswrai3f51PrO7JH6w8qmN1BdFd5cuNrFt-6NmC-13TI6Q4aayS-DACfs=@protonmail.com>
References: <rH1Js_T_UWcAg9lS9NDw_Qb6Js5bgs8rPILej69BjqsEZcJZwsvHhZRilkkOQZRGXabai63hrGgbTP2Yk99ojKEN6fU6HT4TmukiafqiKjo=@protonmail.com>
 <CAHGSxGvfe_quLxrFTPtsHsrtw25h6LiT4m_xrT8aiG-pUf=AYg@mail.gmail.com>
 <ssSz15zsnav_kwhbS29ErU1VEi1DleCTSVuahEbHvAsA7sGWIAJswrai3f51PrO7JH6w8qmN1BdFd5cuNrFt-6NmC-13TI6Q4aayS-DACfs=@protonmail.com>
Message-ID: <CACrqygB9djLPibhRPoTmN-fDtdSBtBhjOtQTdccJKr=j4P-LfQ@mail.gmail.com>

On Fri, Jul 1, 2022 at 5:43 AM Alfred Hodler via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I agree with your proposal to use bech32 instead of base58. It looks sound
> to me and as you said, the standard would benefit from more compact QR
> codes.


The most important thing to get more compact QR codes is to not use
lowercase letters, and certain other characters, as if you can avoid them
the QRs will auto-compress.

It happens that the core of bech32 works if all caps, and you are careful
with the human readable portion.

See
https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-003-uri-binary-compatibility.md
for more details, but a big offender is base64 which not only doesn?t
auto-compress but also can trigger binary mode that almost doubled the size
of the QR.

We have a number of standards & libraries focused on bitcoin QRs, including
support of animated QRs for things like PSBTs, but if you care about QR
size you should take a look at the techniques we use our swift library
https://github.com/BlockchainCommons/QRCodeGenerator which are also in
https://www.nayuki.io/page/qr-code-generator-library.

Basically both of these libraries support ?optimal encoding using segments?
that if they encounter a set of characters that must be encoded in binary
(In particularly $ % * + / :) that would in most default platform QR
implementations  cause the entire QR to double in size. Instead will only
encode the small segment as binary, letting the rest of the QR leverage
auto-compression.

If your are interested in our other Airgap QR and TorGap UR efforts, see
our video from last year:
https://youtu.be/RYgOFSdUqWY We have much more on the way, including NFC
encrypted Airgap & crypto-request/response flows.

I?d love to see proposals for various payment and invoice QRs that leverage
these wallet interoperability standards we have been offering. Let us know
if you are interested, or join discussions at
https://github.com/BlockchainCommons/Airgapped-Wallet-Community

? Christopher Allen, Blockchain Commons

>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220701/0acdb9a6/attachment.html>

From vjudeu at gazeta.pl  Sun Jul  3 05:45:48 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Sun, 03 Jul 2022 07:45:48 +0200
Subject: [bitcoin-dev] Adding SIGHASH to TXID
In-Reply-To: <CAD5xwhjqF3b896vV=w7BPDMAnhe49qJO-KgPyAW+5qKjZywEhQ@mail.gmail.com>
Message-ID: <163978583-4822df8d32d6f90c80179ca227a2320a@pmq5v.m5r2.onet>

> Have you seen the inherited ID proposal from John Law on this list?

I didn't see that before posting, I'm still trying to get more familiar with that (and with proposals, where every single field in each transaction is controlled for inclusion or exclusion).

> Honestly, I've yet to fully load in exactly how the applications of it work, but I'd be interested to hear your thoughts.

The main use case is to control transaction flow. If you have everything signed with SIGHASH_ALL, then it is obvious that you can just use txid, and everything works. But on the other hand, if you use other sighashes, for example SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, then you should be able to make a new transaction spending your signed output, no matter which inputs and outputs will be added to the previous one. And that's why SIGHASH_PREVOUT_SOMETHING is needed, to control, which parts of the previous transaction are signed, and which are not. And to do that, it is needed to take the previous transaction, referenced by txid, and to modify it, based on provided SIGHASH_PREVOUT_SOMETHING sighashes.

To push things one step further, I think different sighashes should be proposed by default, that would make users more familiar with the whole concept of sighashes. Because now, the default behavior is to sign everything with SIGHASH_ALL. I think it should be changed, the Core client should propose different sighashes, based on created transaction, just to allow transaction joining. To start with, it could be just a simple checkbox "allow transaction joining", that would enable it, to see if it will be simple enough for most users.

SIGHASH_ANYONECANPAY - used for every input (because it allows fee bumping without changing signatures)
SIGHASH_SINGLE - used only when there is any corresponding output, and only when it has higher or equal amount than the corresponding input
SIGHASH_ALL - used when there is no corresponding output, or when the corresponding output is smaller, to prevent detaching it

In general, I think the transaction should be displayed like it is visible in many block explorers, and after clicking each input, users should see, what is signed, and what is not, so they should control sighashes in a similar user interface, as they use to choose coins. Inputs and outputs should be grayed or highlighted, based on sighashes selected by user, to allow understanding them better.


On 2022-05-07 13:55:48 user Jeremy Rubin <jeremy.l.rubin at gmail.com> wrote:
Have you seen the inherited ID proposal from John Law on this list?


It's a pretty thorough treatment of this type of proposal, curious if you think it overlaps what you had in mind?


Honestly, I've yet to fully load in exactly how the applications of it work, but I'd be interested to hear your thoughts.


On Sat, May 7, 2022, 4:55 AM vjudeu via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
For now, we have txid:vout as a previous transaction output. This means that to have a stable TXID, we are forced to use SIGHASH_ALL somewhere, just to prevent any transaction modifications that can happen during adding some inputs and outputs. But it seems that new sighashes could be far more powerful than we expected: it is technically possible to not only remove previous transaction output by using SIGHASH_ANYPREVOUT. We can do more and do it better, we could decide, how to calculate this txid at all!

So, something like SIGHASH_PREVOUT_NONE would be similar to SIGHASH_NONE (applied to the previous transaction, taken from txid). To have SIGHASH_ANYPREVOUT, we need to remove absolutely everything, I don't know any such sighashes, because even SIGHASH_NONE | SIGHASH_ANYONECANPAY will commit at least to some fields, for example to the locktime. But, if we introduce SIGHASH_PREVOUT_XYZ flags for all existing sighashes, we would have this:

SIGHASH_PREVOUT_NONE
SIGHASH_PREVOUT_SINGLE
SIGHASH_PREVOUT_ALL
SIGHASH_PREVOUT_ANYONECANPAY

Then, the procedure is as follows: we use txid:vout to find our previous transaction. Then, we apply those sighashes to this previous transaction, to form a new txid, that will be checked during every OP_CHECKSIG-based opcode. In this way, our txid:vout is used just to do transaction lookup, after that, sighashes can be applied to the previous transaction, so our txid could remain stable, even if someone will add some inputs and outputs.

By default, we could use SIGHASH_PREVOUT_ALL, that would mean our txid:vout remains unchanged. Then, SIGHASH_PREVOUT_SINGLE would obviously mean, that we want to commit only to this particular previous transaction output. That would allow adding any new outputs to the previous transaction, without affecting our replaced txid, but also without blindly accepting any txid, because some data of the previous transaction would be still hashed.

Then, SIGHASH_PREVOUT_NONE is an interesting case, because it would mean that no outputs of the previous transaction are checked. But still, the inputs will be! That would mean: "I don't care about in-between addresses, but I care that it was initiated from these inputs". In this case, it is possible to choose some input without those flags, and then apply SIGHASH_PREVOUT_NONE many times, to make sure that everything started from that input, but everything in-between can be anything.

All of those three SIGHASH_PREVOUT_XYZ flags could be combined with SIGHASH_PREVOUT_ANYONECANPAY. That would mean all inputs of the previous transaction are discarded, except from the input number matching "vout". Or we could just use SIGHASH_PREVOUT_ANY instead and discard all inputs from that previous transaction, that could also be combined with other sighashes.

So, to sum up, by applying sighashes to the previous transaction, instead of allowing for any transaction, we could still have some control of our txid, and I think it could be better than just saying "give me any txid, I will accept that". I think in most cases we don't want to allow any txid: we want to only "control the flow", just to make sure that our signatures will sign what we want and will not be invalidated by changing some transaction inputs and outputs, unrelated to the currently-checked signature.
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From pete at petertodd.org  Sun Jul  3 09:43:53 2022
From: pete at petertodd.org (Peter Todd)
Date: Sun, 3 Jul 2022 05:43:53 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAHiDt8A+uQpY7jJ56hnk929yzwLw-DOT721cj1aUpGVzwmz2NQ@mail.gmail.com>
References: <CAJowKgJ8GP4Ykzn5dMHZ7wsE04YmpOLgTpdc9tgfVng0qB0Jjg@mail.gmail.com>
 <YqVfTU0M7XN8+Ybu@petertodd.org>
 <Pwr9EFLSv2rU7nXRzqFuw2LPxpFo22g_qYy4reQzpMuSlgRzTG536uLjZCc9sI43olReGMA7BFgjnxJGKtZNtxU7qRy_-YYOnz6TeMy4h8Q=@protonmail.com>
 <Yq77CnxOhr615ip8@petertodd.org>
 <CAAxiura7-TTUOg=vuH8q+orX+LVED74f+NvaYqVve3j--CjTMQ@mail.gmail.com>
 <CAJowKgL=nVwnUrpSKmnsTxOfk3DEEZL7awG=HypyCXSR3XCLxg@mail.gmail.com>
 <CALeFGL0CQC4_swZTt-=sbe=ZiCmRthZghGDtrWFx5bQCBeOJcg@mail.gmail.com>
 <YrS8URqD/BW4UrP0@petertodd.org>
 <CAGpPWDb=dF4-D5GKb2NoEcdW6TokNQyrwpGVwHJk+0HL43+J1Q@mail.gmail.com>
 <CAHiDt8A+uQpY7jJ56hnk929yzwLw-DOT721cj1aUpGVzwmz2NQ@mail.gmail.com>
Message-ID: <YsFk2S/1AWG2Jy/9@petertodd.org>

On Wed, Jun 29, 2022 at 12:44:11PM +0200, Kate Salazar via bitcoin-dev wrote:
> > On an idealistic level, I agree with Keagan that it would make sense to
> > have "a balance of fees to that effect". I think doing that would be
> > technically/economically optimal. However, I think there is an enormous
> > benefit to having a cultural aversion to monetary inflation and the
> > consequences of convincing the bitcoin community that inflation is ok could
> > have unintended negative consequences (not to mention how difficult
> > convincing the community would be in the first place). There's also the
> > economic distortion that inflation causes that has a negative effect which
> > should also be considered. The idea of decaying utxo value is interesting
> > to consider, but it would not solve the economic distortion that
> > monetary inflation causes, because that distortion is a result of monetary
> > devaluation (which decaying utxos would be a form of). Then again, maybe in
> > this case the distortion of inflation would actually be a correction -
> > correcting for the externality of benefit received by holders. I'm
> > stream-of-consciousnessing a bit, but anyways, I suspect its not worth the
> > trouble to perfect the distribution of bitcoin blockchain security costs to
> > include holders. Tho, if I were to go back in time and influence how
> > bitcoin was designed, I might advocate for it.
> >
> 
> Pool operators are free to request larger fees from older utxos, or from
> all utxos, or from newer utxos, at their judgement, looking at the
> blockspace demand census and at what the other pool operators are doing.
> This is not consensus, it's policy. It's not a technology problem, it's
> solved above in the social layer.

If pool operators can easily collude like you are proposing, we have a serious
problem with pool centralization.

What you would actually expect in a healthy Bitcoin ecosystem is for some pool
operators to defect, and them winding up mining those transactions for
market-based fees, eventually forcing the pool operators who are trying to
charge a discriminatory premium to give up.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220703/dde11afb/attachment.sig>

From beppeben2030 at gmail.com  Sun Jul  3 10:30:52 2022
From: beppeben2030 at gmail.com (Giuseppe B)
Date: Sun, 3 Jul 2022 12:30:52 +0200
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <YsFk2S/1AWG2Jy/9@petertodd.org>
References: <CAJowKgJ8GP4Ykzn5dMHZ7wsE04YmpOLgTpdc9tgfVng0qB0Jjg@mail.gmail.com>
 <YqVfTU0M7XN8+Ybu@petertodd.org>
 <Pwr9EFLSv2rU7nXRzqFuw2LPxpFo22g_qYy4reQzpMuSlgRzTG536uLjZCc9sI43olReGMA7BFgjnxJGKtZNtxU7qRy_-YYOnz6TeMy4h8Q=@protonmail.com>
 <Yq77CnxOhr615ip8@petertodd.org>
 <CAAxiura7-TTUOg=vuH8q+orX+LVED74f+NvaYqVve3j--CjTMQ@mail.gmail.com>
 <CAJowKgL=nVwnUrpSKmnsTxOfk3DEEZL7awG=HypyCXSR3XCLxg@mail.gmail.com>
 <CALeFGL0CQC4_swZTt-=sbe=ZiCmRthZghGDtrWFx5bQCBeOJcg@mail.gmail.com>
 <YrS8URqD/BW4UrP0@petertodd.org>
 <CAGpPWDb=dF4-D5GKb2NoEcdW6TokNQyrwpGVwHJk+0HL43+J1Q@mail.gmail.com>
 <CAHiDt8A+uQpY7jJ56hnk929yzwLw-DOT721cj1aUpGVzwmz2NQ@mail.gmail.com>
 <YsFk2S/1AWG2Jy/9@petertodd.org>
Message-ID: <CABrXkXpPCL7dN0Fs6rzjqMJnYrFZcH-=30P-fSYecnxyAT=KYw@mail.gmail.com>

Bitcoin's finite supply is the main argument for people investing in it,
the whole narrative around bitcoin is based on its finite supply. While it
has its flaws and basically condemns bitcoin to be only used as a store of
value (and not as a currency), I don't think it's worth questioning it at
this point.

Just my 2 sats.

Giuseppe.

On Sun, Jul 3, 2022, 11:44 AM Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Wed, Jun 29, 2022 at 12:44:11PM +0200, Kate Salazar via bitcoin-dev
> wrote:
> > > On an idealistic level, I agree with Keagan that it would make sense to
> > > have "a balance of fees to that effect". I think doing that would be
> > > technically/economically optimal. However, I think there is an enormous
> > > benefit to having a cultural aversion to monetary inflation and the
> > > consequences of convincing the bitcoin community that inflation is ok
> could
> > > have unintended negative consequences (not to mention how difficult
> > > convincing the community would be in the first place). There's also the
> > > economic distortion that inflation causes that has a negative effect
> which
> > > should also be considered. The idea of decaying utxo value is
> interesting
> > > to consider, but it would not solve the economic distortion that
> > > monetary inflation causes, because that distortion is a result of
> monetary
> > > devaluation (which decaying utxos would be a form of). Then again,
> maybe in
> > > this case the distortion of inflation would actually be a correction -
> > > correcting for the externality of benefit received by holders. I'm
> > > stream-of-consciousnessing a bit, but anyways, I suspect its not worth
> the
> > > trouble to perfect the distribution of bitcoin blockchain security
> costs to
> > > include holders. Tho, if I were to go back in time and influence how
> > > bitcoin was designed, I might advocate for it.
> > >
> >
> > Pool operators are free to request larger fees from older utxos, or from
> > all utxos, or from newer utxos, at their judgement, looking at the
> > blockspace demand census and at what the other pool operators are doing.
> > This is not consensus, it's policy. It's not a technology problem, it's
> > solved above in the social layer.
>
> If pool operators can easily collude like you are proposing, we have a
> serious
> problem with pool centralization.
>
> What you would actually expect in a healthy Bitcoin ecosystem is for some
> pool
> operators to defect, and them winding up mining those transactions for
> market-based fees, eventually forcing the pool operators who are trying to
> charge a discriminatory premium to give up.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220703/5934b536/attachment-0001.html>

From policeterror at dyne.org  Mon Jul  4 07:53:48 2022
From: policeterror at dyne.org (popo)
Date: Mon, 4 Jul 2022 09:53:48 +0200
Subject: [bitcoin-dev] addr/getaddr behaviour
Message-ID: <5ccaa7d4-dc64-6bf0-c4e6-3667c986466b@dyne.org>

Is this specced anywhere? Or where can I find this in the code?

In particular I saw mentioned in the protocol docs, that nodes will 
heartbeat their own external addr periodicially.

Do node repropagate these messages? If so then how do they distinguish 
them from other addr messages?

Where can I find the places in the code where addr messages are sent and 
received?

Thanks

From corey3 at gmail.com  Wed Jul  6 04:28:50 2022
From: corey3 at gmail.com (Corey Haddad)
Date: Wed, 6 Jul 2022 00:28:50 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CABrXkXpPCL7dN0Fs6rzjqMJnYrFZcH-=30P-fSYecnxyAT=KYw@mail.gmail.com>
References: <CAJowKgJ8GP4Ykzn5dMHZ7wsE04YmpOLgTpdc9tgfVng0qB0Jjg@mail.gmail.com>
 <YqVfTU0M7XN8+Ybu@petertodd.org>
 <Pwr9EFLSv2rU7nXRzqFuw2LPxpFo22g_qYy4reQzpMuSlgRzTG536uLjZCc9sI43olReGMA7BFgjnxJGKtZNtxU7qRy_-YYOnz6TeMy4h8Q=@protonmail.com>
 <Yq77CnxOhr615ip8@petertodd.org>
 <CAAxiura7-TTUOg=vuH8q+orX+LVED74f+NvaYqVve3j--CjTMQ@mail.gmail.com>
 <CAJowKgL=nVwnUrpSKmnsTxOfk3DEEZL7awG=HypyCXSR3XCLxg@mail.gmail.com>
 <CALeFGL0CQC4_swZTt-=sbe=ZiCmRthZghGDtrWFx5bQCBeOJcg@mail.gmail.com>
 <YrS8URqD/BW4UrP0@petertodd.org>
 <CAGpPWDb=dF4-D5GKb2NoEcdW6TokNQyrwpGVwHJk+0HL43+J1Q@mail.gmail.com>
 <CAHiDt8A+uQpY7jJ56hnk929yzwLw-DOT721cj1aUpGVzwmz2NQ@mail.gmail.com>
 <YsFk2S/1AWG2Jy/9@petertodd.org>
 <CABrXkXpPCL7dN0Fs6rzjqMJnYrFZcH-=30P-fSYecnxyAT=KYw@mail.gmail.com>
Message-ID: <CAK_HAC97sfvtkfs=yTt8Z0pi5ZF91n7OcZbu7k4XhdnMJ_PYnA@mail.gmail.com>

>Bitcoin's finite supply is the main argument for people investing in it,
the whole narrative around bitcoin is based on its finite supply. While it
has its flaws and basically condemns bitcoin to be only used as a store >of
value (and not as a currency), I don't think it's worth questioning it at
this point.
>
>Just my 2 sats.
>
>Giuseppe.

A finite supply alone is not enough to give something value, as it must
also be useful in some way. In the case of Bitcoin, various forms of
cryptographic security must all work - and work together - to make Bitcoin
useful. If the only realistic (fair, efficient & proportionate) way to pay
for Bitcoin's security was by having some inflation scheme that violated
the 21 million cap, then agreeing to break the limit would probably be what
makes sense, and in the economic interest of its users and holders.

There will always be competitive pressures with respect to efficiency, and
both being over-secured and under-secured would be economically inefficient
for a crypto currency, and thereby laving room for a more optimally-secured
competitor to gain ground. Currently there is zero feedback in the Bitcoin
system between what we might think is the optimum amount of security and
what actually exists. There is also zero agreement on how much security
would constitute such an optimum. Figuring out how much security is needed,
or even better, figuring out a way to have a market mechanism to answer
that question, will be an important project.

Another option, if we were to decide we are over-secured in the short term,
would be to soft-fork in a reduction in the current and near-future mining
rewards, by somehow locking the coins in a contract that deprived the miner
of the full reward, and then using that contract to pay the rewards out far
in the future, should at some point we feel the security budget was
insufficient. Anthony Towns presented a form of this concept in greater
detail at a Scaling Bitcoin conference some years ago. While this solution,
if employed, would only work for some finite amount of time, it is possible
that could give additional decades before the accumulated security budget
was exhausted.

Corey
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220706/87d2ce52/attachment.html>

From alicexbt at protonmail.com  Tue Jul  5 20:30:24 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Tue, 05 Jul 2022 20:30:24 +0000
Subject: [bitcoin-dev] BGP hijacking on Bitcoin p2p network
In-Reply-To: <31411E6C-B1BF-45B7-848A-0AC8ECDFFCB3@tnull.de>
References: <dEY4dMW9awXrHkDOv-V7OSpjaPXHONVAaCSQ63gq1lQN0jWqJfeSoB4zlAwTn5I7J2L_YmzwcL_O6SbY9MBPnG845D8wmkauQzXeaD7VykA=@protonmail.com>
 <31411E6C-B1BF-45B7-848A-0AC8ECDFFCB3@tnull.de>
Message-ID: <eF_rgj57EQkCwsazacWVA6XeLZHXJVAP7RUpHLCeBWOjEJ-L9RPYqQZ0HVzqxCEkWrGMp66qP_aEzugCJokvFHFhp4phrtwzogI-2CZxljA=@protonmail.com>

Hi Elias,

Thanks for sharing the links.

I have also started working on a simple chrome extension which connects to local bitcoin core and checks IP address of all peers for prefix length and other things. I would highlight peers with different colors based on certain things in this extension.

https://github.com/1440000bytes/bitcoin-core-extension

/dev/fd0


Sent with Proton Mail secure email.

------- Original Message -------
On Friday, June 10th, 2022 at 6:44 AM, Elias Rohrer <btcdevml at tnull.de> wrote:


> Hi alicexbt,
>
> Routing attacks have actually been studied quite a bit in literature.
>
> You may be interested in the research articles of Maria Apostolaki et al.[1,2], Muoi Tran et al.[3], and related works.
>
> Best,
>
> Elias
>
> 1: https://arxiv.org/pdf/1605.07524.pdf
> [2]: https://arxiv.org/pdf/1808.06254.pdf
> [3]: https://allquantor.at/blockchainbib/pdf/tran2020stealthier.pdf
>
> On 9 Jun 2022, at 20:24, alicexbt via bitcoin-dev wrote:
>
> > Hi Bitcoin Developers,
> >
> > Based on this answer from 2014, bitcoin nodes are vulnerable to BGP hijacking. There was an incident in March 2022, twitter prefix was hijacked and details are shared in 2 blog posts:
> >
> > https://isc.sans.edu/diary/rss/28488
> >
> > https://www.manrs.org/2022/03/lesson-learned-twitter-shored-up-its-routing-security/
> >
> > 'nusenu' had written an article about Tor network being vulnerable to BGP hijacking attacks: https://nusenu.medium.com/how-vulnerable-is-the-tor-network-to-bgp-hijacking-attacks-56d3b2ebfd92
> >
> > After doing some research I found that RPKI ROA and BGP prefix length can help against BGP hijacking attacks. I checked BGP prefix length and RPKI ROA for first 10 IP addresses returned in `getnodeaddresses` in bitcoin core and it had vulnerable results.
> >
> > https://i.stack.imgur.com/KD7jH.png
> >
> > Has anyone written a detailed blog post or research article like nusenu? If not I would be interested to write one in next couple of weeks?
> > Looking for some "technical" feedback, links if this was already discussed in past with some solutions.
> >
> > /dev/fd0
> >
> > Sent with Proton Mail secure email.
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From alicexbt at protonmail.com  Tue Jul  5 20:46:51 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Tue, 05 Jul 2022 20:46:51 +0000
Subject: [bitcoin-dev] Playing with full-rbf peers for fun and L2s
	security
In-Reply-To: <Yrj9N7k8osWsxhY4@petertodd.org>
References: <CALZpt+GOh-7weEypT9JrzcwthZJqHOfj7sf9FMuqi5_FZv0g7w@mail.gmail.com>
 <gmDNbfrrvaZL4akV2DFwCuKrls9SScQjqxeRoEorEiYlv24dPt1j583iOtcB2lFrxZc59N3kp7T9KIM4ycl4QOmGBfDOUmO-BVHsttvtvDc=@protonmail.com>
 <CALZpt+FJ-R9yCoMLP=Vcxk1U7n=-LKHUGctFZj0K-vTMsz==ew@mail.gmail.com>
 <RJEFmrnjbzKQCBr4L7ebwBLzg7QHGXlaE19zj6jfkxL6xjfodgbfssZBQSYxm783Y4X5awuhL9Gj8IaBc4npE2oh3d1xoudKTrSsJ-dk0VQ=@protonmail.com>
 <CALZpt+HXB=xh3qtxJFM7yUzRu1uj-pPtLQmT=5QV0dNfVuTpfQ@mail.gmail.com>
 <Pb8H4PbeS-RaNOKfekOPdY8gQo4_Syd3HoTK26AO872f7tCKyGnty56KtcvmvrXFOJdC7nQgNHoQ37M4MNXQ6vqQ9du6BFbvGLbY3BdYVpY=@protonmail.com>
 <Yrj9N7k8osWsxhY4@petertodd.org>
Message-ID: <0ikzVrbv3tA2fyv4iW7b_gPJ-qkrJS3x9HzouSqLabK3yHthgigPt9YZhGlr4_nCutAlRREfFSw1JW0k5KhBgSj1aBI2MSDTLqYHGYbqNrg=@protonmail.com>

Hi Peter,

> Note that Wasabi already has a DoS attack vector in that a participant can stop
> participating after the first phase of the round, with the result that the
> coinjoin fails. Wasabi mitigates that by punishing participating in future
> rounds. Double-spends only create additional types of DoS attack that need to
> be detected and punished as well - they don't create a fundamentally new
> vulerability.

I agree some DoS vectors are already mitigated however punishment in this case will be difficult because the transaction is broadcasted after signing and before coinjoin tx broadcast.

Inputs are already checked multiple times for double spend during coinjoin round: https://github.com/zkSNACKs/WalletWasabi/pull/6460

If all the inputs in the coinjoin transaction that failed to relay are checked and one or more are found to be spent later, what will be punished and how does this affect the attacker with thousands of UTXOs or normal users?

/dev/fd0

Sent with Proton Mail secure email.

------- Original Message -------
On Monday, June 27th, 2022 at 12:43 AM, Peter Todd <pete at petertodd.org> wrote:


> On Sun, Jun 26, 2022 at 04:40:24PM +0000, alicexbt via bitcoin-dev wrote:
>
> > Hi Antoine,
> >
> > Thanks for sharing the DoS attack example with alternatives.
> >
> > > - Caroll broadcasts a double-spend of her own input C, the double-spend is attached with a low-fee (1sat/vb) and it does not signal opt-in RBF
> > > - Alice broadcasts the multi-party transaction, it is rejected by the network mempools because Alice double-spend is already present
> >
> > I think this affects almost all types of coinjoin transaction including coordinator based implementations. I tried a few things and have already reported details for an example DoS attack to one of the team but there is no response yet.
> >
> > It was fun playing with RBF, DoS and Coinjoin. Affected projects should share their opinion about full-rbf as it seems it might improve things.
> >
> > Example:
> >
> > In Wasabi an attacker can broadcast a transaction spending input used in coinjoin after sending signature in the round. This would result in a coinjoin tx which never gets relayed: https://nitter.net/1440000bytes/status/1540727534093905920
>
>
> Note that Wasabi already has a DoS attack vector in that a participant can stop
> participating after the first phase of the round, with the result that the
> coinjoin fails. Wasabi mitigates that by punishing participating in future
> rounds. Double-spends only create additional types of DoS attack that need to
> be detected and punished as well - they don't create a fundamentally new
> vulerability.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org

From vjudeu at gazeta.pl  Wed Jul  6 11:10:27 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Wed, 06 Jul 2022 13:10:27 +0200
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAK_HAC97sfvtkfs=yTt8Z0pi5ZF91n7OcZbu7k4XhdnMJ_PYnA@mail.gmail.com>
Message-ID: <139633828-26b5fcbad80d1ca7046479237716ace3@pmq8v.m5r2.onet>

> If the only realistic (fair, efficient & proportionate) way to pay for Bitcoin's security was by having some inflation scheme that violated the 21 million cap, then agreeing to break the limit would probably be what makes sense, and in the economic interest of its users and holders.

So, Paul Sztorc was right again, there are three options: Enormous Block Size Increases, Violate 21M Coin Limit, or >50% Miner Fee-Revenues Come From Merged Mining: https://www.truthcoin.info/images/sb-trilemma.png. And I think using Merged Mining is the best option. More about that: https://www.truthcoin.info/blog/security-budget-ii-mm/

> Another option, if we were to decide we are over-secured in the short term, would be to soft-fork in a reduction in the current and near-future mining rewards, by somehow locking the coins in a contract that deprived the miner of the full reward, and then using that contract to pay the rewards out far in the future, should at some point we feel the security budget was insufficient.

Yes, that's also possible, RSK uses that. And making some kind of soft-fork for that is also possible, but I don't know if miners will agree to send some coinbase reward to "<futureBlockNumber> OP_CHECKLOCKTIMEVERIFY OP_DROP OP_TRUE".

On 2022-07-06 06:29:18 user Corey Haddad via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Bitcoin's finite supply is the main argument for people investing in it, the whole narrative around bitcoin is based on its finite supply. While it has its flaws and basically condemns bitcoin to be only used as a store >of value (and not as a currency), I don't think it's worth questioning it at this point.?
>
>Just my 2 sats.?
>
>Giuseppe.?


A finite?supply alone is not enough to give something value, as it must also be useful in some way. In the case of Bitcoin, various?forms of cryptographic?security?must all work - and work together - to make Bitcoin useful. If the only realistic (fair, efficient & proportionate) way to pay for Bitcoin's security?was by having some inflation scheme?that violated the 21 million cap, then agreeing to break the limit would probably be what makes sense, and in the economic interest of its users and holders.

There will always be competitive?pressures with respect to efficiency, and both being over-secured and under-secured would be economically inefficient for a crypto currency, and thereby laving room for a more optimally-secured competitor to gain ground. Currently there is zero feedback in the Bitcoin system between what we might think is the optimum amount of security and what actually exists. There is also zero agreement on how much security would constitute such an optimum. Figuring out how much security is needed, or even better, figuring out a way to have a market mechanism to answer that question, will be an important project.

Another option, if we were to decide we are over-secured in the short term, would be to soft-fork in a reduction in the current and near-future mining rewards, by somehow locking the coins in a contract that deprived the miner of the full reward, and then using that contract to pay the rewards out far in the future, should at some point we feel the security budget was insufficient. Anthony Towns presented a form of this concept in greater detail at a Scaling Bitcoin conference some years ago. While this solution, if employed, would only work for some finite amount of time, it is possible that could give additional decades before the accumulated security budget was exhausted.?


Corey

From billy.tetrud at gmail.com  Thu Jul  7 00:46:15 2022
From: billy.tetrud at gmail.com (Billy Tetrud)
Date: Wed, 6 Jul 2022 17:46:15 -0700
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <139633828-26b5fcbad80d1ca7046479237716ace3@pmq8v.m5r2.onet>
References: <CAK_HAC97sfvtkfs=yTt8Z0pi5ZF91n7OcZbu7k4XhdnMJ_PYnA@mail.gmail.com>
 <139633828-26b5fcbad80d1ca7046479237716ace3@pmq8v.m5r2.onet>
Message-ID: <CAGpPWDbKjSXKHaUcevzG1DtdP-WksO3Ak+1J2JWTeCG2=3GgLQ@mail.gmail.com>

@Corey

>  Currently there is zero feedback in the Bitcoin system between what we
might think is the optimum amount of security and what actually exists.

I basically agree with this. The pedantic part of my mind does want to
point out that the link between block subsidy and bitcoin's price does
actually give somewhat of a feedback loop, in that the higher the price,
the more valuable bitcoin is as a whole (at least as viewed by the active
market), and therefore the more investment in security is appropriate.
However, in the long run when the subsidy reduces to insignificance, we
basically lose this link. And even with this link, it's not very direct.
Fees retain only a little bit of this behavior, because presumably a more
valuable bitcoin is more valuable to spend, but the link to security is
very tenuous there.

> There is also zero agreement on how much security would constitute such
an optimum.

This is really step 1. We need to generate consensus on this long before
the block subsidy becomes too small. Probably in the next 10-15 years. I
wrote a paper
<https://github.com/fresheneesz/quantificationOfConsensusProtocolSecurity>
that uses a framework for thinking about how much security bitcoin might
need. The concept is that we should figure out what bitcoin's bottlenecks
are, and figure out the minimum requirements we want to place on running a
node based on how many (public) nodes we think we need and what percentage
of machines out there are likely to run a node. The goals I chose to
explore in that paper are totally up for debate, and I think its an
important debate to have. But they are basically a first stab at setting up
what we would need to determine optimum security. I would very much
appreciate your review of that part of the paper, Corey.

> Figuring out how much security is needed, or even better, figuring out a
way to have a market mechanism to answer that question, will be an
important project.

My thoughts on this are that we will need to periodically make some
software change to adjust a *target amount of investment in security*,
because the components of bitcoin's blockchain security are not all
predictable. Many unpredictable things factor into bitcoin's security (eg
miner behavior, pools, how many people generally run public nodes on their
own, what features require running public nodes, value of bitcoin, etc.

The primary mechanism we have to change how much security we have is to
change the block size, which changes how much fees miners can collect each
block. This isn't a linear thing. Its probably a parabola with a peak,
where at that peak, making the block either smaller and larger would both
reduce total fees paid. This is because when blocksize is higher, more
transactions (and thus more fees) can be collected, but at the same time
average fees will be lower. The pull of those two forces should define that
parabola.

So my suggestion here would be that we should target a certain amount of
security and have programmatic adjustments to the block size in order to
stay near enough to the parabolic maximum so that we pay miners enough to
give us sufficient blockchain security. Conversely, it should also attempt
to minimize how much "extra" security we pay for. It would be wasteful to
pay 3 times as much for 3 times the security we actually need. Such a thing
is a very real form of devaluation that basically represents a tax on
bitcoin and users of bitcoin. And its very possible for the position of
this parabola to change over time. We could never say with certainty
whether we're on one side of the parabola's maximum or the other. This
would make it rather complex to track well.

Additionally, there's no clear trustless way to determine the market value
of bitcoin at any given time, which makes it difficult to maintain this
target over time. As the market value of bitcoin changes, that target could
become quite inaccurate. This implies that we would need to do periodic
adjustments to the target, either through periodic forks or through some
other mechanism for changing the target.

If there were a good trustless way to determine the market value of
bitcoin, we would have to "manually" change this target potentially much
less often. Transaction fees kind of have an association with market value.
Perhaps some kind of analysis can be done on that to make a reasonable
prediction of what market value is based on fees. Or maybe blocks can
commit to a market price similarly to how they commit to a timestamp (which
is also only verifiable to an approximation and can only be verified close
to when it was mined but not eg years later).




On Wed, Jul 6, 2022 at 4:13 AM vjudeu via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> > If the only realistic (fair, efficient & proportionate) way to pay for
> Bitcoin's security was by having some inflation scheme that violated the 21
> million cap, then agreeing to break the limit would probably be what makes
> sense, and in the economic interest of its users and holders.
>
> So, Paul Sztorc was right again, there are three options: Enormous Block
> Size Increases, Violate 21M Coin Limit, or >50% Miner Fee-Revenues Come
> From Merged Mining: https://www.truthcoin.info/images/sb-trilemma.png.
> And I think using Merged Mining is the best option. More about that:
> https://www.truthcoin.info/blog/security-budget-ii-mm/
>
> > Another option, if we were to decide we are over-secured in the short
> term, would be to soft-fork in a reduction in the current and near-future
> mining rewards, by somehow locking the coins in a contract that deprived
> the miner of the full reward, and then using that contract to pay the
> rewards out far in the future, should at some point we feel the security
> budget was insufficient.
>
> Yes, that's also possible, RSK uses that. And making some kind of
> soft-fork for that is also possible, but I don't know if miners will agree
> to send some coinbase reward to "<futureBlockNumber> OP_CHECKLOCKTIMEVERIFY
> OP_DROP OP_TRUE".
>
> On 2022-07-06 06:29:18 user Corey Haddad via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >Bitcoin's finite supply is the main argument for people investing in it,
> the whole narrative around bitcoin is based on its finite supply. While it
> has its flaws and basically condemns bitcoin to be only used as a store >of
> value (and not as a currency), I don't think it's worth questioning it at
> this point.
> >
> >Just my 2 sats.
> >
> >Giuseppe.
>
>
> A finite supply alone is not enough to give something value, as it must
> also be useful in some way. In the case of Bitcoin, various forms of
> cryptographic security must all work - and work together - to make Bitcoin
> useful. If the only realistic (fair, efficient & proportionate) way to pay
> for Bitcoin's security was by having some inflation scheme that violated
> the 21 million cap, then agreeing to break the limit would probably be what
> makes sense, and in the economic interest of its users and holders.
>
> There will always be competitive pressures with respect to efficiency, and
> both being over-secured and under-secured would be economically inefficient
> for a crypto currency, and thereby laving room for a more optimally-secured
> competitor to gain ground. Currently there is zero feedback in the Bitcoin
> system between what we might think is the optimum amount of security and
> what actually exists. There is also zero agreement on how much security
> would constitute such an optimum. Figuring out how much security is needed,
> or even better, figuring out a way to have a market mechanism to answer
> that question, will be an important project.
>
> Another option, if we were to decide we are over-secured in the short
> term, would be to soft-fork in a reduction in the current and near-future
> mining rewards, by somehow locking the coins in a contract that deprived
> the miner of the full reward, and then using that contract to pay the
> rewards out far in the future, should at some point we feel the security
> budget was insufficient. Anthony Towns presented a form of this concept in
> greater detail at a Scaling Bitcoin conference some years ago. While this
> solution, if employed, would only work for some finite amount of time, it
> is possible that could give additional decades before the accumulated
> security budget was exhausted.
>
>
> Corey
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220706/d5a48a69/attachment.html>

From vjudeu at gazeta.pl  Thu Jul  7 12:15:34 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Thu, 07 Jul 2022 14:15:34 +0200
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAGpPWDbKjSXKHaUcevzG1DtdP-WksO3Ak+1J2JWTeCG2=3GgLQ@mail.gmail.com>
Message-ID: <164907167-5b9b0e9ae97b67a0c53de69f7b92affd@pmq2v.m5r2.onet>

> The primary mechanism we have to change how much security we have is to change the block size, which changes how much fees miners can collect each block. This isn't a linear thing. Its probably a parabola with a peak, where at that peak, making the block either smaller and larger would both reduce total fees paid. This is because when blocksize is higher, more transactions (and thus more fees) can be collected, but at the same time average fees will be lower. The pull of those two forces should define that parabola.

I think it would be better to allow transaction joining, and lock some coins to the future block numbers in case of peaks, to make fees more smoothly, like it is in RSK. So, if there is 0.01 BTC fee for some transaction, it does not matter if that is paid by some single user, or by a million users, one satoshi each, that comes on-chain as a single transaction to serve all of them.

> Transaction fees kind of have an association with market value.

They will be more important in the future, because when all coins will be mined, then miners will earn nothing, if there will be no on-chain transactions. On the other hand, people will switch to other networks, if on-chain fees will be too high. So, I think the market should adjust fees, and finding the right balance between on-chain and off-chain should be left to the users, just by providing them options like transaction joining. I think such features will be created anyway, if not supported directly, then they will come as no-forks, and if that won't succeed, then I expect some centralized websites will start doing that anyway.


On 2022-07-07 02:46:29 user Billy Tetrud <billy.tetrud at gmail.com> wrote:
@Corey



>  Currently there is zero feedback in the Bitcoin system between what we might think is the optimum amount of security and what actually exists. 


I basically agree with this. The pedantic part of my mind does want to point out that the link between block subsidy and bitcoin's price does actually give somewhat of a feedback loop, in that the higher the price, the more valuable bitcoin is as a whole (at least as viewed by the active market), and therefore the more investment in security is appropriate. However, in the long run when the subsidy reduces to insignificance, we basically lose this link. And even with this link, it's not very direct. Fees retain only a little bit of this behavior, because presumably a more valuable bitcoin is more valuable to spend, but the link to security is very tenuous there.  


> There is also zero agreement on how much security would constitute such an optimum. 


This is really step 1. We need to generate consensus on this long before the block subsidy becomes too small. Probably in the next 10-15 years. I wrote a paper that uses a framework for thinking about how much security bitcoin might need. The concept is that we should figure out what bitcoin's bottlenecks are, and figure out the minimum requirements we want to place on running a node based on how many (public) nodes we think we need and what percentage of machines out there are likely to run a node. The goals I chose to explore in that paper are totally up for debate, and I think its an important debate to have. But they are basically a first stab at setting up what we would need to determine optimum security. I would very much appreciate your review of that part of the paper, Corey.  


> Figuring out how much security is needed, or even better, figuring out a way to have a market mechanism to answer that question, will be an important project.


My thoughts on this are that we will need to periodically make some software change to adjust a *target amount of investment in security*, because the components of bitcoin's blockchain security are not all predictable. Many unpredictable things factor into bitcoin's security (eg miner behavior, pools, how many people generally run public nodes on their own, what features require running public nodes, value of bitcoin, etc. 


The primary mechanism we have to change how much security we have is to change the block size, which changes how much fees miners can collect each block. This isn't a linear thing. Its probably a parabola with a peak, where at that peak, making the block either smaller and larger would both reduce total fees paid. This is because when blocksize is higher, more transactions (and thus more fees) can be collected, but at the same time average fees will be lower. The pull of those two forces should define that parabola. 


So my suggestion here would be that we should target a certain amount of security and have programmatic adjustments to the block size in order to stay near enough to the parabolic maximum so that we pay miners enough to give us sufficient blockchain security. Conversely, it should also attempt to minimize how much "extra" security we pay for. It would be wasteful to pay 3 times as much for 3 times the security we actually need. Such a thing is a very real form of devaluation that basically represents a tax on bitcoin and users of bitcoin. And its very possible for the position of this parabola to change over time. We could never say with certainty whether we're on one side of the parabola's maximum or the other. This would make it rather complex to track well.  


Additionally, there's no clear trustless way to determine the market value of bitcoin at any given time, which makes it difficult to maintain this target over time. As the market value of bitcoin changes, that target could become quite inaccurate. This implies that we would need to do periodic adjustments to the target, either through periodic forks or through some other mechanism for changing the target. 


If there were a good trustless way to determine the market value of bitcoin, we would have to "manually" change this target potentially much less often. Transaction fees kind of have an association with market value. Perhaps some kind of analysis can be done on that to make a reasonable prediction of what market value is based on fees. Or maybe blocks can commit to a market price similarly to how they commit to a timestamp (which is also only verifiable to an approximation and can only be verified close to when it was mined but not eg years later). 


   




On Wed, Jul 6, 2022 at 4:13 AM vjudeu via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> If the only realistic (fair, efficient & proportionate) way to pay for Bitcoin's security was by having some inflation scheme that violated the 21 million cap, then agreeing to break the limit would probably be what makes sense, and in the economic interest of its users and holders.

So, Paul Sztorc was right again, there are three options: Enormous Block Size Increases, Violate 21M Coin Limit, or >50% Miner Fee-Revenues Come From Merged Mining: https://www.truthcoin.info/images/sb-trilemma.png. And I think using Merged Mining is the best option. More about that: https://www.truthcoin.info/blog/security-budget-ii-mm/

> Another option, if we were to decide we are over-secured in the short term, would be to soft-fork in a reduction in the current and near-future mining rewards, by somehow locking the coins in a contract that deprived the miner of the full reward, and then using that contract to pay the rewards out far in the future, should at some point we feel the security budget was insufficient.

Yes, that's also possible, RSK uses that. And making some kind of soft-fork for that is also possible, but I don't know if miners will agree to send some coinbase reward to "<futureBlockNumber> OP_CHECKLOCKTIMEVERIFY OP_DROP OP_TRUE".

On 2022-07-06 06:29:18 user Corey Haddad via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Bitcoin's finite supply is the main argument for people investing in it, the whole narrative around bitcoin is based on its finite supply. While it has its flaws and basically condemns bitcoin to be only used as a store >of value (and not as a currency), I don't think it's worth questioning it at this point. 
>
>Just my 2 sats. 
>
>Giuseppe. 


A finite supply alone is not enough to give something value, as it must also be useful in some way. In the case of Bitcoin, various forms of cryptographic security must all work - and work together - to make Bitcoin useful. If the only realistic (fair, efficient & proportionate) way to pay for Bitcoin's security was by having some inflation scheme that violated the 21 million cap, then agreeing to break the limit would probably be what makes sense, and in the economic interest of its users and holders.

There will always be competitive pressures with respect to efficiency, and both being over-secured and under-secured would be economically inefficient for a crypto currency, and thereby laving room for a more optimally-secured competitor to gain ground. Currently there is zero feedback in the Bitcoin system between what we might think is the optimum amount of security and what actually exists. There is also zero agreement on how much security would constitute such an optimum. Figuring out how much security is needed, or even better, figuring out a way to have a market mechanism to answer that question, will be an important project.

Another option, if we were to decide we are over-secured in the short term, would be to soft-fork in a reduction in the current and near-future mining rewards, by somehow locking the coins in a contract that deprived the miner of the full reward, and then using that contract to pay the rewards out far in the future, should at some point we feel the security budget was insufficient. Anthony Towns presented a form of this concept in greater detail at a Scaling Bitcoin conference some years ago. While this solution, if employed, would only work for some finite amount of time, it is possible that could give additional decades before the accumulated security budget was exhausted. 


Corey
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From john at synonym.to  Thu Jul  7 13:24:39 2022
From: john at synonym.to (John Carvalho)
Date: Thu, 7 Jul 2022 14:24:39 +0100
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <mailman.9.1657195203.20624.bitcoin-dev@lists.linuxfoundation.org>
References: <mailman.9.1657195203.20624.bitcoin-dev@lists.linuxfoundation.org>
Message-ID: <CAHTn92wR+D=2FLAc7vhhm4kNT6NwDfyKdRj32=E9H3UJ4QcE+Q@mail.gmail.com>

Billy,

Proof of work and the difficulty adjustment function solve literally
everything you are talking about already.

Bitcoin does not need active economic governanance by devs or meddlers.

Please stop spamming this list with this nonsensical thread.

Love,

John


On Thu, Jul 7, 2022 at 1:00 PM <
bitcoin-dev-request at lists.linuxfoundation.org> wrote:

> Send bitcoin-dev mailing list submissions to
>         bitcoin-dev at lists.linuxfoundation.org
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> or, via email, send a message with subject or body 'help' to
>         bitcoin-dev-request at lists.linuxfoundation.org
>
> You can reach the person managing the list at
>         bitcoin-dev-owner at lists.linuxfoundation.org
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of bitcoin-dev digest..."
>
>
> Today's Topics:
>
>    1. Re: Bitcoin covenants are inevitable (Billy Tetrud)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Wed, 6 Jul 2022 17:46:15 -0700
> From: Billy Tetrud <billy.tetrud at gmail.com>
> To: vjudeu at gazeta.pl,  Bitcoin Protocol Discussion
>         <bitcoin-dev at lists.linuxfoundation.org>
> Subject: Re: [bitcoin-dev] Bitcoin covenants are inevitable
> Message-ID:
>         <CAGpPWDbKjSXKHaUcevzG1DtdP-WksO3Ak+1J2JWTeCG2=
> 3GgLQ at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> @Corey
>
> >  Currently there is zero feedback in the Bitcoin system between what we
> might think is the optimum amount of security and what actually exists.
>
> I basically agree with this. The pedantic part of my mind does want to
> point out that the link between block subsidy and bitcoin's price does
> actually give somewhat of a feedback loop, in that the higher the price,
> the more valuable bitcoin is as a whole (at least as viewed by the active
> market), and therefore the more investment in security is appropriate.
> However, in the long run when the subsidy reduces to insignificance, we
> basically lose this link. And even with this link, it's not very direct.
> Fees retain only a little bit of this behavior, because presumably a more
> valuable bitcoin is more valuable to spend, but the link to security is
> very tenuous there.
>
> > There is also zero agreement on how much security would constitute such
> an optimum.
>
> This is really step 1. We need to generate consensus on this long before
> the block subsidy becomes too small. Probably in the next 10-15 years. I
> wrote a paper
> <https://github.com/fresheneesz/quantificationOfConsensusProtocolSecurity>
> that uses a framework for thinking about how much security bitcoin might
> need. The concept is that we should figure out what bitcoin's bottlenecks
> are, and figure out the minimum requirements we want to place on running a
> node based on how many (public) nodes we think we need and what percentage
> of machines out there are likely to run a node. The goals I chose to
> explore in that paper are totally up for debate, and I think its an
> important debate to have. But they are basically a first stab at setting up
> what we would need to determine optimum security. I would very much
> appreciate your review of that part of the paper, Corey.
>
> > Figuring out how much security is needed, or even better, figuring out a
> way to have a market mechanism to answer that question, will be an
> important project.
>
> My thoughts on this are that we will need to periodically make some
> software change to adjust a *target amount of investment in security*,
> because the components of bitcoin's blockchain security are not all
> predictable. Many unpredictable things factor into bitcoin's security (eg
> miner behavior, pools, how many people generally run public nodes on their
> own, what features require running public nodes, value of bitcoin, etc.
>
> The primary mechanism we have to change how much security we have is to
> change the block size, which changes how much fees miners can collect each
> block. This isn't a linear thing. Its probably a parabola with a peak,
> where at that peak, making the block either smaller and larger would both
> reduce total fees paid. This is because when blocksize is higher, more
> transactions (and thus more fees) can be collected, but at the same time
> average fees will be lower. The pull of those two forces should define that
> parabola.
>
> So my suggestion here would be that we should target a certain amount of
> security and have programmatic adjustments to the block size in order to
> stay near enough to the parabolic maximum so that we pay miners enough to
> give us sufficient blockchain security. Conversely, it should also attempt
> to minimize how much "extra" security we pay for. It would be wasteful to
> pay 3 times as much for 3 times the security we actually need. Such a thing
> is a very real form of devaluation that basically represents a tax on
> bitcoin and users of bitcoin. And its very possible for the position of
> this parabola to change over time. We could never say with certainty
> whether we're on one side of the parabola's maximum or the other. This
> would make it rather complex to track well.
>
> Additionally, there's no clear trustless way to determine the market value
> of bitcoin at any given time, which makes it difficult to maintain this
> target over time. As the market value of bitcoin changes, that target could
> become quite inaccurate. This implies that we would need to do periodic
> adjustments to the target, either through periodic forks or through some
> other mechanism for changing the target.
>
> If there were a good trustless way to determine the market value of
> bitcoin, we would have to "manually" change this target potentially much
> less often. Transaction fees kind of have an association with market value.
> Perhaps some kind of analysis can be done on that to make a reasonable
> prediction of what market value is based on fees. Or maybe blocks can
> commit to a market price similarly to how they commit to a timestamp (which
> is also only verifiable to an approximation and can only be verified close
> to when it was mined but not eg years later).
>
>
>
>
> On Wed, Jul 6, 2022 at 4:13 AM vjudeu via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> > > If the only realistic (fair, efficient & proportionate) way to pay for
> > Bitcoin's security was by having some inflation scheme that violated the
> 21
> > million cap, then agreeing to break the limit would probably be what
> makes
> > sense, and in the economic interest of its users and holders.
> >
> > So, Paul Sztorc was right again, there are three options: Enormous Block
> > Size Increases, Violate 21M Coin Limit, or >50% Miner Fee-Revenues Come
> > From Merged Mining: https://www.truthcoin.info/images/sb-trilemma.png.
> > And I think using Merged Mining is the best option. More about that:
> > https://www.truthcoin.info/blog/security-budget-ii-mm/
> >
> > > Another option, if we were to decide we are over-secured in the short
> > term, would be to soft-fork in a reduction in the current and near-future
> > mining rewards, by somehow locking the coins in a contract that deprived
> > the miner of the full reward, and then using that contract to pay the
> > rewards out far in the future, should at some point we feel the security
> > budget was insufficient.
> >
> > Yes, that's also possible, RSK uses that. And making some kind of
> > soft-fork for that is also possible, but I don't know if miners will
> agree
> > to send some coinbase reward to "<futureBlockNumber>
> OP_CHECKLOCKTIMEVERIFY
> > OP_DROP OP_TRUE".
> >
> > On 2022-07-06 06:29:18 user Corey Haddad via bitcoin-dev <
> > bitcoin-dev at lists.linuxfoundation.org> wrote:
> > >Bitcoin's finite supply is the main argument for people investing in it,
> > the whole narrative around bitcoin is based on its finite supply. While
> it
> > has its flaws and basically condemns bitcoin to be only used as a store
> >of
> > value (and not as a currency), I don't think it's worth questioning it at
> > this point.
> > >
> > >Just my 2 sats.
> > >
> > >Giuseppe.
> >
> >
> > A finite supply alone is not enough to give something value, as it must
> > also be useful in some way. In the case of Bitcoin, various forms of
> > cryptographic security must all work - and work together - to make
> Bitcoin
> > useful. If the only realistic (fair, efficient & proportionate) way to
> pay
> > for Bitcoin's security was by having some inflation scheme that violated
> > the 21 million cap, then agreeing to break the limit would probably be
> what
> > makes sense, and in the economic interest of its users and holders.
> >
> > There will always be competitive pressures with respect to efficiency,
> and
> > both being over-secured and under-secured would be economically
> inefficient
> > for a crypto currency, and thereby laving room for a more
> optimally-secured
> > competitor to gain ground. Currently there is zero feedback in the
> Bitcoin
> > system between what we might think is the optimum amount of security and
> > what actually exists. There is also zero agreement on how much security
> > would constitute such an optimum. Figuring out how much security is
> needed,
> > or even better, figuring out a way to have a market mechanism to answer
> > that question, will be an important project.
> >
> > Another option, if we were to decide we are over-secured in the short
> > term, would be to soft-fork in a reduction in the current and near-future
> > mining rewards, by somehow locking the coins in a contract that deprived
> > the miner of the full reward, and then using that contract to pay the
> > rewards out far in the future, should at some point we feel the security
> > budget was insufficient. Anthony Towns presented a form of this concept
> in
> > greater detail at a Scaling Bitcoin conference some years ago. While this
> > solution, if employed, would only work for some finite amount of time, it
> > is possible that could give additional decades before the accumulated
> > security budget was exhausted.
> >
> >
> > Corey
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220706/d5a48a69/attachment-0001.html
> >
>
> ------------------------------
>
> Subject: Digest Footer
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
> ------------------------------
>
> End of bitcoin-dev Digest, Vol 86, Issue 7
> ******************************************
>
-- 
--
John Carvalho
CEO, Synonym.to <http://synonym.to/>

Schedule: https://calendly.com/bitcoinerrorlog
Chat: https://t.me/bitcoinerrorlog
Social: https://twitter.com/bitcoinerrorlog
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/ebd12f96/attachment-0001.html>

From pete at petertodd.org  Thu Jul  7 14:12:41 2022
From: pete at petertodd.org (Peter Todd)
Date: Thu, 7 Jul 2022 10:12:41 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAHTn92wR+D=2FLAc7vhhm4kNT6NwDfyKdRj32=E9H3UJ4QcE+Q@mail.gmail.com>
References: <mailman.9.1657195203.20624.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wR+D=2FLAc7vhhm4kNT6NwDfyKdRj32=E9H3UJ4QcE+Q@mail.gmail.com>
Message-ID: <Ysbp2QclWW7NzfrS@petertodd.org>

On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via bitcoin-dev wrote:
> Billy,
> 
> Proof of work and the difficulty adjustment function solve literally
> everything you are talking about already.

Unfortunately you are quite wrong: the difficulty adjustment function merely
adjusts for changes in the amount of observable, non-51%-attacking, hashing
power. In the event of a chain split, the difficulty adjustment function does
nothing; against a 51% attacker, the difficulty adjustment does nothing;
against a censor, the difficulty adjustment does nothing.

We should not imbue real technology with magical qualities.

> Bitcoin does not need active economic governanance by devs or meddlers.

Yes, active governance would definitely be an exploitable mechanism. On the
other hand, the status quo of the block reward eventually going away entirely
is obviously a risky state change too.

> > > There is also zero agreement on how much security would constitute such
> > an optimum.
> >
> > This is really step 1. We need to generate consensus on this long before
> > the block subsidy becomes too small. Probably in the next 10-15 years. I
> > wrote a paper

The fact of the matter is that the present amount of security is about 1.7% of
the total coin supply/year, and Bitcoin seems to be working fine. 1.7% is also
already an amount low enough that it's much smaller than economic volatility.

Obviously 0% is too small.

There's zero reason to stress about finding an "optimal" amount. An amount low
enough to be easily affordable, but non-zero, is fine. 1% would be fine; 0.5%
would probably be fine; 0.1% would probably be fine.

Over a lifetime - 75 years - 0.5% yearly inflation works out to be a 31% tax on
savings; 0.1% works out to be 7.2%

These are all amounts that are likely to be dwarfed by economic shifts.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/22617f6b/attachment.sig>

From alfred_hodler at protonmail.com  Tue Jul  5 09:38:44 2022
From: alfred_hodler at protonmail.com (Alfred Hodler)
Date: Tue, 05 Jul 2022 09:38:44 +0000
Subject: [bitcoin-dev] [BIP proposal] Private Payments
In-Reply-To: <PS2P216MB10894F1EE83AFA648003C6339DBF9@PS2P216MB1089.KORP216.PROD.OUTLOOK.COM>
References: <rH1Js_T_UWcAg9lS9NDw_Qb6Js5bgs8rPILej69BjqsEZcJZwsvHhZRilkkOQZRGXabai63hrGgbTP2Yk99ojKEN6fU6HT4TmukiafqiKjo=@protonmail.com>
 <CAPv7TjYD_sC+Hkfd=Ucf2E+6qWz7NLDHUg8sgjeS1AhGAThGXQ@mail.gmail.com>
 <YEMOkk-YNJmfUL3J5rwpjeP47c83hDlHAvY8DaZpLN1m251di-L362zuymRWmfGY8dgzNgZDcbj_mpYwh39t7rG4T0gEhTDkF82t-sxQHpA=@protonmail.com>
 <PS2P216MB10894F1EE83AFA648003C6339DBF9@PS2P216MB1089.KORP216.PROD.OUTLOOK.COM>
Message-ID: <S2OTIzlfJETMu2AdqW8-ySt4MPhJh-mzkqy34aleCo1MPN9DmznC1oa_dG5MIZLo8sCiksS1h1DHrW4SbC3qesRQt1NMCc1xgzOg2mRKLL0=@protonmail.com>

Hi Damian,

Which specific part of the proposal do you think affects the legibility of the blockchain and the fungibility of UTXOs? Please point out the relevant section so that we can address your concerns.
Alfred

------- Original Message -------
On Sunday, July 3rd, 2022 at 3:17 PM, KING JAMES HRMH <willtech at live.com.au> wrote:

> Good Afternoon,
>
> In regard to Private Payments, the blockchain is indelible record and it isn't a record unless it is legible so that someone could check the validity of any UTXO and it is enough that Bitcoin is Fungible and the only reason Bitcoin is Fungible is because it is a wallet that makes use of the Blockchain so the concept is
> NACK
>
> KING JAMES HRMH
> Great British Empire
>
> Regards,
> The Australian
> LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
> of Hougun Manor & Glencoe & British Empire
> MR. Damian A. James Williamson
> Professor
> Wills
>
> et al.
>
> Willtech
> www.willtech.com.au
> www.go-overt.com
> duigco.org DUIGCO API
> and other projects
>
> m. 0487135719
> f. +61261470192
>
> This email does not constitute a general advice. Please disregard this email if misdelivered.
>
> ---------------------------------------------------------------
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220705/f71ab8ff/attachment-0001.html>

From erik at q32.com  Thu Jul  7 14:05:25 2022
From: erik at q32.com (Erik Aronesty)
Date: Thu, 7 Jul 2022 10:05:25 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAGpPWDbKjSXKHaUcevzG1DtdP-WksO3Ak+1J2JWTeCG2=3GgLQ@mail.gmail.com>
References: <CAK_HAC97sfvtkfs=yTt8Z0pi5ZF91n7OcZbu7k4XhdnMJ_PYnA@mail.gmail.com>
 <139633828-26b5fcbad80d1ca7046479237716ace3@pmq8v.m5r2.onet>
 <CAGpPWDbKjSXKHaUcevzG1DtdP-WksO3Ak+1J2JWTeCG2=3GgLQ@mail.gmail.com>
Message-ID: <CAJowKgL++JGnKeh5b31ZtT36+ZWANPUp9EJDRzLqCuPXJDS=Hg@mail.gmail.com>

.

>
> My thoughts on this are that we will need to periodically make some
> software change to adjust a *target amount of investment in security*,
> because the
>

I think perhaps you're  underestimating the degree to which utility can be
added to the main chain to encourage fees.

For example, lightning channel open and close transactions are more
valuable, via aggregation, than simple money transfers.

The value of higher utility transactions goes up fairly quickly.

There is no end of the possibility of fee levels in response to increased
utility

Other networks have clearly proven the extremes of this, with rampant fees
appearing rapidly in response to higher utility levels

Because this has already been proven on other networks, we can plan to
gradually  increase the utility of on-chain transactions in response to
reward reductions

This should be more than sufficient to offset and maintain sufficient
security

... Hence the title of this thread.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/3fb02d66/attachment-0001.html>

From beppeben2030 at gmail.com  Thu Jul  7 14:10:31 2022
From: beppeben2030 at gmail.com (Giuseppe B)
Date: Thu, 7 Jul 2022 16:10:31 +0200
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <139633828-26b5fcbad80d1ca7046479237716ace3@pmq8v.m5r2.onet>
References: <CAK_HAC97sfvtkfs=yTt8Z0pi5ZF91n7OcZbu7k4XhdnMJ_PYnA@mail.gmail.com>
 <139633828-26b5fcbad80d1ca7046479237716ace3@pmq8v.m5r2.onet>
Message-ID: <CABrXkXrRX5Zd01ikWOcmxEwXdw4k10WfspOhOu8xKi_JU23Q0A@mail.gmail.com>

It's the first time I read about the security budget and it definitely
sounds scary to me.
If it only takes a few million dollars to attack BTC and make it completely
unusable for one day, I suppose it's only a matter of time before some
hedge fund actually does it, using a short position to profit from the huge
panic sell wave and global loss of confidence that would result from it.
It seems even cheaper to do than the recent attack to Terra, unless I'm
missing something.


On Wed, Jul 6, 2022, 1:10 PM <vjudeu at gazeta.pl> wrote:

> > If the only realistic (fair, efficient & proportionate) way to pay for
> Bitcoin's security was by having some inflation scheme that violated the 21
> million cap, then agreeing to break the limit would probably be what makes
> sense, and in the economic interest of its users and holders.
>
> So, Paul Sztorc was right again, there are three options: Enormous Block
> Size Increases, Violate 21M Coin Limit, or >50% Miner Fee-Revenues Come
> From Merged Mining: https://www.truthcoin.info/images/sb-trilemma.png.
> And I think using Merged Mining is the best option. More about that:
> https://www.truthcoin.info/blog/security-budget-ii-mm/
>
> > Another option, if we were to decide we are over-secured in the short
> term, would be to soft-fork in a reduction in the current and near-future
> mining rewards, by somehow locking the coins in a contract that deprived
> the miner of the full reward, and then using that contract to pay the
> rewards out far in the future, should at some point we feel the security
> budget was insufficient.
>
> Yes, that's also possible, RSK uses that. And making some kind of
> soft-fork for that is also possible, but I don't know if miners will agree
> to send some coinbase reward to "<futureBlockNumber> OP_CHECKLOCKTIMEVERIFY
> OP_DROP OP_TRUE".
>
> On 2022-07-06 06:29:18 user Corey Haddad via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >Bitcoin's finite supply is the main argument for people investing in it,
> the whole narrative around bitcoin is based on its finite supply. While it
> has its flaws and basically condemns bitcoin to be only used as a store >of
> value (and not as a currency), I don't think it's worth questioning it at
> this point.
> >
> >Just my 2 sats.
> >
> >Giuseppe.
>
>
> A finite supply alone is not enough to give something value, as it must
> also be useful in some way. In the case of Bitcoin, various forms of
> cryptographic security must all work - and work together - to make Bitcoin
> useful. If the only realistic (fair, efficient & proportionate) way to pay
> for Bitcoin's security was by having some inflation scheme that violated
> the 21 million cap, then agreeing to break the limit would probably be what
> makes sense, and in the economic interest of its users and holders.
>
> There will always be competitive pressures with respect to efficiency, and
> both being over-secured and under-secured would be economically inefficient
> for a crypto currency, and thereby laving room for a more optimally-secured
> competitor to gain ground. Currently there is zero feedback in the Bitcoin
> system between what we might think is the optimum amount of security and
> what actually exists. There is also zero agreement on how much security
> would constitute such an optimum. Figuring out how much security is needed,
> or even better, figuring out a way to have a market mechanism to answer
> that question, will be an important project.
>
> Another option, if we were to decide we are over-secured in the short
> term, would be to soft-fork in a reduction in the current and near-future
> mining rewards, by somehow locking the coins in a contract that deprived
> the miner of the full reward, and then using that contract to pay the
> rewards out far in the future, should at some point we feel the security
> budget was insufficient. Anthony Towns presented a form of this concept in
> greater detail at a Scaling Bitcoin conference some years ago. While this
> solution, if employed, would only work for some finite amount of time, it
> is possible that could give additional decades before the accumulated
> security budget was exhausted.
>
>
> Corey
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/0f3be846/attachment-0001.html>

From anton at sancoder.com  Thu Jul  7 14:33:09 2022
From: anton at sancoder.com (Anton Shevchenko)
Date: Thu, 07 Jul 2022 07:33:09 -0700
Subject: [bitcoin-dev] No Order Mnemonic
Message-ID: <0dc0e945-9e12-43ad-bd12-fcc0e18e4013@www.fastmail.com>

Hello,

I am new to this list, sorry if it's been discussed earlier.
I made a python implementation for a different mnemonic encoding. The encoding requires user to remember words but not the order of those words.
The code is open (MIT license) at https://github.com/sancoder/noomnem

--  Anton Shevchenko

From eric at voskuil.org  Thu Jul  7 16:24:26 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Thu, 7 Jul 2022 09:24:26 -0700
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <Ysbp2QclWW7NzfrS@petertodd.org>
References: <Ysbp2QclWW7NzfrS@petertodd.org>
Message-ID: <F6CAB95E-2EDD-42E5-8C80-1E3818D51574@voskuil.org>



> On Jul 7, 2022, at 07:13, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via bitcoin-dev wrote:
>> Billy,
>> 
>> Proof of work and the difficulty adjustment function solve literally
>> everything you are talking about already.
> 
> Unfortunately you are quite wrong: the difficulty adjustment function merely
> adjusts for changes in the amount of observable, non-51%-attacking, hashing
> power. In the event of a chain split, the difficulty adjustment function does
> nothing; against a 51% attacker, the difficulty adjustment does nothing;
> against a censor, the difficulty adjustment does nothing.

Consider falling hash rate due to a perpetual 51% attack. Difficulty falls, possibly to min difficulty if all non-censors stop mining and with all censors collaborating (one miner). Yet as difficulty falls, so does the cost of countering the censor. At min difficulty everyone can CPU mine again.

Given the presumption that fees rise on unconfirmed transactions, there is inherent economic incentive to countering at any level of difficulty. Consequently the censor is compelled to subsidize the loss resulting from forgoing higher fee transactions that are incentivizing its competition.

With falling difficulty this incentive is compounded.

Comparisons of security in different scenarios presume a consistent level of demand. If that demand is insufficient to offset the censor?s subsidy, there is no security in any scenario.

Given that the block subsidy (inflation) is paid equally to censoring and non-censoring miners, it offers no security against censorship whatsoever. Trading fee-based block reward for inflation-based is simply trading censorship resistance for the presumption of double-spend security. But of course, a censor can double spend profitably in any scenario where the double spend value (to the censor) exceeds that of blocks orphaned (as the censor earns 100% of all block rewards).

Banks and state monies offer reasonable double spend security. Not sure that?s a trade worth making.

It?s not clear to me that Satoshi understood this relation. I?ve seen no indication of it. However the decision to phase out subsidy, once a sufficient number of units (to assure divisibility) had been issued, is what transitions Bitcoin from a censorable to a censorship resistant money. If one does not believe there is sufficient demand for such a money, there is no way to reconcile that belief with a model of censorship resistance.

> We should not imbue real technology with magical qualities.

Precisely. It is economic forces (people), not technology, that provide security.

e

>> Bitcoin does not need active economic governanance by devs or meddlers.
> 
> Yes, active governance would definitely be an exploitable mechanism. On the
> other hand, the status quo of the block reward eventually going away entirely
> is obviously a risky state change too.
> 
>>>> There is also zero agreement on how much security would constitute such
>>> an optimum.
>>> 
>>> This is really step 1. We need to generate consensus on this long before
>>> the block subsidy becomes too small. Probably in the next 10-15 years. I
>>> wrote a paper
> 
> The fact of the matter is that the present amount of security is about 1.7% of
> the total coin supply/year, and Bitcoin seems to be working fine. 1.7% is also
> already an amount low enough that it's much smaller than economic volatility.
> 
> Obviously 0% is too small.
> 
> There's zero reason to stress about finding an "optimal" amount. An amount low
> enough to be easily affordable, but non-zero, is fine. 1% would be fine; 0.5%
> would probably be fine; 0.1% would probably be fine.
> 
> Over a lifetime - 75 years - 0.5% yearly inflation works out to be a 31% tax on
> savings; 0.1% works out to be 7.2%
> 
> These are all amounts that are likely to be dwarfed by economic shifts.
> 
> -- 
> https://petertodd.org 'peter'[:-1]@petertodd.org
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/octet-stream
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/695b01f5/attachment.obj>

From bram at chia.net  Thu Jul  7 17:36:26 2022
From: bram at chia.net (Bram Cohen)
Date: Thu, 7 Jul 2022 10:36:26 -0700
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <0dc0e945-9e12-43ad-bd12-fcc0e18e4013@www.fastmail.com>
References: <0dc0e945-9e12-43ad-bd12-fcc0e18e4013@www.fastmail.com>
Message-ID: <CAHUJnBAL-qPoGZ8XZS3jZiPaqMOt4Kg2ioM_jfCF3fDB3-ej9A@mail.gmail.com>

On Thu, Jul 7, 2022 at 7:43 AM Anton Shevchenko via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I made a python implementation for a different mnemonic encoding. The
> encoding requires user to remember words but not the order of those words.
> The code is open (MIT license) at https://github.com/sancoder/noomnem


Thanks Anton. There's an interesting mathematical question of whether it's
possible to make a code like this which always uses the BIP-39 words for
the same key as part of its encoding, basically adding a few words as error
correction in case the order is lost or confused. If the BIP-39 contains a
duplicate you can add an extra word.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/557f4041/attachment.html>

From stick at satoshilabs.com  Thu Jul  7 17:52:18 2022
From: stick at satoshilabs.com (Pavol Rusnak)
Date: Thu, 7 Jul 2022 19:52:18 +0200
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAHUJnBAL-qPoGZ8XZS3jZiPaqMOt4Kg2ioM_jfCF3fDB3-ej9A@mail.gmail.com>
References: <0dc0e945-9e12-43ad-bd12-fcc0e18e4013@www.fastmail.com>
 <CAHUJnBAL-qPoGZ8XZS3jZiPaqMOt4Kg2ioM_jfCF3fDB3-ej9A@mail.gmail.com>
Message-ID: <CAF90AvmOSa+V7+z16MXyJRCVh_iEceFp_CkbC_4jWixi4W5BbQ@mail.gmail.com>

There is. Just encode the index of permutation used to scramble the
otherwise sorted list. For 12 words you need to store 12! = ~32 bits so 3
words should be enough.

Repetitions make this more difficult, though.

On Thu 7. 7. 2022 at 19:41, Bram Cohen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Thu, Jul 7, 2022 at 7:43 AM Anton Shevchenko via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> I made a python implementation for a different mnemonic encoding. The
>> encoding requires user to remember words but not the order of those words.
>> The code is open (MIT license) at https://github.com/sancoder/noomnem
>
>
> Thanks Anton. There's an interesting mathematical question of whether it's
> possible to make a code like this which always uses the BIP-39 words for
> the same key as part of its encoding, basically adding a few words as error
> correction in case the order is lost or confused. If the BIP-39 contains a
> duplicate you can add an extra word.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-- 
Best Regards / S pozdravom,

Pavol "stick" Rusnak
Co-Founder, SatoshiLabs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/cf37de1e/attachment-0001.html>

From erik at q32.com  Thu Jul  7 17:37:39 2022
From: erik at q32.com (Erik Aronesty)
Date: Thu, 7 Jul 2022 13:37:39 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <F6CAB95E-2EDD-42E5-8C80-1E3818D51574@voskuil.org>
References: <Ysbp2QclWW7NzfrS@petertodd.org>
 <F6CAB95E-2EDD-42E5-8C80-1E3818D51574@voskuil.org>
Message-ID: <CAJowKg+OP92w+zHjy4T79tMDL5O0gboUEurhBAuWbp+npsv94A@mail.gmail.com>

> > We should not imbue real technology with magical qualities.

> Precisely. It is economic forces (people), not technology, that provide
security.

Yes, and these forces don't prevent double-spend / 51% attacks if the
amounts involved are greater than the incentives.

In addition to "utility", lowering the block size could help prevent this
issue as well... increasing fee pressure and double-spend security while
reducing the burden on node operators.

Changes to inflation are, very likely, off the table.



On Thu, Jul 7, 2022 at 12:24 PM Eric Voskuil via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>
> > On Jul 7, 2022, at 07:13, Peter Todd via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > ?On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via bitcoin-dev
> wrote:
> >> Billy,
> >>
> >> Proof of work and the difficulty adjustment function solve literally
> >> everything you are talking about already.
> >
> > Unfortunately you are quite wrong: the difficulty adjustment function
> merely
> > adjusts for changes in the amount of observable, non-51%-attacking,
> hashing
> > power. In the event of a chain split, the difficulty adjustment function
> does
> > nothing; against a 51% attacker, the difficulty adjustment does nothing;
> > against a censor, the difficulty adjustment does nothing.
>
> Consider falling hash rate due to a perpetual 51% attack. Difficulty
> falls, possibly to min difficulty if all non-censors stop mining and with
> all censors collaborating (one miner). Yet as difficulty falls, so does the
> cost of countering the censor. At min difficulty everyone can CPU mine
> again.
>
> Given the presumption that fees rise on unconfirmed transactions, there is
> inherent economic incentive to countering at any level of difficulty.
> Consequently the censor is compelled to subsidize the loss resulting from
> forgoing higher fee transactions that are incentivizing its competition.
>
> With falling difficulty this incentive is compounded.
>
> Comparisons of security in different scenarios presume a consistent level
> of demand. If that demand is insufficient to offset the censor?s subsidy,
> there is no security in any scenario.
>
> Given that the block subsidy (inflation) is paid equally to censoring and
> non-censoring miners, it offers no security against censorship whatsoever.
> Trading fee-based block reward for inflation-based is simply trading
> censorship resistance for the presumption of double-spend security. But of
> course, a censor can double spend profitably in any scenario where the
> double spend value (to the censor) exceeds that of blocks orphaned (as the
> censor earns 100% of all block rewards).
>
> Banks and state monies offer reasonable double spend security. Not sure
> that?s a trade worth making.
>
> It?s not clear to me that Satoshi understood this relation. I?ve seen no
> indication of it. However the decision to phase out subsidy, once a
> sufficient number of units (to assure divisibility) had been issued, is
> what transitions Bitcoin from a censorable to a censorship resistant money.
> If one does not believe there is sufficient demand for such a money, there
> is no way to reconcile that belief with a model of censorship resistance.
>
> > We should not imbue real technology with magical qualities.
>
> Precisely. It is economic forces (people), not technology, that provide
> security.
>
> e
>
> >> Bitcoin does not need active economic governanance by devs or meddlers.
> >
> > Yes, active governance would definitely be an exploitable mechanism. On
> the
> > other hand, the status quo of the block reward eventually going away
> entirely
> > is obviously a risky state change too.
> >
> >>>> There is also zero agreement on how much security would constitute
> such
> >>> an optimum.
> >>>
> >>> This is really step 1. We need to generate consensus on this long
> before
> >>> the block subsidy becomes too small. Probably in the next 10-15 years.
> I
> >>> wrote a paper
> >
> > The fact of the matter is that the present amount of security is about
> 1.7% of
> > the total coin supply/year, and Bitcoin seems to be working fine. 1.7%
> is also
> > already an amount low enough that it's much smaller than economic
> volatility.
> >
> > Obviously 0% is too small.
> >
> > There's zero reason to stress about finding an "optimal" amount. An
> amount low
> > enough to be easily affordable, but non-zero, is fine. 1% would be fine;
> 0.5%
> > would probably be fine; 0.1% would probably be fine.
> >
> > Over a lifetime - 75 years - 0.5% yearly inflation works out to be a 31%
> tax on
> > savings; 0.1% works out to be 7.2%
> >
> > These are all amounts that are likely to be dwarfed by economic shifts.
> >
> > --
> > https://petertodd.org 'peter'[:-1]@petertodd.org
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/45a46fbd/attachment.html>

From anton at sancoder.com  Thu Jul  7 17:58:40 2022
From: anton at sancoder.com (Anton Shevchenko)
Date: Thu, 07 Jul 2022 10:58:40 -0700
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAF90AvmOSa+V7+z16MXyJRCVh_iEceFp_CkbC_4jWixi4W5BbQ@mail.gmail.com>
References: <0dc0e945-9e12-43ad-bd12-fcc0e18e4013@www.fastmail.com>
 <CAHUJnBAL-qPoGZ8XZS3jZiPaqMOt4Kg2ioM_jfCF3fDB3-ej9A@mail.gmail.com>
 <CAF90AvmOSa+V7+z16MXyJRCVh_iEceFp_CkbC_4jWixi4W5BbQ@mail.gmail.com>
Message-ID: <68d39c5e-bd31-44e5-a5dc-e63d496ee780@www.fastmail.com>

But this will require user to distinguish 12 words from error correcting words. Which is another hassle.

On Thu, Jul 7, 2022, at 10:52 AM, Pavol Rusnak wrote:
> There is. Just encode the index of permutation used to scramble the otherwise sorted list. For 12 words you need to store 12! = ~32 bits so 3 words should be enough. 
> 
> Repetitions make this more difficult, though. 
> 
> On Thu 7. 7. 2022 at 19:41, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> On Thu, Jul 7, 2022 at 7:43 AM Anton Shevchenko via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> I made a python implementation for a different mnemonic encoding. The encoding requires user to remember words but not the order of those words.
>>> The code is open (MIT license) at https://github.com/sancoder/noomnem
>> 
>> Thanks Anton. There's an interesting mathematical question of whether it's possible to make a code like this which always uses the BIP-39 words for the same key as part of its encoding, basically adding a few words as error correction in case the order is lost or confused. If the BIP-39 contains a duplicate you can add an extra word.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> -- 
> 
> Best Regards / S pozdravom,
> 
> Pavol "stick" Rusnak
> Co-Founder, SatoshiLabs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/1d22ce6b/attachment.html>

From eric at voskuil.org  Thu Jul  7 19:57:56 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Thu, 7 Jul 2022 12:57:56 -0700
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAJowKg+OP92w+zHjy4T79tMDL5O0gboUEurhBAuWbp+npsv94A@mail.gmail.com>
References: <CAJowKg+OP92w+zHjy4T79tMDL5O0gboUEurhBAuWbp+npsv94A@mail.gmail.com>
Message-ID: <8438F081-D085-4491-8C1C-4D83FFC7DE84@voskuil.org>

It?s not clear how reducing block size changes the fee aspect of the block reward. Assuming half the space implies twice the fee per avg tx the reward remains constant.

Any additional cost of processing more or less bytes would not matter, because of course this is just a cost that gets nulled out by difficulty ? average profit (net income) is the cost of capital.

The reason for smaller vs. larger blocks is to ensure that individuals can afford to validate. That?s a threshold criteria.

Given unlimited size blocks, miners would still have to fix a point in time to mine, gathering as much fee as they can optimize in some time period presumably less than 10 minutes. The produces a limit to transaction volume, yet neither reward nor profit would be affected given the above assumptions. The difference would be in a tradeoff of per tx fee against the threshold.

Given Moore?s Law, that threshold is constantly decreasing, which will make it  cheaper over time for more individuals to validate. But the difference for miners for smaller blocks is largely inconsequential relative to their other costs.

Increasing demand is the only thing that increases double spend security (and censorship resistance assuming fee-based reward). With rising demand there is rising overall hash rate, despite block reward and profit remaining constant. This makes the cost of attempting to orphan a block higher, therefore lowering the depth/time requirement implied to secure a given tx amount.

These are the two factors, demand and time. Less demand implies more time to secure a given amount against double spend, and also implies a lower cost to subsidize a censorship regime. But the latter requires a differential in reward between the censor and non-censoring miners. While this could be paid in side fees, that is a significant anonymity issue.

e

> On Jul 7, 2022, at 10:37, Erik Aronesty <erik at q32.com> wrote:
> 
> ?
> > > We should not imbue real technology with magical qualities.
> 
> > Precisely. It is economic forces (people), not technology, that provide security.
> 
> Yes, and these forces don't prevent double-spend / 51% attacks if the amounts involved are greater than the incentives.
> 
> In addition to "utility", lowering the block size could help prevent this issue as well... increasing fee pressure and double-spend security while reducing the burden on node operators.
> 
> Changes to inflation are, very likely, off the table.
> 
>  
> 
>> On Thu, Jul 7, 2022 at 12:24 PM Eric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> 
>> 
>> > On Jul 7, 2022, at 07:13, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > 
>> > ?On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via bitcoin-dev wrote:
>> >> Billy,
>> >> 
>> >> Proof of work and the difficulty adjustment function solve literally
>> >> everything you are talking about already.
>> > 
>> > Unfortunately you are quite wrong: the difficulty adjustment function merely
>> > adjusts for changes in the amount of observable, non-51%-attacking, hashing
>> > power. In the event of a chain split, the difficulty adjustment function does
>> > nothing; against a 51% attacker, the difficulty adjustment does nothing;
>> > against a censor, the difficulty adjustment does nothing.
>> 
>> Consider falling hash rate due to a perpetual 51% attack. Difficulty falls, possibly to min difficulty if all non-censors stop mining and with all censors collaborating (one miner). Yet as difficulty falls, so does the cost of countering the censor. At min difficulty everyone can CPU mine again.
>> 
>> Given the presumption that fees rise on unconfirmed transactions, there is inherent economic incentive to countering at any level of difficulty. Consequently the censor is compelled to subsidize the loss resulting from forgoing higher fee transactions that are incentivizing its competition.
>> 
>> With falling difficulty this incentive is compounded.
>> 
>> Comparisons of security in different scenarios presume a consistent level of demand. If that demand is insufficient to offset the censor?s subsidy, there is no security in any scenario.
>> 
>> Given that the block subsidy (inflation) is paid equally to censoring and non-censoring miners, it offers no security against censorship whatsoever. Trading fee-based block reward for inflation-based is simply trading censorship resistance for the presumption of double-spend security. But of course, a censor can double spend profitably in any scenario where the double spend value (to the censor) exceeds that of blocks orphaned (as the censor earns 100% of all block rewards).
>> 
>> Banks and state monies offer reasonable double spend security. Not sure that?s a trade worth making.
>> 
>> It?s not clear to me that Satoshi understood this relation. I?ve seen no indication of it. However the decision to phase out subsidy, once a sufficient number of units (to assure divisibility) had been issued, is what transitions Bitcoin from a censorable to a censorship resistant money. If one does not believe there is sufficient demand for such a money, there is no way to reconcile that belief with a model of censorship resistance.
>> 
>> > We should not imbue real technology with magical qualities.
>> 
>> Precisely. It is economic forces (people), not technology, that provide security.
>> 
>> e
>> 
>> >> Bitcoin does not need active economic governanance by devs or meddlers.
>> > 
>> > Yes, active governance would definitely be an exploitable mechanism. On the
>> > other hand, the status quo of the block reward eventually going away entirely
>> > is obviously a risky state change too.
>> > 
>> >>>> There is also zero agreement on how much security would constitute such
>> >>> an optimum.
>> >>> 
>> >>> This is really step 1. We need to generate consensus on this long before
>> >>> the block subsidy becomes too small. Probably in the next 10-15 years. I
>> >>> wrote a paper
>> > 
>> > The fact of the matter is that the present amount of security is about 1.7% of
>> > the total coin supply/year, and Bitcoin seems to be working fine. 1.7% is also
>> > already an amount low enough that it's much smaller than economic volatility.
>> > 
>> > Obviously 0% is too small.
>> > 
>> > There's zero reason to stress about finding an "optimal" amount. An amount low
>> > enough to be easily affordable, but non-zero, is fine. 1% would be fine; 0.5%
>> > would probably be fine; 0.1% would probably be fine.
>> > 
>> > Over a lifetime - 75 years - 0.5% yearly inflation works out to be a 31% tax on
>> > savings; 0.1% works out to be 7.2%
>> > 
>> > These are all amounts that are likely to be dwarfed by economic shifts.
>> > 
>> > -- 
>> > https://petertodd.org 'peter'[:-1]@petertodd.org
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/84fa83c9/attachment-0001.html>

From erik at q32.com  Thu Jul  7 21:11:47 2022
From: erik at q32.com (Erik Aronesty)
Date: Thu, 7 Jul 2022 17:11:47 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <8438F081-D085-4491-8C1C-4D83FFC7DE84@voskuil.org>
References: <CAJowKg+OP92w+zHjy4T79tMDL5O0gboUEurhBAuWbp+npsv94A@mail.gmail.com>
 <8438F081-D085-4491-8C1C-4D83FFC7DE84@voskuil.org>
Message-ID: <CAJowKgJGfkdCjWUnUyWZ9rgnWFOVYg=aizBwC2wEbMxohRMvZg@mail.gmail.com>

The relationship between block size and fees is not remotely linear.   In a
restricted environment, the fee rewards are much higher.

**the ones moving more sats will win the top spots and will pay as much as
is reasonable**

Smaller blocks produce better security for the network both in validation,
and in fees.

Without a bidding war for space, everyone can post 1 SAT/byte

With a bidding war for space, larger transactions will pay much higher
rates.   There have been a number of papers written on this but you can
concoct a trivial example to prove it.


On Thu, Jul 7, 2022 at 3:58 PM Eric Voskuil <eric at voskuil.org> wrote:

> It?s not clear how reducing block size changes the fee aspect of the block
> reward. Assuming half the space implies twice the fee per avg tx the
> reward remains constant.
>
> Any additional cost of processing more or less bytes would not matter,
> because of course this is just a cost that gets nulled out by difficulty ?
> average profit (net income) is the cost of capital.
>
> The reason for smaller vs. larger blocks is to ensure that individuals can
> afford to validate. That?s a threshold criteria.
>
> Given unlimited size blocks, miners would still have to fix a point in
> time to mine, gathering as much fee as they can optimize in some time
> period presumably less than 10 minutes. The produces a limit to transaction
> volume, yet neither reward nor profit would be affected given the above
> assumptions. The difference would be in a tradeoff of per tx fee against
> the threshold.
>
> Given Moore?s Law, that threshold is constantly decreasing, which will
> make it  cheaper over time for more individuals to validate. But the
> difference for miners for smaller blocks is largely inconsequential
> relative to their other costs.
>
> Increasing demand is the only thing that increases double spend security
> (and censorship resistance assuming fee-based reward). With rising demand
> there is rising overall hash rate, despite block reward and profit
> remaining constant. This makes the cost of attempting to orphan a block
> higher, therefore lowering the depth/time requirement implied to secure a
> given tx amount.
>
> These are the two factors, demand and time. Less demand implies more time
> to secure a given amount against double spend, and also implies a lower
> cost to subsidize a censorship regime. But the latter requires a
> differential in reward between the censor and non-censoring miners. While
> this could be paid in side fees, that is a significant anonymity issue.
>
> e
>
> On Jul 7, 2022, at 10:37, Erik Aronesty <erik at q32.com> wrote:
>
> ?
> > > We should not imbue real technology with magical qualities.
>
> > Precisely. It is economic forces (people), not technology, that provide
> security.
>
> Yes, and these forces don't prevent double-spend / 51% attacks if the
> amounts involved are greater than the incentives.
>
> In addition to "utility", lowering the block size could help prevent this
> issue as well... increasing fee pressure and double-spend security while
> reducing the burden on node operators.
>
> Changes to inflation are, very likely, off the table.
>
>
>
> On Thu, Jul 7, 2022 at 12:24 PM Eric Voskuil via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>>
>>
>> > On Jul 7, 2022, at 07:13, Peter Todd via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >
>> > ?On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via
>> bitcoin-dev wrote:
>> >> Billy,
>> >>
>> >> Proof of work and the difficulty adjustment function solve literally
>> >> everything you are talking about already.
>> >
>> > Unfortunately you are quite wrong: the difficulty adjustment function
>> merely
>> > adjusts for changes in the amount of observable, non-51%-attacking,
>> hashing
>> > power. In the event of a chain split, the difficulty adjustment
>> function does
>> > nothing; against a 51% attacker, the difficulty adjustment does nothing;
>> > against a censor, the difficulty adjustment does nothing.
>>
>> Consider falling hash rate due to a perpetual 51% attack. Difficulty
>> falls, possibly to min difficulty if all non-censors stop mining and with
>> all censors collaborating (one miner). Yet as difficulty falls, so does the
>> cost of countering the censor. At min difficulty everyone can CPU mine
>> again.
>>
>> Given the presumption that fees rise on unconfirmed transactions, there
>> is inherent economic incentive to countering at any level of difficulty.
>> Consequently the censor is compelled to subsidize the loss resulting from
>> forgoing higher fee transactions that are incentivizing its competition.
>>
>> With falling difficulty this incentive is compounded.
>>
>> Comparisons of security in different scenarios presume a consistent level
>> of demand. If that demand is insufficient to offset the censor?s subsidy,
>> there is no security in any scenario.
>>
>> Given that the block subsidy (inflation) is paid equally to censoring and
>> non-censoring miners, it offers no security against censorship whatsoever.
>> Trading fee-based block reward for inflation-based is simply trading
>> censorship resistance for the presumption of double-spend security. But of
>> course, a censor can double spend profitably in any scenario where the
>> double spend value (to the censor) exceeds that of blocks orphaned (as the
>> censor earns 100% of all block rewards).
>>
>> Banks and state monies offer reasonable double spend security. Not sure
>> that?s a trade worth making.
>>
>> It?s not clear to me that Satoshi understood this relation. I?ve seen no
>> indication of it. However the decision to phase out subsidy, once a
>> sufficient number of units (to assure divisibility) had been issued, is
>> what transitions Bitcoin from a censorable to a censorship resistant money.
>> If one does not believe there is sufficient demand for such a money, there
>> is no way to reconcile that belief with a model of censorship resistance.
>>
>> > We should not imbue real technology with magical qualities.
>>
>> Precisely. It is economic forces (people), not technology, that provide
>> security.
>>
>> e
>>
>> >> Bitcoin does not need active economic governanance by devs or meddlers.
>> >
>> > Yes, active governance would definitely be an exploitable mechanism. On
>> the
>> > other hand, the status quo of the block reward eventually going away
>> entirely
>> > is obviously a risky state change too.
>> >
>> >>>> There is also zero agreement on how much security would constitute
>> such
>> >>> an optimum.
>> >>>
>> >>> This is really step 1. We need to generate consensus on this long
>> before
>> >>> the block subsidy becomes too small. Probably in the next 10-15
>> years. I
>> >>> wrote a paper
>> >
>> > The fact of the matter is that the present amount of security is about
>> 1.7% of
>> > the total coin supply/year, and Bitcoin seems to be working fine. 1.7%
>> is also
>> > already an amount low enough that it's much smaller than economic
>> volatility.
>> >
>> > Obviously 0% is too small.
>> >
>> > There's zero reason to stress about finding an "optimal" amount. An
>> amount low
>> > enough to be easily affordable, but non-zero, is fine. 1% would be
>> fine; 0.5%
>> > would probably be fine; 0.1% would probably be fine.
>> >
>> > Over a lifetime - 75 years - 0.5% yearly inflation works out to be a
>> 31% tax on
>> > savings; 0.1% works out to be 7.2%
>> >
>> > These are all amounts that are likely to be dwarfed by economic shifts.
>> >
>> > --
>> > https://petertodd.org 'peter'[:-1]@petertodd.org
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/7c455374/attachment.html>

From corey3 at gmail.com  Thu Jul  7 22:02:08 2022
From: corey3 at gmail.com (Corey Haddad)
Date: Thu, 7 Jul 2022 18:02:08 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAHTn92wR+D=2FLAc7vhhm4kNT6NwDfyKdRj32=E9H3UJ4QcE+Q@mail.gmail.com>
References: <mailman.9.1657195203.20624.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wR+D=2FLAc7vhhm4kNT6NwDfyKdRj32=E9H3UJ4QcE+Q@mail.gmail.com>
Message-ID: <CAK_HAC8gv+O2PEPrn16oOK4_J8Y0qze2jv5Sfkos_ycksB2dxw@mail.gmail.com>

>Billy,
>
>Proof of work and the difficulty adjustment function solve literally
everything you are talking about already.
>Bitcoin does not need active economic governanance by devs or meddlers.
>Please stop spamming this list with this nonsensical thread.
>
>Love,
>John

Sorry John, but this is a divisive comment. You are the spammer here. While
it is unclear why you are trying to harm the Bitcoin development process,
you are, and anyone reading this should know that.

Proof of work and the difficulty adjustment have no capability to ensure
that the amount of security is adequate or reasonable.The only proximate
incentive-compatible feedback mechanisms would either make the security too
low or too high, and not approach 'just right'. If the price falls, and the
hashrate goes down, people might conclude that Bitcoin is looking
vulnerable to attack and therefore sell, which would be a negative feedback
loop. Conversely, if a price rise leads to a higher hashrate, people might
think Bitcoin is now even more secure than before and buy, causing a
positive feedback loop. These are not stable equilibria.

PoW and the difficulty adjustments hold block times at 10 minutes, and by
the same token, keep coin issuance roughly on schedule. They have also
turned out to - thus far - have charted a reasonable (albeit predetermined)
course through the various hash-based attacks that lurk out there in the
world. Without any sort or restorative force that guides the security
budget to an optimum, or even towards a reasonable range, we have to
recognize that we are just lucky that Satoshi got it right. When navigating
via dead reckoning, the uncertainty accumulates over time and distance.
Eventually external corrections are needed. We absolutely need to keep
apprised of the current and future threats, assess Bitcoin's resilience in
the face of those threats, and when needed make changes to ensure Bitcoin
remains secure.

Corey
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/37458d86/attachment-0001.html>

From aj at erisian.com.au  Thu Jul  7 22:06:14 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Fri, 8 Jul 2022 08:06:14 +1000
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <Ysbp2QclWW7NzfrS@petertodd.org>
References: <mailman.9.1657195203.20624.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wR+D=2FLAc7vhhm4kNT6NwDfyKdRj32=E9H3UJ4QcE+Q@mail.gmail.com>
 <Ysbp2QclWW7NzfrS@petertodd.org>
Message-ID: <20220707220614.GA20899@erisian.com.au>

On Thu, Jul 07, 2022 at 10:12:41AM -0400, Peter Todd via bitcoin-dev wrote:
> We should not imbue real technology with magical qualities.

That's much more fun if you invert it, and take it as a mission
statement. Advance technology sufficiently!

> The fact of the matter is that the present amount of security is about 1.7% of
> the total coin supply/year, and Bitcoin seems to be working fine. 1.7% is also
> already an amount low enough that it's much smaller than economic volatility.
> 
> Obviously 0% is too small.
> 
> There's zero reason to stress about finding an "optimal" amount. An amount low
> enough to be easily affordable, but non-zero, is fine. 1% would be fine; 0.5%
> would probably be fine; 0.1% would probably be fine.

For comparison, 0.1% of 21M BTC per annum is 0.4 BTC per block, which
is about 50sat/vb if blocks are 800kvB on average. Doing that purely
with fees seems within the ballpark of feasibility to me.

50sat/vb for a 200vb tx (roughly the size of a 2-in, 2-out p2wpkh/p2tr
tx) is $2 at $20k/BTC, $10 at $100k/BTC, $100 at $1M/BTC etc.

If the current block reward of ~1.7% pa of 19M at a price of $20k funds
the current level of mining activity, then you'd expect a similar level
of mining activity as today with reward at 0.1% pa of 21M at a price
of ~$310k.

Going by the halving schedule, the block subsidy alone will remain above
0.1% of supply until we hit the 0.39 BTC/block regime, in 2036, at which
point it drops to ~0.0986% annualised. (I guess you could extend that by
four years if you're willing to assume more than 1.5% of bitcoin supply
has been permanently lost)

Cheers,
aj


From eric at voskuil.org  Fri Jul  8 00:28:36 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Thu, 7 Jul 2022 17:28:36 -0700
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAJowKgJGfkdCjWUnUyWZ9rgnWFOVYg=aizBwC2wEbMxohRMvZg@mail.gmail.com>
References: <CAJowKgJGfkdCjWUnUyWZ9rgnWFOVYg=aizBwC2wEbMxohRMvZg@mail.gmail.com>
Message-ID: <96371DBA-F484-4538-9E12-9D6AB90AF22C@voskuil.org>

Value is subjective, though a constraint of 1tx per 10 minutes seems unlikey to create a fee of 5000x that of 5000tx. This is of course why I stated my assumption. Yet this simple example should make clear that at some point a reduction in confirmation rate reduces reward. Otherwise a rate of zero implies infinite reward. 

You cannot support the blanket statement (and absent any assumption) that lower confirmation rates produce ?much higher fees? or ?better security?.

What you call a ?bidding war? is merely market pricing, as it occurs with any good. People *always* will pay as much as they will pay. This is tautological. What you cannot say is how much more someone will pay at any given time for any given good, until they have done it. And I?m pretty sure Bitcoin hasn?t done it.

You cannot prove what the price of anything will be, nor can any ?papers?. The absurdity of S2F should have clearly demonstrated that by now. Value is an individual human preference.

If everyone pays 1 sat, then either miners are profitable at 1 sat, or these people are not getting confirmed (economic rationality always assumed).

The assumption of 1 sat txs filling blocks is based on a disproportionately high subsidy. A subsidy of 50btc would imply somewhere in the neighborhood of $200 per tx in fees today, and as $680. As that falls, fees will continue to keep miners at the same profit level. If demand does not rise to compensate (as it always has) then hash rate will fall.

Propping up hash rate with subsidy will not be ?inflationary?, as Bitcoin is a market money. Like gold it is produced at market cost. Yet it will prevent Bitcoin from achieving any meaningful level of censorship resistance. This of course should make people look closely at such arguments.

Of course, once you have a censor, block space gets really small for those who want to resist the censor. Then of course only fees can offset the censorship. Without fee-based tx confirmation (for anonymity), and/or with a disproportionate subsidy going to the censor, a censor can operate profitably and indefinitely (under the assumption of constant demand). There is no reason to assume demand for censored txs wouldn?t even increase, given the white market blessing which so many seem to want.

But there is of course no real issue here. Simply fork off an inflation coin and test your theory. I mean, that?s the only way it can happen anyway.

e

> On Jul 7, 2022, at 14:11, Erik Aronesty <erik at q32.com> wrote:
> 
> ?
> The relationship between block size and fees is not remotely linear.   In a restricted environment, the fee rewards are much higher.
> 
> **the ones moving more sats will win the top spots and will pay as much as is reasonable**
> 
> Smaller blocks produce better security for the network both in validation, and in fees.
> 
> Without a bidding war for space, everyone can post 1 SAT/byte
> 
> With a bidding war for space, larger transactions will pay much higher rates.   There have been a number of papers written on this but you can concoct a trivial example to prove it.
> 
> 
>> On Thu, Jul 7, 2022 at 3:58 PM Eric Voskuil <eric at voskuil.org> wrote:
>> It?s not clear how reducing block size changes the fee aspect of the block reward. Assuming half the space implies twice the fee per avg tx the reward remains constant.
>> 
>> Any additional cost of processing more or less bytes would not matter, because of course this is just a cost that gets nulled out by difficulty ? average profit (net income) is the cost of capital.
>> 
>> The reason for smaller vs. larger blocks is to ensure that individuals can afford to validate. That?s a threshold criteria.
>> 
>> Given unlimited size blocks, miners would still have to fix a point in time to mine, gathering as much fee as they can optimize in some time period presumably less than 10 minutes. The produces a limit to transaction volume, yet neither reward nor profit would be affected given the above assumptions. The difference would be in a tradeoff of per tx fee against the threshold.
>> 
>> Given Moore?s Law, that threshold is constantly decreasing, which will make it  cheaper over time for more individuals to validate. But the difference for miners for smaller blocks is largely inconsequential relative to their other costs.
>> 
>> Increasing demand is the only thing that increases double spend security (and censorship resistance assuming fee-based reward). With rising demand there is rising overall hash rate, despite block reward and profit remaining constant. This makes the cost of attempting to orphan a block higher, therefore lowering the depth/time requirement implied to secure a given tx amount.
>> 
>> These are the two factors, demand and time. Less demand implies more time to secure a given amount against double spend, and also implies a lower cost to subsidize a censorship regime. But the latter requires a differential in reward between the censor and non-censoring miners. While this could be paid in side fees, that is a significant anonymity issue.
>> 
>> e
>> 
>>>> On Jul 7, 2022, at 10:37, Erik Aronesty <erik at q32.com> wrote:
>>>> 
>>> ?
>>> > > We should not imbue real technology with magical qualities.
>>> 
>>> > Precisely. It is economic forces (people), not technology, that provide security.
>>> 
>>> Yes, and these forces don't prevent double-spend / 51% attacks if the amounts involved are greater than the incentives.
>>> 
>>> In addition to "utility", lowering the block size could help prevent this issue as well... increasing fee pressure and double-spend security while reducing the burden on node operators.
>>> 
>>> Changes to inflation are, very likely, off the table.
>>> 
>>>  
>>> 
>>>> On Thu, Jul 7, 2022 at 12:24 PM Eric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>> 
>>>> 
>>>> > On Jul 7, 2022, at 07:13, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>> > 
>>>> > ?On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via bitcoin-dev wrote:
>>>> >> Billy,
>>>> >> 
>>>> >> Proof of work and the difficulty adjustment function solve literally
>>>> >> everything you are talking about already.
>>>> > 
>>>> > Unfortunately you are quite wrong: the difficulty adjustment function merely
>>>> > adjusts for changes in the amount of observable, non-51%-attacking, hashing
>>>> > power. In the event of a chain split, the difficulty adjustment function does
>>>> > nothing; against a 51% attacker, the difficulty adjustment does nothing;
>>>> > against a censor, the difficulty adjustment does nothing.
>>>> 
>>>> Consider falling hash rate due to a perpetual 51% attack. Difficulty falls, possibly to min difficulty if all non-censors stop mining and with all censors collaborating (one miner). Yet as difficulty falls, so does the cost of countering the censor. At min difficulty everyone can CPU mine again.
>>>> 
>>>> Given the presumption that fees rise on unconfirmed transactions, there is inherent economic incentive to countering at any level of difficulty. Consequently the censor is compelled to subsidize the loss resulting from forgoing higher fee transactions that are incentivizing its competition.
>>>> 
>>>> With falling difficulty this incentive is compounded.
>>>> 
>>>> Comparisons of security in different scenarios presume a consistent level of demand. If that demand is insufficient to offset the censor?s subsidy, there is no security in any scenario.
>>>> 
>>>> Given that the block subsidy (inflation) is paid equally to censoring and non-censoring miners, it offers no security against censorship whatsoever. Trading fee-based block reward for inflation-based is simply trading censorship resistance for the presumption of double-spend security. But of course, a censor can double spend profitably in any scenario where the double spend value (to the censor) exceeds that of blocks orphaned (as the censor earns 100% of all block rewards).
>>>> 
>>>> Banks and state monies offer reasonable double spend security. Not sure that?s a trade worth making.
>>>> 
>>>> It?s not clear to me that Satoshi understood this relation. I?ve seen no indication of it. However the decision to phase out subsidy, once a sufficient number of units (to assure divisibility) had been issued, is what transitions Bitcoin from a censorable to a censorship resistant money. If one does not believe there is sufficient demand for such a money, there is no way to reconcile that belief with a model of censorship resistance.
>>>> 
>>>> > We should not imbue real technology with magical qualities.
>>>> 
>>>> Precisely. It is economic forces (people), not technology, that provide security.
>>>> 
>>>> e
>>>> 
>>>> >> Bitcoin does not need active economic governanance by devs or meddlers.
>>>> > 
>>>> > Yes, active governance would definitely be an exploitable mechanism. On the
>>>> > other hand, the status quo of the block reward eventually going away entirely
>>>> > is obviously a risky state change too.
>>>> > 
>>>> >>>> There is also zero agreement on how much security would constitute such
>>>> >>> an optimum.
>>>> >>> 
>>>> >>> This is really step 1. We need to generate consensus on this long before
>>>> >>> the block subsidy becomes too small. Probably in the next 10-15 years. I
>>>> >>> wrote a paper
>>>> > 
>>>> > The fact of the matter is that the present amount of security is about 1.7% of
>>>> > the total coin supply/year, and Bitcoin seems to be working fine. 1.7% is also
>>>> > already an amount low enough that it's much smaller than economic volatility.
>>>> > 
>>>> > Obviously 0% is too small.
>>>> > 
>>>> > There's zero reason to stress about finding an "optimal" amount. An amount low
>>>> > enough to be easily affordable, but non-zero, is fine. 1% would be fine; 0.5%
>>>> > would probably be fine; 0.1% would probably be fine.
>>>> > 
>>>> > Over a lifetime - 75 years - 0.5% yearly inflation works out to be a 31% tax on
>>>> > savings; 0.1% works out to be 7.2%
>>>> > 
>>>> > These are all amounts that are likely to be dwarfed by economic shifts.
>>>> > 
>>>> > -- 
>>>> > https://petertodd.org 'peter'[:-1]@petertodd.org
>>>> > _______________________________________________
>>>> > bitcoin-dev mailing list
>>>> > bitcoin-dev at lists.linuxfoundation.org
>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>> _______________________________________________
>>>> bitcoin-dev mailing list
>>>> bitcoin-dev at lists.linuxfoundation.org
>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/c29f72fb/attachment-0001.html>

From bram at chia.net  Fri Jul  8 01:47:33 2022
From: bram at chia.net (Bram Cohen)
Date: Thu, 7 Jul 2022 18:47:33 -0700
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAF90AvmOSa+V7+z16MXyJRCVh_iEceFp_CkbC_4jWixi4W5BbQ@mail.gmail.com>
References: <0dc0e945-9e12-43ad-bd12-fcc0e18e4013@www.fastmail.com>
 <CAHUJnBAL-qPoGZ8XZS3jZiPaqMOt4Kg2ioM_jfCF3fDB3-ej9A@mail.gmail.com>
 <CAF90AvmOSa+V7+z16MXyJRCVh_iEceFp_CkbC_4jWixi4W5BbQ@mail.gmail.com>
Message-ID: <CAHUJnBCHZ7+6B83xDOaSc+EEpVe2x4VzmZUTQ3Z7FhmtMQFbjA@mail.gmail.com>

Part of the rules of my challenge is that the 'new' words need to be in the
same pool as the 'old' words, so any ordering is okay. Without that
requirement it's mathematically very straightforward.

On Thu, Jul 7, 2022 at 10:52 AM Pavol Rusnak <stick at satoshilabs.com> wrote:

> There is. Just encode the index of permutation used to scramble the
> otherwise sorted list. For 12 words you need to store 12! = ~32 bits so 3
> words should be enough.
>
> Repetitions make this more difficult, though.
>
> On Thu 7. 7. 2022 at 19:41, Bram Cohen via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Thu, Jul 7, 2022 at 7:43 AM Anton Shevchenko via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> I made a python implementation for a different mnemonic encoding. The
>>> encoding requires user to remember words but not the order of those words.
>>> The code is open (MIT license) at https://github.com/sancoder/noomnem
>>
>>
>> Thanks Anton. There's an interesting mathematical question of whether
>> it's possible to make a code like this which always uses the BIP-39 words
>> for the same key as part of its encoding, basically adding a few words as
>> error correction in case the order is lost or confused. If the BIP-39
>> contains a duplicate you can add an extra word.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> --
> Best Regards / S pozdravom,
>
> Pavol "stick" Rusnak
> Co-Founder, SatoshiLabs
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/72c4a5e7/attachment.html>

From eric at voskuil.org  Fri Jul  8 02:19:43 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Thu, 7 Jul 2022 19:19:43 -0700
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAHUJnBCHZ7+6B83xDOaSc+EEpVe2x4VzmZUTQ3Z7FhmtMQFbjA@mail.gmail.com>
References: <CAHUJnBCHZ7+6B83xDOaSc+EEpVe2x4VzmZUTQ3Z7FhmtMQFbjA@mail.gmail.com>
Message-ID: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>

Without a performance requirement there is no reason you can?t store the BIP39 words in any order you want. So it?s certainly possible, just brute force the recovery. If you have less than a second vs. a few days then it?s a different question.

e

> On Jul 7, 2022, at 18:48, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> ?
> Part of the rules of my challenge is that the 'new' words need to be in the same pool as the 'old' words, so any ordering is okay. Without that requirement it's mathematically very straightforward.
> 
>> On Thu, Jul 7, 2022 at 10:52 AM Pavol Rusnak <stick at satoshilabs.com> wrote:
>> There is. Just encode the index of permutation used to scramble the otherwise sorted list. For 12 words you need to store 12! = ~32 bits so 3 words should be enough. 
>> 
>> Repetitions make this more difficult, though. 
>> 
>>> On Thu 7. 7. 2022 at 19:41, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>> On Thu, Jul 7, 2022 at 7:43 AM Anton Shevchenko via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> 
>>>> I made a python implementation for a different mnemonic encoding. The encoding requires user to remember words but not the order of those words.
>>>> The code is open (MIT license) at https://github.com/sancoder/noomnem
>>> 
>>> Thanks Anton. There's an interesting mathematical question of whether it's possible to make a code like this which always uses the BIP-39 words for the same key as part of its encoding, basically adding a few words as error correction in case the order is lost or confused. If the BIP-39 contains a duplicate you can add an extra word.
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> -- 
>> Best Regards / S pozdravom,
>> 
>> Pavol "stick" Rusnak
>> Co-Founder, SatoshiLabs
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220707/5485b726/attachment.html>

From vjudeu at gazeta.pl  Fri Jul  8 04:35:16 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Fri, 08 Jul 2022 06:35:16 +0200
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
Message-ID: <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>

Isn't it enough to just generate a seed in the same way as today, then sort the words alphabetically, and then use that as a seed? I know, the last word is a checksum, but there are only 2048 words, so it is not a big deal to get any checksum we want. If that is insecure, because of lower possible combinations, then it is always possible to increase the number of words to compensate that.


On 2022-07-08 04:27:21 user Eric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:


Without a performance requirement there is no reason you can?t store the BIP39 words in any order you want. So it?s certainly possible, just brute force the recovery. If you have less than a second vs. a few days then it?s a different question.


e


On Jul 7, 2022, at 18:48, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
Part of the rules of my challenge is that the 'new' words need to be in the same pool as the 'old' words, so any ordering is okay. Without that requirement it's mathematically very straightforward.


On Thu, Jul 7, 2022 at 10:52 AM Pavol Rusnak <stick at satoshilabs.com> wrote:
There is. Just encode the index of permutation used to scramble the otherwise sorted list. For 12 words you need to store 12! = ~32 bits so 3 words should be enough.?


Repetitions make this more difficult, though.?


On Thu 7. 7. 2022 at 19:41, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
On Thu, Jul 7, 2022 at 7:43 AM Anton Shevchenko via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
I made a python implementation for a different mnemonic encoding. The encoding requires user to remember words but not the order of those words.
The code is open (MIT license) at https://github.com/sancoder/noomnem



Thanks Anton. There's an interesting mathematical question of whether it's possible to make a code like this which always uses the BIP-39 words for the same key as part of its encoding, basically adding a few words as error correction in case the order is lost or confused. If the BIP-39 contains a duplicate you can add an extra word.
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From vjudeu at gazeta.pl  Fri Jul  8 04:59:30 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Fri, 08 Jul 2022 06:59:30 +0200
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <96371DBA-F484-4538-9E12-9D6AB90AF22C@voskuil.org>
Message-ID: <164031557-1b12d278fcfb3b555675e972f034e87d@pmq7v.m5r2.onet>

> Simply fork off an inflation coin and test your theory. I mean, that?s the only way it can happen anyway.

That would be an altcoin. But it can be done in a simpler way: we have 21 million coins. It doesn't matter if it is 21 million, if it is 100 million, or if it is in some normalized range from 0 to 1, where you can always know, what fraction of the total supply you have. So, if the total supply is constant, then it is all about proportions. And that means, you can create some system on top of Bitcoin, that would move coins from users to miners. It is all about that: if all coins are mined, then they can move only if users will move them. So if you want to change that, it is all about encouraging them to put their coins in some evil Lightning channel, when they will lose their coins over time. That's how inflation works.

So, imagine some evil channel, where you can put for example 0.01 BTC, and have a time-based fee, so you will pay 1000 satoshis per day. Guess what: 1000 days, and your coins are gone! That means, if anyone want to test inflation, it is possible right here and right now. Good luck to convince people to use your inflationary system in a non-obfuscated way, because that's how it truly looks like: if you double coin supply, you can reach the same by halving all amounts.


On 2022-07-08 02:29:20 user Eric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:


Value is subjective, though a constraint of 1tx per 10 minutes seems unlikey to create a fee of 5000x that of 5000tx. This is of course why I stated my assumption. Yet this simple example should make clear that at some point a reduction in confirmation rate reduces reward. Otherwise a rate of zero implies infinite reward.?


You cannot support the blanket statement (and absent any assumption) that lower confirmation rates produce ?much higher fees? or ?better security?.


What you call a ?bidding war? is merely market pricing, as it occurs with any good. People *always* will pay as much as they will pay. This is tautological. What you cannot say is how much more someone will pay at any given time for any given good, until they have done it. And I?m pretty sure Bitcoin hasn?t done it.


You cannot prove what the price of anything will be, nor can any ?papers?. The absurdity of S2F should have clearly demonstrated that by now. Value is an individual human preference.


If everyone pays 1 sat, then either miners are profitable at 1 sat, or these people are not getting confirmed (economic rationality always assumed).


The assumption of 1 sat txs filling blocks is based on a disproportionately high subsidy. A subsidy of 50btc would imply somewhere in the neighborhood of $200 per tx in fees today, and as $680. As that falls, fees will continue to keep miners at the same profit level. If demand does not rise to compensate (as it always has) then hash rate will fall.


Propping up hash rate with subsidy will not be ?inflationary?, as Bitcoin is a market money. Like gold it is produced at market cost. Yet it will prevent Bitcoin from achieving any meaningful level of censorship resistance. This of course should make people look closely at such arguments.


Of course, once you have a censor, block space gets really small for those who want to resist the censor. Then of course only fees can offset the censorship. Without fee-based tx confirmation (for anonymity), and/or with a disproportionate subsidy going to the censor, a censor can operate profitably and indefinitely (under the assumption of constant demand). There is no reason to assume demand for censored txs wouldn?t even increase, given the white market blessing which so many seem to want.


But there is of course no real issue here. Simply fork off an inflation coin and test your theory. I mean, that?s the only way it can happen anyway.


e


On Jul 7, 2022, at 14:11, Erik Aronesty <erik at q32.com> wrote:



The relationship between block size and fees is not remotely linear.? ?In a restricted environment, the fee rewards are much higher.


**the ones moving?more sats will win the top spots and will pay as much as is reasonable**


Smaller blocks produce better security for the network both in validation, and in fees.


Without?a bidding war for space, everyone can post 1 SAT/byte


With a bidding war for space, larger transactions will pay much higher rates.? ?There have been a number of papers written on this but you can concoct a trivial example to prove it.




On Thu, Jul 7, 2022 at 3:58 PM Eric Voskuil <eric at voskuil.org> wrote:



It?s not clear how reducing block size changes the fee aspect of the block reward. Assuming?half the space implies twice the fee per avg tx the reward remains constant.


Any additional cost of processing more or less bytes would not matter, because of course this is just a cost that gets nulled out by difficulty ? average profit (net income) is the cost of capital.


The reason for smaller vs. larger blocks is to ensure that individuals can afford to validate. That?s a threshold criteria.


Given unlimited size blocks, miners would still have to fix a point in time to mine, gathering as much fee as they can optimize in some time period presumably less than 10 minutes. The produces a limit to transaction volume, yet neither reward nor profit would be affected given the above assumptions. The difference would be in a tradeoff of per tx fee against the threshold.


Given Moore?s Law, that threshold is constantly decreasing, which will make it ?cheaper over time for more individuals to validate. But the difference for miners for smaller blocks is largely inconsequential relative to their other costs.


Increasing demand is the only thing that increases double spend security (and censorship resistance assuming fee-based reward). With rising demand there is rising overall hash rate, despite block reward and profit remaining constant. This makes the cost of attempting to orphan a block higher, therefore lowering the depth/time requirement implied to secure a given tx amount.


These are the two factors, demand and time. Less demand implies more time to secure a given amount against double spend, and also implies a lower cost to subsidize a censorship regime. But the latter requires a differential in reward between the censor and non-censoring miners. While this could be paid in side fees, that is a significant anonymity issue.


e


On Jul 7, 2022, at 10:37, Erik Aronesty <erik at q32.com> wrote:



> > We should not imbue real technology with magical qualities.


> Precisely. It is economic forces (people), not technology, that provide security.



Yes, and these forces don't prevent double-spend / 51% attacks if the amounts involved are greater than the incentives.


In addition to "utility", lowering the block size could help prevent this issue as well... increasing fee pressure and double-spend security while reducing the burden on node operators.


Changes to inflation are, very likely, off the table.






On Thu, Jul 7, 2022 at 12:24 PM Eric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:



> On Jul 7, 2022, at 07:13, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via bitcoin-dev wrote:
>> Billy,
>>
>> Proof of work and the difficulty adjustment function solve literally
>> everything you are talking about already.
>
> Unfortunately you are quite wrong: the difficulty adjustment function merely
> adjusts for changes in the amount of observable, non-51%-attacking, hashing
> power. In the event of a chain split, the difficulty adjustment function does
> nothing; against a 51% attacker, the difficulty adjustment does nothing;
> against a censor, the difficulty adjustment does nothing.

Consider falling hash rate due to a perpetual 51% attack. Difficulty falls, possibly to min difficulty if all non-censors stop mining and with all censors collaborating (one miner). Yet as difficulty falls, so does the cost of countering the censor. At min difficulty everyone can CPU mine again.

Given the presumption that fees rise on unconfirmed transactions, there is inherent economic incentive to countering at any level of difficulty. Consequently the censor is compelled to subsidize the loss resulting from forgoing higher fee transactions that are incentivizing its competition.

With falling difficulty this incentive is compounded.

Comparisons of security in different scenarios presume a consistent level of demand. If that demand is insufficient to offset the censor?s subsidy, there is no security in any scenario.

Given that the block subsidy (inflation) is paid equally to censoring and non-censoring miners, it offers no security against censorship whatsoever. Trading fee-based block reward for inflation-based is simply trading censorship resistance for the presumption of double-spend security. But of course, a censor can double spend profitably in any scenario where the double spend value (to the censor) exceeds that of blocks orphaned (as the censor earns 100% of all block rewards).

Banks and state monies offer reasonable double spend security. Not sure that?s a trade worth making.

It?s not clear to me that Satoshi understood this relation. I?ve seen no indication of it. However the decision to phase out subsidy, once a sufficient number of units (to assure divisibility) had been issued, is what transitions Bitcoin from a censorable to a censorship resistant money. If one does not believe there is sufficient demand for such a money, there is no way to reconcile that belief with a model of censorship resistance.

> We should not imbue real technology with magical qualities.

Precisely. It is economic forces (people), not technology, that provide security.

e

>> Bitcoin does not need active economic governanance by devs or meddlers.
>
> Yes, active governance would definitely be an exploitable mechanism. On the
> other hand, the status quo of the block reward eventually going away entirely
> is obviously a risky state change too.
>
>>>> There is also zero agreement on how much security would constitute such
>>> an optimum.
>>>
>>> This is really step 1. We need to generate consensus on this long before
>>> the block subsidy becomes too small. Probably in the next 10-15 years. I
>>> wrote a paper
>
> The fact of the matter is that the present amount of security is about 1.7% of
> the total coin supply/year, and Bitcoin seems to be working fine. 1.7% is also
> already an amount low enough that it's much smaller than economic volatility.
>
> Obviously 0% is too small.
>
> There's zero reason to stress about finding an "optimal" amount. An amount low
> enough to be easily affordable, but non-zero, is fine. 1% would be fine; 0.5%
> would probably be fine; 0.1% would probably be fine.
>
> Over a lifetime - 75 years - 0.5% yearly inflation works out to be a 31% tax on
> savings; 0.1% works out to be 7.2%
>
> These are all amounts that are likely to be dwarfed by economic shifts.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From billy.tetrud at gmail.com  Fri Jul  8 05:03:40 2022
From: billy.tetrud at gmail.com (Billy Tetrud)
Date: Fri, 8 Jul 2022 00:03:40 -0500
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CABrXkXrRX5Zd01ikWOcmxEwXdw4k10WfspOhOu8xKi_JU23Q0A@mail.gmail.com>
References: <CAK_HAC97sfvtkfs=yTt8Z0pi5ZF91n7OcZbu7k4XhdnMJ_PYnA@mail.gmail.com>
 <139633828-26b5fcbad80d1ca7046479237716ace3@pmq8v.m5r2.onet>
 <CABrXkXrRX5Zd01ikWOcmxEwXdw4k10WfspOhOu8xKi_JU23Q0A@mail.gmail.com>
Message-ID: <CAGpPWDZqB6323_FUsAGCq1rNw5SuY3Re3qhsjAjea3vaYLQ-cA@mail.gmail.com>

@vjudeu
> better to allow transaction joining.. to make fees more smoothly

I'm not familiar with RSK transaction joining. However, I don't think this
addresses the issues Corey brought up - which is that the
appropriate amount of security (ie miner revenue) isn't linked with any
bitcoin market behavior. It sounds like you're suggesting something that
could smooth out the fee market and potentially lower fees, however it
doesn't sound like a mechanism that could be used to target a particular
security level.

>  I think the market should adjust fees, and finding the right balance
between on-chain and off-chain should be left to the users, just by
providing them options like transaction joining

The market has an incentive to minimize fees. So I don't see how this would
be sufficient if it ends up that miner revenue from fees is too low.

@Erik
> I think perhaps you're  underestimating the degree to which utility can
be added to the main chain to encourage fees.

It seems you've misinterpreted me to be saying that fees will be too low. I
have no idea if fees will be too low or not. And you might be right that
fees are likely to remain high enough. However, fees might also remain *too
high* which itself could be a problem. As I noted above, since market
forces all incentivize driving fees down, what do we do if that force
drives it below a sufficient level? How will we know when that happens
until we know what the sufficient level of security is (eg in terms of
total miner revenue).

@Guiseppe
> If it only takes a few million dollars to attack BTC and make it
completely unusable for one day

It would take much more than a few million to 51% attack bitcoin. Bitcoin's
blockchain security is primarily based on the capital cost of buying up a
massive amount of hashpower. The ongoing maintenance and electricity costs
of mining are actually not very relevant to security because all those
ongoing costs are directly offset by mining revenues. Its the upfront costs
that serve as the primary barrier an attacker must surpass. Acquiring the
mining hardware, finding places where energy costs are low enough, setting
up the equipment, etc. To do that costs billions of dollars, not millions.


On Thu, Jul 7, 2022 at 9:44 AM Giuseppe B via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> It's the first time I read about the security budget and it definitely
> sounds scary to me.
> If it only takes a few million dollars to attack BTC and make it
> completely unusable for one day, I suppose it's only a matter of time
> before some hedge fund actually does it, using a short position to profit
> from the huge panic sell wave and global loss of confidence that would
> result from it.
> It seems even cheaper to do than the recent attack to Terra, unless I'm
> missing something.
>
>
> On Wed, Jul 6, 2022, 1:10 PM <vjudeu at gazeta.pl> wrote:
>
>> > If the only realistic (fair, efficient & proportionate) way to pay for
>> Bitcoin's security was by having some inflation scheme that violated the 21
>> million cap, then agreeing to break the limit would probably be what makes
>> sense, and in the economic interest of its users and holders.
>>
>> So, Paul Sztorc was right again, there are three options: Enormous Block
>> Size Increases, Violate 21M Coin Limit, or >50% Miner Fee-Revenues Come
>> From Merged Mining: https://www.truthcoin.info/images/sb-trilemma.png.
>> And I think using Merged Mining is the best option. More about that:
>> https://www.truthcoin.info/blog/security-budget-ii-mm/
>>
>> > Another option, if we were to decide we are over-secured in the short
>> term, would be to soft-fork in a reduction in the current and near-future
>> mining rewards, by somehow locking the coins in a contract that deprived
>> the miner of the full reward, and then using that contract to pay the
>> rewards out far in the future, should at some point we feel the security
>> budget was insufficient.
>>
>> Yes, that's also possible, RSK uses that. And making some kind of
>> soft-fork for that is also possible, but I don't know if miners will agree
>> to send some coinbase reward to "<futureBlockNumber> OP_CHECKLOCKTIMEVERIFY
>> OP_DROP OP_TRUE".
>>
>> On 2022-07-06 06:29:18 user Corey Haddad via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >Bitcoin's finite supply is the main argument for people investing in it,
>> the whole narrative around bitcoin is based on its finite supply. While it
>> has its flaws and basically condemns bitcoin to be only used as a store >of
>> value (and not as a currency), I don't think it's worth questioning it at
>> this point.
>> >
>> >Just my 2 sats.
>> >
>> >Giuseppe.
>>
>>
>> A finite supply alone is not enough to give something value, as it must
>> also be useful in some way. In the case of Bitcoin, various forms of
>> cryptographic security must all work - and work together - to make Bitcoin
>> useful. If the only realistic (fair, efficient & proportionate) way to pay
>> for Bitcoin's security was by having some inflation scheme that violated
>> the 21 million cap, then agreeing to break the limit would probably be what
>> makes sense, and in the economic interest of its users and holders.
>>
>> There will always be competitive pressures with respect to efficiency,
>> and both being over-secured and under-secured would be economically
>> inefficient for a crypto currency, and thereby laving room for a more
>> optimally-secured competitor to gain ground. Currently there is zero
>> feedback in the Bitcoin system between what we might think is the optimum
>> amount of security and what actually exists. There is also zero agreement
>> on how much security would constitute such an optimum. Figuring out how
>> much security is needed, or even better, figuring out a way to have a
>> market mechanism to answer that question, will be an important project.
>>
>> Another option, if we were to decide we are over-secured in the short
>> term, would be to soft-fork in a reduction in the current and near-future
>> mining rewards, by somehow locking the coins in a contract that deprived
>> the miner of the full reward, and then using that contract to pay the
>> rewards out far in the future, should at some point we feel the security
>> budget was insufficient. Anthony Towns presented a form of this concept in
>> greater detail at a Scaling Bitcoin conference some years ago. While this
>> solution, if employed, would only work for some finite amount of time, it
>> is possible that could give additional decades before the accumulated
>> security budget was exhausted.
>>
>>
>> Corey
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220708/fd7b41a1/attachment-0001.html>

From john at synonym.to  Fri Jul  8 07:26:06 2022
From: john at synonym.to (John Carvalho)
Date: Fri, 8 Jul 2022 08:26:06 +0100
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <164031557-1b12d278fcfb3b555675e972f034e87d@pmq7v.m5r2.onet>
References: <96371DBA-F484-4538-9E12-9D6AB90AF22C@voskuil.org>
 <164031557-1b12d278fcfb3b555675e972f034e87d@pmq7v.m5r2.onet>
Message-ID: <CAHTn92wOw9GwmN3XxwPOc=V=KMN6aX2v4tq662Uu=mQdxjpAcw@mail.gmail.com>

vjudeu at gazeta.pl, what you describe is not possible without a hard fork,
just like Eric said. There is no atomic way to move Bitcoin off of Bitcoin.

You can use Bitcoin txns, or you can use trust/custody, or you can make a
shitcoin. There is no way to actually divide or transfer sats to another
network.

This talk of inflation is absurd and forced and ignores all understanding
of Bitcoin and economic primitives. You would all do better to listen to
Eric and appreciate him taking the time to elaborate.

In the end, I will reiterate. Proof of work and the difficulty adjustment
scheme already solve all of these issues. When blockspace demand increases,
fees increase, more miners mine, security goes up. Thus any theoretical
supply increase would have the opposite effect.

All of these arguments for inflation amount to "That restaurant is too
popular, nobody goes there anymore." If people are using Bitcoin, miners
will mine. If all Bitcoin users are hodling only, then demand is gone, and
miners will leave. It is elegant.

Stop trying to fix Bitcoin, it isn't broken.

--
John Carvalho
CEO, Synonym.to <http://synonym.to/>


On Fri, Jul 8, 2022 at 5:59 AM <vjudeu at gazeta.pl> wrote:

> > Simply fork off an inflation coin and test your theory. I mean, that?s
> the only way it can happen anyway.
>
> That would be an altcoin. But it can be done in a simpler way: we have 21
> million coins. It doesn't matter if it is 21 million, if it is 100 million,
> or if it is in some normalized range from 0 to 1, where you can always
> know, what fraction of the total supply you have. So, if the total supply
> is constant, then it is all about proportions. And that means, you can
> create some system on top of Bitcoin, that would move coins from users to
> miners. It is all about that: if all coins are mined, then they can move
> only if users will move them. So if you want to change that, it is all
> about encouraging them to put their coins in some evil Lightning channel,
> when they will lose their coins over time. That's how inflation works.
>
> So, imagine some evil channel, where you can put for example 0.01 BTC, and
> have a time-based fee, so you will pay 1000 satoshis per day. Guess what:
> 1000 days, and your coins are gone! That means, if anyone want to test
> inflation, it is possible right here and right now. Good luck to convince
> people to use your inflationary system in a non-obfuscated way, because
> that's how it truly looks like: if you double coin supply, you can reach
> the same by halving all amounts.
>
>
> On 2022-07-08 02:29:20 user Eric Voskuil via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
> Value is subjective, though a constraint of 1tx per 10 minutes seems
> unlikey to create a fee of 5000x that of 5000tx. This is of course why I
> stated my assumption. Yet this simple example should make clear that at
> some point a reduction in confirmation rate reduces reward. Otherwise a
> rate of zero implies infinite reward.
>
>
> You cannot support the blanket statement (and absent any assumption) that
> lower confirmation rates produce ?much higher fees? or ?better security?.
>
>
> What you call a ?bidding war? is merely market pricing, as it occurs with
> any good. People *always* will pay as much as they will pay. This is
> tautological. What you cannot say is how much more someone will pay at any
> given time for any given good, until they have done it. And I?m pretty sure
> Bitcoin hasn?t done it.
>
>
> You cannot prove what the price of anything will be, nor can any ?papers?.
> The absurdity of S2F should have clearly demonstrated that by now. Value is
> an individual human preference.
>
>
> If everyone pays 1 sat, then either miners are profitable at 1 sat, or
> these people are not getting confirmed (economic rationality always
> assumed).
>
>
> The assumption of 1 sat txs filling blocks is based on a
> disproportionately high subsidy. A subsidy of 50btc would imply somewhere
> in the neighborhood of $200 per tx in fees today, and as $680. As that
> falls, fees will continue to keep miners at the same profit level. If
> demand does not rise to compensate (as it always has) then hash rate will
> fall.
>
>
> Propping up hash rate with subsidy will not be ?inflationary?, as Bitcoin
> is a market money. Like gold it is produced at market cost. Yet it will
> prevent Bitcoin from achieving any meaningful level of censorship
> resistance. This of course should make people look closely at such
> arguments.
>
>
> Of course, once you have a censor, block space gets really small for those
> who want to resist the censor. Then of course only fees can offset the
> censorship. Without fee-based tx confirmation (for anonymity), and/or with
> a disproportionate subsidy going to the censor, a censor can operate
> profitably and indefinitely (under the assumption of constant demand).
> There is no reason to assume demand for censored txs wouldn?t even
> increase, given the white market blessing which so many seem to want.
>
>
> But there is of course no real issue here. Simply fork off an inflation
> coin and test your theory. I mean, that?s the only way it can happen anyway.
>
>
> e
>
>
> On Jul 7, 2022, at 14:11, Erik Aronesty <erik at q32.com> wrote:
>
>
>
> The relationship between block size and fees is not remotely linear.   In
> a restricted environment, the fee rewards are much higher.
>
>
> **the ones moving more sats will win the top spots and will pay as much as
> is reasonable**
>
>
> Smaller blocks produce better security for the network both in validation,
> and in fees.
>
>
> Without a bidding war for space, everyone can post 1 SAT/byte
>
>
> With a bidding war for space, larger transactions will pay much higher
> rates.   There have been a number of papers written on this but you can
> concoct a trivial example to prove it.
>
>
>
>
> On Thu, Jul 7, 2022 at 3:58 PM Eric Voskuil <eric at voskuil.org> wrote:
>
>
>
> It?s not clear how reducing block size changes the fee aspect of the block
> reward. Assuming half the space implies twice the fee per avg tx the reward
> remains constant.
>
>
> Any additional cost of processing more or less bytes would not matter,
> because of course this is just a cost that gets nulled out by difficulty ?
> average profit (net income) is the cost of capital.
>
>
> The reason for smaller vs. larger blocks is to ensure that individuals can
> afford to validate. That?s a threshold criteria.
>
>
> Given unlimited size blocks, miners would still have to fix a point in
> time to mine, gathering as much fee as they can optimize in some time
> period presumably less than 10 minutes. The produces a limit to transaction
> volume, yet neither reward nor profit would be affected given the above
> assumptions. The difference would be in a tradeoff of per tx fee against
> the threshold.
>
>
> Given Moore?s Law, that threshold is constantly decreasing, which will
> make it  cheaper over time for more individuals to validate. But the
> difference for miners for smaller blocks is largely inconsequential
> relative to their other costs.
>
>
> Increasing demand is the only thing that increases double spend security
> (and censorship resistance assuming fee-based reward). With rising demand
> there is rising overall hash rate, despite block reward and profit
> remaining constant. This makes the cost of attempting to orphan a block
> higher, therefore lowering the depth/time requirement implied to secure a
> given tx amount.
>
>
> These are the two factors, demand and time. Less demand implies more time
> to secure a given amount against double spend, and also implies a lower
> cost to subsidize a censorship regime. But the latter requires a
> differential in reward between the censor and non-censoring miners. While
> this could be paid in side fees, that is a significant anonymity issue.
>
>
> e
>
>
> On Jul 7, 2022, at 10:37, Erik Aronesty <erik at q32.com> wrote:
>
>
>
> > > We should not imbue real technology with magical qualities.
>
>
> > Precisely. It is economic forces (people), not technology, that provide
> security.
>
>
>
> Yes, and these forces don't prevent double-spend / 51% attacks if the
> amounts involved are greater than the incentives.
>
>
> In addition to "utility", lowering the block size could help prevent this
> issue as well... increasing fee pressure and double-spend security while
> reducing the burden on node operators.
>
>
> Changes to inflation are, very likely, off the table.
>
>
>
>
>
>
> On Thu, Jul 7, 2022 at 12:24 PM Eric Voskuil via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
>
> > On Jul 7, 2022, at 07:13, Peter Todd via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > On Thu, Jul 07, 2022 at 02:24:39PM +0100, John Carvalho via bitcoin-dev
> wrote:
> >> Billy,
> >>
> >> Proof of work and the difficulty adjustment function solve literally
> >> everything you are talking about already.
> >
> > Unfortunately you are quite wrong: the difficulty adjustment function
> merely
> > adjusts for changes in the amount of observable, non-51%-attacking,
> hashing
> > power. In the event of a chain split, the difficulty adjustment function
> does
> > nothing; against a 51% attacker, the difficulty adjustment does nothing;
> > against a censor, the difficulty adjustment does nothing.
>
> Consider falling hash rate due to a perpetual 51% attack. Difficulty
> falls, possibly to min difficulty if all non-censors stop mining and with
> all censors collaborating (one miner). Yet as difficulty falls, so does the
> cost of countering the censor. At min difficulty everyone can CPU mine
> again.
>
> Given the presumption that fees rise on unconfirmed transactions, there is
> inherent economic incentive to countering at any level of difficulty.
> Consequently the censor is compelled to subsidize the loss resulting from
> forgoing higher fee transactions that are incentivizing its competition.
>
> With falling difficulty this incentive is compounded.
>
> Comparisons of security in different scenarios presume a consistent level
> of demand. If that demand is insufficient to offset the censor?s subsidy,
> there is no security in any scenario.
>
> Given that the block subsidy (inflation) is paid equally to censoring and
> non-censoring miners, it offers no security against censorship whatsoever.
> Trading fee-based block reward for inflation-based is simply trading
> censorship resistance for the presumption of double-spend security. But of
> course, a censor can double spend profitably in any scenario where the
> double spend value (to the censor) exceeds that of blocks orphaned (as the
> censor earns 100% of all block rewards).
>
> Banks and state monies offer reasonable double spend security. Not sure
> that?s a trade worth making.
>
> It?s not clear to me that Satoshi understood this relation. I?ve seen no
> indication of it. However the decision to phase out subsidy, once a
> sufficient number of units (to assure divisibility) had been issued, is
> what transitions Bitcoin from a censorable to a censorship resistant money.
> If one does not believe there is sufficient demand for such a money, there
> is no way to reconcile that belief with a model of censorship resistance.
>
> > We should not imbue real technology with magical qualities.
>
> Precisely. It is economic forces (people), not technology, that provide
> security.
>
> e
>
> >> Bitcoin does not need active economic governanance by devs or meddlers.
> >
> > Yes, active governance would definitely be an exploitable mechanism. On
> the
> > other hand, the status quo of the block reward eventually going away
> entirely
> > is obviously a risky state change too.
> >
> >>>> There is also zero agreement on how much security would constitute
> such
> >>> an optimum.
> >>>
> >>> This is really step 1. We need to generate consensus on this long
> before
> >>> the block subsidy becomes too small. Probably in the next 10-15 years.
> I
> >>> wrote a paper
> >
> > The fact of the matter is that the present amount of security is about
> 1.7% of
> > the total coin supply/year, and Bitcoin seems to be working fine. 1.7%
> is also
> > already an amount low enough that it's much smaller than economic
> volatility.
> >
> > Obviously 0% is too small.
> >
> > There's zero reason to stress about finding an "optimal" amount. An
> amount low
> > enough to be easily affordable, but non-zero, is fine. 1% would be fine;
> 0.5%
> > would probably be fine; 0.1% would probably be fine.
> >
> > Over a lifetime - 75 years - 0.5% yearly inflation works out to be a 31%
> tax on
> > savings; 0.1% works out to be 7.2%
> >
> > These are all amounts that are likely to be dwarfed by economic shifts.
> >
> > --
> > https://petertodd.org 'peter'[:-1]@petertodd.org
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220708/aa305616/attachment-0001.html>

From truthcoin at gmail.com  Fri Jul  8 09:12:06 2022
From: truthcoin at gmail.com (Paul Sztorc)
Date: Fri, 8 Jul 2022 05:12:06 -0400
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
References: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
 <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
Message-ID: <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>

What do you do if the "first" word (of 12), happens to be the last word in
the list alphabetically? So that seems like a dead end.

Since users are never expected to memorize the "whole list" (of 2048 words)
in any case, it seems that the smarter thing to do (if this "order"
criterion is desirable) may have been to just make the whole list 12x
longer and cut it into 12 sections. Each of the 12 slots would have 2048
distinct words. Then the computer would handle the order; the user could
neglect it.

I can guess why people weren't particularly interested in this: words
always have to be written down in some order or another. Even if you write
them down in a 3x4 grid, there are very few combinations needed to guess
the one true ordering. I wonder how obscure the words would have to be, by
the 12th list of 2048? But still it might be fun - the 4th word might
always be a nautical word, the 5th word a farm word, etc. And no one would
confuse it with a bip39 phrase -- in fact since they are just lists of
integers 1 to 2048, it would be pretty easy to make them interoperable.
Very easy but perhaps still not worth doing.

Paul

On Fri, Jul 8, 2022, 4:48 AM vjudeu via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Isn't it enough to just generate a seed in the same way as today, then
> sort the words alphabetically, and then use that as a seed? I know, the
> last word is a checksum, but there are only 2048 words, so it is not a big
> deal to get any checksum we want. If that is insecure, because of lower
> possible combinations, then it is always possible to increase the number of
> words to compensate that.
>
>
> On 2022-07-08 04:27:21 user Eric Voskuil via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
> Without a performance requirement there is no reason you can?t store the
> BIP39 words in any order you want. So it?s certainly possible, just brute
> force the recovery. If you have less than a second vs. a few days then it?s
> a different question.
>
>
> e
>
>
> On Jul 7, 2022, at 18:48, Bram Cohen via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> Part of the rules of my challenge is that the 'new' words need to be in
> the same pool as the 'old' words, so any ordering is okay. Without that
> requirement it's mathematically very straightforward.
>
>
> On Thu, Jul 7, 2022 at 10:52 AM Pavol Rusnak <stick at satoshilabs.com>
> wrote:
> There is. Just encode the index of permutation used to scramble the
> otherwise sorted list. For 12 words you need to store 12! = ~32 bits so 3
> words should be enough.
>
>
> Repetitions make this more difficult, though.
>
>
> On Thu 7. 7. 2022 at 19:41, Bram Cohen via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Thu, Jul 7, 2022 at 7:43 AM Anton Shevchenko via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> I made a python implementation for a different mnemonic encoding. The
> encoding requires user to remember words but not the order of those words.
> The code is open (MIT license) at https://github.com/sancoder/noomnem
>
>
>
> Thanks Anton. There's an interesting mathematical question of whether it's
> possible to make a code like this which always uses the BIP-39 words for
> the same key as part of its encoding, basically adding a few words as error
> correction in case the order is lost or confused. If the BIP-39 contains a
> duplicate you can add an extra word.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220708/d55f7008/attachment.html>

From macwhyte at gmail.com  Fri Jul  8 14:08:54 2022
From: macwhyte at gmail.com (James MacWhyte)
Date: Fri, 8 Jul 2022 16:08:54 +0200
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>
References: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
 <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
 <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>
Message-ID: <CAH+Axy4X+uQG5Vw0Efiz6AtNyK=++h-jDeZL1ZxpVJus8BVKeA@mail.gmail.com>

> What do you do if the "first" word (of 12), happens to be the last word in
> the list alphabetically?
>

That couldn't happen. If one word is the very last from the wordlist, it
would end up at the end of your mnemonic once you rearrange your 12 words
alphabetically.

However!

(@vjudeu) Choosing 11 random words and then sorting them alphabetically
before assigning a checksum would reduce entropy considerably. If you think
about it, to bruteforce the entire keyspace one would only need to come up
with every possible combination of 11 words + 1 checksum. I'm not the best
at napkin math, but I think that leaves you with around 10 trillion
combinations, which would only take a couple months to exhaust with
hardware that can do 1 million guesses per second.

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220708/fa49a159/attachment.html>

From pete at petertodd.org  Fri Jul  8 14:53:13 2022
From: pete at petertodd.org (Peter Todd)
Date: Fri, 8 Jul 2022 10:53:13 -0400
Subject: [bitcoin-dev] Playing with full-rbf peers for fun and L2s
 security
In-Reply-To: <0ikzVrbv3tA2fyv4iW7b_gPJ-qkrJS3x9HzouSqLabK3yHthgigPt9YZhGlr4_nCutAlRREfFSw1JW0k5KhBgSj1aBI2MSDTLqYHGYbqNrg=@protonmail.com>
References: <CALZpt+GOh-7weEypT9JrzcwthZJqHOfj7sf9FMuqi5_FZv0g7w@mail.gmail.com>
 <gmDNbfrrvaZL4akV2DFwCuKrls9SScQjqxeRoEorEiYlv24dPt1j583iOtcB2lFrxZc59N3kp7T9KIM4ycl4QOmGBfDOUmO-BVHsttvtvDc=@protonmail.com>
 <CALZpt+FJ-R9yCoMLP=Vcxk1U7n=-LKHUGctFZj0K-vTMsz==ew@mail.gmail.com>
 <RJEFmrnjbzKQCBr4L7ebwBLzg7QHGXlaE19zj6jfkxL6xjfodgbfssZBQSYxm783Y4X5awuhL9Gj8IaBc4npE2oh3d1xoudKTrSsJ-dk0VQ=@protonmail.com>
 <CALZpt+HXB=xh3qtxJFM7yUzRu1uj-pPtLQmT=5QV0dNfVuTpfQ@mail.gmail.com>
 <Pb8H4PbeS-RaNOKfekOPdY8gQo4_Syd3HoTK26AO872f7tCKyGnty56KtcvmvrXFOJdC7nQgNHoQ37M4MNXQ6vqQ9du6BFbvGLbY3BdYVpY=@protonmail.com>
 <Yrj9N7k8osWsxhY4@petertodd.org>
 <0ikzVrbv3tA2fyv4iW7b_gPJ-qkrJS3x9HzouSqLabK3yHthgigPt9YZhGlr4_nCutAlRREfFSw1JW0k5KhBgSj1aBI2MSDTLqYHGYbqNrg=@protonmail.com>
Message-ID: <YshE2QKBEVnbf+Bg@petertodd.org>

On Tue, Jul 05, 2022 at 08:46:51PM +0000, alicexbt wrote:
> Hi Peter,
> 
> > Note that Wasabi already has a DoS attack vector in that a participant can stop
> > participating after the first phase of the round, with the result that the
> > coinjoin fails. Wasabi mitigates that by punishing participating in future
> > rounds. Double-spends only create additional types of DoS attack that need to
> > be detected and punished as well - they don't create a fundamentally new
> > vulerability.
> 
> I agree some DoS vectors are already mitigated however punishment in this case will be difficult because the transaction is broadcasted after signing and before coinjoin tx broadcast.
> 
> Inputs are already checked multiple times for double spend during coinjoin round: https://github.com/zkSNACKs/WalletWasabi/pull/6460
> 
> If all the inputs in the coinjoin transaction that failed to relay are checked and one or more are found to be spent later, what will be punished and how does this affect the attacker with thousands of UTXOs or normal users?

Point is, the attacker is thousands of UTXOs can also DoS rounds by simply
failing to complete the round. In fact, the double-spend DoS attack requires
more resources, because for a double-spend to be succesful, BTC has to be spent
on fees.

It's just a fact of life that a motivated attacker can DoS attack Wasabi by
spending money. That's a design choice that's serving them well so far.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220708/99636bb4/attachment.sig>

From gsanders87 at gmail.com  Fri Jul  8 15:09:33 2022
From: gsanders87 at gmail.com (Greg Sanders)
Date: Fri, 8 Jul 2022 11:09:33 -0400
Subject: [bitcoin-dev] Playing with full-rbf peers for fun and L2s
	security
In-Reply-To: <YshE2QKBEVnbf+Bg@petertodd.org>
References: <CALZpt+GOh-7weEypT9JrzcwthZJqHOfj7sf9FMuqi5_FZv0g7w@mail.gmail.com>
 <gmDNbfrrvaZL4akV2DFwCuKrls9SScQjqxeRoEorEiYlv24dPt1j583iOtcB2lFrxZc59N3kp7T9KIM4ycl4QOmGBfDOUmO-BVHsttvtvDc=@protonmail.com>
 <CALZpt+FJ-R9yCoMLP=Vcxk1U7n=-LKHUGctFZj0K-vTMsz==ew@mail.gmail.com>
 <RJEFmrnjbzKQCBr4L7ebwBLzg7QHGXlaE19zj6jfkxL6xjfodgbfssZBQSYxm783Y4X5awuhL9Gj8IaBc4npE2oh3d1xoudKTrSsJ-dk0VQ=@protonmail.com>
 <CALZpt+HXB=xh3qtxJFM7yUzRu1uj-pPtLQmT=5QV0dNfVuTpfQ@mail.gmail.com>
 <Pb8H4PbeS-RaNOKfekOPdY8gQo4_Syd3HoTK26AO872f7tCKyGnty56KtcvmvrXFOJdC7nQgNHoQ37M4MNXQ6vqQ9du6BFbvGLbY3BdYVpY=@protonmail.com>
 <Yrj9N7k8osWsxhY4@petertodd.org>
 <0ikzVrbv3tA2fyv4iW7b_gPJ-qkrJS3x9HzouSqLabK3yHthgigPt9YZhGlr4_nCutAlRREfFSw1JW0k5KhBgSj1aBI2MSDTLqYHGYbqNrg=@protonmail.com>
 <YshE2QKBEVnbf+Bg@petertodd.org>
Message-ID: <CAB3F3DtCuEBXo9r+UoS2z8npvVeR0hU-R7ZHcngPNdE6Jr+Zgw@mail.gmail.com>

The attacker isn't guaranteed to spend *any* funds to disrupt the protocol
indefinitely, that's the issue here. In this scenario, her input double
spend is at an impractical feerate, and is never included in a block,
sitting at the bottom of the mempool.

The other users' only practical choice is to double-spend their own input
to get their money back(at competitive rates much higher than the
attacker), or wait and hope you win a propagation race somewhere.



On Fri, Jul 8, 2022 at 10:53 AM Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Tue, Jul 05, 2022 at 08:46:51PM +0000, alicexbt wrote:
> > Hi Peter,
> >
> > > Note that Wasabi already has a DoS attack vector in that a participant
> can stop
> > > participating after the first phase of the round, with the result that
> the
> > > coinjoin fails. Wasabi mitigates that by punishing participating in
> future
> > > rounds. Double-spends only create additional types of DoS attack that
> need to
> > > be detected and punished as well - they don't create a fundamentally
> new
> > > vulerability.
> >
> > I agree some DoS vectors are already mitigated however punishment in
> this case will be difficult because the transaction is broadcasted after
> signing and before coinjoin tx broadcast.
> >
> > Inputs are already checked multiple times for double spend during
> coinjoin round: https://github.com/zkSNACKs/WalletWasabi/pull/6460
> >
> > If all the inputs in the coinjoin transaction that failed to relay are
> checked and one or more are found to be spent later, what will be punished
> and how does this affect the attacker with thousands of UTXOs or normal
> users?
>
> Point is, the attacker is thousands of UTXOs can also DoS rounds by simply
> failing to complete the round. In fact, the double-spend DoS attack
> requires
> more resources, because for a double-spend to be succesful, BTC has to be
> spent
> on fees.
>
> It's just a fact of life that a motivated attacker can DoS attack Wasabi by
> spending money. That's a design choice that's serving them well so far.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220708/14a19b0d/attachment.html>

From erik at q32.com  Fri Jul  8 15:14:39 2022
From: erik at q32.com (Erik Aronesty)
Date: Fri, 8 Jul 2022 11:14:39 -0400
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <96371DBA-F484-4538-9E12-9D6AB90AF22C@voskuil.org>
References: <CAJowKgJGfkdCjWUnUyWZ9rgnWFOVYg=aizBwC2wEbMxohRMvZg@mail.gmail.com>
 <96371DBA-F484-4538-9E12-9D6AB90AF22C@voskuil.org>
Message-ID: <CAJowKgL9D7mC7y5zEaZDN63aVG4Tkxn971vd=W2rBy1GyC9FtA@mail.gmail.com>

On Thu, Jul 7, 2022 at 8:29 PM Eric Voskuil <eric at voskuil.org> wrote:

> Value is subjective, though a constraint of 1tx per 10 minutes seems
> unlikey to create a fee of 5000x that of 5000tx. This is of course why I
> stated my assumption. Yet this simple example should make clear that at
> some point a reduction in confirmation rate reduces reward. Otherwise a
> rate of zero implies infinite reward.
>

Like i said, it's not linear.   So no, a rate of 0 does not imply an
infinite reward.  A number of papers on the Nash equilibrium of mining
rewards and block size have been written.       There are block sizes that
are optimal for fees, and they obviously not zero, where the system
collapses, and they are obviously not infinite... where all bidders pay 1
sat/byte.


>
> You cannot support the blanket statement (and absent any assumption) that
> lower confirmation rates produce ?much higher fees? or ?better security?.
>

You can look at the research and the history of zero-size block impact on
fees and see that this is true.



>
> What you call a ?bidding war? is merely market pricing, as it occurs with
> any good. People *always* will pay as much as they will pay. This is
> tautological. What you cannot say is how much more someone will pay at any
> given time for any given good, until they have done it. And I?m pretty sure
> Bitcoin hasn?t done it.
>

If there is infinite supply, then there is zero value.   Infinite blocks
have lower fees.  This is impossible to argue against.


> You cannot prove what the price of anything will be, nor can any ?papers?.
> The absurdity of S2F should have clearly demonstrated that by now. Value is
> an individual human preference.
>

A trivial example: block sizeof 10, and 10 people want to transact, all can
bid 1 SAT/byte, 2 tx are moving 100 mil sats, the other 8 are moving 10 mil
sats.   Block size of 2.  Now the two transactions moving 100 mil sats will
bid, they can easily pay 400 sats/byte.

You can show, from history, that when block sizes are more constrained, due
to the mining of zero byte blocks, total fees were higher.   People will
always pay for "next confirm" if the cost of that is very reasonable (less
than 0.1%).

>
> If everyone pays 1 sat, then either miners are profitable at 1 sat, or
> these people are not getting confirmed (economic rationality always
> assumed).
>

Yes, and if miners are not profitable at 1 sat, then they will not mine,
and the hash rate will drop.   And this reduces the security of the coin.
 Hashrate is an index of security.

But there is of course no real issue here. Simply fork off an inflation
> coin and test your theory. I mean, that?s the only way it can happen anyway.
>

I would argue inflation is not a good solution.   Instead, being cautious
about block-compressing tech, like mweb, and being more aggressive about
fee-driving tech, makes more sense .
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220708/d70ca037/attachment-0001.html>

From jonasdnick at gmail.com  Fri Jul  8 15:53:06 2022
From: jonasdnick at gmail.com (Jonas Nick)
Date: Fri, 8 Jul 2022 15:53:06 +0000
Subject: [bitcoin-dev] BIP draft: Half-Aggregation of BIP-340 Signatures
Message-ID: <33f275c2-06b1-4b4a-2a75-cafe36836503@gmail.com>

Half-aggregation has been mentioned several times on this list in various
contexts. To have a solid basis for discussing applications of half-aggregation,
I think it's helpful to have a concrete specification of the scheme and a place
for collecting supplemental information like references to cryptographic
security proofs. You can find the BIP draft at

https://github.com/ElementsProject/cross-input-aggregation/blob/master/half-aggregation.mediawiki

Similar to BIP-340, this BIP draft specifies only the cryptographic scheme and
does not prescribe specific applications. It has not received an extensive
security review yet. Thanks to Elliott Jin and Tim Ruffing for the review so
far. One new feature that the specified scheme has is "incremental aggregation"
which allows aggregating additional BIP-340 signatures into an existing
half-aggregate signature.

While BIP-340 has a pseudocode specification and a reference implementation in
python, this BIP draft has a formal specification written in hacspec [0] and
auxiliary pseudocode. The formal specification is a mathematically precise
description of the scheme, which paves the way for computer-aided formal proofs.
Software tools ("proof assistants") allow proving properties about the formal
specification ("no integer overflow") and apply formal software verification
("implementation is behaviorally equivalent to the spec"). I don't have concrete
plans (nor the skillset) to use these techniques. Still, I think this is an
exciting area to explore because it has the potential to increase the Bitcoin
ecosystem's robustness significantly and has little downside. Since hacspec's
syntax is a subset of Rust's syntax, one can use the standard rust toolchain to
compile, execute and test the specification.

You can find a blog post that gives a broader context at
https://blog.blockstream.com/half-aggregation-of-bip-340-signatures/

[0] https://github.com/hacspec/hacspec

From crypto at timruffing.de  Fri Jul  8 19:52:12 2022
From: crypto at timruffing.de (Tim Ruffing)
Date: Fri, 08 Jul 2022 21:52:12 +0200
Subject: [bitcoin-dev] TAPLEAF_UPDATE_VERIFY covenant opcode
In-Reply-To: <20210909065330.GB22496@erisian.com.au>
References: <20210909064138.GA22496@erisian.com.au>
 <20210909065330.GB22496@erisian.com.au>
Message-ID: <b0fa72d03b9eb9341e85b0003e807f64abe1bb95.camel@timruffing.de>

Hi aj,

I think there's another workaround for the x-only issue with
TAPLEAF_UPDATE_VERIFY.

So the opcode will need a function f that ensures that the new internal
key f(P'), where P' = P + X, has even y. You describe what happens for
the canonical choice of
f(P') = if has_even_y(P') then P' else -P'.

This leads to issues because negation turns around the signs of A and B
if say P' = A + B. Or more generally, negation is multiplicative
tweaking with a tweak -1, and that changes the coefficients of A und B.

But what if we use additive tweaking, which won't change the
coefficients? For example, you could try adding the generator until you
hit an even point, i.e., 
f(P') = if has_even_y(P') then P' else f(P' + G).

Then you may get a chain like
 * Pabc = A + B + C
 * Pab ?= A + B ? ? ?+ 2G
* Pa = A + 2G + 1G = A + 3G

Pool members will simply need to track the accumulated tweak t and take
the tweak into account when signing. For example, A and B would sign
with t = 2 and A alone would sign with t = 3. 

This choice of f will succeed after 1 addition on average. (I don't
know if this can be proven but even if not, experiments show that it's
true and that's good enough.) So the actual running time is
probabilistic. I don't think that's an issue but if it is an issue,
other choices of f are possible, e.g., let the spender provide the
tweak t explicitly and set
f(P',t) = if 0 <= t < 128 and has_even_y(P'+tG) then P'+tG else fail.

This workaround is not exactly elegant either but it may be better than
the other suggestions.

Best,
Tim

On Thu, 2021-09-09 at 16:53 +1000, Anthony Towns via bitcoin-dev wrote:
> Moving on to the pooled scheme and actually updating the internal
> pubkey
> is, unfortunately, where things start to come apart. In particular,
> since taproot uses 32-byte x-only pubkeys (with implicit even-y) for
> the
> scriptPubKey and the internal public key, we have to worry about what
> happens if, eg, A,B,C and A+B+C all have even-more elegy, but
> (A+B)=(A+B+C)-C does
> not have even-y. In that case allowing C to remove herself from the
> pool,
> might result in switching from the scriptPubKey Qabc to the
> scriptPubKey
> Qab as follows:
> 
> ???? Qabc = (A+B+C) + H(A+B+C, (Sa, (Sb, Sc)))*G
> ???? Qab = -(A+B) + H( -(A+B), (Sa, Sb)*G
> 
> That's fine so far, but what happens if B then removes himself from
> the
> pool? You take the internal public key, which turns out to be -(A+B)
> since (A+B) did not have even y, and then subtract B, but that gives
> you
> -A-2B instead of just A. So B obtains his funds, but B's signature
> hasn't
> been cancelled out from the internal public key, so is still required
> in order to do key path spends, which is definitely not what we want.
> 

From alicexbt at protonmail.com  Fri Jul  8 19:44:24 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Fri, 08 Jul 2022 19:44:24 +0000
Subject: [bitcoin-dev] Playing with full-rbf peers for fun and L2s
	security
In-Reply-To: <YshE2QKBEVnbf+Bg@petertodd.org>
References: <CALZpt+GOh-7weEypT9JrzcwthZJqHOfj7sf9FMuqi5_FZv0g7w@mail.gmail.com>
 <gmDNbfrrvaZL4akV2DFwCuKrls9SScQjqxeRoEorEiYlv24dPt1j583iOtcB2lFrxZc59N3kp7T9KIM4ycl4QOmGBfDOUmO-BVHsttvtvDc=@protonmail.com>
 <CALZpt+FJ-R9yCoMLP=Vcxk1U7n=-LKHUGctFZj0K-vTMsz==ew@mail.gmail.com>
 <RJEFmrnjbzKQCBr4L7ebwBLzg7QHGXlaE19zj6jfkxL6xjfodgbfssZBQSYxm783Y4X5awuhL9Gj8IaBc4npE2oh3d1xoudKTrSsJ-dk0VQ=@protonmail.com>
 <CALZpt+HXB=xh3qtxJFM7yUzRu1uj-pPtLQmT=5QV0dNfVuTpfQ@mail.gmail.com>
 <Pb8H4PbeS-RaNOKfekOPdY8gQo4_Syd3HoTK26AO872f7tCKyGnty56KtcvmvrXFOJdC7nQgNHoQ37M4MNXQ6vqQ9du6BFbvGLbY3BdYVpY=@protonmail.com>
 <Yrj9N7k8osWsxhY4@petertodd.org>
 <0ikzVrbv3tA2fyv4iW7b_gPJ-qkrJS3x9HzouSqLabK3yHthgigPt9YZhGlr4_nCutAlRREfFSw1JW0k5KhBgSj1aBI2MSDTLqYHGYbqNrg=@protonmail.com>
 <YshE2QKBEVnbf+Bg@petertodd.org>
Message-ID: <IAIys3gW4J8HsVfdulv9lt6x2cHaWbgZ_pUg6Mzu-ZFLr3Ys-Uz5Ivg9IDAz4FvwFPFnTaq7ELMr-F_DPHiiYElP7Llrvx915Sl5-iV6Q0A=@protonmail.com>

Hi Peter,

> Point is, the attacker is thousands of UTXOs can also DoS rounds by simply
> failing to complete the round. In fact, the double-spend DoS attack requires
> more resources, because for a double-spend to be succesful, BTC has to be spent
> on fees.
>
> It's just a fact of life that a motivated attacker can DoS attack Wasabi by
> spending money. That's a design choice that's serving them well so far.


There are 2 things:

1) Based on my understanding, round will not be aborted if a threshold is met for inputs and will continue irrespective of attacker trying different things in the initial phases of round. I need to confirm this by testing although not feeling well today so it can take a few days.

2) Points mentioned by Greg Sanders are reasonable: There can be a different 'mempool view' for coordinator, users and attacker. Attacker could use minimum fee rate required for relay and this works differently when there is enough demand for blockspace.

Double spend attack requires only one laptop and a few UTXOs. Even if spent in some cases, would pay a few sats per transaction which won't be an issue for governments or competitors that normally perform such attacks.

The vulnerability reported is different from the things being discussed and hopefully I will do a public disclosure this month. I observed some interesting things which I wanted to discuss. Full RBF pull request is already merged in bitcoin core and available in bitcoin knots if some users want to experiment.


/dev/fd0

Sent with Proton Mail secure email.

------- Original Message -------
On Friday, July 8th, 2022 at 2:53 PM, Peter Todd <pete at petertodd.org> wrote:


> On Tue, Jul 05, 2022 at 08:46:51PM +0000, alicexbt wrote:
>
> > Hi Peter,
> >
> > > Note that Wasabi already has a DoS attack vector in that a participant can stop
> > > participating after the first phase of the round, with the result that the
> > > coinjoin fails. Wasabi mitigates that by punishing participating in future
> > > rounds. Double-spends only create additional types of DoS attack that need to
> > > be detected and punished as well - they don't create a fundamentally new
> > > vulerability.
> >
> > I agree some DoS vectors are already mitigated however punishment in this case will be difficult because the transaction is broadcasted after signing and before coinjoin tx broadcast.
> >
> > Inputs are already checked multiple times for double spend during coinjoin round: https://github.com/zkSNACKs/WalletWasabi/pull/6460
> >
> > If all the inputs in the coinjoin transaction that failed to relay are checked and one or more are found to be spent later, what will be punished and how does this affect the attacker with thousands of UTXOs or normal users?
>
>
> Point is, the attacker is thousands of UTXOs can also DoS rounds by simply
> failing to complete the round. In fact, the double-spend DoS attack requires
> more resources, because for a double-spend to be succesful, BTC has to be spent
> on fees.
>
> It's just a fact of life that a motivated attacker can DoS attack Wasabi by
> spending money. That's a design choice that's serving them well so far.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org

From pete at petertodd.org  Sat Jul  9 12:46:47 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 9 Jul 2022 08:46:47 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <Ysl4t9K8lfxRSsNM@petertodd.org>

New blog post:

https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary

tl;dr: Due to lost coins, a tail emission/fixed reward actually results in a
stable money supply. Not an (monetarily) inflationary supply.

...and for the purposes of reply/discussion, attached is the article itself in
markdown format:

---
layout: post
title:  "Surprisingly, Tail Emission Is Not Inflationary"
date:   2022-07-09
tags:
- bitcoin
- monero
---

At present, all notable proof-of-work currencies reward miners with both a block
reward, and transaction fees. With most currencies (including Bitcoin) phasing
out block rewards over time. However in no currency have transaction fees
consistently been more than 5% to 10% of the total mining
reward[^fee-in-reward], with the exception of Ethereum, from June 2020 to Aug 2021.
To date no proof-of-work currency has ever operated solely on transaction
fees[^pow-tweet], and academic analysis has found that in this condition block
generation is unstable.[^instability-without-block-reward] To paraphrase Andrew
Poelstra, it's a scary phase change that no other coin has gone through.[^apoelstra-quote]

[^pow-tweet]: [I asked on Twitter](https://twitter.com/peterktodd/status/1543231264597090304) and no-one replied with counter-examples.

[^fee-in-reward]: [Average Fee Percentage in Total Block Reward](https://bitinfocharts.com/comparison/fee_to_reward-btc-eth-bch-ltc-doge-xmr-bsv-dash-zec.html#alltime)

[^instability-without-block-reward]: [On the Instability of Bitcoin Without the Block Reward](https://www.cs.princeton.edu/~arvindn/publications/mining_CCS.pdf)

[^apoelstra-quote]: [From a panel at TABConf 2021](https://twitter.com/peterktodd/status/1457066946898317316)

Monero has chosen to implement what they call [tail
emission](https://www.getmonero.org/resources/moneropedia/tail-emission.html):
a fixed reward per block that continues indefinitely. Dogecoin also has a fixed
reward, which they widely - and incorrectly - refer to as an "abundant" supply[^dogecoin-abundant].

[^dogecoin-abundant]: Googling "dogecoin abundant" returns dozens of hits.

This article will show that a fixed block reward does **not** lead to an
abundant supply. In fact, due to the inevitability of lost coins, a fixed
reward converges to a **stable** monetary supply that is neither inflationary
nor deflationary, with the total supply proportional to rate of tail emission
and probability of coin loss.

Credit where credit is due: after writing the bulk of this article I found out
that Monero developer [smooth_xmr](https://www.reddit.com/user/smooth_xmr/)
also observed that tail emission results in a stable coin supply
[a few years ago](https://www.reddit.com/r/Monero/comments/4z0azk/maam_28_monero_ask_anything_monday/d6sixyi/).
There's probably others too: it's a pretty obvious result.


<div markdown="1" class="post-toc">
# Contents
{:.no_toc}
0. TOC
{:toc}
</div>

## Modeling the Fixed-Reward Monetary Supply

Since the number of blocks is large, we can model the monetary supply as a
continuous function $$N(t)$$, where $$t$$ is a given moment in time. If the
block reward is fixed we can model the reward as a slope $$k$$ added to an
initial supply $$N_0$$:

$$
N(t) = N_0 + kt
$$

Of course, this isn't realistic as coins are constantly being lost due to
deaths, forgotten passphrases, boating accidents, etc. These losses are
independent: I'm not any more or less likely to forget my passphrase because
you recently lost your coins in a boating accident ? an accident I probably
don't even know happened. Since the number of individual coins (and their
owners) is large ? as with the number of blocks ? we can model this loss as
though it happens continuously.

Since coins can only be lost once, the *rate* of coin loss at time $$t$$ is
proportional to the total supply *at that moment* in time. So let's look at the
*first derivative* of our fixed-reward coin supply:

$$
\frac{dN(t)}{dt} = k
$$

...and subtract from it the lost coins, using $$\lambda$$ as our [coin loss
constant](https://en.wikipedia.org/wiki/Exponential_decay):

$$
\frac{dN(t)}{dt} = k - \lambda N(t)
$$

That's a first-order differential equation, which can be easily solved with
separation of variables to get:

$$
N(t) = \frac{k}{\lambda} - Ce^{-\lambda t}
$$

To remove the integration constant $$C$$, let's look at $$t = 0$$, where the
coin supply is $$N_0$$:

$$
\begin{align}
    N_0 &= \frac{k}{\lambda} - Ce^{-\lambda 0} = \frac{k}{\lambda} - C \\
      C &= \frac{k}{\lambda} - N_0
\end{align}
$$

Thus:

$$
\begin{align}
    N(t) &= \frac{k}{\lambda} - \left(\frac{k}{\lambda} - N_0 \right)e^{-\lambda t} \\
         &= \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda} \right)e^{-\lambda t}
\end{align}
$$


## Long Term Coin Supply

It's easy to see that in the long run, the second half of the coin supply
equation goes to zero because $$\lim_{t \to \infty} e^{-\lambda t} = 0$$:

$$
\begin{align}
    \lim_{t \to \infty} N(t) &= \lim_{t \to \infty} \left[ \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda} \right)e^{-\lambda t} \right ] = \frac{k}{\lambda} \\
                   N(\infty) &= \frac{k}{\lambda}
\end{align}
$$

An intuitive explanation for this result is that in the long run, the initial
supply $$N_0$$ doesn't matter, because approximately all of those coins will
eventually be lost. Thus in the long run, the coin supply will converge towards
$$\frac{k}{\lambda}$$, the point where coins are created just as fast as they
are lost.


## Short Term Dynamics and Economic Considerations

Of course, the intuitive explanation for why supply converges to
$$\frac{k}{\lambda}$$, also tells us that supply must converge fairly slowly:
if 1% of something is lost per year, after 100 years 37% of the initial supply
remains. It's not clear what the rate of lost coins actually is in a mature,
valuable, coin. But 1%/year is likely to be a good guess ? quite possibly less.

In the case of Monero, they've introduced tail emission at a point where it
represents a 0.9% apparent monetary inflation rate[^p2pool-tail]. Since the number of
previously lost coins, and the current rate of coin loss, is
unknown[^unknowable] it's not possible to know exactly what the true monetary
inflation rate is right now. But regardless, the rate will only converge
towards zero going forward.

[^unknowable]: Being a privacy coin with [shielded amounts](https://localmonero.co/blocks/richlist), it's not even possible to get an estimate of the total amount of XMR in active circulation.

[^p2pool-tail]: P2Pool operates [a page with real-time date figures](https://p2pool.io/tail.html).

If an existing coin decides to implement tail emission as a means to fund
security, choosing an appropriate emission rate is simple: decide on the
maximum amount of inflation you are willing to have in the worst case, and set
the tail emission accordingly. In reality monetary inflation will be even lower
on day zero due to lost coins, and in the long run, it will converge towards
zero.

The fact is, economic volatility dwarfs the effect of small amounts of
inflation. Even a 0.5% inflation rate over 50 years only leads to a 22% drop.
Meanwhile at the time of writing, Bitcoin has dropped 36% in the past year, and
gained 993% over the past 5 years. While this discussion is a nice excuse to
use some mildly interesting math, in the end it's totally pedantic.

## Could Bitcoin Add Tail Emission?

...and why could Monero?

Adding tail emission to Bitcoin would be a hard fork: a incompatible rule
change that existing Bitcoin nodes would reject as invalid. While Monero was
able to get sufficiently broad consensus in the community to implement tail
emission, it's unclear at best if it would ever be possible to achieve that for
the much larger[^btc-vs-xmr-market-cap] Bitcoin. Additionally, Monero has a
culture of frequent hard forks that simply does not exist in Bitcoin.

[^btc-vs-xmr-market-cap]: [As of writing](https://web.archive.org/web/20220708143920/https://www.coingecko.com/), the apparent market cap of Bitcoin is $409 billion, almost 200x larger than Monero's $2.3 billion.

Ultimately, as long as a substantial fraction of the Bitcoin community continue
to run full nodes, the only way tail emission could ever be added to Bitcoin is
by convincing that same community that it is a good idea.


## Footnotes
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/7f1a65d7/attachment.sig>

From eric at voskuil.org  Sat Jul  9 14:26:22 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Sat, 9 Jul 2022 07:26:22 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <Ysl4t9K8lfxRSsNM@petertodd.org>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
Message-ID: <ABA1D62F-C22C-413C-8710-72521D4D8B21@voskuil.org>

> Due to lost coins, a tail emission/fixed reward actually results in a stable money supply. Not an (monetarily) inflationary supply.

This observation is not a proof of lost coins, that is an assumption. It is the provable consequence of market, as opposed to monopoly, production.

https://github.com/libbitcoin/libbitcoin-system/wiki/Inflation-Principle

Mises? unfortunate error in the application of the Cantillon Effect to gold perpetuates this misperception. One could imagine applying this theory to all goods, not just money, and conclude perpetual loss of value in everything produced, as a consequence of production. One might then be tempted to attribute the fact that this is not observable to loss/depreciation/consumption. While it is certainly possible that the amount of gold produced every year is offset by the amount lost, this of course implies that all of it is lost.

?Circulation? does not determine demand, all money is always held by someone. Changing hands only changes who owns the money, not its purchasing power. See Rothbard?s critique of monetary ?velocity?.

e

> On Jul 9, 2022, at 05:47, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?New blog post:
> 
> https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary
> 
> tl;dr: Due to lost coins, a tail emission/fixed reward actually results in a
> stable money supply. Not an (monetarily) inflationary supply.
> 
> ...and for the purposes of reply/discussion, attached is the article itself in
> markdown format:
> 
> ---
> layout: post
> title:  "Surprisingly, Tail Emission Is Not Inflationary"
> date:   2022-07-09
> tags:
> - bitcoin
> - monero
> ---
> 
> At present, all notable proof-of-work currencies reward miners with both a block
> reward, and transaction fees. With most currencies (including Bitcoin) phasing
> out block rewards over time. However in no currency have transaction fees
> consistently been more than 5% to 10% of the total mining
> reward[^fee-in-reward], with the exception of Ethereum, from June 2020 to Aug 2021.
> To date no proof-of-work currency has ever operated solely on transaction
> fees[^pow-tweet], and academic analysis has found that in this condition block
> generation is unstable.[^instability-without-block-reward] To paraphrase Andrew
> Poelstra, it's a scary phase change that no other coin has gone through.[^apoelstra-quote]
> 
> [^pow-tweet]: [I asked on Twitter](https://twitter.com/peterktodd/status/1543231264597090304) and no-one replied with counter-examples.
> 
> [^fee-in-reward]: [Average Fee Percentage in Total Block Reward](https://bitinfocharts.com/comparison/fee_to_reward-btc-eth-bch-ltc-doge-xmr-bsv-dash-zec.html#alltime)
> 
> [^instability-without-block-reward]: [On the Instability of Bitcoin Without the Block Reward](https://www.cs.princeton.edu/~arvindn/publications/mining_CCS.pdf)
> 
> [^apoelstra-quote]: [From a panel at TABConf 2021](https://twitter.com/peterktodd/status/1457066946898317316)
> 
> Monero has chosen to implement what they call [tail
> emission](https://www.getmonero.org/resources/moneropedia/tail-emission.html):
> a fixed reward per block that continues indefinitely. Dogecoin also has a fixed
> reward, which they widely - and incorrectly - refer to as an "abundant" supply[^dogecoin-abundant].
> 
> [^dogecoin-abundant]: Googling "dogecoin abundant" returns dozens of hits.
> 
> This article will show that a fixed block reward does **not** lead to an
> abundant supply. In fact, due to the inevitability of lost coins, a fixed
> reward converges to a **stable** monetary supply that is neither inflationary
> nor deflationary, with the total supply proportional to rate of tail emission
> and probability of coin loss.
> 
> Credit where credit is due: after writing the bulk of this article I found out
> that Monero developer [smooth_xmr](https://www.reddit.com/user/smooth_xmr/)
> also observed that tail emission results in a stable coin supply
> [a few years ago](https://www.reddit.com/r/Monero/comments/4z0azk/maam_28_monero_ask_anything_monday/d6sixyi/).
> There's probably others too: it's a pretty obvious result.
> 
> 
> <div markdown="1" class="post-toc">
> # Contents
> {:.no_toc}
> 0. TOC
> {:toc}
> </div>
> 
> ## Modeling the Fixed-Reward Monetary Supply
> 
> Since the number of blocks is large, we can model the monetary supply as a
> continuous function $$N(t)$$, where $$t$$ is a given moment in time. If the
> block reward is fixed we can model the reward as a slope $$k$$ added to an
> initial supply $$N_0$$:
> 
> $$
> N(t) = N_0 + kt
> $$
> 
> Of course, this isn't realistic as coins are constantly being lost due to
> deaths, forgotten passphrases, boating accidents, etc. These losses are
> independent: I'm not any more or less likely to forget my passphrase because
> you recently lost your coins in a boating accident ? an accident I probably
> don't even know happened. Since the number of individual coins (and their
> owners) is large ? as with the number of blocks ? we can model this loss as
> though it happens continuously.
> 
> Since coins can only be lost once, the *rate* of coin loss at time $$t$$ is
> proportional to the total supply *at that moment* in time. So let's look at the
> *first derivative* of our fixed-reward coin supply:
> 
> $$
> \frac{dN(t)}{dt} = k
> $$
> 
> ...and subtract from it the lost coins, using $$\lambda$$ as our [coin loss
> constant](https://en.wikipedia.org/wiki/Exponential_decay):
> 
> $$
> \frac{dN(t)}{dt} = k - \lambda N(t)
> $$
> 
> That's a first-order differential equation, which can be easily solved with
> separation of variables to get:
> 
> $$
> N(t) = \frac{k}{\lambda} - Ce^{-\lambda t}
> $$
> 
> To remove the integration constant $$C$$, let's look at $$t = 0$$, where the
> coin supply is $$N_0$$:
> 
> $$
> \begin{align}
>    N_0 &= \frac{k}{\lambda} - Ce^{-\lambda 0} = \frac{k}{\lambda} - C \\
>      C &= \frac{k}{\lambda} - N_0
> \end{align}
> $$
> 
> Thus:
> 
> $$
> \begin{align}
>    N(t) &= \frac{k}{\lambda} - \left(\frac{k}{\lambda} - N_0 \right)e^{-\lambda t} \\
>         &= \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda} \right)e^{-\lambda t}
> \end{align}
> $$
> 
> 
> ## Long Term Coin Supply
> 
> It's easy to see that in the long run, the second half of the coin supply
> equation goes to zero because $$\lim_{t \to \infty} e^{-\lambda t} = 0$$:
> 
> $$
> \begin{align}
>    \lim_{t \to \infty} N(t) &= \lim_{t \to \infty} \left[ \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda} \right)e^{-\lambda t} \right ] = \frac{k}{\lambda} \\
>                   N(\infty) &= \frac{k}{\lambda}
> \end{align}
> $$
> 
> An intuitive explanation for this result is that in the long run, the initial
> supply $$N_0$$ doesn't matter, because approximately all of those coins will
> eventually be lost. Thus in the long run, the coin supply will converge towards
> $$\frac{k}{\lambda}$$, the point where coins are created just as fast as they
> are lost.
> 
> 
> ## Short Term Dynamics and Economic Considerations
> 
> Of course, the intuitive explanation for why supply converges to
> $$\frac{k}{\lambda}$$, also tells us that supply must converge fairly slowly:
> if 1% of something is lost per year, after 100 years 37% of the initial supply
> remains. It's not clear what the rate of lost coins actually is in a mature,
> valuable, coin. But 1%/year is likely to be a good guess ? quite possibly less.
> 
> In the case of Monero, they've introduced tail emission at a point where it
> represents a 0.9% apparent monetary inflation rate[^p2pool-tail]. Since the number of
> previously lost coins, and the current rate of coin loss, is
> unknown[^unknowable] it's not possible to know exactly what the true monetary
> inflation rate is right now. But regardless, the rate will only converge
> towards zero going forward.
> 
> [^unknowable]: Being a privacy coin with [shielded amounts](https://localmonero.co/blocks/richlist), it's not even possible to get an estimate of the total amount of XMR in active circulation.
> 
> [^p2pool-tail]: P2Pool operates [a page with real-time date figures](https://p2pool.io/tail.html).
> 
> If an existing coin decides to implement tail emission as a means to fund
> security, choosing an appropriate emission rate is simple: decide on the
> maximum amount of inflation you are willing to have in the worst case, and set
> the tail emission accordingly. In reality monetary inflation will be even lower
> on day zero due to lost coins, and in the long run, it will converge towards
> zero.
> 
> The fact is, economic volatility dwarfs the effect of small amounts of
> inflation. Even a 0.5% inflation rate over 50 years only leads to a 22% drop.
> Meanwhile at the time of writing, Bitcoin has dropped 36% in the past year, and
> gained 993% over the past 5 years. While this discussion is a nice excuse to
> use some mildly interesting math, in the end it's totally pedantic.
> 
> ## Could Bitcoin Add Tail Emission?
> 
> ...and why could Monero?
> 
> Adding tail emission to Bitcoin would be a hard fork: a incompatible rule
> change that existing Bitcoin nodes would reject as invalid. While Monero was
> able to get sufficiently broad consensus in the community to implement tail
> emission, it's unclear at best if it would ever be possible to achieve that for
> the much larger[^btc-vs-xmr-market-cap] Bitcoin. Additionally, Monero has a
> culture of frequent hard forks that simply does not exist in Bitcoin.
> 
> [^btc-vs-xmr-market-cap]: [As of writing](https://web.archive.org/web/20220708143920/https://www.coingecko.com/), the apparent market cap of Bitcoin is $409 billion, almost 200x larger than Monero's $2.3 billion.
> 
> Ultimately, as long as a substantial fraction of the Bitcoin community continue
> to run full nodes, the only way tail emission could ever be added to Bitcoin is
> by convincing that same community that it is a good idea.
> 
> 
> ## Footnotes
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/3e785ca0/attachment-0001.html>

From john.tromp at gmail.com  Sat Jul  9 14:57:57 2022
From: john.tromp at gmail.com (John Tromp)
Date: Sat, 9 Jul 2022 16:57:57 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <CAOU__fz8XSfEdOS9U7_H4A4jpCgtQepKxaW4jT5go91rhY-VQg@mail.gmail.com>

> New blog post:
> https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary

A Tail Emission is best described as disinflationary; the yearly
supply inflation steadily decreases toward zero.

> Dogecoin also has a fixed reward

It started out with random rewards up to 1M doge per block, with the
maximum halving every 100K blocks, until the fixed reward of 10K doge
kicked in at height 600K.

> If an existing coin decides to implement tail emission as a means to fund security, choosing an appropriate emission rate is simple: decide on the maximum amount of inflation you are willing to have in the worst case, and set the tail emission accordingly.

Any coin without a premine starts with infinite inflation. Bitcoin in
its first 4 years had yearly inflation rates of inf, 100%, 50%, and
33%. So deciding on a maximum amount of inflation is deciding on a
premine.

While in the long term, a capped supply doesn't meaningfully differ
from un uncapped supply [1], the 21M limit is central to Bitcoin's
identity, and removing this limit results in something that can no
longer be called Bitcoin.

[1] https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153

From pete at petertodd.org  Sat Jul  9 15:13:44 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 9 Jul 2022 11:13:44 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <CAOU__fz8XSfEdOS9U7_H4A4jpCgtQepKxaW4jT5go91rhY-VQg@mail.gmail.com>
References: <CAOU__fz8XSfEdOS9U7_H4A4jpCgtQepKxaW4jT5go91rhY-VQg@mail.gmail.com>
Message-ID: <YsmbKPrsM0wKXAYQ@petertodd.org>

On Sat, Jul 09, 2022 at 04:57:57PM +0200, John Tromp via bitcoin-dev wrote:
> > New blog post:
> > https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary
> 
> A Tail Emission is best described as disinflationary; the yearly
> supply inflation steadily decreases toward zero.

_Apparently_ inflation. True monetary inflation includes lost coins - both
intentionally and accidentally lost. It's quite possible that even with tail
emission Monero is currently a monetarily deflationary coin, as the lost coin
rate might be higher than the 0.8% apparent tail emission rate.

We just don't know. Doubly so in the case of monero where its privacy features
hide coin activity.

> > If an existing coin decides to implement tail emission as a means to fund security, choosing an appropriate emission rate is simple: decide on the maximum amount of inflation you are willing to have in the worst case, and set the tail emission accordingly.
> 
> Any coin without a premine starts with infinite inflation. Bitcoin in
> its first 4 years had yearly inflation rates of inf, 100%, 50%, and
> 33%. So deciding on a maximum amount of inflation is deciding on a
> premine.

Hence why I specified an *existing* coin.

> While in the long term, a capped supply doesn't meaningfully differ
> from un uncapped supply [1], the 21M limit is central to Bitcoin's
> identity, and removing this limit results in something that can no
> longer be called Bitcoin.

Personally I think basing your identity on a technical point that isn't even
correct is stupid. And I suspect than when push comes to shove, if in ~10 years
or whatever Bitcoin turns out to be unstable without a reward, the market as a
whole will be happy to redefine Bitcoin to remove the 21M limit. Whether or not
it can do that fast enough to avoid Bitcoin dying first is an open question.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/4c36e63b/attachment.sig>

From pete at petertodd.org  Sat Jul  9 15:15:00 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 9 Jul 2022 11:15:00 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <ABA1D62F-C22C-413C-8710-72521D4D8B21@voskuil.org>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
 <ABA1D62F-C22C-413C-8710-72521D4D8B21@voskuil.org>
Message-ID: <YsmbdMlt/KnvRs3U@petertodd.org>

On Sat, Jul 09, 2022 at 07:26:22AM -0700, Eric Voskuil wrote:
> > Due to lost coins, a tail emission/fixed reward actually results in a stable money supply. Not an (monetarily) inflationary supply.
> 
> This observation is not a proof of lost coins, that is an assumption.

To be clear, are you claiming that there is no proof that coins are lost?

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/d3a4c87c/attachment.sig>

From eric at voskuil.org  Sat Jul  9 15:24:51 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Sat, 9 Jul 2022 08:24:51 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YsmbdMlt/KnvRs3U@petertodd.org>
References: <YsmbdMlt/KnvRs3U@petertodd.org>
Message-ID: <D7C30506-A95D-4B43-A1BA-37F13DAD5C6F@voskuil.org>

To clarify, price inflation is not caused by market production. Attributing the observed lack of inflation (eg fee %) to loss is an assumed relation.

Even if the amount of loss was known (which it is not), there remains an assumption in the correlation of non-lost coins to price. Demand determines price, not the amount of something in existence, hence the folly of S2F (1/monetary-inflation).

e

> On Jul 9, 2022, at 08:15, Peter Todd <pete at petertodd.org> wrote:
> 
> ?On Sat, Jul 09, 2022 at 07:26:22AM -0700, Eric Voskuil wrote:
>>> Due to lost coins, a tail emission/fixed reward actually results in a stable money supply. Not an (monetarily) inflationary supply.
>> 
>> This observation is not a proof of lost coins, that is an assumption.
> 
> To be clear, are you claiming that there is no proof that coins are lost?
> 
> -- 
> https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/octet-stream
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/ea261b14/attachment.obj>

From pete at petertodd.org  Sat Jul  9 15:31:26 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 9 Jul 2022 11:31:26 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <D7C30506-A95D-4B43-A1BA-37F13DAD5C6F@voskuil.org>
References: <YsmbdMlt/KnvRs3U@petertodd.org>
 <D7C30506-A95D-4B43-A1BA-37F13DAD5C6F@voskuil.org>
Message-ID: <YsmfTubgqua0FHR0@petertodd.org>

On Sat, Jul 09, 2022 at 08:24:51AM -0700, Eric Voskuil wrote:
> To clarify, price inflation is not caused by market production. Attributing the observed lack of inflation (eg fee %) to loss is an assumed relation.

My article is a mathematical proof that has nothing to do with observations of
inflation.

What I did is prove that if there is tail emission/fixed supply, the coin
supply will converge towards a fixed amount because the coin supply dependant
rate of coin loss balances out the fixed rate of coin production.

That proof has nothing to do with market dynamics and would happen in any
system, economic or not, with similar underlying dynamics.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/c7521b4f/attachment-0001.sig>

From antoine.riard at gmail.com  Sat Jul  9 15:06:43 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Sat, 9 Jul 2022 11:06:43 -0400
Subject: [bitcoin-dev] Playing with full-rbf peers for fun and L2s
	security
In-Reply-To: <YshE2QKBEVnbf+Bg@petertodd.org>
References: <CALZpt+GOh-7weEypT9JrzcwthZJqHOfj7sf9FMuqi5_FZv0g7w@mail.gmail.com>
 <gmDNbfrrvaZL4akV2DFwCuKrls9SScQjqxeRoEorEiYlv24dPt1j583iOtcB2lFrxZc59N3kp7T9KIM4ycl4QOmGBfDOUmO-BVHsttvtvDc=@protonmail.com>
 <CALZpt+FJ-R9yCoMLP=Vcxk1U7n=-LKHUGctFZj0K-vTMsz==ew@mail.gmail.com>
 <RJEFmrnjbzKQCBr4L7ebwBLzg7QHGXlaE19zj6jfkxL6xjfodgbfssZBQSYxm783Y4X5awuhL9Gj8IaBc4npE2oh3d1xoudKTrSsJ-dk0VQ=@protonmail.com>
 <CALZpt+HXB=xh3qtxJFM7yUzRu1uj-pPtLQmT=5QV0dNfVuTpfQ@mail.gmail.com>
 <Pb8H4PbeS-RaNOKfekOPdY8gQo4_Syd3HoTK26AO872f7tCKyGnty56KtcvmvrXFOJdC7nQgNHoQ37M4MNXQ6vqQ9du6BFbvGLbY3BdYVpY=@protonmail.com>
 <Yrj9N7k8osWsxhY4@petertodd.org>
 <0ikzVrbv3tA2fyv4iW7b_gPJ-qkrJS3x9HzouSqLabK3yHthgigPt9YZhGlr4_nCutAlRREfFSw1JW0k5KhBgSj1aBI2MSDTLqYHGYbqNrg=@protonmail.com>
 <YshE2QKBEVnbf+Bg@petertodd.org>
Message-ID: <CALZpt+H6H3M49O=-NduYd99VwSywGPoJPavKs8EDzdBi9pT5qg@mail.gmail.com>

> Point is, the attacker is thousands of UTXOs can also DoS rounds by simply
> failing to complete the round. In fact, the double-spend DoS attack
requires
> more resources, because for a double-spend to be succesful, BTC has to be
spent
> on fees.

I think I agree that effectively a DoS-by-abstention is lower cost than a
DoS-by-RBF-otpout, as in the second case the UTXO double-spent must be
still acquired. However, I wonder if the second DoS case isn't more
economically efficient for the attacker as you can re-use the same UTXO (or
the lineage of it) many times as the coinjoin coordinator have a limited
visibility (in the very best case) of the network mempools to blame
confidently.

Acquiring thousands of UTXO, whatever the origin, isn't free. Electricity
burns if they have been mined, fiat if they have been acquired through
exchange, time and energy if they have been earned as income.

> It's just a fact of life that a motivated attacker can DoS attack Wasabi
by
> spending money. That's a design choice that's serving them well so far.

I believe it's hard to make any open, p2p coinjoin services robust against
a deep-pocketed attacker practicing that type of DoS attacks. In theory, an
attacker could maintain the DoS for long enough to ruin the reputation of
the service until it's out of the market. It would be interesting to know
if you can design a DoS mitigation (e.g against DoS-by-abstention) offering
the advantage to the targeted service after one-round or a fixed number of
rounds.

> The other users' only practical choice is to double-spend their own input
> to get their money back(at competitive rates much higher than the
> attacker), or wait and hope you win a propagation race somewhere.

Yes, that's of the annoying concern with DoS-by-RBF-optout against
DoS-by-abstention, while the latter can be mitigated without assuming a
on-chain cost for the participant, the former might be crafted such that
on-chain fees must be spent to sanitize the situation, worst in an
asymmetric way bounded by the max size of the coinjoin, I think.

> Double spend attack requires only one laptop and a few UTXOs. Even if
spent in some cases, would pay a few sats per transaction which won't be an
issue for governments or competitors that normally perform such attacks.

That's an interesting question. Interactive transaction construction
protocol being formalized by the BOLT process implied (hopefully) that
sooner or later multi-party coinjoin capabilities should be well supported
across the ecosystem. From that, we might seen a large-scale p2p market of
coinjoin (in the same way we have a HTLC routing market with LN), where a
participant can enter into them, without the high cost of installing
another wallet. I believe how do we mitigate all those classes of DoS to
avoid malicious coinjoin service providers to outlaw competitions that stay
open (reminder Minecraft and the Mirai Botnet story).

Antoine

Le ven. 8 juil. 2022 ? 10:53, Peter Todd <pete at petertodd.org> a ?crit :

> On Tue, Jul 05, 2022 at 08:46:51PM +0000, alicexbt wrote:
> > Hi Peter,
> >
> > > Note that Wasabi already has a DoS attack vector in that a participant
> can stop
> > > participating after the first phase of the round, with the result that
> the
> > > coinjoin fails. Wasabi mitigates that by punishing participating in
> future
> > > rounds. Double-spends only create additional types of DoS attack that
> need to
> > > be detected and punished as well - they don't create a fundamentally
> new
> > > vulerability.
> >
> > I agree some DoS vectors are already mitigated however punishment in
> this case will be difficult because the transaction is broadcasted after
> signing and before coinjoin tx broadcast.
> >
> > Inputs are already checked multiple times for double spend during
> coinjoin round: https://github.com/zkSNACKs/WalletWasabi/pull/6460
> >
> > If all the inputs in the coinjoin transaction that failed to relay are
> checked and one or more are found to be spent later, what will be punished
> and how does this affect the attacker with thousands of UTXOs or normal
> users?
>
> Point is, the attacker is thousands of UTXOs can also DoS rounds by simply
> failing to complete the round. In fact, the double-spend DoS attack
> requires
> more resources, because for a double-spend to be succesful, BTC has to be
> spent
> on fees.
>
> It's just a fact of life that a motivated attacker can DoS attack Wasabi by
> spending money. That's a design choice that's serving them well so far.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/8a93177f/attachment.html>

From namanhd at gmail.com  Sat Jul  9 17:43:49 2022
From: namanhd at gmail.com (naman naman)
Date: Sat, 9 Jul 2022 21:43:49 +0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YsmfTubgqua0FHR0@petertodd.org>
References: <YsmbdMlt/KnvRs3U@petertodd.org>
 <D7C30506-A95D-4B43-A1BA-37F13DAD5C6F@voskuil.org>
 <YsmfTubgqua0FHR0@petertodd.org>
Message-ID: <CA+SxJWAyKg-Hc4cYOkMrzXqer5jEbNcJ2f04BWfbyQ78bysZXg@mail.gmail.com>

Hi,

This approach raises the obvious question : If someone hasn't had access to
their coins in a long time (yrs, decades, however you want to define it) -
and they wish to access/move them after such a time - isn't your proposal
simply taking away their ability to do so? Some might call it : stealing
their coins.

How does one conclusively prove that "lost" coins are "lost forever"?

Regards,
thenoblebot

On Sat, 9 Jul, 2022, 7:31 pm Peter Todd via bitcoin-dev, <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Sat, Jul 09, 2022 at 08:24:51AM -0700, Eric Voskuil wrote:
> > To clarify, price inflation is not caused by market production.
> Attributing the observed lack of inflation (eg fee %) to loss is an assumed
> relation.
>
> My article is a mathematical proof that has nothing to do with
> observations of
> inflation.
>
> What I did is prove that if there is tail emission/fixed supply, the coin
> supply will converge towards a fixed amount because the coin supply
> dependant
> rate of coin loss balances out the fixed rate of coin production.
>
> That proof has nothing to do with market dynamics and would happen in any
> system, economic or not, with similar underlying dynamics.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/a7a6735f/attachment.html>

From pete at petertodd.org  Sat Jul  9 17:48:38 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 9 Jul 2022 13:48:38 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <CA+SxJWAyKg-Hc4cYOkMrzXqer5jEbNcJ2f04BWfbyQ78bysZXg@mail.gmail.com>
References: <YsmbdMlt/KnvRs3U@petertodd.org>
 <D7C30506-A95D-4B43-A1BA-37F13DAD5C6F@voskuil.org>
 <YsmfTubgqua0FHR0@petertodd.org>
 <CA+SxJWAyKg-Hc4cYOkMrzXqer5jEbNcJ2f04BWfbyQ78bysZXg@mail.gmail.com>
Message-ID: <Ysm/dsclRdCUaiJ5@petertodd.org>

On Sat, Jul 09, 2022 at 09:43:49PM +0400, naman naman wrote:
> Hi,
> 
> This approach raises the obvious question : If someone hasn't had access to
> their coins in a long time (yrs, decades, however you want to define it) -
> and they wish to access/move them after such a time - isn't your proposal
> simply taking away their ability to do so? Some might call it : stealing
> their coins.
> 
> How does one conclusively prove that "lost" coins are "lost forever"?

Re-read the article: https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary

It has nothing to do with re-assigning ownership of coins.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/5fcea1ad/attachment-0001.sig>

From eric at voskuil.org  Sat Jul  9 20:53:56 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Sat, 9 Jul 2022 13:53:56 -0700
Subject: [bitcoin-dev]  Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <B2EFCEBA-AC0C-4AB8-8575-038A5455D176@voskuil.org>

?In Bitcoin we use the term ?supply? as a reference to the number of coins minted. This colloquialism is commonly conflated with the economic concept of supply, and then injected into a supply/demand relation as if it had the same applicability. Economically supply refers to desire to sell, while demand refers to desire to buy.

e

> On Jul 9, 2022, at 08:24, Eric Voskuil <eric at voskuil.org> wrote:
> 
> ?To clarify, price inflation is not caused by market production. Attributing the observed lack of inflation (eg fee %) to loss is an assumed relation.
> 
> Even if the amount of loss was known (which it is not), there remains an assumption in the correlation of non-lost coins to price. Demand determines price, not the amount of something in existence, hence the folly of S2F (1/monetary-inflation).
> 
> e
> 
>> On Jul 9, 2022, at 08:15, Peter Todd <pete at petertodd.org> wrote:
>> ?On Sat, Jul 09, 2022 at 07:26:22AM -0700, Eric Voskuil wrote:
>>>> Due to lost coins, a tail emission/fixed reward actually results in a stable money supply. Not an (monetarily) inflationary supply.
>>> This observation is not a proof of lost coins, that is an assumption.
>> To be clear, are you claiming that there is no proof that coins are lost?
>> --
>> https://petertodd.org 'peter'[:-1]@petertodd.org

From eric at voskuil.org  Sat Jul  9 20:54:01 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Sat, 9 Jul 2022 13:54:01 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>

?Yet you posted several links which made that specific correlation, to which I was responding.

Math cannot prove how much coin is ?lost?, and even if it was provable that the amount of coin lost converges to the amount produced, it is of no consequence - for the reasons I?ve already pointed out. The amount of market production has no impact on market price, just as it does not with any other good.

The reason to object to perpetual issuance is the impact on censorship resistance, not on price.

e

> On Jul 9, 2022, at 08:31, Peter Todd <pete at petertodd.org> wrote:
> ?On Sat, Jul 09, 2022 at 08:24:51AM -0700, Eric Voskuil wrote:
>> To clarify, price inflation is not caused by market production. Attributing the observed lack of inflation (eg fee %) to loss is an assumed relation.
> 
> My article is a mathematical proof that has nothing to do with observations of
> inflation.
> 
> What I did is prove that if there is tail emission/fixed supply, the coin
> supply will converge towards a fixed amount because the coin supply dependant
> rate of coin loss balances out the fixed rate of coin production.
> 
> That proof has nothing to do with market dynamics and would happen in any
> system, economic or not, with similar underlying dynamics.
> 
> -- 
> https://petertodd.org 'peter'[:-1]@petertodd.org

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/octet-stream
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/be85c5c5/attachment.obj>
-------------- next part --------------


From zachgrw at gmail.com  Sat Jul  9 20:31:22 2022
From: zachgrw at gmail.com (Zac Greenwood)
Date: Sat, 9 Jul 2022 22:31:22 +0200
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAH+Axy4X+uQG5Vw0Efiz6AtNyK=++h-jDeZL1ZxpVJus8BVKeA@mail.gmail.com>
References: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
 <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
 <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>
 <CAH+Axy4X+uQG5Vw0Efiz6AtNyK=++h-jDeZL1ZxpVJus8BVKeA@mail.gmail.com>
Message-ID: <CAJ4-pEA7WJpbExcsgdPWVNuZLrbDDhVYr37g6_6NSf7t41eB4w@mail.gmail.com>

Sorting a seed alphabetically reduces entropy by ~29 bits.

A 12-word seed has (12, 12) permutations or 479 million, which is ln(469m)
/ ln(2) ~= 29 bits of entropy. Sorting removes this entropy entirely,
reducing the seed entropy from 128 to 99 bits.

Zac


On Fri, 8 Jul 2022 at 16:09, James MacWhyte via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> What do you do if the "first" word (of 12), happens to be the last word in
>> the list alphabetically?
>>
>
> That couldn't happen. If one word is the very last from the wordlist, it
> would end up at the end of your mnemonic once you rearrange your 12 words
> alphabetically.
>
> However!
>
> (@vjudeu) Choosing 11 random words and then sorting them alphabetically
> before assigning a checksum would reduce entropy considerably. If you think
> about it, to bruteforce the entire keyspace one would only need to come up
> with every possible combination of 11 words + 1 checksum. I'm not the best
> at napkin math, but I think that leaves you with around 10 trillion
> combinations, which would only take a couple months to exhaust with
> hardware that can do 1 million guesses per second.
>
>
> James
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/fade4b82/attachment.html>

From ZmnSCPxj at protonmail.com  Sat Jul  9 21:59:06 2022
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Sat, 09 Jul 2022 21:59:06 +0000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
Message-ID: <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>

Good morning e, and list,

> Yet you posted several links which made that specific correlation, to which I was responding.
>
> Math cannot prove how much coin is ?lost?, and even if it was provable that the amount of coin lost converges to the amount produced, it is of no consequence - for the reasons I?ve already pointed out. The amount of market production has no impact on market price, just as it does not with any other good.
>
> The reason to object to perpetual issuance is the impact on censorship resistance, not on price.

To clarify about censorship resistance and perpetual issuance ("tail emission"):

* Suppose I have two blockchains, one with a constant block subsidy, and one which *had* a block subsidy but the block subsidy has become negligible or zero.
* Now consider a censoring miner.
  * If the miner rejects particular transactions (i.e. "censors") the miner loses out on the fees of those transactions.
  * Presumably, the miner does this because it gains other benefits from the censorship, economically equal or better to the earnings lost.
  * If the blockchain had a block subsidy, then the loss the miner incurs is small relative to the total earnings of each block.
  * If the blockchain had 0 block subsidy, then the loss the miner incurs is large relative to the total earnings of each block.
  * Thus, in the latter situation, the external benefit the miner gains from the censorship has to be proportionately larger than in the first situation.

Basically, the block subsidy is a market distortion: the block subsidy erodes the value of held coins to pay for the security of coins being moved.
But the block subsidy is still issued whether or not coins being moved are censored or not censored.
Thus, there is no incentive, considering *only* the block subsidy, to not censor coin movements.
Only per-transaction fees have an incentive to not censor coin movements.


Thus, we should instead prepare for a future where the block subsidy *must* be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.


Regards,
ZmnSCPxj

From macwhyte at gmail.com  Sat Jul  9 22:21:16 2022
From: macwhyte at gmail.com (James MacWhyte)
Date: Sun, 10 Jul 2022 00:21:16 +0200
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAJ4-pEA7WJpbExcsgdPWVNuZLrbDDhVYr37g6_6NSf7t41eB4w@mail.gmail.com>
References: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
 <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
 <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>
 <CAH+Axy4X+uQG5Vw0Efiz6AtNyK=++h-jDeZL1ZxpVJus8BVKeA@mail.gmail.com>
 <CAJ4-pEA7WJpbExcsgdPWVNuZLrbDDhVYr37g6_6NSf7t41eB4w@mail.gmail.com>
Message-ID: <CAH+Axy7bgRgHKZD4hsfVsnUrNooa2kvxwNUhzycmG-MahAgnUQ@mail.gmail.com>

Thanks, Zac!

I indeed did get the napkin math very wrong. I now get around 10^30 total
possible phrases, which would take an impossibly long time to brute force.
So, it is less entropy but probably still sufficient for low-stakes usage.

James


On Sat, Jul 9, 2022 at 10:31 PM Zac Greenwood <zachgrw at gmail.com> wrote:

> Sorting a seed alphabetically reduces entropy by ~29 bits.
>
> A 12-word seed has (12, 12) permutations or 479 million, which is ln(469m)
> / ln(2) ~= 29 bits of entropy. Sorting removes this entropy entirely,
> reducing the seed entropy from 128 to 99 bits.
>
> Zac
>
>
> On Fri, 8 Jul 2022 at 16:09, James MacWhyte via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>>
>> What do you do if the "first" word (of 12), happens to be the last word
>>> in the list alphabetically?
>>>
>>
>> That couldn't happen. If one word is the very last from the wordlist, it
>> would end up at the end of your mnemonic once you rearrange your 12 words
>> alphabetically.
>>
>> However!
>>
>> (@vjudeu) Choosing 11 random words and then sorting them alphabetically
>> before assigning a checksum would reduce entropy considerably. If you think
>> about it, to bruteforce the entire keyspace one would only need to come up
>> with every possible combination of 11 words + 1 checksum. I'm not the best
>> at napkin math, but I think that leaves you with around 10 trillion
>> combinations, which would only take a couple months to exhaust with
>> hardware that can do 1 million guesses per second.
>>
>>
>> James
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220710/26e276d1/attachment-0001.html>

From anton at sancoder.com  Sat Jul  9 23:46:19 2022
From: anton at sancoder.com (Anton Shevchenko)
Date: Sat, 09 Jul 2022 16:46:19 -0700
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAJ4-pEA7WJpbExcsgdPWVNuZLrbDDhVYr37g6_6NSf7t41eB4w@mail.gmail.com>
References: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
 <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
 <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>
 <CAH+Axy4X+uQG5Vw0Efiz6AtNyK=++h-jDeZL1ZxpVJus8BVKeA@mail.gmail.com>
 <CAJ4-pEA7WJpbExcsgdPWVNuZLrbDDhVYr37g6_6NSf7t41eB4w@mail.gmail.com>
Message-ID: <bf3b36b1-e999-43bf-88d4-3aab19d10e9d@www.fastmail.com>

I would say removing ordering from 12-word seed reduces 25 bits of entropy, not 29. Additional 4 bits come from checksum (12 words encode 132 bits, not 128).

My idea [for developing this project] was to feed its output to some kind of AI story generator (GPT-3 based?) so a user can remember a story, not ordered words. But as others pointed out, having 12 words without order is probably good enough. So at this point there's not much sense of using the proposed encoding. Unless a remembered story has wholes/errors. In this case recovering few words would be easier with unordered encoding. Any thoughts?

--  Anton Shevchenko


On Sat, Jul 9, 2022, at 1:31 PM, Zac Greenwood via bitcoin-dev wrote:
> Sorting a seed alphabetically reduces entropy by ~29 bits.
> 
> A 12-word seed has (12, 12) permutations or 479 million, which is ln(469m) / ln(2) ~= 29 bits of entropy. Sorting removes this entropy entirely, reducing the seed entropy from 128 to 99 bits.
> 
> Zac
> 
> 
> On Fri, 8 Jul 2022 at 16:09, James MacWhyte via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> 
>>> What do you do if the "first" word (of 12), happens to be the last word in the list alphabetically?
>> 
>> That couldn't happen. If one word is the very last from the wordlist, it would end up at the end of your mnemonic once you rearrange your 12 words alphabetically.
>> 
>> However! 
>> 
>> (@vjudeu) Choosing 11 random words and then sorting them alphabetically before assigning a checksum would reduce entropy considerably. If you think about it, to bruteforce the entire keyspace one would only need to come up with every possible combination of 11 words + 1 checksum. I'm not the best at napkin math, but I think that leaves you with around 10 trillion combinations, which would only take a couple months to exhaust with hardware that can do 1 million guesses per second.
>> 
>> 
>> James
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/ca003047/attachment.html>

From dizzle at pointbiz.com  Sat Jul  9 22:21:05 2022
From: dizzle at pointbiz.com (Peter)
Date: Sat, 09 Jul 2022 22:21:05 +0000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <-CViFyCax8EX2mKN9rCe6E9I04MRhCsyvO-qTnz03QoyLi1tv3-zmyBdd5D69vrhTvQXMvbguTeN4Z1JCnWSi6cK-JcLmnGNklnOgKURaJw=@pointbiz.com>

>At present, all notable proof-of-work currencies reward miners with both a block reward, and transaction fees. With most currencies (including Bitcoin) phasing out block rewards over time. However in no currency have transaction fees consistently been more than 5% to 10% of the total mining reward[^fee-in-reward], with the exception of Ethereum, from June 2020 to Aug 2021. To date no proof-of-work currency has ever operated solely on transaction fees[^pow-tweet], and academic analysis has found that in this condition block generation is unstable.[^instability-without-block-reward] To paraphrase Andrew Poelstra, it's a scary phase change that no other coin has gone through.[^apoelstra-quote]

We should consider that a fixed block reward doesn't guarantee that the value of energy securing transactions is greater than the value being transacted in a practical amount of blocks where practical is a certain amount of time (currently 1 hour). If the energy expenditure is less than the value transacted in a given amount of blocks those transactions are at risk of being double spent. We have seen this failure with Ethereum Classic where any meaningful amount of value would need 2 weeks of blocks to be deeply confirmed for economic purposes.

We should also not assume that the Bitcoin emission curve implies there will be zero block rewards for mining Bitcoin, let me explain. There's an ugly solution that doesn't require a hard fork (I'm not advocating for this solution just presenting it) where a new coin is launched to merge mine with Bitcoin and that new coin (called BTail for discussion purposes) would enfranchise everyone who is a Bitcoin UTXO holder at the moment of the real-time launch of BTail at a well known block height. Using a technique we have seen with BCH to create an arguably fair launch. BTail would have a floating exchange rate to Bitcoin and its success or failure in terms of adoption would be determined by the market. It would require the same network effect barriers as a hard fork (opt-in) but would not put Bitcoin at risk while people can take time to install new software (and write new integrations) as they would with a soft fork.

Regards

Peter Kroll
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220709/ebf1878e/attachment.html>

From me at tobin.cc  Sun Jul 10 02:10:40 2022
From: me at tobin.cc (Tobin Harding)
Date: Sun, 10 Jul 2022 12:10:40 +1000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YsmfTubgqua0FHR0@petertodd.org>
References: <YsmbdMlt/KnvRs3U@petertodd.org>
 <D7C30506-A95D-4B43-A1BA-37F13DAD5C6F@voskuil.org>
 <YsmfTubgqua0FHR0@petertodd.org>
Message-ID: <20220710021040.GB10595@aerus>

Hi Peter,

Interesting blog post. 

On Sat, Jul 09, 2022 at 11:31:26AM -0400, Peter Todd via bitcoin-dev wrote:
> On Sat, Jul 09, 2022 at 08:24:51AM -0700, Eric Voskuil wrote:
> > To clarify, price inflation is not caused by market production. Attributing the observed lack of inflation (eg fee %) to loss is an assumed relation.
> 
> My article is a mathematical proof that has nothing to do with observations of
> inflation.
> 
> What I did is prove that if there is tail emission/fixed supply, the coin
> supply will converge towards a fixed amount because the coin supply dependant
> rate of coin loss balances out the fixed rate of coin production.
> 
> That proof has nothing to do with market dynamics and would happen in any
> system, economic or not, with similar underlying dynamics.

I'm not a mathematician but I think your models assumption that coin
loss is proportional to number of coins misses something, correct me if
I'm wrong but as value of coins goes up is it not reasonable to expect
coin loss to go down as people are more careful (not to mention
improvements in tooling and education).

Is it really possible to model coin loss as exponential decay
considering such things (I'm not being facetious, that is a real
question, like I said I'm not a mathematician)?

Cheers,
Tobin.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220710/3ff76efc/attachment-0001.sig>

From namanhd at gmail.com  Sun Jul 10 06:54:16 2022
From: namanhd at gmail.com (naman naman)
Date: Sun, 10 Jul 2022 10:54:16 +0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <Ysm/dsclRdCUaiJ5@petertodd.org>
References: <YsmbdMlt/KnvRs3U@petertodd.org>
 <D7C30506-A95D-4B43-A1BA-37F13DAD5C6F@voskuil.org>
 <YsmfTubgqua0FHR0@petertodd.org>
 <CA+SxJWAyKg-Hc4cYOkMrzXqer5jEbNcJ2f04BWfbyQ78bysZXg@mail.gmail.com>
 <Ysm/dsclRdCUaiJ5@petertodd.org>
Message-ID: <CA+SxJWDNRdRNO0e6v0GA4temoVRTDG-9c19zWf9r1Zo1LHQwmQ@mail.gmail.com>

Hello ,

Thanks for the correction - it however boils down to the same principle :
diluting other holders, possibly excessively, if you miscalculate the coins
"lost".

Which boils down to the same question again : How would you definitively
know that coins are "lost" or simply not accessed for x amount of time?

Regards,
thenoblebot

On Sat, 9 Jul, 2022, 9:48 pm Peter Todd, <pete at petertodd.org> wrote:

> On Sat, Jul 09, 2022 at 09:43:49PM +0400, naman naman wrote:
> > Hi,
> >
> > This approach raises the obvious question : If someone hasn't had access
> to
> > their coins in a long time (yrs, decades, however you want to define it)
> -
> > and they wish to access/move them after such a time - isn't your proposal
> > simply taking away their ability to do so? Some might call it : stealing
> > their coins.
> >
> > How does one conclusively prove that "lost" coins are "lost forever"?
>
> Re-read the article:
> https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary
>
> It has nothing to do with re-assigning ownership of coins.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220710/0ae17a8a/attachment.html>

From vjudeu at gazeta.pl  Sun Jul 10 07:08:49 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Sun, 10 Jul 2022 09:08:49 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <Ysl4t9K8lfxRSsNM@petertodd.org>
Message-ID: <165002130-e93e1ef73ec867025cbf3ea9b2d142bc@pmq2v.m5r2.onet>

> Adding tail emission to Bitcoin would be a hard fork: a incompatible rule change that existing Bitcoin nodes would reject as invalid.

It won't, because we have zero satoshis. That means, it is possible to create any backward-compatible way of storing amounts. And if we will ever implement things like hiding amounts, then using zero would be a good way to maintain this backward compatibility.

> Ultimately, as long as a substantial fraction of the Bitcoin community continue to run full nodes, the only way tail emission could ever be added to Bitcoin is by convincing that same community that it is a good idea.

Not really, because people that run full nodes, just accepted Segwit and Taproot. They had no choice. And in case of zero satoshis, it could be the same: you would see zero if you look at raw bytes, but you will see non-zero values, if you use some upgraded client, that will support amount hiding, or other features.

Segwit: old nodes see no new signatures, new nodes see all signatures
Zero satoshis: old nodes see new zero amounts, new nodes see all amounts

It is that simple.

On 2022-07-09 14:47:14 user Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> New blog post:

https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary

tl;dr: Due to lost coins, a tail emission/fixed reward actually results in a
stable money supply. Not an (monetarily) inflationary supply.

...and for the purposes of reply/discussion, attached is the article itself in
markdown format:

---
layout: post
title:  "Surprisingly, Tail Emission Is Not Inflationary"
date:   2022-07-09
tags:
- bitcoin
- monero
---

At present, all notable proof-of-work currencies reward miners with both a block
reward, and transaction fees. With most currencies (including Bitcoin) phasing
out block rewards over time. However in no currency have transaction fees
consistently been more than 5% to 10% of the total mining
reward[^fee-in-reward], with the exception of Ethereum, from June 2020 to Aug 2021.
To date no proof-of-work currency has ever operated solely on transaction
fees[^pow-tweet], and academic analysis has found that in this condition block
generation is unstable.[^instability-without-block-reward] To paraphrase Andrew
Poelstra, it's a scary phase change that no other coin has gone through.[^apoelstra-quote]

[^pow-tweet]: [I asked on Twitter](https://twitter.com/peterktodd/status/1543231264597090304) and no-one replied with counter-examples.

[^fee-in-reward]: [Average Fee Percentage in Total Block Reward](https://bitinfocharts.com/comparison/fee_to_reward-btc-eth-bch-ltc-doge-xmr-bsv-dash-zec.html#alltime)

[^instability-without-block-reward]: [On the Instability of Bitcoin Without the Block Reward](https://www.cs.princeton.edu/~arvindn/publications/mining_CCS.pdf)

[^apoelstra-quote]: [From a panel at TABConf 2021](https://twitter.com/peterktodd/status/1457066946898317316)

Monero has chosen to implement what they call [tail
emission](https://www.getmonero.org/resources/moneropedia/tail-emission.html):
a fixed reward per block that continues indefinitely. Dogecoin also has a fixed
reward, which they widely - and incorrectly - refer to as an "abundant" supply[^dogecoin-abundant].

[^dogecoin-abundant]: Googling "dogecoin abundant" returns dozens of hits.

This article will show that a fixed block reward does **not** lead to an
abundant supply. In fact, due to the inevitability of lost coins, a fixed
reward converges to a **stable** monetary supply that is neither inflationary
nor deflationary, with the total supply proportional to rate of tail emission
and probability of coin loss.

Credit where credit is due: after writing the bulk of this article I found out
that Monero developer [smooth_xmr](https://www.reddit.com/user/smooth_xmr/)
also observed that tail emission results in a stable coin supply
[a few years ago](https://www.reddit.com/r/Monero/comments/4z0azk/maam_28_monero_ask_anything_monday/d6sixyi/).
There's probably others too: it's a pretty obvious result.


<div markdown="1" class="post-toc">
# Contents
{:.no_toc}
0. TOC
{:toc}
</div>

## Modeling the Fixed-Reward Monetary Supply

Since the number of blocks is large, we can model the monetary supply as a
continuous function $$N(t)$$, where $$t$$ is a given moment in time. If the
block reward is fixed we can model the reward as a slope $$k$$ added to an
initial supply $$N_0$$:

$$
N(t) = N_0 + kt
$$

Of course, this isn't realistic as coins are constantly being lost due to
deaths, forgotten passphrases, boating accidents, etc. These losses are
independent: I'm not any more or less likely to forget my passphrase because
you recently lost your coins in a boating accident ? an accident I probably
don't even know happened. Since the number of individual coins (and their
owners) is large ? as with the number of blocks ? we can model this loss as
though it happens continuously.

Since coins can only be lost once, the *rate* of coin loss at time $$t$$ is
proportional to the total supply *at that moment* in time. So let's look at the
*first derivative* of our fixed-reward coin supply:

$$
\frac{dN(t)}{dt} = k
$$

...and subtract from it the lost coins, using $$\lambda$$ as our [coin loss
constant](https://en.wikipedia.org/wiki/Exponential_decay):

$$
\frac{dN(t)}{dt} = k - \lambda N(t)
$$

That's a first-order differential equation, which can be easily solved with
separation of variables to get:

$$
N(t) = \frac{k}{\lambda} - Ce^{-\lambda t}
$$

To remove the integration constant $$C$$, let's look at $$t = 0$$, where the
coin supply is $$N_0$$:

$$
\begin{align}
    N_0 &= \frac{k}{\lambda} - Ce^{-\lambda 0} = \frac{k}{\lambda} - C \\
      C &= \frac{k}{\lambda} - N_0
\end{align}
$$

Thus:

$$
\begin{align}
    N(t) &= \frac{k}{\lambda} - \left(\frac{k}{\lambda} - N_0 \right)e^{-\lambda t} \\
         &= \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda} \right)e^{-\lambda t}
\end{align}
$$


## Long Term Coin Supply

It's easy to see that in the long run, the second half of the coin supply
equation goes to zero because $$\lim_{t \to \infty} e^{-\lambda t} = 0$$:

$$
\begin{align}
    \lim_{t \to \infty} N(t) &= \lim_{t \to \infty} \left[ \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda} \right)e^{-\lambda t} \right ] = \frac{k}{\lambda} \\
                   N(\infty) &= \frac{k}{\lambda}
\end{align}
$$

An intuitive explanation for this result is that in the long run, the initial
supply $$N_0$$ doesn't matter, because approximately all of those coins will
eventually be lost. Thus in the long run, the coin supply will converge towards
$$\frac{k}{\lambda}$$, the point where coins are created just as fast as they
are lost.


## Short Term Dynamics and Economic Considerations

Of course, the intuitive explanation for why supply converges to
$$\frac{k}{\lambda}$$, also tells us that supply must converge fairly slowly:
if 1% of something is lost per year, after 100 years 37% of the initial supply
remains. It's not clear what the rate of lost coins actually is in a mature,
valuable, coin. But 1%/year is likely to be a good guess ? quite possibly less.

In the case of Monero, they've introduced tail emission at a point where it
represents a 0.9% apparent monetary inflation rate[^p2pool-tail]. Since the number of
previously lost coins, and the current rate of coin loss, is
unknown[^unknowable] it's not possible to know exactly what the true monetary
inflation rate is right now. But regardless, the rate will only converge
towards zero going forward.

[^unknowable]: Being a privacy coin with [shielded amounts](https://localmonero.co/blocks/richlist), it's not even possible to get an estimate of the total amount of XMR in active circulation.

[^p2pool-tail]: P2Pool operates [a page with real-time date figures](https://p2pool.io/tail.html).

If an existing coin decides to implement tail emission as a means to fund
security, choosing an appropriate emission rate is simple: decide on the
maximum amount of inflation you are willing to have in the worst case, and set
the tail emission accordingly. In reality monetary inflation will be even lower
on day zero due to lost coins, and in the long run, it will converge towards
zero.

The fact is, economic volatility dwarfs the effect of small amounts of
inflation. Even a 0.5% inflation rate over 50 years only leads to a 22% drop.
Meanwhile at the time of writing, Bitcoin has dropped 36% in the past year, and
gained 993% over the past 5 years. While this discussion is a nice excuse to
use some mildly interesting math, in the end it's totally pedantic.

## Could Bitcoin Add Tail Emission?

...and why could Monero?

Adding tail emission to Bitcoin would be a hard fork: a incompatible rule
change that existing Bitcoin nodes would reject as invalid. While Monero was
able to get sufficiently broad consensus in the community to implement tail
emission, it's unclear at best if it would ever be possible to achieve that for
the much larger[^btc-vs-xmr-market-cap] Bitcoin. Additionally, Monero has a
culture of frequent hard forks that simply does not exist in Bitcoin.

[^btc-vs-xmr-market-cap]: [As of writing](https://web.archive.org/web/20220708143920/https://www.coingecko.com/), the apparent market cap of Bitcoin is $409 billion, almost 200x larger than Monero's $2.3 billion.

Ultimately, as long as a substantial fraction of the Bitcoin community continue
to run full nodes, the only way tail emission could ever be added to Bitcoin is
by convincing that same community that it is a good idea.


## Footnotes
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From john.tromp at gmail.com  Sun Jul 10 07:44:01 2022
From: john.tromp at gmail.com (John Tromp)
Date: Sun, 10 Jul 2022 09:44:01 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <mailman.80287.1657405305.8511.bitcoin-dev@lists.linuxfoundation.org>
References: <mailman.80287.1657405305.8511.bitcoin-dev@lists.linuxfoundation.org>
Message-ID: <CAOU__fwkYm+9_JP_fHEoK9XEmEUzF7Nzes1YDL492DpnZ1CQRw@mail.gmail.com>

A parallel discussion is taking place at
https://bitcointalk.org/index.php?topic=5405755.0

From jacob.eliosoff at gmail.com  Sun Jul 10 10:18:17 2022
From: jacob.eliosoff at gmail.com (Jacob Eliosoff)
Date: Sun, 10 Jul 2022 05:18:17 -0500
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <Ysl4t9K8lfxRSsNM@petertodd.org>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
Message-ID: <CAAUaCygd1dBXTNG_Hh9K-JBAMkAWqbRVRrY=N8obLtRLGEtgtg@mail.gmail.com>

> Credit where credit is due: after writing the bulk of this article I
found out
> that Monero developer [smooth_xmr](https://www.reddit.com/user/smooth_xmr/
)
> also observed that tail emission results in a stable coin supply
> [a few years ago](
https://www.reddit.com/r/Monero/comments/4z0azk/maam_28_monero_ask_anything_monday/d6sixyi/
).
> There's probably others too: it's a pretty obvious result.

Fwiw, Joe Lubin, April 2014:  "The expected rate of annual loss and
destruction of ETH will balance the rate of issuance.  Under this dynamic,
a quasi-steady state is reached and the amount of extant ETH no longer
grows."
https://blog.ethereum.org/2014/04/10/the-issuance-model-in-ethereum/

As you say, probably an observation various people have made.  (Ethereum
has had some updates to its issuance model since 2014, in particular
EIP-1559 and the block reward reduction coming with PoS.  But they've had a
fixed rather than halving block subsidy since launch so the question of
whether it implied infinite supply often came up.)


On Sat, Jul 9, 2022, 7:47 AM Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> New blog post:
>
> https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary
>
> tl;dr: Due to lost coins, a tail emission/fixed reward actually results in
> a
> stable money supply. Not an (monetarily) inflationary supply.
>
> ...and for the purposes of reply/discussion, attached is the article
> itself in
> markdown format:
>
> ---
> layout: post
> title:  "Surprisingly, Tail Emission Is Not Inflationary"
> date:   2022-07-09
> tags:
> - bitcoin
> - monero
> ---
>
> At present, all notable proof-of-work currencies reward miners with both a
> block
> reward, and transaction fees. With most currencies (including Bitcoin)
> phasing
> out block rewards over time. However in no currency have transaction fees
> consistently been more than 5% to 10% of the total mining
> reward[^fee-in-reward], with the exception of Ethereum, from June 2020 to
> Aug 2021.
> To date no proof-of-work currency has ever operated solely on transaction
> fees[^pow-tweet], and academic analysis has found that in this condition
> block
> generation is unstable.[^instability-without-block-reward] To paraphrase
> Andrew
> Poelstra, it's a scary phase change that no other coin has gone
> through.[^apoelstra-quote]
>
> [^pow-tweet]: [I asked on Twitter](
> https://twitter.com/peterktodd/status/1543231264597090304) and no-one
> replied with counter-examples.
>
> [^fee-in-reward]: [Average Fee Percentage in Total Block Reward](
> https://bitinfocharts.com/comparison/fee_to_reward-btc-eth-bch-ltc-doge-xmr-bsv-dash-zec.html#alltime
> )
>
> [^instability-without-block-reward]: [On the Instability of Bitcoin
> Without the Block Reward](
> https://www.cs.princeton.edu/~arvindn/publications/mining_CCS.pdf)
>
> [^apoelstra-quote]: [From a panel at TABConf 2021](
> https://twitter.com/peterktodd/status/1457066946898317316)
>
> Monero has chosen to implement what they call [tail
> emission](
> https://www.getmonero.org/resources/moneropedia/tail-emission.html):
> a fixed reward per block that continues indefinitely. Dogecoin also has a
> fixed
> reward, which they widely - and incorrectly - refer to as an "abundant"
> supply[^dogecoin-abundant].
>
> [^dogecoin-abundant]: Googling "dogecoin abundant" returns dozens of hits.
>
> This article will show that a fixed block reward does **not** lead to an
> abundant supply. In fact, due to the inevitability of lost coins, a fixed
> reward converges to a **stable** monetary supply that is neither
> inflationary
> nor deflationary, with the total supply proportional to rate of tail
> emission
> and probability of coin loss.
>
> Credit where credit is due: after writing the bulk of this article I found
> out
> that Monero developer [smooth_xmr](https://www.reddit.com/user/smooth_xmr/
> )
> also observed that tail emission results in a stable coin supply
> [a few years ago](
> https://www.reddit.com/r/Monero/comments/4z0azk/maam_28_monero_ask_anything_monday/d6sixyi/
> ).
> There's probably others too: it's a pretty obvious result.
>
>
> <div markdown="1" class="post-toc">
> # Contents
> {:.no_toc}
> 0. TOC
> {:toc}
> </div>
>
> ## Modeling the Fixed-Reward Monetary Supply
>
> Since the number of blocks is large, we can model the monetary supply as a
> continuous function $$N(t)$$, where $$t$$ is a given moment in time. If the
> block reward is fixed we can model the reward as a slope $$k$$ added to an
> initial supply $$N_0$$:
>
> $$
> N(t) = N_0 + kt
> $$
>
> Of course, this isn't realistic as coins are constantly being lost due to
> deaths, forgotten passphrases, boating accidents, etc. These losses are
> independent: I'm not any more or less likely to forget my passphrase
> because
> you recently lost your coins in a boating accident ? an accident I probably
> don't even know happened. Since the number of individual coins (and their
> owners) is large ? as with the number of blocks ? we can model this loss as
> though it happens continuously.
>
> Since coins can only be lost once, the *rate* of coin loss at time $$t$$ is
> proportional to the total supply *at that moment* in time. So let's look
> at the
> *first derivative* of our fixed-reward coin supply:
>
> $$
> \frac{dN(t)}{dt} = k
> $$
>
> ...and subtract from it the lost coins, using $$\lambda$$ as our [coin loss
> constant](https://en.wikipedia.org/wiki/Exponential_decay):
>
> $$
> \frac{dN(t)}{dt} = k - \lambda N(t)
> $$
>
> That's a first-order differential equation, which can be easily solved with
> separation of variables to get:
>
> $$
> N(t) = \frac{k}{\lambda} - Ce^{-\lambda t}
> $$
>
> To remove the integration constant $$C$$, let's look at $$t = 0$$, where
> the
> coin supply is $$N_0$$:
>
> $$
> \begin{align}
>     N_0 &= \frac{k}{\lambda} - Ce^{-\lambda 0} = \frac{k}{\lambda} - C \\
>       C &= \frac{k}{\lambda} - N_0
> \end{align}
> $$
>
> Thus:
>
> $$
> \begin{align}
>     N(t) &= \frac{k}{\lambda} - \left(\frac{k}{\lambda} - N_0
> \right)e^{-\lambda t} \\
>          &= \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda}
> \right)e^{-\lambda t}
> \end{align}
> $$
>
>
> ## Long Term Coin Supply
>
> It's easy to see that in the long run, the second half of the coin supply
> equation goes to zero because $$\lim_{t \to \infty} e^{-\lambda t} = 0$$:
>
> $$
> \begin{align}
>     \lim_{t \to \infty} N(t) &= \lim_{t \to \infty} \left[
> \frac{k}{\lambda} + \left(N_0 - \frac{k}{\lambda} \right)e^{-\lambda t}
> \right ] = \frac{k}{\lambda} \\
>                    N(\infty) &= \frac{k}{\lambda}
> \end{align}
> $$
>
> An intuitive explanation for this result is that in the long run, the
> initial
> supply $$N_0$$ doesn't matter, because approximately all of those coins
> will
> eventually be lost. Thus in the long run, the coin supply will converge
> towards
> $$\frac{k}{\lambda}$$, the point where coins are created just as fast as
> they
> are lost.
>
>
> ## Short Term Dynamics and Economic Considerations
>
> Of course, the intuitive explanation for why supply converges to
> $$\frac{k}{\lambda}$$, also tells us that supply must converge fairly
> slowly:
> if 1% of something is lost per year, after 100 years 37% of the initial
> supply
> remains. It's not clear what the rate of lost coins actually is in a
> mature,
> valuable, coin. But 1%/year is likely to be a good guess ? quite possibly
> less.
>
> In the case of Monero, they've introduced tail emission at a point where it
> represents a 0.9% apparent monetary inflation rate[^p2pool-tail]. Since
> the number of
> previously lost coins, and the current rate of coin loss, is
> unknown[^unknowable] it's not possible to know exactly what the true
> monetary
> inflation rate is right now. But regardless, the rate will only converge
> towards zero going forward.
>
> [^unknowable]: Being a privacy coin with [shielded amounts](
> https://localmonero.co/blocks/richlist), it's not even possible to get an
> estimate of the total amount of XMR in active circulation.
>
> [^p2pool-tail]: P2Pool operates [a page with real-time date figures](
> https://p2pool.io/tail.html).
>
> If an existing coin decides to implement tail emission as a means to fund
> security, choosing an appropriate emission rate is simple: decide on the
> maximum amount of inflation you are willing to have in the worst case, and
> set
> the tail emission accordingly. In reality monetary inflation will be even
> lower
> on day zero due to lost coins, and in the long run, it will converge
> towards
> zero.
>
> The fact is, economic volatility dwarfs the effect of small amounts of
> inflation. Even a 0.5% inflation rate over 50 years only leads to a 22%
> drop.
> Meanwhile at the time of writing, Bitcoin has dropped 36% in the past
> year, and
> gained 993% over the past 5 years. While this discussion is a nice excuse
> to
> use some mildly interesting math, in the end it's totally pedantic.
>
> ## Could Bitcoin Add Tail Emission?
>
> ...and why could Monero?
>
> Adding tail emission to Bitcoin would be a hard fork: a incompatible rule
> change that existing Bitcoin nodes would reject as invalid. While Monero
> was
> able to get sufficiently broad consensus in the community to implement tail
> emission, it's unclear at best if it would ever be possible to achieve
> that for
> the much larger[^btc-vs-xmr-market-cap] Bitcoin. Additionally, Monero has a
> culture of frequent hard forks that simply does not exist in Bitcoin.
>
> [^btc-vs-xmr-market-cap]: [As of writing](
> https://web.archive.org/web/20220708143920/https://www.coingecko.com/),
> the apparent market cap of Bitcoin is $409 billion, almost 200x larger than
> Monero's $2.3 billion.
>
> Ultimately, as long as a substantial fraction of the Bitcoin community
> continue
> to run full nodes, the only way tail emission could ever be added to
> Bitcoin is
> by convincing that same community that it is a good idea.
>
>
> ## Footnotes
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220710/1c603cdd/attachment-0001.html>

From alicexbt at protonmail.com  Sun Jul 10 14:17:36 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Sun, 10 Jul 2022 14:17:36 +0000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
 <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
Message-ID: <eFdBAPulC6BoW5zBt30Mq4fXhnRzVENMjsfGrj1Yzbi-Z-wje21pCwEpMQ6Tc27m8LdhMN_66UX3Ze1BNAU9rsgqF-1JRV40s1QU9zSJ6js=@protonmail.com>

Hi ZmnSCPxj,


> Thus, we should instead prepare for a future where the block subsidy must be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
> Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.

`consensus.nSubsidyHalvingInterval` for mainnet in [chainparams.cpp][1] can be decreased to 195000. This will reduce the number of halvings from 34 to 14 and subsidy will be 0 when it becomes less than 0.01 although not sure if this will be a soft fork.

I doubt there will be consensus for it because all the [projections and predictability][2] about bitcoin(currency) would be affected by this change. Maybe everyone can agree with this change if most of the miners start being 'compliant' like one of the coinjoin implementation.

[1]: https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp#L66
[2]: https://en.bitcoin.it/wiki/Controlled_supply


/dev/fd0

Sent with Proton Mail secure email.

------- Original Message -------
On Saturday, July 9th, 2022 at 9:59 PM, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:


> Good morning e, and list,
>
> > Yet you posted several links which made that specific correlation, to which I was responding.
> >
> > Math cannot prove how much coin is ?lost?, and even if it was provable that the amount of coin lost converges to the amount produced, it is of no consequence - for the reasons I?ve already pointed out. The amount of market production has no impact on market price, just as it does not with any other good.
> >
> > The reason to object to perpetual issuance is the impact on censorship resistance, not on price.
>
>
> To clarify about censorship resistance and perpetual issuance ("tail emission"):
>
> * Suppose I have two blockchains, one with a constant block subsidy, and one which had a block subsidy but the block subsidy has become negligible or zero.
> * Now consider a censoring miner.
> * If the miner rejects particular transactions (i.e. "censors") the miner loses out on the fees of those transactions.
> * Presumably, the miner does this because it gains other benefits from the censorship, economically equal or better to the earnings lost.
> * If the blockchain had a block subsidy, then the loss the miner incurs is small relative to the total earnings of each block.
> * If the blockchain had 0 block subsidy, then the loss the miner incurs is large relative to the total earnings of each block.
> * Thus, in the latter situation, the external benefit the miner gains from the censorship has to be proportionately larger than in the first situation.
>
> Basically, the block subsidy is a market distortion: the block subsidy erodes the value of held coins to pay for the security of coins being moved.
> But the block subsidy is still issued whether or not coins being moved are censored or not censored.
> Thus, there is no incentive, considering only the block subsidy, to not censor coin movements.
> Only per-transaction fees have an incentive to not censor coin movements.
>
>
> Thus, we should instead prepare for a future where the block subsidy must be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
> Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.
>
>
> Regards,
> ZmnSCPxj
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From pete at petertodd.org  Sun Jul 10 17:27:05 2022
From: pete at petertodd.org (Peter Todd)
Date: Sun, 10 Jul 2022 13:27:05 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
 <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
Message-ID: <YssL6VL9y6EwyBjr@petertodd.org>

On Sat, Jul 09, 2022 at 09:59:06PM +0000, ZmnSCPxj wrote:
> Good morning e, and list,
> 
> > Yet you posted several links which made that specific correlation, to which I was responding.
> >
> > Math cannot prove how much coin is ?lost?, and even if it was provable that the amount of coin lost converges to the amount produced, it is of no consequence - for the reasons I?ve already pointed out. The amount of market production has no impact on market price, just as it does not with any other good.
> >
> > The reason to object to perpetual issuance is the impact on censorship resistance, not on price.
> 
> To clarify about censorship resistance and perpetual issuance ("tail emission"):
> 
> * Suppose I have two blockchains, one with a constant block subsidy, and one which *had* a block subsidy but the block subsidy has become negligible or zero.
> * Now consider a censoring miner.
>   * If the miner rejects particular transactions (i.e. "censors") the miner loses out on the fees of those transactions.
>   * Presumably, the miner does this because it gains other benefits from the censorship, economically equal or better to the earnings lost.
>   * If the blockchain had a block subsidy, then the loss the miner incurs is small relative to the total earnings of each block.
>   * If the blockchain had 0 block subsidy, then the loss the miner incurs is large relative to the total earnings of each block.
>   * Thus, in the latter situation, the external benefit the miner gains from the censorship has to be proportionately larger than in the first situation.

Now let's look at an actual, real-world, attempt to censor Bitcoin via mining:

https://petertodd.org/2016/mit-chainanchor-bribing-miners-to-regulate-bitcoin

The Chain Anchor model was to simply straight up bribe and coerce miners into
only accepting compliant transactions. That's only effective when a large % of
miners actually do that - if a small % do the effect on confirmation time is
miniscule. Obviously, censoring transactions is a significant threat to the
value of Bitcoin - and thus all your Bitcoin-only hashing equipment.

So how do you make a Chain Anchor attack cheaper? By reducing total mining
reward, and making it tied to transaction volume rather than the value of
Bitcoin as a whole.

> Basically, the block subsidy is a market distortion: the block subsidy erodes the value of held coins to pay for the security of coins being moved.

The block subsidy directly ties miner revenue to the total value of Bitcoin:
that's exactly how you want to incentivise a service that keeps Bitcoin secure.

> But the block subsidy is still issued whether or not coins being moved are censored or not censored.
> Thus, there is no incentive, considering *only* the block subsidy, to not censor coin movements.
> Only per-transaction fees have an incentive to not censor coin movements.

The strongest incentive not to censor is because it'll keep Bitcoin valuable.
Not some piddling transaction fees.

> Thus, we should instead prepare for a future where the block subsidy *must* be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
> Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.

Absolutely not.

The historical reality of transaction fees is they've had huge swings, about
10x more volatile than total miner revenue. In the past three years they've
ranged from $8.4 million USD/30-day-average to as little as $140k/30-day-avg,
with the current amount being $370k/30-day-avg. That's a 60x difference.

Meanwhile miner revenue has ranged from $60 million/30-day-avg to $9
million/30-day-avg, a 7x difference.

https://www.blockchain.com/charts/fees-usd-per-transaction

We want mining to be is a boring, predictable, business that anyone can do,
with as little reward as possible to larger scale miners. That's what you need
for maximal decentralization. Making mining a sophisticated business reduces
the pool of entities that can profitably compete in it, and increases their
visibility to government regulation.

Additionally, we want mining to be predictable to avoid having large gluts of
unprofitable mining equipment laying around: mining equipment that could be
used to attack Bitcoin. Fee revenue is obviously doing a much worse job of
achieving that goal than subsidy revenue.


If transaction-fee-only mining was such a good idea, why hasn't any other coin
done it?

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220710/ae1fdb12/attachment.sig>

From pete at petertodd.org  Sun Jul 10 17:29:51 2022
From: pete at petertodd.org (Peter Todd)
Date: Sun, 10 Jul 2022 13:29:51 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <eFdBAPulC6BoW5zBt30Mq4fXhnRzVENMjsfGrj1Yzbi-Z-wje21pCwEpMQ6Tc27m8LdhMN_66UX3Ze1BNAU9rsgqF-1JRV40s1QU9zSJ6js=@protonmail.com>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
 <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
 <eFdBAPulC6BoW5zBt30Mq4fXhnRzVENMjsfGrj1Yzbi-Z-wje21pCwEpMQ6Tc27m8LdhMN_66UX3Ze1BNAU9rsgqF-1JRV40s1QU9zSJ6js=@protonmail.com>
Message-ID: <YssMj9KTiBi7KeuW@petertodd.org>

On Sun, Jul 10, 2022 at 02:17:36PM +0000, alicexbt via bitcoin-dev wrote:
> Hi ZmnSCPxj,
> 
> 
> > Thus, we should instead prepare for a future where the block subsidy must be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
> > Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.
> 
> `consensus.nSubsidyHalvingInterval` for mainnet in [chainparams.cpp][1] can be decreased to 195000. This will reduce the number of halvings from 34 to 14 and subsidy will be 0 when it becomes less than 0.01 although not sure if this will be a soft fork.

What exactly would the benefit be of going through all the political headache
of a soft fork for what I assume you are thinking would be an insignificant
change in total miner revenue?

Or do you think total transaction fees at that point would be less than
0.01BTC?

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220710/c4acd405/attachment.sig>

From alicexbt at protonmail.com  Sun Jul 10 16:38:11 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Sun, 10 Jul 2022 16:38:11 +0000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <eFdBAPulC6BoW5zBt30Mq4fXhnRzVENMjsfGrj1Yzbi-Z-wje21pCwEpMQ6Tc27m8LdhMN_66UX3Ze1BNAU9rsgqF-1JRV40s1QU9zSJ6js=@protonmail.com>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
 <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
 <eFdBAPulC6BoW5zBt30Mq4fXhnRzVENMjsfGrj1Yzbi-Z-wje21pCwEpMQ6Tc27m8LdhMN_66UX3Ze1BNAU9rsgqF-1JRV40s1QU9zSJ6js=@protonmail.com>
Message-ID: <ekfFIuJImI7zARk2QOqLrSsIU96zV00ZTLLaeqymZM02wWLDKR1a0L-Ggxye08kdcKizWuVPRUztGVmFxpjtGBBprPDhEVKurGLl2leGL1M=@protonmail.com>

Sorry, I made some wrong calculations in the last email. I think the change would just be required in validation.cpp:

https://github.com/bitcoin/bitcoin/blob/a7f3479ba3fda4c9fb29bd7080165744c02ee921/src/validation.cpp#L1472

/dev/fd0

Sent with Proton Mail secure email.

------- Original Message -------
On Sunday, July 10th, 2022 at 2:17 PM, alicexbt via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:


> Hi ZmnSCPxj,
>
> > Thus, we should instead prepare for a future where the block subsidy must be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
> > Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.
>
>
> `consensus.nSubsidyHalvingInterval` for mainnet in [chainparams.cpp][1] can be decreased to 195000. This will reduce the number of halvings from 34 to 14 and subsidy will be 0 when it becomes less than 0.01 although not sure if this will be a soft fork.
>
> I doubt there will be consensus for it because all the [projections and predictability][2] about bitcoin(currency) would be affected by this change. Maybe everyone can agree with this change if most of the miners start being 'compliant' like one of the coinjoin implementation.
>
> [1]: https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp#L66
> [2]: https://en.bitcoin.it/wiki/Controlled_supply
>
>
> /dev/fd0
>
> Sent with Proton Mail secure email.
>
>
> ------- Original Message -------
> On Saturday, July 9th, 2022 at 9:59 PM, ZmnSCPxj via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:
>
>
>
> > Good morning e, and list,
> >
> > > Yet you posted several links which made that specific correlation, to which I was responding.
> > >
> > > Math cannot prove how much coin is ?lost?, and even if it was provable that the amount of coin lost converges to the amount produced, it is of no consequence - for the reasons I?ve already pointed out. The amount of market production has no impact on market price, just as it does not with any other good.
> > >
> > > The reason to object to perpetual issuance is the impact on censorship resistance, not on price.
> >
> > To clarify about censorship resistance and perpetual issuance ("tail emission"):
> >
> > * Suppose I have two blockchains, one with a constant block subsidy, and one which had a block subsidy but the block subsidy has become negligible or zero.
> > * Now consider a censoring miner.
> > * If the miner rejects particular transactions (i.e. "censors") the miner loses out on the fees of those transactions.
> > * Presumably, the miner does this because it gains other benefits from the censorship, economically equal or better to the earnings lost.
> > * If the blockchain had a block subsidy, then the loss the miner incurs is small relative to the total earnings of each block.
> > * If the blockchain had 0 block subsidy, then the loss the miner incurs is large relative to the total earnings of each block.
> > * Thus, in the latter situation, the external benefit the miner gains from the censorship has to be proportionately larger than in the first situation.
> >
> > Basically, the block subsidy is a market distortion: the block subsidy erodes the value of held coins to pay for the security of coins being moved.
> > But the block subsidy is still issued whether or not coins being moved are censored or not censored.
> > Thus, there is no incentive, considering only the block subsidy, to not censor coin movements.
> > Only per-transaction fees have an incentive to not censor coin movements.
> >
> > Thus, we should instead prepare for a future where the block subsidy must be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
> > Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.
> >
> > Regards,
> > ZmnSCPxj
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From eric at voskuil.org  Sun Jul 10 17:42:59 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Sun, 10 Jul 2022 10:42:59 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <F2362784-F181-4A3D-8A8F-C906CC65AB53@voskuil.org>

?
> On Jul 10, 2022, at 07:17, alicexbt <alicexbt at protonmail.com> wrote:
> ?Hi ZmnSCPxj,
> 
> 
>> Thus, we should instead prepare for a future where the block subsidy must be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
>> Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.
> 
> `consensus.nSubsidyHalvingInterval` for mainnet in [chainparams.cpp][1] can be decreased to 195000. This will reduce the number of halvings from 34 to 14 and subsidy will be 0 when it becomes less than 0.01 although not sure if this will be a soft fork.

Soft fork, though a bit aggressive, as it would invalidate all existing blocks above the first new halving height block which claimed more than the reduced reward.

Increasing the value would be a hard fork, as it would validate blocks that would previously have been invalid, as opposed to a soft fork, which invalidates blocks that would previously have been valid.

e

> I doubt there will be consensus for it because all the [projections and predictability][2] about bitcoin(currency) would be affected by this change. Maybe everyone can agree with this change if most of the miners start being 'compliant' like one of the coinjoin implementation.
> 
> [1]: https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp#L66
> [2]: https://en.bitcoin.it/wiki/Controlled_supply
> 
> 
> /dev/fd0
> 
> Sent with Proton Mail secure email.
> 
> ------- Original Message -------
> On Saturday, July 9th, 2022 at 9:59 PM, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> 
>> Good morning e, and list,
>> 
>>> Yet you posted several links which made that specific correlation, to which I was responding.
>>> Math cannot prove how much coin is ?lost?, and even if it was provable that the amount of coin lost converges to the amount produced, it is of no consequence - for the reasons I?ve already pointed out. The amount of market production has no impact on market price, just as it does not with any other good.
>>> The reason to object to perpetual issuance is the impact on censorship resistance, not on price.
>> 
>> 
>> To clarify about censorship resistance and perpetual issuance ("tail emission"):
>> 
>> * Suppose I have two blockchains, one with a constant block subsidy, and one which had a block subsidy but the block subsidy has become negligible or zero.
>> * Now consider a censoring miner.
>> * If the miner rejects particular transactions (i.e. "censors") the miner loses out on the fees of those transactions.
>> * Presumably, the miner does this because it gains other benefits from the censorship, economically equal or better to the earnings lost.
>> * If the blockchain had a block subsidy, then the loss the miner incurs is small relative to the total earnings of each block.
>> * If the blockchain had 0 block subsidy, then the loss the miner incurs is large relative to the total earnings of each block.
>> * Thus, in the latter situation, the external benefit the miner gains from the censorship has to be proportionately larger than in the first situation.
>> 
>> Basically, the block subsidy is a market distortion: the block subsidy erodes the value of held coins to pay for the security of coins being moved.
>> But the block subsidy is still issued whether or not coins being moved are censored or not censored.
>> Thus, there is no incentive, considering only the block subsidy, to not censor coin movements.
>> Only per-transaction fees have an incentive to not censor coin movements.
>> 
>> 
>> Thus, we should instead prepare for a future where the block subsidy must be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
>> Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.
>> 
>> 
>> Regards,
>> ZmnSCPxj
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From vjudeu at gazeta.pl  Sun Jul 10 18:12:35 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Sun, 10 Jul 2022 20:12:35 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YssL6VL9y6EwyBjr@petertodd.org>
Message-ID: <164835839-f5685417de005a1e96d224198a2b70a2@pmq4v.m5r2.onet>

> We want mining to be is a boring, predictable, business that anyone can do, with as little reward as possible to larger scale miners.

To reach that, miners should earn their block rewards inside Lightning Network. Then, if you want to send some transaction, and you have one satoshi fee, you can produce a Bitcoin block on your CPU, and get a discount on your fee for doing that. Imagine mining a block with difficulty one, and getting some millisatoshis, or even microsatoshis as a reward. Then, to bootstrap that system, it could at first accept any blocks, so existing miners could redirect their shares to such network, then a pool will be able to claim those rewards. And then, when miners will see that the system works as intended, they could switch to solo mining, to get their rewards directly to their addresses.

On 2022-07-10 19:27:28 user Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Sat, Jul 09, 2022 at 09:59:06PM +0000, ZmnSCPxj wrote:
> Good morning e, and list,
> 
> > Yet you posted several links which made that specific correlation, to which I was responding.
> >
> > Math cannot prove how much coin is ?lost?, and even if it was provable that the amount of coin lost converges to the amount produced, it is of no consequence - for the reasons I?ve already pointed out. The amount of market production has no impact on market price, just as it does not with any other good.
> >
> > The reason to object to perpetual issuance is the impact on censorship resistance, not on price.
> 
> To clarify about censorship resistance and perpetual issuance ("tail emission"):
> 
> * Suppose I have two blockchains, one with a constant block subsidy, and one which *had* a block subsidy but the block subsidy has become negligible or zero.
> * Now consider a censoring miner.
>   * If the miner rejects particular transactions (i.e. "censors") the miner loses out on the fees of those transactions.
>   * Presumably, the miner does this because it gains other benefits from the censorship, economically equal or better to the earnings lost.
>   * If the blockchain had a block subsidy, then the loss the miner incurs is small relative to the total earnings of each block.
>   * If the blockchain had 0 block subsidy, then the loss the miner incurs is large relative to the total earnings of each block.
>   * Thus, in the latter situation, the external benefit the miner gains from the censorship has to be proportionately larger than in the first situation.

Now let's look at an actual, real-world, attempt to censor Bitcoin via mining:

https://petertodd.org/2016/mit-chainanchor-bribing-miners-to-regulate-bitcoin

The Chain Anchor model was to simply straight up bribe and coerce miners into
only accepting compliant transactions. That's only effective when a large % of
miners actually do that - if a small % do the effect on confirmation time is
miniscule. Obviously, censoring transactions is a significant threat to the
value of Bitcoin - and thus all your Bitcoin-only hashing equipment.

So how do you make a Chain Anchor attack cheaper? By reducing total mining
reward, and making it tied to transaction volume rather than the value of
Bitcoin as a whole.

> Basically, the block subsidy is a market distortion: the block subsidy erodes the value of held coins to pay for the security of coins being moved.

The block subsidy directly ties miner revenue to the total value of Bitcoin:
that's exactly how you want to incentivise a service that keeps Bitcoin secure.

> But the block subsidy is still issued whether or not coins being moved are censored or not censored.
> Thus, there is no incentive, considering *only* the block subsidy, to not censor coin movements.
> Only per-transaction fees have an incentive to not censor coin movements.

The strongest incentive not to censor is because it'll keep Bitcoin valuable.
Not some piddling transaction fees.

> Thus, we should instead prepare for a future where the block subsidy *must* be removed, possibly before the existing schedule removes it, in case a majority coalition of miner ever decides to censor particular transactions without community consensus.
> Fortunately forcing the block subsidy to 0 is a softfork and thus easier to deploy.

Absolutely not.

The historical reality of transaction fees is they've had huge swings, about
10x more volatile than total miner revenue. In the past three years they've
ranged from $8.4 million USD/30-day-average to as little as $140k/30-day-avg,
with the current amount being $370k/30-day-avg. That's a 60x difference.

Meanwhile miner revenue has ranged from $60 million/30-day-avg to $9
million/30-day-avg, a 7x difference.

https://www.blockchain.com/charts/fees-usd-per-transaction

We want mining to be is a boring, predictable, business that anyone can do,
with as little reward as possible to larger scale miners. That's what you need
for maximal decentralization. Making mining a sophisticated business reduces
the pool of entities that can profitably compete in it, and increases their
visibility to government regulation.

Additionally, we want mining to be predictable to avoid having large gluts of
unprofitable mining equipment laying around: mining equipment that could be
used to attack Bitcoin. Fee revenue is obviously doing a much worse job of
achieving that goal than subsidy revenue.


If transaction-fee-only mining was such a good idea, why hasn't any other coin
done it?

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From aj at erisian.com.au  Mon Jul 11 02:32:47 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Mon, 11 Jul 2022 12:32:47 +1000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <Ysl4t9K8lfxRSsNM@petertodd.org>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
Message-ID: <20220711023247.GA21856@erisian.com.au>

On Sat, Jul 09, 2022 at 08:46:47AM -0400, Peter Todd via bitcoin-dev wrote:
> title:  "Surprisingly, Tail Emission Is Not Inflationary"

> Of course, this isn't realistic as coins are constantly being lost due to
> deaths, forgotten passphrases, boating accidents, etc. These losses are
> independent:

This isn't necessarily true: if the losses are due to a common cause,
then they'll be heavily correlated rather than independent; for example
losses could be caused by a bug in a popular wallet/exchange software
that sends funds to invalid addresses, or by a war or natural disaster
that damages key storage hardware. They're also not independent over
time -- people improve their key storage habits over time; eg switching
to less buggy wallets/exchanges, validating addresses before using them,
using distributed multisig to prevent a localised disaster from being
catastrophic.

> the *rate* of coin loss at time $$t$$ is
> proportional to the total supply *at that moment* in time.

This is the key assumption that produces the claimed result.

If you're losing a constant fraction, x (Peter's \lambda), of Bitcoins
each year, then as soon as the supply increases enough that the constant
reward, k, corresponds to the constant fraction, ie k = x*N(t), then
you've hit an equilibrium.  (Likewise if you're losing more than you're
increasing -- you just need to wait until N(t) decreases enough that you
reach the same equilibrium point) You don't really need any fancy maths.

But that assumption doesn't need to be true; coins could primarily be
lost in "black swan" events (due to bugs, wars or disasters) rather
than at a predictable rate -- with actions taken thereafter such that
the same event repeating is no longer the same level of catastrophe,
but instead another new black swan event is required to maintain the same
loss rate. If that's the case, then the rate at which funds are lost will
vary chaotically, leading to "inflationary" periods in between events,
and comparatively strong deflationary shocks when these events occur.

Alternatively, losses could be at a predictable rate that's entirely
different to the one Peter assumes.

One alternative predictable rate that seems plausible to me is if funds
are lost due to people not be careful about losing small amounts; even
though they are careful when amounts are larger. So when 10k BTC was
worth $40, maybe it doesn't matter if you misplace a hard drive with
7500 BTC on it since that's only worth $30; but by the time 7500 BTC
is worth $150M, maybe you take a bit more care with that, but are still
not too worried if you lose 1.5mBTC, since that's also only worth $30.

To mathematise that, perhaps there are K people holding Bitcoin, and with
probability p, each loses $100 (in constant 2009 dollars say, so that we
can ignore inflation) of that Bitcoin a year through carelessness. For
an equilibrium to occur in that case, you need:

  N(t) + k - (100/P * Kp) = N(t)

where P is the price of Bitcoin (again in constant 2009 dollars) and k
is Peter's fixed tail subsidy. Simplifying gives:

  P = K * 100p/k

But k and p are constant by assumption in this scenario, so equilibrium
is reached only if price (P) is exactly proportional to number of
users (K). That requires you to have a non-inflationary currency
(supply is constant) with constant adoption (assume K doesn't change)
that maintains a constant price (P=K*100p/k) in real terms even if the
economy is otherwise expanding or contracting.

More importantly, just from a goals point of view, x is something we
should be finding ways to minimise it over time, not leave constant.
In fact, you could argue for an even stronger goal: "the real value held
in BTC lost each year should decrease", that is, x should be decreasing
faster than 1/(N(t)*P).

Cheers,
aj


From richter at cs.rwth-aachen.de  Mon Jul 11 06:15:40 2022
From: richter at cs.rwth-aachen.de (Stefan Richter)
Date: Mon, 11 Jul 2022 08:15:40 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <20220711023247.GA21856@erisian.com.au>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
 <20220711023247.GA21856@erisian.com.au>
Message-ID: <CAH+=Z+Uz8MDtV9dUVC+04bA39ANev-ps1_cmbD0CKwAWVnJzDg@mail.gmail.com>

I very much agree with AJ here. This is something I remember discussing on
Bitcointalk back in 2011: I find it highly intuitive that the amount of
lost coins is not a constant fraction of the supply, because people get
better at keeping their coins with increasing value, distribution and
technology/best practices. I also think that we have observed this effect
in practice since then. The bulk of coins that are supposed to be lost (via
onchain analysis) haven't been moved since at least 2010. Of course, in
most cases, we'll never know, but the assumption of constant loss rate
seems unreasonable.

Cheers
  Stefan

Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
schrieb am Mo., 11. Juli 2022, 04:32:

> On Sat, Jul 09, 2022 at 08:46:47AM -0400, Peter Todd via bitcoin-dev wrote:
> > title:  "Surprisingly, Tail Emission Is Not Inflationary"
>
> > Of course, this isn't realistic as coins are constantly being lost due to
> > deaths, forgotten passphrases, boating accidents, etc. These losses are
> > independent:
>
> This isn't necessarily true: if the losses are due to a common cause,
> then they'll be heavily correlated rather than independent; for example
> losses could be caused by a bug in a popular wallet/exchange software
> that sends funds to invalid addresses, or by a war or natural disaster
> that damages key storage hardware. They're also not independent over
> time -- people improve their key storage habits over time; eg switching
> to less buggy wallets/exchanges, validating addresses before using them,
> using distributed multisig to prevent a localised disaster from being
> catastrophic.
>
> > the *rate* of coin loss at time $$t$$ is
> > proportional to the total supply *at that moment* in time.
>
> This is the key assumption that produces the claimed result.
>
> If you're losing a constant fraction, x (Peter's \lambda), of Bitcoins
> each year, then as soon as the supply increases enough that the constant
> reward, k, corresponds to the constant fraction, ie k = x*N(t), then
> you've hit an equilibrium.  (Likewise if you're losing more than you're
> increasing -- you just need to wait until N(t) decreases enough that you
> reach the same equilibrium point) You don't really need any fancy maths.
>
> But that assumption doesn't need to be true; coins could primarily be
> lost in "black swan" events (due to bugs, wars or disasters) rather
> than at a predictable rate -- with actions taken thereafter such that
> the same event repeating is no longer the same level of catastrophe,
> but instead another new black swan event is required to maintain the same
> loss rate. If that's the case, then the rate at which funds are lost will
> vary chaotically, leading to "inflationary" periods in between events,
> and comparatively strong deflationary shocks when these events occur.
>
> Alternatively, losses could be at a predictable rate that's entirely
> different to the one Peter assumes.
>
> One alternative predictable rate that seems plausible to me is if funds
> are lost due to people not be careful about losing small amounts; even
> though they are careful when amounts are larger. So when 10k BTC was
> worth $40, maybe it doesn't matter if you misplace a hard drive with
> 7500 BTC on it since that's only worth $30; but by the time 7500 BTC
> is worth $150M, maybe you take a bit more care with that, but are still
> not too worried if you lose 1.5mBTC, since that's also only worth $30.
>
> To mathematise that, perhaps there are K people holding Bitcoin, and with
> probability p, each loses $100 (in constant 2009 dollars say, so that we
> can ignore inflation) of that Bitcoin a year through carelessness. For
> an equilibrium to occur in that case, you need:
>
>   N(t) + k - (100/P * Kp) = N(t)
>
> where P is the price of Bitcoin (again in constant 2009 dollars) and k
> is Peter's fixed tail subsidy. Simplifying gives:
>
>   P = K * 100p/k
>
> But k and p are constant by assumption in this scenario, so equilibrium
> is reached only if price (P) is exactly proportional to number of
> users (K). That requires you to have a non-inflationary currency
> (supply is constant) with constant adoption (assume K doesn't change)
> that maintains a constant price (P=K*100p/k) in real terms even if the
> economy is otherwise expanding or contracting.
>
> More importantly, just from a goals point of view, x is something we
> should be finding ways to minimise it over time, not leave constant.
> In fact, you could argue for an even stronger goal: "the real value held
> in BTC lost each year should decrease", that is, x should be decreasing
> faster than 1/(N(t)*P).
>
> Cheers,
> aj
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/2289f5fd/attachment-0001.html>

From alfred_hodler at protonmail.com  Mon Jul 11 10:28:40 2022
From: alfred_hodler at protonmail.com (Alfred Hodler)
Date: Mon, 11 Jul 2022 10:28:40 +0000
Subject: [bitcoin-dev] [BIP proposal] Private Payments
In-Reply-To: <rH1Js_T_UWcAg9lS9NDw_Qb6Js5bgs8rPILej69BjqsEZcJZwsvHhZRilkkOQZRGXabai63hrGgbTP2Yk99ojKEN6fU6HT4TmukiafqiKjo=@protonmail.com>
References: <rH1Js_T_UWcAg9lS9NDw_Qb6Js5bgs8rPILej69BjqsEZcJZwsvHhZRilkkOQZRGXabai63hrGgbTP2Yk99ojKEN6fU6HT4TmukiafqiKjo=@protonmail.com>
Message-ID: <7MZupPo-je8mhyxtw-sPQ19zypYdoXmh93RoVCLVZ_yXo9bEnUChMFjKU6E4W9gpLXbGiHMlbxY05K62BCzrYuaiPVp_7YdxM1_J3ToSnGU=@protonmail.com>

Update: Bob doesn't have to watch all address types he's advertising. When notifying Bob, Alice will pick one address type out of the ones Bob is advertising and include it in the notification. That way even if Bob's wallet accepts many address types, he still doesn't have to watch all of them for each Alice.

The previous spec reads:

> Alice then constructs a 72-byte OP_RETURN output whose value is set to `BIPXXXX + notification + N_Alice` (`+` is concat) and sends it in a transaction containing no other outputs (XXXX to be replaced once a BIP number is assigned).

We can extended the payload to 73 bytes and define it as: `BIPXXXX + notification + N_Alice + address_type`, where `address_type` is a single byte containing the desired address type index (1 out of 16, limited by Bob's payment code). If Alice ever wants to start sending to a different address type, she can simply re-notify Bob and Bob will switch to a new address type in the case of Alice.

Alfred


From beppeben2030 at gmail.com  Mon Jul 11 10:42:58 2022
From: beppeben2030 at gmail.com (Giuseppe B)
Date: Mon, 11 Jul 2022 12:42:58 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <CAH+=Z+Uz8MDtV9dUVC+04bA39ANev-ps1_cmbD0CKwAWVnJzDg@mail.gmail.com>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
 <20220711023247.GA21856@erisian.com.au>
 <CAH+=Z+Uz8MDtV9dUVC+04bA39ANev-ps1_cmbD0CKwAWVnJzDg@mail.gmail.com>
Message-ID: <CABrXkXrfV5UazVXcJdHy-D_zi25c1ZBn+L4ZL_oDtOcx+S2RcQ@mail.gmail.com>

I think the discussion has some anecdotic interest but has zero relevance
as far as any decision making is concerned.

Any extension of block rewards after the current deadline should only be
done if and only if the community agrees that it is the only way to keep
the network secure.

The fact that a mild inflation is sometimes compensated by coin loss is
like a bonus.

On Mon, Jul 11, 2022, 11:56 AM Stefan Richter via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I very much agree with AJ here. This is something I remember discussing on
> Bitcointalk back in 2011: I find it highly intuitive that the amount of
> lost coins is not a constant fraction of the supply, because people get
> better at keeping their coins with increasing value, distribution and
> technology/best practices. I also think that we have observed this effect
> in practice since then. The bulk of coins that are supposed to be lost (via
> onchain analysis) haven't been moved since at least 2010. Of course, in
> most cases, we'll never know, but the assumption of constant loss rate
> seems unreasonable.
>
> Cheers
>   Stefan
>
> Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> schrieb am Mo., 11. Juli 2022, 04:32:
>
>> On Sat, Jul 09, 2022 at 08:46:47AM -0400, Peter Todd via bitcoin-dev
>> wrote:
>> > title:  "Surprisingly, Tail Emission Is Not Inflationary"
>>
>> > Of course, this isn't realistic as coins are constantly being lost due
>> to
>> > deaths, forgotten passphrases, boating accidents, etc. These losses are
>> > independent:
>>
>> This isn't necessarily true: if the losses are due to a common cause,
>> then they'll be heavily correlated rather than independent; for example
>> losses could be caused by a bug in a popular wallet/exchange software
>> that sends funds to invalid addresses, or by a war or natural disaster
>> that damages key storage hardware. They're also not independent over
>> time -- people improve their key storage habits over time; eg switching
>> to less buggy wallets/exchanges, validating addresses before using them,
>> using distributed multisig to prevent a localised disaster from being
>> catastrophic.
>>
>> > the *rate* of coin loss at time $$t$$ is
>> > proportional to the total supply *at that moment* in time.
>>
>> This is the key assumption that produces the claimed result.
>>
>> If you're losing a constant fraction, x (Peter's \lambda), of Bitcoins
>> each year, then as soon as the supply increases enough that the constant
>> reward, k, corresponds to the constant fraction, ie k = x*N(t), then
>> you've hit an equilibrium.  (Likewise if you're losing more than you're
>> increasing -- you just need to wait until N(t) decreases enough that you
>> reach the same equilibrium point) You don't really need any fancy maths.
>>
>> But that assumption doesn't need to be true; coins could primarily be
>> lost in "black swan" events (due to bugs, wars or disasters) rather
>> than at a predictable rate -- with actions taken thereafter such that
>> the same event repeating is no longer the same level of catastrophe,
>> but instead another new black swan event is required to maintain the same
>> loss rate. If that's the case, then the rate at which funds are lost will
>> vary chaotically, leading to "inflationary" periods in between events,
>> and comparatively strong deflationary shocks when these events occur.
>>
>> Alternatively, losses could be at a predictable rate that's entirely
>> different to the one Peter assumes.
>>
>> One alternative predictable rate that seems plausible to me is if funds
>> are lost due to people not be careful about losing small amounts; even
>> though they are careful when amounts are larger. So when 10k BTC was
>> worth $40, maybe it doesn't matter if you misplace a hard drive with
>> 7500 BTC on it since that's only worth $30; but by the time 7500 BTC
>> is worth $150M, maybe you take a bit more care with that, but are still
>> not too worried if you lose 1.5mBTC, since that's also only worth $30.
>>
>> To mathematise that, perhaps there are K people holding Bitcoin, and with
>> probability p, each loses $100 (in constant 2009 dollars say, so that we
>> can ignore inflation) of that Bitcoin a year through carelessness. For
>> an equilibrium to occur in that case, you need:
>>
>>   N(t) + k - (100/P * Kp) = N(t)
>>
>> where P is the price of Bitcoin (again in constant 2009 dollars) and k
>> is Peter's fixed tail subsidy. Simplifying gives:
>>
>>   P = K * 100p/k
>>
>> But k and p are constant by assumption in this scenario, so equilibrium
>> is reached only if price (P) is exactly proportional to number of
>> users (K). That requires you to have a non-inflationary currency
>> (supply is constant) with constant adoption (assume K doesn't change)
>> that maintains a constant price (P=K*100p/k) in real terms even if the
>> economy is otherwise expanding or contracting.
>>
>> More importantly, just from a goals point of view, x is something we
>> should be finding ways to minimise it over time, not leave constant.
>> In fact, you could argue for an even stronger goal: "the real value held
>> in BTC lost each year should decrease", that is, x should be decreasing
>> faster than 1/(N(t)*P).
>>
>> Cheers,
>> aj
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/a217aea1/attachment-0001.html>

From erik at q32.com  Mon Jul 11 12:56:04 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 11 Jul 2022 08:56:04 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <20220711023247.GA21856@erisian.com.au>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
 <20220711023247.GA21856@erisian.com.au>
Message-ID: <CAJowKgLDXr1ycGzCqRTe=iA_SQkchd1D4gtDD6o4gnK4dyn5dQ@mail.gmail.com>

>
>
> Alternatively, losses could be at a predictable rate that's entirely
> different to the one Peter assumes.
>

No, peter only assumes that there *is* a rate.

Regardless of what the rate is, if it is any value for which there exists
*any fixed central tendency*, tail emission is *evenually* non inflationary.

But you are correct about the other two things:

1. If people are improving custody faster than 1/(N(t)*P) than tail
emission can still be inflationary.  This seems far-fetched, imo.

2. The rate will be somewhat stochastic ("black swan envets").  Plausible
(popular wallet loses keys in coding error), but also... "true no matter
what".  And not really relevant to tail-emission  being non-inflationary.
 Over a long enough time period, even these events can be factored into a
fixed central tendency.   Even if it's 100 years, etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/451e1d28/attachment-0001.html>

From erik at q32.com  Mon Jul 11 13:11:53 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 11 Jul 2022 09:11:53 -0400
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <bf3b36b1-e999-43bf-88d4-3aab19d10e9d@www.fastmail.com>
References: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
 <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
 <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>
 <CAH+Axy4X+uQG5Vw0Efiz6AtNyK=++h-jDeZL1ZxpVJus8BVKeA@mail.gmail.com>
 <CAJ4-pEA7WJpbExcsgdPWVNuZLrbDDhVYr37g6_6NSf7t41eB4w@mail.gmail.com>
 <bf3b36b1-e999-43bf-88d4-3aab19d10e9d@www.fastmail.com>
Message-ID: <CAJowKgJq23W3yq91pF+xm6CMjOy+tXz=zxkMVRPqCY_zWsBdiQ@mail.gmail.com>

1. You can swap two positions, and then your recovery algorithm can
brute-force the result by trying all 132 possible swaps.
2. You can make a single deletion and only have to brute 2048
3. You can keep doing these, being aware that it becomes geometrically more
difficult each time (deletion + swap = 270k ops)
4. A home PC can make 20k secpk256 operations per second per core, so try
to keep your number under a few million ops and it's still a decent UX
(under a minute)


On Sat, Jul 9, 2022 at 8:01 PM Anton Shevchenko via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I would say removing ordering from 12-word seed reduces 25 bits of
> entropy, not 29. Additional 4 bits come from checksum (12 words encode 132
> bits, not 128).
>
> My idea [for developing this project] was to feed its output to some kind
> of AI story generator (GPT-3 based?) so a user can remember a story, not
> ordered words. But as others pointed out, having 12 words without order is
> probably good enough. So at this point there's not much sense of using the
> proposed encoding. Unless a remembered story has wholes/errors. In this
> case recovering few words would be easier with unordered encoding. Any
> thoughts?
>
> --  Anton Shevchenko
>
>
> On Sat, Jul 9, 2022, at 1:31 PM, Zac Greenwood via bitcoin-dev wrote:
>
> Sorting a seed alphabetically reduces entropy by ~29 bits.
>
> A 12-word seed has (12, 12) permutations or 479 million, which is ln(469m)
> / ln(2) ~= 29 bits of entropy. Sorting removes this entropy entirely,
> reducing the seed entropy from 128 to 99 bits.
>
> Zac
>
>
> On Fri, 8 Jul 2022 at 16:09, James MacWhyte via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
> What do you do if the "first" word (of 12), happens to be the last word in
> the list alphabetically?
>
>
> That couldn't happen. If one word is the very last from the wordlist, it
> would end up at the end of your mnemonic once you rearrange your 12 words
> alphabetically.
>
> However!
>
> (@vjudeu) Choosing 11 random words and then sorting them alphabetically
> before assigning a checksum would reduce entropy considerably. If you think
> about it, to bruteforce the entire keyspace one would only need to come up
> with every possible combination of 11 words + 1 checksum. I'm not the best
> at napkin math, but I think that leaves you with around 10 trillion
> combinations, which would only take a couple months to exhaust with
> hardware that can do 1 million guesses per second.
>
>
> James
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/de802042/attachment-0001.html>

From erik at q32.com  Mon Jul 11 13:18:14 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 11 Jul 2022 09:18:14 -0400
Subject: [bitcoin-dev] No Order Mnemonic
In-Reply-To: <CAJowKgJq23W3yq91pF+xm6CMjOy+tXz=zxkMVRPqCY_zWsBdiQ@mail.gmail.com>
References: <3D3BFE9C-CFF3-49FF-840F-063B52C69A42@voskuil.org>
 <164256450-0ee6752f92c0be297952fc72b59076df@pmq5v.m5r2.onet>
 <CA+XQW1iKVRmEnyP-CGM2Fo4qHi3SQHUfjEmKftDdju-uxHViJg@mail.gmail.com>
 <CAH+Axy4X+uQG5Vw0Efiz6AtNyK=++h-jDeZL1ZxpVJus8BVKeA@mail.gmail.com>
 <CAJ4-pEA7WJpbExcsgdPWVNuZLrbDDhVYr37g6_6NSf7t41eB4w@mail.gmail.com>
 <bf3b36b1-e999-43bf-88d4-3aab19d10e9d@www.fastmail.com>
 <CAJowKgJq23W3yq91pF+xm6CMjOy+tXz=zxkMVRPqCY_zWsBdiQ@mail.gmail.com>
Message-ID: <CAJowKgLRMyXQ27-m9-ud9F8Qu=6dkcfJHjoxLJh4LKyU8Nf9pw@mail.gmail.com>

Sorry, I totally forgot the checksum.

You can take my ops-per-second and multiply it by about 16 (because of the
4 check bits), making a delete + two swaps or 4 swaps, etc. still pretty
reasonable.



On Mon, Jul 11, 2022 at 9:11 AM Erik Aronesty <erik at q32.com> wrote:

> 1. You can swap two positions, and then your recovery algorithm can
> brute-force the result by trying all 132 possible swaps.
> 2. You can make a single deletion and only have to brute 2048
> 3. You can keep doing these, being aware that it becomes geometrically
> more difficult each time (deletion + swap = 270k ops)
> 4. A home PC can make 20k secpk256 operations per second per core, so try
> to keep your number under a few million ops and it's still a decent UX
> (under a minute)
>
>
> On Sat, Jul 9, 2022 at 8:01 PM Anton Shevchenko via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> I would say removing ordering from 12-word seed reduces 25 bits of
>> entropy, not 29. Additional 4 bits come from checksum (12 words encode 132
>> bits, not 128).
>>
>> My idea [for developing this project] was to feed its output to some kind
>> of AI story generator (GPT-3 based?) so a user can remember a story, not
>> ordered words. But as others pointed out, having 12 words without order is
>> probably good enough. So at this point there's not much sense of using the
>> proposed encoding. Unless a remembered story has wholes/errors. In this
>> case recovering few words would be easier with unordered encoding. Any
>> thoughts?
>>
>> --  Anton Shevchenko
>>
>>
>> On Sat, Jul 9, 2022, at 1:31 PM, Zac Greenwood via bitcoin-dev wrote:
>>
>> Sorting a seed alphabetically reduces entropy by ~29 bits.
>>
>> A 12-word seed has (12, 12) permutations or 479 million, which is
>> ln(469m) / ln(2) ~= 29 bits of entropy. Sorting removes this entropy
>> entirely, reducing the seed entropy from 128 to 99 bits.
>>
>> Zac
>>
>>
>> On Fri, 8 Jul 2022 at 16:09, James MacWhyte via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>
>> What do you do if the "first" word (of 12), happens to be the last word
>> in the list alphabetically?
>>
>>
>> That couldn't happen. If one word is the very last from the wordlist, it
>> would end up at the end of your mnemonic once you rearrange your 12 words
>> alphabetically.
>>
>> However!
>>
>> (@vjudeu) Choosing 11 random words and then sorting them alphabetically
>> before assigning a checksum would reduce entropy considerably. If you think
>> about it, to bruteforce the entire keyspace one would only need to come up
>> with every possible combination of 11 words + 1 checksum. I'm not the best
>> at napkin math, but I think that leaves you with around 10 trillion
>> combinations, which would only take a couple months to exhaust with
>> hardware that can do 1 million guesses per second.
>>
>>
>> James
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/d9ffd3af/attachment.html>

From pete at petertodd.org  Mon Jul 11 16:59:53 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Jul 2022 12:59:53 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <20220711023247.GA21856@erisian.com.au>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
 <20220711023247.GA21856@erisian.com.au>
Message-ID: <YsxXCQihhSrYuIfS@petertodd.org>

On Mon, Jul 11, 2022 at 12:32:47PM +1000, Anthony Towns wrote:
> This isn't necessarily true: if the losses are due to a common cause,
> then they'll be heavily correlated rather than independent; for example
> losses could be caused by a bug in a popular wallet/exchange software
> that sends funds to invalid addresses, or by a war or natural disaster
> that damages key storage hardware. They're also not independent over
> time -- people improve their key storage habits over time; eg switching
> to less buggy wallets/exchanges, validating addresses before using them,
> using distributed multisig to prevent a localised disaster from being
> catastrophic.

People clearly continue to make downright irrational decisions about coin
security, doing things putting their entire crypto savings at risk for claimed
5% returns.

Even if people were rational, the coin loss rate would clearly reach a floor
because as the probability of coin loss goes down, bothering to spend extra
effort to decrease that already small chance is pointless. You mentioning black
swan events actually strengthens my point: at low coin loss rates the true loss
rate is dominated by black swan events. So it's pointless to go to extra effort
to prevent them.

Finally, you're forgetting that coin loss also includes *intentional* losses
from proof-of-sacrifice protocols. There are a number of examples on Bitcoin.
Again, they put a floor on how much coin loss could diminish.

> loss rate. If that's the case, then the rate at which funds are lost will
> vary chaotically, leading to "inflationary" periods in between events,
> and comparatively strong deflationary shocks when these events occur.

Give me an example of an *actual* inflation rate you expect to see, given a
disaster of a given magnitude.

If you actually do the numbers on this, you'll realize it takes absolutely
catastrophic black swan events that make WW2 look like a minor conflict to make
even insignificant inflation rate changes due to changes in lost coins.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/9822e234/attachment.sig>

From bram at chia.net  Mon Jul 11 17:44:21 2022
From: bram at chia.net (Bram Cohen)
Date: Mon, 11 Jul 2022 10:44:21 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YsxXCQihhSrYuIfS@petertodd.org>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
 <20220711023247.GA21856@erisian.com.au>
 <YsxXCQihhSrYuIfS@petertodd.org>
Message-ID: <CAHUJnBCUsSXm7BxEmmCD1GA769A4RTr4A5L37iDhfDu2b-G5CA@mail.gmail.com>

On Mon, Jul 11, 2022 at 10:00 AM Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> If you actually do the numbers on this, you'll realize it takes absolutely
> catastrophic black swan events that make WW2 look like a minor conflict to
> make
> even insignificant inflation rate changes due to changes in lost coins.
>

That somewhat depends on what you mean by 'significant' and 'catastrophic'
but I believe the way the model goes is that if X% of coins are lost that
means that the value of all outstanding coins will go up by X%, and if the
rate of breakage goes from Y% annually to Y*Z% annually then the value of
all coins will go up by a factor of Z. This is of course an idealized model
in steady state, but gives some idea of scale.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/81d9948d/attachment-0001.html>

From bram at chia.net  Mon Jul 11 18:12:52 2022
From: bram at chia.net (Bram Cohen)
Date: Mon, 11 Jul 2022 11:12:52 -0700
Subject: [bitcoin-dev] Security problems with relying on transaction fees
	for security
Message-ID: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>

If transaction fees came in at an even rate over time all at the exact same
level then they work fine for security, acting similarly to fixed block
rewards. Unfortunately that isn't how it works in the real world. There's a
very well established day/night cycle with fees going to zero overnight and
even longer gaps on weekends and holidays. If in the future Bitcoin is
entirely dependent on fees for security (scheduled very strongly) and this
pattern keeps up (overwhelmingly likely) then this is going to become a
serious problem.

What's likely to happen is that at first there will simply be no or very
few blocks mined overnight. There are likely to be some, as miners at first
turn off their mining rigs completely overnight then adopt the more
sophisticated strategy of waiting until there are enough fees in the
mempool to warrant attempting to make a block and only then doing it.
Unfortunately the gaming doesn't end there. Eventually the miners with
lower costs of operation will figure out that they can collectively reorg
the last hour (or some time period) of the day overnight and this will be
profitable. That's likely to cause the miners with more expensive
operations to stop attempting mining the last hour of the day preemptively.

What happens after that I'm not sure. There are a small enough number of
miners with a quirky enough distribution of costs of operation and
profitability that the dynamic is heavily dependent on those specifics, but
the beginnings of a slippery slope to a mining cabal which reorgs everyone
else out of existence and eventually 51% attacks the whole thing have
begun. It even gets worse than that because once there's a cabal
aggressively reorging anyone else out when they make a block other miners
will shut down and rapidly lose the ability to quickly spin up again, so
the threshold needed for that 51% attack will keep going down.

In short, relying completely on transaction fees for security is likely to
be a disaster. What we can say from existing experience is that having
transaction fees be about 10% of rewards on average works well. It's enough
to incentivize collecting fees but not so much that it makes incentives get
all weird. 90% transaction fees is probably very bad. 50% works but runs
the risk of spikes getting too high.

There are a few possible approaches to fixes. One would be to drag most of
east asia eastward to a later time zone thus smoothing out the day/night
cycle but that's probably unrealistic. Another would be to hard fork in
fixed rewards in perpetuity, which is slightly less unrealistic but still
extremely problematic.

Much more actionable are measures which smooth out fees over time. Having
wallets opportunistically collect their dust during times of low
transaction fees would help and would save users on fees. Also making UX
which clarifies when things are likely to take a day or week but that it's
reliable would be a reasonable thing to do, but users unfortunately are
very averse to transactions taking a while.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/27bad65b/attachment.html>

From dscotese at litmocracy.com  Mon Jul 11 18:44:46 2022
From: dscotese at litmocracy.com (Dave Scotese)
Date: Mon, 11 Jul 2022 11:44:46 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YsmbKPrsM0wKXAYQ@petertodd.org>
References: <CAOU__fz8XSfEdOS9U7_H4A4jpCgtQepKxaW4jT5go91rhY-VQg@mail.gmail.com>
 <YsmbKPrsM0wKXAYQ@petertodd.org>
Message-ID: <CAGLBAhc2By2Uep3CyO9uwZcDWL=pP0eAgTXMu+=8uHDWp5JaMw@mail.gmail.com>

I believe it's foolish to attempt objective definitions of things that we
define collectively, like "Bitcoin."  The best any one of us can do is to
be consistent with a subjective personal definition.  I believe most people
do that with the term "Bitcoin" and that the capped supply is intrinsic to
their subjective definitions.  It is to mine.  Leading bodies, such as the
Bitcoin core team, the Ethereum foundation, and every government, are
constantly in danger of confusing objective reality with their own
decisions.  Since people have autonomy, the best a leading body can do is
recommend their decisions.  The common error is one made by governments,
where they react violently to defiance of the definitions they make.
Shadows of that error show up in nongovernmental leading bodies as
ostracism, criticism, and even sometimes illegal activity against such
defiance of decisions.  What I mean here is that John is right in a sense
(" removing this limit results in something that can no longer be called
Bitcoin.  "), but I don't think the way he expressed it is as helpful as it
could be.  There are many who will not call it Bitcoin, and I am among them.

On Sat, Jul 9, 2022 at 8:13 AM Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Sat, Jul 09, 2022 at 04:57:57PM +0200, John Tromp via bitcoin-dev wrote:
> > > New blog post:
> > >
> https://petertodd.org/2022/surprisingly-tail-emission-is-not-inflationary
> >
> > A Tail Emission is best described as disinflationary; the yearly
> > supply inflation steadily decreases toward zero.
>
> _Apparently_ inflation. True monetary inflation includes lost coins - both
> intentionally and accidentally lost. It's quite possible that even with
> tail
> emission Monero is currently a monetarily deflationary coin, as the lost
> coin
> rate might be higher than the 0.8% apparent tail emission rate.
>
> We just don't know. Doubly so in the case of monero where its privacy
> features
> hide coin activity.
>
> > > If an existing coin decides to implement tail emission as a means to
> fund security, choosing an appropriate emission rate is simple: decide on
> the maximum amount of inflation you are willing to have in the worst case,
> and set the tail emission accordingly.
> >
> > Any coin without a premine starts with infinite inflation. Bitcoin in
> > its first 4 years had yearly inflation rates of inf, 100%, 50%, and
> > 33%. So deciding on a maximum amount of inflation is deciding on a
> > premine.
>
> Hence why I specified an *existing* coin.
>
> > While in the long term, a capped supply doesn't meaningfully differ
> > from un uncapped supply [1], the 21M limit is central to Bitcoin's
> > identity, and removing this limit results in something that can no
> > longer be called Bitcoin.
>
> Personally I think basing your identity on a technical point that isn't
> even
> correct is stupid. And I suspect than when push comes to shove, if in ~10
> years
> or whatever Bitcoin turns out to be unstable without a reward, the market
> as a
> whole will be happy to redefine Bitcoin to remove the 21M limit. Whether
> or not
> it can do that fast enough to avoid Bitcoin dying first is an open
> question.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>


-- 
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/d60506ee/attachment.html>

From roconnor at blockstream.com  Mon Jul 11 20:35:02 2022
From: roconnor at blockstream.com (Russell O'Connor)
Date: Mon, 11 Jul 2022 16:35:02 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>

On Mon, Jul 11, 2022 at 2:19 PM Bram Cohen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> If transaction fees came in at an even rate over time all at the exact
> same level then they work fine for security, acting similarly to fixed
> block rewards. Unfortunately that isn't how it works in the real world.
> There's a very well established day/night cycle with fees going to zero
> overnight and even longer gaps on weekends and holidays. If in the future
> Bitcoin is entirely dependent on fees for security (scheduled very
> strongly) and this pattern keeps up (overwhelmingly likely) then this is
> going to become a serious problem.
>
> What's likely to happen is that at first there will simply be no or very
> few blocks mined overnight. There are likely to be some, as miners at first
> turn off their mining rigs completely overnight then adopt the more
> sophisticated strategy of waiting until there are enough fees in the
> mempool to warrant attempting to make a block and only then doing it.
> Unfortunately the gaming doesn't end there. Eventually the miners with
> lower costs of operation will figure out that they can collectively reorg
> the last hour (or some time period) of the day overnight and this will be
> profitable. That's likely to cause the miners with more expensive
> operations to stop attempting mining the last hour of the day preemptively.
>
> What happens after that I'm not sure.
>

Miners will learn to create anyone-can-spend outputs to bribe other miners
to build on their block rather than reorg it.  (Due to the coinbase
maturity, this will require some amount of floating capital.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/6e8e216d/attachment-0001.html>

From pete at petertodd.org  Mon Jul 11 21:36:52 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Jul 2022 17:36:52 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
Message-ID: <YsyX9Hjz4LU5otaT@petertodd.org>

On Mon, Jul 11, 2022 at 04:35:02PM -0400, Russell O'Connor via bitcoin-dev wrote:
> > What happens after that I'm not sure.
> >
> 
> Miners will learn to create anyone-can-spend outputs to bribe other miners
> to build on their block rather than reorg it.  (Due to the coinbase
> maturity, this will require some amount of floating capital.)

...and that's a disaster for mining centralization, because the smaller miners
need to pay larger bribes than larger miners. Not to mention having to keep
capital around to do it.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/d84b815b/attachment.sig>

From pete at petertodd.org  Mon Jul 11 21:53:37 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Jul 2022 17:53:37 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <Ysyb4T/36oXeAH+z@petertodd.org>

On Mon, Jul 11, 2022 at 11:12:52AM -0700, Bram Cohen via bitcoin-dev wrote:
> If transaction fees came in at an even rate over time all at the exact same
> level then they work fine for security, acting similarly to fixed block
> rewards. Unfortunately that isn't how it works in the real world. There's a
> very well established day/night cycle with fees going to zero overnight and
> even longer gaps on weekends and holidays. If in the future Bitcoin is
> entirely dependent on fees for security (scheduled very strongly) and this
> pattern keeps up (overwhelmingly likely) then this is going to become a
> serious problem.
> 
> What's likely to happen is that at first there will simply be no or very
> few blocks mined overnight. There are likely to be some, as miners at first
> turn off their mining rigs completely overnight then adopt the more
> sophisticated strategy of waiting until there are enough fees in the
> mempool to warrant attempting to make a block and only then doing it.
> Unfortunately the gaming doesn't end there. Eventually the miners with
> lower costs of operation will figure out that they can collectively reorg
> the last hour (or some time period) of the day overnight and this will be
> profitable. That's likely to cause the miners with more expensive
> operations to stop attempting mining the last hour of the day preemptively.
> 
> What happens after that I'm not sure. There are a small enough number of
> miners with a quirky enough distribution of costs of operation and
> profitability that the dynamic is heavily dependent on those specifics, but
> the beginnings of a slippery slope to a mining cabal which reorgs everyone
> else out of existence and eventually 51% attacks the whole thing have
> begun. It even gets worse than that because once there's a cabal
> aggressively reorging anyone else out when they make a block other miners
> will shut down and rapidly lose the ability to quickly spin up again, so
> the threshold needed for that 51% attack will keep going down.
> 
> In short, relying completely on transaction fees for security is likely to
> be a disaster. What we can say from existing experience is that having
> transaction fees be about 10% of rewards on average works well. It's enough
> to incentivize collecting fees but not so much that it makes incentives get
> all weird. 90% transaction fees is probably very bad. 50% works but runs
> the risk of spikes getting too high.
> 
> There are a few possible approaches to fixes. One would be to drag most of
> east asia eastward to a later time zone thus smoothing out the day/night
> cycle but that's probably unrealistic. Another would be to hard fork in
> fixed rewards in perpetuity, which is slightly less unrealistic but still
> extremely problematic.
> 
> Much more actionable are measures which smooth out fees over time.

Note that a tricky thing here is that smoothing out fees is made difficult by
the fact that users can by-pass the fee system by including anyone-can-spend
outputs in their transactions. Or worse, by simply paying large miners
out-of-band to get their txs confirmed. So any smothing scheme that tries to
smooth the market-based fees we already have will fail.

The only type of fee-smoothing scheme that is feasible is to smooth an entirely
separate category of fees that are made mandatory. For example, you could
achieve the economic impact of inflation by having a fixed value*time based fee
that goes to timelocked anyone-can-spend outputs in the coinbase to push the
fee forward to other miners.

Doing this is of course a gigantic accounting headache, and problematic for
existing L2 protocols, because you are reducing the value of txouts as they age
(demurrage). But at least it's a soft-fork.

Interestingly, if you look at transaction fees in blocks right now, people
regularly pay far higher transaction fees than necessary. There seem to be a
bunch of high value users, eg $1 million txs, without terrible fee estimation.
And I suspect the reason why this happens is simply that for a $1 million tx,
overpaying 100x with a $100 tx fee is irrelevant. Of course, this is also a
problem from the re-org point of view...

> Having
> wallets opportunistically collect their dust during times of low
> transaction fees would help and would save users on fees.

You're assuming wallets will even have dust to collect. With widespread use of
Lightning that will likely not be true. Indeed, with sufficiently efficient L2
solutions it's really unclear as to how much demand there will be for block
space.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/6626ac18/attachment.sig>

From pete at petertodd.org  Mon Jul 11 21:56:53 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Jul 2022 17:56:53 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <YsyX9Hjz4LU5otaT@petertodd.org>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
 <YsyX9Hjz4LU5otaT@petertodd.org>
Message-ID: <YsycpTbb3IYpQ2I7@petertodd.org>

On Mon, Jul 11, 2022 at 05:36:52PM -0400, Peter Todd via bitcoin-dev wrote:
> On Mon, Jul 11, 2022 at 04:35:02PM -0400, Russell O'Connor via bitcoin-dev wrote:
> > > What happens after that I'm not sure.
> > >
> > 
> > Miners will learn to create anyone-can-spend outputs to bribe other miners
> > to build on their block rather than reorg it.  (Due to the coinbase
> > maturity, this will require some amount of floating capital.)
> 
> ...and that's a disaster for mining centralization, because the smaller miners
> need to pay larger bribes than larger miners. Not to mention having to keep
> capital around to do it.

Also, note how from a practical point of view, we'll need to add a new type of
tx that's only valid in a specific block, or other miners will just reorg those
anyone-can-spend outputs to steal them. It's not all that trivial to actually
do that... you'd have to have a signature that commits to the non-segwit part
of the coinbase outputs. Ugh.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/bc25b2ad/attachment.sig>

From macwhyte at gmail.com  Mon Jul 11 22:19:06 2022
From: macwhyte at gmail.com (James MacWhyte)
Date: Tue, 12 Jul 2022 00:19:06 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <CAH+Axy6h5r5SqPz8u_Lsj8hm91rtui63k4a6pV1Cp_nONZ2S9A@mail.gmail.com>

I think many of these discussions about the loss of the mining reward are
fatally shortsighted.

It's always daytime somewhere--when you talk about volume dropping at
night, that simply means there is not enough activity outside the US. If
Bitcoin continues its rise in price, mining rewards will still be
substantial for decades to come. Given another 10 years, I'm fairly
confident there will be enough adoption worldwide to make mining profitable
around the clock, even if the mining reward were minimal.

James


On Mon, Jul 11, 2022 at 8:19 PM Bram Cohen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> If transaction fees came in at an even rate over time all at the exact
> same level then they work fine for security, acting similarly to fixed
> block rewards. Unfortunately that isn't how it works in the real world.
> There's a very well established day/night cycle with fees going to zero
> overnight and even longer gaps on weekends and holidays. If in the future
> Bitcoin is entirely dependent on fees for security (scheduled very
> strongly) and this pattern keeps up (overwhelmingly likely) then this is
> going to become a serious problem.
>
> What's likely to happen is that at first there will simply be no or very
> few blocks mined overnight. There are likely to be some, as miners at first
> turn off their mining rigs completely overnight then adopt the more
> sophisticated strategy of waiting until there are enough fees in the
> mempool to warrant attempting to make a block and only then doing it.
> Unfortunately the gaming doesn't end there. Eventually the miners with
> lower costs of operation will figure out that they can collectively reorg
> the last hour (or some time period) of the day overnight and this will be
> profitable. That's likely to cause the miners with more expensive
> operations to stop attempting mining the last hour of the day preemptively.
>
> What happens after that I'm not sure. There are a small enough number of
> miners with a quirky enough distribution of costs of operation and
> profitability that the dynamic is heavily dependent on those specifics, but
> the beginnings of a slippery slope to a mining cabal which reorgs everyone
> else out of existence and eventually 51% attacks the whole thing have
> begun. It even gets worse than that because once there's a cabal
> aggressively reorging anyone else out when they make a block other miners
> will shut down and rapidly lose the ability to quickly spin up again, so
> the threshold needed for that 51% attack will keep going down.
>
> In short, relying completely on transaction fees for security is likely to
> be a disaster. What we can say from existing experience is that having
> transaction fees be about 10% of rewards on average works well. It's enough
> to incentivize collecting fees but not so much that it makes incentives get
> all weird. 90% transaction fees is probably very bad. 50% works but runs
> the risk of spikes getting too high.
>
> There are a few possible approaches to fixes. One would be to drag most of
> east asia eastward to a later time zone thus smoothing out the day/night
> cycle but that's probably unrealistic. Another would be to hard fork in
> fixed rewards in perpetuity, which is slightly less unrealistic but still
> extremely problematic.
>
> Much more actionable are measures which smooth out fees over time. Having
> wallets opportunistically collect their dust during times of low
> transaction fees would help and would save users on fees. Also making UX
> which clarifies when things are likely to take a day or week but that it's
> reliable would be a reasonable thing to do, but users unfortunately are
> very averse to transactions taking a while.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220712/4828c452/attachment-0001.html>

From pete at petertodd.org  Mon Jul 11 22:26:31 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Jul 2022 18:26:31 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAH+Axy6h5r5SqPz8u_Lsj8hm91rtui63k4a6pV1Cp_nONZ2S9A@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAH+Axy6h5r5SqPz8u_Lsj8hm91rtui63k4a6pV1Cp_nONZ2S9A@mail.gmail.com>
Message-ID: <Ysyjl5+tYl+k3iHD@petertodd.org>

On Tue, Jul 12, 2022 at 12:19:06AM +0200, James MacWhyte via bitcoin-dev wrote:
> I think many of these discussions about the loss of the mining reward are
> fatally shortsighted.
> 
> It's always daytime somewhere--when you talk about volume dropping at
> night, that simply means there is not enough activity outside the US. If
> Bitcoin continues its rise in price, mining rewards will still be
> substantial for decades to come. Given another 10 years, I'm fairly
> confident there will be enough adoption worldwide to make mining profitable
> around the clock, even if the mining reward were minimal.

Earth's population is extremely uneven over the earths surface, and the pacific
ocean is enormous and sparsely populated:

https://earthsky.org/earth/99-percent-worlds-population-receive-sunlight/

Anyway, designing protocols for "price go up forever" hopium is a bad idea.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/cc885f97/attachment.sig>

From erik at q32.com  Mon Jul 11 18:43:27 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 11 Jul 2022 14:43:27 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <CAJowKgLXU8fFduDu5=ZQt7j585weHN5Bj_Rqs3jnPbghzV474Q@mail.gmail.com>

> If in the future Bitcoin is entirely dependent on fees for security
(scheduled very strongly) and this pattern keeps up (overwhelmingly likely)
then this is going to become a serious problem.

We should carefully define "when" this becomes an issue.

Suppose the reward is 1.5625 BTC.   That's not very far away.   Assume you
need a 12-month investment in hardware.   One-year * 100% mining capacity
at that time is thus incentivised with 82125 bitcoin in losses against a
double spend.   If the price remains the same as it is now, that's 1.6
billion.  Is that a sufficient security budget?

As the rewards drop, the security of Bitcoin increasingly relies on "price
increases" and "fee pressure".  Obviously "price increases" isn't something
anyone should rely on.   Therefore the correct thing to address is "fee
pressure".

> There are a few possible approaches to fixes. One would be to drag most
of east asia eastward to a later time zone thus smoothing out the day/night
cycle but that's probably unrealistic. Another would be to hard fork in
fixed rewards in perpetuity...

There is abundant evidence that modifying on-chain utility alters fees.
There is little doubt that the lightning network has cut into the security
budget.  Future privacy protocols, such as mweb, will cut in even further.

Therefore another solution would be to simply *increase on-chain utility*,
driving up fees in response to the growth of layered transactions.

Proposals like "payment codes" and protocols like "omni" and "omnibolt" all
use on-chain resources without needing a soft fork.   Other proposals, like
covenants, may increase fee pressure more.   And, of course, promoting the
use of Bitcoin & Lightning in transactions - not just "holding", helps
promote fee growth and helps maintain the security budget.

Even if it's less fixed and predictable than tail-emissions, this approach
seems to make much more sense.


On Mon, Jul 11, 2022 at 2:19 PM Bram Cohen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> If transaction fees came in at an even rate over time all at the exact
> same level then they work fine for security, acting similarly to fixed
> block rewards. Unfortunately that isn't how it works in the real world.
> There's a very well established day/night cycle with fees going to zero
> overnight and even longer gaps on weekends and holidays. If in the future
> Bitcoin is entirely dependent on fees for security (scheduled very
> strongly) and this pattern keeps up (overwhelmingly likely) then this is
> going to become a serious problem.
>
> What's likely to happen is that at first there will simply be no or very
> few blocks mined overnight. There are likely to be some, as miners at first
> turn off their mining rigs completely overnight then adopt the more
> sophisticated strategy of waiting until there are enough fees in the
> mempool to warrant attempting to make a block and only then doing it.
> Unfortunately the gaming doesn't end there. Eventually the miners with
> lower costs of operation will figure out that they can collectively reorg
> the last hour (or some time period) of the day overnight and this will be
> profitable. That's likely to cause the miners with more expensive
> operations to stop attempting mining the last hour of the day preemptively.
>
> What happens after that I'm not sure. There are a small enough number of
> miners with a quirky enough distribution of costs of operation and
> profitability that the dynamic is heavily dependent on those specifics, but
> the beginnings of a slippery slope to a mining cabal which reorgs everyone
> else out of existence and eventually 51% attacks the whole thing have
> begun. It even gets worse than that because once there's a cabal
> aggressively reorging anyone else out when they make a block other miners
> will shut down and rapidly lose the ability to quickly spin up again, so
> the threshold needed for that 51% attack will keep going down.
>
> In short, relying completely on transaction fees for security is likely to
> be a disaster. What we can say from existing experience is that having
> transaction fees be about 10% of rewards on average works well. It's enough
> to incentivize collecting fees but not so much that it makes incentives get
> all weird. 90% transaction fees is probably very bad. 50% works but runs
> the risk of spikes getting too high.
>
> There are a few possible approaches to fixes. One would be to drag most of
> east asia eastward to a later time zone thus smoothing out the day/night
> cycle but that's probably unrealistic. Another would be to hard fork in
> fixed rewards in perpetuity, which is slightly less unrealistic but still
> extremely problematic.
>
> Much more actionable are measures which smooth out fees over time. Having
> wallets opportunistically collect their dust during times of low
> transaction fees would help and would save users on fees. Also making UX
> which clarifies when things are likely to take a day or week but that it's
> reliable would be a reasonable thing to do, but users unfortunately are
> very averse to transactions taking a while.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/c357b407/attachment-0001.html>

From vjudeu at gazeta.pl  Mon Jul 11 19:45:39 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Mon, 11 Jul 2022 21:45:39 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <165118572-15ce31cf3b31edf806ed76f11a104a90@pmq1v.m5r2.onet>

This problem can be solved by mining decentralization.

> What's likely to happen is that at first there will simply be no or very few blocks mined overnight.

Why? When it comes to energy usage, there are also cycles, because energy usage during the day is definitely higher than at night. You can clearly see that there are different prices for energy usage, and it depends if you use that energy overnight or not (usually, energy at night is cheaper, in the same way as other resources like Internet bandwidth limits, which are lower at night).

If less energy is used at night, then that energy is cheaper, and that means mining at night is more profitable.

> There are likely to be some, as miners at first turn off their mining rigs completely overnight then adopt the more sophisticated strategy of waiting until there are enough fees in the mempool to warrant attempting to make a block and only then doing it.

Again, that's the problem that should be solved by decentralized mining. Each reward of each miner should depend on all fees collected by that miner. It is easier to think about it if you assume zero basic block reward, where the whole coinbase transaction is based only on transaction fees. So, all that is needed, is to make it possible to get some transaction fees, related to mined transactions. So, it is far better to think about some kind of commit-and-reveal scheme, where each miner will independently mine a share of the block, and commit the block header on-chain. Then, it will be later possible to prove that such share was created at a given point in time, and to claim some reward (even off-chain), based on that proof.

> Eventually the miners with lower costs of operation will figure out that they can collectively reorg the last hour (or some time period) of the day overnight and this will be profitable.

That would mean on-chain transaction fees are very low. And that would mean off-chain transaction fees are higher (because if that's not the case, then it would mean that people stopped making any transactions at all, on all monetary systems globally, including all altcoins, and all fiat currencies). So, that case is possible in a situation, where Lightning Network will handle the most of the traffic, and where there will be almost no need to touch on-chain coins, because all of them will fly inside other networks like LN, sidechains, or Merge-Mined altcoins.

> In short, relying completely on transaction fees for security is likely to be a disaster.

Note that if you want to rely on something else than fees, then you have three options: big blocks, tail supply, or Merged Mining. Big blocks were discussed heavily in the past, tail supply is discussed now, and Merged Mining is still not touched correctly (to get it right, it is needed to track the heaviest chain of Proof of Work headers, and to distribute a fractions of coins, based on that, not like NameCoin, where you have a separate difficulty, so you can 51% attack NameCoin, even if you don't have 51% on Bitcoin). So, why not Merged Mining? Or what else could it be? And if it will be tail supply, then why hard-fork is needed at all? Make it explicitly, take single satoshis from all UTXOs in existence, and make it crystal clear, what this proposal is about: it is about taking a tiny fractions of satoshis or even smaller amounts from all UTXOs to form the future block rewards, that's what it is truly about, and users should be aware of that.

> One would be to drag most of east asia eastward to a later time zone thus smoothing out the day/night cycle but that's probably unrealistic.

What is unrealistic? Trustless mining on someone's behalf and being rewarded for doing that in P2P way is unrealistic? It is perfectly possible to deploy any "I will pay you for increasing block reward for block 1000000" scheme. We have OP_CHECKLOCKTIMEVERIFY for that, anyone can do that, even non-mining users can send their own coins to the future block numbers to increase future rewards with their own coins.

> Another would be to hard fork in fixed rewards in perpetuity, which is slightly less unrealistic but still extremely problematic.

No hard-fork is needed. Moving coins to OP_CHECKLOCKTIMEVERIFY outputs is a no-fork. Enforcing that on consensus level to make block rewards more smooth is a soft-fork. Creating a Merge-Mined sidechain for that is a no-fork (because new coins are produced out of thin air, so Proof of Work alone, and tracking the main chain is enough, no new rules are needed on the main chain).

> Much more actionable are measures which smooth out fees over time.

What about RSK and their way of making fees more smooth?


On 2022-07-11 20:19:51 user Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
If transaction fees came in at an even rate over time all at the exact same level then they work fine for security, acting similarly to fixed block rewards. Unfortunately that isn't how it works in the real world. There's a very well established day/night cycle with fees going to zero overnight and even longer gaps on weekends and holidays. If in the future Bitcoin is entirely dependent on fees for security (scheduled very strongly) and this pattern keeps up (overwhelmingly likely) then this is going to become a serious problem.


What's likely to happen is that at first there will simply be no or very few blocks mined overnight. There are likely to be some, as miners at first turn off their mining rigs completely overnight then adopt the more sophisticated strategy of waiting until there are enough fees in the mempool to warrant attempting to make a block and only then doing it. Unfortunately the gaming doesn't end there. Eventually the miners with lower costs of operation will figure out that they can collectively reorg the last hour (or some time period) of the day overnight and this will be profitable. That's likely to cause the miners with more expensive operations to stop attempting mining the last hour of the day preemptively.?


What happens after that I'm not sure. There are a small enough number of miners with a quirky enough distribution of costs of operation and profitability that the dynamic is heavily dependent on those specifics, but the beginnings of a slippery slope to a mining cabal which reorgs everyone else out of existence and eventually 51% attacks the whole thing have begun. It even gets worse than that because once there's a cabal aggressively reorging anyone else out when they make a block other miners will shut down and rapidly lose the ability to quickly spin up again, so the threshold needed for that 51% attack will keep going down.


In short, relying completely on transaction fees for security is likely to be a disaster. What we can say from existing experience is that having transaction fees be about 10% of rewards on average works well. It's enough to incentivize collecting fees but not so much that it makes incentives get all weird. 90% transaction fees is probably very bad. 50% works but runs the risk of spikes getting too high.


There are a few possible approaches to fixes. One would be to drag most of east asia eastward to a later time zone thus smoothing out the day/night cycle but that's probably unrealistic. Another would be to hard fork in fixed rewards in perpetuity, which is slightly less unrealistic but still extremely problematic.?


Much more actionable are measures which smooth out fees over time. Having wallets opportunistically collect their dust during times of low transaction fees would help and would save users on fees. Also making UX which clarifies when things are likely to take a day or week but that it's reliable would be a reasonable thing to do, but users unfortunately are very averse to transactions taking a while.

From erik at q32.com  Mon Jul 11 20:52:39 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 11 Jul 2022 16:52:39 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
Message-ID: <CAJowKg+cm5WeC0L=rfexd2n5fstSXw2sqMo1ZGR3unuqBJ8swA@mail.gmail.com>

>
> Miners will learn to create anyone-can-spend outputs to bribe other miners
> to build on their block rather than reorg it.  (Due to the coinbase
> maturity, this will require some amount of floating capital.)
>

(reward + avg fee) * 144 * 365 (one year) == approximate investment needed
to reorg the chain for a double-spend attack

in 30 years, assuming fees are still negligible (why wouldn't they be?
layer 2 works and layer 3 is coming), that's only 1200 bitcoin.  not really
a lot.

there's only few things that allow that security budget to be ok

 - we assume the price goes up a lot
 - we assume transactions get a lot more expensive
 - we don't care about double-spend attacks for very large transactions

i'd rather engineer block demand than ignore it
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/4d93ee87/attachment.html>

From larryruane at gmail.com  Mon Jul 11 18:25:41 2022
From: larryruane at gmail.com (Larry Ruane)
Date: Mon, 11 Jul 2022 12:25:41 -0600
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <165002130-e93e1ef73ec867025cbf3ea9b2d142bc@pmq2v.m5r2.onet>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
 <165002130-e93e1ef73ec867025cbf3ea9b2d142bc@pmq2v.m5r2.onet>
Message-ID: <CAEpYn+egaW2YMjJfOSTcaquGNpLhYAqf4sBY83WUsynRwQE1cQ@mail.gmail.com>

On Sun, Jul 10, 2022 at 3:05 AM vjudeu via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Not really, because people that run full nodes, just accepted Segwit
> and Taproot. They had no choice. And in case of zero satoshis, it could
> be the same: you would see zero if you look at raw bytes, but you will
> see non-zero values, if you use some upgraded client, that will support
> amount hiding, or other features.
>
> Segwit: old nodes see no new signatures, new nodes see all signatures
> Zero satoshis: old nodes see new zero amounts, new nodes see all amounts
>
> It is that simple.

I see what you mean, have the P2P messages depend on whether the peer
is running old code (doesn't know about tail emission) or new code
(does know about it).

I don't think this can work in this case. It worked for Segwit because
the P2P differences involved only signatures (which determine whether
the transaction is valid), not the *effect* of the transaction, that is,
how it changes the UTXO set. Consensus requires all nodes to always
agree on the UTXO set.

Larry Ruane

From micaroni at gmail.com  Mon Jul 11 18:38:34 2022
From: micaroni at gmail.com (micaroni at gmail.com)
Date: Mon, 11 Jul 2022 15:38:34 -0300
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <CAHvMVPTi5wLzNvW6z2F7aEcKd=Sqwqr39_W7rCQMbSN_hWApYQ@mail.gmail.com>

The expectation is that in a few years a space in the block will be very
competitive / expensive and be used only as a bridge for second layers or
big transactions. Who would have thought in 2017 that one day we would be
worried about cheap rates!

Anyway, it seems like a good point and I suggest giving this issue some
name for easy and later reference.


On Mon, Jul 11, 2022 at 3:20 PM Bram Cohen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> If transaction fees came in at an even rate over time all at the exact
> same level then they work fine for security, acting similarly to fixed
> block rewards. Unfortunately that isn't how it works in the real world.
> There's a very well established day/night cycle with fees going to zero
> overnight and even longer gaps on weekends and holidays. If in the future
> Bitcoin is entirely dependent on fees for security (scheduled very
> strongly) and this pattern keeps up (overwhelmingly likely) then this is
> going to become a serious problem.
>
> What's likely to happen is that at first there will simply be no or very
> few blocks mined overnight. There are likely to be some, as miners at first
> turn off their mining rigs completely overnight then adopt the more
> sophisticated strategy of waiting until there are enough fees in the
> mempool to warrant attempting to make a block and only then doing it.
> Unfortunately the gaming doesn't end there. Eventually the miners with
> lower costs of operation will figure out that they can collectively reorg
> the last hour (or some time period) of the day overnight and this will be
> profitable. That's likely to cause the miners with more expensive
> operations to stop attempting mining the last hour of the day preemptively.
>
> What happens after that I'm not sure. There are a small enough number of
> miners with a quirky enough distribution of costs of operation and
> profitability that the dynamic is heavily dependent on those specifics, but
> the beginnings of a slippery slope to a mining cabal which reorgs everyone
> else out of existence and eventually 51% attacks the whole thing have
> begun. It even gets worse than that because once there's a cabal
> aggressively reorging anyone else out when they make a block other miners
> will shut down and rapidly lose the ability to quickly spin up again, so
> the threshold needed for that 51% attack will keep going down.
>
> In short, relying completely on transaction fees for security is likely to
> be a disaster. What we can say from existing experience is that having
> transaction fees be about 10% of rewards on average works well. It's enough
> to incentivize collecting fees but not so much that it makes incentives get
> all weird. 90% transaction fees is probably very bad. 50% works but runs
> the risk of spikes getting too high.
>
> There are a few possible approaches to fixes. One would be to drag most of
> east asia eastward to a later time zone thus smoothing out the day/night
> cycle but that's probably unrealistic. Another would be to hard fork in
> fixed rewards in perpetuity, which is slightly less unrealistic but still
> extremely problematic.
>
> Much more actionable are measures which smooth out fees over time. Having
> wallets opportunistically collect their dust during times of low
> transaction fees would help and would save users on fees. Also making UX
> which clarifies when things are likely to take a day or week but that it's
> reliable would be a reasonable thing to do, but users unfortunately are
> very averse to transactions taking a while.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/9e338c0a/attachment.html>

From xi27pox at gmail.com  Mon Jul 11 21:18:10 2022
From: xi27pox at gmail.com (Pox)
Date: Mon, 11 Jul 2022 22:18:10 +0100
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <22D22964-9C06-44F8-8E28-23B979B882CE@gmail.com>

On 11 Jul 2022, at 19:12, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
<snip>
> There's a very well established day/night cycle with fees going to zero overnight and even longer gaps on weekends and holidays. If in the future Bitcoin is entirely dependent on fees for security (scheduled very strongly) and this pattern keeps up (overwhelmingly likely) then this is going to become a serious problem.

This may be true today when adoption is still low but will likely change if/when Bitcoin drives the world economy and is used 24/7 globally. There's a good chance our grandchildren will never see an empty mempool.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: Message signed with OpenPGP
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/1d316623/attachment-0001.sig>

From aj at erisian.com.au  Mon Jul 11 23:29:47 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 12 Jul 2022 09:29:47 +1000
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
Message-ID: <20220711232947.GC20899@erisian.com.au>

On Mon, Jul 11, 2022 at 11:12:52AM -0700, Bram Cohen via bitcoin-dev wrote:
> If transaction fees came in at an even rate over time all at the exact same
> level then they work fine for security, acting similarly to fixed block
> rewards. Unfortunately that isn't how it works in the real world.

That just becomes a market design question. There's been some trivial
effort put into that for bitcoin (ie, getting people to actually chooses
fees based on the weight of their transaction, and having weight be the
sole limiting factor for miners), but not a lot, and there's evidence
both from previous times in Bitcoin's history and from altcoin's that
the market can support higher fees.

Should we work on that today, though? It doesn't seem smart to me:
the subsidy is already quite substantial ($6.5 billion USD per year at
current prices) so raising fees to 10% of block reward would transfer
another $650M USD from bitcoin users to miners (or ASIC manfucturers
and electricity producers) each year, achieving what? Refuting some FUD?

Cheers,
aj


From aj at erisian.com.au  Mon Jul 11 23:57:31 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 12 Jul 2022 09:57:31 +1000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YsxXCQihhSrYuIfS@petertodd.org>
 <CAJowKgLDXr1ycGzCqRTe=iA_SQkchd1D4gtDD6o4gnK4dyn5dQ@mail.gmail.com>
Message-ID: <20220711235731.GD20899@erisian.com.au>

On Mon, Jul 11, 2022 at 08:56:04AM -0400, Erik Aronesty via bitcoin-dev wrote:
> > Alternatively, losses could be at a predictable rate that's entirely
> > different to the one Peter assumes.
> No, peter only assumes that there *is* a rate.

No, he assumes it's a constant rate. His integration step gives a
different result if lambda changes with t:
https://www.wolframalpha.com/input?i=dN%2Fdt+%3D+k+-+lambda%28t%29*N

On Mon, Jul 11, 2022 at 12:59:53PM -0400, Peter Todd via bitcoin-dev wrote:
> Give me an example of an *actual* inflation rate you expect to see, given a
> disaster of a given magnitude.

All I was doing was saying your proof is incorrect (or, rather, relies
on a highly unrealistic assumption), since I hadn't seen anybody else
point that out already.

But even if the proof were correct, I don't think it provides a useful
mechanism (since there's no reason to think miners gaining all the coins
lost in a year will be sufficient for anything), and I don't really
think the "security budget" framework (ie, that the percentage of total
supply given to miners each year is what's important for security)
you're implicitly relying on is particularly meaningful.

So no, not particularly interested in diving into it any deeper.

Cheers,
aj


From macwhyte at gmail.com  Tue Jul 12 00:01:09 2022
From: macwhyte at gmail.com (James MacWhyte)
Date: Tue, 12 Jul 2022 02:01:09 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <Ysyjl5+tYl+k3iHD@petertodd.org>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAH+Axy6h5r5SqPz8u_Lsj8hm91rtui63k4a6pV1Cp_nONZ2S9A@mail.gmail.com>
 <Ysyjl5+tYl+k3iHD@petertodd.org>
Message-ID: <CAH+Axy46g=BDwgDMcs6afWqHiOEBCGo1VXUedC7qQYdJBBx8jQ@mail.gmail.com>

On Tue, Jul 12, 2022 at 12:26 AM Peter Todd <pete at petertodd.org> wrote:

> Anyway, designing protocols for "price go up forever" hopium is a bad idea.
>

I'm quite disappointed that this is what you've reduced my argument to. The
price doesn't need hopium; if it stays between where it is now and the all
time high, that is enough to make mining rewards appealing.

Anyway, once the LA dinner rush ends at 8PM it is already noon in Tokyo.
The Pacific is big, but not *that* big.

Certainly we should be designing protocols in anticipation of increased
adoption, and not assuming the world will always be exactly as it is today?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220712/05d46411/attachment.html>

From roconnor at blockstream.com  Tue Jul 12 00:21:40 2022
From: roconnor at blockstream.com (Russell O'Connor)
Date: Mon, 11 Jul 2022 20:21:40 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <YsycpTbb3IYpQ2I7@petertodd.org>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
 <YsyX9Hjz4LU5otaT@petertodd.org> <YsycpTbb3IYpQ2I7@petertodd.org>
Message-ID: <CAMZUoKmsCjpcU323_Nbw2UBkcqTmBc9+yd9i=QBZvDX-gdH_hw@mail.gmail.com>

Oops, you are right.  We need the bribe to be the output of the coinbase,
but due to the maturity rule, it isn't really a bribe.

Too bad coinbases cannot take other coinbase outputs as inputs to bypass
the maturity rule.

I guess that means the bribe has to be by leaving transactions in the
mempool.

Also your point about centralization pressure is well taken.

On Mon, Jul 11, 2022 at 5:56 PM Peter Todd <pete at petertodd.org> wrote:

> On Mon, Jul 11, 2022 at 05:36:52PM -0400, Peter Todd via bitcoin-dev wrote:
> > On Mon, Jul 11, 2022 at 04:35:02PM -0400, Russell O'Connor via
> bitcoin-dev wrote:
> > > > What happens after that I'm not sure.
> > > >
> > >
> > > Miners will learn to create anyone-can-spend outputs to bribe other
> miners
> > > to build on their block rather than reorg it.  (Due to the coinbase
> > > maturity, this will require some amount of floating capital.)
> >
> > ...and that's a disaster for mining centralization, because the smaller
> miners
> > need to pay larger bribes than larger miners. Not to mention having to
> keep
> > capital around to do it.
>
> Also, note how from a practical point of view, we'll need to add a new
> type of
> tx that's only valid in a specific block, or other miners will just reorg
> those
> anyone-can-spend outputs to steal them. It's not all that trivial to
> actually
> do that... you'd have to have a signature that commits to the non-segwit
> part
> of the coinbase outputs. Ugh.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/2b9c824a/attachment.html>

From pete at petertodd.org  Tue Jul 12 00:31:19 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Jul 2022 20:31:19 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAH+Axy46g=BDwgDMcs6afWqHiOEBCGo1VXUedC7qQYdJBBx8jQ@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAH+Axy6h5r5SqPz8u_Lsj8hm91rtui63k4a6pV1Cp_nONZ2S9A@mail.gmail.com>
 <Ysyjl5+tYl+k3iHD@petertodd.org>
 <CAH+Axy46g=BDwgDMcs6afWqHiOEBCGo1VXUedC7qQYdJBBx8jQ@mail.gmail.com>
Message-ID: <YszA159sG+WFfYFi@petertodd.org>

On Tue, Jul 12, 2022 at 02:01:09AM +0200, James MacWhyte wrote:
> On Tue, Jul 12, 2022 at 12:26 AM Peter Todd <pete at petertodd.org> wrote:
> 
> > Anyway, designing protocols for "price go up forever" hopium is a bad idea.
> >
> 
> I'm quite disappointed that this is what you've reduced my argument to. The
> price doesn't need hopium; if it stays between where it is now and the all
> time high, that is enough to make mining rewards appealing.
> 
> Anyway, once the LA dinner rush ends at 8PM it is already noon in Tokyo.
> The Pacific is big, but not *that* big.
> 
> Certainly we should be designing protocols in anticipation of increased
> adoption, and not assuming the world will always be exactly as it is today?

We should design protocols that do reasonably well in *both* scenarios. Because
the future is unknown. Hell, I won't be surprised if further developments come
along that reduce demand for on-chain txs even further.

The fact is basing security budget in part on the total value of the coin being
secured very cleanly solves the problem of ensuring that there is sufficient
mining reward. Similarly, we also have to plan for the potential environment
where fee demand is very high. And we've done a good job of that, including
Lightning, replace-by-fee, etc.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/4918b612/attachment-0001.sig>

From pete at petertodd.org  Tue Jul 12 00:37:11 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 11 Jul 2022 20:37:11 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAMZUoKmsCjpcU323_Nbw2UBkcqTmBc9+yd9i=QBZvDX-gdH_hw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
 <YsyX9Hjz4LU5otaT@petertodd.org> <YsycpTbb3IYpQ2I7@petertodd.org>
 <CAMZUoKmsCjpcU323_Nbw2UBkcqTmBc9+yd9i=QBZvDX-gdH_hw@mail.gmail.com>
Message-ID: <YszCN9cnDt0kG3++@petertodd.org>

On Mon, Jul 11, 2022 at 08:21:40PM -0400, Russell O'Connor via bitcoin-dev wrote:
> Oops, you are right.  We need the bribe to be the output of the coinbase,
> but due to the maturity rule, it isn't really a bribe.
> 
> Too bad coinbases cannot take other coinbase outputs as inputs to bypass
> the maturity rule.
>
> I guess that means the bribe has to be by leaving transactions in the
> mempool.

...and that's hardly a bribe. That's just being unable to mine competitively
because your operation is too small.

Anyway, I think all this is a good example of how mining being dependent on
fee-income makes mining much more complex, and harder to do as a small player.
Not good.

> Also your point about centralization pressure is well taken.

Thanks

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/bde354fc/attachment.sig>

From bram at chia.net  Tue Jul 12 02:47:43 2022
From: bram at chia.net (Bram Cohen)
Date: Mon, 11 Jul 2022 19:47:43 -0700
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <Ysyb4T/36oXeAH+z@petertodd.org>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <Ysyb4T/36oXeAH+z@petertodd.org>
Message-ID: <CAHUJnBA+gb0AnGDRB9iA99R6=L0Y5DffB7aE2x+9dU9vyOoXmw@mail.gmail.com>

On Mon, Jul 11, 2022 at 2:53 PM Peter Todd <pete at petertodd.org> wrote:

>
> The only type of fee-smoothing scheme that is feasible is to smooth an
> entirely
> separate category of fees that are made mandatory. For example, you could
> achieve the economic impact of inflation by having a fixed value*time
> based fee
> that goes to timelocked anyone-can-spend outputs in the coinbase to push
> the
> fee forward to other miners.
>

I'm not sure what the implications would be of charging coins for moving
based on their value times how long since they last moved would be (I
*think* that's what you're suggesting). It isn't obviously bad, but feels
weird to me.

That said, a scheme which would work would be to have a fixed minimum fee
of satoshis/vbyte which is required to be repaid out by the miner into a
pool and they get back a fixed fraction of what was in that pool. The pool
could simply be a rolling coin which keeps the balance. That's still a bit
ugly but doesn't lessen block size significantly, is fairly coherent, and
is a soft fork. It's the best emergency measure I'm aware of.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220711/519eb7bd/attachment.html>

From dizzle at pointbiz.com  Tue Jul 12 03:56:03 2022
From: dizzle at pointbiz.com (Peter)
Date: Tue, 12 Jul 2022 03:56:03 +0000
Subject: [bitcoin-dev] Security problems with relying on transaction
	fees for security
Message-ID: <fJguYsLelZiEN8g25KZONgNp8qHvY3UkkEE7uUtI6O7MFgaNcKBVc5l5gCUlFSxQLE5Hzu3QobS8ZE4pzmTVqSG8wU5Y0Q3jHL3X6Wsye4c=@pointbiz.com>

The Bitcoin emission curve requires a 2x value increase per 210,000 blocks to maintain the existing security level.

Transactions are practically irreversible when the value the miners expend (not receive) is greater than said transaction value.

If you send 1000 gold grams of value in a transaction then it's finalized after 1000 gold grams worth of energy have been spent on mining blocks.

Bitcoin is bootstrapping from the English population and its final steady state is to eliminate fiat and be a global reserve currency and a daily transactional currency. So, we should engineer for other language and religious communities to join in. Saturday and Sunday are business days in a large portion of the planet.

Bike shedding a tail emission to try to support Bitcoin with the current 2% to 4% global adoption (in terms of holding not spending) as the world's premier pet rock is a poor strategy.

We can expect Bitcoin to never have a steady value because businesses turn profits on average of 10% so there will be a steady increase in hoarding to fuel number go up technology. Prices will be more reliably accounted for in gold grams, as well as corporate and government accounts being denominated in gold grams not satoshis. We can expect the boom and bust economic cycle to disappear when the price of money (interest rates) is set by the market. The value of money will still be set by the government via average government wages.

With 3000 Lightning open/ close tx per block and 6 billion adults it's 38 years of backlog to onboard the entire adult population. That's not including corporations.

If we assume 20% of people use non-custodial Lightning but they each have 5 channels open we are back to 38 years backlog.

There's a cost and risk to reorganize the chain to chase fees in a zero block reward world. And as stated miners can leave honey in the mempool pot. We shouldn't expect empty mempools with occational transactions with outlier large fees that cause overnight reorganizations.

In a state of victory, nation-states will use solar power during the daytime to ensure local entities have priority access to confirmations and Bitcoin will receive nation-state altruism in such a future as it receives person-based altruism today. Because we as individuals and nation states all win if we keep the Schelling point of 21M bitcoins.

We shouldn't make naive miner centralization models when there's national security considerations to keep the chain moving forward in a stable way. Big miners won't take all the fees and put small miners out of business because energy production itself is decentralized and idle energy will always keep a diverse set of miners on the network.

Block rewards are no guarantee of security as we have seen with lesser PoW coins (Ethereum Classic and others). And during the Bitcoin immaculate conception period of 2009 to 2012 the block reward served mainly as a distribution method since JP Morgan had enough GPU power to reorganize us to block 0 but that didn't happen. So, the block reward offered little security in those days.

Bitcoin works but in order to win it needs global adoption. No amount of arbitrary inflation can ensure a sufficient security budget.

Block rewards are to distribute the money we can expect mining to transition to a public service from the current for-profit business model when there's a 38 year backlog and every nation is on board for the game theoretic reason to deny any single nation the power of seigniorage of the global reserve currency.

Regards

Peter Kroll

(pointbiz / BTCCuracao)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220712/1d5c426a/attachment.html>

From erik at q32.com  Tue Jul 12 11:57:40 2022
From: erik at q32.com (Erik Aronesty)
Date: Tue, 12 Jul 2022 07:57:40 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <fJguYsLelZiEN8g25KZONgNp8qHvY3UkkEE7uUtI6O7MFgaNcKBVc5l5gCUlFSxQLE5Hzu3QobS8ZE4pzmTVqSG8wU5Y0Q3jHL3X6Wsye4c=@pointbiz.com>
References: <fJguYsLelZiEN8g25KZONgNp8qHvY3UkkEE7uUtI6O7MFgaNcKBVc5l5gCUlFSxQLE5Hzu3QobS8ZE4pzmTVqSG8wU5Y0Q3jHL3X6Wsye4c=@pointbiz.com>
Message-ID: <CAJowKgKM7B6UY-dNNTym7GAPS_dZ0dnMUPFJe-bSssKqt=zL5Q@mail.gmail.com>

>
>  we can expect mining to transition to a public service from the current
> for-profit business model
>

I get it now

Game theory would predict all of the major players mining in the future
will be large holders

If you're holding a hundred Bitcoin you should take one, sell it for mining
equipment and use it  to ensure the rest is stable

I guess that's perfectly reasonable

Yeah I'm on board with the idea that this is a non-issue

Interested parties will continue to maintain the security of the chain with
the same basic game theoretic stuff

Bitcoin doesn't need a security budget

Existing holders have the ability the means and the incentive to secure
their funds

Probably the only thing Bitcoiners should do is to advertise this rather
than to make it some sort of secret
















>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220712/df4c711e/attachment.html>

From dizzle at pointbiz.com  Tue Jul 12 15:08:41 2022
From: dizzle at pointbiz.com (Peter)
Date: Tue, 12 Jul 2022 15:08:41 +0000
Subject: [bitcoin-dev] Security problems with relying on transaction
	fees for security
In-Reply-To: <CAJowKgKM7B6UY-dNNTym7GAPS_dZ0dnMUPFJe-bSssKqt=zL5Q@mail.gmail.com>
References: <fJguYsLelZiEN8g25KZONgNp8qHvY3UkkEE7uUtI6O7MFgaNcKBVc5l5gCUlFSxQLE5Hzu3QobS8ZE4pzmTVqSG8wU5Y0Q3jHL3X6Wsye4c=@pointbiz.com>
 <CAJowKgKM7B6UY-dNNTym7GAPS_dZ0dnMUPFJe-bSssKqt=zL5Q@mail.gmail.com>
Message-ID: <fayyD0qiGw5Q5mPkAYPTurXQSlg7NCKFjKaKXCE0O52NYMeBQUxNtMlku7TVjHl9uOimdy2UzQUwI_CTTfKKtnXjZVWPdpdSw0miLi2ih4k=@pointbiz.com>

>Probably the only thing Bitcoiners should do is to advertise this rather than to make it some sort of secret

Satoshi made this clear in the beginning that mining will trend to where energy is free.

During this stage of bootstrapping we need a security budget to prevent nation state attacks. In the future we will need to lose money mining Bitcoin to prevent the reemergence of a fiat reserve currency.

The emission curve lasts over 100 years because Bitcoin success state requires it to be entrenched globally.

We all work for Satoshi because he invented a currency that is digital and deflationary. Gold doesn't work as a deflationary currency because of physical limitations.

Yes, today people are spending some of their Bitcoin to protect the remainder of their bag. We should expect this to continue into the future. I routinely give away Bitcoin to grow support for it in my local jurisdiction. This is another form of securing Bitcoin (people power). This helps protect my deflationary wealth increase and is net profitable in my view because increased adoption powers deflation. If Bitcoin loses its deflationary promise then it will be abandoned.

In the future all the miners will be energy producers. There may be small home miners who have excess energy but most energy is produced by governments today and likely in the future.

So, a potential solution is you take 1% of your Bitcoin annually to secure the network for the promise of 10% deflation (increase in purchasing power). More likely large holders will be doing this. Yes, there will be free riders. Today there's also free riders who receive part of our Bitcoins via tax collection and welfare. In the future they receive free deflation instead and are incentived to save Bitcoin to receive this stipend.

Regards

Peter Kroll

-------- Original Message --------
On 12 Jul 2022, 07:57, Erik Aronesty wrote:

>> we can expect mining to transition to a public service from the current for-profit business model
>
> I get it now
>
> Game theory would predict all of the major players mining in the future will be large holders
>
> If you're holding a hundred Bitcoin you should take one, sell it for mining equipment and use it to ensure the rest is stable
>
> I guess that's perfectly reasonable
>
> Yeah I'm on board with the idea that this is a non-issue
>
> Interested parties will continue to maintain the security of the chain with the same basic game theoretic stuff
>
> Bitcoin doesn't need a security budget
>
> Existing holders have the ability the means and the incentive to secure their funds
>
> Probably the only thing Bitcoiners should do is to advertise this rather than to make it some sort of secret
>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220712/e4c06b53/attachment.html>

From bitcoin-dev at rgrant.org  Tue Jul 12 17:46:43 2022
From: bitcoin-dev at rgrant.org (Ryan Grant)
Date: Tue, 12 Jul 2022 17:46:43 +0000
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAJowKgKM7B6UY-dNNTym7GAPS_dZ0dnMUPFJe-bSssKqt=zL5Q@mail.gmail.com>
References: <fJguYsLelZiEN8g25KZONgNp8qHvY3UkkEE7uUtI6O7MFgaNcKBVc5l5gCUlFSxQLE5Hzu3QobS8ZE4pzmTVqSG8wU5Y0Q3jHL3X6Wsye4c=@pointbiz.com>
 <CAJowKgKM7B6UY-dNNTym7GAPS_dZ0dnMUPFJe-bSssKqt=zL5Q@mail.gmail.com>
Message-ID: <CAMnpzfr1dB1+L92aNG84cHA5=sQR815LyhHytpPC+Bq7fGvKuw@mail.gmail.com>

BIP119, OP_CTV, allows value to be assigned in a predetermined tree
of payments that confirms with a single output.

This allows batched transactions in the predetermined tree (e.g.
withdrawals from a centralized exchange) to be anchored in a way that
disallows double-spending of the inputs, yet allows the recipients to
smooth out mining fees for their withdrawal outputs, at their leisure.

It's a perfect design for a world where there are always more
transactions to be made than block space allows, yet only some of them
are urgent.  As it applies to concerns mentioned in this thread, it
can be used to shift transaction fees to later blocks.  Whenever
smoothing transaction fees would be a nice-to-have, this is one way to
have it.

  https://utxos.org/uses/scaling/
  https://utxos.org/analysis/bip_simulation/

On Tue, Jul 12, 2022 at 9:49 AM Peter <dizzle at pointbiz.com> wrote:
> With 3000 Lightning open/ close tx per block and 6 billion adults
> it's 38 years of backlog to onboard the entire adult
> population. That's not including corporations.

Separately, OP_CTV also allows slightly different payment channels
from the existing Lightning Network, that allow non-interactive
batched opens.  Using this technique, onboarding 6 billion adults to
payment channels would be limited only by their willingness to
participate.

  https://utxos.org/uses/non-interactive-channels/

From tomh at thinlink.com  Wed Jul 13 00:38:32 2022
From: tomh at thinlink.com (Tom Harding)
Date: Tue, 12 Jul 2022 17:38:32 -0700
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <Ysyjl5+tYl+k3iHD@petertodd.org>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAH+Axy6h5r5SqPz8u_Lsj8hm91rtui63k4a6pV1Cp_nONZ2S9A@mail.gmail.com>
 <Ysyjl5+tYl+k3iHD@petertodd.org>
Message-ID: <6617a48d-15b9-699c-42f3-35b32245102e@thinlink.com>

On 7/11/22 15:26, Peter Todd via bitcoin-dev wrote:
>
> Anyway, designing protocols for "price go up forever" hopium is a bad idea.

Yet that is the design, and it's a good one.? It is equivalent to 
relying on bitcoin to steadily grow in utility vs. fiat currencies.

If it fails to do that, there's no point anyway.


From john.tromp at gmail.com  Wed Jul 13 09:43:57 2022
From: john.tromp at gmail.com (John Tromp)
Date: Wed, 13 Jul 2022 11:43:57 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <mailman.82083.1657699581.8511.bitcoin-dev@lists.linuxfoundation.org>
References: <mailman.82083.1657699581.8511.bitcoin-dev@lists.linuxfoundation.org>
Message-ID: <CAOU__fz=AiWyOMvbLxpQZTho5QJJCUvwmcVB06gyoEwzy02vdg@mail.gmail.com>

> The emission curve lasts over 100 years because Bitcoin success state requires it to be entrenched globally.

It effectively doesn't. The last 100 years from 2040-2140 only emits a
pittance of about 0.4 of all bitcoin.

What matters for proper distribution is the shape of the emission
curve. If you emit 99% in the first year and 1% in the next 100 years,
your emission "lasts" over 100 years, and you achieve a super low
supply inflation rate immediately after 1 year, but it's obviously a
terrible form of distribution.

This is easy to quantify as the expected time of emission which would
be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
Bitcoin is not much better in that the expected time of emission of an
bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.

Monero appears much better since its tail emission yields an infinite
expected time of emission, but if we avoid infinities by looking at
just the soft total emission [1], which is all that is emitted before
a 1% yearly inflation, then Monero is seen to actually be a lot worse
than Bitcoin, due to emitting over 40% in its first year and halving
the reward much faster. Ethereum is much worse still with its huge
premine and PoS coins like Algorand are scraping the bottom with their
expected emission time of 0.

There's only one coin whose expected (soft) emission time is larger
than bitcoin's, and it's about an order of magnitude larger, at 50
years.

[1] https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153

From john.tromp at gmail.com  Wed Jul 13 11:56:33 2022
From: john.tromp at gmail.com (John Tromp)
Date: Wed, 13 Jul 2022 13:56:33 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAOU__fz=AiWyOMvbLxpQZTho5QJJCUvwmcVB06gyoEwzy02vdg@mail.gmail.com>
References: <mailman.82083.1657699581.8511.bitcoin-dev@lists.linuxfoundation.org>
 <CAOU__fz=AiWyOMvbLxpQZTho5QJJCUvwmcVB06gyoEwzy02vdg@mail.gmail.com>
Message-ID: <CAOU__fyz-_j3+jyyi8+FmPa9UbXuBTOfiAOD7Wd66x5wYod7SQ@mail.gmail.com>

> There's only one coin whose expected (soft) emission time is larger
> than bitcoin's, and it's about an order of magnitude larger, at 50
> years.

Make that two coins. For DOGE it is 33 years.

From gino.pinuto at gmail.com  Wed Jul 13 12:11:59 2022
From: gino.pinuto at gmail.com (Gino Pinuto)
Date: Wed, 13 Jul 2022 14:11:59 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAOU__fz=AiWyOMvbLxpQZTho5QJJCUvwmcVB06gyoEwzy02vdg@mail.gmail.com>
References: <mailman.82083.1657699581.8511.bitcoin-dev@lists.linuxfoundation.org>
 <CAOU__fz=AiWyOMvbLxpQZTho5QJJCUvwmcVB06gyoEwzy02vdg@mail.gmail.com>
Message-ID: <CAA3CggEVmx+97TE05Oe3ViFHLC0ejmuRX7L_tMWrRVhYsxaF9w@mail.gmail.com>

What about burning all fees and keep a block reward that will smooth out
while keeping the ~21M coins limit ?

Benefits :
- Miners would still be incentivized to collect higher fees transaction
with the indirect perspective to generate more reward in future.
- Revenues are equally distributed over time to all participants and we
solve the overnight discrepancy.
- Increased velocity of money will reduce the immediate supply of bitcoin
cooling down the economy.
- Reduction of velocity will have an impact on miners only if it persevere
in the long term but short term they will still perceive the buffered
reward.

I don't have ideas yet on how to elegantly implement this.


On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> > The emission curve lasts over 100 years because Bitcoin success state
> requires it to be entrenched globally.
>
> It effectively doesn't. The last 100 years from 2040-2140 only emits a
> pittance of about 0.4 of all bitcoin.
>
> What matters for proper distribution is the shape of the emission
> curve. If you emit 99% in the first year and 1% in the next 100 years,
> your emission "lasts" over 100 years, and you achieve a super low
> supply inflation rate immediately after 1 year, but it's obviously a
> terrible form of distribution.
>
> This is easy to quantify as the expected time of emission which would
> be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
> Bitcoin is not much better in that the expected time of emission of an
> bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.
>
> Monero appears much better since its tail emission yields an infinite
> expected time of emission, but if we avoid infinities by looking at
> just the soft total emission [1], which is all that is emitted before
> a 1% yearly inflation, then Monero is seen to actually be a lot worse
> than Bitcoin, due to emitting over 40% in its first year and halving
> the reward much faster. Ethereum is much worse still with its huge
> premine and PoS coins like Algorand are scraping the bottom with their
> expected emission time of 0.
>
> There's only one coin whose expected (soft) emission time is larger
> than bitcoin's, and it's about an order of magnitude larger, at 50
> years.
>
> [1]
> https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220713/66fdc965/attachment.html>

From erik at q32.com  Wed Jul 13 12:18:43 2022
From: erik at q32.com (Erik Aronesty)
Date: Wed, 13 Jul 2022 08:18:43 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <6617a48d-15b9-699c-42f3-35b32245102e@thinlink.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAH+Axy6h5r5SqPz8u_Lsj8hm91rtui63k4a6pV1Cp_nONZ2S9A@mail.gmail.com>
 <Ysyjl5+tYl+k3iHD@petertodd.org>
 <6617a48d-15b9-699c-42f3-35b32245102e@thinlink.com>
Message-ID: <CAJowKgK2dgs+0edq4aN-dK9qeGAWBhUcgH_Hu=_H+yx8LBHoVw@mail.gmail.com>

Bitcoin doesn't rely on fees.  It relys on users protecting the network out
of self interest

- running nodes now
- mining later

It has always been incentivised by holders acting out of self interest

If large holders allocating a small percentage to mining to protect their
interest, that's all Bitcoin needs

Although I can think of other protocols that work that way and people don't
like them







On Wed, Jul 13, 2022, 4:06 AM Tom Harding via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On 7/11/22 15:26, Peter Todd via bitcoin-dev wrote:
> >
> > Anyway, designing protocols for "price go up forever" hopium is a bad
> idea.
>
> Yet that is the design, and it's a good one.  It is equivalent to
> relying on bitcoin to steadily grow in utility vs. fiat currencies.
>
> If it fails to do that, there's no point anyway.
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220713/671597fe/attachment.html>

From manecosta at gmail.com  Wed Jul 13 13:29:43 2022
From: manecosta at gmail.com (Manuel Costa)
Date: Wed, 13 Jul 2022 14:29:43 +0100
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAA3CggEVmx+97TE05Oe3ViFHLC0ejmuRX7L_tMWrRVhYsxaF9w@mail.gmail.com>
References: <mailman.82083.1657699581.8511.bitcoin-dev@lists.linuxfoundation.org>
 <CAOU__fz=AiWyOMvbLxpQZTho5QJJCUvwmcVB06gyoEwzy02vdg@mail.gmail.com>
 <CAA3CggEVmx+97TE05Oe3ViFHLC0ejmuRX7L_tMWrRVhYsxaF9w@mail.gmail.com>
Message-ID: <CAAxiurZhzhPNuysoaByiLCdRpeyxz8S+onnoGTWC+MpanDFB_Q@mail.gmail.com>

> What about burning all fees and keep a block reward that will smooth out
while keeping the ~21M coins limit ?

This would be a hard fork afaict as it would go against the rules of the
coinbase transaction following the usual halving schedule.

However, if instead we added a rule that fees have to be sent to an anyone
can spend output with a timelock we might be able to achieve a similar
thing.

Highly inefficient example:

- Split blocks into 144 (about a day)
- A mined block takes all the fees and distributes them equally into 144
new outputs (anyone can spend) time locked to each of the 144 blocks of the
next day.
- Next day, for each block, we'd have available an amount equivalent to the
previous day total fees / 144. So we deliver previous day's fees smoothed
out.

Notes:
144 is arbitrary in the example.
This specific approach would obviously not work as most of those outputs
would be dust and the miner would need to waste an absurd amount of block
space just to grab them, but maybe there's a smarter way to do it.


Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
escreveu no dia quarta, 13/07/2022 ?(s) 13:19:

> What about burning all fees and keep a block reward that will smooth out
> while keeping the ~21M coins limit ?
>
> Benefits :
> - Miners would still be incentivized to collect higher fees transaction
> with the indirect perspective to generate more reward in future.
> - Revenues are equally distributed over time to all participants and we
> solve the overnight discrepancy.
> - Increased velocity of money will reduce the immediate supply of bitcoin
> cooling down the economy.
> - Reduction of velocity will have an impact on miners only if it persevere
> in the long term but short term they will still perceive the buffered
> reward.
>
> I don't have ideas yet on how to elegantly implement this.
>
>
> On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> > The emission curve lasts over 100 years because Bitcoin success state
>> requires it to be entrenched globally.
>>
>> It effectively doesn't. The last 100 years from 2040-2140 only emits a
>> pittance of about 0.4 of all bitcoin.
>>
>> What matters for proper distribution is the shape of the emission
>> curve. If you emit 99% in the first year and 1% in the next 100 years,
>> your emission "lasts" over 100 years, and you achieve a super low
>> supply inflation rate immediately after 1 year, but it's obviously a
>> terrible form of distribution.
>>
>> This is easy to quantify as the expected time of emission which would
>> be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
>> Bitcoin is not much better in that the expected time of emission of an
>> bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.
>>
>> Monero appears much better since its tail emission yields an infinite
>> expected time of emission, but if we avoid infinities by looking at
>> just the soft total emission [1], which is all that is emitted before
>> a 1% yearly inflation, then Monero is seen to actually be a lot worse
>> than Bitcoin, due to emitting over 40% in its first year and halving
>> the reward much faster. Ethereum is much worse still with its huge
>> premine and PoS coins like Algorand are scraping the bottom with their
>> expected emission time of 0.
>>
>> There's only one coin whose expected (soft) emission time is larger
>> than bitcoin's, and it's about an order of magnitude larger, at 50
>> years.
>>
>> [1]
>> https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220713/a72fcc5e/attachment-0001.html>

From alfred_hodler at protonmail.com  Wed Jul 13 14:06:29 2022
From: alfred_hodler at protonmail.com (Alfred Hodler)
Date: Wed, 13 Jul 2022 14:06:29 +0000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <Ysl4t9K8lfxRSsNM@petertodd.org>
References: <Ysl4t9K8lfxRSsNM@petertodd.org>
Message-ID: <9VHlQ8Fr39zTWR6tg4K3QgZpSgVSDmhsR2QUoY08wN6-yYyKrFqSQqyjYYQP6uFIMYWlphS99QXjRYVhodO7yGBttzDGtAUcAgicEp__IaU=@protonmail.com>

Rather than get bogged down discussing the technical details of how such a change could even take place, I'll go ahead and say that modifying the 21M cap is a supremely reckless idea. Your mathematical proof aside, the idea rests on the unprovable premise that people will keep losing coins indefinitely. You could also argue that once Bitcoin is valuable or widespread enough, it'll incentivize the creation of superior storage, custody and inheritance solutions. One could also write a bunch of "proofs" to support that, but it doesn't mean much when the core idea remains purely in the hypothetical sphere.

One of Bitcoin's value propositions is having a fixed supply cap with a predictable issuance curve. People bought into Bitcoin because it promises to NOT be fiat and because it promises NOT to do what central banks are doing. The moment you start messing with that, it'll invite people to try to tinker with the protocol whenever "security" concerns demand it. Once a powerful enough adversary sees that Overton window moving, they'll probably throw everything they have at this particular weakness in an attempt to subvert the protocol further.

Alfred


From zachgrw at gmail.com  Wed Jul 13 18:29:53 2022
From: zachgrw at gmail.com (Zac Greenwood)
Date: Wed, 13 Jul 2022 20:29:53 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <20220711235731.GD20899@erisian.com.au>
References: <YsxXCQihhSrYuIfS@petertodd.org>
 <CAJowKgLDXr1ycGzCqRTe=iA_SQkchd1D4gtDD6o4gnK4dyn5dQ@mail.gmail.com>
 <20220711235731.GD20899@erisian.com.au>
Message-ID: <CAJ4-pEC_Tq_go0=7w4BLFMiuGd+OGpT6_M9tT31Pr+2eCHT7Og@mail.gmail.com>

> your proof is incorrect (or, rather, relies on a highly unrealistic
assumption)

The assumption that coin are lost ar a constant rate is not required. Tail
emission will asymptotically decrease the rate of inflation to zero, at
which point the increase in coin exactly matches the amount of coin lost.
The rate at which coin are lost is irrelevant.

This is easy to see. Consider no coin are ever lost. The rate of inflation
will slowly decline to zero as the amount of coin grows to infinity.
However, lost coin ensures that the point at which the rate of inflation
becomes zero will be reached sooner.

If a black swan event destroys 90% of all coin, the constant tail emission
will instantly begin to inflate the supply at a 10x higher percentage. The
inflation expressed as a percentage will also immediately start to decline
because each new coin will inflate the total supply with a slightly smaller
percentage than the previous new coin. The rate of inflation will continue
to decline until zero, at which point it again matches the coin-loss
induced deflation rate.

Another scenario. Suppose that the number of coin lost becomes
significantly less for instance because better wallets and a more mature
ecosystem prevent many common coin loss events. A constant issuance of new
coin would increase the total supply, but each new coin would add less to
the total supply when expressed as a percentage. The rate of inflation
would decline to zero, at which point it again has matched the rate of
deflation due to coin loss.

Even when the rate at which coin are lost will not be constant, a tail
emission will tend to an equilibrium.

It must be observed that tail emission causes the total *potential* supply
to vary greatly depending on the deflation rate. In a low-deflation
scenario, the supply will have to grow much larger before an equilibrium
can be reached than in a scenario with moderate deflation rate. Not being
able to predict the ultimate total supply of coin is however seems
undesirable. But is it really?

The rate of inflation required for keeping Bitcoin useful highly depends on
the value of the token. At US$100k, a tail emission of 1 BTC per block
ensures safety within a few blocks for even large amounts. Continuing this
example, 1 BTC per block would mean 5.25m extra coin per 100 years. At 21m
coins and 1 BTC perpetual reward per block, the rate of inflation would be
0.25% per year.

This should put things a bit into perspective.


On Tue, 12 Jul 2022 at 01:58, Anthony Towns via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Mon, Jul 11, 2022 at 08:56:04AM -0400, Erik Aronesty via bitcoin-dev
> wrote:
> > > Alternatively, losses could be at a predictable rate that's entirely
> > > different to the one Peter assumes.
> > No, peter only assumes that there *is* a rate.
>
> No, he assumes it's a constant rate. His integration step gives a
> different result if lambda changes with t:
> https://www.wolframalpha.com/input?i=dN%2Fdt+%3D+k+-+lambda%28t%29*N
>
> On Mon, Jul 11, 2022 at 12:59:53PM -0400, Peter Todd via bitcoin-dev wrote:
> > Give me an example of an *actual* inflation rate you expect to see,
> given a
> > disaster of a given magnitude.
>
> All I was doing was saying your proof is incorrect (or, rather, relies
> on a highly unrealistic assumption), since I hadn't seen anybody else
> point that out already.
>
> But even if the proof were correct, I don't think it provides a useful
> mechanism (since there's no reason to think miners gaining all the coins
> lost in a year will be sufficient for anything), and I don't really
> think the "security budget" framework (ie, that the percentage of total
> supply given to miners each year is what's important for security)
> you're implicitly relying on is particularly meaningful.
>
> So no, not particularly interested in diving into it any deeper.
>
> Cheers,
> aj
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220713/37d7c521/attachment.html>

From aj at erisian.com.au  Thu Jul 14 00:54:48 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Thu, 14 Jul 2022 10:54:48 +1000
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAMZUoKmsCjpcU323_Nbw2UBkcqTmBc9+yd9i=QBZvDX-gdH_hw@mail.gmail.com>
References: <CAHUJnBDYDbgr3C158o7c6_XXdG+kqJruFo=od_RmPFk_GS0udw@mail.gmail.com>
 <CAMZUoKmN1Sj=C-asUKCB0hbe-V2fRMsFzNn6kcsJeigbnz3fgQ@mail.gmail.com>
 <YsyX9Hjz4LU5otaT@petertodd.org> <YsycpTbb3IYpQ2I7@petertodd.org>
 <CAMZUoKmsCjpcU323_Nbw2UBkcqTmBc9+yd9i=QBZvDX-gdH_hw@mail.gmail.com>
Message-ID: <20220714005448.GA24835@erisian.com.au>

On Mon, Jul 11, 2022 at 08:21:40PM -0400, Russell O'Connor via bitcoin-dev wrote:
> Oops, you are right.  We need the bribe to be the output of the coinbase,
> but due to the maturity rule, it isn't really a bribe.
> Too bad coinbases cannot take other coinbase outputs as inputs to bypass
> the maturity rule.

Sufficiently advanced tx introspection could be used for this; spend the
fees in the coinbase to address A, but also create a 0sat output via a
regular tx to the scriptPubKey "1 CSV". Note that tx's txid as B. The
next miner claims the bribe B, by spending the 0sat output to itself
with a 1-in, 1-out tx, with scriptPubKey C.

  nVersion = 1
  inputs = [txid=B, vout=0, scriptSig="", nSeq=1]
  outputs = [value=0, scriptPubKey=C]
  nLocktime = 0

Now we get back to A, and say that it's scriptPubKey uses a script that
takes "C" as input, has "B" hardcoded, calculates the txid of the tx
above, call it D, and then uses tx introspection to check that one of
the inputs of the tx has D as the txid.

> I guess that means the bribe has to be by leaving transactions in the
> mempool.

You *could* make that work if you allow tx's to use the annex to commit
to a recent block.

That is, if you just mined block 740,000 and its hash was
00000000000000000005f28764680afdbd8375216ff8f30b17eeb26bd98aac63,
you construct a bribe tx paying to "OP_1", but when you sign it,
you add "50ee070b4aa0d98aac63" as the annex (tag=ee, length=07,
value[0:3]=height=0b4aa0=470k, value[3:]=d98aac63), and (via a soft fork)
nodes then only consider that tx valid if the block at "height" ends in
"d98aac63". There's then only a 1-in-4B chance that someone who extends
a competitor to your block could claim the bribe, at a cost of 11 extra
witness bytes.

But such txs (and anything that descends from them) would become invalid
with as little as a 1-block reorg, which would pretty much defeat the
entire purpose of the maturity delay...

Cheers,
aj


From billy.tetrud at gmail.com  Thu Jul 14 04:55:35 2022
From: billy.tetrud at gmail.com (Billy Tetrud)
Date: Wed, 13 Jul 2022 23:55:35 -0500
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <CAJowKgL9D7mC7y5zEaZDN63aVG4Tkxn971vd=W2rBy1GyC9FtA@mail.gmail.com>
References: <CAJowKgJGfkdCjWUnUyWZ9rgnWFOVYg=aizBwC2wEbMxohRMvZg@mail.gmail.com>
 <96371DBA-F484-4538-9E12-9D6AB90AF22C@voskuil.org>
 <CAJowKgL9D7mC7y5zEaZDN63aVG4Tkxn971vd=W2rBy1GyC9FtA@mail.gmail.com>
Message-ID: <CAGpPWDaNtn7WsXv-_vMfv5f9eUma3jPVF_+9XjTFzECRE+2ZaQ@mail.gmail.com>

@Peter Todd

> The fact of the matter is that the present amount of security is about
1.7% of
the total coin supply/year

That's on the order of what I calculated
<https://github.com/fresheneesz/quantificationOfConsensusProtocolSecurity#analysis-of-various-consensus-algorithms>:
~0.5%. I'm curious where the 1.7% number comes from.  Perhaps much of the
difference in our two numbers likely comes from me incorporating what I
call the "Economic Mining Monopoly Attack"
<https://github.com/fresheneesz/quantificationOfConsensusProtocolSecurity#economic-mining-monopoly-attack>
which effectively cuts the security in half.

> There's zero reason to stress about finding an "optimal" amount. An
amount low enough to be easily affordable, but non-zero, is fine.

That's fair. What I mean is that we should estimate an optimal value to
some degree of accuracy. It doesn't have to be super accurate. But too low
and we could have a bad time. Too high and its a deadweight cost forever
(which increases fees, slows adoption, and causes an inflation-like
devaluation force on bitcoin, which has all the familiar market distorting
effects, albeit to a much smaller degree than we're used to).  In any case,
we need to come to an accurate enough estimate of how much is enough
security so that we ensure we're above that amount.

> These are all amounts that are likely to be dwarfed by economic shifts.

Perhaps you're right. Regardless, its certainly an improvement to what
we've had the last 100 years.

@Erik Voskuil
> You cannot support the blanket statement (and absent any assumption) that
lower confirmation rates produce ?much higher fees? or ?better security?.

I can in fact support it. The theory of supply and demand supports it.
Well, depending on what you mean by "fees". Reducing the block size will
certainly increase average fees/vbyte. Whether it increases total fees
collected by miners (and thus lead to "better security") is another story -
a story that depends on the demand dynamics in the market. It could very
well be that reducing the blocksize reduces the number of transactions by a
higher proportion than fees go up. As we have seen in past periods of high
traffic tho, total fees go up *quite* a lot. So it seems pretty clear to me
that constraining the block size would very likely increase total fees
collected by miners, at least for the near future.

@Carvalho
>  I will reiterate. Proof of work and the difficulty adjustment scheme
already solve all of these issues

You haven't addressed any of the comments that disagree with you above. You
didn't address any of my comments originally. You are simply claiming
things without any logical support. If you want to be a respectable part of
this conversation, I'd recommend explaining yourself much more thoroughly.

> That restaurant is too popular, nobody goes there anymore.

If you could feed 100,000 people with 1 entire from a restaurant, your
restaurant might not make enough money to survive despite feeding the
entire country. That's what the lightning network does for/to bitcoin. We
need to make sure the restaurant can afford to staff itself despite massive
increases in food-use efficiency.

On Fri, Jul 8, 2022 at 12:32 PM Erik Aronesty via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Thu, Jul 7, 2022 at 8:29 PM Eric Voskuil <eric at voskuil.org> wrote:
>
>> Value is subjective, though a constraint of 1tx per 10 minutes seems
>> unlikey to create a fee of 5000x that of 5000tx. This is of course why I
>> stated my assumption. Yet this simple example should make clear that at
>> some point a reduction in confirmation rate reduces reward. Otherwise a
>> rate of zero implies infinite reward.
>>
>
> Like i said, it's not linear.   So no, a rate of 0 does not imply an
> infinite reward.  A number of papers on the Nash equilibrium of mining
> rewards and block size have been written.       There are block sizes that
> are optimal for fees, and they obviously not zero, where the system
> collapses, and they are obviously not infinite... where all bidders pay 1
> sat/byte.
>
>
>>
>> You cannot support the blanket statement (and absent any assumption) that
>> lower confirmation rates produce ?much higher fees? or ?better security?.
>>
>
> You can look at the research and the history of zero-size block impact on
> fees and see that this is true.
>
>
>
>>
>> What you call a ?bidding war? is merely market pricing, as it occurs with
>> any good. People *always* will pay as much as they will pay. This is
>> tautological. What you cannot say is how much more someone will pay at any
>> given time for any given good, until they have done it. And I?m pretty sure
>> Bitcoin hasn?t done it.
>>
>
> If there is infinite supply, then there is zero value.   Infinite blocks
> have lower fees.  This is impossible to argue against.
>
>
>> You cannot prove what the price of anything will be, nor can any
>> ?papers?. The absurdity of S2F should have clearly demonstrated that by
>> now. Value is an individual human preference.
>>
>
> A trivial example: block sizeof 10, and 10 people want to transact, all
> can bid 1 SAT/byte, 2 tx are moving 100 mil sats, the other 8 are moving 10
> mil sats.   Block size of 2.  Now the two transactions moving 100 mil sats
> will bid, they can easily pay 400 sats/byte.
>
> You can show, from history, that when block sizes are more constrained,
> due to the mining of zero byte blocks, total fees were higher.   People
> will always pay for "next confirm" if the cost of that is very reasonable
> (less than 0.1%).
>
>>
>> If everyone pays 1 sat, then either miners are profitable at 1 sat, or
>> these people are not getting confirmed (economic rationality always
>> assumed).
>>
>
> Yes, and if miners are not profitable at 1 sat, then they will not mine,
> and the hash rate will drop.   And this reduces the security of the coin.
>  Hashrate is an index of security.
>
> But there is of course no real issue here. Simply fork off an inflation
>> coin and test your theory. I mean, that?s the only way it can happen anyway.
>>
>
> I would argue inflation is not a good solution.   Instead, being cautious
> about block-compressing tech, like mweb, and being more aggressive about
> fee-driving tech, makes more sense .
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220713/ee9b842f/attachment-0001.html>

From alicexbt at protonmail.com  Thu Jul 14 09:25:56 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Thu, 14 Jul 2022 09:25:56 +0000
Subject: [bitcoin-dev] Full Disclosure: Denial of Service in STONEWALLx2
	(p2p coinjoin)
Message-ID: <eCSIPVH6QM3r1n0PGBWr39xv4BSyAWx6q0icycfo4mESnQfNg7NJWRu7wwyoxnR6E9Own_CJxGVufqQhqx1H4JyAQil3MUUkdI_kUC5bmVg=@protonmail.com>

Hi bitcoin-dev list members,


STONEWALLx2[1] is a p2p coinjoin transaction in Samourai wallet. The miner fee is split between both participants of the transaction.


==========================
Problem
==========================

Antoine Riard shared the details of DoS attack in an [email][2] on 21 June 2022.

Proof of Concept:

1) Download Samourai APK, create testnet wallet, get some coins from faucet and claim a paynym in 2 android devices. Consider Bob and Carol are using these devices.

2) Bob and Carol follow each other's paynyms. Carol is the attacker in this case and she could make several paynyms.

3) Bob initiates a Stonewallx2 transaction that requires collaboration with Carol.

4) Carol confirms this request in the app.

5) Carol spends the UTXO from wallet configured in electrum with same seed before Bob could complete the last step and broadcast STONEWALLx2 transaction. It was non RBF [transaction][3] with 1 sat/vbyte fee rate and was unconfirmed during testing.

6) Bob receives an [error][4] in the app when trying to broadcast Stonewallx2 transaction which disappears in a few seconds. The [progress bar][5] appears as if wallet is still trying to broadcast the transaction until Bob manually go back or close the app.


==========================
Solution
==========================

Suggestions:

a) Error message that states collaborator spent her UTXO used in STONEWALLx2, end the p2p coinjoin process, unfollow collaborator's paynym and suggest user to do such transactions with trusted users only for a while.

b) Once full RBF is used by some nodes and miners, attacker's transaction could be replaced with a higher fee rate.

Conclusions by Samourai:

a) As the threat involves the collaborator attacking the spender. We strongly advise that collab spends be done w/ counterparties with which some measure of trust is shared. As such, this does not seem to have an important threat surface.

b) Bumping fee won't be simple as fees are shared 50/50 for STONEWALLx2 spends. Change would have to be recalculated for both spender and collaborator. Collab would either have had already authorized a possible fee bump beforehand or would have to be prompted before broadcast.


==========================
Timeline
==========================

22 June 2022: I emailed Antoine after testing STONEWALLx2

23 June 2022: I shared the details of attack in a confidential issue in Samourai wallet [repository][6]

07 July 2022: TDevD (Samourai) acknowledged the issue and wanted to discuss it internally with team

14 July 2022: TDevD shared the conclusions


==========================
Credits
==========================

Antoine Riard discovered DoS vector in p2p coinjoin transactions and helped by responding to emails during testing.


[1]: https://docs.samourai.io/spend-tools
[2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-June/020595.html
[3]: https://mempool.space/testnet/tx/42db696460a46f196f457779d60acbf46b31accc5414b9eac54b2e785d4c1cbb
[4]: https://i.imgur.com/6uf3VJn.png
[5]: https://i.imgur.com/W6ITl4G.gif
[6]: https://code.samourai.io/wallet/samourai-wallet-android


/dev/fd0

Sent with Proton Mail secure email.

From vjudeu at gazeta.pl  Thu Jul 14 09:33:13 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Thu, 14 Jul 2022 11:33:13 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAAxiurZhzhPNuysoaByiLCdRpeyxz8S+onnoGTWC+MpanDFB_Q@mail.gmail.com>
Message-ID: <164548764-bff50cb79078c9964aa8ac1e51c13070@pmq5v.m5r2.onet>

> This specific approach would obviously not work as most of those outputs would be dust and the miner would need to waste an absurd amount of block space just to grab them, but maybe there's a smarter way to do it.

There is a smarter way. Just send 0.01 BTC per block to the timelocked outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that percentage will grow over time, as basic block reward will shrink, and we will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it simply means you can lock 2,100 BTC in an endless circulation loop, and avoid this "tail supply attack".

So, fortunately, even if "tail supply attackers" will win, we will still have a chance to counter-attack by burning those coins, or (even better) by locking them in an endless circulation loop, just to satisfy their malicious soft-fork, whatever amount it will require. Because even if it will be mandatory to timelock 0.01 BTC to the current block number plus 210,000, then it is still perfectly valid to move that amount endlessly, without taking it, just to resist this "tail supply attack".


On 2022-07-13 20:01:39 user Manuel Costa via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> What about burning all fees and keep a block reward that will smooth out while keeping the ~21M coins limit ?

This would be a hard fork afaict as it would go against the rules of the coinbase transaction following the usual halving schedule.

However, if instead we added a rule that fees have to be sent to an anyone can spend output with a timelock we might be able to achieve a similar thing.

Highly inefficient example:

- Split blocks into 144 (about a day)
- A mined block takes all the fees and distributes them equally into 144 new outputs (anyone can spend) time locked?to each of the 144 blocks of the next day.
- Next day, for each block, we'd have available an amount equivalent to the previous day total fees / 144. So we deliver previous day's fees smoothed out.

Notes:
144 is arbitrary in the example.
This specific approach would obviously not work as?most of those outputs would be dust and the miner would need to waste an absurd?amount of block space just to grab them, but maybe there's a smarter way to do it.




Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> escreveu no dia quarta, 13/07/2022 ?(s) 13:19:
What about burning all fees and keep a block reward that will smooth out while keeping the ~21M coins limit ?


Benefits :
- Miners would still be incentivized to collect higher fees transaction with the indirect perspective to generate more reward in future.
- Revenues are equally distributed over time to all participants and we solve the overnight discrepancy.
- Increased velocity of money will reduce the immediate supply of bitcoin cooling down the economy.
- Reduction of velocity will have an impact on miners only if it persevere in the long term but short term they will still perceive the buffered reward.


I don't have ideas yet on how to elegantly implement this.



On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <bitcoin-dev at lists.linuxfoundation.org> wrote:
> The emission curve lasts over 100 years because Bitcoin success state requires it to be entrenched globally.

It effectively doesn't. The last 100 years from 2040-2140 only emits a
pittance of about 0.4 of all bitcoin.

What matters for proper distribution is the shape of the emission
curve. If you emit 99% in the first year and 1% in the next 100 years,
your emission "lasts" over 100 years, and you achieve a super low
supply inflation rate immediately after 1 year, but it's obviously a
terrible form of distribution.

This is easy to quantify as the expected time of emission which would
be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
Bitcoin is not much better in that the expected time of emission of an
bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.

Monero appears much better since its tail emission yields an infinite
expected time of emission, but if we avoid infinities by looking at
just the soft total emission [1], which is all that is emitted before
a 1% yearly inflation, then Monero is seen to actually be a lot worse
than Bitcoin, due to emitting over 40% in its first year and halving
the reward much faster. Ethereum is much worse still with its huge
premine and PoS coins like Algorand are scraping the bottom with their
expected emission time of 0.

There's only one coin whose expected (soft) emission time is larger
than bitcoin's, and it's about an order of magnitude larger, at 50
years.

[1] https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From erik at q32.com  Thu Jul 14 09:57:41 2022
From: erik at q32.com (Erik Aronesty)
Date: Thu, 14 Jul 2022 05:57:41 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <164548764-bff50cb79078c9964aa8ac1e51c13070@pmq5v.m5r2.onet>
References: <CAAxiurZhzhPNuysoaByiLCdRpeyxz8S+onnoGTWC+MpanDFB_Q@mail.gmail.com>
 <164548764-bff50cb79078c9964aa8ac1e51c13070@pmq5v.m5r2.onet>
Message-ID: <CAJowKgL3eg9aRxkbLiVUyMoMapFUnSBMpA1mnrxB=3fx1fsu0w@mail.gmail.com>

Fees and miner rewards are not needed at all for security at all since long
term holders can simply invest in mining to secure the value of their stake.

Isn't it enough that the protocol has a mechanism to secure value?

Sure fees *might* be enough.

But in the event that they are not, large holders can burn a bit to make
sure the hashrate stays high.

I know, I know it's a tax on the rich and it's not fair because smaller
holders are less likely to do it, but it's a miniscule tax even in the
worst case









On Thu, Jul 14, 2022, 5:35 AM vjudeu via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> > This specific approach would obviously not work as most of those outputs
> would be dust and the miner would need to waste an absurd amount of block
> space just to grab them, but maybe there's a smarter way to do it.
>
> There is a smarter way. Just send 0.01 BTC per block to the timelocked
> outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that
> percentage will grow over time, as basic block reward will shrink, and we
> will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess
> what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it
> simply means you can lock 2,100 BTC in an endless circulation loop, and
> avoid this "tail supply attack".
>
> So, fortunately, even if "tail supply attackers" will win, we will still
> have a chance to counter-attack by burning those coins, or (even better) by
> locking them in an endless circulation loop, just to satisfy their
> malicious soft-fork, whatever amount it will require. Because even if it
> will be mandatory to timelock 0.01 BTC to the current block number plus
> 210,000, then it is still perfectly valid to move that amount endlessly,
> without taking it, just to resist this "tail supply attack".
>
>
> On 2022-07-13 20:01:39 user Manuel Costa via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> > What about burning all fees and keep a block reward that will smooth out
> while keeping the ~21M coins limit ?
>
> This would be a hard fork afaict as it would go against the rules of the
> coinbase transaction following the usual halving schedule.
>
> However, if instead we added a rule that fees have to be sent to an anyone
> can spend output with a timelock we might be able to achieve a similar
> thing.
>
> Highly inefficient example:
>
> - Split blocks into 144 (about a day)
> - A mined block takes all the fees and distributes them equally into 144
> new outputs (anyone can spend) time locked to each of the 144 blocks of the
> next day.
> - Next day, for each block, we'd have available an amount equivalent to
> the previous day total fees / 144. So we deliver previous day's fees
> smoothed out.
>
> Notes:
> 144 is arbitrary in the example.
> This specific approach would obviously not work as most of those outputs
> would be dust and the miner would need to waste an absurd amount of block
> space just to grab them, but maybe there's a smarter way to do it.
>
>
>
>
> Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> escreveu no dia quarta, 13/07/2022 ?(s) 13:19:
> What about burning all fees and keep a block reward that will smooth out
> while keeping the ~21M coins limit ?
>
>
> Benefits :
> - Miners would still be incentivized to collect higher fees transaction
> with the indirect perspective to generate more reward in future.
> - Revenues are equally distributed over time to all participants and we
> solve the overnight discrepancy.
> - Increased velocity of money will reduce the immediate supply of bitcoin
> cooling down the economy.
> - Reduction of velocity will have an impact on miners only if it persevere
> in the long term but short term they will still perceive the buffered
> reward.
>
>
> I don't have ideas yet on how to elegantly implement this.
>
>
>
> On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> > The emission curve lasts over 100 years because Bitcoin success state
> requires it to be entrenched globally.
>
> It effectively doesn't. The last 100 years from 2040-2140 only emits a
> pittance of about 0.4 of all bitcoin.
>
> What matters for proper distribution is the shape of the emission
> curve. If you emit 99% in the first year and 1% in the next 100 years,
> your emission "lasts" over 100 years, and you achieve a super low
> supply inflation rate immediately after 1 year, but it's obviously a
> terrible form of distribution.
>
> This is easy to quantify as the expected time of emission which would
> be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
> Bitcoin is not much better in that the expected time of emission of an
> bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.
>
> Monero appears much better since its tail emission yields an infinite
> expected time of emission, but if we avoid infinities by looking at
> just the soft total emission [1], which is all that is emitted before
> a 1% yearly inflation, then Monero is seen to actually be a lot worse
> than Bitcoin, due to emitting over 40% in its first year and halving
> the reward much faster. Ethereum is much worse still with its huge
> premine and PoS coins like Algorand are scraping the bottom with their
> expected emission time of 0.
>
> There's only one coin whose expected (soft) emission time is larger
> than bitcoin's, and it's about an order of magnitude larger, at 50
> years.
>
> [1]
> https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220714/75951273/attachment-0001.html>

From gino.pinuto at gmail.com  Thu Jul 14 11:42:56 2022
From: gino.pinuto at gmail.com (Gino Pinuto)
Date: Thu, 14 Jul 2022 13:42:56 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAJowKgL3eg9aRxkbLiVUyMoMapFUnSBMpA1mnrxB=3fx1fsu0w@mail.gmail.com>
References: <CAAxiurZhzhPNuysoaByiLCdRpeyxz8S+onnoGTWC+MpanDFB_Q@mail.gmail.com>
 <164548764-bff50cb79078c9964aa8ac1e51c13070@pmq5v.m5r2.onet>
 <CAJowKgL3eg9aRxkbLiVUyMoMapFUnSBMpA1mnrxB=3fx1fsu0w@mail.gmail.com>
Message-ID: <CAA3CggE4cJO_=8YR82qYOS=9PR34mSVsGznOuexTNpHbRuW6hw@mail.gmail.com>

This is not an argument in line with bitcoin values, on that scenario only
rich people will be able to mine and participate to the consensus process.
Like George Soros today, he use its financial reserves to monopolize ONG in
order to manipulate nation states. I would not define this a "tax",
moreover a cost to maintain control over the network.

Those rich holders could crate a cartel and without market dynamics all
game theory stop to work and the bitcoin network value drop.

We should think about how to maximise the network value instead of trying
to preserve it with corruptible practices outside of market dynamics
principles.

On Thu, 14 Jul 2022, 12:53 Erik Aronesty via bitcoin-dev, <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Fees and miner rewards are not needed at all for security at all since
> long term holders can simply invest in mining to secure the value of their
> stake.
>
> Isn't it enough that the protocol has a mechanism to secure value?
>
> Sure fees *might* be enough.
>
> But in the event that they are not, large holders can burn a bit to make
> sure the hashrate stays high.
>
> I know, I know it's a tax on the rich and it's not fair because smaller
> holders are less likely to do it, but it's a miniscule tax even in the
> worst case
>
>
>
>
>
>
>
>
>
> On Thu, Jul 14, 2022, 5:35 AM vjudeu via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> > This specific approach would obviously not work as most of those
>> outputs would be dust and the miner would need to waste an absurd amount of
>> block space just to grab them, but maybe there's a smarter way to do it.
>>
>> There is a smarter way. Just send 0.01 BTC per block to the timelocked
>> outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that
>> percentage will grow over time, as basic block reward will shrink, and we
>> will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess
>> what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it
>> simply means you can lock 2,100 BTC in an endless circulation loop, and
>> avoid this "tail supply attack".
>>
>> So, fortunately, even if "tail supply attackers" will win, we will still
>> have a chance to counter-attack by burning those coins, or (even better) by
>> locking them in an endless circulation loop, just to satisfy their
>> malicious soft-fork, whatever amount it will require. Because even if it
>> will be mandatory to timelock 0.01 BTC to the current block number plus
>> 210,000, then it is still perfectly valid to move that amount endlessly,
>> without taking it, just to resist this "tail supply attack".
>>
>>
>> On 2022-07-13 20:01:39 user Manuel Costa via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > What about burning all fees and keep a block reward that will smooth
>> out while keeping the ~21M coins limit ?
>>
>> This would be a hard fork afaict as it would go against the rules of the
>> coinbase transaction following the usual halving schedule.
>>
>> However, if instead we added a rule that fees have to be sent to an
>> anyone can spend output with a timelock we might be able to achieve a
>> similar thing.
>>
>> Highly inefficient example:
>>
>> - Split blocks into 144 (about a day)
>> - A mined block takes all the fees and distributes them equally into 144
>> new outputs (anyone can spend) time locked to each of the 144 blocks of the
>> next day.
>> - Next day, for each block, we'd have available an amount equivalent to
>> the previous day total fees / 144. So we deliver previous day's fees
>> smoothed out.
>>
>> Notes:
>> 144 is arbitrary in the example.
>> This specific approach would obviously not work as most of those outputs
>> would be dust and the miner would need to waste an absurd amount of block
>> space just to grab them, but maybe there's a smarter way to do it.
>>
>>
>>
>>
>> Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>> escreveu no dia quarta, 13/07/2022 ?(s) 13:19:
>> What about burning all fees and keep a block reward that will smooth out
>> while keeping the ~21M coins limit ?
>>
>>
>> Benefits :
>> - Miners would still be incentivized to collect higher fees transaction
>> with the indirect perspective to generate more reward in future.
>> - Revenues are equally distributed over time to all participants and we
>> solve the overnight discrepancy.
>> - Increased velocity of money will reduce the immediate supply of bitcoin
>> cooling down the economy.
>> - Reduction of velocity will have an impact on miners only if it
>> persevere in the long term but short term they will still perceive the
>> buffered reward.
>>
>>
>> I don't have ideas yet on how to elegantly implement this.
>>
>>
>>
>> On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > The emission curve lasts over 100 years because Bitcoin success state
>> requires it to be entrenched globally.
>>
>> It effectively doesn't. The last 100 years from 2040-2140 only emits a
>> pittance of about 0.4 of all bitcoin.
>>
>> What matters for proper distribution is the shape of the emission
>> curve. If you emit 99% in the first year and 1% in the next 100 years,
>> your emission "lasts" over 100 years, and you achieve a super low
>> supply inflation rate immediately after 1 year, but it's obviously a
>> terrible form of distribution.
>>
>> This is easy to quantify as the expected time of emission which would
>> be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
>> Bitcoin is not much better in that the expected time of emission of an
>> bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.
>>
>> Monero appears much better since its tail emission yields an infinite
>> expected time of emission, but if we avoid infinities by looking at
>> just the soft total emission [1], which is all that is emitted before
>> a 1% yearly inflation, then Monero is seen to actually be a lot worse
>> than Bitcoin, due to emitting over 40% in its first year and halving
>> the reward much faster. Ethereum is much worse still with its huge
>> premine and PoS coins like Algorand are scraping the bottom with their
>> expected emission time of 0.
>>
>> There's only one coin whose expected (soft) emission time is larger
>> than bitcoin's, and it's about an order of magnitude larger, at 50
>> years.
>>
>> [1]
>> https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220714/26ddeac0/attachment.html>

From erik at q32.com  Thu Jul 14 16:01:39 2022
From: erik at q32.com (Erik Aronesty)
Date: Thu, 14 Jul 2022 12:01:39 -0400
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAA3CggE4cJO_=8YR82qYOS=9PR34mSVsGznOuexTNpHbRuW6hw@mail.gmail.com>
References: <CAAxiurZhzhPNuysoaByiLCdRpeyxz8S+onnoGTWC+MpanDFB_Q@mail.gmail.com>
 <164548764-bff50cb79078c9964aa8ac1e51c13070@pmq5v.m5r2.onet>
 <CAJowKgL3eg9aRxkbLiVUyMoMapFUnSBMpA1mnrxB=3fx1fsu0w@mail.gmail.com>
 <CAA3CggE4cJO_=8YR82qYOS=9PR34mSVsGznOuexTNpHbRuW6hw@mail.gmail.com>
Message-ID: <CAJowKg+cYDK_r6-hXOxH83HCZhzQTMGUyhrx0+wk0aZCYH-C5w@mail.gmail.com>

it's in line with the values of

 - immutable supply
 - enforced by the game theory of hard money

and no, it's not only "rich holders"... i mine, and lots of people i know do

it's certainly more decentralized than the alternatives




On Thu, Jul 14, 2022 at 7:43 AM Gino Pinuto <gino.pinuto at gmail.com> wrote:

> This is not an argument in line with bitcoin values, on that scenario only
> rich people will be able to mine and participate to the consensus process.
> Like George Soros today, he use its financial reserves to monopolize ONG
> in order to manipulate nation states. I would not define this a "tax",
> moreover a cost to maintain control over the network.
>
> Those rich holders could crate a cartel and without market dynamics all
> game theory stop to work and the bitcoin network value drop.
>
> We should think about how to maximise the network value instead of trying
> to preserve it with corruptible practices outside of market dynamics
> principles.
>
> On Thu, 14 Jul 2022, 12:53 Erik Aronesty via bitcoin-dev, <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Fees and miner rewards are not needed at all for security at all since
>> long term holders can simply invest in mining to secure the value of their
>> stake.
>>
>> Isn't it enough that the protocol has a mechanism to secure value?
>>
>> Sure fees *might* be enough.
>>
>> But in the event that they are not, large holders can burn a bit to make
>> sure the hashrate stays high.
>>
>> I know, I know it's a tax on the rich and it's not fair because smaller
>> holders are less likely to do it, but it's a miniscule tax even in the
>> worst case
>>
>>
>>
>>
>>
>>
>>
>>
>>
>> On Thu, Jul 14, 2022, 5:35 AM vjudeu via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> > This specific approach would obviously not work as most of those
>>> outputs would be dust and the miner would need to waste an absurd amount of
>>> block space just to grab them, but maybe there's a smarter way to do it.
>>>
>>> There is a smarter way. Just send 0.01 BTC per block to the timelocked
>>> outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that
>>> percentage will grow over time, as basic block reward will shrink, and we
>>> will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess
>>> what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it
>>> simply means you can lock 2,100 BTC in an endless circulation loop, and
>>> avoid this "tail supply attack".
>>>
>>> So, fortunately, even if "tail supply attackers" will win, we will still
>>> have a chance to counter-attack by burning those coins, or (even better) by
>>> locking them in an endless circulation loop, just to satisfy their
>>> malicious soft-fork, whatever amount it will require. Because even if it
>>> will be mandatory to timelock 0.01 BTC to the current block number plus
>>> 210,000, then it is still perfectly valid to move that amount endlessly,
>>> without taking it, just to resist this "tail supply attack".
>>>
>>>
>>> On 2022-07-13 20:01:39 user Manuel Costa via bitcoin-dev <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> > What about burning all fees and keep a block reward that will smooth
>>> out while keeping the ~21M coins limit ?
>>>
>>> This would be a hard fork afaict as it would go against the rules of the
>>> coinbase transaction following the usual halving schedule.
>>>
>>> However, if instead we added a rule that fees have to be sent to an
>>> anyone can spend output with a timelock we might be able to achieve a
>>> similar thing.
>>>
>>> Highly inefficient example:
>>>
>>> - Split blocks into 144 (about a day)
>>> - A mined block takes all the fees and distributes them equally into 144
>>> new outputs (anyone can spend) time locked to each of the 144 blocks of the
>>> next day.
>>> - Next day, for each block, we'd have available an amount equivalent to
>>> the previous day total fees / 144. So we deliver previous day's fees
>>> smoothed out.
>>>
>>> Notes:
>>> 144 is arbitrary in the example.
>>> This specific approach would obviously not work as most of those outputs
>>> would be dust and the miner would need to waste an absurd amount of block
>>> space just to grab them, but maybe there's a smarter way to do it.
>>>
>>>
>>>
>>>
>>> Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>>> escreveu no dia quarta, 13/07/2022 ?(s) 13:19:
>>> What about burning all fees and keep a block reward that will smooth out
>>> while keeping the ~21M coins limit ?
>>>
>>>
>>> Benefits :
>>> - Miners would still be incentivized to collect higher fees transaction
>>> with the indirect perspective to generate more reward in future.
>>> - Revenues are equally distributed over time to all participants and we
>>> solve the overnight discrepancy.
>>> - Increased velocity of money will reduce the immediate supply of
>>> bitcoin cooling down the economy.
>>> - Reduction of velocity will have an impact on miners only if it
>>> persevere in the long term but short term they will still perceive the
>>> buffered reward.
>>>
>>>
>>> I don't have ideas yet on how to elegantly implement this.
>>>
>>>
>>>
>>> On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> > The emission curve lasts over 100 years because Bitcoin success state
>>> requires it to be entrenched globally.
>>>
>>> It effectively doesn't. The last 100 years from 2040-2140 only emits a
>>> pittance of about 0.4 of all bitcoin.
>>>
>>> What matters for proper distribution is the shape of the emission
>>> curve. If you emit 99% in the first year and 1% in the next 100 years,
>>> your emission "lasts" over 100 years, and you achieve a super low
>>> supply inflation rate immediately after 1 year, but it's obviously a
>>> terrible form of distribution.
>>>
>>> This is easy to quantify as the expected time of emission which would
>>> be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
>>> Bitcoin is not much better in that the expected time of emission of an
>>> bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.
>>>
>>> Monero appears much better since its tail emission yields an infinite
>>> expected time of emission, but if we avoid infinities by looking at
>>> just the soft total emission [1], which is all that is emitted before
>>> a 1% yearly inflation, then Monero is seen to actually be a lot worse
>>> than Bitcoin, due to emitting over 40% in its first year and halving
>>> the reward much faster. Ethereum is much worse still with its huge
>>> premine and PoS coins like Algorand are scraping the bottom with their
>>> expected emission time of 0.
>>>
>>> There's only one coin whose expected (soft) emission time is larger
>>> than bitcoin's, and it's about an order of magnitude larger, at 50
>>> years.
>>>
>>> [1]
>>> https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220714/9baac65d/attachment-0001.html>

From manecosta at gmail.com  Thu Jul 14 16:27:55 2022
From: manecosta at gmail.com (Manuel Costa)
Date: Thu, 14 Jul 2022 17:27:55 +0100
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAA3CggE4cJO_=8YR82qYOS=9PR34mSVsGznOuexTNpHbRuW6hw@mail.gmail.com>
References: <CAAxiurZhzhPNuysoaByiLCdRpeyxz8S+onnoGTWC+MpanDFB_Q@mail.gmail.com>
 <164548764-bff50cb79078c9964aa8ac1e51c13070@pmq5v.m5r2.onet>
 <CAJowKgL3eg9aRxkbLiVUyMoMapFUnSBMpA1mnrxB=3fx1fsu0w@mail.gmail.com>
 <CAA3CggE4cJO_=8YR82qYOS=9PR34mSVsGznOuexTNpHbRuW6hw@mail.gmail.com>
Message-ID: <CAAxiurZ6qEtQv5q7uXJnZQvh1mDF_sfOVVsR-FXEctbmfkV9LQ@mail.gmail.com>

> There is a smarter way. Just send 0.01 BTC per block to the timelocked
outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that
percentage will grow over time, as basic block reward will shrink, and we
will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess
what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it
simply means you can lock 2,100 BTC in an endless circulation loop, and
avoid this "tail supply attack".

My understanding of this is that it would basically remove 0.01 BTC rewards
from the next 210k blocks, and then do nothing.
After 210k blocks have passed, you're just rolling it forward, taking from
the anyone can spend output and locking it in a new one for 210k blocks
from now.
You're basically just using the next 210k block's reward to create a stash
of forever locked coins in a loop.
Unsure how this solves or relates to the smoothing of block rewards. Let me
know if I misunderstood.

Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
escreveu no dia quinta, 14/07/2022 ?(s) 13:18:

> This is not an argument in line with bitcoin values, on that scenario only
> rich people will be able to mine and participate to the consensus process.
> Like George Soros today, he use its financial reserves to monopolize ONG
> in order to manipulate nation states. I would not define this a "tax",
> moreover a cost to maintain control over the network.
>
> Those rich holders could crate a cartel and without market dynamics all
> game theory stop to work and the bitcoin network value drop.
>
> We should think about how to maximise the network value instead of trying
> to preserve it with corruptible practices outside of market dynamics
> principles.
>
> On Thu, 14 Jul 2022, 12:53 Erik Aronesty via bitcoin-dev, <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Fees and miner rewards are not needed at all for security at all since
>> long term holders can simply invest in mining to secure the value of their
>> stake.
>>
>> Isn't it enough that the protocol has a mechanism to secure value?
>>
>> Sure fees *might* be enough.
>>
>> But in the event that they are not, large holders can burn a bit to make
>> sure the hashrate stays high.
>>
>> I know, I know it's a tax on the rich and it's not fair because smaller
>> holders are less likely to do it, but it's a miniscule tax even in the
>> worst case
>>
>>
>>
>>
>>
>>
>>
>>
>>
>> On Thu, Jul 14, 2022, 5:35 AM vjudeu via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> > This specific approach would obviously not work as most of those
>>> outputs would be dust and the miner would need to waste an absurd amount of
>>> block space just to grab them, but maybe there's a smarter way to do it.
>>>
>>> There is a smarter way. Just send 0.01 BTC per block to the timelocked
>>> outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that
>>> percentage will grow over time, as basic block reward will shrink, and we
>>> will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess
>>> what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it
>>> simply means you can lock 2,100 BTC in an endless circulation loop, and
>>> avoid this "tail supply attack".
>>>
>>> So, fortunately, even if "tail supply attackers" will win, we will still
>>> have a chance to counter-attack by burning those coins, or (even better) by
>>> locking them in an endless circulation loop, just to satisfy their
>>> malicious soft-fork, whatever amount it will require. Because even if it
>>> will be mandatory to timelock 0.01 BTC to the current block number plus
>>> 210,000, then it is still perfectly valid to move that amount endlessly,
>>> without taking it, just to resist this "tail supply attack".
>>>
>>>
>>> On 2022-07-13 20:01:39 user Manuel Costa via bitcoin-dev <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> > What about burning all fees and keep a block reward that will smooth
>>> out while keeping the ~21M coins limit ?
>>>
>>> This would be a hard fork afaict as it would go against the rules of the
>>> coinbase transaction following the usual halving schedule.
>>>
>>> However, if instead we added a rule that fees have to be sent to an
>>> anyone can spend output with a timelock we might be able to achieve a
>>> similar thing.
>>>
>>> Highly inefficient example:
>>>
>>> - Split blocks into 144 (about a day)
>>> - A mined block takes all the fees and distributes them equally into 144
>>> new outputs (anyone can spend) time locked to each of the 144 blocks of the
>>> next day.
>>> - Next day, for each block, we'd have available an amount equivalent to
>>> the previous day total fees / 144. So we deliver previous day's fees
>>> smoothed out.
>>>
>>> Notes:
>>> 144 is arbitrary in the example.
>>> This specific approach would obviously not work as most of those outputs
>>> would be dust and the miner would need to waste an absurd amount of block
>>> space just to grab them, but maybe there's a smarter way to do it.
>>>
>>>
>>>
>>>
>>> Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>>> escreveu no dia quarta, 13/07/2022 ?(s) 13:19:
>>> What about burning all fees and keep a block reward that will smooth out
>>> while keeping the ~21M coins limit ?
>>>
>>>
>>> Benefits :
>>> - Miners would still be incentivized to collect higher fees transaction
>>> with the indirect perspective to generate more reward in future.
>>> - Revenues are equally distributed over time to all participants and we
>>> solve the overnight discrepancy.
>>> - Increased velocity of money will reduce the immediate supply of
>>> bitcoin cooling down the economy.
>>> - Reduction of velocity will have an impact on miners only if it
>>> persevere in the long term but short term they will still perceive the
>>> buffered reward.
>>>
>>>
>>> I don't have ideas yet on how to elegantly implement this.
>>>
>>>
>>>
>>> On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> > The emission curve lasts over 100 years because Bitcoin success state
>>> requires it to be entrenched globally.
>>>
>>> It effectively doesn't. The last 100 years from 2040-2140 only emits a
>>> pittance of about 0.4 of all bitcoin.
>>>
>>> What matters for proper distribution is the shape of the emission
>>> curve. If you emit 99% in the first year and 1% in the next 100 years,
>>> your emission "lasts" over 100 years, and you achieve a super low
>>> supply inflation rate immediately after 1 year, but it's obviously a
>>> terrible form of distribution.
>>>
>>> This is easy to quantify as the expected time of emission which would
>>> be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
>>> Bitcoin is not much better in that the expected time of emission of an
>>> bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.
>>>
>>> Monero appears much better since its tail emission yields an infinite
>>> expected time of emission, but if we avoid infinities by looking at
>>> just the soft total emission [1], which is all that is emitted before
>>> a 1% yearly inflation, then Monero is seen to actually be a lot worse
>>> than Bitcoin, due to emitting over 40% in its first year and halving
>>> the reward much faster. Ethereum is much worse still with its huge
>>> premine and PoS coins like Algorand are scraping the bottom with their
>>> expected emission time of 0.
>>>
>>> There's only one coin whose expected (soft) emission time is larger
>>> than bitcoin's, and it's about an order of magnitude larger, at 50
>>> years.
>>>
>>> [1]
>>> https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220714/c61c1ae4/attachment.html>

From vjudeu at gazeta.pl  Fri Jul 15 06:03:57 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Fri, 15 Jul 2022 08:03:57 +0200
Subject: [bitcoin-dev] Security problems with relying on transaction
 fees for security
In-Reply-To: <CAAxiurZ6qEtQv5q7uXJnZQvh1mDF_sfOVVsR-FXEctbmfkV9LQ@mail.gmail.com>
Message-ID: <72259160-59237a0217670fbbafa7229697cbd60f@pmq6v.m5r2.onet>

> Unsure how this solves or relates to the smoothing of block rewards. Let me know if I misunderstood.

This example shows clearly that even if tail supply supporters will win, then no matter how they will introduce new coins to the system, we can still resist that attack by burning those coins, or by locking them in some endless loop, to make it compatible with their malicious soft-fork (because I don't think the community will agree on some hard-fork, when none is needed).

And when it comes to smoothing rewards, then if you decide, that for example any miner can take only 0.01 BTC, and the rest should be timelocked to the future blocks, then it will make block rewards more smooth. So, when it comes to making fees more smooth, it is only a matter of choosing the right amount, that miners can agree to introduce (because reducing 6.25 BTC plus fees into 0.01 BTC now, and getting a promise that the block reward will never go below 0.01 BTC, is not something they are likely to support, so different amounts should be chosen).


On 2022-07-14 18:34:24 user Manuel Costa via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> There is a smarter way. Just send 0.01 BTC per block to the timelocked outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that percentage will grow over time, as basic block reward will shrink, and we will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it simply means you can lock 2,100 BTC in an endless circulation loop, and avoid this "tail supply attack".

My understanding of this is that it would basically remove 0.01 BTC rewards from the next 210k blocks, and then do nothing.
After 210k blocks have passed, you're just rolling it forward, taking from the anyone can spend output and locking it in a new one for 210k blocks from now.
You're basically just using the next 210k block's reward to create a stash of forever locked coins in a loop.
Unsure how this solves or relates to the smoothing of block rewards. Let me know if I misunderstood.


Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> escreveu no dia quinta, 14/07/2022 ?(s) 13:18:
This is not an argument in line with bitcoin values, on that scenario only rich people will be able to mine and participate to the consensus process.
Like George Soros today, he use its financial reserves to monopolize ONG in order to manipulate nation states. I would not define this a "tax", moreover a cost to maintain control over the network.


Those rich holders could crate a cartel and without market dynamics all game theory stop to work and the bitcoin network value drop.


We should think about how to maximise the network value instead of trying to preserve it with corruptible practices outside of market dynamics principles.


On Thu, 14 Jul 2022, 12:53 Erik Aronesty via bitcoin-dev, <bitcoin-dev at lists.linuxfoundation.org> wrote:
Fees and miner rewards are not needed at all for security at all since long term holders can simply invest in mining to secure the value of their stake.


Isn't it enough that the protocol has a mechanism to secure value?


Sure fees *might* be enough.??


But in the event that they are not, large holders can burn a bit to make sure the hashrate stays high.


I know, I know it's a tax on the rich and it's not fair because smaller holders are less likely to do it, but it's a miniscule tax even in the worst case


















On Thu, Jul 14, 2022, 5:35 AM vjudeu via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> This specific approach would obviously not work as most of those outputs would be dust and the miner would need to waste an absurd amount of block space just to grab them, but maybe there's a smarter way to do it.

There is a smarter way. Just send 0.01 BTC per block to the timelocked outputs. Now, we have 6.25 BTC, so it means less than 0.2%. But that percentage will grow over time, as basic block reward will shrink, and we will have mandatory 0.01 BTC endlessly moved, until it will wrap. And guess what: if it will be 0.01 BTC per block, wrapped every 210,000 blocks, it simply means you can lock 2,100 BTC in an endless circulation loop, and avoid this "tail supply attack".

So, fortunately, even if "tail supply attackers" will win, we will still have a chance to counter-attack by burning those coins, or (even better) by locking them in an endless circulation loop, just to satisfy their malicious soft-fork, whatever amount it will require. Because even if it will be mandatory to timelock 0.01 BTC to the current block number plus 210,000, then it is still perfectly valid to move that amount endlessly, without taking it, just to resist this "tail supply attack".


On 2022-07-13 20:01:39 user Manuel Costa via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> What about burning all fees and keep a block reward that will smooth out while keeping the ~21M coins limit ?

This would be a hard fork afaict as it would go against the rules of the coinbase transaction following the usual halving schedule.

However, if instead we added a rule that fees have to be sent to an anyone can spend output with a timelock we might be able to achieve a similar thing.

Highly inefficient example:

- Split blocks into 144 (about a day)
- A mined block takes all the fees and distributes them equally into 144 new outputs (anyone can spend) time locked?to each of the 144 blocks of the next day.
- Next day, for each block, we'd have available an amount equivalent to the previous day total fees / 144. So we deliver previous day's fees smoothed out.

Notes:
144 is arbitrary in the example.
This specific approach would obviously not work as?most of those outputs would be dust and the miner would need to waste an absurd?amount of block space just to grab them, but maybe there's a smarter way to do it.




Gino Pinuto via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> escreveu no dia quarta, 13/07/2022 ?(s) 13:19:
What about burning all fees and keep a block reward that will smooth out while keeping the ~21M coins limit ?


Benefits :
- Miners would still be incentivized to collect higher fees transaction with the indirect perspective to generate more reward in future.
- Revenues are equally distributed over time to all participants and we solve the overnight discrepancy.
- Increased velocity of money will reduce the immediate supply of bitcoin cooling down the economy.
- Reduction of velocity will have an impact on miners only if it persevere in the long term but short term they will still perceive the buffered reward.


I don't have ideas yet on how to elegantly implement this.



On Wed, 13 Jul 2022, 12:08 John Tromp via bitcoin-dev, <bitcoin-dev at lists.linuxfoundation.org> wrote:
> The emission curve lasts over 100 years because Bitcoin success state requires it to be entrenched globally.

It effectively doesn't. The last 100 years from 2040-2140 only emits a
pittance of about 0.4 of all bitcoin.

What matters for proper distribution is the shape of the emission
curve. If you emit 99% in the first year and 1% in the next 100 years,
your emission "lasts" over 100 years, and you achieve a super low
supply inflation rate immediately after 1 year, but it's obviously a
terrible form of distribution.

This is easy to quantify as the expected time of emission which would
be 0.99 * 0.5yr + 0.01* 51yr = 2 years.
Bitcoin is not much better in that the expected time of emission of an
bitcoin satisfies x = 0.5*2yr + 0.5*(4+x) and thus equals 6 years.

Monero appears much better since its tail emission yields an infinite
expected time of emission, but if we avoid infinities by looking at
just the soft total emission [1], which is all that is emitted before
a 1% yearly inflation, then Monero is seen to actually be a lot worse
than Bitcoin, due to emitting over 40% in its first year and halving
the reward much faster. Ethereum is much worse still with its huge
premine and PoS coins like Algorand are scraping the bottom with their
expected emission time of 0.

There's only one coin whose expected (soft) emission time is larger
than bitcoin's, and it's about an order of magnitude larger, at 50
years.

[1] https://john-tromp.medium.com/a-case-for-using-soft-total-supply-1169a188d153
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From michaelfolkson at protonmail.com  Sun Jul 17 13:26:26 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Sun, 17 Jul 2022 13:26:26 +0000
Subject: [bitcoin-dev] BIP draft: Half-Aggregation of BIP-340 Signatures
In-Reply-To: <33f275c2-06b1-4b4a-2a75-cafe36836503@gmail.com>
References: <33f275c2-06b1-4b4a-2a75-cafe36836503@gmail.com>
Message-ID: <uxodWlVSmJqvVHDuGevdDbsc5lXiyV6zONlNJtj6gDylkTXQzkPPokLXKJAVULMwPbduJJ7Fb-s0ZYKpduvIZ-LkCsfXClkDH5WhOFsTHts=@protonmail.com>

Thanks for this Jonas. One question that was asked on Telegram (credit: Antoine D) and isn't clear to me skimming the blog post and the draft BIP is whether half aggregation needs a new output type or not like we expect cross input signature aggregation (CISA) to [0]. My understanding is Schnorr signature batch verification (no aggregation of signatures) can be done today but half aggregation and CISA would need a soft fork and potentially a new output type in addition.

(I know this work is in its early stages and won't be proposed for a soft fork anytime soon. A few of us are just trying to get a basic sketch in our heads of what they require and whether they could be enabled in the same upgrade.)

[0]: https://bitcoin.stackexchange.com/questions/106240/will-cross-input-signature-aggregation-need-a-new-output-type/



--
Michael Folkson
Email: michaelfolkson at protonmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3


------- Original Message -------
On Friday, July 8th, 2022 at 16:53, Jonas Nick via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:


> Half-aggregation has been mentioned several times on this list in various
> contexts. To have a solid basis for discussing applications of half-aggregation,
> I think it's helpful to have a concrete specification of the scheme and a place
> for collecting supplemental information like references to cryptographic
> security proofs. You can find the BIP draft at
>
> https://github.com/ElementsProject/cross-input-aggregation/blob/master/half-aggregation.mediawiki
>
> Similar to BIP-340, this BIP draft specifies only the cryptographic scheme and
> does not prescribe specific applications. It has not received an extensive
> security review yet. Thanks to Elliott Jin and Tim Ruffing for the review so
> far. One new feature that the specified scheme has is "incremental aggregation"
> which allows aggregating additional BIP-340 signatures into an existing
> half-aggregate signature.
>
> While BIP-340 has a pseudocode specification and a reference implementation in
> python, this BIP draft has a formal specification written in hacspec [0] and
> auxiliary pseudocode. The formal specification is a mathematically precise
> description of the scheme, which paves the way for computer-aided formal proofs.
> Software tools ("proof assistants") allow proving properties about the formal
> specification ("no integer overflow") and apply formal software verification
> ("implementation is behaviorally equivalent to the spec"). I don't have concrete
> plans (nor the skillset) to use these techniques. Still, I think this is an
> exciting area to explore because it has the potential to increase the Bitcoin
> ecosystem's robustness significantly and has little downside. Since hacspec's
> syntax is a subset of Rust's syntax, one can use the standard rust toolchain to
> compile, execute and test the specification.
>
> You can find a blog post that gives a broader context at
> https://blog.blockstream.com/half-aggregation-of-bip-340-signatures/
>
> [0] https://github.com/hacspec/hacspec
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From veleslav.bips at protonmail.com  Sun Jul 17 13:28:23 2022
From: veleslav.bips at protonmail.com (=?utf-8?B?0JLQtdC70LXRgdC70LDQsg==?=)
Date: Sun, 17 Jul 2022 13:28:23 +0000
Subject: [bitcoin-dev] How to do Proof of Micro-Burn?
Message-ID: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>

Hello List,

I have been pondering this problem for some time and have not yet come up with an elegant solution, so I am asking here to get more perspective.

There are many usecases for proof of burn. The current working solution is to use OP_RETURN with some application specific data.

However, this is limited because block space is finite, and although the use of block space itself is an implicit form of burn and can be used in the economic calculation of the burn, it is still a fundamental scalability constraint.

It would be great to have some sort of second layer protocol where micro-burns could be instantly exchanged and public proofs generated. Something like the Lightning Network, but with public evidence of burns.

I was thinking of pre-committing a larger OP_RETURN burn in the blockchain, with an additional output that would include a merkel tree with sparse summation (see Taro), but I haven't found a solution to the double-spend problem. I see that the space in this tree can be oversold before it is committed to the blockchain.

This makes me wonder if there really is no solution other than to use a blockchain. For example, a liquid type sidechain, where the pre-commitments being burned are a kind of pledge, and the resulting merkel tree is built and fixed via a bail-out sidechain mechanism.

Burns can be performed on the side chain at a very high frequency, and the side chain can end up fixing these burns back into the main chain within some effective merkel tree proof structure.

All in all, I would like some kind of solution that would be similar to buying a micro-burn using the Lightning network milisatoshis, and then quickly and reliably obtaining a unique and valid burn proof that is cheap to verify. Is something like this possible?

Kind Regards,Veleslav
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220717/977aca8e/attachment.html>

From rsomsen at gmail.com  Sun Jul 17 20:40:33 2022
From: rsomsen at gmail.com (Ruben Somsen)
Date: Sun, 17 Jul 2022 22:40:33 +0200
Subject: [bitcoin-dev] How to do Proof of Micro-Burn?
In-Reply-To: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>
References: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>
Message-ID: <CAPv7TjadLN0X31vdo6ATy_aYepbcykZ8Vp8ghQA9W-GEV4axmg@mail.gmail.com>

Hi Veleslav,

This is something I've been interested in.

What you need is a basic merkle sum tree (not sparse), so if e.g. you want
to burn 10, 20, 30 and 40 sats for separate use cases, in a single tx you
can burn 100 sats and commit to a tree with four leaves, and the merkle
proof contains the values. E.g. the rightmost leaf is 40 and has 30 as its
neighbor, and moves up to a node of 70 which has 30 (=10+20) as its
neighbor, totalling 100.

The leaf hash needs to commit to the intent/recipient of the burn, so that
way you can't "double spend" the burn by reusing it for more than one
purpose.

You could outsource the burn to an aggregating third party by paying them
e.g. over LN but it won't be atomic, so they could walk away with your
payment without actually following through with the burn (but presumably
take a reputational hit).

As I believe you already realized, while an op_return is needed (or rather,
preferred) to burn, you don't necessarily have to put the hash there and
can thus save some bytes. One possible place to commit the root hash is in
a double taproot commitment in the change output. So while taproot is Q =
P + hash(Q||mast)*G, you'd commit the root in P such that P = N +
hash(N||burn_tree_root)*G. What's important is that the location is fully
deterministic, in order to ensure there isn't more than one tree (which
would be yet another way to "double spend").

Finally, you can perform the burn on a spacechain[0] (basically a
"sidechain" that has burned BTC as its native token) in order to pretty
much avoid using mainchain block space altogether, so it should scale much
better. It's worth noting that this fully supports SPV proofs, so the third
party you're proving the burn to doesn't have to run a full node (though
SPV may not be safe enough for big amounts).

To me this seems like a possible way to revitalize the original hashcash
use case, e.g. by only accepting emails which have an SPV proof of some
burned sats attached, or any other place where spam is an issue.

Cheers,
Ruben


[0] Spacechains:
https://gist.github.com/RubenSomsen/c9f0a92493e06b0e29acced61ca9f49a#spacechains



On Sun, Jul 17, 2022 at 9:41 PM ???????? via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello List,
>
> I have been pondering this problem for some time and have not yet come up
> with an elegant solution, so I am asking here to get more perspective.
>
> There are many usecases for proof of burn. The current working solution is
> to use OP_RETURN with some application specific data.
>
> However, this is limited because block space is finite, and although the
> use of block space itself is an implicit form of burn and can be used in
> the economic calculation of the burn, it is still a fundamental scalability
> constraint.
>
> It would be great to have some sort of second layer protocol where
> micro-burns could be instantly exchanged and public proofs generated.
> Something like the Lightning Network, but with public evidence of burns.
>
> I was thinking of pre-committing a larger OP_RETURN burn in the
> blockchain, with an additional output that would include a merkel tree with
> sparse summation (see Taro), but I haven't found a solution to the
> double-spend problem. I see that the space in this tree can be oversold
> before it is committed to the blockchain.
>
> This makes me wonder if there really is no solution other than to use a
> blockchain. For example, a liquid type sidechain, where the pre-commitments
> being burned are a kind of pledge, and the resulting merkel tree is built
> and fixed via a bail-out sidechain mechanism.
>
> Burns can be performed on the side chain at a very high frequency, and the
> side chain can end up fixing these burns back into the main chain within
> some effective merkel tree proof structure.
>
> All in all, I would like some kind of solution that would be similar to
> buying a micro-burn using the Lightning network milisatoshis, and then
> quickly and reliably obtaining a unique and valid burn proof that is cheap
> to verify. Is something like this possible?
>
> Kind Regards,
> Veleslav
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220717/bc75c3de/attachment-0001.html>

From jonasdnick at gmail.com  Sun Jul 17 20:48:11 2022
From: jonasdnick at gmail.com (Jonas Nick)
Date: Sun, 17 Jul 2022 20:48:11 +0000
Subject: [bitcoin-dev] BIP draft: Half-Aggregation of BIP-340 Signatures
In-Reply-To: <uxodWlVSmJqvVHDuGevdDbsc5lXiyV6zONlNJtj6gDylkTXQzkPPokLXKJAVULMwPbduJJ7Fb-s0ZYKpduvIZ-LkCsfXClkDH5WhOFsTHts=@protonmail.com>
References: <33f275c2-06b1-4b4a-2a75-cafe36836503@gmail.com>
 <uxodWlVSmJqvVHDuGevdDbsc5lXiyV6zONlNJtj6gDylkTXQzkPPokLXKJAVULMwPbduJJ7Fb-s0ZYKpduvIZ-LkCsfXClkDH5WhOFsTHts=@protonmail.com>
Message-ID: <2f511890-23a7-882a-332c-85cda02fba7a@gmail.com>

To be clear, whether "half aggregation needs a new output type or not" does not
become clear in the draft BIP because it is out of scope. Half-aggregation has a
few possible applications. The draft only specifies the cryptographic scheme.

The StackExchange post you link to argues that CISA requires a new output type.
The same argument applies to half aggregating signatures across transaction
inputs (CISHA, if you will). The only difference to "full aggregation" is that
the transaction signature is a single half-aggregate signature instead of a
64-byte signature. You're right that it's possible to do batch verification of
Taproot output key spends (Schnorr signatures) and script spends (key tweaks).

From ZmnSCPxj at protonmail.com  Sun Jul 17 22:34:24 2022
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Sun, 17 Jul 2022 22:34:24 +0000
Subject: [bitcoin-dev] How to do Proof of Micro-Burn?
In-Reply-To: <CAPv7TjadLN0X31vdo6ATy_aYepbcykZ8Vp8ghQA9W-GEV4axmg@mail.gmail.com>
References: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>
 <CAPv7TjadLN0X31vdo6ATy_aYepbcykZ8Vp8ghQA9W-GEV4axmg@mail.gmail.com>
Message-ID: <l8iSmPDtMssCoGR0b4twwHMB551xnJBL1wK1jDZcvA8ipKlnBOdZw8ZFVBc4vZzLUlOC3qKB0aEoF6XT7tyFKr6OPThemVD2SiIliCj3-P8=@protonmail.com>

Good morning Ruben and Veleslav,

> Hi Veleslav,
>
> This is something I've been interested in.
>
>
> What you need is a basic merkle sum tree (not sparse), so if e.g. you want to burn 10, 20, 30 and 40 sats for separate use cases, in a single tx you can burn 100 sats and commit to a tree with four leaves, and the merkle proof contains the values. E.g. the rightmost leaf is 40 and has 30 as its neighbor, and moves up to a node of 70 which has 30 (=10+20) as its neighbor, totalling 100.
>
>
> The leaf hash needs to commit to the intent/recipient of the burn, so that way you can't "double spend" the burn by reusing it for more than one purpose.
>
>
> You could outsource the burn to an aggregating third party by paying them e.g. over LN but it won't be atomic, so they could walk away with your payment without actually following through with the burn (but presumably take a reputational hit).

If LN switches to PTLCs (payment points/scalars), it may be possible to ensure that you only pay if they release an opening of the commitment.

WARNING: THIS IS ROLL-YOUR-OWN-CRYPTO.

Rather than commit using a Merkle tree, you can do a trick similar to what I came up with in `OP_EVICT`.

Suppose there are two customers who want to commit scalars `a` and `b`, and the aggregating third party has a private key `k`.
The sum commitment is then:

   a * G + b * G + k * G

The opening to show that this commits to `a` is then:

   a, b * G + k * G, sign(b + k, a)

...where `sign(k, m)` means sign message `m` with the private key `k`.
Similarly the opening for `b` is:

   b, a * G + k *G, sign(a + k, b)

The ritual to purchase a proof goes this way:

* Customer provides the scalar they want committed.
* Aggregator service aggregates the scalars to get `a + b + ....` and adds their private key `k`.
* Aggregator service reveals `(a + b + ... + k) * G` to customer.
* Aggregator creates an onchain proof-of-burn to `(a + b + ... + k) * G`.
* Everyone waits until the onchain proof-of-burn is confirmed deeply enough.
* Aggregator creates the signatures for each opening for `a`, `b`,.... of the commitment.
* Aggregator provides the corresponding `R` of each signature to each customer.
* Customer computes `S = s * G` for their own signature that opens the commitment.
* Customer offers a PTLC (i.e. pay for signature scheme) that pays in exchange for `s`.
* Aggregator claims the PTLC, revealing the `s` for the signature.
* Customer now has an opening of the commitment that is for their specific scalar.

WARNING: I am not a cryptographer, I only portray one on bitcoin-dev.
There may be cryptographic failures in the above scheme.

Regards,
ZmnSCPxj

From dave at dtrt.org  Mon Jul 18 11:34:39 2022
From: dave at dtrt.org (David A. Harding)
Date: Mon, 18 Jul 2022 01:34:39 -1000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <YssL6VL9y6EwyBjr@petertodd.org>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
 <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
 <YssL6VL9y6EwyBjr@petertodd.org>
Message-ID: <08a53f48e81f1da06bd688e524ae4ec7@dtrt.org>

On 2022-07-10 07:27, Peter Todd via bitcoin-dev wrote:
> The block subsidy directly ties miner revenue to the total value of 
> Bitcoin:
> that's exactly how you want to incentivise a service that keeps Bitcoin 
> secure.

I'm confused.  I thought your argument in the OP of this thread was that 
a perpetual block subsidy would *not* be tied to the total value of 
bitcoin.  It'd be tied to the total value of bitcoin *lost* each year on 
average.

If so, would you then agree that the inability of a perpetual block 
subsidy to directly tie miner revenue to the total value of Bitcoin 
makes it not exactly how we want to incentivise a service that keeps 
Bitcoin secure?

Thanks,

-Dave

From erik at q32.com  Mon Jul 18 19:14:15 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 18 Jul 2022 15:14:15 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <08a53f48e81f1da06bd688e524ae4ec7@dtrt.org>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
 <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
 <YssL6VL9y6EwyBjr@petertodd.org> <08a53f48e81f1da06bd688e524ae4ec7@dtrt.org>
Message-ID: <CAJowKgJb99LAQ=KGEcU2a1jJBPGBNh7=zW177NpS-vxvKZyO0A@mail.gmail.com>

>
>
> subsidy to directly tie miner revenue to the total value of Bitcoin
> makes it not exactly how we want to incentivise a service that keeps
>
>
again, this is meaningless.   if the fees aren't enough to keep  bitcoin
secure for large transactions, then large holders are incentivised to mine

that's it.

it's not complicated
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220718/442c400a/attachment.html>

From eric at voskuil.org  Mon Jul 18 21:48:46 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Mon, 18 Jul 2022 14:48:46 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <CAJowKgJb99LAQ=KGEcU2a1jJBPGBNh7=zW177NpS-vxvKZyO0A@mail.gmail.com>
References: <CAJowKgJb99LAQ=KGEcU2a1jJBPGBNh7=zW177NpS-vxvKZyO0A@mail.gmail.com>
Message-ID: <6A72F2DB-C07C-4953-B820-03613941D72E@voskuil.org>


> On Jul 18, 2022, at 14:14, Erik Aronesty via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?
>> 
>> subsidy to directly tie miner revenue to the total value of Bitcoin 
>> makes it not exactly how we want to incentivise a service that keeps 
>> 
> 
> again, this is meaningless.   if the fees aren't enough to keep  bitcoin secure for large transactions, then large holders are incentivised to mine

Yes, this is another way to pay the tx fee - you mine at cost sufficient to overpower the censor. You are spending the block reward in getting your txs confirmed, and that?s your fee.

But unless you are mining full blocks of only your own transactions, this implies that you are accepting these higher fees on censored txs from others. Otherwise you are simply mining at a loss, which we cannot use as a rational basis for security.

And therefore this reduces to the simple fact that tx fees are what provides censorship resistance, whether you mine your own or others?.

e

> that's it.
> 
> it's not complicated
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220718/fd07a1e3/attachment.html>

From rsomsen at gmail.com  Mon Jul 18 22:32:37 2022
From: rsomsen at gmail.com (Ruben Somsen)
Date: Tue, 19 Jul 2022 00:32:37 +0200
Subject: [bitcoin-dev] How to do Proof of Micro-Burn?
In-Reply-To: <l8iSmPDtMssCoGR0b4twwHMB551xnJBL1wK1jDZcvA8ipKlnBOdZw8ZFVBc4vZzLUlOC3qKB0aEoF6XT7tyFKr6OPThemVD2SiIliCj3-P8=@protonmail.com>
References: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>
 <CAPv7TjadLN0X31vdo6ATy_aYepbcykZ8Vp8ghQA9W-GEV4axmg@mail.gmail.com>
 <l8iSmPDtMssCoGR0b4twwHMB551xnJBL1wK1jDZcvA8ipKlnBOdZw8ZFVBc4vZzLUlOC3qKB0aEoF6XT7tyFKr6OPThemVD2SiIliCj3-P8=@protonmail.com>
Message-ID: <CAPv7TjaFW8oOjrJGjUCkMLy2nfSOkjsR0Dg3Rbzq7__WOVir7Q@mail.gmail.com>

Good evening ZmnSCPxj,

Interesting attempt.

 >a * G + b * G + k * G

Unfortunately I don't think this qualifies as a commitment, since one could
trivially open the "commitment" to some uncommitted value x (e.g. a is set
to x and b is set to a+b-x). Perhaps you were thinking of Pedersen
commitments (a * G + b * H + k * J)?

Even if we fixed the above with some clever cryptography, the crucial
merkle sum tree property is missing, so "double spending" a burn becomes
possible. You also still run into the same atomicity issue, except the risk
is moved to the seller side, as the buyer could refuse to finalize the
purchase after the on-chain commitment was made by the seller. Arguably
this is worse, since generally only the seller has a reputation to lose,
not the buyer.

Cheers,
Ruben

On Mon, Jul 18, 2022 at 12:34 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:

> Good morning Ruben and Veleslav,
>
> > Hi Veleslav,
> >
> > This is something I've been interested in.
> >
> >
> > What you need is a basic merkle sum tree (not sparse), so if e.g. you
> want to burn 10, 20, 30 and 40 sats for separate use cases, in a single tx
> you can burn 100 sats and commit to a tree with four leaves, and the merkle
> proof contains the values. E.g. the rightmost leaf is 40 and has 30 as its
> neighbor, and moves up to a node of 70 which has 30 (=10+20) as its
> neighbor, totalling 100.
> >
> >
> > The leaf hash needs to commit to the intent/recipient of the burn, so
> that way you can't "double spend" the burn by reusing it for more than one
> purpose.
> >
> >
> > You could outsource the burn to an aggregating third party by paying
> them e.g. over LN but it won't be atomic, so they could walk away with your
> payment without actually following through with the burn (but presumably
> take a reputational hit).
>
> If LN switches to PTLCs (payment points/scalars), it may be possible to
> ensure that you only pay if they release an opening of the commitment.
>
> WARNING: THIS IS ROLL-YOUR-OWN-CRYPTO.
>
> Rather than commit using a Merkle tree, you can do a trick similar to what
> I came up with in `OP_EVICT`.
>
> Suppose there are two customers who want to commit scalars `a` and `b`,
> and the aggregating third party has a private key `k`.
> The sum commitment is then:
>
>    a * G + b * G + k * G
>
> The opening to show that this commits to `a` is then:
>
>    a, b * G + k * G, sign(b + k, a)
>
> ...where `sign(k, m)` means sign message `m` with the private key `k`.
> Similarly the opening for `b` is:
>
>    b, a * G + k *G, sign(a + k, b)
>
> The ritual to purchase a proof goes this way:
>
> * Customer provides the scalar they want committed.
> * Aggregator service aggregates the scalars to get `a + b + ....` and adds
> their private key `k`.
> * Aggregator service reveals `(a + b + ... + k) * G` to customer.
> * Aggregator creates an onchain proof-of-burn to `(a + b + ... + k) * G`.
> * Everyone waits until the onchain proof-of-burn is confirmed deeply
> enough.
> * Aggregator creates the signatures for each opening for `a`, `b`,.... of
> the commitment.
> * Aggregator provides the corresponding `R` of each signature to each
> customer.
> * Customer computes `S = s * G` for their own signature that opens the
> commitment.
> * Customer offers a PTLC (i.e. pay for signature scheme) that pays in
> exchange for `s`.
> * Aggregator claims the PTLC, revealing the `s` for the signature.
> * Customer now has an opening of the commitment that is for their specific
> scalar.
>
> WARNING: I am not a cryptographer, I only portray one on bitcoin-dev.
> There may be cryptographic failures in the above scheme.
>
> Regards,
> ZmnSCPxj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220719/5f0f8099/attachment.html>

From aj at erisian.com.au  Tue Jul 19 04:44:58 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 19 Jul 2022 14:44:58 +1000
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <QOWIpROGDv5HHP2GsDiSOsTJ9TVZhFeSP3C03_e2Z3XtOKC_4N5GJtxbdlxuhErvhLZXo1Rn_7SWAQ9XRPwHFuYyArZryTVENefDZuGTAYA=@protonmail.com>
References: <QOWIpROGDv5HHP2GsDiSOsTJ9TVZhFeSP3C03_e2Z3XtOKC_4N5GJtxbdlxuhErvhLZXo1Rn_7SWAQ9XRPwHFuYyArZryTVENefDZuGTAYA=@protonmail.com>
Message-ID: <20220719044458.GA26986@erisian.com.au>

On Fri, Jun 03, 2022 at 06:39:34PM +0000, alicexbt via bitcoin-dev wrote:
> Covenants on bitcoin will eventually be implemented with a soft fork.

That's begging the question. The issue is whether we should allow such
soft forks, or if the danger of losing coins to covenants and thus
losing fungibility and the freedom to transact is too much of a risk,
compared to whatever benefits the soft fork would bring.

> **Why covenants are not contentious?**

I think this actually misses the point: covenants are "contentious"
because that term is usually used to describe a concept that's utterly
counter to the point of bitcoin as a monetary instrument. We've taken
the term and applied it for something that's different in key ways,
which just ends up confusing and misleading.

Using a traditional meaning, a "covenant" is an "agreement" but with
an implication of permanency: whether that's because you're making a
covenant with God that will bind your children and their children, or
you're putting a covenant on your property that "runs with the land", eg:

"""A covenant is said to run with the land in the event that the covenant
is annexed to the estate and cannot be separated from the land or the land
transferred without it. Such a covenant exists if the original owner as
well as each successive owner of the property is either subject to its
burden or entitled to its benefit.""" [0]

[0] https://legal-dictionary.thefreedictionary.com/covenant

Sometimes people talk about "recursive covenants" in bitcoin, which
I think is intended to imply something similar to the "runs with the
land" concept above. But recursion in programming generally terminates
(calculating "Fib(n) := if (n <= 1) then 1 else Fib(n-1) + Fib(n-2)"
eg), while covenants that run with the land are often unable to be
removed. I think a better programming analogy would be "non-terminating";
so for example, CTV is "recursive" in the sense that you can nest one
CTV commitment inside another, but it does terminate, because you can
only nest a finite number of CTV commitments inside another, due to
computational limits.

Covenants even have a racist history in the US (because of course they
do), apparently, with covenants along the lines of "None of said land
may be conveyed to, used, owned, or occupied by negroes as owners or
tenants" [1] having been in use. Such covenants have apparently been
ruled uneforcable by the Supreme Court, but apparently are nevertheless
often difficult or impossible to remove from the property despite
that. Presumably we at least don't need to worry about somehow introducing
racist opcodes in bitcoin, but if you're wondering why covenants are
controversial, their historical use is relevant.

[1] https://www.npr.org/2021/11/17/1049052531/racial-covenants-housing-discrimination

Covenants are specifically undesirable if applied to bitcoin because they
break fungibility -- if you have some covenant that "runs with the coin",
then it's no longer true to say "1 BTC = 1 BTC" if such a covenant means
the one of the left can't be used for a lightning channel or the one on
the right can't be used to back an asset on eth or liquid.

But that isn't what anyone's *trying* to do here. What we're trying to
do is add temporary conditions that allow us to do smarter things than
we currently can while the coin remains in our ownership -- for example
protecting our own money by putting it in a "vault", or pooling funds
with people we don't entirely trust. 

That often requires recursion in the first place (so that the vault or
the pool doesn't disappear after the first transaction). And from there,
it can be easy to prevent the recursion from terminating and turn what
would otherwise be a temporary condition into a permanent one. That
was theoretically interesting in 2013 [2], and remains so today [3],
but it isn't something that's *desirable* to apply to bitcoin.

[2] https://bitcointalk.org/index.php?topic=278122.0
[3] https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html

That is: even if it becomes possible to create permanent non-terminating
covenants that run with a coin on bitcoin, that isn't something you
should do, and if you do, people should not (and almost certainly will
not) accept those coins from you, unless you first find a way to remove
that covenant.

One significant difference between real estate covenants and anything
we might have on bitcoin is the ability to be sure that once you receive
ownership of bitcoin, that that ownership does not come with encumbrances
you're unaware of. In particular, when purchasing real estate, you
may have to do numerous legal searches to be sure that there isn't a
covenant, easement or other encumbrance on your property; in bitcoin,
you decide the exact set of encumbrances that will be placed on your
coins when you create the receiving address that you use, and once the
address is chosen, those conditions are fixed. (Though to be fair, they
could reference external things, such as an oracle, which could change)

So, all in all, I think we should stop describing these features we're
thinking about adding with the word that's mainly used for the single
most inappropriate and undesirable use case for them.

I think I'm going to go with talking about these features as enabling
"transaction introspection" [4] [5] [6] (or "output introspection")
instead -- that is, the ability for a script or witness from the input of
a transaction to specify that the validator needs to examine components
of the transaction itself (particularly its own outputs -- the value
or the scriptPubKey or both), and ensure that some set of requirements
imposed by the script/witness is fulfilled.

[4] eg https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020735.html
[5] compare with https://en.wikipedia.org/wiki/Type_introspection
[6] see also https://github.com/ElementsProject/elements/blob/master/doc/tapscript_opcodes.md

Note that signatures already involve transaction/output introspection:
SIGHASH_ALL and SIGHASH_SINGLE impose the requirement that one or all
outputs hash to some particular value, and validators obviously must
check that requirement when validating signatures. That we already have
this feature is why seemingly unrealted opcodes like CAT (or SUBSTR or
SHA256STREAM) could also enable covenants in bitcoin.

The CLTV and CSV opcodes also do transaction introspection, though not
output introspection as they only examine the tx header (nlocktime)
and the current input (nsequence).

Cheers,
aj


From ZmnSCPxj at protonmail.com  Tue Jul 19 14:48:27 2022
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Tue, 19 Jul 2022 14:48:27 +0000
Subject: [bitcoin-dev] How to do Proof of Micro-Burn?
In-Reply-To: <CAPv7TjaFW8oOjrJGjUCkMLy2nfSOkjsR0Dg3Rbzq7__WOVir7Q@mail.gmail.com>
References: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>
 <CAPv7TjadLN0X31vdo6ATy_aYepbcykZ8Vp8ghQA9W-GEV4axmg@mail.gmail.com>
 <l8iSmPDtMssCoGR0b4twwHMB551xnJBL1wK1jDZcvA8ipKlnBOdZw8ZFVBc4vZzLUlOC3qKB0aEoF6XT7tyFKr6OPThemVD2SiIliCj3-P8=@protonmail.com>
 <CAPv7TjaFW8oOjrJGjUCkMLy2nfSOkjsR0Dg3Rbzq7__WOVir7Q@mail.gmail.com>
Message-ID: <2RqMBHD1F81zChgG5I40iCbuAriXQARjeDcMWuFDiPFh3cegBC-GDfsj6rr7pzU2myZLWf65DatR9eHpBSZOmWDP0XHRycg8Y3T-Y85H8vI=@protonmail.com>


Good morning Ruben,

> Good evening ZmnSCPxj,
> Interesting attempt.
>
> >a * G + b * G + k * G
>
> Unfortunately I don't think this qualifies as a commitment, since one could trivially open the "commitment" to some uncommitted value x (e.g. a is set to x and b is set to a+b-x). Perhaps you were thinking of Pedersen commitments (a * G + b * H + k * J)?

I believe this is only possible for somebody who knows `k`?
As mentioned, an opening here includes a signature using `b + k` as the private key, so the signature can only be generated with knowledge of both `b` and `k`.

I suppose that means that the knower of `k` is a trusted party; it is trusted to only issue commitments and not generate fake ones.

> Even if we fixed the above with some clever cryptography, the crucial merkle sum tree property is missing, so "double spending" a burn becomes possible.

I do not understand what this property is and how it is relevant, can you please explain this to a non-mathematician?

> You also still run into the same atomicity issue, except the risk is moved to the seller side, as the buyer could refuse to finalize the purchase after the on-chain commitment was made by the seller. Arguably this is worse, since generally only the seller has a reputation to lose, not the buyer.

A buyer can indeed impose this cost on the seller, though the buyer then is unable to get a valid opening of its commitment, as it does not know `k`.
Assuming the opening of the commitment is actually what has value (since the lack of such an opening means the buyer cannot prove the commitment) then the buyer has every incentive to actually pay for the opening.

Regards,
ZmnSCPxj

From alicexbt at protonmail.com  Tue Jul 19 14:46:46 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Tue, 19 Jul 2022 14:46:46 +0000
Subject: [bitcoin-dev] Bitcoin covenants are inevitable
In-Reply-To: <20220719044458.GA26986@erisian.com.au>
References: <QOWIpROGDv5HHP2GsDiSOsTJ9TVZhFeSP3C03_e2Z3XtOKC_4N5GJtxbdlxuhErvhLZXo1Rn_7SWAQ9XRPwHFuYyArZryTVENefDZuGTAYA=@protonmail.com>
 <20220719044458.GA26986@erisian.com.au>
Message-ID: <qWMGp9hI6axlYCNSP9tCj3IYbFQfATUQFciviuz94saFXaeFH0t7fNSnieTCmNEhC9gyz3zjvLrb-DdnoQ6XzzxPcrt4gX9meCN_1mHtvvs=@protonmail.com>

Hi Anthony,


> The issue is whether we should allow such
> soft forks, or if the danger of losing coins to covenants and thus
> losing fungibility and the freedom to transact is too much of a risk,
> compared to whatever benefits the soft fork would bring.

There are so many ways to lose coins and [fungibility][1] of bitcoin is debatable. Most UTXOs are already distinguishable from another.

> that. Presumably we at least don't need to worry about somehow introducing
> racist opcodes in bitcoin, but if you're wondering why covenants are
> controversial, their historical use is relevant.

Could rebranding the term 'covenants' help in sharing the benefits of related proposals for bitcoin? According to Greg Maxwell's [comment][2] on reddit, he came up with the term as applied in bitcoin.

> But that isn't what anyone's trying to do here. What we're trying to
> do is add temporary conditions that allow us to do smarter things than
> we currently can while the coin remains in our ownership -- for example
> protecting our own money by putting it in a "vault", or pooling funds
> with people we don't entirely trust.

Agree.

> In particular, when purchasing real estate, you
> may have to do numerous legal searches to be sure that there isn't a
> covenant, easement or other encumbrance on your property; in bitcoin,
> you decide the exact set of encumbrances that will be placed on your
> coins when you create the receiving address that you use, and once the
> address is chosen, those conditions are fixed.

Agree and users should be free to add conditions to the coins they own.

> I think I'm going to go with talking about these features as enabling
> "transaction introspection" [4] [5] [6] (or "output introspection")
> instead -- that is, the ability for a script or witness from the input of
> a transaction to specify that the validator needs to examine components
> of the transaction itself (particularly its own outputs -- the value
> or the scriptPubKey or both), and ensure that some set of requirements
> imposed by the script/witness is fulfilled.

Interesting perspective and maybe this is the rebranding I was thinking about.


[1]: https://en.wikipedia.org/wiki/Fungibility
[2]: https://www.reddit.com/r/Bitcoin/comments/uim560/comment/i7dhfpb/


/dev/fd0


Sent with Proton Mail secure email.

------- Original Message -------
On Tuesday, July 19th, 2022 at 10:14 AM, Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:


> On Fri, Jun 03, 2022 at 06:39:34PM +0000, alicexbt via bitcoin-dev wrote:
>
> > Covenants on bitcoin will eventually be implemented with a soft fork.
>
>
> That's begging the question. The issue is whether we should allow such
> soft forks, or if the danger of losing coins to covenants and thus
> losing fungibility and the freedom to transact is too much of a risk,
> compared to whatever benefits the soft fork would bring.
>
> > Why covenants are not contentious?
>
>
> I think this actually misses the point: covenants are "contentious"
> because that term is usually used to describe a concept that's utterly
> counter to the point of bitcoin as a monetary instrument. We've taken
> the term and applied it for something that's different in key ways,
> which just ends up confusing and misleading.
>
> Using a traditional meaning, a "covenant" is an "agreement" but with
> an implication of permanency: whether that's because you're making a
> covenant with God that will bind your children and their children, or
> you're putting a covenant on your property that "runs with the land", eg:
>
> """A covenant is said to run with the land in the event that the covenant
> is annexed to the estate and cannot be separated from the land or the land
> transferred without it. Such a covenant exists if the original owner as
> well as each successive owner of the property is either subject to its
> burden or entitled to its benefit.""" [0]
>
> [0] https://legal-dictionary.thefreedictionary.com/covenant
>
> Sometimes people talk about "recursive covenants" in bitcoin, which
> I think is intended to imply something similar to the "runs with the
> land" concept above. But recursion in programming generally terminates
> (calculating "Fib(n) := if (n <= 1) then 1 else Fib(n-1) + Fib(n-2)"
> eg), while covenants that run with the land are often unable to be
> removed. I think a better programming analogy would be "non-terminating";
> so for example, CTV is "recursive" in the sense that you can nest one
> CTV commitment inside another, but it does terminate, because you can
> only nest a finite number of CTV commitments inside another, due to
> computational limits.
>
> Covenants even have a racist history in the US (because of course they
> do), apparently, with covenants along the lines of "None of said land
> may be conveyed to, used, owned, or occupied by negroes as owners or
> tenants" [1] having been in use. Such covenants have apparently been
> ruled uneforcable by the Supreme Court, but apparently are nevertheless
> often difficult or impossible to remove from the property despite
> that. Presumably we at least don't need to worry about somehow introducing
> racist opcodes in bitcoin, but if you're wondering why covenants are
> controversial, their historical use is relevant.
>
> [1] https://www.npr.org/2021/11/17/1049052531/racial-covenants-housing-discrimination
>
> Covenants are specifically undesirable if applied to bitcoin because they
> break fungibility -- if you have some covenant that "runs with the coin",
> then it's no longer true to say "1 BTC = 1 BTC" if such a covenant means
> the one of the left can't be used for a lightning channel or the one on
> the right can't be used to back an asset on eth or liquid.
>
> But that isn't what anyone's trying to do here. What we're trying to
> do is add temporary conditions that allow us to do smarter things than
> we currently can while the coin remains in our ownership -- for example
> protecting our own money by putting it in a "vault", or pooling funds
> with people we don't entirely trust.
>
> That often requires recursion in the first place (so that the vault or
> the pool doesn't disappear after the first transaction). And from there,
> it can be easy to prevent the recursion from terminating and turn what
> would otherwise be a temporary condition into a permanent one. That
> was theoretically interesting in 2013 [2], and remains so today [3],
> but it isn't something that's desirable to apply to bitcoin.
>
> [2] https://bitcointalk.org/index.php?topic=278122.0
> [3] https://www.wpsoftware.net/andrew/blog/cat-and-schnorr-tricks-ii.html
>
> That is: even if it becomes possible to create permanent non-terminating
> covenants that run with a coin on bitcoin, that isn't something you
> should do, and if you do, people should not (and almost certainly will
> not) accept those coins from you, unless you first find a way to remove
> that covenant.
>
> One significant difference between real estate covenants and anything
> we might have on bitcoin is the ability to be sure that once you receive
> ownership of bitcoin, that that ownership does not come with encumbrances
> you're unaware of. In particular, when purchasing real estate, you
> may have to do numerous legal searches to be sure that there isn't a
> covenant, easement or other encumbrance on your property; in bitcoin,
> you decide the exact set of encumbrances that will be placed on your
> coins when you create the receiving address that you use, and once the
> address is chosen, those conditions are fixed. (Though to be fair, they
> could reference external things, such as an oracle, which could change)
>
> So, all in all, I think we should stop describing these features we're
> thinking about adding with the word that's mainly used for the single
> most inappropriate and undesirable use case for them.
>
> I think I'm going to go with talking about these features as enabling
> "transaction introspection" [4] [5] [6] (or "output introspection")
> instead -- that is, the ability for a script or witness from the input of
> a transaction to specify that the validator needs to examine components
> of the transaction itself (particularly its own outputs -- the value
> or the scriptPubKey or both), and ensure that some set of requirements
> imposed by the script/witness is fulfilled.
>
> [4] eg https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020735.html
> [5] compare with https://en.wikipedia.org/wiki/Type_introspection
> [6] see also https://github.com/ElementsProject/elements/blob/master/doc/tapscript_opcodes.md
>
> Note that signatures already involve transaction/output introspection:
> SIGHASH_ALL and SIGHASH_SINGLE impose the requirement that one or all
> outputs hash to some particular value, and validators obviously must
> check that requirement when validating signatures. That we already have
> this feature is why seemingly unrealted opcodes like CAT (or SUBSTR or
> SHA256STREAM) could also enable covenants in bitcoin.
>
> The CLTV and CSV opcodes also do transaction introspection, though not
> output introspection as they only examine the tx header (nlocktime)
> and the current input (nsequence).
>
> Cheers,
> aj
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From rsomsen at gmail.com  Tue Jul 19 22:23:40 2022
From: rsomsen at gmail.com (Ruben Somsen)
Date: Wed, 20 Jul 2022 00:23:40 +0200
Subject: [bitcoin-dev] How to do Proof of Micro-Burn?
In-Reply-To: <2RqMBHD1F81zChgG5I40iCbuAriXQARjeDcMWuFDiPFh3cegBC-GDfsj6rr7pzU2myZLWf65DatR9eHpBSZOmWDP0XHRycg8Y3T-Y85H8vI=@protonmail.com>
References: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>
 <CAPv7TjadLN0X31vdo6ATy_aYepbcykZ8Vp8ghQA9W-GEV4axmg@mail.gmail.com>
 <l8iSmPDtMssCoGR0b4twwHMB551xnJBL1wK1jDZcvA8ipKlnBOdZw8ZFVBc4vZzLUlOC3qKB0aEoF6XT7tyFKr6OPThemVD2SiIliCj3-P8=@protonmail.com>
 <CAPv7TjaFW8oOjrJGjUCkMLy2nfSOkjsR0Dg3Rbzq7__WOVir7Q@mail.gmail.com>
 <2RqMBHD1F81zChgG5I40iCbuAriXQARjeDcMWuFDiPFh3cegBC-GDfsj6rr7pzU2myZLWf65DatR9eHpBSZOmWDP0XHRycg8Y3T-Y85H8vI=@protonmail.com>
Message-ID: <CAPv7Tja_E5e=3J_XSxchFoFbz0jiXqn5b4FnjBYb8d44QKAB+g@mail.gmail.com>

Good evening ZmnSCPxj,

>I suppose that means that the knower of `k` is a trusted party; it is
trusted to only issue commitments and not generate fake ones

Then you can reduce the scheme to just committing to K and having that key
sign whatever the burn was intended for. I doubt this is useful in practice.

>can you please explain

The goal is to burn multiple amounts (10, 20, 30, 40) in a single OP_RETURN
(100) and specifically indicating how much of the total is intended for
what use case. A merkle sum tree achieves this.

(1a)  100      (1b)  ABCD       (2a)  100     (2b)  ABCD
    /    \          /    \          /    \         /    \
  30      70      AB      CD      30      70     AB      CD
 /  \    /  \    /  \    /  \    /  \           /  \
10  20  30  40   A  B    C  D   10  20          A  B

(view as monospace font, e.g. via bitcoin-dev archive)

So while in a normal merkle tree (1a) you hash e.g. A and B to get AB, with
a sum tree (1b) you also hash 10 and 20 to get 30.

When you verify the full merkle sum proof (2a + 2b, combined in a single
tree), you verify that 10 (A) + 20 (B) add up to 30 (AB), and 30 (AB) + 70
(CD) add up to 100 (ABCD), else the root hash won't match.

This ensures that you can't create a valid tree with commitments that
add up to more than the burned amount (essentially a "double spend").

>the buyer has every incentive to actually pay

Not if you never had any intention of buying it and are just trying to run
them out of business.

Hope this helps!

Cheers,
Ruben



On Tue, Jul 19, 2022 at 4:48 PM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:

>
> Good morning Ruben,
>
> > Good evening ZmnSCPxj,
> > Interesting attempt.
> >
> > >a * G + b * G + k * G
> >
> > Unfortunately I don't think this qualifies as a commitment, since one
> could trivially open the "commitment" to some uncommitted value x (e.g. a
> is set to x and b is set to a+b-x). Perhaps you were thinking of Pedersen
> commitments (a * G + b * H + k * J)?
>
> I believe this is only possible for somebody who knows `k`?
> As mentioned, an opening here includes a signature using `b + k` as the
> private key, so the signature can only be generated with knowledge of both
> `b` and `k`.
>
> I suppose that means that the knower of `k` is a trusted party; it is
> trusted to only issue commitments and not generate fake ones.
>
> > Even if we fixed the above with some clever cryptography, the crucial
> merkle sum tree property is missing, so "double spending" a burn becomes
> possible.
>
> I do not understand what this property is and how it is relevant, can you
> please explain this to a non-mathematician?
>
> > You also still run into the same atomicity issue, except the risk is
> moved to the seller side, as the buyer could refuse to finalize the
> purchase after the on-chain commitment was made by the seller. Arguably
> this is worse, since generally only the seller has a reputation to lose,
> not the buyer.
>
> A buyer can indeed impose this cost on the seller, though the buyer then
> is unable to get a valid opening of its commitment, as it does not know `k`.
> Assuming the opening of the commitment is actually what has value (since
> the lack of such an opening means the buyer cannot prove the commitment)
> then the buyer has every incentive to actually pay for the opening.
>
> Regards,
> ZmnSCPxj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220720/1bc4a1b3/attachment-0001.html>

From pete at petertodd.org  Tue Jul 19 23:13:41 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Jul 2022 19:13:41 -0400
Subject: [bitcoin-dev] How to do Proof of Micro-Burn?
In-Reply-To: <CAPv7Tja_E5e=3J_XSxchFoFbz0jiXqn5b4FnjBYb8d44QKAB+g@mail.gmail.com>
References: <OPZNUXvYVkB6kyu7Xvw5-lLIwwwftN_pz0iavHInWvQtQaxIzJhYQrx3dkITo9Yge02emrXY3obveywkH04dyAJdETIeeq9-zcH3DA7OxKs=@protonmail.com>
 <CAPv7TjadLN0X31vdo6ATy_aYepbcykZ8Vp8ghQA9W-GEV4axmg@mail.gmail.com>
 <l8iSmPDtMssCoGR0b4twwHMB551xnJBL1wK1jDZcvA8ipKlnBOdZw8ZFVBc4vZzLUlOC3qKB0aEoF6XT7tyFKr6OPThemVD2SiIliCj3-P8=@protonmail.com>
 <CAPv7TjaFW8oOjrJGjUCkMLy2nfSOkjsR0Dg3Rbzq7__WOVir7Q@mail.gmail.com>
 <2RqMBHD1F81zChgG5I40iCbuAriXQARjeDcMWuFDiPFh3cegBC-GDfsj6rr7pzU2myZLWf65DatR9eHpBSZOmWDP0XHRycg8Y3T-Y85H8vI=@protonmail.com>
 <CAPv7Tja_E5e=3J_XSxchFoFbz0jiXqn5b4FnjBYb8d44QKAB+g@mail.gmail.com>
Message-ID: <Ytc6paVsuqtyP5EJ@petertodd.org>

On Wed, Jul 20, 2022 at 12:23:40AM +0200, Ruben Somsen via bitcoin-dev wrote:
> The goal is to burn multiple amounts (10, 20, 30, 40) in a single OP_RETURN
> (100) and specifically indicating how much of the total is intended for
> what use case. A merkle sum tree achieves this.
> 
> (1a)  100      (1b)  ABCD       (2a)  100     (2b)  ABCD
>     /    \          /    \          /    \         /    \
>   30      70      AB      CD      30      70     AB      CD
>  /  \    /  \    /  \    /  \    /  \           /  \
> 10  20  30  40   A  B    C  D   10  20          A  B

From a practical point of view, note that the merkle-sum-tree is only useful in
cases where you're burning significantly less than a transaction fee. For the
forseeable future, that's <~$50, probably less.

Trusting a well-known third-party with $50 really isn't a big problem. So I
think adding more clever cryptography to avoid trusting the third party to
complete the burn isn't really necessary.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220719/171ae45b/attachment.sig>

From dizzle at pointbiz.com  Tue Jul 19 18:36:59 2022
From: dizzle at pointbiz.com (Peter)
Date: Tue, 19 Jul 2022 18:36:59 +0000
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <S5JNFd70ygX_dYwpkCaUeePSndvofPAbkxEllvf4zxfe0iW7g8wR--JZAI74vVVOsU8IZnBJiv937cnef6whHvDZZF696jzeGv33FWLkRVE=@pointbiz.com>

>And therefore this reduces to the simple fact that tx fees are what provides censorship resistance, whether you mine your own or others?.

What's the business model of the person who mines with the intention to censor transactions when there's no block reward?

Regards

Peter Kroll
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220719/f6a76da3/attachment.html>

From ali at notatether.com  Wed Jul 20 04:10:09 2022
From: ali at notatether.com (Ali Sherief)
Date: Wed, 20 Jul 2022 04:10:09 +0000
Subject: [bitcoin-dev] Trying all address types in message signing
	verification (BIP)
In-Reply-To: <20220719104725.ppic7jy4ghfieeap@artanis>
References: <7QoRGux2ow375UP6-XXIF6kI_0tbt-RxKrXiyuDBWVWh6Shjia-ShKy_or5FK9u46KkPAvK2biaSe_x8fMWP0Q==@protonmail.internalid>
 <mailman.84940.1658205911.8511.bitcoin-dev@lists.linuxfoundation.org>
 <20220719104725.ppic7jy4ghfieeap@artanis>
Message-ID: <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>

[my third attempt at getting this message through. Surprisingly, I managed to send this at the second try with the correct SMTP, From, To and all, but maybe it was caught in GreyListing (protonmail).]

I was thinking about creating a BIP to address the lack of standardization for Segwit message signatures, but I want some advice before proceeding.

The current state of affairs is that the wallets that do support signing and verifying a bitcoin message can only sign legacy addresses. It is technically possible to sign and verify segwit addresses, since ECDSA only depends on the public key (hence why you need a private key to sign messages).

However, because there is no generally-accepted standard for signing segwit messages, the wallets that do support this feature simply insert the segwit address into the address field. Verification also only works using the procedure on that specific wallet software, if only because the conventional tools for verifying messages attempt to reconstruct a legacy address only.

This BIP is not going to enforce anything, it's just going to set guidelines for writing a message signing and verification procedure.

This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.

In summary, in the verification part, the following address hashing algorithms will be tried in sequence in an attempt to reconstruct the address in the signed message:
- P2PKH (legacy address)
- P2WPKH-P2SH (nested segwit)
- P2WPKH with version from 0 to MAX_WITNESS_VERSION (covers native segwit with version 0 as well as future native segwit address types such as Taproot) - where MAX_WITNESS_VERSION is the maximum supported witness version by the bech32 encoding.

The verification procedure stops if any of these hashes yield the correct address, and fails if all of the above methods fail to reproduce the address in the signed message.

In the signing procedure, the only modification is the insertion of the segwit address in place of the legacy address in the signed message.

If this BIP is approved, it does not require any changes to existing signed messages, and the original sign/verify algorithms will continue to interoperate with this improved sign/verify algorithm, without any action necessary from the developers.

So as you can see, this is the entire framework of the BIP I plan to draft. There is no need for any auxilliary feature additions into this BIP. I just want to hear the mailing list's advice about how I should draft such a BIP.

- Ali

PS. I am pretty sure that there is a BIP for the original signing method - what is its number?

From michaelfolkson at protonmail.com  Wed Jul 20 11:16:40 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Wed, 20 Jul 2022 11:16:40 +0000
Subject: [bitcoin-dev] BIP draft: Half-Aggregation of BIP-340 Signatures
In-Reply-To: <2f511890-23a7-882a-332c-85cda02fba7a@gmail.com>
References: <33f275c2-06b1-4b4a-2a75-cafe36836503@gmail.com>
 <uxodWlVSmJqvVHDuGevdDbsc5lXiyV6zONlNJtj6gDylkTXQzkPPokLXKJAVULMwPbduJJ7Fb-s0ZYKpduvIZ-LkCsfXClkDH5WhOFsTHts=@protonmail.com>
 <2f511890-23a7-882a-332c-85cda02fba7a@gmail.com>
Message-ID: <_B_M5x2e1pkA8CmR-EY7NaMHZwBFJ3ST3GrEHzfL4P68CVsCgNKLb4OycJM7JSp625jnh7R5LSQXuRY1Ve0-kr0FKVrBdWnMh149YTNk78M=@protonmail.com>

So this half aggregation BIP draft could potentially play the role that BIP340 did for BIP341/342 but it is too premature to start formalizing what the equivalent of BIP341/342 for this draft BIP would look like. And given there are use cases for this half aggregation BIP that can be worked on today (e.g. Lightning gossip [0], Lightning gossip seems to be a very interesting research area at the moment with a number of possible upgrades) it makes sense to focus on those first.

There is a section[1] in the CISA repo which I missed originally that describes some of the challenges of implementing CISA/CISHA as a consensus change. A couple of things that stand out to me if this was attempted in the long term. One is that there would almost need to be two tiers of verification: verification for single signature key path spends where CISA, CISHA could be applied and verification for Taproot script paths where CISA, CISHA couldn't be applied. It could even be the case that a new output type is defined specifically for the CISA, CISHA use case where there is no access to a script path at all (i.e. where users don't have a need for anything other than a single signature spend path). With SegWit v0 (and today with SegWit v1) the intention is to get the entire community to move to the new output type. But there could be a long term future where you pick an output type depending on your use case. I recall that Mimblewimble only worked if scripting was ditched entirely and every spend was assumed to be a single signature spend.

Anyway...thanks for indulging me on the long term stuff :)

[0]: https://github.com/ElementsProject/cross-input-aggregation#sigagg-case-study-ln-channel-announcements

[1]: https://github.com/ElementsProject/cross-input-aggregation#integration-into-the-bitcoin-protocol

--
Michael Folkson
Email: michaelfolkson at protonmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3


------- Original Message -------
On Sunday, July 17th, 2022 at 21:45, Jonas Nick <jonasdnick at gmail.com> wrote:


> To be clear, whether "half aggregation needs a new output type or not" does not
> become clear in the draft BIP because it is out of scope. Half-aggregation has a
> few possible applications. The draft only specifies the cryptographic scheme.
>
> The StackExchange post you link to argues that CISA requires a new output type.
> The same argument applies to half aggregating signatures across transaction
> inputs (CISHA, if you will). The only difference to "full aggregation" is that
> the transaction signature is a single half-aggregate signature instead of a
> 64-byte signature. You're right that it's possible to do batch verification of
> Taproot output key spends (Schnorr signatures) and script spends (key tweaks).

From eric at voskuil.org  Wed Jul 20 14:35:52 2022
From: eric at voskuil.org (Eric Voskuil)
Date: Wed, 20 Jul 2022 07:35:52 -0700
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <S5JNFd70ygX_dYwpkCaUeePSndvofPAbkxEllvf4zxfe0iW7g8wR--JZAI74vVVOsU8IZnBJiv937cnef6whHvDZZF696jzeGv33FWLkRVE=@pointbiz.com>
References: <S5JNFd70ygX_dYwpkCaUeePSndvofPAbkxEllvf4zxfe0iW7g8wR--JZAI74vVVOsU8IZnBJiv937cnef6whHvDZZF696jzeGv33FWLkRVE=@pointbiz.com>
Message-ID: <34B2476E-E980-4C5F-AD5C-C3A661A412A4@voskuil.org>

If there?s no block reward, there?s no Bitcoin, so that?s moot. But setting that aside. The business model of the state is to preserve the reward it obtains from its own money. This is the reason for currency controls, which are common.

e

> On Jul 20, 2022, at 03:17, Peter via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?>And therefore this reduces to the simple fact that tx fees are what provides censorship resistance, whether you mine your own or others?.
> 
> 
> What's the business model of the person who mines with the intention to censor transactions when there's no block reward?
> 
> 
> 
> Regards
> 
> Peter Kroll
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From peter at coinkite.com  Wed Jul 20 13:31:21 2022
From: peter at coinkite.com (Peter (Coinkite Inc))
Date: Wed, 20 Jul 2022 09:31:21 -0400
Subject: [bitcoin-dev] Trying all address types in message signing
 verification (BIP)
In-Reply-To: <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>
References: <7QoRGux2ow375UP6-XXIF6kI_0tbt-RxKrXiyuDBWVWh6Shjia-ShKy_or5FK9u46KkPAvK2biaSe_x8fMWP0Q==@protonmail.internalid>
 <mailman.84940.1658205911.8511.bitcoin-dev@lists.linuxfoundation.org>
 <20220719104725.ppic7jy4ghfieeap@artanis>
 <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>
Message-ID: <YtgDqWSIbX8EJc3B@coinkite.com>

Hi Ali.

> This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.

COLDCARD makes signatures exacly like that, when told to sign with a segwit address:

    % ckcc msg -s Hello
    Hello                             
    bc1qzeacswvlulg0jngad9gmtkvdp9lwum42wwzdu5
    HxuuWQwjw0417fLV9L0kWbt7w9XOIWKhHMhjXhyXTczcSozGTXM4knqdISiYbbmqSRXqI5mNTWH9qkDoqZTpnPc=

Unfortunately, I do not know of any "verifiers" that will accept the above signature, but there is no alternative since the various BIP-322 proposals never gained wide acceptance.

Bitcoin Core does not support verifying that message, even though the UX makes it look possible. In effect segwit features never got implemented to that depth in Core. It's sad because the community is not maintaining core (Core?) features to the same depth as Satoshi did when he was active in the project.

> PS. I am pretty sure that there is a BIP for the original signing method - what is its number?

My understanding that the original approach was directly from Satoshi himself when the original client was written. It has never been codified in a BIP as far as I know.

A related issue the the "ascii armor" that is sometimes used. It's a little like RFC2440 <https://www.ietf.org/rfc/rfc2440.txt> but newline-treatment isn't defined well enough for good interoperability, in my personal experience.

So in summary... yes a "defacto" BIP is needed and useful to do, in my opinion. Then Core should be updated to support it as well.

---
@DocHEX  ||  Coinkite  ||  PGP: A3A31BAD 5A2A5B10


On Wed, Jul 20, 2022 at 04:10:09AM +0000, Ali Sherief wrote:
> [my third attempt at getting this message through. Surprisingly, I managed to send this at the second try with the correct SMTP, From, To and all, but maybe it was caught in GreyListing (protonmail).]
> 
> I was thinking about creating a BIP to address the lack of standardization for Segwit message signatures, but I want some advice before proceeding.
> 
> The current state of affairs is that the wallets that do support signing and verifying a bitcoin message can only sign legacy addresses. It is technically possible to sign and verify segwit addresses, since ECDSA only depends on the public key (hence why you need a private key to sign messages).
> 
> However, because there is no generally-accepted standard for signing segwit messages, the wallets that do support this feature simply insert the segwit address into the address field. Verification also only works using the procedure on that specific wallet software, if only because the conventional tools for verifying messages attempt to reconstruct a legacy address only.
> 
> This BIP is not going to enforce anything, it's just going to set guidelines for writing a message signing and verification procedure.
> 
> This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.
> 
> In summary, in the verification part, the following address hashing algorithms will be tried in sequence in an attempt to reconstruct the address in the signed message:
> - P2PKH (legacy address)
> - P2WPKH-P2SH (nested segwit)
> - P2WPKH with version from 0 to MAX_WITNESS_VERSION (covers native segwit with version 0 as well as future native segwit address types such as Taproot) - where MAX_WITNESS_VERSION is the maximum supported witness version by the bech32 encoding.
> 
> The verification procedure stops if any of these hashes yield the correct address, and fails if all of the above methods fail to reproduce the address in the signed message.
> 
> In the signing procedure, the only modification is the insertion of the segwit address in place of the legacy address in the signed message.
> 
> If this BIP is approved, it does not require any changes to existing signed messages, and the original sign/verify algorithms will continue to interoperate with this improved sign/verify algorithm, without any action necessary from the developers.
> 
> So as you can see, this is the entire framework of the BIP I plan to draft. There is no need for any auxilliary feature additions into this BIP. I just want to hear the mailing list's advice about how I should draft such a BIP.
> 
> - Ali
> 
> PS. I am pretty sure that there is a BIP for the original signing method - what is its number?
> 


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220720/c7ddfb46/attachment-0001.sig>

From antoine.riard at gmail.com  Wed Jul 20 20:42:42 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Wed, 20 Jul 2022 16:42:42 -0400
Subject: [bitcoin-dev] On a new community process to specify covenants
Message-ID: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>

Hi,

Discussions on covenants have been prolific and intense on this mailing
list and within the wider Bitcoin technical circles, I believe however
without succeeding to reach consensus on any new set of contracting
primitives satisfying the requirements of known covenant-enabled use-cases.
I think that's a fact to deplore as covenants would not only offer vast
extensions of the capabilities of Bitcoin as a system, i.e enabling new
types of multi-party contract protocols. But also empowering Bitcoin on its
fundamental value propositions of store of value (e.g by making vaults more
flexible) and payment system (e.g by making realistic channel
factories/payment pools).

If we retain as a covenant definition, a spending constraint restricting
the transaction to which the spent UTXO can be spent, and enabling to
program contracts/protocols at the transaction-level instead of the
script-level, the list of Script primitives proposed during the last years
has grown large : ANYPREVOUT [0], CHECKSIGFROMSTACK [1],
CHECK_TEMPLATE_VERIFY [2], TAPROOT_LEAF_UPDATE_VERIFY [3], TXHASH [4],
PUSHTXDATA [5], CAT [6], EVICT [7], Grafroot delegation [8], SIGHASH_GROUP
[9], MERKLEBRANCHVERIFY [10] and more than I can't remember. Of course, all
the listed primitives are at different states of formalization, some
already fully fleshed-out in BIPs, other still ideas on whiteboard, yet
they all extend the range of workable multi-party contract protocols.

Indeed this range has grown wild. Without aiming to be exhaustive (I'm
certainly missing some interesting proposals lost in the abyss of
bitcointalk.org), we can mention the following use-cases: multi-party
stateful contracts [11], congestion trees [12], payment pools [13], "eltoo"
layered commitments [14], programmable vaults [15], multi-events contracts
[16], blockchain-as-oracle bets [17], spacechains [18], trustless
collateral lending [19], ...

Minding all those facts, I would say the task of technical evaluation of
any covenant proposal sounds at least two fold. There is first reasoning
about the enabled protocols on a range of criterias such as scalability,
efficiency, simplicity, extensibility, robustness, data confidentiality,
etc. Asking questions like what are the interactions between layers, if any
? Or how robust is the protocol, not just interactivity failure between
 participant nodes but in the face of mempools spikes or internet
disruption ? Or if the performance is still acceptable on shared resources
like blockspace or routing tables if everyone is using this protocol ? Or
if the protocol minimizes regulatory attack surface or centralization
vectors ?

Though once this step is achieved, there is still more reasoning work to
evaluate how good a fit is a proposed Script primitive, the
efficiency/simplicity/ease to use trade-offs, but also if there are no
functionality overlap or hard constraints on the use-cases design
themselves or evolvability w.rt future Script extensions or generalization
of the opcode operations.

Moreover, if you would like your evaluation of a covenant proposal to be
complete, I don't believe you can squeeze the implications with the mempool
rules and combination with any consistent fee-bumping strategy. To say
things politely, those areas have been a quagmire of vulnerabilities,
attacks and defects for second-layers Bitcoin protocols during the last
years [20].

Considering the abundant problem-space offered by covenants, I believe
there is a reasonable groundwork to pursue in building the use-cases
understanding (e.g prototype, pseudo-specification, documentation, ...) and
building consensus on the framework of criterias on which to evaluate them
[21]. It might raise a really high bar for any covenant proposal compared
to previous softforks, however I think it would adequately reflect the
growth in Bitcoin complexity and funds at stakes during the last years.

Moving towards this outcome, I would like to propose a new covenant open
specification process, in the same spirit as we have with the BOLTs or
dlcspecs. We would have regular meetings (biweekly/monthly ?), an open
agenda where topics of discussion can be pinned in advance and
documentation artifacts would be built with time driven by consensus (e.g
1st phase could be to collect, pseudo-specify and find champion(s) for
known use-cases ?) and no timeframe. Starting date could be September /
October / November (later, 2023 ?), giving time for anyone interested in
such a covenant process to allocate development and contribution bandwidth
in function of their involvement interest.

Learning from the good but specially from the bad with setting up the L2
onchain support meetings last year, I think it would be better to keep the
agenda open, loose and free as much we can in a "burn-the-roadmap" spirit,
avoiding to create a sense of commitment or perceived signaling in the
process participants towards any covenant solution. I would guess things to
be experimental and evolutionary and folks to spend the first meetings
actually to express what they would like the covenant process to be about
(and yes that means if you're a domain expert and you find the pace of
things too slow sometimes, you have to learn to handle your own
frustration...).

In a "decentralize-everything" fashion, I believe it would be good to have
rotating meeting chairs and multiple covenant documentation archivists. I'm
super happy to spend the time and energy bootstrapping well such covenant
process effort, though as it's Bitcoin learn to decentralize yourself.

I'm really curious what the outcome of such a covenant process would look
like. We might end up concluding that complex covenants are too unsafe by
enabling sophisticated MEV-attacks against LN [22]. Or even if there is an
emergent technical consensus, it doesn't mean there is a real market
interest for such covenant solutions. That said, I'm not sure if it's
really a subject of concern when you're reasoning as a scientist/engineer
and you value technical statements in terms of accuracy, systematic
relevance and intrinsic interest.

Overall, my motivation to kick-start such a process stays in the fact that
covenants are required building blocks to enable scalable payments pools
design like CoinPool. I believe payments pools are a) cool and b) a good
shot at scaling Bitcoin as a payment system once we have reached
scalability limits of Lightning, still under the same security model for
users. However, as a community we might sense it's not the good timing for
a covenant process. I'm really fine with that outcome as there are still
holes to patch in LN to keep me busy enough for the coming years.

Zooming out, I believe with any discussion about covenants or other soft
forks, the hard part isn't about coming up with the best technical solution
to a set of problems but in the iterative process where all voices are
listened to reach (or not) consensus on what is actually meant by "best"
and if the problems are accurate. The real physics of Bitcoin is the
physics of people. It's a work of patience.

Anyways, eager to collect feedbacks on what the ideal covenant
specification process looks like. As usual, all opinions and mistakes are
my own.

Cheers,
Antoine

[0] https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki
[1] https://bitcoinops.org/en/topics/op_checksigfromstack/
[2] https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki
[3]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html
[4]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019813.html
[5] https://github.com/jl2012/bips/blob/vault/bip-0ZZZ.mediawiki
[6] https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298
[7]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019926.html
[8]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html
[9]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019243.html
[10] https://github.com/bitcoin/bips/blob/master/bip-0116.mediawiki
[11]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019808.html
[12]
https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#Congestion_Controlled_Transactions
[13]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017964.html
[14]
https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html
[15] http://fc17.ifca.ai/bitcoin/papers/bitcoin17-final28.pdf
[16]
https://github.com/ariard/talk-slides/blob/master/advanced-contracts.pdf
[17] https://blog.bitmex.com/taproot-you-betcha/
[18]
https://gist.github.com/RubenSomsen/c9f0a92493e06b0e29acced61ca9f49a#spacechains
[19] https://gist.github.com/RubenSomsen/bf08664b3d174551ab7361ffb835fcef
[20] https://github.com/jamesob/mempool.work
[21] https://github.com/bitcoinops/bitcoinops.github.io/pull/806
[22] https://blog.bitmex.com/txwithhold-smart-contracts/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220720/146ede32/attachment-0001.html>

From gsanders87 at gmail.com  Wed Jul 20 21:50:53 2022
From: gsanders87 at gmail.com (Greg Sanders)
Date: Wed, 20 Jul 2022 17:50:53 -0400
Subject: [bitcoin-dev] Trying all address types in message signing
 verification (BIP)
In-Reply-To: <YtgDqWSIbX8EJc3B@coinkite.com>
References: <7QoRGux2ow375UP6-XXIF6kI_0tbt-RxKrXiyuDBWVWh6Shjia-ShKy_or5FK9u46KkPAvK2biaSe_x8fMWP0Q==@protonmail.internalid>
 <mailman.84940.1658205911.8511.bitcoin-dev@lists.linuxfoundation.org>
 <20220719104725.ppic7jy4ghfieeap@artanis>
 <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>
 <YtgDqWSIbX8EJc3B@coinkite.com>
Message-ID: <CAB3F3Du0OXcUvi6h8v0VZEj4cG24DJs04Vho8sM4Frhdhj5DrA@mail.gmail.com>

Please see BIP322
https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki

On Wed, Jul 20, 2022, 5:46 PM Peter (Coinkite Inc) via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi Ali.
>
> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My
> proposal is simply going to standardize the practice of placing the segwit
> address into the address field, and does not require alterations to the
> message signing format like those BIPs.
>
> COLDCARD makes signatures exacly like that, when told to sign with a
> segwit address:
>
>     % ckcc msg -s Hello
>     Hello
>     bc1qzeacswvlulg0jngad9gmtkvdp9lwum42wwzdu5
>
> HxuuWQwjw0417fLV9L0kWbt7w9XOIWKhHMhjXhyXTczcSozGTXM4knqdISiYbbmqSRXqI5mNTWH9qkDoqZTpnPc=
>
> Unfortunately, I do not know of any "verifiers" that will accept the above
> signature, but there is no alternative since the various BIP-322 proposals
> never gained wide acceptance.
>
> Bitcoin Core does not support verifying that message, even though the UX
> makes it look possible. In effect segwit features never got implemented to
> that depth in Core. It's sad because the community is not maintaining core
> (Core?) features to the same depth as Satoshi did when he was active in the
> project.
>
> > PS. I am pretty sure that there is a BIP for the original signing method
> - what is its number?
>
> My understanding that the original approach was directly from Satoshi
> himself when the original client was written. It has never been codified in
> a BIP as far as I know.
>
> A related issue the the "ascii armor" that is sometimes used. It's a
> little like RFC2440 <https://www.ietf.org/rfc/rfc2440.txt> but
> newline-treatment isn't defined well enough for good interoperability, in
> my personal experience.
>
> So in summary... yes a "defacto" BIP is needed and useful to do, in my
> opinion. Then Core should be updated to support it as well.
>
> ---
> @DocHEX  ||  Coinkite  ||  PGP: A3A31BAD 5A2A5B10
>
>
> On Wed, Jul 20, 2022 at 04:10:09AM +0000, Ali Sherief wrote:
> > [my third attempt at getting this message through. Surprisingly, I
> managed to send this at the second try with the correct SMTP, From, To and
> all, but maybe it was caught in GreyListing (protonmail).]
> >
> > I was thinking about creating a BIP to address the lack of
> standardization for Segwit message signatures, but I want some advice
> before proceeding.
> >
> > The current state of affairs is that the wallets that do support signing
> and verifying a bitcoin message can only sign legacy addresses. It is
> technically possible to sign and verify segwit addresses, since ECDSA only
> depends on the public key (hence why you need a private key to sign
> messages).
> >
> > However, because there is no generally-accepted standard for signing
> segwit messages, the wallets that do support this feature simply insert the
> segwit address into the address field. Verification also only works using
> the procedure on that specific wallet software, if only because the
> conventional tools for verifying messages attempt to reconstruct a legacy
> address only.
> >
> > This BIP is not going to enforce anything, it's just going to set
> guidelines for writing a message signing and verification procedure.
> >
> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My
> proposal is simply going to standardize the practice of placing the segwit
> address into the address field, and does not require alterations to the
> message signing format like those BIPs.
> >
> > In summary, in the verification part, the following address hashing
> algorithms will be tried in sequence in an attempt to reconstruct the
> address in the signed message:
> > - P2PKH (legacy address)
> > - P2WPKH-P2SH (nested segwit)
> > - P2WPKH with version from 0 to MAX_WITNESS_VERSION (covers native
> segwit with version 0 as well as future native segwit address types such as
> Taproot) - where MAX_WITNESS_VERSION is the maximum supported witness
> version by the bech32 encoding.
> >
> > The verification procedure stops if any of these hashes yield the
> correct address, and fails if all of the above methods fail to reproduce
> the address in the signed message.
> >
> > In the signing procedure, the only modification is the insertion of the
> segwit address in place of the legacy address in the signed message.
> >
> > If this BIP is approved, it does not require any changes to existing
> signed messages, and the original sign/verify algorithms will continue to
> interoperate with this improved sign/verify algorithm, without any action
> necessary from the developers.
> >
> > So as you can see, this is the entire framework of the BIP I plan to
> draft. There is no need for any auxilliary feature additions into this BIP.
> I just want to hear the mailing list's advice about how I should draft such
> a BIP.
> >
> > - Ali
> >
> > PS. I am pretty sure that there is a BIP for the original signing method
> - what is its number?
> >
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220720/917426c4/attachment.html>

From ali at notatether.com  Thu Jul 21 05:36:11 2022
From: ali at notatether.com (Ali Sherief)
Date: Thu, 21 Jul 2022 05:36:11 +0000
Subject: [bitcoin-dev] Trying all address types in message signing
	verification (BIP)
In-Reply-To: <YtgDqWSIbX8EJc3B@coinkite.com>
References: <7QoRGux2ow375UP6-XXIF6kI_0tbt-RxKrXiyuDBWVWh6Shjia-ShKy_or5FK9u46KkPAvK2biaSe_x8fMWP0Q==@protonmail.internalid>
 <mailman.84940.1658205911.8511.bitcoin-dev@lists.linuxfoundation.org>
 <20220719104725.ppic7jy4ghfieeap@artanis>
 <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>
 <YtgDqWSIbX8EJc3B@coinkite.com>
Message-ID: <KS9u6Zywp61RSBB0mQd0u9ULqU-tg90_VF5VYi8bOb1b2KpJ7SCdunNDbYz3XYnsykahVLBeSocwoabj9xbiI0k7gJIJtuxCJAtSFzTux-8=@notatether.com>

Hi Peter,

> COLDCARD makes signatures exacly like that, when told to sign with a segwit address:
>
> % ckcc msg -s Hello
> Hello
> bc1qzeacswvlulg0jngad9gmtkvdp9lwum42wwzdu5
> HxuuWQwjw0417fLV9L0kWbt7w9XOIWKhHMhjXhyXTczcSozGTXM4knqdISiYbbmqSRXqI5mNTWH9qkDoqZTpnPc=
>
> Unfortunately, I do not know of any "verifiers" that will accept the above signature, but there is no alternative since the various BIP-322 proposals never gained wide acceptance.

This is largely why I avoided basing my idea off of BIP-322. Not only does a BIP has a higher chance of acceptance the less aspects it modifies, but I feel that although its not urgent (such as, for example, the segwit deployment BIP), this BIP should be made as soon as possible. It's also why I avoided specifying anything about testnet or regtest address singing - thankfully, I have yet to see ayone sign messages from these networks.

> Bitcoin Core does not support verifying that message, even though the UX makes it look possible. In effect segwit features never got implemented to that depth in Core. It's sad because the community is not maintaining core (Core?) features to the same depth as Satoshi did when he was active in the project.

Yes, if it looks possible from the UX, chances are that its very straightforward to implement in code. That's why I'm not expecting any problems when I finally draft the BIP.

In my original plans, I said the verifier was going to try Legacy, Nested Segwit, and Native Segwit encodings in sequence, but now, I think this step-by-step procedure is unnecessary. The correct encoding can be guessed by looking at the address prefix:

- If it starts with a "1", attempt the Legacy encoding. (Fail verification if it does not yield the correct address).
- If it starts with a "3", attempt the Nested Segwit encoding. (Fail verification if it does not yield the correct address).
- If it starts with a "bc1", fetch the version number from the immediately following character, and attempt the Native Segwit encoding with that version number. (Fail verification if it does not yield the correct address).
- If it starts with any other prefix, fail verification.

In my opinion, the signing and verification processes have to be precisely defined in the BIP - to be exactly the same as it presently is, and then these additions - to ensure that the BIP clearly deescribes how signing and verification should be implemented today - in addition to "tomorrow" when the BIP is widely accepted.

> So in summary... yes a "defacto" BIP is needed and useful to do, in my opinion. Then Core should be updated to support it as well.

Since I already plan on adding a Python example for the signing and verification process, it will be a straightforward process to translate it to C++ without even minor interface/implementation difficulties.

Since I can't think of any more ways to streamline the BIP, I'm going to start a draft along these principles shortly.

- Ali

On Wednesday, July 20th, 2022 at 1:31 PM, Peter (Coinkite Inc) <peter at coinkite.com> wrote:


> Hi Ali.
>
> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.
>
>
> COLDCARD makes signatures exacly like that, when told to sign with a segwit address:
>
> % ckcc msg -s Hello
> Hello
> bc1qzeacswvlulg0jngad9gmtkvdp9lwum42wwzdu5
> HxuuWQwjw0417fLV9L0kWbt7w9XOIWKhHMhjXhyXTczcSozGTXM4knqdISiYbbmqSRXqI5mNTWH9qkDoqZTpnPc=
>
> Unfortunately, I do not know of any "verifiers" that will accept the above signature, but there is no alternative since the various BIP-322 proposals never gained wide acceptance.
>
> Bitcoin Core does not support verifying that message, even though the UX makes it look possible. In effect segwit features never got implemented to that depth in Core. It's sad because the community is not maintaining core (Core?) features to the same depth as Satoshi did when he was active in the project.
>
> > PS. I am pretty sure that there is a BIP for the original signing method - what is its number?
>
>
> My understanding that the original approach was directly from Satoshi himself when the original client was written. It has never been codified in a BIP as far as I know.
>
> A related issue the the "ascii armor" that is sometimes used. It's a little like RFC2440 https://www.ietf.org/rfc/rfc2440.txt but newline-treatment isn't defined well enough for good interoperability, in my personal experience.
>
>
> So in summary... yes a "defacto" BIP is needed and useful to do, in my opinion. Then Core should be updated to support it as well.
>
> ---
> @DocHEX || Coinkite || PGP: A3A31BAD 5A2A5B10
>
>
> On Wed, Jul 20, 2022 at 04:10:09AM +0000, Ali Sherief wrote:
>
> > [my third attempt at getting this message through. Surprisingly, I managed to send this at the second try with the correct SMTP, From, To and all, but maybe it was caught in GreyListing (protonmail).]
> >
> > I was thinking about creating a BIP to address the lack of standardization for Segwit message signatures, but I want some advice before proceeding.
> >
> > The current state of affairs is that the wallets that do support signing and verifying a bitcoin message can only sign legacy addresses. It is technically possible to sign and verify segwit addresses, since ECDSA only depends on the public key (hence why you need a private key to sign messages).
> >
> > However, because there is no generally-accepted standard for signing segwit messages, the wallets that do support this feature simply insert the segwit address into the address field. Verification also only works using the procedure on that specific wallet software, if only because the conventional tools for verifying messages attempt to reconstruct a legacy address only.
> >
> > This BIP is not going to enforce anything, it's just going to set guidelines for writing a message signing and verification procedure.
> >
> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.
> >
> > In summary, in the verification part, the following address hashing algorithms will be tried in sequence in an attempt to reconstruct the address in the signed message:
> > - P2PKH (legacy address)
> > - P2WPKH-P2SH (nested segwit)
> > - P2WPKH with version from 0 to MAX_WITNESS_VERSION (covers native segwit with version 0 as well as future native segwit address types such as Taproot) - where MAX_WITNESS_VERSION is the maximum supported witness version by the bech32 encoding.
> >
> > The verification procedure stops if any of these hashes yield the correct address, and fails if all of the above methods fail to reproduce the address in the signed message.
> >
> > In the signing procedure, the only modification is the insertion of the segwit address in place of the legacy address in the signed message.
> >
> > If this BIP is approved, it does not require any changes to existing signed messages, and the original sign/verify algorithms will continue to interoperate with this improved sign/verify algorithm, without any action necessary from the developers.
> >
> > So as you can see, this is the entire framework of the BIP I plan to draft. There is no need for any auxilliary feature additions into this BIP. I just want to hear the mailing list's advice about how I should draft such a BIP.
> >
> > - Ali
> >
> > PS. I am pretty sure that there is a BIP for the original signing method - what is its number?



Owner and administrator of https://notatether.com - Run Tools & Apps Online or Buy an API Key


------- Original Message -------
On Wednesday, July 20th, 2022 at 1:31 PM, Peter (Coinkite Inc) <peter at coinkite.com> wrote:


> Hi Ali.
>
> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.
>
>
> COLDCARD makes signatures exacly like that, when told to sign with a segwit address:
>
> % ckcc msg -s Hello
> Hello
> bc1qzeacswvlulg0jngad9gmtkvdp9lwum42wwzdu5
> HxuuWQwjw0417fLV9L0kWbt7w9XOIWKhHMhjXhyXTczcSozGTXM4knqdISiYbbmqSRXqI5mNTWH9qkDoqZTpnPc=
>
> Unfortunately, I do not know of any "verifiers" that will accept the above signature, but there is no alternative since the various BIP-322 proposals never gained wide acceptance.
>
> Bitcoin Core does not support verifying that message, even though the UX makes it look possible. In effect segwit features never got implemented to that depth in Core. It's sad because the community is not maintaining core (Core?) features to the same depth as Satoshi did when he was active in the project.
>
> > PS. I am pretty sure that there is a BIP for the original signing method - what is its number?
>
>
> My understanding that the original approach was directly from Satoshi himself when the original client was written. It has never been codified in a BIP as far as I know.
>
> A related issue the the "ascii armor" that is sometimes used. It's a little like RFC2440 https://www.ietf.org/rfc/rfc2440.txt but newline-treatment isn't defined well enough for good interoperability, in my personal experience.
>
>
> So in summary... yes a "defacto" BIP is needed and useful to do, in my opinion. Then Core should be updated to support it as well.
>
> ---
> @DocHEX || Coinkite || PGP: A3A31BAD 5A2A5B10
>
>
> On Wed, Jul 20, 2022 at 04:10:09AM +0000, Ali Sherief wrote:
>
> > [my third attempt at getting this message through. Surprisingly, I managed to send this at the second try with the correct SMTP, From, To and all, but maybe it was caught in GreyListing (protonmail).]
> >
> > I was thinking about creating a BIP to address the lack of standardization for Segwit message signatures, but I want some advice before proceeding.
> >
> > The current state of affairs is that the wallets that do support signing and verifying a bitcoin message can only sign legacy addresses. It is technically possible to sign and verify segwit addresses, since ECDSA only depends on the public key (hence why you need a private key to sign messages).
> >
> > However, because there is no generally-accepted standard for signing segwit messages, the wallets that do support this feature simply insert the segwit address into the address field. Verification also only works using the procedure on that specific wallet software, if only because the conventional tools for verifying messages attempt to reconstruct a legacy address only.
> >
> > This BIP is not going to enforce anything, it's just going to set guidelines for writing a message signing and verification procedure.
> >
> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.
> >
> > In summary, in the verification part, the following address hashing algorithms will be tried in sequence in an attempt to reconstruct the address in the signed message:
> > - P2PKH (legacy address)
> > - P2WPKH-P2SH (nested segwit)
> > - P2WPKH with version from 0 to MAX_WITNESS_VERSION (covers native segwit with version 0 as well as future native segwit address types such as Taproot) - where MAX_WITNESS_VERSION is the maximum supported witness version by the bech32 encoding.
> >
> > The verification procedure stops if any of these hashes yield the correct address, and fails if all of the above methods fail to reproduce the address in the signed message.
> >
> > In the signing procedure, the only modification is the insertion of the segwit address in place of the legacy address in the signed message.
> >
> > If this BIP is approved, it does not require any changes to existing signed messages, and the original sign/verify algorithms will continue to interoperate with this improved sign/verify algorithm, without any action necessary from the developers.
> >
> > So as you can see, this is the entire framework of the BIP I plan to draft. There is no need for any auxilliary feature additions into this BIP. I just want to hear the mailing list's advice about how I should draft such a BIP.
> >
> > - Ali
> >
> > PS. I am pretty sure that there is a BIP for the original signing method - what is its number?

From craigraw at gmail.com  Thu Jul 21 07:06:08 2022
From: craigraw at gmail.com (Craig Raw)
Date: Thu, 21 Jul 2022 09:06:08 +0200
Subject: [bitcoin-dev] Trying all address types in message signing
 verification (BIP)
In-Reply-To: <CAB3F3Du0OXcUvi6h8v0VZEj4cG24DJs04Vho8sM4Frhdhj5DrA@mail.gmail.com>
References: <7QoRGux2ow375UP6-XXIF6kI_0tbt-RxKrXiyuDBWVWh6Shjia-ShKy_or5FK9u46KkPAvK2biaSe_x8fMWP0Q==@protonmail.internalid>
 <mailman.84940.1658205911.8511.bitcoin-dev@lists.linuxfoundation.org>
 <20220719104725.ppic7jy4ghfieeap@artanis>
 <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>
 <YtgDqWSIbX8EJc3B@coinkite.com>
 <CAB3F3Du0OXcUvi6h8v0VZEj4cG24DJs04Vho8sM4Frhdhj5DrA@mail.gmail.com>
Message-ID: <CAPR5oBMF0WdzDFnytLJjE205KUYR_WGVUxJ5AjwU-0KZgwvkOA@mail.gmail.com>

> Unfortunately, I do not know of any "verifiers" that will accept the
above signature

Sparrow verifies this signature.

The approach used is to convert the message and signature to a public key,
trying first BIP137 and then the approach used by Electrum (they differ in
treatment of the signature header for segwit P2SH). The script type is
extracted from the provided address and compared against the address
constructed with the public key using the same script type. i.e. There is
no need to iterate through all script types, since the script type is
implicitly provided in the address.

Craig

On Wed, Jul 20, 2022 at 11:51 PM Greg Sanders via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Please see BIP322
> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki
>
> On Wed, Jul 20, 2022, 5:46 PM Peter (Coinkite Inc) via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi Ali.
>>
>> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My
>> proposal is simply going to standardize the practice of placing the segwit
>> address into the address field, and does not require alterations to the
>> message signing format like those BIPs.
>>
>> COLDCARD makes signatures exacly like that, when told to sign with a
>> segwit address:
>>
>>     % ckcc msg -s Hello
>>     Hello
>>     bc1qzeacswvlulg0jngad9gmtkvdp9lwum42wwzdu5
>>
>> HxuuWQwjw0417fLV9L0kWbt7w9XOIWKhHMhjXhyXTczcSozGTXM4knqdISiYbbmqSRXqI5mNTWH9qkDoqZTpnPc=
>>
>> Unfortunately, I do not know of any "verifiers" that will accept the
>> above signature, but there is no alternative since the various BIP-322
>> proposals never gained wide acceptance.
>>
>> Bitcoin Core does not support verifying that message, even though the UX
>> makes it look possible. In effect segwit features never got implemented to
>> that depth in Core. It's sad because the community is not maintaining core
>> (Core?) features to the same depth as Satoshi did when he was active in the
>> project.
>>
>> > PS. I am pretty sure that there is a BIP for the original signing
>> method - what is its number?
>>
>> My understanding that the original approach was directly from Satoshi
>> himself when the original client was written. It has never been codified in
>> a BIP as far as I know.
>>
>> A related issue the the "ascii armor" that is sometimes used. It's a
>> little like RFC2440 <https://www.ietf.org/rfc/rfc2440.txt> but
>> newline-treatment isn't defined well enough for good interoperability, in
>> my personal experience.
>>
>> So in summary... yes a "defacto" BIP is needed and useful to do, in my
>> opinion. Then Core should be updated to support it as well.
>>
>> ---
>> @DocHEX  ||  Coinkite  ||  PGP: A3A31BAD 5A2A5B10
>>
>>
>> On Wed, Jul 20, 2022 at 04:10:09AM +0000, Ali Sherief wrote:
>> > [my third attempt at getting this message through. Surprisingly, I
>> managed to send this at the second try with the correct SMTP, From, To and
>> all, but maybe it was caught in GreyListing (protonmail).]
>> >
>> > I was thinking about creating a BIP to address the lack of
>> standardization for Segwit message signatures, but I want some advice
>> before proceeding.
>> >
>> > The current state of affairs is that the wallets that do support
>> signing and verifying a bitcoin message can only sign legacy addresses. It
>> is technically possible to sign and verify segwit addresses, since ECDSA
>> only depends on the public key (hence why you need a private key to sign
>> messages).
>> >
>> > However, because there is no generally-accepted standard for signing
>> segwit messages, the wallets that do support this feature simply insert the
>> segwit address into the address field. Verification also only works using
>> the procedure on that specific wallet software, if only because the
>> conventional tools for verifying messages attempt to reconstruct a legacy
>> address only.
>> >
>> > This BIP is not going to enforce anything, it's just going to set
>> guidelines for writing a message signing and verification procedure.
>> >
>> > This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My
>> proposal is simply going to standardize the practice of placing the segwit
>> address into the address field, and does not require alterations to the
>> message signing format like those BIPs.
>> >
>> > In summary, in the verification part, the following address hashing
>> algorithms will be tried in sequence in an attempt to reconstruct the
>> address in the signed message:
>> > - P2PKH (legacy address)
>> > - P2WPKH-P2SH (nested segwit)
>> > - P2WPKH with version from 0 to MAX_WITNESS_VERSION (covers native
>> segwit with version 0 as well as future native segwit address types such as
>> Taproot) - where MAX_WITNESS_VERSION is the maximum supported witness
>> version by the bech32 encoding.
>> >
>> > The verification procedure stops if any of these hashes yield the
>> correct address, and fails if all of the above methods fail to reproduce
>> the address in the signed message.
>> >
>> > In the signing procedure, the only modification is the insertion of the
>> segwit address in place of the legacy address in the signed message.
>> >
>> > If this BIP is approved, it does not require any changes to existing
>> signed messages, and the original sign/verify algorithms will continue to
>> interoperate with this improved sign/verify algorithm, without any action
>> necessary from the developers.
>> >
>> > So as you can see, this is the entire framework of the BIP I plan to
>> draft. There is no need for any auxilliary feature additions into this BIP.
>> I just want to hear the mailing list's advice about how I should draft such
>> a BIP.
>> >
>> > - Ali
>> >
>> > PS. I am pretty sure that there is a BIP for the original signing
>> method - what is its number?
>> >
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220721/8ad06d81/attachment.html>

From ali at notatether.com  Fri Jul 22 15:20:24 2022
From: ali at notatether.com (Ali Sherief)
Date: Fri, 22 Jul 2022 15:20:24 +0000
Subject: [bitcoin-dev] Trying all address types in message signing
	verification (BIP)
In-Reply-To: <CAPR5oBMF0WdzDFnytLJjE205KUYR_WGVUxJ5AjwU-0KZgwvkOA@mail.gmail.com>
References: <7QoRGux2ow375UP6-XXIF6kI_0tbt-RxKrXiyuDBWVWh6Shjia-ShKy_or5FK9u46KkPAvK2biaSe_x8fMWP0Q==@protonmail.internalid>
 <mailman.84940.1658205911.8511.bitcoin-dev@lists.linuxfoundation.org>
 <20220719104725.ppic7jy4ghfieeap@artanis>
 <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>
 <YtgDqWSIbX8EJc3B@coinkite.com>
 <CAB3F3Du0OXcUvi6h8v0VZEj4cG24DJs04Vho8sM4Frhdhj5DrA@mail.gmail.com>
 <CAPR5oBMF0WdzDFnytLJjE205KUYR_WGVUxJ5AjwU-0KZgwvkOA@mail.gmail.com>
Message-ID: <q6N62spppsjeIhJ14mE_ZwBkCzmsOzbS-hvvkwBWuRr-XeTw1Eqs9TchrSZZ11yr52Gl8nCNRNEAynadCHgTUCfM5JE_dTr4XpG_LMIw-bM=@notatether.com>

Well, if there are wallets that are already verifying BIP137 signatures, a universal BIP that encompasses all signatures would also have to check for BIP137 signatures obviously. Can't have an all-encompassing BIP that excludes some signature types.

Fortunately, as is the case for my original proposal, only the verification algorithm needs to be adjusted to identify BIP137 signatures. The signing part can just place the address and whatever signature it makes inside the message.

I have studied BIP137 today and it looks like it only changes the signature payload, not the address, so any BIP made to address this problem must also take into account that the signature may be in different formats.

Does anyone know if BIP322 is being used in any wallet, for reference?

On Thursday, July 21st, 2022 at 7:06 AM, Craig Raw <craigraw at gmail.com> wrote:

>> Unfortunately, I do not know of any "verifiers" that will accept the above signature
>
> Sparrow verifies this signature.
>
> The approach used is to convert the message and signature to a public key, trying first BIP137 and then the approach used by Electrum (they differ in treatment of the signature header for segwit P2SH). The script type is extracted from the provided address and compared against the address constructed with the public key using the same script type. i.e. There is no need to iterate through all script types, since the script type is implicitly provided in the address.
>
> Craig
>
> On Wed, Jul 20, 2022 at 11:51 PM Greg Sanders via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Please see BIP322 https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki
>>
>> On Wed, Jul 20, 2022, 5:46 PM Peter (Coinkite Inc) via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> Hi Ali.
>>>
>>>> This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.
>>>
>>> COLDCARD makes signatures exacly like that, when told to sign with a segwit address:
>>>
>>> % ckcc msg -s Hello
>>> Hello
>>> bc1qzeacswvlulg0jngad9gmtkvdp9lwum42wwzdu5
>>> HxuuWQwjw0417fLV9L0kWbt7w9XOIWKhHMhjXhyXTczcSozGTXM4knqdISiYbbmqSRXqI5mNTWH9qkDoqZTpnPc=
>>>
>>> Unfortunately, I do not know of any "verifiers" that will accept the above signature, but there is no alternative since the various BIP-322 proposals never gained wide acceptance.
>>>
>>> Bitcoin Core does not support verifying that message, even though the UX makes it look possible. In effect segwit features never got implemented to that depth in Core. It's sad because the community is not maintaining core (Core?) features to the same depth as Satoshi did when he was active in the project.
>>>
>>>> PS. I am pretty sure that there is a BIP for the original signing method - what is its number?
>>>
>>> My understanding that the original approach was directly from Satoshi himself when the original client was written. It has never been codified in a BIP as far as I know.
>>>
>>> A related issue the the "ascii armor" that is sometimes used. It's a little like RFC2440 <https://www.ietf.org/rfc/rfc2440.txt> but newline-treatment isn't defined well enough for good interoperability, in my personal experience.
>>>
>>> So in summary... yes a "defacto" BIP is needed and useful to do, in my opinion. Then Core should be updated to support it as well.
>>>
>>> ---
>>> @DocHEX || Coinkite || PGP: A3A31BAD 5A2A5B10
>>>
>>> On Wed, Jul 20, 2022 at 04:10:09AM +0000, Ali Sherief wrote:
>>>> [my third attempt at getting this message through. Surprisingly, I managed to send this at the second try with the correct SMTP, From, To and all, but maybe it was caught in GreyListing (protonmail).]
>>>>
>>>> I was thinking about creating a BIP to address the lack of standardization for Segwit message signatures, but I want some advice before proceeding.
>>>>
>>>> The current state of affairs is that the wallets that do support signing and verifying a bitcoin message can only sign legacy addresses. It is technically possible to sign and verify segwit addresses, since ECDSA only depends on the public key (hence why you need a private key to sign messages).
>>>>
>>>> However, because there is no generally-accepted standard for signing segwit messages, the wallets that do support this feature simply insert the segwit address into the address field. Verification also only works using the procedure on that specific wallet software, if only because the conventional tools for verifying messages attempt to reconstruct a legacy address only.
>>>>
>>>> This BIP is not going to enforce anything, it's just going to set guidelines for writing a message signing and verification procedure.
>>>>
>>>> This BIP does not replace, supersede, or obsolete BIPs 173 or 322. My proposal is simply going to standardize the practice of placing the segwit address into the address field, and does not require alterations to the message signing format like those BIPs.
>>>>
>>>> In summary, in the verification part, the following address hashing algorithms will be tried in sequence in an attempt to reconstruct the address in the signed message:
>>>> - P2PKH (legacy address)
>>>> - P2WPKH-P2SH (nested segwit)
>>>> - P2WPKH with version from 0 to MAX_WITNESS_VERSION (covers native segwit with version 0 as well as future native segwit address types such as Taproot) - where MAX_WITNESS_VERSION is the maximum supported witness version by the bech32 encoding.
>>>>
>>>> The verification procedure stops if any of these hashes yield the correct address, and fails if all of the above methods fail to reproduce the address in the signed message.
>>>>
>>>> In the signing procedure, the only modification is the insertion of the segwit address in place of the legacy address in the signed message.
>>>>
>>>> If this BIP is approved, it does not require any changes to existing signed messages, and the original sign/verify algorithms will continue to interoperate with this improved sign/verify algorithm, without any action necessary from the developers.
>>>>
>>>> So as you can see, this is the entire framework of the BIP I plan to draft. There is no need for any auxilliary feature additions into this BIP. I just want to hear the mailing list's advice about how I should draft such a BIP.
>>>>
>>>> - Ali
>>>>
>>>> PS. I am pretty sure that there is a BIP for the original signing method - what is its number?
>>>>
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220722/b8b3889f/attachment.html>

From bitcoin-dev at rgrant.org  Sat Jul 23 04:28:08 2022
From: bitcoin-dev at rgrant.org (Ryan Grant)
Date: Sat, 23 Jul 2022 04:28:08 +0000
Subject: [bitcoin-dev] Trying all address types in message signing
 verification (BIP)
In-Reply-To: <YtgDqWSIbX8EJc3B@coinkite.com>
References: <7QoRGux2ow375UP6-XXIF6kI_0tbt-RxKrXiyuDBWVWh6Shjia-ShKy_or5FK9u46KkPAvK2biaSe_x8fMWP0Q==@protonmail.internalid>
 <mailman.84940.1658205911.8511.bitcoin-dev@lists.linuxfoundation.org>
 <20220719104725.ppic7jy4ghfieeap@artanis>
 <oe8IgklW6ypj4lPpkHumHi-Y79x0ZQqzxzPVYrRadh3oz0130kKr7Q2TwGp8_wqpvif-B1stIifA_0kOmO3BOZvQMDXisSsLEN17js1z0lY=@notatether.com>
 <YtgDqWSIbX8EJc3B@coinkite.com>
Message-ID: <CAMnpzfo_tGk3ifbpo5nGn6-+Z1_P=Epw-+JCyGvgWErkkSuVfw@mail.gmail.com>

On Wed, Jul 20, 2022 at 9:46 PM Peter (Coinkite Inc) via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> [...] the various BIP-322 proposals never gained wide acceptance.

There's renewed interest in using BIP322 to validate signatures
related to work upgrading the Bitcoin-native Decentralized Identifier
Method (did:btcr) beyond its current specification, to version 2.0.

  https://github.com/WebOfTrustInfo/rwot11-the-hague/blob/master/advance-readings/bip322-signature-suite.md
  https://www.w3.org/TR/did-core/

From bitcoin-dev at rgrant.org  Sat Jul 23 05:09:57 2022
From: bitcoin-dev at rgrant.org (Ryan Grant)
Date: Sat, 23 Jul 2022 05:09:57 +0000
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
Message-ID: <CAMnpzfoAbzQhwoMMWwG6ssf4Cgwad-zRyhEZinZNifDhPXDEaA@mail.gmail.com>

+1  I'd participate.

Certain human/organizational limitations prevent things being said in
logged channels that sometimes can be shared in person.  Sometimes
people break through misunderstandings in person, through either
informal mingling or the use of Chatham House rules.  So I would also
advocate restarting the Scaling Bitcoin conferences, twice a year.

One request for the agenda:
I perceived a lot of "Oh, well it's also fine to just wait and see
what comes" in the prior discussions.  The idea that we should reopen
this discussion presumes that it is better to not wait, because having
even imperfect covenant designs will cause the ecosystem to explore
what use cases to allocate developer interest in (as long as the fees
are not too far off - yeah I'm looking at you, CSFS).  Because of
this, I also propose asking some of the more advanced scripting
technologists to reveal what of their work is currently science, what
is engineering, and what is product-oriented with understandable
delivery dates.  I think that if more people understood the answers to
these questions then there would be more room for incremental
exploration of the space.

From anton at sancoder.com  Sat Jul 23 05:08:55 2022
From: anton at sancoder.com (Anton Shevchenko)
Date: Fri, 22 Jul 2022 22:08:55 -0700
Subject: [bitcoin-dev] bitcoind -proxy=host:port doesn't work for unroutable
	network
Message-ID: <3d864872-bc5c-40b0-9eab-2b38add2aa55@www.fastmail.com>

Hello,

Got unexpected behavior when trying to run bitcoind with -proxy setting.
-proxy is used to connect to SOCKS5 proxy which is able to access some internal network.
bitcoind is started with -noconnect option and network activity is absent (as it should be).

Then I command bitcoin-cli to connect to node with address 10.x.y.z with the command
bitcoin-cli addnode 10.x.y.z add

Expected behavior is for bitcoind to initiate connection through proxy.
Actual behavior is bitcoind trying to connect without using proxy.

In the code:
CConnman::ConnectNode calls GetProxy and GetProxy returns false because CNetAddr::GetNetwork returns NET_UNROUTABLE.

My take is this is unexpected behavior at minimum and should be documented.
Better way is to introduce another option just for the unroutable addresses:
- connect locally (for compatibility reasons, default);
- connect thru proxy;
- don't connect to unroutable addresses.


--  Anton Shevchenko

From anton at sancoder.com  Sat Jul 23 13:00:22 2022
From: anton at sancoder.com (Anton Shevchenko)
Date: Sat, 23 Jul 2022 06:00:22 -0700
Subject: [bitcoin-dev] bitcoind -proxy=host:port doesn't work for
	unroutable	network
In-Reply-To: <3d864872-bc5c-40b0-9eab-2b38add2aa55@www.fastmail.com>
References: <3d864872-bc5c-40b0-9eab-2b38add2aa55@www.fastmail.com>
Message-ID: <2dcb598a-eac4-4fbf-8f38-a2b515331f8a@www.fastmail.com>

Sorry to post here. Now I realize this is an implementation issue.
Raised an issue at github - https://github.com/bitcoin/bitcoin/issues/25684

--  Anton Shevchenko

On Fri, Jul 22, 2022, at 10:08 PM, Anton Shevchenko via bitcoin-dev wrote:
> Hello,
>
> Got unexpected behavior when trying to run bitcoind with -proxy setting.
> -proxy is used to connect to SOCKS5 proxy which is able to access some 
> internal network.
> bitcoind is started with -noconnect option and network activity is 
> absent (as it should be).
>
> Then I command bitcoin-cli to connect to node with address 10.x.y.z 
> with the command
> bitcoin-cli addnode 10.x.y.z add
>
> Expected behavior is for bitcoind to initiate connection through proxy.
> Actual behavior is bitcoind trying to connect without using proxy.
>
> In the code:
> CConnman::ConnectNode calls GetProxy and GetProxy returns false because 
> CNetAddr::GetNetwork returns NET_UNROUTABLE.
>
> My take is this is unexpected behavior at minimum and should be documented.
> Better way is to introduce another option just for the unroutable addresses:
> - connect locally (for compatibility reasons, default);
> - connect thru proxy;
> - don't connect to unroutable addresses.
>
>
> --  Anton Shevchenko
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From michaelfolkson at protonmail.com  Sat Jul 23 13:37:51 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Sat, 23 Jul 2022 13:37:51 +0000
Subject: [bitcoin-dev] Online Socratic on MuSig2 and biweekly secp256k1 IRC
	meeting
Message-ID: <tfxUTyS_9875NcUhUCRoQMGnV35K6JeR1N7NIp8QOd8NLyl3HiJGyMo0uCvUmlGCGRc_M_w-yxhmKgHzZvWLKxZs2oMGm_i5CmchKeSYG-o=@protonmail.com>

Hi

There is an online Socratic discussion [0] on MuSig2 next week (Thursday July 28th, 17:00 UTC) that Tim Ruffing has kindly agreed to attend. There is a reading list [1] covering Tim's work and other people's work implementing and researching MuSig2 and hopefully some of those people will attend too. It will be similar in format to the excellent Sydney Socratic with Jesse Posner on FROST in March [2].

For those who prefer IRC discussions rather than video discussions a biweekly secp256k1 IRC meeting (next one is Monday August 1st 2022 at 15:00 UTC) has recently started on the Libera IRC channel #secp256k1. (To be clear this isn't organized by me but I thought it might be of interest to a similar group of people.)

Thanks
Michael

[0]: https://www.meetup.com/bitdevsldn/events/286583988/
[1]: https://gist.github.com/michaelfolkson/5bfffa71a93426b57d518b09ebd0998c
[2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020352.html

--
Michael Folkson
Email: michaelfolkson at [protonmail.com](http://protonmail.com/)
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220723/6a1f6e51/attachment.html>

From michaelfolkson at protonmail.com  Sat Jul 23 14:25:15 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Sat, 23 Jul 2022 14:25:15 +0000
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
Message-ID: <XSc7hh8TBcrQc8YsYbCj4dmf3YkdQwJAv50lIcAK7rMYH9gChkn_S3SkJFmATwCrD-klYeJ55FajcGQ1HVuY0msxyiah8rLbVlQG7sXkAmo=@protonmail.com>

Hi Antoine

This looks great and I can certainly see progress being made in a number of directions on this. I thought you did a great job with the L2 onchain support workshops and I'm sure you'll do a great job moving this forward.

One cautionary word from someone who is probably still feeling the effects of burn out from the activation drama earlier in the year. No process can guarantee community consensus at the end of it especially if some of those who we consider experts in this area only tentatively participate. The personal attacks and ignoring of views counter to those who were pushing an activation attempt really should not be repeated. (Especially if this process is seeking to include those who we consider experts in this area and don't want their participation to be perceived as tacit approval of whatever is attempted next.)

As long as this is understood and agreed by participants I can only see positives coming out of this. But please let's not repeat the activation drama from earlier in the year because a process with a subset of those who we would consider experts in this area come to a view and then try to ram that view down everyone's throats by attempting activation at the end of it. Maybe this will result in community consensus on covenant proposal(s) going forward but also maybe it won't. Either outcome is fine. At the very least research will progress and work will be carried out that moves us in a positive direction.

Thanks
Michael

--
Michael Folkson
Email: michaelfolkson at [protonmail.com](http://protonmail.com/)
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

------- Original Message -------
On Wednesday, July 20th, 2022 at 21:42, Antoine Riard via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
>
> Discussions on covenants have been prolific and intense on this mailing list and within the wider Bitcoin technical circles, I believe however without succeeding to reach consensus on any new set of contracting primitives satisfying the requirements of known covenant-enabled use-cases. I think that's a fact to deplore as covenants would not only offer vast extensions of the capabilities of Bitcoin as a system, i.e enabling new types of multi-party contract protocols. But also empowering Bitcoin on its fundamental value propositions of store of value (e.g by making vaults more flexible) and payment system (e.g by making realistic channel factories/payment pools).
>
> If we retain as a covenant definition, a spending constraint restricting the transaction to which the spent UTXO can be spent, and enabling to program contracts/protocols at the transaction-level instead of the script-level, the list of Script primitives proposed during the last years has grown large : ANYPREVOUT [0], CHECKSIGFROMSTACK [1], CHECK_TEMPLATE_VERIFY [2], TAPROOT_LEAF_UPDATE_VERIFY [3], TXHASH [4], PUSHTXDATA [5], CAT [6], EVICT [7], Grafroot delegation [8], SIGHASH_GROUP [9], MERKLEBRANCHVERIFY [10] and more than I can't remember. Of course, all the listed primitives are at different states of formalization, some already fully fleshed-out in BIPs, other still ideas on whiteboard, yet they all extend the range of workable multi-party contract protocols.
>
> Indeed this range has grown wild. Without aiming to be exhaustive (I'm certainly missing some interesting proposals lost in the abyss of bitcointalk.org), we can mention the following use-cases: multi-party stateful contracts [11], congestion trees [12], payment pools [13], "eltoo" layered commitments [14], programmable vaults [15], multi-events contracts [16], blockchain-as-oracle bets [17], spacechains [18], trustless collateral lending [19], ...
>
> Minding all those facts, I would say the task of technical evaluation of any covenant proposal sounds at least two fold. There is first reasoning about the enabled protocols on a range of criterias such as scalability, efficiency, simplicity, extensibility, robustness, data confidentiality, etc. Asking questions like what are the interactions between layers, if any ? Or how robust is the protocol, not just interactivity failure between participant nodes but in the face of mempools spikes or internet disruption ? Or if the performance is still acceptable on shared resources like blockspace or routing tables if everyone is using this protocol ? Or if the protocol minimizes regulatory attack surface or centralization vectors ?
>
> Though once this step is achieved, there is still more reasoning work to evaluate how good a fit is a proposed Script primitive, the efficiency/simplicity/ease to use trade-offs, but also if there are no functionality overlap or hard constraints on the use-cases design themselves or evolvability w.rt future Script extensions or generalization of the opcode operations.
>
> Moreover, if you would like your evaluation of a covenant proposal to be complete, I don't believe you can squeeze the implications with the mempool rules and combination with any consistent fee-bumping strategy. To say things politely, those areas have been a quagmire of vulnerabilities, attacks and defects for second-layers Bitcoin protocols during the last years [20].
>
> Considering the abundant problem-space offered by covenants, I believe there is a reasonable groundwork to pursue in building the use-cases understanding (e.g prototype, pseudo-specification, documentation, ...) and building consensus on the framework of criterias on which to evaluate them [21]. It might raise a really high bar for any covenant proposal compared to previous softforks, however I think it would adequately reflect the growth in Bitcoin complexity and funds at stakes during the last years.
>
> Moving towards this outcome, I would like to propose a new covenant open specification process, in the same spirit as we have with the BOLTs or dlcspecs. We would have regular meetings (biweekly/monthly ?), an open agenda where topics of discussion can be pinned in advance and documentation artifacts would be built with time driven by consensus (e.g 1st phase could be to collect, pseudo-specify and find champion(s) for known use-cases ?) and no timeframe. Starting date could be September / October / November (later, 2023 ?), giving time for anyone interested in such a covenant process to allocate development and contribution bandwidth in function of their involvement interest.
>
> Learning from the good but specially from the bad with setting up the L2 onchain support meetings last year, I think it would be better to keep the agenda open, loose and free as much we can in a "burn-the-roadmap" spirit, avoiding to create a sense of commitment or perceived signaling in the process participants towards any covenant solution. I would guess things to be experimental and evolutionary and folks to spend the first meetings actually to express what they would like the covenant process to be about (and yes that means if you're a domain expert and you find the pace of things too slow sometimes, you have to learn to handle your own frustration...).
>
> In a "decentralize-everything" fashion, I believe it would be good to have rotating meeting chairs and multiple covenant documentation archivists. I'm super happy to spend the time and energy bootstrapping well such covenant process effort, though as it's Bitcoin learn to decentralize yourself.
>
> I'm really curious what the outcome of such a covenant process would look like. We might end up concluding that complex covenants are too unsafe by enabling sophisticated MEV-attacks against LN [22]. Or even if there is an emergent technical consensus, it doesn't mean there is a real market interest for such covenant solutions. That said, I'm not sure if it's really a subject of concern when you're reasoning as a scientist/engineer and you value technical statements in terms of accuracy, systematic relevance and intrinsic interest.
>
> Overall, my motivation to kick-start such a process stays in the fact that covenants are required building blocks to enable scalable payments pools design like CoinPool. I believe payments pools are a) cool and b) a good shot at scaling Bitcoin as a payment system once we have reached scalability limits of Lightning, still under the same security model for users. However, as a community we might sense it's not the good timing for a covenant process. I'm really fine with that outcome as there are still holes to patch in LN to keep me busy enough for the coming years.
>
> Zooming out, I believe with any discussion about covenants or other soft forks, the hard part isn't about coming up with the best technical solution to a set of problems but in the iterative process where all voices are listened to reach (or not) consensus on what is actually meant by "best" and if the problems are accurate. The real physics of Bitcoin is the physics of people. It's a work of patience.
>
> Anyways, eager to collect feedbacks on what the ideal covenant specification process looks like. As usual, all opinions and mistakes are my own.
>
> Cheers,
> Antoine
>
> [0] https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki
> [1] https://bitcoinops.org/en/topics/op_checksigfromstack/
> [2] https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki
> [3] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html
> [4] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019813.html
> [5] https://github.com/jl2012/bips/blob/vault/bip-0ZZZ.mediawiki
> [6] https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298
> [7] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019926.html
> [8] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html
> [9] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019243.html
> [10] https://github.com/bitcoin/bips/blob/master/bip-0116.mediawiki
> [11] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019808.html
> [12] https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#Congestion_Controlled_Transactions
> [13] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017964.html
> [14] https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html
> [15] http://fc17.ifca.ai/bitcoin/papers/bitcoin17-final28.pdf
> [16] https://github.com/ariard/talk-slides/blob/master/advanced-contracts.pdf
> [17] https://blog.bitmex.com/taproot-you-betcha/
> [18] https://gist.github.com/RubenSomsen/c9f0a92493e06b0e29acced61ca9f49a#spacechains
> [19] https://gist.github.com/RubenSomsen/bf08664b3d174551ab7361ffb835fcef
> [20] https://github.com/jamesob/mempool.work
> [21] https://github.com/bitcoinops/bitcoinops.github.io/pull/806
> [22] https://blog.bitmex.com/txwithhold-smart-contracts/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220723/7b57f683/attachment-0001.html>

From antoine.riard at gmail.com  Sat Jul 23 14:57:56 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Sat, 23 Jul 2022 15:57:56 +0100
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CAMnpzfoAbzQhwoMMWwG6ssf4Cgwad-zRyhEZinZNifDhPXDEaA@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <CAMnpzfoAbzQhwoMMWwG6ssf4Cgwad-zRyhEZinZNifDhPXDEaA@mail.gmail.com>
Message-ID: <CALZpt+HfZZwrpzEcw6XVZv_RzeiX4iXvMGEWSto5xEdUatVWhQ@mail.gmail.com>

Hi Ryan,

>  Certain human/organizational limitations prevent things being said in
> logged channels that sometimes can be shared in person.  Sometimes
> people break through misunderstandings in person, through either
> informal mingling or the use of Chatham House rules.  So I would also
> advocate restarting the Scaling Bitcoin conferences, twice a year.

Just for clarity, I'm proposing online meetings on IRC, not in-person. But
yes, logged channels can be really narrow on topics and in person sometimes
let people grasp the bigger picture or wider context more easily. In my
opinion, to build understanding and sync on a complex topic there is
nothing like an old school whiteboard session. That being said,
higher-bandwidth communication channels like invite-only events come at the
price of openness and context-archiving, which matters a lot in Bitcoin. So
I think it's good to have a mix of both. It could be interesting to restart
Scaling Bitcoin confs, the scaling landscape has grown wild in the past
years (statechains, payment pools, federated chaumian banks, new types of
sidechains, etc), though I've not heard about orgas kicking them again.

> I perceived a lot of "Oh, well it's also fine to just wait and see
> what comes" in the prior discussions.  The idea that we should reopen
> this discussion presumes that it is better to not wait, because having
> even imperfect covenant designs will cause the ecosystem to explore
> what use cases to allocate developer interest in (as long as the fees
> are not too far off - yeah I'm looking at you, CSFS).  Because of
> this, I also propose asking some of the more advanced scripting
> technologists to reveal what of their work is currently science, what
> is engineering, and what is product-oriented with understandable
> delivery dates.  I think that if more people understood the answers to
> these questions then there would be more room for incremental
> exploration of the space.

For sure, there is a "chicken-and-egg" issue, in the sense that lack of
certainty on finding consensus on covenant designs can deter some of the
most experienced and knowledgeable developers to invest time in building
and maturing use-cases toolchains demonstrating the worthiness of such
consensus change. One way to avoid this circular dependency can be to start
with a state-of-Bitcoin-art version of the protocol, deploy then once there
is economic traffic, propose protocol improvement requiring consensus
changes back to the community. This is more or less what Lightning is doing
with ANYPREVOUT, now there is like 4,300 BTC locked on the network, it's
easier to argue there is economic interest. Though ultimately, I don't
believe you will ever solve that dead-end risk of Bitcoin research
to attract automatically more developers. It's common to any scientific
endeavor, as in the end it's more an "inner taste" and exploration for its
own sake that drives long-term research.

On the second point, giving clarity on the state of advanced scripting
use-cases, effectively I believe it would be an informative task to do for
each use-case "champion". Speaking for payments pools, solving the
high-interactivity issue is still science [0], a pool design for like
10-100 participants assuming liveliness we might have known engineering
solutions [1], yet with still a lot of trade-offs to explore on the core
pool tree mechanism, and now the real unknown and hard task might be to say
a "product-oriented" with delivery dates. From my LDK experience, counts
3/4 years at best to build and mature any FOSS production-ready Bitcoin
codebase though in reality if you have to request other changes in the
ecosystem like mempools ones for a L2, you don't know.  So for discussion
clarity, yes it's good if champions give an honest account of knowns and
unknowns of their use-cases. I would have loved all the mempool issues
affecting Lightning to have been detected and mitigations development
started earlier in the protocol genesis.

Thanks for the feedback, keeping track of them.





Le sam. 23 juil. 2022 ? 06:10, Ryan Grant <bitcoin-dev at rgrant.org> a ?crit :

> +1  I'd participate.
>
> Certain human/organizational limitations prevent things being said in
> logged channels that sometimes can be shared in person.  Sometimes
> people break through misunderstandings in person, through either
> informal mingling or the use of Chatham House rules.  So I would also
> advocate restarting the Scaling Bitcoin conferences, twice a year.
>
> One request for the agenda:
> I perceived a lot of "Oh, well it's also fine to just wait and see
> what comes" in the prior discussions.  The idea that we should reopen
> this discussion presumes that it is better to not wait, because having
> even imperfect covenant designs will cause the ecosystem to explore
> what use cases to allocate developer interest in (as long as the fees
> are not too far off - yeah I'm looking at you, CSFS).  Because of
> this, I also propose asking some of the more advanced scripting
> technologists to reveal what of their work is currently science, what
> is engineering, and what is product-oriented with understandable
> delivery dates.  I think that if more people understood the answers to
> these questions then there would be more room for incremental
> exploration of the space.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220723/bacfa116/attachment.html>

From antoine.riard at gmail.com  Sat Jul 23 16:41:55 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Sat, 23 Jul 2022 17:41:55 +0100
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <XSc7hh8TBcrQc8YsYbCj4dmf3YkdQwJAv50lIcAK7rMYH9gChkn_S3SkJFmATwCrD-klYeJ55FajcGQ1HVuY0msxyiah8rLbVlQG7sXkAmo=@protonmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <XSc7hh8TBcrQc8YsYbCj4dmf3YkdQwJAv50lIcAK7rMYH9gChkn_S3SkJFmATwCrD-klYeJ55FajcGQ1HVuY0msxyiah8rLbVlQG7sXkAmo=@protonmail.com>
Message-ID: <CALZpt+HerfG6hfkPksN=0ih5pRP6m0qAnxH3au7h3gadnHPKdQ@mail.gmail.com>

Hi Michael,

> One cautionary word from someone who is probably still feeling the
effects of burn out from the activation drama earlier in the year. No
process can guarantee community > consensus at the end of it especially if
some of those who we consider experts in this area only tentatively
participate. The personal attacks and ignoring of views counter >to those
who were pushing an activation attempt really should not be repeated.
(Especially if this process is seeking to include those who we consider
experts in this area > and don't want their participation to be perceived
as tacit approval of whatever is attempted next.)

I'm thinking such a covenant effort would be more a technical process
aiming to advance the state of covenant & contracting knowledge, collect
and document the use-cases, exchange engineering learnings from the
prototype, share the problem space, etc. In the same fashion we have the
BOLT one or even more remote the IETF working groups about a bunch of
Internet technology [0]. I think that Taproot/Schnorr has set a high
standard in terms of safety-first and careful Bitcoin engineering effort,
aggregating 8 years of thinking around MAST and friends but also exploring
other signature schemes like BLS. And I hope with covenants we aim for
higher standards, as if there is one learning from Taproot we could have
spent more time working out use-cases prototypes (e.g joinpools) and
standard libraries to mature, it could have save actual headache around
x-pubkeys [1]

In my perspective, activation is more a matter of release engineering and
community communications, and failing to a game-theory situation where
miners incentives are computed is more a hint of a social layer failure.
When we start to consider the moves and incentives of categories of Bitcoin
players (miners, users, exchanges, ...), I would say we failed to keep the
community as one and increase the safety risks for everyone's coins.

Minding that, and to maximize the participation in such a covenant
specification process, similar to the usual Chatham House rules in
engineering meetings, I believe it could be good to have a "No Activation -
No Timeframe" rule in such a covenant process, and defer any activation
discussion to a future process of its own.

> As long as this is understood and agreed by participants I can only see
positives coming out of this. But please let's not repeat the activation
drama from earlier in the year > because a process with a subset of those
who we would consider experts in this area come to a view and then try to
ram that view down everyone's throats by attempting > activation at the end
of it. Maybe this will result in community consensus on covenant
proposal(s) going forward but also maybe it won't. Either outcome is fine.
At the very > least research will progress and work will be carried out
that moves us in a positive direction

During the last LN Summit in Oakland, there was chit-chat on how long it
would take to get a mature version of Lightning, and the answer from a
seasoned FOSS developer was 25 years. Considering the heavy LN
problem-space, I think this was a wise take and I believe with covenants we
would have to think in that 10/20 years perspective if we aim for a
satisfying and complete covenant toolchain. It doesn't mean we are not
going to be able to deploy piece by piece, however there is a strong
emphasis to be done on the archiving part itself. Some of the process
stakeholders might still not be active in their engineering careers when
the issues should be weighted for consensus activation and transmission of
knowledge across generations of stakeholders is going to be an issue (as we
already see it in Bitcoin Core with some critical subsystems). And if there
is never community consensus on covenant proposals, that's fine. To me the
research would have been interesting in itself and I hope it will be the
same for other participants.

[0] https://datatracker.ietf.org/wg/
[1]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-July/020663.html

Le sam. 23 juil. 2022 ? 15:25, Michael Folkson <
michaelfolkson at protonmail.com> a ?crit :

> Hi Antoine
>
> This looks great and I can certainly see progress being made in a number
> of directions on this. I thought you did a great job with the L2 onchain
> support workshops and I'm sure you'll do a great job moving this forward.
>
> One cautionary word from someone who is probably still feeling the effects
> of burn out from the activation drama earlier in the year. No process can
> guarantee community consensus at the end of it especially if some of those
> who we consider experts in this area only tentatively participate. The
> personal attacks and ignoring of views counter to those who were pushing an
> activation attempt really should not be repeated. (Especially if this
> process is seeking to include those who we consider experts in this area
> and don't want their participation to be perceived as tacit approval of
> whatever is attempted next.)
>
> As long as this is understood and agreed by participants I can only see
> positives coming out of this. But please let's not repeat the activation
> drama from earlier in the year because a process with a subset of those who
> we would consider experts in this area come to a view and then try to ram
> that view down everyone's throats by attempting activation at the end of
> it. Maybe this will result in community consensus on covenant proposal(s)
> going forward but also maybe it won't. Either outcome is fine. At the very
> least research will progress and work will be carried out that moves us in
> a positive direction.
>
> Thanks
> Michael
>
> --
> Michael Folkson
> Email: michaelfolkson at protonmail.com
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>
> ------- Original Message -------
> On Wednesday, July 20th, 2022 at 21:42, Antoine Riard via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Hi,
>
> Discussions on covenants have been prolific and intense on this mailing
> list and within the wider Bitcoin technical circles, I believe however
> without succeeding to reach consensus on any new set of contracting
> primitives satisfying the requirements of known covenant-enabled use-cases.
> I think that's a fact to deplore as covenants would not only offer vast
> extensions of the capabilities of Bitcoin as a system, i.e enabling new
> types of multi-party contract protocols. But also empowering Bitcoin on its
> fundamental value propositions of store of value (e.g by making vaults more
> flexible) and payment system (e.g by making realistic channel
> factories/payment pools).
>
> If we retain as a covenant definition, a spending constraint restricting
> the transaction to which the spent UTXO can be spent, and enabling to
> program contracts/protocols at the transaction-level instead of the
> script-level, the list of Script primitives proposed during the last years
> has grown large : ANYPREVOUT [0], CHECKSIGFROMSTACK [1],
> CHECK_TEMPLATE_VERIFY [2], TAPROOT_LEAF_UPDATE_VERIFY [3], TXHASH [4],
> PUSHTXDATA [5], CAT [6], EVICT [7], Grafroot delegation [8], SIGHASH_GROUP
> [9], MERKLEBRANCHVERIFY [10] and more than I can't remember. Of course, all
> the listed primitives are at different states of formalization, some
> already fully fleshed-out in BIPs, other still ideas on whiteboard, yet
> they all extend the range of workable multi-party contract protocols.
>
> Indeed this range has grown wild. Without aiming to be exhaustive (I'm
> certainly missing some interesting proposals lost in the abyss of
> bitcointalk.org), we can mention the following use-cases: multi-party
> stateful contracts [11], congestion trees [12], payment pools [13], "eltoo"
> layered commitments [14], programmable vaults [15], multi-events contracts
> [16], blockchain-as-oracle bets [17], spacechains [18], trustless
> collateral lending [19], ...
>
> Minding all those facts, I would say the task of technical evaluation of
> any covenant proposal sounds at least two fold. There is first reasoning
> about the enabled protocols on a range of criterias such as scalability,
> efficiency, simplicity, extensibility, robustness, data confidentiality,
> etc. Asking questions like what are the interactions between layers, if any
> ? Or how robust is the protocol, not just interactivity failure between
> participant nodes but in the face of mempools spikes or internet disruption
> ? Or if the performance is still acceptable on shared resources like
> blockspace or routing tables if everyone is using this protocol ? Or if the
> protocol minimizes regulatory attack surface or centralization vectors ?
>
> Though once this step is achieved, there is still more reasoning work to
> evaluate how good a fit is a proposed Script primitive, the
> efficiency/simplicity/ease to use trade-offs, but also if there are no
> functionality overlap or hard constraints on the use-cases design
> themselves or evolvability w.rt future Script extensions or generalization
> of the opcode operations.
>
> Moreover, if you would like your evaluation of a covenant proposal to be
> complete, I don't believe you can squeeze the implications with the mempool
> rules and combination with any consistent fee-bumping strategy. To say
> things politely, those areas have been a quagmire of vulnerabilities,
> attacks and defects for second-layers Bitcoin protocols during the last
> years [20].
>
> Considering the abundant problem-space offered by covenants, I believe
> there is a reasonable groundwork to pursue in building the use-cases
> understanding (e.g prototype, pseudo-specification, documentation, ...) and
> building consensus on the framework of criterias on which to evaluate them
> [21]. It might raise a really high bar for any covenant proposal compared
> to previous softforks, however I think it would adequately reflect the
> growth in Bitcoin complexity and funds at stakes during the last years.
>
> Moving towards this outcome, I would like to propose a new covenant open
> specification process, in the same spirit as we have with the BOLTs or
> dlcspecs. We would have regular meetings (biweekly/monthly ?), an open
> agenda where topics of discussion can be pinned in advance and
> documentation artifacts would be built with time driven by consensus (e.g
> 1st phase could be to collect, pseudo-specify and find champion(s) for
> known use-cases ?) and no timeframe. Starting date could be September /
> October / November (later, 2023 ?), giving time for anyone interested in
> such a covenant process to allocate development and contribution bandwidth
> in function of their involvement interest.
>
> Learning from the good but specially from the bad with setting up the L2
> onchain support meetings last year, I think it would be better to keep the
> agenda open, loose and free as much we can in a "burn-the-roadmap" spirit,
> avoiding to create a sense of commitment or perceived signaling in the
> process participants towards any covenant solution. I would guess things to
> be experimental and evolutionary and folks to spend the first meetings
> actually to express what they would like the covenant process to be about
> (and yes that means if you're a domain expert and you find the pace of
> things too slow sometimes, you have to learn to handle your own
> frustration...).
>
> In a "decentralize-everything" fashion, I believe it would be good to have
> rotating meeting chairs and multiple covenant documentation archivists. I'm
> super happy to spend the time and energy bootstrapping well such covenant
> process effort, though as it's Bitcoin learn to decentralize yourself.
>
> I'm really curious what the outcome of such a covenant process would look
> like. We might end up concluding that complex covenants are too unsafe by
> enabling sophisticated MEV-attacks against LN [22]. Or even if there is an
> emergent technical consensus, it doesn't mean there is a real market
> interest for such covenant solutions. That said, I'm not sure if it's
> really a subject of concern when you're reasoning as a scientist/engineer
> and you value technical statements in terms of accuracy, systematic
> relevance and intrinsic interest.
>
> Overall, my motivation to kick-start such a process stays in the fact that
> covenants are required building blocks to enable scalable payments pools
> design like CoinPool. I believe payments pools are a) cool and b) a good
> shot at scaling Bitcoin as a payment system once we have reached
> scalability limits of Lightning, still under the same security model for
> users. However, as a community we might sense it's not the good timing for
> a covenant process. I'm really fine with that outcome as there are still
> holes to patch in LN to keep me busy enough for the coming years.
>
> Zooming out, I believe with any discussion about covenants or other soft
> forks, the hard part isn't about coming up with the best technical solution
> to a set of problems but in the iterative process where all voices are
> listened to reach (or not) consensus on what is actually meant by "best"
> and if the problems are accurate. The real physics of Bitcoin is the
> physics of people. It's a work of patience.
>
> Anyways, eager to collect feedbacks on what the ideal covenant
> specification process looks like. As usual, all opinions and mistakes are
> my own.
>
> Cheers,
> Antoine
>
> [0] https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki
> [1] https://bitcoinops.org/en/topics/op_checksigfromstack/
> [2] https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki
> [3]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html
> [4]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019813.html
> [5] https://github.com/jl2012/bips/blob/vault/bip-0ZZZ.mediawiki
> [6] https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298
> [7]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019926.html
> [8]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-February/015700.html
> [9]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019243.html
> [10] https://github.com/bitcoin/bips/blob/master/bip-0116.mediawiki
> [11]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019808.html
> [12]
> https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#Congestion_Controlled_Transactions
> [13]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017964.html
> [14]
> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html
> [15] http://fc17.ifca.ai/bitcoin/papers/bitcoin17-final28.pdf
> [16]
> https://github.com/ariard/talk-slides/blob/master/advanced-contracts.pdf
> [17] https://blog.bitmex.com/taproot-you-betcha/
> [18]
> https://gist.github.com/RubenSomsen/c9f0a92493e06b0e29acced61ca9f49a#spacechains
> [19] https://gist.github.com/RubenSomsen/bf08664b3d174551ab7361ffb835fcef
> [20] https://github.com/jamesob/mempool.work
> [21] https://github.com/bitcoinops/bitcoinops.github.io/pull/806
> [22] https://blog.bitmex.com/txwithhold-smart-contracts/
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220723/90517069/attachment-0001.html>

From aliashraf.btc at protonmail.com  Sun Jul 24 13:01:25 2022
From: aliashraf.btc at protonmail.com (aliashraf.btc At protonmail)
Date: Sun, 24 Jul 2022 13:01:25 +0000
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CALZpt+HerfG6hfkPksN=0ih5pRP6m0qAnxH3au7h3gadnHPKdQ@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <XSc7hh8TBcrQc8YsYbCj4dmf3YkdQwJAv50lIcAK7rMYH9gChkn_S3SkJFmATwCrD-klYeJ55FajcGQ1HVuY0msxyiah8rLbVlQG7sXkAmo=@protonmail.com>
 <CALZpt+HerfG6hfkPksN=0ih5pRP6m0qAnxH3au7h3gadnHPKdQ@mail.gmail.com>
Message-ID: <oYPIKqafRHCflmFrB8HcUnhyFabJo7u4sT8w8DPBIQ1lWcuQGiPs-dhJiupOdCnmrc_3zRhq36VngKBgSXee-hFoe6C_sUYkcz9hNz1cfAA=@protonmail.com>

------- Original Message -------
On Saturday, July 23rd, 2022 at 9:11 PM, Antoine Riard via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi Michael,
>
> I'm thinking such a covenant effort would be more a technical process aiming to advance the state of covenant & contracting knowledge, collect and document the use-cases, exchange engineering learnings from the prototype, share the problem space, etc. In the same fashion we have the BOLT one or even more remote the IETF working groups about a bunch of Internet technology [0]. I think that Taproot/Schnorr has set a high standard in terms of safety-first and careful Bitcoin engineering effort, aggregating 8 years of thinking around MAST and friends but also exploring other signature schemes like BLS. And I hope with covenants we aim for higher standards, as if there is one learning from Taproot we could have spent more time working out use-cases prototypes (e.g joinpools) and standard libraries to mature, it could have save actual headache around x-pubkeys [1]

Hi Antoine,
Claiming Taproot history, as best practice or a standard methodology in bitcoin development, is just too much. Bitcoin development methodology is an open problem, given the contemporary escalation/emergence of challenges, history is not entitled to be hard coded as standard.

Schnorr/MAST development history, is a good subject for case study, but it is not guaranteed that the outcome to be always the same as your take.

I'd suggest instead of inventing a multi-decades-lifecycle based methodology (which is weird by itself, let alone installing it as a standard for bitcoin projects), being open-mind enough for examining more agile approaches and their inevitable effect on the course of discussions,

Cheers,
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220724/8de09dce/attachment.html>

From bram at chia.net  Sun Jul 24 18:22:51 2022
From: bram at chia.net (Bram Cohen)
Date: Sun, 24 Jul 2022 11:22:51 -0700
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
Message-ID: <CAHUJnBDu+PNvER-FmpT8593vX-wAZ1oPWJjQaJ=d7Y4pso_Txw@mail.gmail.com>

On Wed, Jul 20, 2022 at 2:46 PM Antoine Riard via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Indeed this range has grown wild. Without aiming to be exhaustive (I'm
> certainly missing some interesting proposals lost in the abyss of
> bitcointalk.org), we can mention the following use-cases: multi-party
> stateful contracts [11], congestion trees [12], payment pools [13], "eltoo"
> layered commitments [14], programmable vaults [15], multi-events contracts
> [16], blockchain-as-oracle bets [17], spacechains [18], trustless
> collateral lending [19], ...
>

The big question you missed is whether capabilities are in scope for a
covenants proposal. In particular, vaults work a lot better when payments
to them are immediately locked up in the vault rather than it having to do
a step to accept them first.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220724/37c519d3/attachment.html>

From aliashraf.btc at protonmail.com  Sun Jul 24 20:26:57 2022
From: aliashraf.btc at protonmail.com (aliashraf.btc At protonmail)
Date: Sun, 24 Jul 2022 20:26:57 +0000
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CAHUJnBDu+PNvER-FmpT8593vX-wAZ1oPWJjQaJ=d7Y4pso_Txw@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <CAHUJnBDu+PNvER-FmpT8593vX-wAZ1oPWJjQaJ=d7Y4pso_Txw@mail.gmail.com>
Message-ID: <GcAlGyfAbxkAbr_7xLmmSFRybfKK9lw_1WEpM6ZuLgaSr_iZgsG_IjKYMvS_OPl5OT1Sh0IM_DLBgyt7VGWOo_VIHpwJidO5xaxhz-bm3Bo=@protonmail.com>

I suppose it is more about spending from vaults, rather than locking in. A covenant would impose rules for spending tx.e.g. :Don't spend this output unless it is claimed by a tx which
1) Spends it as a whole in the very first output.
2) This output is P2SH with specified script pattern ( a TLC script with redeem options)

Both normal and theft spends are enforced to lock the funds for a reasonable amount of time, providing opportunity for neutralizing the theft just in case. This is becoming more complex once the redeem (cold) key is susceptible to theft and should be prevented from being able to reclaim funds when the legitimate spends has time locked the funds. It is done by requiring the redeem path to comply with a similar pattern with modifications
e.g. this (redeem) tx fails unless a specific txid is published at least n blocks earlier. This way a cold key only theft won't be able to take advantage because s/he has not access to the specific txid which is generated before and is kept as a 3rd secret, add whatever complexity you wish to.

Sent with [Proton Mail](https://proton.me/) secure email.

------- Original Message -------
On Sunday, July 24th, 2022 at 10:52 PM, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Wed, Jul 20, 2022 at 2:46 PM Antoine Riard via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Indeed this range has grown wild. Without aiming to be exhaustive (I'm certainly missing some interesting proposals lost in the abyss of bitcointalk.org), we can mention the following use-cases: multi-party stateful contracts [11], congestion trees [12], payment pools [13], "eltoo" layered commitments [14], programmable vaults [15], multi-events contracts [16], blockchain-as-oracle bets [17], spacechains [18], trustless collateral lending [19], ...
>
> The big question you missed is whether capabilities are in scope for a covenants proposal. In particular, vaults work a lot better when payments to them are immediately locked up in the vault rather than it having to do a step to accept them first.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220724/8a0c3404/attachment.html>

From ZmnSCPxj at protonmail.com  Sun Jul 24 23:40:35 2022
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Sun, 24 Jul 2022 23:40:35 +0000
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <oYPIKqafRHCflmFrB8HcUnhyFabJo7u4sT8w8DPBIQ1lWcuQGiPs-dhJiupOdCnmrc_3zRhq36VngKBgSXee-hFoe6C_sUYkcz9hNz1cfAA=@protonmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <XSc7hh8TBcrQc8YsYbCj4dmf3YkdQwJAv50lIcAK7rMYH9gChkn_S3SkJFmATwCrD-klYeJ55FajcGQ1HVuY0msxyiah8rLbVlQG7sXkAmo=@protonmail.com>
 <CALZpt+HerfG6hfkPksN=0ih5pRP6m0qAnxH3au7h3gadnHPKdQ@mail.gmail.com>
 <oYPIKqafRHCflmFrB8HcUnhyFabJo7u4sT8w8DPBIQ1lWcuQGiPs-dhJiupOdCnmrc_3zRhq36VngKBgSXee-hFoe6C_sUYkcz9hNz1cfAA=@protonmail.com>
Message-ID: <0tp0SQgSX6kVG84bQ6fk7umnv3IaC2Nx6leiGYxhayz2HCQymAuBJxaODFijqLPP0nJ1b41wE4wlC-0_H8eN2GadtVEqGBGWGlzuMtfjhDo=@protonmail.com>

Good morning alia, Antoine, and list,

> Hi Antoine,
> Claiming Taproot history, as best practice or a standard methodology in bitcoin development, is just too much. Bitcoin development methodology is an open problem, given the contemporary escalation/emergence of challenges, history is not? entitled to be hard coded as standard.
>
> Schnorr/MAST development history, is a good subject for case study, but it is not guaranteed that the outcome to be always the same as your take.
>
> I'd suggest instead of inventing a multi-decades-lifecycle based methodology (which is weird by itself, let alone installing it as a standard for bitcoin projects), being open-mind? enough for examining more agile approaches and their inevitable effect on the course of discussions,

A thing I have been mulling is how to prototype such mechanisms more easily.

A "reasonably standard" approach was pioneered in Elements Alpha, where an entire federated sidechain is created and then used as a testbed for new mechanisms, such as SegWit and `OP_CHECKSIGFROMSTACK`.
However, obviously the cost is fairly large, as you need an entire federated sidechain.

It does have the nice advantage that you can use "real" coins, with real value (subject to the federation being trustworthy, admittedly) in order to convincingly show a case for real-world use.

As I pointed out in [Smart Contracts Unchained](https://zmnscpxj.github.io/bitcoin/unchained.html), an alternative to using a blockchain would be to use federated individual coin outpoints.

A thing I have been pondering is to create a generic contracting platform with a richer language, which itself is just used to implement a set of `OP_` SCRIPT opcodes.
This is similar to my [Microcode proposal](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020158.html) earlier this year.
Thus, it would be possible to prototype new `OP_` codes, or change the behavior of existing `OP_` codes (e.g. `SIGHASH_NOINPUT` would be a change in behavior of existing `OP_CHECKSIG` and `OP_CHECKMULTISIG`), by having a translation from `OP_` codes to the richer language.
Then you could prototype a new SCRIPT `OP_` code by providing your own translation of the new `OP_` code and a SCRIPT that uses that `OP_` code, and using Smart Contract Unchained to use a real funds outpoint.

Again, we can compare the Bitcoin consensus layer to a form of hardware: yes, we *could* patch it and change it, but that requires a ***LOT*** of work and the new software has to be redeployed by everyone, so it is, practically speaking, hardware.
Microcode helps this by adding a softer layer without compromising the existing hard layer.

So... what I have been thinking of is creating some kind of smart contracts unchained platform that allows prototyping new `OP_` codes using a microcode mechanism.

Regards,
ZmnSCPxj

From erik at q32.com  Mon Jul 25 15:04:39 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 25 Jul 2022 11:04:39 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <CAJowKgJb99LAQ=KGEcU2a1jJBPGBNh7=zW177NpS-vxvKZyO0A@mail.gmail.com>
References: <D50AEC8C-4EEC-4C17-8626-87C651F1AA66@voskuil.org>
 <6xuj-ljJ9hvME-TIgWHmfPpad4aJ-1zTYSH1NBuFL_gi-6hJHMayWLEAhcEyw_lqmkR24ee8uMIAH6n4TDguk_5fJ8och99Em3m5y1R6brE=@protonmail.com>
 <YssL6VL9y6EwyBjr@petertodd.org> <08a53f48e81f1da06bd688e524ae4ec7@dtrt.org>
 <CAJowKgJb99LAQ=KGEcU2a1jJBPGBNh7=zW177NpS-vxvKZyO0A@mail.gmail.com>
Message-ID: <CAJowKgKCUZwMLMhmp8tdZLZRKDjmjkdfWey+pkSm5-tw66ZFYg@mail.gmail.com>

even with zero block reward and minimal fees, large holders who perform
zero transactions will still mine in order to preserve the value of the
network

this is not "mining your own tx", it is unrelated

this is "mining at a small loss to preserve your stake"

not only don't we need issuance or fees, but also the censorship resistance
is not meaningfully improved with issuance


On Mon, Jul 18, 2022 at 3:14 PM Erik Aronesty <erik at q32.com> wrote:

>
>> subsidy to directly tie miner revenue to the total value of Bitcoin
>> makes it not exactly how we want to incentivise a service that keeps
>>
>>
> again, this is meaningless.   if the fees aren't enough to keep  bitcoin
> secure for large transactions, then large holders are incentivised to mine
>
> that's it.
>
> it's not complicated
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220725/be53600c/attachment-0001.html>

From antoine.riard at gmail.com  Tue Jul 26 03:18:03 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Mon, 25 Jul 2022 23:18:03 -0400
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <oYPIKqafRHCflmFrB8HcUnhyFabJo7u4sT8w8DPBIQ1lWcuQGiPs-dhJiupOdCnmrc_3zRhq36VngKBgSXee-hFoe6C_sUYkcz9hNz1cfAA=@protonmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <XSc7hh8TBcrQc8YsYbCj4dmf3YkdQwJAv50lIcAK7rMYH9gChkn_S3SkJFmATwCrD-klYeJ55FajcGQ1HVuY0msxyiah8rLbVlQG7sXkAmo=@protonmail.com>
 <CALZpt+HerfG6hfkPksN=0ih5pRP6m0qAnxH3au7h3gadnHPKdQ@mail.gmail.com>
 <oYPIKqafRHCflmFrB8HcUnhyFabJo7u4sT8w8DPBIQ1lWcuQGiPs-dhJiupOdCnmrc_3zRhq36VngKBgSXee-hFoe6C_sUYkcz9hNz1cfAA=@protonmail.com>
Message-ID: <CALZpt+F9OeUij1LzvqK0RkB9Ov6v-it_Jrp4KAXFoOt=OTrmcw@mail.gmail.com>

Hi aliashraf,

Well, reading the excerpt you're pointing to, I'm using the term "high
standard" and deliberately not best practice. I hope with the increase in
the funds at stakes in the ecosystem and the growth in the technical
complexity, we'll set higher and higher standards in terms of Bitcoin
development. For sure, I think engineering standards are not a thing to be
encoded in a history book and we rest as "done". Rather more as a living
matter, with the same type of reasoning practiced in common law based on
cases or civil engineering based on disasters.

About a multi-decades-lifecycle based methodology, not in the domain of
consensus changes, but in terms of Core policy, I think I've always
advocated for more documentation and communication towards the community
[0]. However, it should be noted that any additional engineering process we
hold as standard is to be enforced by a set of FOSS contributors, of which
the time and energy is limited. So I think it's better to advance in an
evolutionary and consensus-driven way, and hopefully avoid regression.

That said, if you have concrete examples of good engineering practices we
could adopt in Bitcoin development, especially w.r.t consensus changes, I'm
curious about it.

[0] https://github.com/bitcoin/bitcoin/issues/22806

Le dim. 24 juil. 2022 ? 09:01, aliashraf.btc At protonmail <
aliashraf.btc at protonmail.com> a ?crit :

> ------- Original Message -------
> On Saturday, July 23rd, 2022 at 9:11 PM, Antoine Riard via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Hi Michael,
>
>
> I'm thinking such a covenant effort would be more a technical process
> aiming to advance the state of covenant & contracting knowledge, collect
> and document the use-cases, exchange engineering learnings from the
> prototype, share the problem space, etc. In the same fashion we have the
> BOLT one or even more remote the IETF working groups about a bunch of
> Internet technology [0]. I think that Taproot/Schnorr has set a high
> standard in terms of safety-first and careful Bitcoin engineering effort,
> aggregating 8 years of thinking around MAST and friends but also exploring
> other signature schemes like BLS. And I hope with covenants we aim for
> higher standards, as if there is one learning from Taproot we could have
> spent more time working out use-cases prototypes (e.g joinpools) and
> standard libraries to mature, it could have save actual headache around
> x-pubkeys [1]
>
> Hi Antoine,
> Claiming Taproot history, as best practice or a standard methodology in
> bitcoin development, is just too much. Bitcoin development methodology is
> an open problem, given the contemporary escalation/emergence of challenges,
> history is not  entitled to be hard coded as standard.
>
> Schnorr/MAST development history, is a good subject for case study, but it
> is not guaranteed that the outcome to be always the same as your take.
>
> I'd suggest instead of inventing a multi-decades-lifecycle based
> methodology (which is weird by itself, let alone installing it as a
> standard for bitcoin projects), being open-mind  enough for examining more
> agile approaches and their inevitable effect on the course of discussions,
>
> Cheers,
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220725/8a20f23d/attachment-0001.html>

From antoine.riard at gmail.com  Tue Jul 26 03:20:31 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Mon, 25 Jul 2022 23:20:31 -0400
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <0tp0SQgSX6kVG84bQ6fk7umnv3IaC2Nx6leiGYxhayz2HCQymAuBJxaODFijqLPP0nJ1b41wE4wlC-0_H8eN2GadtVEqGBGWGlzuMtfjhDo=@protonmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <XSc7hh8TBcrQc8YsYbCj4dmf3YkdQwJAv50lIcAK7rMYH9gChkn_S3SkJFmATwCrD-klYeJ55FajcGQ1HVuY0msxyiah8rLbVlQG7sXkAmo=@protonmail.com>
 <CALZpt+HerfG6hfkPksN=0ih5pRP6m0qAnxH3au7h3gadnHPKdQ@mail.gmail.com>
 <oYPIKqafRHCflmFrB8HcUnhyFabJo7u4sT8w8DPBIQ1lWcuQGiPs-dhJiupOdCnmrc_3zRhq36VngKBgSXee-hFoe6C_sUYkcz9hNz1cfAA=@protonmail.com>
 <0tp0SQgSX6kVG84bQ6fk7umnv3IaC2Nx6leiGYxhayz2HCQymAuBJxaODFijqLPP0nJ1b41wE4wlC-0_H8eN2GadtVEqGBGWGlzuMtfjhDo=@protonmail.com>
Message-ID: <CALZpt+GPNQU6MdFgWZwJwGpLw1X36dhT0sqoY4deS7SYNWiwWA@mail.gmail.com>

Hi Zeeman,

So on the first concern of using an "economic simulation" or
sidechains/other cryptocurrencies to gather feedback about interest of
Script extensions, I wonder about the value transitivity of such a process
to measure consensus. Namely, if you have asset X picked up in system A, it
doesn't tell you the same asset X is preferred in system B, unless I think
you have the same agent. However, in cryptocurrencies, at least in Bitcoin,
we assume pseudonymous participants. So it can be really hard to say it's
the same agent to qualify its utility. Of course, you could have some
linking between system A and system B, like signatures if the same signing
scheme is used. However if it's possible why not use direct assets in
system B to express a preference ? Maybe in the future if we have a
privacy-preserving coins ownership proof system we could use that as one
consensus indicator [0] ?

At least in terms of community decision-making, the more we have
trust-minimized data signals, _assuming_ we have the information
capabilities to process them, the better we're.

That said, about the covenant working group/process I'm proposing I would
like to stay on the use-cases collection, deep trade-offs analysis and
adequate covenant designs grounds.

Activation really should be its own dedicated process, well-splitted in
terms of communication channels, documentation archive and timeframes.

About a generic contracting platform approach, I think for sure it would be
a huge gain in flexibility for multi-party contract protocols design though
there is at least three caveats in my opinion 1) we might open a Pandora
Box enabling one to design trustless bribing contracts towards miners to
attack existent deployed Bitcoin use-cases like Lightning (not a
theoretical concern at all when we look on the wild west of Defi in other
cryptocurrencies) 2) the multi-party contract protocol problem space is
relatively early, we might evolve the primitive abstraction with which
we're dealing and the language itself should evolve 3) we might still have
to do a lot of economic engineering if the microcode operations or syntax
units of the language are bounding well to validation nodes ressources.

So IMHO, a lot of unknowns about a generic contracting platform (even if
it's tempting from an application developer viewpoint I know)

[0]
https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-November/002884.html
[1] For example an input-output bundle abstraction might be better for
fee-bumping reasons:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019243.html

Le dim. 24 juil. 2022 ? 19:40, ZmnSCPxj <ZmnSCPxj at protonmail.com> a ?crit :

> Good morning alia, Antoine, and list,
>
> > Hi Antoine,
> > Claiming Taproot history, as best practice or a standard methodology in
> bitcoin development, is just too much. Bitcoin development methodology is
> an open problem, given the contemporary escalation/emergence of challenges,
> history is not  entitled to be hard coded as standard.
> >
> > Schnorr/MAST development history, is a good subject for case study, but
> it is not guaranteed that the outcome to be always the same as your take.
> >
> > I'd suggest instead of inventing a multi-decades-lifecycle based
> methodology (which is weird by itself, let alone installing it as a
> standard for bitcoin projects), being open-mind  enough for examining more
> agile approaches and their inevitable effect on the course of discussions,
>
> A thing I have been mulling is how to prototype such mechanisms more
> easily.
>
> A "reasonably standard" approach was pioneered in Elements Alpha, where an
> entire federated sidechain is created and then used as a testbed for new
> mechanisms, such as SegWit and `OP_CHECKSIGFROMSTACK`.
> However, obviously the cost is fairly large, as you need an entire
> federated sidechain.
>
> It does have the nice advantage that you can use "real" coins, with real
> value (subject to the federation being trustworthy, admittedly) in order to
> convincingly show a case for real-world use.
>
> As I pointed out in [Smart Contracts Unchained](
> https://zmnscpxj.github.io/bitcoin/unchained.html), an alternative to
> using a blockchain would be to use federated individual coin outpoints.
>
> A thing I have been pondering is to create a generic contracting platform
> with a richer language, which itself is just used to implement a set of
> `OP_` SCRIPT opcodes.
> This is similar to my [Microcode proposal](
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020158.html)
> earlier this year.
> Thus, it would be possible to prototype new `OP_` codes, or change the
> behavior of existing `OP_` codes (e.g. `SIGHASH_NOINPUT` would be a change
> in behavior of existing `OP_CHECKSIG` and `OP_CHECKMULTISIG`), by having a
> translation from `OP_` codes to the richer language.
> Then you could prototype a new SCRIPT `OP_` code by providing your own
> translation of the new `OP_` code and a SCRIPT that uses that `OP_` code,
> and using Smart Contract Unchained to use a real funds outpoint.
>
> Again, we can compare the Bitcoin consensus layer to a form of hardware:
> yes, we *could* patch it and change it, but that requires a ***LOT*** of
> work and the new software has to be redeployed by everyone, so it is,
> practically speaking, hardware.
> Microcode helps this by adding a softer layer without compromising the
> existing hard layer.
>
> So... what I have been thinking of is creating some kind of smart
> contracts unchained platform that allows prototyping new `OP_` codes using
> a microcode mechanism.
>
> Regards,
> ZmnSCPxj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220725/f163f2d2/attachment-0001.html>

From antoine.riard at gmail.com  Tue Jul 26 03:21:11 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Mon, 25 Jul 2022 23:21:11 -0400
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CAHUJnBDu+PNvER-FmpT8593vX-wAZ1oPWJjQaJ=d7Y4pso_Txw@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <CAHUJnBDu+PNvER-FmpT8593vX-wAZ1oPWJjQaJ=d7Y4pso_Txw@mail.gmail.com>
Message-ID: <CALZpt+E4Ej3KJ4WqkUDTF3DRhPTbUT5mw2c_eHLuxH7w1BbWGg@mail.gmail.com>

What would be the canonical definition and examples of capabilities in the
Bitcoin context ?

In anycase, I believe it would be better to start a covenant process from
the use-cases in themselves, and analyse the trade-offs of any set of
contracting primitives, or even new Bitcoin fields if they're required
building blocks of the use-cases.

Le dim. 24 juil. 2022 ? 14:23, Bram Cohen <bram at chia.net> a ?crit :

> On Wed, Jul 20, 2022 at 2:46 PM Antoine Riard via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Indeed this range has grown wild. Without aiming to be exhaustive (I'm
>> certainly missing some interesting proposals lost in the abyss of
>> bitcointalk.org), we can mention the following use-cases: multi-party
>> stateful contracts [11], congestion trees [12], payment pools [13], "eltoo"
>> layered commitments [14], programmable vaults [15], multi-events contracts
>> [16], blockchain-as-oracle bets [17], spacechains [18], trustless
>> collateral lending [19], ...
>>
>
> The big question you missed is whether capabilities are in scope for a
> covenants proposal. In particular, vaults work a lot better when payments
> to them are immediately locked up in the vault rather than it having to do
> a step to accept them first.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220725/16bc82f3/attachment.html>

From chauhanansh.me at gmail.com  Tue Jul 26 08:26:05 2022
From: chauhanansh.me at gmail.com (Aaradhya Chauhan)
Date: Tue, 26 Jul 2022 13:56:05 +0530
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
Message-ID: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>

I know this might be a sort of repetition for a previous question, but I do
want to know from enthusiasts in this group that while Bitcoin was trading
at much lower price in its early days, 1 sat/vB was a good dust protection
measure. But now, I think it's a bit high for merely a dust protection
measure, and should be lowered slightly. Even if not, it should be lowered
to half when prices go double than today and keeps oscillating at that
point. As it's not a consensus rule, I think it can be done easily, just
needing support from full node operators. I support LN but I think
transaction affordability should remain constant in the future. If I'm okay
to wait in a queue, I should have the option for same affordability for
minimum fees in the future as it is today. (Like we still have posts today
while email still exists).

Awaiting your response.

Regards
Aaradhya Chauhan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/9e541b18/attachment.html>

From ali at notatether.com  Tue Jul 26 08:52:32 2022
From: ali at notatether.com (Ali Sherief)
Date: Tue, 26 Jul 2022 08:52:32 +0000
Subject: [bitcoin-dev] Discussion about message verification draft BIP
Message-ID: <_FL_iRf6I5dKwL-X4rEu1qhLGfBA1VG4d5CuMoI217T5jAvIxqBPXKeiAWIGoOrLtVMY1e2mkAiKxQ1Pga8ZtySccPnkA3bjbubPKzUxFWQ=@notatether.com>

Hi guys, I have created a discussion thread for my draft BIP related to message verification on BitcoinTalk:?https://bitcointalk.org/index.php?topic=5407517.0

Feel free to read it and contribute if you wish.

- Ali

From alicexbt at protonmail.com  Tue Jul 26 12:19:32 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Tue, 26 Jul 2022 12:19:32 +0000
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
Message-ID: <Ue6CCWgdkGc1VPF4yAP252kg3h-6U6xCZZ7hs9w6vDM7LBWsAaksRkLIpkrE39HLmI35Fu3cHC3-WA8Q9Ij3Z7YhAqzJbkytBqU9ZbfruB0=@protonmail.com>

Hi Aaradhya,

> As it's not a consensus rule, I think it can be done easily, just needing support from full node operators

A few miners will need to use a lower minrelaytxfee for this to work. I don't think miners would want to lower their profits.

/dev/fd0

Sent with [Proton Mail](https://proton.me/) secure email.

------- Original Message -------
On Tuesday, July 26th, 2022 at 1:56 PM, Aaradhya Chauhan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

I know this might be a sort of repetition for a previous question, but I do want to know from enthusiasts in this group that while Bitcoin was trading at much lower price in its early days, 1 sat/vB was a good dust protection measure. But now, I think it's a bit high for merely a dust protection measure, and should be lowered slightly. Even if not, it should be lowered to half when prices go double than today and keeps oscillating at that point. As it's not a consensus rule, I think it can be done easily, just needing support from full node operators. I support LN but I think transaction affordability should remain constant in the future. If I'm okay to wait in a queue, I should have the option for same affordability for minimum fees in the future as it is today. (Like we still have posts today while email still exists).

Awaiting your response.

Regards
Aaradhya Chauhan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/801c59fe/attachment.html>

From pete at petertodd.org  Tue Jul 26 12:45:12 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 26 Jul 2022 08:45:12 -0400
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
Message-ID: <Yt/h2Jv3m8ZsfZ8v@petertodd.org>

On Tue, Jul 26, 2022 at 01:56:05PM +0530, Aaradhya Chauhan via bitcoin-dev wrote:
> I know this might be a sort of repetition for a previous question, but I do
> want to know from enthusiasts in this group that while Bitcoin was trading
> at much lower price in its early days, 1 sat/vB was a good dust protection
> measure. But now, I think it's a bit high for merely a dust protection
> measure, and should be lowered slightly. Even if not, it should be lowered
> to half when prices go double than today and keeps oscillating at that
> point. As it's not a consensus rule, I think it can be done easily, just
> needing support from full node operators. I support LN but I think
> transaction affordability should remain constant in the future. If I'm okay
> to wait in a queue, I should have the option for same affordability for
> minimum fees in the future as it is today. (Like we still have posts today
> while email still exists).

If we're expecting fee revenue to be significant in the future - with constant
backlogs of low-fee txs - lowering the dust limit now is a good way to ensure
the entire ecosystem is ready to deal with those conditions. We're fairly close
to blocks being full, so you can't argue that the dust limit provides value by
reducing block usage. All it achieves is artificially lowering mempool usage,
putting the Bitcoin system in a no-backlog state that's quite unlike how we're
expecting Bitcoin to operate in the future. And indeed, the state Bitcoin can
operate in at any moment if there is a demand spike.

So I'd suggest removing the fixed dust limit entirely and relying purely on the
mempool size limit to determine what is or is not dust.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/15a41e73/attachment.sig>

From pete at petertodd.org  Tue Jul 26 14:27:56 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 26 Jul 2022 16:27:56 +0200
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <Ue6CCWgdkGc1VPF4yAP252kg3h-6U6xCZZ7hs9w6vDM7LBWsAaksRkLIpkrE39HLmI35Fu3cHC3-WA8Q9Ij3Z7YhAqzJbkytBqU9ZbfruB0=@protonmail.com>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
 <Ue6CCWgdkGc1VPF4yAP252kg3h-6U6xCZZ7hs9w6vDM7LBWsAaksRkLIpkrE39HLmI35Fu3cHC3-WA8Q9Ij3Z7YhAqzJbkytBqU9ZbfruB0=@protonmail.com>
Message-ID: <8CD1F5D4-9260-4BE7-B710-993955AB58C8@petertodd.org>



On July 26, 2022 2:19:32 PM GMT+02:00, alicexbt via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Hi Aaradhya,
>
>> As it's not a consensus rule, I think it can be done easily, just needing support from full node operators
>
>A few miners will need to use a lower minrelaytxfee for this to work. I don't think miners would want to lower their profits.

Whether or not this lowers profits for a particular miner is complex:

https://petertodd.org/2016/block-publication-incentives-for-miners

But to a first approximation, at any fee above zero failing to mine a tx you know about is leaving money on the table.

Anyway even if miners don't actually mine these txs by themselves, with Child-Pays-For-Parent, allowing near-zero txs into your mempool potentially allows you to mine more fees.

From bram at chia.net  Tue Jul 26 16:02:03 2022
From: bram at chia.net (Bram Cohen)
Date: Tue, 26 Jul 2022 09:02:03 -0700
Subject: [bitcoin-dev] On a new community process to specify covenants
In-Reply-To: <CALZpt+E4Ej3KJ4WqkUDTF3DRhPTbUT5mw2c_eHLuxH7w1BbWGg@mail.gmail.com>
References: <CALZpt+FhpZETHP8UpDGgw-Wg=m4Hxm8y9XZ9kXYgmt90_6Zt6w@mail.gmail.com>
 <CAHUJnBDu+PNvER-FmpT8593vX-wAZ1oPWJjQaJ=d7Y4pso_Txw@mail.gmail.com>
 <CALZpt+E4Ej3KJ4WqkUDTF3DRhPTbUT5mw2c_eHLuxH7w1BbWGg@mail.gmail.com>
Message-ID: <CAHUJnBB1wExgJhHUeU88ZMD28s6+9UT3Cfc43_UpK40hJwUFSg@mail.gmail.com>

On Mon, Jul 25, 2022 at 8:21 PM Antoine Riard <antoine.riard at gmail.com>
wrote:

> What would be the canonical definition and examples of capabilities in the
> Bitcoin context ?
>

Payments into vaults which can only be accepted by that vault and are
guaranteed to be subject to the vault's restrictions (the vault has a
capability)

Oracles whose validity can be verified on chain (so transactions can depend
on what they say. The oracle has a capability)

Colored coins whose validity can be verified on chain (the colored coins
have a capability)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/f3d49255/attachment-0001.html>

From jk_14 at op.pl  Tue Jul 26 15:44:55 2022
From: jk_14 at op.pl (jk_14 at op.pl)
Date: Tue, 26 Jul 2022 17:44:55 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <CAJowKgKCUZwMLMhmp8tdZLZRKDjmjkdfWey+pkSm5-tw66ZFYg@mail.gmail.com>
Message-ID: <164899369-e86a243515589da95e0ee1512644068d@pmq7v.m5r2.onet>

"large holders who perform zero transactions will still mine in order to preserve the value of the network"
let me slightly modify the sentence below:
"The Prisoner's Dilemma is a standard example of a game analyzed in game theory that shows why completely rational large holders might not cooperate, even if it appears that it is in their best interests to do so."
I'm pretty sure we will have a textbook case of Prisoner's Dilemma here.
Regards
Jaroslaw
W dniu 2022-07-26 10:20:38 u?ytkownik Erik Aronesty via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> napisa?:
even with zero block reward and minimal fees, large holders who perform zero transactions will still mine in order to preserve the value of the network
?
this is not "mining your own tx", it is unrelated
?
this is "mining at a small loss to preserve your stake"
?
not only don't we need issuance or fees, but also the censorship resistance is not meaningfully improved with issuance?
?
On Mon, Jul 18, 2022 at 3:14 PM Erik Aronesty <erik at q32.com> wrote:
subsidy to directly tie miner revenue to the total value of Bitcoin
makes it not exactly how we want to incentivise a service that keeps
?
again, this is meaningless.? ?if the fees aren't enough?to keep? bitcoin secure for large transactions, then large holders are incentivised to mine
?
that's it.
?
it's not complicated
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/b91c65b7/attachment.html>

From achow101-lists at achow101.com  Tue Jul 26 21:41:12 2022
From: achow101-lists at achow101.com (Andrew Chow)
Date: Tue, 26 Jul 2022 21:41:12 +0000
Subject: [bitcoin-dev] BIP Proposal: Receiving and Change Derivation Paths
	in a Single Descriptor
Message-ID: <d97c9d44-730e-cbb4-ce8b-19bdf1ea1e2d@achow101.com>

Hi All,

I would like to propose a BIP that de-duplicates and simplifies how we
represent descriptors for receiving and change addresses. Under the
existing BIPs, this requires two descriptors, where the vast majority of
the descriptors are the same, except for a single derivation path
element. This proposal allows descriptors to have a single derivation
path element that can specify a pair of indexes. Parsers would then
expand these into two almost identical descriptors with the difference
being that the first uses the first of the pair of indexes, and the
second uses the second.

The proposed notation is `<a;b>`. As an example,
`wpkh(xpub.../0/<0;1>/*)` would be expanded into `wpkh(xpub.../0/0/*)`
and `wpkh(xpub.../0/1/*)`.

This also works for descriptors involving multiple keys - the first
element in every pair is used for the first descriptor, and the second
element of each pair in the second descriptor.

The full text of the BIP can be found at
https://github.com/achow101/bips/blob/bip-multipath-descs/bip-multipath-descs.mediawiki
and also copied below. An implementation of it to Bitcoin Core is
available at https://github.com/bitcoin/bitcoin/pull/22838.

Any feedback on this would be appreciated.

Thanks,
Andrew Chow

---

<pre>
 ? BIP: multipath-descs
 ? Layer: Applications
 ? Title: Multipath Descriptor Key Expressions
 ? Author: Andrew Chow <andrew at achow101.com>
 ? Comments-Summary: No comments yet.
 ? Comments-URI:
https://github.com/bitcoin/bips/wiki/Comments:BIP-multipath-descs
 ? Status: Draft
 ? Type: Informational
 ? Created: 2022-07-26
 ? License: BSD-2-Clause
</pre>

==Abstract==

This document specifies a modification to Key Expressions of Descriptors
that are described in BIP 380.
This modification allows Key Expressions to indicate BIP 32 derivation
path steps that can have multiple values.

==Copyright==

This BIP is licensed under the BSD 2-clause license.

==Motivation==

Descriptors can describe the scripts that are used in a wallet, but
wallets often require at least two descriptors for all of the scripts
that they watch for.
Wallets typically have one descriptor for producing receiving addresses,
and the other for change addresses.
These descriptors are often extremely similar - they produce the same
types of scripts, derive keys from the same master key, and use
derivation paths that are almost identical.
The only differences are in the derivation path where one of the steps
will be different between the descriptors.
Thus it is useful to have a notation to represent both descriptors as a
single descriptor where one of the derivation steps is a pair of values.

==Specification==

For extended keys and their derivations paths in a Key Expression, BIP
380 states:

* <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
extended private key (as defined in BIP 32)
** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
elements indicating BIP 32 derivation steps to be taken after the given
extended key.
** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
step to denote all direct unhardened or hardened children.

This is modifed to state:

* <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
extended private key (as defined in BIP 32)
** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
elements indicating BIP 32 derivation steps to be taken after the given
extended key.
** Followed by zero or one <tt>/<NUM;NUM></tt> (<tt>NUM</tt> may be
followed by <tt>h</tt> to indicated a hardened step)? path element
indicating a pair of BIP 32 derivation steps to be taken after the given
extended key.
** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
elements indicating BIP 32 derivation steps to be taken after the given
extended key.
** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
step to denote all direct unhardened or hardened children.

When a <tt>/<NUM;NUM></tt> is encountered, parsers should produce two
descriptors where the first descriptor uses the first <tt>NUM</tt>, and
a second descriptor uses the second <tt>NUM</tt>.

The common use case for this is to represent descriptors for producing
receiving and change addresses.
When interpreting for this use case, wallets should use the first
descriptor for producing receiving addresses, and the second descriptor
for producing change addresses.
For this use case, the element will commonly be the value <tt>/<0;1></tt>

==Test Vectors==

TBD

==Backwards Compatibility==

This is an addition to the Key Expressions defined in BIP 380.
Key Expressions using the format described in BIP 380 are compatible
with this modification and parsers that implement this will still be
able to parse such descriptors.
However as this is an addition to Key Expressions, older parsers will
not be able to understand such descriptors.

This modification to Key Expressions uses two new characters: <tt><</tt>
and <tt>;</tt>.
These are part of the descriptor character set and so are covered by the
checksum algorithm.
As these are previously unused characters, old parsers will not
accidentally mistake them for indicating something else.

==Reference Implementation==

https://github.com/bitcoin/bitcoin/pull/22838



From stick at satoshilabs.com  Tue Jul 26 21:56:10 2022
From: stick at satoshilabs.com (Pavol Rusnak)
Date: Tue, 26 Jul 2022 23:56:10 +0200
Subject: [bitcoin-dev] BIP Proposal: Receiving and Change Derivation
 Paths in a Single Descriptor
In-Reply-To: <d97c9d44-730e-cbb4-ce8b-19bdf1ea1e2d@achow101.com>
References: <d97c9d44-730e-cbb4-ce8b-19bdf1ea1e2d@achow101.com>
Message-ID: <CAF90AvmdfzpE2TrXHMD4=DJZcq2U1muCcBZndMiRQLw1p57kYQ@mail.gmail.com>

Thanks Andrew for this BIP. We've been already using this for quite some
time for Trezor in production.

Just one clarification: Should <NUM;NUM;NUM>, <NUM;NUM;NUM;NUM>, ... also
work or we only aim to support only tuples of exactly two values?

On Tue, 26 Jul 2022 at 23:51, Andrew Chow via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi All,
>
> I would like to propose a BIP that de-duplicates and simplifies how we
> represent descriptors for receiving and change addresses. Under the
> existing BIPs, this requires two descriptors, where the vast majority of
> the descriptors are the same, except for a single derivation path
> element. This proposal allows descriptors to have a single derivation
> path element that can specify a pair of indexes. Parsers would then
> expand these into two almost identical descriptors with the difference
> being that the first uses the first of the pair of indexes, and the
> second uses the second.
>
> The proposed notation is `<a;b>`. As an example,
> `wpkh(xpub.../0/<0;1>/*)` would be expanded into `wpkh(xpub.../0/0/*)`
> and `wpkh(xpub.../0/1/*)`.
>
> This also works for descriptors involving multiple keys - the first
> element in every pair is used for the first descriptor, and the second
> element of each pair in the second descriptor.
>
> The full text of the BIP can be found at
>
> https://github.com/achow101/bips/blob/bip-multipath-descs/bip-multipath-descs.mediawiki
> and also copied below. An implementation of it to Bitcoin Core is
> available at https://github.com/bitcoin/bitcoin/pull/22838.
>
> Any feedback on this would be appreciated.
>
> Thanks,
> Andrew Chow
>
> ---
>
> <pre>
>    BIP: multipath-descs
>    Layer: Applications
>    Title: Multipath Descriptor Key Expressions
>    Author: Andrew Chow <andrew at achow101.com>
>    Comments-Summary: No comments yet.
>    Comments-URI:
> https://github.com/bitcoin/bips/wiki/Comments:BIP-multipath-descs
>    Status: Draft
>    Type: Informational
>    Created: 2022-07-26
>    License: BSD-2-Clause
> </pre>
>
> ==Abstract==
>
> This document specifies a modification to Key Expressions of Descriptors
> that are described in BIP 380.
> This modification allows Key Expressions to indicate BIP 32 derivation
> path steps that can have multiple values.
>
> ==Copyright==
>
> This BIP is licensed under the BSD 2-clause license.
>
> ==Motivation==
>
> Descriptors can describe the scripts that are used in a wallet, but
> wallets often require at least two descriptors for all of the scripts
> that they watch for.
> Wallets typically have one descriptor for producing receiving addresses,
> and the other for change addresses.
> These descriptors are often extremely similar - they produce the same
> types of scripts, derive keys from the same master key, and use
> derivation paths that are almost identical.
> The only differences are in the derivation path where one of the steps
> will be different between the descriptors.
> Thus it is useful to have a notation to represent both descriptors as a
> single descriptor where one of the derivation steps is a pair of values.
>
> ==Specification==
>
> For extended keys and their derivations paths in a Key Expression, BIP
> 380 states:
>
> * <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
> extended private key (as defined in BIP 32)
> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
> elements indicating BIP 32 derivation steps to be taken after the given
> extended key.
> ** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
> step to denote all direct unhardened or hardened children.
>
> This is modifed to state:
>
> * <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
> extended private key (as defined in BIP 32)
> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
> elements indicating BIP 32 derivation steps to be taken after the given
> extended key.
> ** Followed by zero or one <tt>/<NUM;NUM></tt> (<tt>NUM</tt> may be
> followed by <tt>h</tt> to indicated a hardened step)  path element
> indicating a pair of BIP 32 derivation steps to be taken after the given
> extended key.
> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
> elements indicating BIP 32 derivation steps to be taken after the given
> extended key.
> ** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
> step to denote all direct unhardened or hardened children.
>
> When a <tt>/<NUM;NUM></tt> is encountered, parsers should produce two
> descriptors where the first descriptor uses the first <tt>NUM</tt>, and
> a second descriptor uses the second <tt>NUM</tt>.
>
> The common use case for this is to represent descriptors for producing
> receiving and change addresses.
> When interpreting for this use case, wallets should use the first
> descriptor for producing receiving addresses, and the second descriptor
> for producing change addresses.
> For this use case, the element will commonly be the value <tt>/<0;1></tt>
>
> ==Test Vectors==
>
> TBD
>
> ==Backwards Compatibility==
>
> This is an addition to the Key Expressions defined in BIP 380.
> Key Expressions using the format described in BIP 380 are compatible
> with this modification and parsers that implement this will still be
> able to parse such descriptors.
> However as this is an addition to Key Expressions, older parsers will
> not be able to understand such descriptors.
>
> This modification to Key Expressions uses two new characters: <tt><</tt>
> and <tt>;</tt>.
> These are part of the descriptor character set and so are covered by the
> checksum algorithm.
> As these are previously unused characters, old parsers will not
> accidentally mistake them for indicating something else.
>
> ==Reference Implementation==
>
> https://github.com/bitcoin/bitcoin/pull/22838
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>


-- 
Best Regards / S pozdravom,

Pavol "stick" Rusnak
Co-Founder, SatoshiLabs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/cef0a54a/attachment-0001.html>

From achow101-lists at achow101.com  Tue Jul 26 22:27:58 2022
From: achow101-lists at achow101.com (Andrew Chow)
Date: Tue, 26 Jul 2022 22:27:58 +0000
Subject: [bitcoin-dev] BIP Proposal: Receiving and Change Derivation
	Paths in a Single Descriptor
Message-ID: <c04b2ed0-d50e-9921-2aa4-b1534fca14a0@achow101.com>

I went with just tuples of two values because that's easier to implement and targets exactly what people were asking for. However I don't see why this couldn't generalize to any sized tuples. As long as the tuples are all the same length, and the limit is one tuple per key expression, then we don't get any combinatorial blowup issues.

Are there any use cases for variable length tuples?

Andrew

On 07/26/2022 05:56 PM, Pavol Rusnak wrote:

> Thanks Andrew for this BIP. We've been already using this for quite some time for Trezor in production.
>
> Just one clarification: Should <NUM;NUM;NUM>, <NUM;NUM;NUM;NUM>, ... also work or we only aim to support only tuples of exactly two values?
>
> On Tue, 26 Jul 2022 at 23:51, Andrew Chow via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi All,
>>
>> I would like to propose a BIP that de-duplicates and simplifies how we
>> represent descriptors for receiving and change addresses. Under the
>> existing BIPs, this requires two descriptors, where the vast majority of
>> the descriptors are the same, except for a single derivation path
>> element. This proposal allows descriptors to have a single derivation
>> path element that can specify a pair of indexes. Parsers would then
>> expand these into two almost identical descriptors with the difference
>> being that the first uses the first of the pair of indexes, and the
>> second uses the second.
>>
>> The proposed notation is `<a;b>`. As an example,
>> `wpkh(xpub.../0/<0;1>/*)` would be expanded into `wpkh(xpub.../0/0/*)`
>> and `wpkh(xpub.../0/1/*)`.
>>
>> This also works for descriptors involving multiple keys - the first
>> element in every pair is used for the first descriptor, and the second
>> element of each pair in the second descriptor.
>>
>> The full text of the BIP can be found at
>> https://github.com/achow101/bips/blob/bip-multipath-descs/bip-multipath-descs.mediawiki
>> and also copied below. An implementation of it to Bitcoin Core is
>> available at https://github.com/bitcoin/bitcoin/pull/22838.
>>
>> Any feedback on this would be appreciated.
>>
>> Thanks,
>> Andrew Chow
>>
>> ---
>>
>> <pre>
>> BIP: multipath-descs
>> Layer: Applications
>> Title: Multipath Descriptor Key Expressions
>> Author: Andrew Chow <andrew at achow101.com>
>> Comments-Summary: No comments yet.
>> Comments-URI:
>> https://github.com/bitcoin/bips/wiki/Comments:BIP-multipath-descs
>> Status: Draft
>> Type: Informational
>> Created: 2022-07-26
>> License: BSD-2-Clause
>> </pre>
>>
>> ==Abstract==
>>
>> This document specifies a modification to Key Expressions of Descriptors
>> that are described in BIP 380.
>> This modification allows Key Expressions to indicate BIP 32 derivation
>> path steps that can have multiple values.
>>
>> ==Copyright==
>>
>> This BIP is licensed under the BSD 2-clause license.
>>
>> ==Motivation==
>>
>> Descriptors can describe the scripts that are used in a wallet, but
>> wallets often require at least two descriptors for all of the scripts
>> that they watch for.
>> Wallets typically have one descriptor for producing receiving addresses,
>> and the other for change addresses.
>> These descriptors are often extremely similar - they produce the same
>> types of scripts, derive keys from the same master key, and use
>> derivation paths that are almost identical.
>> The only differences are in the derivation path where one of the steps
>> will be different between the descriptors.
>> Thus it is useful to have a notation to represent both descriptors as a
>> single descriptor where one of the derivation steps is a pair of values.
>>
>> ==Specification==
>>
>> For extended keys and their derivations paths in a Key Expression, BIP
>> 380 states:
>>
>> * <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
>> extended private key (as defined in BIP 32)
>> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
>> elements indicating BIP 32 derivation steps to be taken after the given
>> extended key.
>> ** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
>> step to denote all direct unhardened or hardened children.
>>
>> This is modifed to state:
>>
>> * <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
>> extended private key (as defined in BIP 32)
>> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
>> elements indicating BIP 32 derivation steps to be taken after the given
>> extended key.
>> ** Followed by zero or one <tt>/<NUM;NUM></tt> (<tt>NUM</tt> may be
>> followed by <tt>h</tt> to indicated a hardened step) path element
>> indicating a pair of BIP 32 derivation steps to be taken after the given
>> extended key.
>> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
>> elements indicating BIP 32 derivation steps to be taken after the given
>> extended key.
>> ** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
>> step to denote all direct unhardened or hardened children.
>>
>> When a <tt>/<NUM;NUM></tt> is encountered, parsers should produce two
>> descriptors where the first descriptor uses the first <tt>NUM</tt>, and
>> a second descriptor uses the second <tt>NUM</tt>.
>>
>> The common use case for this is to represent descriptors for producing
>> receiving and change addresses.
>> When interpreting for this use case, wallets should use the first
>> descriptor for producing receiving addresses, and the second descriptor
>> for producing change addresses.
>> For this use case, the element will commonly be the value <tt>/<0;1></tt>
>>
>> ==Test Vectors==
>>
>> TBD
>>
>> ==Backwards Compatibility==
>>
>> This is an addition to the Key Expressions defined in BIP 380.
>> Key Expressions using the format described in BIP 380 are compatible
>> with this modification and parsers that implement this will still be
>> able to parse such descriptors.
>> However as this is an addition to Key Expressions, older parsers will
>> not be able to understand such descriptors.
>>
>> This modification to Key Expressions uses two new characters: <tt><</tt>
>> and <tt>;</tt>.
>> These are part of the descriptor character set and so are covered by the
>> checksum algorithm.
>> As these are previously unused characters, old parsers will not
>> accidentally mistake them for indicating something else.
>>
>> ==Reference Implementation==
>>
>> https://github.com/bitcoin/bitcoin/pull/22838
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
> --
>
> Best Regards / S pozdravom,
>
> Pavol "stick" Rusnak
> Co-Founder, SatoshiLabs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/a37dc703/attachment.html>

From alicexbt at protonmail.com  Tue Jul 26 19:14:58 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Tue, 26 Jul 2022 19:14:58 +0000
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <8CD1F5D4-9260-4BE7-B710-993955AB58C8@petertodd.org>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
 <Ue6CCWgdkGc1VPF4yAP252kg3h-6U6xCZZ7hs9w6vDM7LBWsAaksRkLIpkrE39HLmI35Fu3cHC3-WA8Q9Ij3Z7YhAqzJbkytBqU9ZbfruB0=@protonmail.com>
 <8CD1F5D4-9260-4BE7-B710-993955AB58C8@petertodd.org>
Message-ID: <SppYz6wiC4AWMEMr_1eWj67uOpDvBQQ5c3HVEjx53n3qVXB8cgm2wO3hOeQIqFewFXonL85fYFcmsjDfdnrv8l0fdVm8TGTb9yVfdtlV61c=@protonmail.com>

Hi Peter,

> But to a first approximation, at any fee above zero failing to mine a tx you know about is leaving money on the table

Let's assume 10000 people go from A to B every day in flight. They buy tickets for different prices and some of them are looking to pay the minimum even if it's a morning flight, not preferred seat etc. If the minimum price for ticket drops, will this increase the revenue for airlines?

Some people who avoided flight earlier might book with new minimum although most of them already figured out other ways to travel or paid the old minimum. Maximum people or weight for a flight would still remain the same.

/dev/fd0

Sent with Proton Mail secure email.

------- Original Message -------
On Tuesday, July 26th, 2022 at 7:57 PM, Peter Todd <pete at petertodd.org> wrote:


>
> On July 26, 2022 2:19:32 PM GMT+02:00, alicexbt via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:
>
> > Hi Aaradhya,
> >
> > > As it's not a consensus rule, I think it can be done easily, just needing support from full node operators
> >
> > A few miners will need to use a lower minrelaytxfee for this to work. I don't think miners would want to lower their profits.
>
>
> Whether or not this lowers profits for a particular miner is complex:
>
> https://petertodd.org/2016/block-publication-incentives-for-miners
>
> But to a first approximation, at any fee above zero failing to mine a tx you know about is leaving money on the table.
>
> Anyway even if miners don't actually mine these txs by themselves, with Child-Pays-For-Parent, allowing near-zero txs into your mempool potentially allows you to mine more fees.

From stick at satoshilabs.com  Wed Jul 27 08:44:36 2022
From: stick at satoshilabs.com (Pavol Rusnak)
Date: Wed, 27 Jul 2022 10:44:36 +0200
Subject: [bitcoin-dev] BIP Proposal: Receiving and Change Derivation
 Paths in a Single Descriptor
In-Reply-To: <c04b2ed0-d50e-9921-2aa4-b1534fca14a0@achow101.com>
References: <c04b2ed0-d50e-9921-2aa4-b1534fca14a0@achow101.com>
Message-ID: <CAF90AvkZWqRv_hwj2qacOZjpSjdenb-51PcXFgAG4Z985m7BBQ@mail.gmail.com>

On Wed, 27 Jul 2022 at 00:28, Andrew Chow <achow101-lists at achow101.com>
wrote:

> However I don't see why this couldn't generalize to any sized tuples. As
> long as the tuples are all the same length, and the limit is one tuple per
> key expression, then we don't get any combinatorial blowup issues.
>

I think it's worthwhile to generalize for any sized tuples. I don't have
any existing particular use case in mind, because BIP-44, BIP-84, etc. are
fine with just using <0;1>, but there might be some upcoming standards in
the future that will want to introduce more sub-paths.


-- 
Best Regards / S pozdravom,

Pavol "stick" Rusnak
Co-Founder, SatoshiLabs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220727/d71a012a/attachment.html>

From erik at q32.com  Tue Jul 26 17:05:58 2022
From: erik at q32.com (Erik Aronesty)
Date: Tue, 26 Jul 2022 13:05:58 -0400
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
In-Reply-To: <164899369-e86a243515589da95e0ee1512644068d@pmq7v.m5r2.onet>
References: <CAJowKgKCUZwMLMhmp8tdZLZRKDjmjkdfWey+pkSm5-tw66ZFYg@mail.gmail.com>
 <164899369-e86a243515589da95e0ee1512644068d@pmq7v.m5r2.onet>
Message-ID: <CAJowKg+7V5i0XVZMbw+q-T7WoVfrrF2CCa9k=Y6VC8-uJp1xfw@mail.gmail.com>

> I'm pretty sure we will have a textbook case of Prisoner's Dilemma here.

no, there is no large payoff for betrayal
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220726/5f2447ef/attachment-0001.html>

From jk_14 at op.pl  Tue Jul 26 20:01:25 2022
From: jk_14 at op.pl (jk_14 at op.pl)
Date: Tue, 26 Jul 2022 22:01:25 +0200
Subject: [bitcoin-dev] Surprisingly, Tail Emission Is Not Inflationary
Message-ID: <165134018-3e03339264bd562dac266aa835d623df@pmq5v.m5r2.onet>



Let's assume fees don't compensate low block reward.
And for example every 10 BTC holding needs to be secured by one Antminer S19 running.

In an ideal world every large bitcoin holder will run proper amount of ASICs and run it at loss.
The holders of less than 10 BTC - will organize "group pays", this time for sharing loss (electricity costs)
(exactly the same way like people made "group buys" of ASIC hardware in 2013)


Pretty sure in real world it won't work. And there is a large payoff for betrayal, or more precise:
People will think there is tiny punishment for betrayal.

Even Bitcoin can't beat a human nature.


Regards
Jaroslaw


W dniu 2022-07-26 19:06:12 u?ytkownik Erik Aronesty <erik at q32.com> napisa?:
> I'm pretty sure we will have a textbook case of Prisoner's Dilemma here.


no, there is no large payoff for betrayal




From vjudeu at gazeta.pl  Wed Jul 27 04:10:00 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Wed, 27 Jul 2022 06:10:00 +0200
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <Yt/h2Jv3m8ZsfZ8v@petertodd.org>
Message-ID: <165817500-9cd6c638a6ebf3036340d99291955e18@pmq2v.m5r2.onet>

> So I'd suggest removing the fixed dust limit entirely and relying purely on the mempool size limit to determine what is or is not dust.

Just use those settings in your node:

minrelaytxfee=0.00000000
blockmintxfee=0.00000000
dustrelayfee=0.00000000

No changes in source code are needed, nodes can change their limits without asking anyone. And if some node is a miner, then it can be enforced. But if not, then still, free transactions are useful for communication (if more of them will be accepted, then we will switch to negative fee transactions with proper sighashes, then it will be very unlikely that miners will voluntarily add coins, so it will remain useful for communication).

On 2022-07-26 14:45:35 user Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Tue, Jul 26, 2022 at 01:56:05PM +0530, Aaradhya Chauhan via bitcoin-dev wrote:
> I know this might be a sort of repetition for a previous question, but I do
> want to know from enthusiasts in this group that while Bitcoin was trading
> at much lower price in its early days, 1 sat/vB was a good dust protection
> measure. But now, I think it's a bit high for merely a dust protection
> measure, and should be lowered slightly. Even if not, it should be lowered
> to half when prices go double than today and keeps oscillating at that
> point. As it's not a consensus rule, I think it can be done easily, just
> needing support from full node operators. I support LN but I think
> transaction affordability should remain constant in the future. If I'm okay
> to wait in a queue, I should have the option for same affordability for
> minimum fees in the future as it is today. (Like we still have posts today
> while email still exists).

If we're expecting fee revenue to be significant in the future - with constant
backlogs of low-fee txs - lowering the dust limit now is a good way to ensure
the entire ecosystem is ready to deal with those conditions. We're fairly close
to blocks being full, so you can't argue that the dust limit provides value by
reducing block usage. All it achieves is artificially lowering mempool usage,
putting the Bitcoin system in a no-backlog state that's quite unlike how we're
expecting Bitcoin to operate in the future. And indeed, the state Bitcoin can
operate in at any moment if there is a demand spike.

So I'd suggest removing the fixed dust limit entirely and relying purely on the
mempool size limit to determine what is or is not dust.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From craigraw at gmail.com  Wed Jul 27 07:57:19 2022
From: craigraw at gmail.com (Craig Raw)
Date: Wed, 27 Jul 2022 09:57:19 +0200
Subject: [bitcoin-dev] BIP Proposal: Receiving and Change Derivation
 Paths in a Single Descriptor
In-Reply-To: <d97c9d44-730e-cbb4-ce8b-19bdf1ea1e2d@achow101.com>
References: <d97c9d44-730e-cbb4-ce8b-19bdf1ea1e2d@achow101.com>
Message-ID: <CAPR5oBNYgYzcxb4+8Qyw2_HO4uFWOAuJZwZ+8xNUzcLWdRYfcw@mail.gmail.com>

Thanks Andrew for proposing the BIP, I have used this syntax in Sparrow for
some time now.

I find a single, compact descriptor for a wallet is important when copying
out as a backup, particularly onto durable media. More so when it is a
multisig wallet that ideally requires a backup of all the xpubs. Multipath
descriptors as proposed in this BIP address this need well.

Craig

On Tue, Jul 26, 2022 at 11:51 PM Andrew Chow via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi All,
>
> I would like to propose a BIP that de-duplicates and simplifies how we
> represent descriptors for receiving and change addresses. Under the
> existing BIPs, this requires two descriptors, where the vast majority of
> the descriptors are the same, except for a single derivation path
> element. This proposal allows descriptors to have a single derivation
> path element that can specify a pair of indexes. Parsers would then
> expand these into two almost identical descriptors with the difference
> being that the first uses the first of the pair of indexes, and the
> second uses the second.
>
> The proposed notation is `<a;b>`. As an example,
> `wpkh(xpub.../0/<0;1>/*)` would be expanded into `wpkh(xpub.../0/0/*)`
> and `wpkh(xpub.../0/1/*)`.
>
> This also works for descriptors involving multiple keys - the first
> element in every pair is used for the first descriptor, and the second
> element of each pair in the second descriptor.
>
> The full text of the BIP can be found at
>
> https://github.com/achow101/bips/blob/bip-multipath-descs/bip-multipath-descs.mediawiki
> and also copied below. An implementation of it to Bitcoin Core is
> available at https://github.com/bitcoin/bitcoin/pull/22838.
>
> Any feedback on this would be appreciated.
>
> Thanks,
> Andrew Chow
>
> ---
>
> <pre>
>    BIP: multipath-descs
>    Layer: Applications
>    Title: Multipath Descriptor Key Expressions
>    Author: Andrew Chow <andrew at achow101.com>
>    Comments-Summary: No comments yet.
>    Comments-URI:
> https://github.com/bitcoin/bips/wiki/Comments:BIP-multipath-descs
>    Status: Draft
>    Type: Informational
>    Created: 2022-07-26
>    License: BSD-2-Clause
> </pre>
>
> ==Abstract==
>
> This document specifies a modification to Key Expressions of Descriptors
> that are described in BIP 380.
> This modification allows Key Expressions to indicate BIP 32 derivation
> path steps that can have multiple values.
>
> ==Copyright==
>
> This BIP is licensed under the BSD 2-clause license.
>
> ==Motivation==
>
> Descriptors can describe the scripts that are used in a wallet, but
> wallets often require at least two descriptors for all of the scripts
> that they watch for.
> Wallets typically have one descriptor for producing receiving addresses,
> and the other for change addresses.
> These descriptors are often extremely similar - they produce the same
> types of scripts, derive keys from the same master key, and use
> derivation paths that are almost identical.
> The only differences are in the derivation path where one of the steps
> will be different between the descriptors.
> Thus it is useful to have a notation to represent both descriptors as a
> single descriptor where one of the derivation steps is a pair of values.
>
> ==Specification==
>
> For extended keys and their derivations paths in a Key Expression, BIP
> 380 states:
>
> * <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
> extended private key (as defined in BIP 32)
> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
> elements indicating BIP 32 derivation steps to be taken after the given
> extended key.
> ** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
> step to denote all direct unhardened or hardened children.
>
> This is modifed to state:
>
> * <tt>xpub</tt> encoded extended public key or <tt>xprv</tt> encoded
> extended private key (as defined in BIP 32)
> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
> elements indicating BIP 32 derivation steps to be taken after the given
> extended key.
> ** Followed by zero or one <tt>/<NUM;NUM></tt> (<tt>NUM</tt> may be
> followed by <tt>h</tt> to indicated a hardened step)  path element
> indicating a pair of BIP 32 derivation steps to be taken after the given
> extended key.
> ** Followed by zero or more <tt>/NUM</tt> or <tt>/NUMh</tt> path
> elements indicating BIP 32 derivation steps to be taken after the given
> extended key.
> ** Optionally followed by a single <tt>/*</tt> or <tt>/*h</tt> final
> step to denote all direct unhardened or hardened children.
>
> When a <tt>/<NUM;NUM></tt> is encountered, parsers should produce two
> descriptors where the first descriptor uses the first <tt>NUM</tt>, and
> a second descriptor uses the second <tt>NUM</tt>.
>
> The common use case for this is to represent descriptors for producing
> receiving and change addresses.
> When interpreting for this use case, wallets should use the first
> descriptor for producing receiving addresses, and the second descriptor
> for producing change addresses.
> For this use case, the element will commonly be the value <tt>/<0;1></tt>
>
> ==Test Vectors==
>
> TBD
>
> ==Backwards Compatibility==
>
> This is an addition to the Key Expressions defined in BIP 380.
> Key Expressions using the format described in BIP 380 are compatible
> with this modification and parsers that implement this will still be
> able to parse such descriptors.
> However as this is an addition to Key Expressions, older parsers will
> not be able to understand such descriptors.
>
> This modification to Key Expressions uses two new characters: <tt><</tt>
> and <tt>;</tt>.
> These are part of the descriptor character set and so are covered by the
> checksum algorithm.
> As these are previously unused characters, old parsers will not
> accidentally mistake them for indicating something else.
>
> ==Reference Implementation==
>
> https://github.com/bitcoin/bitcoin/pull/22838
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220727/91885f13/attachment-0001.html>

From pete at petertodd.org  Wed Jul 27 11:50:23 2022
From: pete at petertodd.org (Peter Todd)
Date: Wed, 27 Jul 2022 13:50:23 +0200
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <165817500-9cd6c638a6ebf3036340d99291955e18@pmq2v.m5r2.onet>
References: <165817500-9cd6c638a6ebf3036340d99291955e18@pmq2v.m5r2.onet>
Message-ID: <BFCDB019-B2D3-4EBF-B31A-FDF6FEAFDFDE@petertodd.org>



On July 27, 2022 6:10:00 AM GMT+02:00, vjudeu via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> So I'd suggest removing the fixed dust limit entirely and relying purely on the mempool size limit to determine what is or is not dust.
>
>Just use those settings in your node:
>
>minrelaytxfee=0.00000000
>blockmintxfee=0.00000000
>dustrelayfee=0.00000000
>
>No changes in source code are needed, nodes can change their limits without asking anyone. And if some node is a miner, then it can be enforced. But if not, then still, free transactions are useful for communication (if more of them will be accepted, then we will switch to negative fee transactions with proper sighashes, then it will be very unlikely that miners will voluntarily add coins, so it will remain useful for communication).

It's pointless for individual nodes to make changes like this on their own. Without like-minded peers this achieves nothing. What is relevant is network wide defaults.

The only time those settings are useful is special situations like miners who want to push txs to their own memlools. For the _vast_ majority of users changing defaults achieves absolutely nothing.

From vjudeu at gazeta.pl  Wed Jul 27 12:18:56 2022
From: vjudeu at gazeta.pl (vjudeu at gazeta.pl)
Date: Wed, 27 Jul 2022 14:18:56 +0200
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <BFCDB019-B2D3-4EBF-B31A-FDF6FEAFDFDE@petertodd.org>
Message-ID: <72842561-5e8fd1668dcef89a8b26cb355de840df@pmq6v.m5r2.onet>

> It's pointless for individual nodes to make changes like this on their own.

It's pointless only if you assume that mining is centralized. And it's pointless if you also assume that there is no batching. By using different sighashes, batching is definitely possible. In case of one-input-one-output transactions, they should use SIGHASH_SINGLE|SIGHASH_ANYONECANPAY, then it is possible to grab a lot of such transactions, and combine them all into a single transaction, saving some bytes, so fees for each user can be lower than one satoshi per virtual byte, when it is counted in non-batched version. In general, it should be possible to use SIGHASH_ANYONECANPAY by default, and use SIGHASH_PREVOUT_SOMETHING to make signatures from next transactions resistant to changes like adding more inputs and outputs.

> The only time those settings are useful is special situations like miners who want to push txs to their own memlools.

So they could be more useful, if it would be possible to mine a block with lower than required difficulty (a share), and be rewarded for that in P2P way. So, if some miner collected 7 BTC as a reward (6.25 BTC plus 0.75 BTC in fees), then if that miner created 100 times easier block than needed, it should be rewarded with 0.07 BTC in a P2P way. And if block rewards are based on fees, then it makes perfect sense to collect for example 0.07 BTC in transaction fees, and mine it, leaving the rest for other miners, then they will have an incentive to build on top of that.


On 2022-07-27 14:18:21 user Peter Todd <pete at petertodd.org> wrote:
> 

On July 27, 2022 6:10:00 AM GMT+02:00, vjudeu via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> So I'd suggest removing the fixed dust limit entirely and relying purely on the mempool size limit to determine what is or is not dust.
>
>Just use those settings in your node:
>
>minrelaytxfee=0.00000000
>blockmintxfee=0.00000000
>dustrelayfee=0.00000000
>
>No changes in source code are needed, nodes can change their limits without asking anyone. And if some node is a miner, then it can be enforced. But if not, then still, free transactions are useful for communication (if more of them will be accepted, then we will switch to negative fee transactions with proper sighashes, then it will be very unlikely that miners will voluntarily add coins, so it will remain useful for communication).

It's pointless for individual nodes to make changes like this on their own. Without like-minded peers this achieves nothing. What is relevant is network wide defaults.

The only time those settings are useful is special situations like miners who want to push txs to their own memlools. For the _vast_ majority of users changing defaults achieves absolutely nothing.


From achow101-lists at achow101.com  Wed Jul 27 14:58:28 2022
From: achow101-lists at achow101.com (Andrew Chow)
Date: Wed, 27 Jul 2022 14:58:28 +0000
Subject: [bitcoin-dev] BIP Proposal: Receiving and Change Derivation
	Paths in a Single Descriptor
Message-ID: <7bded922-5067-caee-e5be-9f620cfc7404@achow101.com>

I've updated the BIP text to allow arbitrary length tuples.

On 07/27/2022 04:44 AM, Pavol Rusnak wrote:

> On Wed, 27 Jul 2022 at 00:28, Andrew Chow <achow101-lists at achow101.com> wrote:
>
>> However I don't see why this couldn't generalize to any sized tuples. As long as the tuples are all the same length, and the limit is one tuple per key expression, then we don't get any combinatorial blowup issues.
>
> I think it's worthwhile to generalize for any sized tuples. I don't have any existing particular use case in mind, because BIP-44, BIP-84, etc. are fine with just using <0;1>, but there might be some upcoming standards in the future that will want to introduce more sub-paths.
>
> --
>
> Best Regards / S pozdravom,
>
> Pavol "stick" Rusnak
> Co-Founder, SatoshiLabs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220727/d7691026/attachment.html>

From ali at notatether.com  Thu Jul 28 07:27:02 2022
From: ali at notatether.com (Ali Sherief)
Date: Thu, 28 Jul 2022 07:27:02 +0000
Subject: [bitcoin-dev] Zero-knowledge proofs e.g. Schnorr are incompatible
	with address signing without compromise
Message-ID: <bG2Fk0bM_4lbwijBwZRiGgCAmktVOFSY5vR5k1D7QSc8imn9NWXxfOLPgMl5p22vfAPDHeuEA_p6TDhU7qGFoVmZok57RzA9rEV1LJzHpsM=@notatether.com>

Here is an except of the BIP-notatether-messageverify thread, where I contemplate how to implement address/message signing support for Taproot i.e. Schnorr signatures, in my post at:

https://bitcointalk.org/index.php?topic=5407517.msg60642144#msg60642144

(stripped of bbcode formatting)

======

So I have mostly figured out what should be done regarding the signing and verification from Taproot addresses. The good news is that BIP340 has already made this a standard saving me the headache of having to re-implement this all over again (not that I want to in the first place).

Despite being a draft, I see it as a net positive to include this signing format for Taproot addresses ahead of time i.e. before wallets even support Taproot addresses yet.

A few notes before I begin the quote of relevant parts:

- Eventually they chose "BIP340/challenge" as the key prefix aka. the tag. So I guess a different tag "BIP-notatether" would be incompatible with that so I drop my signing tag.

- They selected encoding only the x coord of R and P (not that this is relevant to use since I chose (e,s) encoding format), and they chose Y must be the even for P and R. It might not be relevant here since I can also use (e,s) as a signature format, but I am having great difficulty deciding between that or (R,s). I believe that only one of these formats should be used for maximum consistency. [But I do not see wallets placing multiple fields for public keys just to support batch verification.]

- The public key is required for all Schnorr verification schemes. This complicates the message signing/verification UI as "address" is supposed to contain an address, however the verification scheme cannot recover the public key (as achow101 mentioned). These differences might call for making a separate draft just for Schnorr signatures. Personally, I want to refrain from making any decision until I review the BIP137 signatures.

--------

==== Default Signing ====

Input:
* The secret key ''sk'': a 32-byte array
* The message ''m'': a 32-byte array
* Auxiliary random data ''a'': a 32-byte array

The algorithm ''Sign(sk, m)'' is defined as:
* Let ''d' = int(sk)''
* Fail if ''d' = 0'' or ''d' &ge; n''
* Let ''P = d' ? G''
* Let ''d = d' '' if ''has_even_y(P)'', otherwise let ''d = n - d' ''.
* Let ''t'' be the byte-wise xor of ''bytes(d)'' and ''hash<sub>BIP0340/aux</sub>(a)''<ref>The auxiliary random data is hashed (with a unique tag) as a precaution against situations where the randomness may be correlated with the private key itself. It is xored with the private key (rather than combined with it in a hash) to reduce the number of operations exposed to the actual secret key.</ref>.
* Let ''rand = hash<sub>BIP0340/nonce</sub>(t || bytes(P) || m)''<ref>Including the [https://moderncrypto.org/mail-archive/curves/2020/001012.html public key as input to the nonce hash] helps ensure the robustness of the signing algorithm by preventing leakage of the secret key if the calculation of the public key ''P'' is performed incorrectly or maliciously, for example if it is left to the caller for performance reasons.</ref>.
* Let ''k' = int(rand) mod n''<ref>Note that in general, taking a uniformly random 256-bit integer modulo the curve order will produce an unacceptably biased result. However, for the secp256k1 curve, the order is sufficiently close to ''2<sup>256</sup>'' that this bias is not observable (''1 - n / 2<sup>256</sup>'' is around ''1.27 * 2<sup>-128</sup>'').</ref>.
* Fail if ''k' = 0''.
* Let ''R = k' ? G''.
* Let ''k = k' '' if ''has_even_y(R)'', otherwise let ''k = n - k' ''.
* Let ''e = int(hash<sub>BIP0340/challenge</sub>(bytes(R) || bytes(P) || m)) mod n''.
* Let ''sig = bytes(R) || bytes((k + ed) mod n)''.
* If ''Verify(bytes(P), m, sig)'' (see below) returns failure, abort<ref>Verifying the signature before leaving the signer prevents random or attacker provoked computation errors. This prevents publishing invalid signatures which may leak information about the secret key. It is recommended, but can be omitted if the computation cost is prohibitive.</ref>.
* Return the signature ''sig''.


==== Verification ====

Input:
* The public key ''pk'': a 32-byte array
* The message ''m'': a 32-byte array
* A signature ''sig'': a 64-byte array

The algorithm ''Verify(pk, m, sig)'' is defined as:
* Let ''P = lift_x(int(pk))''; fail if that fails.
* Let ''r = int(sig[0:32])''; fail if ''r &ge; p''.
* Let ''s = int(sig[32:64])''; fail if ''s &ge; n''.
* Let ''e = int(hash<sub>BIP0340/challenge</sub>(bytes(r) || bytes(P) || m)) mod n''.
* Let ''R = s ? G - e ? P''.
* Fail if ''is_infinite(R)''.
* Fail if ''not has_even_y(R)''.
* Fail if ''x(R) &ne; r''.
* Return success iff no failure occurred before reaching this point.

For every valid secret key ''sk'' and message ''m'', ''Verify(PubKey(sk),m,Sign(sk,m))'' will succeed.

-------

It's too early for my draft to cut off some dead wood from this draft, but I will end this post with a note:

- The purpose of address message signing/verification is to cryptographically prove that a message has come from a specific address. Granted, this is malleable, since the signing isn't technically done with address, but with public keys in the case of both ECDSA and Schnorr, so a legacy address which validates a message implies that its corresponding segwit addresses can also validate it, since they all share the same public key. In the case of Taproot, if somebody wanted to verify that a message indeed came from a taproot address, 'Signature' can be overloaded by concatenating the Schnorr signature and public key together like this:

(e,s) or (R,s) || public key

And the public key sent to the verification algorithm. The signature will still be a fixed-size payload. It is true that it destructs the "zero-knowledge" benefit with Schnorr signatures, but this will allow maximum compatibility with ECDSA address verification. After all, hasn't BIP340 itself made tradeoffs of its own to preserve compatibility with ECDSA message generation, such as choosing the parity of Y coordinates?

The truth is, is that you can't verify an address message without general knowledge of the public key. And zero-knowledge signatures such as Schnorr completely disallow for that. Given that it is highly likely that future address types will also make use of Schnorr signatures, and the growing disproportion between legacy addresses and the rest of the addresses requires that the community make a choice regarding message signatures now - Do they really want them, or not?

========

Essentially, zero-knowledge proofs such as Schnorr are not compatible with address message signing - the public key cannot be retrieved from the address or the signature, so the address does not actually prove the authenticity of a Schnorr signature. That's why the public key is required as an input in the first place.

In order to make it compatible with the address signing mechanism, the zero-knowledge part would have to be sacrificed in my BIP, or else a completely separate message signing format just for Taproot would be required (which, in my view, is redundant - there is already the draft BIP322 which can verify anything and everything, but nobody is implementing that, just like BIP340).

From dp at simplexum.com  Thu Jul 28 09:40:16 2022
From: dp at simplexum.com (Dmitry Petukhov)
Date: Thu, 28 Jul 2022 11:40:16 +0200
Subject: [bitcoin-dev] BIP Proposal: Receiving and Change Derivation
 Paths in a Single Descriptor
In-Reply-To: <7bded922-5067-caee-e5be-9f620cfc7404@achow101.com>
References: <7bded922-5067-caee-e5be-9f620cfc7404@achow101.com>
Message-ID: <20220728114016.2ff78722@simplexum.com>

The issue with tuples of lenth more than two is that the purpose for
indexes beyond 'receive' and 'change' are not established, and
therefore various software might start to use extra indexes in a tuple
for their own non-standard purposes. This is bound to create
incompatibilities where different wallet software that import the same
descriptor would use those addresses for different purposes.

Even if some auxiliary standard emerges for the meanings of extra
indexes, since the indexes in the tuple are listed without omissions (no
"<0;1;;;3>" allowed), all software will need to be aware of the
existence of these purposes and define indexes for them: if one wishes
to utilize position 3 in such a tuple, they will need to define an index
for position 2 as well.

I'd expect that emergence of new widely-used purposes for indexes would
be a very rare event, and a separate BIP for each purpose wouldn't be
excessive.

I'd say that bip-multipath-descs should say that extra indexes are OK
for address discovery (for scanning of the addresses of a wallet), but
it should say that any interpretation of the purpose of such indexes
and deriving new addresses at these indexes are strongly discouraged.

Wallet software that wishes to utilize non-standard extra indexes beyond
'receive' and 'change' should use separate descriptors instead for
these extra indexes.

And when a new established purpose emerges for the next position in the
index tuple, a new BIP should be made that defines such position.

The BIP for position 3 would naturally come after the BIP for position
2, and thus software that implemnents BIP for position 3 would be aware
of the previous BIP and will at least know to choose some index for
position 2.

? Wed, 27 Jul 2022 14:58:28 +0000
Andrew Chow via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
wrote:

> I've updated the BIP text to allow arbitrary length tuples.
> 
> On 07/27/2022 04:44 AM, Pavol Rusnak wrote:
> 
> > On Wed, 27 Jul 2022 at 00:28, Andrew Chow
> > <achow101-lists at achow101.com> wrote: 
> >> However I don't see why this couldn't generalize to any sized
> >> tuples. As long as the tuples are all the same length, and the
> >> limit is one tuple per key expression, then we don't get any
> >> combinatorial blowup issues.  
> >
> > I think it's worthwhile to generalize for any sized tuples. I don't
> > have any existing particular use case in mind, because BIP-44,
> > BIP-84, etc. are fine with just using <0;1>, but there might be
> > some upcoming standards in the future that will want to introduce
> > more sub-paths.
> >
> > --
> >
> > Best Regards / S pozdravom,
> >
> > Pavol "stick" Rusnak
> > Co-Founder, SatoshiLab  


From bitcoin-dev at wuille.net  Thu Jul 28 15:27:05 2022
From: bitcoin-dev at wuille.net (Pieter Wuille)
Date: Thu, 28 Jul 2022 15:27:05 +0000
Subject: [bitcoin-dev] Zero-knowledge proofs e.g. Schnorr are
	incompatible with address signing without compromise
In-Reply-To: <bG2Fk0bM_4lbwijBwZRiGgCAmktVOFSY5vR5k1D7QSc8imn9NWXxfOLPgMl5p22vfAPDHeuEA_p6TDhU7qGFoVmZok57RzA9rEV1LJzHpsM=@notatether.com>
References: <bG2Fk0bM_4lbwijBwZRiGgCAmktVOFSY5vR5k1D7QSc8imn9NWXxfOLPgMl5p22vfAPDHeuEA_p6TDhU7qGFoVmZok57RzA9rEV1LJzHpsM=@notatether.com>
Message-ID: <BQZI2zpZwzJcXi_Gxr0f1wg9ZD6U5nb0HTOfIu4i50nM6FqFNqFjfm4DbOIxg94IwZQ4pHAthUNeGUkwHENJwAhap-bIkuKRN8ErZyFeR-o=@wuille.net>

------- Original Message -------
On Thursday, July 28th, 2022 at 3:27 AM, Ali Sherief via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Essentially, zero-knowledge proofs such as Schnorr are not compatible with address message signing - the public key cannot be retrieved from the address or the signature, so the address does not actually prove the authenticity of a Schnorr signature. That's why the public key is required as an input in the first place.

Yes, that's an intentional design choice in BIP340, see note 5: https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#cite_ref-5-0. The choice is either batch verifiability or public key recovery.

I regret ever using public key recovery when introducing the old legacy message signing scheme. It should just have used script signatures like BIP322 proposes.

> In order to make it compatible with the address signing mechanism, the zero-knowledge part would have to be sacrificed in my BIP, or else a completely separate message signing format just for Taproot would be required

You can avoid relying on public key recovery, and include the public key + BIP340 signature in the encoded signature.

> (which, in my view, is redundant - there is already the draft BIP322 which can verify anything and everything, but nobody is implementing that

I think it would be much better if people would cooperate to get BIP322 to move forward than to keep inventing other formats. It's the obvious solution in my opinion: not restricted to single-key policies, compatible with every script type, and trivially extensible to future schemes.

> , just like BIP340).

How so? Every taproot compatible wallet has a BIP340 implementation.

Cheers,

--
Pieter


From ali at notatether.com  Thu Jul 28 15:51:18 2022
From: ali at notatether.com (Ali Sherief)
Date: Thu, 28 Jul 2022 15:51:18 +0000
Subject: [bitcoin-dev] Zero-knowledge proofs e.g. Schnorr are
	incompatible with address signing without compromise
In-Reply-To: <BQZI2zpZwzJcXi_Gxr0f1wg9ZD6U5nb0HTOfIu4i50nM6FqFNqFjfm4DbOIxg94IwZQ4pHAthUNeGUkwHENJwAhap-bIkuKRN8ErZyFeR-o=@wuille.net>
References: <bG2Fk0bM_4lbwijBwZRiGgCAmktVOFSY5vR5k1D7QSc8imn9NWXxfOLPgMl5p22vfAPDHeuEA_p6TDhU7qGFoVmZok57RzA9rEV1LJzHpsM=@notatether.com>
 <BQZI2zpZwzJcXi_Gxr0f1wg9ZD6U5nb0HTOfIu4i50nM6FqFNqFjfm4DbOIxg94IwZQ4pHAthUNeGUkwHENJwAhap-bIkuKRN8ErZyFeR-o=@wuille.net>
Message-ID: <ltMy8y1N-J_DQ0rQiKcb1fkiBkd9PcLX6B4W_TZ6i7bdmNWQMXJ0h2fet6DFKvllyH0QNzzVnqMpxT3vMgxdwJKOfsUKf8lS5P5sTC4-3j8=@notatether.com>

> Yes, that's an intentional design choice in BIP340, see note 5: https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#cite_ref-5-0. The choice is either batch verifiability or public key recovery.

The way I understood the BIP, was that a user can do batch recovery or single-key recovery. Can you explain how it is possible to recover a public key from a single-key signature, because a few days earlier on the BIP-notatether-messageverify thread I was told (I think it was achow) that Schnorr doesn't allow for public key recovery.

At any case, I was already planning on just concatenating the public key after the signature (the other option I was thinking of, appending it after the Taproot address, is quite unruly in my opinion).

> I think it would be much better if people would cooperate to get BIP322 to move forward than to keep inventing other formats. It's the obvious solution in my opinion: not restricted to single-key policies, compatible with every script type, and trivially extensible to future schemes.

This is why I especially tried to avoid making a new format - My BIP is strictly an Informational one. That strategy worked pretty well up to now, but now I find myself forced to make a small concession in the design to support the verification of Taproot address. But I'm glad it's quite trivial as appending a single variable. So at least this BIP won't be an obstacle to any such effort.

[Besides, since I'm also planning on detecting BIP137 in the verification methods, I can assume the Signature field contains arbitrary data.]

> > , just like BIP340).
>
>
> How so? Every taproot compatible wallet has a BIP340 implementation.

I guess I made an assumption, since almost all of the wallets I have seen did not have a sign message feature, not even for legacy addresses.

- Ali

------- Original Message -------
On Thursday, July 28th, 2022 at 3:27 PM, Pieter Wuille <bitcoin-dev at wuille.net> wrote:


> ------- Original Message -------
> On Thursday, July 28th, 2022 at 3:27 AM, Ali Sherief via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:
>
> > Essentially, zero-knowledge proofs such as Schnorr are not compatible with address message signing - the public key cannot be retrieved from the address or the signature, so the address does not actually prove the authenticity of a Schnorr signature. That's why the public key is required as an input in the first place.
>
>
> Yes, that's an intentional design choice in BIP340, see note 5: https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#cite_ref-5-0. The choice is either batch verifiability or public key recovery.
>
> I regret ever using public key recovery when introducing the old legacy message signing scheme. It should just have used script signatures like BIP322 proposes.
>
> > In order to make it compatible with the address signing mechanism, the zero-knowledge part would have to be sacrificed in my BIP, or else a completely separate message signing format just for Taproot would be required
>
>
> You can avoid relying on public key recovery, and include the public key + BIP340 signature in the encoded signature.
>
> > (which, in my view, is redundant - there is already the draft BIP322 which can verify anything and everything, but nobody is implementing that
>
>
> I think it would be much better if people would cooperate to get BIP322 to move forward than to keep inventing other formats. It's the obvious solution in my opinion: not restricted to single-key policies, compatible with every script type, and trivially extensible to future schemes.
>
> > , just like BIP340).
>
>
> How so? Every taproot compatible wallet has a BIP340 implementation.
>
> Cheers,
>
> --
> Pieter

From bitcoin-dev at wuille.net  Thu Jul 28 15:58:03 2022
From: bitcoin-dev at wuille.net (Pieter Wuille)
Date: Thu, 28 Jul 2022 15:58:03 +0000
Subject: [bitcoin-dev] Zero-knowledge proofs e.g. Schnorr are
	incompatible with address signing without compromise
In-Reply-To: <ltMy8y1N-J_DQ0rQiKcb1fkiBkd9PcLX6B4W_TZ6i7bdmNWQMXJ0h2fet6DFKvllyH0QNzzVnqMpxT3vMgxdwJKOfsUKf8lS5P5sTC4-3j8=@notatether.com>
References: <bG2Fk0bM_4lbwijBwZRiGgCAmktVOFSY5vR5k1D7QSc8imn9NWXxfOLPgMl5p22vfAPDHeuEA_p6TDhU7qGFoVmZok57RzA9rEV1LJzHpsM=@notatether.com>
 <BQZI2zpZwzJcXi_Gxr0f1wg9ZD6U5nb0HTOfIu4i50nM6FqFNqFjfm4DbOIxg94IwZQ4pHAthUNeGUkwHENJwAhap-bIkuKRN8ErZyFeR-o=@wuille.net>
 <ltMy8y1N-J_DQ0rQiKcb1fkiBkd9PcLX6B4W_TZ6i7bdmNWQMXJ0h2fet6DFKvllyH0QNzzVnqMpxT3vMgxdwJKOfsUKf8lS5P5sTC4-3j8=@notatether.com>
Message-ID: <3CQzcfbQ1qjdBAAViGbW7aXwJBWv3uov0YNHAHS0xtMCLxodi6veZDTIygYXj_P8JrT15hgupZUBah0HLw3B6GjvegZYv52gHUSBy8tCk-E=@wuille.net>

------- Original Message -------
On Thursday, July 28th, 2022 at 11:51 AM, Ali Sherief <ali at notatether.com> wrote:

> The way I understood the BIP, was that a user can do batch recovery or single-key recovery. Can you explain how it is possible to recover a public key from a single-key signature, because a few days earlier on the BIP-notatether-messageverify thread I was told (I think it was achow) that Schnorr doesn't allow for public key recovery.

No, BIP340, in its design decisions, had to choice to either support public key recovery, or support batch validation. We chose to support batch validation for a variety of reason. BIP340 does not in any way support key recovery.

> > > , just like BIP340).
> >
> > How so? Every taproot compatible wallet has a BIP340 implementation.
>
>
> I guess I made an assumption, since almost all of the wallets I have seen did not have a sign message feature, not even for legacy addresses.

I'm not talking about sign message, I'm talking about BIP340 for the purpose of transaction signing, as it's the signature scheme used in BIP341/BIP342.

My point being: for any prospective message signing feature, if the wallet supports taproot signing, they inevitably already have code to produce BIP340 signatures. If they don't support taproot signing, then message signing for it is irrelevant.

Cheers,

--
Pieter


From dave at dtrt.org  Fri Jul 29 03:38:19 2022
From: dave at dtrt.org (David A. Harding)
Date: Thu, 28 Jul 2022 17:38:19 -1000
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <Yt/h2Jv3m8ZsfZ8v@petertodd.org>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
 <Yt/h2Jv3m8ZsfZ8v@petertodd.org>
Message-ID: <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>

On 2022-07-26 02:45, Peter Todd via bitcoin-dev wrote:
> On Tue, Jul 26, 2022 at 01:56:05PM +0530, Aaradhya Chauhan via 
> bitcoin-dev wrote:
>> [...] in its early days, 1 sat/vB was a good dust protection
>> measure. But now, I think it's a bit high [...] I think it can be done 
>> easily [...]
> 
> [...] lowering the dust limit now is a good way to ensure
> the entire ecosystem is ready to deal with those conditions.

I don't have anything new to add to the conversation at this time, but I 
did want to suggest a clarification and summarize some previous 
discussion that might be useful.

I think the phrasing by Aaradhya Chauhan and Peter Todd above are 
conflating the minimum output amount policy ("dust limit") with the 
minimum transaction relay feerate policy ("min tx relay fee").  Any 
transaction with an output amount below a node's configured dust limit 
(a few hundred sat by default) will not be relayed by that node no 
matter how high of a feerate it pays.  Any transaction with feerate 
below a nodes's minimum relay feerate (1 sat/vbyte by default) will not 
be relayed by that node even if the node has unused space in its mempool 
and peers that use BIP133 feefilters to advertise that they would accept 
low feerates.

Removing the dust limit was discussed extensively a year ago[1] with 
additional follow-up discussion about eight months ago.[2]

Lowering the minimum relay feerate was seriously proposed in a patch to 
Bitcoin Core four years ago[3] with additional related PRs being opened 
to ease the change.  Not all of the related PRs have been merged yet, 
and the original PR was closed.  I can't easily find some of the 
discussions I remember related to that change, but IIRC part of the 
challenge was that lower minimum relay fees reduce the cost of a variety 
of DoS attacks which could impact BIP152 compact blocks and erlay 
efficiency, could worsen transaction pinning, may increase IBD time due 
to more block chain data, and have other adverse effects.  Additionally, 
we've found in the past that some people who build systems that take 
advantage of low feerates become upset when feerates rise, sometimes 
creating problems even for people who prepared for eventual feerate 
rises.

Compared to the complexity of lowering the minimum feerate, the 
challenges of preventing denial/degregation-of-service attacks, and 
dealing with a fragmented userbase, the economic benefit of reducing the 
feerates for the bottom of the mempool seems small---if we lower min 
feerates to 1/10th their current values and that results in the 
equivalent of an extra 10 blocks of transactions getting mined a day, 
then users save a total of 0.09 BTC (~$1,800 USD) per day and miners 
earn an extra 0.01 BTC ($200 USD) per day (assuming all other things 
remain equal).[4]

-Dave

[1] 
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-August/019307.html
[2] 
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019635.html
[3] https://github.com/bitcoin/bitcoin/pull/13922
[4] The current min relay fee is 1 sat/vbyte.  There are ~1 million 
vbytes in a block that can be allocated to regular transactions.  Ten 
blocks at the current min relay fee would pay (10 * 1e6 / 1e8 = 0.1 BTC) 
in fees.  Ten blocks at 1/10 sat/vbyte would thus pay 0.01 BTC in fees, 
which is $200 USD @ $20k/BTC.  Thus users would save (0.1 - 0.01 = 0.09 
BTC = $1,800 USD @ $20k/BTC).

From chauhanansh.me at gmail.com  Fri Jul 29 18:59:31 2022
From: chauhanansh.me at gmail.com (Aaradhya Chauhan)
Date: Sat, 30 Jul 2022 00:29:31 +0530
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
 <Yt/h2Jv3m8ZsfZ8v@petertodd.org> <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>
Message-ID: <CAGHFe1BxFX_v3FKTHMTbV+WARX5MjuJ6Y7=NdMc-wVYZDQUa7Q@mail.gmail.com>

I think you misunderstood what I said. I did not say that it should be done
now, for the obvious reasons that the miners won't be doing any good by
such measures. But I am talking about when the price of BTC escalates to a
point when 1sat/vB becomes expensive as a dust limit. If the price
oscillates at that point and above, it would actually create the same
incentives as it is today. All I imply is to maintain the affordability of
the minimum possible fee if one is ready to wait.

On Fri, 29 Jul 2022 at 9:08 AM David A. Harding via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On 2022-07-26 02:45, Peter Todd via bitcoin-dev wrote:
> > On Tue, Jul 26, 2022 at 01:56:05PM +0530, Aaradhya Chauhan via
> > bitcoin-dev wrote:
> >> [...] in its early days, 1 sat/vB was a good dust protection
> >> measure. But now, I think it's a bit high [...] I think it can be done
> >> easily [...]
> >
> > [...] lowering the dust limit now is a good way to ensure
> > the entire ecosystem is ready to deal with those conditions.
>
> I don't have anything new to add to the conversation at this time, but I
> did want to suggest a clarification and summarize some previous
> discussion that might be useful.
>
> I think the phrasing by Aaradhya Chauhan and Peter Todd above are
> conflating the minimum output amount policy ("dust limit") with the
> minimum transaction relay feerate policy ("min tx relay fee").  Any
> transaction with an output amount below a node's configured dust limit
> (a few hundred sat by default) will not be relayed by that node no
> matter how high of a feerate it pays.  Any transaction with feerate
> below a nodes's minimum relay feerate (1 sat/vbyte by default) will not
> be relayed by that node even if the node has unused space in its mempool
> and peers that use BIP133 feefilters to advertise that they would accept
> low feerates.
>
> Removing the dust limit was discussed extensively a year ago[1] with
> additional follow-up discussion about eight months ago.[2]
>
> Lowering the minimum relay feerate was seriously proposed in a patch to
> Bitcoin Core four years ago[3] with additional related PRs being opened
> to ease the change.  Not all of the related PRs have been merged yet,
> and the original PR was closed.  I can't easily find some of the
> discussions I remember related to that change, but IIRC part of the
> challenge was that lower minimum relay fees reduce the cost of a variety
> of DoS attacks which could impact BIP152 compact blocks and erlay
> efficiency, could worsen transaction pinning, may increase IBD time due
> to more block chain data, and have other adverse effects.  Additionally,
> we've found in the past that some people who build systems that take
> advantage of low feerates become upset when feerates rise, sometimes
> creating problems even for people who prepared for eventual feerate
> rises.
>
> Compared to the complexity of lowering the minimum feerate, the
> challenges of preventing denial/degregation-of-service attacks, and
> dealing with a fragmented userbase, the economic benefit of reducing the
> feerates for the bottom of the mempool seems small---if we lower min
> feerates to 1/10th their current values and that results in the
> equivalent of an extra 10 blocks of transactions getting mined a day,
> then users save a total of 0.09 BTC (~$1,800 USD) per day and miners
> earn an extra 0.01 BTC ($200 USD) per day (assuming all other things
> remain equal).[4]
>
> -Dave
>
> [1]
>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-August/019307.html
> [2]
>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019635.html
> [3] https://github.com/bitcoin/bitcoin/pull/13922
> [4] The current min relay fee is 1 sat/vbyte.  There are ~1 million
> vbytes in a block that can be allocated to regular transactions.  Ten
> blocks at the current min relay fee would pay (10 * 1e6 / 1e8 = 0.1 BTC)
> in fees.  Ten blocks at 1/10 sat/vbyte would thus pay 0.01 BTC in fees,
> which is $200 USD @ $20k/BTC.  Thus users would save (0.1 - 0.01 = 0.09
> BTC = $1,800 USD @ $20k/BTC).
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220730/d277958a/attachment.html>

From chauhanansh.me at gmail.com  Sat Jul 30 07:55:55 2022
From: chauhanansh.me at gmail.com (Aaradhya Chauhan)
Date: Sat, 30 Jul 2022 13:25:55 +0530
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
 <Yt/h2Jv3m8ZsfZ8v@petertodd.org> <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>
Message-ID: <CAGHFe1C-u7DbTtg0dz+p8Moh=FbFN5dKZow5HgtMpxcVyS2ZdA@mail.gmail.com>

I'm not suggesting to initiate it anytime soon. But suppose, let's take a
situation where Bitcoin reaches and oscillates above 200k to 500k USD, then
1 sat/vB could be equivalent to 10 sat/vB of today, hampering the "dust
requirement" (ignoring inflation). I discussed this on the Bitcoin
subreddit and some suggested that the developers, in the future, have to
just change the "default minimum relay tx fee" from 1000 today to 500 at
that time. Obviously it's gonna be a little above 500, if we count
inflation. That would simply equate to the current situation. Do you think
that would be a problem?

On Fri, 29 Jul 2022 at 09:08, David A. Harding via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On 2022-07-26 02:45, Peter Todd via bitcoin-dev wrote:
> > On Tue, Jul 26, 2022 at 01:56:05PM +0530, Aaradhya Chauhan via
> > bitcoin-dev wrote:
> >> [...] in its early days, 1 sat/vB was a good dust protection
> >> measure. But now, I think it's a bit high [...] I think it can be done
> >> easily [...]
> >
> > [...] lowering the dust limit now is a good way to ensure
> > the entire ecosystem is ready to deal with those conditions.
>
> I don't have anything new to add to the conversation at this time, but I
> did want to suggest a clarification and summarize some previous
> discussion that might be useful.
>
> I think the phrasing by Aaradhya Chauhan and Peter Todd above are
> conflating the minimum output amount policy ("dust limit") with the
> minimum transaction relay feerate policy ("min tx relay fee").  Any
> transaction with an output amount below a node's configured dust limit
> (a few hundred sat by default) will not be relayed by that node no
> matter how high of a feerate it pays.  Any transaction with feerate
> below a nodes's minimum relay feerate (1 sat/vbyte by default) will not
> be relayed by that node even if the node has unused space in its mempool
> and peers that use BIP133 feefilters to advertise that they would accept
> low feerates.
>
> Removing the dust limit was discussed extensively a year ago[1] with
> additional follow-up discussion about eight months ago.[2]
>
> Lowering the minimum relay feerate was seriously proposed in a patch to
> Bitcoin Core four years ago[3] with additional related PRs being opened
> to ease the change.  Not all of the related PRs have been merged yet,
> and the original PR was closed.  I can't easily find some of the
> discussions I remember related to that change, but IIRC part of the
> challenge was that lower minimum relay fees reduce the cost of a variety
> of DoS attacks which could impact BIP152 compact blocks and erlay
> efficiency, could worsen transaction pinning, may increase IBD time due
> to more block chain data, and have other adverse effects.  Additionally,
> we've found in the past that some people who build systems that take
> advantage of low feerates become upset when feerates rise, sometimes
> creating problems even for people who prepared for eventual feerate
> rises.
>
> Compared to the complexity of lowering the minimum feerate, the
> challenges of preventing denial/degregation-of-service attacks, and
> dealing with a fragmented userbase, the economic benefit of reducing the
> feerates for the bottom of the mempool seems small---if we lower min
> feerates to 1/10th their current values and that results in the
> equivalent of an extra 10 blocks of transactions getting mined a day,
> then users save a total of 0.09 BTC (~$1,800 USD) per day and miners
> earn an extra 0.01 BTC ($200 USD) per day (assuming all other things
> remain equal).[4]
>
> -Dave
>
> [1]
>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-August/019307.html
> [2]
>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019635.html
> [3] https://github.com/bitcoin/bitcoin/pull/13922
> [4] The current min relay fee is 1 sat/vbyte.  There are ~1 million
> vbytes in a block that can be allocated to regular transactions.  Ten
> blocks at the current min relay fee would pay (10 * 1e6 / 1e8 = 0.1 BTC)
> in fees.  Ten blocks at 1/10 sat/vbyte would thus pay 0.01 BTC in fees,
> which is $200 USD @ $20k/BTC.  Thus users would save (0.1 - 0.01 = 0.09
> BTC = $1,800 USD @ $20k/BTC).
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220730/d76c0ff9/attachment-0001.html>

From pete at petertodd.org  Sat Jul 30 10:20:49 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 30 Jul 2022 06:20:49 -0400
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
 <Yt/h2Jv3m8ZsfZ8v@petertodd.org>
 <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>
Message-ID: <YuUGAUxsB4TMetGK@petertodd.org>

On Thu, Jul 28, 2022 at 05:38:19PM -1000, David A. Harding wrote:
> I think the phrasing by Aaradhya Chauhan and Peter Todd above are conflating
> the minimum output amount policy ("dust limit") with the minimum transaction
> relay feerate policy ("min tx relay fee").  Any transaction with an output

Thanks for the correction! Brainfart on my part there.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220730/52afd438/attachment.sig>

From alfred_hodler at protonmail.com  Sat Jul 30 09:24:47 2022
From: alfred_hodler at protonmail.com (Alfred Hodler)
Date: Sat, 30 Jul 2022 09:24:47 +0000
Subject: [bitcoin-dev] New BIP: Private Payments
Message-ID: <-BUM-o-GxD7jpYy6cOdoALb-p2xbdEFds3De08nUFseeif6-OS6p_A7u7B_h45rkuflSix9kaC4e9fbOs_YwOL6xbrCF5ebjyGKurT4MeJU=@protonmail.com>

Hi,

We propose a new BIP that facilitates more private two-party transactions. This is a strict improvement upon BIP47, with increased privacy and better future-proofing.

The contents may be found here:
https://github.com/alfred-hodler/bips/blob/bip-alfredhodler-private-payments/bip-alfredhodler-privatepayments.mediawiki

We hope to collect feedback and be assigned with a BIP number. A reference implementation will be published once the BIP is deemed viable.

Alfred


From rsomsen at gmail.com  Sat Jul 30 13:41:36 2022
From: rsomsen at gmail.com (Ruben Somsen)
Date: Sat, 30 Jul 2022 15:41:36 +0200
Subject: [bitcoin-dev] New BIP: Private Payments
In-Reply-To: <-BUM-o-GxD7jpYy6cOdoALb-p2xbdEFds3De08nUFseeif6-OS6p_A7u7B_h45rkuflSix9kaC4e9fbOs_YwOL6xbrCF5ebjyGKurT4MeJU=@protonmail.com>
References: <-BUM-o-GxD7jpYy6cOdoALb-p2xbdEFds3De08nUFseeif6-OS6p_A7u7B_h45rkuflSix9kaC4e9fbOs_YwOL6xbrCF5ebjyGKurT4MeJU=@protonmail.com>
Message-ID: <CAPv7TjZHJoY2cN9=X7vxSOEbd-YLQLrFi87e8Yj-xZJUawjRYA@mail.gmail.com>

Hi Alfred,

Thanks for all the effort.

Note that in the previous thread I mentioned[0] that this proposal
introduces a scanning requirement in order to detect incoming notifications
(complicating light client implementation). I recommend that you put this
information in the BIP, as this is an important downside that readers
should be aware of.

I'm also now realizing that your proposal is actually *very* similar to the
BIP47 protocol improvement suggestions that were made in Prague:
https://gist.github.com/RubenSomsen/21c477c90c942acf45f8e8f5c1ad4fae

As far as I can tell, the one difference is that you added an extra ECDH
calculation to hide the recipient payment code. Uncoincidentally, this is
also exactly what causes the downside of having a scanning requirement, and
it seems the only benefit you get in return is that you don't have to
outsource the notification (as is the case in the Prague protocol) and can
broadcast it yourself instead. I'm personally unsure whether this is a net
improvement, but that is certainly open to debate. I'd say it's worth
having this discussion prior to finalizing the BIP, as otherwise it could
potentially result in yet another incompatible standard further down the
line.

Considering the similarity, perhaps you could consider crediting the
participants of the Prague discussion (namely Alekos Filini, Martin
Habov?tiak, and myself). And I imagine Silent Payments[1] may have served
as an inspiration as well. I also recommend taking another look at the
"Allowing collisions" paragraph from the Prague discussion, as it can
potentially shave off up to 28 bytes.

I hope you find this feedback reasonable and it doesn't discourage you.
There's way too much work to be done on Bitcoin, so I'm happy to see you
are actively putting in the effort to move things forward. Working out the
details such as how to handle address formats is also very much
appreciated. Keep it up.

Cheers,
Ruben


[0]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-June/020607.html

[1] https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8



On Sat, Jul 30, 2022 at 1:59 PM Alfred Hodler via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
>
> We propose a new BIP that facilitates more private two-party transactions.
> This is a strict improvement upon BIP47, with increased privacy and better
> future-proofing.
>
> The contents may be found here:
>
> https://github.com/alfred-hodler/bips/blob/bip-alfredhodler-private-payments/bip-alfredhodler-privatepayments.mediawiki
>
> We hope to collect feedback and be assigned with a BIP number. A reference
> implementation will be published once the BIP is deemed viable.
>
> Alfred
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220730/c6112ebf/attachment.html>

From alicexbt at protonmail.com  Sat Jul 30 17:24:35 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Sat, 30 Jul 2022 17:24:35 +0000
Subject: [bitcoin-dev] Regarding setting a lower minrelaytxfee
In-Reply-To: <CAGHFe1C-u7DbTtg0dz+p8Moh=FbFN5dKZow5HgtMpxcVyS2ZdA@mail.gmail.com>
References: <CAGHFe1BXdTkPZn4r_KTxYoz0sqcMsV830dm5JTTFURxDezBnDQ@mail.gmail.com>
 <Yt/h2Jv3m8ZsfZ8v@petertodd.org> <f889c7fc9db56ed448237c8a4091abaa@dtrt.org>
 <CAGHFe1C-u7DbTtg0dz+p8Moh=FbFN5dKZow5HgtMpxcVyS2ZdA@mail.gmail.com>
Message-ID: <JMG4yhnQ2xL1Pq51Jnyk37c6-Ip8zHuCjmPWc6AYJ0LxlhO7enV9xdr4YGkGbn_J-ecpueZsB-mIjowyVDyMINme1bXJk4BYYP7lBxR4Kfg=@protonmail.com>

Hi Aaradhya,

> I discussed this on the Bitcoin subreddit and some suggested that the developers, in the future, have to just change the "default minimum relay tx fee" from 1000 today to 500 at that time.

>

There are several issues and pull requests (open and closed) in which developers tried to decrease the default minimum relay tx fee rate. Even I had opened an issue after reading this thread:

https://github.com/bitcoin/bitcoin/issues/25716

However, I think developers should not make any changes in the default minimum fee rate required for relay. If there are incentives for users and miners to change it, they should use non-default value. In case, miners want to experiment with lower fee rate and see if this increases revenue they could try using it on odd dates (even dates remain default) for a month. We all could analyze how this worked for different mining pools and non-default value (lower or higher) could become normal in the future.

/dev/fd0

Sent with [Proton Mail](https://proton.me/) secure email.

------- Original Message -------
On Saturday, July 30th, 2022 at 1:25 PM, Aaradhya Chauhan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> I'm not suggesting to initiate it anytime soon. But suppose, let's take a situation where Bitcoin reaches and oscillates above 200k to 500k USD, then 1 sat/vB could be equivalent to 10 sat/vB of today, hampering the "dust requirement" (ignoring inflation). I discussed this on the Bitcoin subreddit and some suggested that the developers, in the future, have to just change the "default minimum relay tx fee" from 1000 today to 500 at that time. Obviously it's gonna be a little above 500, if we count inflation. That would simply equate to the current situation. Do you think that would be a problem?
>
> On Fri, 29 Jul 2022 at 09:08, David A. Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On 2022-07-26 02:45, Peter Todd via bitcoin-dev wrote:
>>> On Tue, Jul 26, 2022 at 01:56:05PM +0530, Aaradhya Chauhan via
>>> bitcoin-dev wrote:
>>>> [...] in its early days, 1 sat/vB was a good dust protection
>>>> measure. But now, I think it's a bit high [...] I think it can be done
>>>> easily [...]
>>>
>>> [...] lowering the dust limit now is a good way to ensure
>>> the entire ecosystem is ready to deal with those conditions.
>>
>> I don't have anything new to add to the conversation at this time, but I
>> did want to suggest a clarification and summarize some previous
>> discussion that might be useful.
>>
>> I think the phrasing by Aaradhya Chauhan and Peter Todd above are
>> conflating the minimum output amount policy ("dust limit") with the
>> minimum transaction relay feerate policy ("min tx relay fee"). Any
>> transaction with an output amount below a node's configured dust limit
>> (a few hundred sat by default) will not be relayed by that node no
>> matter how high of a feerate it pays. Any transaction with feerate
>> below a nodes's minimum relay feerate (1 sat/vbyte by default) will not
>> be relayed by that node even if the node has unused space in its mempool
>> and peers that use BIP133 feefilters to advertise that they would accept
>> low feerates.
>>
>> Removing the dust limit was discussed extensively a year ago[1] with
>> additional follow-up discussion about eight months ago.[2]
>>
>> Lowering the minimum relay feerate was seriously proposed in a patch to
>> Bitcoin Core four years ago[3] with additional related PRs being opened
>> to ease the change. Not all of the related PRs have been merged yet,
>> and the original PR was closed. I can't easily find some of the
>> discussions I remember related to that change, but IIRC part of the
>> challenge was that lower minimum relay fees reduce the cost of a variety
>> of DoS attacks which could impact BIP152 compact blocks and erlay
>> efficiency, could worsen transaction pinning, may increase IBD time due
>> to more block chain data, and have other adverse effects. Additionally,
>> we've found in the past that some people who build systems that take
>> advantage of low feerates become upset when feerates rise, sometimes
>> creating problems even for people who prepared for eventual feerate
>> rises.
>>
>> Compared to the complexity of lowering the minimum feerate, the
>> challenges of preventing denial/degregation-of-service attacks, and
>> dealing with a fragmented userbase, the economic benefit of reducing the
>> feerates for the bottom of the mempool seems small---if we lower min
>> feerates to 1/10th their current values and that results in the
>> equivalent of an extra 10 blocks of transactions getting mined a day,
>> then users save a total of 0.09 BTC (~$1,800 USD) per day and miners
>> earn an extra 0.01 BTC ($200 USD) per day (assuming all other things
>> remain equal).[4]
>>
>> -Dave
>>
>> [1]
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-August/019307.html
>> [2]
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-December/019635.html
>> [3] https://github.com/bitcoin/bitcoin/pull/13922
>> [4] The current min relay fee is 1 sat/vbyte. There are ~1 million
>> vbytes in a block that can be allocated to regular transactions. Ten
>> blocks at the current min relay fee would pay (10 * 1e6 / 1e8 = 0.1 BTC)
>> in fees. Ten blocks at 1/10 sat/vbyte would thus pay 0.01 BTC in fees,
>> which is $200 USD @ $20k/BTC. Thus users would save (0.1 - 0.01 = 0.09
>> BTC = $1,800 USD @ $20k/BTC).
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220730/3647ecb7/attachment-0001.html>

