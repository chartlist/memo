From davids at webmaster.com  Wed Aug  3 01:41:05 2011
From: davids at webmaster.com (David Schwartz)
Date: Tue, 02 Aug 2011 18:41:05 -0700
Subject: [Bitcoin-development] Seeking advice: Encouraging bug-fixing
 over new features
In-Reply-To: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
References: <CABsx9T3W=n6VVJfOUqcd52oYvd-5hSwdOJudtVHK4g0bPGpXew@mail.gmail.com>
Message-ID: <4E38A731.9070703@webmaster.com>

On 7/26/2011 6:31 PM, Gavin Andresen wrote:

> Anybody have advice on how to encourage more bug-fixing and testing of
> existing functionality instead of yet-more-features?

Two things would help a lot:

1) Letting people know that bug fixing is needed and would be 
appreciated. (In fact, until I saw your email, I had no idea this was an 
issue.)

2) Maintaining a list of the most important bugs that most need to be 
fixed in a place that's easy to find.

I bet there are a lot of talented programmers who just can't quite 
figure out how best to help or don't realize that this kind of help is 
needed.

Also, even better than a bounty system would probably be a changelog 
file included in the main source distribution that credited bugfixes to 
those who contributed them for the next few releases.

DS




From bgroff at lavabit.com  Wed Aug  3 06:10:47 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Wed, 3 Aug 2011 02:10:47 -0400 (EDT)
Subject: [Bitcoin-development] Discussion related to pull 349 and pull
 319 (escrow transactions)
In-Reply-To: <CAAS2fgQ-L-1K2Oi40tqnhxpnnWQHqgbd4BmqedhA3WcevYiCzg@mail.gmail.com>
References: <CAAS2fgQ-L-1K2Oi40tqnhxpnnWQHqgbd4BmqedhA3WcevYiCzg@mail.gmail.com>
Message-ID: <43351.137.56.163.46.1312351847.squirrel@lavabit.com>

Gregory Maxwell wrote:

> Pull 349 (https://github.com/bitcoin/bitcoin/pull/349)
> implements a pretty nice implementation of multiple signature escrowed
> transactions. Especially with clearcoin gone I think that this is
> something we ought to have sooner rather than later.
>
> I've tested it on a private network and it appears to work pretty well.

Thank you!  (I think you mean 319 here)

> It probably needs more testing and discussion before it is actually
> added to the client, but one challenge is that because it requires a
> new transaction type it won't be deployable until _after_ an updated
> isStandard is widely used in the network.

With Eligius mining !IsStandard transactions and probably other pools open
to the idea, I am hopeful that we can quickly get 30%+ of mining power to
upgrade, which means that we could still mine these in a reasonable time
frame (under 1 hour).

...

> Unfortunately, the patch exposes an issue with multisig validation: If
> I understand it correctly, the problem is that due to redundancy in
>  the script length coding opcodes it's possible to code a script
> multiple ways. The signature validation code creates new template
> scripts in order to evaluate signatures for one output, and the code
> in bitcoin is not careful to code the new script the same way the
> original one was coded, causing the signature validation to fail when
> something used OP_PUSHDATA when a direct length could have been used.
>

I'm not sure I see the problem here.  CScript.operator<< currently inserts
values into scripts using the shortest possible sequence.  As long as code
continues to conform to this convention, scripts generated by it will
verify correctly.

If new code is written that generates one of the longer sequences, it will
generate transactions that will not pass block validation since the
signature won't verify.  So such code will be useless and we can refrain
from writing it?

--
Bobby Groff






From mike at plan99.net  Wed Aug  3 10:04:11 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 3 Aug 2011 12:04:11 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
Message-ID: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>

This is expected to happen from time to time of course as it's inherently
racy, but there are a *lot* of bad nodes appearing in the DNS seeds.

$ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
dnsseed.bluematt.me bitseed.xf2.org`
...
Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds

$ grep -c 'closed' /tmp/x
6

So of 48 IPs returned only 19 are actually usable. This is slowing down peer
bringup for the Android apps, which don't currently save the addresses of
last-used peers (yes, I know we should fix this).

I was talking to a friend a few days ago about Bitcoin, he seemed
interested. I'm hoping he might take on DNS seeding as a project. A custom
DNS server that watches the network to find long-lived peers that run the
latest version would be helpful for resolving this kind of thing.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/2d5c0a64/attachment.html>

From bitcoin-list at bluematt.me  Wed Aug  3 11:38:19 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 03 Aug 2011 13:38:19 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
Message-ID: <1312371499.2322.14.camel@Desktop666>

On Wed, 2011-08-03 at 12:04 +0200, Mike Hearn wrote:
> This is expected to happen from time to time of course as it's
> inherently racy, but there are a lot of bad nodes appearing in the DNS
> seeds.

> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
> dnsseed.bluematt.me bitseed.xf2.org`
> ...
> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds

> $ grep -c 'closed' /tmp/x
> 6

> So of 48 IPs returned only 19 are actually usable. This is slowing
> down peer bringup for the Android apps, which don't currently save the
> addresses of last-used peers (yes, I know we should fix this).
Its actually much, much less.  You forgot to grep for filtered, which
are also worthless and you didn't make an actual connection to the node,
meaning there is no way to tell if the node has its connection slots
full (a node which has the maximum connection count will ack a syn, but
will drop the connection after the first message, so nmap thinks the
port is open).
I just tested and I show 0 accepting from bitseed.xf2.org and 0 from
bitcoin.bitcoin.co.uk.  dnsseed.bluematt.me rotates every 2 minutes to
the most recently checked so it tends to be pretty good if you get it
right after a rotate, if you wait to long, those slots fill up quick.
> 
> I was talking to a friend a few days ago about Bitcoin, he seemed
> interested. I'm hoping he might take on DNS seeding as a project. A
> custom DNS server that watches the network to find long-lived peers
> that run the latest version would be helpful for resolving this kind
> of thing.
Point him to https://github.com/TheBlueMatt/dnsseed it could use a bit
of cleanup, but it works.
If a different DNS Server were used to could pull directly from the
database in a more dynamic way it would probably work better too (it was
originally set up on MySQL and PowerDNS, but that is quite a resource
hog compared to SQLite and BIND, but the original backend is still there
and could work if you have a beefy enough server).

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/3cbcb018/attachment.sig>

From mike at plan99.net  Wed Aug  3 12:00:51 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 3 Aug 2011 14:00:51 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <1312371499.2322.14.camel@Desktop666>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<1312371499.2322.14.camel@Desktop666>
Message-ID: <CANEZrP1k6QQKYUWKOyayWaySMnVrMgpbePX-9HpSq54DvNZCyA@mail.gmail.com>

Yeah, the limited number of slots doesn't help either. I wonder if the
current settings are too conservative.

Your seed returns quite a few IPs that don't respond to ICMP pings - not
sure what is happening there.

03:01:53 scott:~$ for ip in `dig +short dnsseed.bluematt.me`; do echo -n -e
"Testing $ip:   "; ping -c 1 $ip|grep 'packet loss'; done
Testing 24.7.158.162:   1 packets transmitted, 1 received, 0% packet loss,
time 0ms
*Testing 50.19.225.254:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
Testing 67.242.10.199:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
Testing 72.223.56.138:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
Testing 76.92.171.255:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
Testing 76.123.10.117:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
Testing 80.3.173.28:   1 packets transmitted, 0 received, 100% packet loss,
time 0ms
*Testing 80.101.109.52:   1 packets transmitted, 1 received, 0% packet loss,
time 0ms
Testing 93.186.32.117:   1 packets transmitted, 1 received, 0% packet loss,
time 0ms
*Testing 94.19.17.167:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
*Testing 97.86.39.50:   1 packets transmitted, 1 received, 0% packet loss,
time 0ms
Testing 113.255.177.241:   1 packets transmitted, 1 received, 0% packet
loss, time 0ms
Testing 118.208.226.66:   1 packets transmitted, 1 received, 0% packet loss,
time 0ms
Testing 173.180.141.86:   1 packets transmitted, 1 received, 0% packet loss,
time 0ms
*Testing 174.119.14.66:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
*Testing 178.18.129.133:   1 packets transmitted, 1 received, 0% packet
loss, time 0ms
*Testing 193.86.163.77:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
Testing 206.255.99.164:   1 packets transmitted, 0 received, 100% packet
loss, time 0ms
Testing 216.8.180.85:   1 packets transmitted, 0 received, 100% packet loss,
time 0ms
Testing 24.1.117.3:   1 packets transmitted, 0 received, 100% packet loss,
time 0ms*
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/082c8b00/attachment.html>

From blaubaer at gmail.com  Wed Aug  3 12:15:07 2011
From: blaubaer at gmail.com (Johannes Henninger)
Date: Wed, 03 Aug 2011 14:15:07 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CANEZrP1k6QQKYUWKOyayWaySMnVrMgpbePX-9HpSq54DvNZCyA@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>	<1312371499.2322.14.camel@Desktop666>
	<CANEZrP1k6QQKYUWKOyayWaySMnVrMgpbePX-9HpSq54DvNZCyA@mail.gmail.com>
Message-ID: <4E393BCB.20904@gmail.com>

On 08/03/2011 02:00 PM, Mike Hearn wrote:
> Yeah, the limited number of slots doesn't help either. I wonder if the
> current settings are too conservative.
>
> Your seed returns quite a few IPs that don't respond to ICMP pings -
> not sure what is happening there.
Many home routers ignore ICMP requests (mine does) and as far as I know
Windows Vista/7 only responds to pings that originate from a LAN
address/private address range in order to stay more "hidden".



From mike at plan99.net  Wed Aug  3 12:17:48 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 3 Aug 2011 14:17:48 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <4E393BCB.20904@gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<1312371499.2322.14.camel@Desktop666>
	<CANEZrP1k6QQKYUWKOyayWaySMnVrMgpbePX-9HpSq54DvNZCyA@mail.gmail.com>
	<4E393BCB.20904@gmail.com>
Message-ID: <CANEZrP1T=4DTWcAYMG9FQbWP-=N7ix-8r3X81c1fCybnb6vdKA@mail.gmail.com>

OK, but, <50% show as port open .... maybe a bug in the seed?


05:16:52 scott:~$ nmap -p 8333 `dig +short dnsseed.bluematt.me`

Starting Nmap 5.00 ( http://nmap.org ) at 2011-08-03 14:17 CEST
Interesting ports on 83.220.45.22:
PORT     STATE SERVICE
8333/tcp open  unknown

Interesting ports on
c-6de0e055.27-2-64736c11.cust.bredbandsbolaget.se(85.224.224.109):
PORT     STATE SERVICE
8333/tcp open  unknown

Interesting ports on mackila.com (88.168.105.251):
PORT     STATE SERVICE
8333/tcp open  unknown

Interesting ports on 93-81-112-85.broadband.corbina.ru (93.81.112.85):
PORT     STATE SERVICE
8333/tcp open  unknown

Interesting ports on kons-5f710a2a.pool.mediaWays.net (95.113.10.42):
PORT     STATE SERVICE
8333/tcp open  unknown

Interesting ports on 173-218-216-132.atw.suddenlink.net (173.218.216.132):
PORT     STATE SERVICE
8333/tcp open  unknown

Interesting ports on
dynamicip-188-232-23-24.pppoe.omsk.ertelecom.ru(188.232.23.24):
PORT     STATE SERVICE
8333/tcp open  unknown

Interesting ports on c-71-229-116-166.hsd1.fl.comcast.net (71.229.116.166):
PORT     STATE    SERVICE
8333/tcp filtered unknown

Interesting ports on c-76-25-209-23.hsd1.co.comcast.net (76.25.209.23):
PORT     STATE SERVICE
8333/tcp open  unknown

Nmap done: 20 IP addresses (9 hosts up) scanned in 3.50 seconds
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/6ce81ee3/attachment.html>

From calebdelisle at lavabit.com  Wed Aug  3 12:27:37 2011
From: calebdelisle at lavabit.com (Caleb James DeLisle)
Date: Wed, 03 Aug 2011 08:27:37 -0400
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <1312371499.2322.14.camel@Desktop666>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<1312371499.2322.14.camel@Desktop666>
Message-ID: <4E393EB9.9040005@lavabit.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1



On 08/03/2011 07:38 AM, Matt Corallo wrote:
> On Wed, 2011-08-03 at 12:04 +0200, Mike Hearn wrote:
>> This is expected to happen from time to time of course as it's
>> inherently racy, but there are a lot of bad nodes appearing in the DNS
>> seeds.
> 
>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
>> dnsseed.bluematt.me bitseed.xf2.org`
>> ...
>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds
> 
>> $ grep -c 'closed' /tmp/x
>> 6
> 
>> So of 48 IPs returned only 19 are actually usable. This is slowing
>> down peer bringup for the Android apps, which don't currently save the
>> addresses of last-used peers (yes, I know we should fix this).
> Its actually much, much less.  You forgot to grep for filtered, which
> are also worthless and you didn't make an actual connection to the node,
> meaning there is no way to tell if the node has its connection slots
> full (a node which has the maximum connection count will ack a syn, but
> will drop the connection after the first message, so nmap thinks the
> port is open).
> I just tested and I show 0 accepting from bitseed.xf2.org and 0 from
> bitcoin.bitcoin.co.uk.  dnsseed.bluematt.me rotates every 2 minutes to
> the most recently checked so it tends to be pretty good if you get it
> right after a rotate, if you wait to long, those slots fill up quick.

Someone I know who runs a moderately large website told me that some ISPs cache DNS for as long as a week without regard to TTL.
If your DNS seeds are not pointing to your own dedicated boxen then you might want to do a lookup on a random cookie as a subdomain.

Caleb

>>
>> I was talking to a friend a few days ago about Bitcoin, he seemed
>> interested. I'm hoping he might take on DNS seeding as a project. A
>> custom DNS server that watches the network to find long-lived peers
>> that run the latest version would be helpful for resolving this kind
>> of thing.
> Point him to https://github.com/TheBlueMatt/dnsseed it could use a bit
> of cleanup, but it works.
> If a different DNS Server were used to could pull directly from the
> database in a more dynamic way it would probably work better too (it was
> originally set up on MySQL and PowerDNS, but that is quite a resource
> hog compared to SQLite and BIND, but the original backend is still there
> and could work if you have a beefy enough server).
> 
> Matt
> 
> 
> 
> ------------------------------------------------------------------------------
> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
> The must-attend event for mobile developers. Connect with experts. 
> Get tools for creating Super Apps. See the latest technologies.
> Sessions, hands-on labs, demos & much more. Register early & save!
> http://p.sf.net/sfu/rim-blackberry-1
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)

iQIcBAEBAgAGBQJOOT64AAoJECYAmptlsgnWNNYP/3pk/61AOaTo8577XF2E3RWU
hqPclOYMveBZveo7Hz0k/Vf3TMf5p7CFGtFllApVmmR5ck4hXwow+tXwaYvBuf9b
4QwDlNtBelZ+7DqOdDTxRjaRzBo7PlsuiEp+6B3+oggfjKWnkWlIighfM/6LOtMO
kv+MsC9xulqCrX96FrQBERVknkvza8NWfVblAFCM0uxECC5Hd52W1Okx1cDqUsIj
MAp6T6IDwy1u0WtYIZBbD3KR802tqTpx/gzElo2AAz4ZR8P9yATBbAjmd9vZDscB
SRF5yg+BIAzTQzz84c0cno8Q6hFyieRLTu9x0AWUqAZPTL3OgYV7hyl9WXMzcQGY
LgnG9hP5N9qn2S+rYJuNJwvTJhzaLgUwOdRgyisI8v86R5vEjOpAAPVStAgCtvw2
6BJJvit3iZ74fK37kPb4iEljd11ibb8rOoiZzKSuS6LMJXkCplQQ06Uhy9MFd/Wn
UZbSwbXqizJmQUPnHfCvvJc9fmoPFbj4SpYagxXFbUXtQsuB84h1e/jKAf5cvRed
n0fLfKBZJuAfK1B/lV8+R6+oJj6F2OSGdCpdGzMlrxKX3JPcDJGK56/JmFzaqXyA
ScaYja4yps83l80zt7H9Fadl642tNWXsdETniyDt2ADnqr1u/nWr9m+aT7oskbZA
SfO+U22w9JC0CW8u5fAa
=7WNK
-----END PGP SIGNATURE-----




From mike at plan99.net  Wed Aug  3 12:40:48 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 3 Aug 2011 14:40:48 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <4E393EB9.9040005@lavabit.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<1312371499.2322.14.camel@Desktop666>
	<4E393EB9.9040005@lavabit.com>
Message-ID: <CANEZrP04XcknPRidCndw5VaF1EgzAwyQ4kYxcC3Usnanhxp=Cg@mail.gmail.com>

>
> Someone I know who runs a moderately large website told me that some ISPs
> cache DNS for as long as a week without regard to TTL.
>

We track DNS disobeyers at Google, as we use it for load balancing (along
with many other large sites).

I'd be kind of surprised if any large/professional ISP disobeyed the TTL
that badly, because it would cause frequent problems reaching popular sites
like anything hosted on Google or Akamai. But randomizing the DNS request
isn't a bad idea.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/bf787659/attachment.html>

From mike at plan99.net  Wed Aug  3 14:10:56 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 3 Aug 2011 16:10:56 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
Message-ID: <CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>

There's no project currently :-)

Starting from Matts code is probably the way to go. It's written in PHP.
Alternatively, you could write a Java app for it, as there are drop-in DNS
serving libraries you could link with BitCoinJ+sqlite. It probably wouldn't
be that hard. You'd want to sort nodes by version, how long they've been
observed to exist, the last polling time, etc.

On Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson
<rick at support-intelligence.com>wrote:

> Mike,
>
> I think I can contribute to your DNS seeding project. Could you help define
> long-lived peers?
>
> -rick
>
>
> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> This is expected to happen from time to time of course as it's inherently
>> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.
>>
>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
>> dnsseed.bluematt.me bitseed.xf2.org`
>> ...
>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds
>>
>> $ grep -c 'closed' /tmp/x
>> 6
>>
>> So of 48 IPs returned only 19 are actually usable. This is slowing down
>> peer bringup for the Android apps, which don't currently save the addresses
>> of last-used peers (yes, I know we should fix this).
>>
>> I was talking to a friend a few days ago about Bitcoin, he seemed
>> interested. I'm hoping he might take on DNS seeding as a project. A custom
>> DNS server that watches the network to find long-lived peers that run the
>> latest version would be helpful for resolving this kind of thing.
>>
>>
>> ------------------------------------------------------------------------------
>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
>> The must-attend event for mobile developers. Connect with experts.
>> Get tools for creating Super Apps. See the latest technologies.
>> Sessions, hands-on labs, demos & much more. Register early & save!
>> http://p.sf.net/sfu/rim-blackberry-1
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/0aa285b4/attachment.html>

From rick at support-intelligence.com  Wed Aug  3 14:18:26 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 3 Aug 2011 07:18:26 -0700
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
	<CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>
Message-ID: <CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>

Starting from bitcoinj, I have plenty of ways to publish DNS. Why sort them
by version? Ordering from highest to lowest?

how about publishing addresses under version.example.com if you version has
a perfrence?

-rick


On Wed, Aug 3, 2011 at 7:10 AM, Mike Hearn <mike at plan99.net> wrote:

> There's no project currently :-)
>
> Starting from Matts code is probably the way to go. It's written in PHP.
> Alternatively, you could write a Java app for it, as there are drop-in DNS
> serving libraries you could link with BitCoinJ+sqlite. It probably wouldn't
> be that hard. You'd want to sort nodes by version, how long they've been
> observed to exist, the last polling time, etc.
>
> On Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson <rick at support-intelligence.com
> > wrote:
>
>> Mike,
>>
>> I think I can contribute to your DNS seeding project. Could you help
>> define long-lived peers?
>>
>> -rick
>>
>>
>> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:
>>
>>> This is expected to happen from time to time of course as it's inherently
>>> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.
>>>
>>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
>>> dnsseed.bluematt.me bitseed.xf2.org`
>>> ...
>>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds
>>>
>>> $ grep -c 'closed' /tmp/x
>>> 6
>>>
>>> So of 48 IPs returned only 19 are actually usable. This is slowing down
>>> peer bringup for the Android apps, which don't currently save the addresses
>>> of last-used peers (yes, I know we should fix this).
>>>
>>> I was talking to a friend a few days ago about Bitcoin, he seemed
>>> interested. I'm hoping he might take on DNS seeding as a project. A custom
>>> DNS server that watches the network to find long-lived peers that run the
>>> latest version would be helpful for resolving this kind of thing.
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
>>> The must-attend event for mobile developers. Connect with experts.
>>> Get tools for creating Super Apps. See the latest technologies.
>>> Sessions, hands-on labs, demos & much more. Register early & save!
>>> http://p.sf.net/sfu/rim-blackberry-1
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/1aaa914c/attachment.html>

From rick at support-intelligence.com  Wed Aug  3 14:00:24 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 3 Aug 2011 07:00:24 -0700
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
Message-ID: <CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>

Mike,

I think I can contribute to your DNS seeding project. Could you help define
long-lived peers?

-rick


On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:

> This is expected to happen from time to time of course as it's inherently
> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.
>
> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
> dnsseed.bluematt.me bitseed.xf2.org`
> ...
> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds
>
> $ grep -c 'closed' /tmp/x
> 6
>
> So of 48 IPs returned only 19 are actually usable. This is slowing down
> peer bringup for the Android apps, which don't currently save the addresses
> of last-used peers (yes, I know we should fix this).
>
> I was talking to a friend a few days ago about Bitcoin, he seemed
> interested. I'm hoping he might take on DNS seeding as a project. A custom
> DNS server that watches the network to find long-lived peers that run the
> latest version would be helpful for resolving this kind of thing.
>
>
> ------------------------------------------------------------------------------
> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
> The must-attend event for mobile developers. Connect with experts.
> Get tools for creating Super Apps. See the latest technologies.
> Sessions, hands-on labs, demos & much more. Register early & save!
> http://p.sf.net/sfu/rim-blackberry-1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/05aea1f2/attachment.html>

From decker.christian at gmail.com  Wed Aug  3 14:37:12 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 3 Aug 2011 16:37:12 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
	<CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>
	<CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>
Message-ID: <CALxbBHU=hBPLNCfjdfJNgO=mUd14MVJpZGA0J14OE6uZgk1k3Q@mail.gmail.com>

I'm curious whether my Non-Blocking network stack (BitDroid) isn't better
suited for detecting and tracking available peers. I have implemented
several benchmarks, including a simple peer counter listener, which would
have to be adapted to fit the DNS needs (open and check if a real peer is
listening). Being non-blocking it can open several hundreds of connections
to check reachability of the peers and at the same time keep a pool of peers
connected to listen for address broadcasts, with minimal overhead (single
thread, close to no context switches).

Just an idea :-)

Regards,
Chris

On Wed, Aug 3, 2011 at 4:18 PM, Rick Wesson
<rick at support-intelligence.com>wrote:

> Starting from bitcoinj, I have plenty of ways to publish DNS. Why sort them
> by version? Ordering from highest to lowest?
>
> how about publishing addresses under version.example.com if you version
> has a perfrence?
>
> -rick
>
>
> On Wed, Aug 3, 2011 at 7:10 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> There's no project currently :-)
>>
>> Starting from Matts code is probably the way to go. It's written in PHP.
>> Alternatively, you could write a Java app for it, as there are drop-in DNS
>> serving libraries you could link with BitCoinJ+sqlite. It probably wouldn't
>> be that hard. You'd want to sort nodes by version, how long they've been
>> observed to exist, the last polling time, etc.
>>
>> On Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson <
>> rick at support-intelligence.com> wrote:
>>
>>> Mike,
>>>
>>> I think I can contribute to your DNS seeding project. Could you help
>>> define long-lived peers?
>>>
>>> -rick
>>>
>>>
>>> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:
>>>
>>>> This is expected to happen from time to time of course as it's
>>>> inherently racy, but there are a *lot* of bad nodes appearing in the
>>>> DNS seeds.
>>>>
>>>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
>>>> dnsseed.bluematt.me bitseed.xf2.org`
>>>> ...
>>>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds
>>>>
>>>> $ grep -c 'closed' /tmp/x
>>>> 6
>>>>
>>>> So of 48 IPs returned only 19 are actually usable. This is slowing down
>>>> peer bringup for the Android apps, which don't currently save the addresses
>>>> of last-used peers (yes, I know we should fix this).
>>>>
>>>> I was talking to a friend a few days ago about Bitcoin, he seemed
>>>> interested. I'm hoping he might take on DNS seeding as a project. A custom
>>>> DNS server that watches the network to find long-lived peers that run the
>>>> latest version would be helpful for resolving this kind of thing.
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
>>>> The must-attend event for mobile developers. Connect with experts.
>>>> Get tools for creating Super Apps. See the latest technologies.
>>>> Sessions, hands-on labs, demos & much more. Register early & save!
>>>> http://p.sf.net/sfu/rim-blackberry-1
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>
>>
>
>
> ------------------------------------------------------------------------------
> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
> The must-attend event for mobile developers. Connect with experts.
> Get tools for creating Super Apps. See the latest technologies.
> Sessions, hands-on labs, demos & much more. Register early & save!
> http://p.sf.net/sfu/rim-blackberry-1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/1f90e4ca/attachment.html>

From mike at plan99.net  Wed Aug  3 14:39:57 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 3 Aug 2011 16:39:57 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CAPiTikUc5At5r8XH_5paQ2odx_bib0FGO4OqhGCeQEZ_VRkz0w@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
	<CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>
	<CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>
	<CAPiTikUc5At5r8XH_5paQ2odx_bib0FGO4OqhGCeQEZ_VRkz0w@mail.gmail.com>
Message-ID: <CANEZrP0DDkeuDwNZA+WV3LGXp0Q31ZJeJAWiV=6Xm+f=ZusrhQ@mail.gmail.com>

>
> There's a bigger problem here honestly. The p2p network is just starved for
> connectable slots.
>
Suggestions:

- massively increasing all the anti-DoS limits in 0.4, so far they've caused
a lot more damage than they solved.

- broadcasting an "upgrade now" type announcement. The alert system is
intended for informing users when there's a threat to system stability and
that's exactly what has been happening recently.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/78ba4297/attachment.html>

From gmaxwell at gmail.com  Wed Aug  3 14:48:33 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 3 Aug 2011 10:48:33 -0400
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CANEZrP0DDkeuDwNZA+WV3LGXp0Q31ZJeJAWiV=6Xm+f=ZusrhQ@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
	<CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>
	<CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>
	<CAPiTikUc5At5r8XH_5paQ2odx_bib0FGO4OqhGCeQEZ_VRkz0w@mail.gmail.com>
	<CANEZrP0DDkeuDwNZA+WV3LGXp0Q31ZJeJAWiV=6Xm+f=ZusrhQ@mail.gmail.com>
Message-ID: <CAAS2fgQc9a_-Qnv666c4gdkC0+jjk1QwAY8gMQv9Ts74LLaYbg@mail.gmail.com>

On Wed, Aug 3, 2011 at 10:39 AM, Mike Hearn <mike at plan99.net> wrote:
>> There's a bigger problem here honestly. The p2p network is just starved
>> for connectable slots.
>
> Suggestions:
> - massively increasing all the anti-DoS limits in 0.4, so far they've caused
> a lot more damage than they solved.

You can't "massively increase" the number of available connection
slots without risking running nodes on lower memory systems (e.g. VMs)
out of memory.

Moreover, 125 slots should be more than enough.  We need to figure out
why it isn't.



From dhuff at jrbobdobbs.org  Wed Aug  3 14:28:59 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Wed, 3 Aug 2011 09:28:59 -0500
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
	<CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>
	<CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>
Message-ID: <CAPiTikUc5At5r8XH_5paQ2odx_bib0FGO4OqhGCeQEZ_VRkz0w@mail.gmail.com>

There's a bigger problem here honestly. The p2p network is just starved for
connectable slots.

You can start up a bitcoind, on a host with sufficient connectivity, with
-maxconnections=512 and they will fill in <15 minutes.

As to why sort by version: <=3.23 has problems serving the blocks from the
last 2 months. It can take days to weeks to get the whole chain if you're
connecting to those nodes.

-- 
Douglas Huff
On Aug 3, 2011 9:18 AM, "Rick Wesson" <rick at support-intelligence.com> wrote:
> Starting from bitcoinj, I have plenty of ways to publish DNS. Why sort
them
> by version? Ordering from highest to lowest?
>
> how about publishing addresses under version.example.com if you version
has
> a perfrence?
>
> -rick
>
>
> On Wed, Aug 3, 2011 at 7:10 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> There's no project currently :-)
>>
>> Starting from Matts code is probably the way to go. It's written in PHP.
>> Alternatively, you could write a Java app for it, as there are drop-in
DNS
>> serving libraries you could link with BitCoinJ+sqlite. It probably
wouldn't
>> be that hard. You'd want to sort nodes by version, how long they've been
>> observed to exist, the last polling time, etc.
>>
>> On Wed, Aug 3, 2011 at 4:00 PM, Rick Wesson <
rick at support-intelligence.com
>> > wrote:
>>
>>> Mike,
>>>
>>> I think I can contribute to your DNS seeding project. Could you help
>>> define long-lived peers?
>>>
>>> -rick
>>>
>>>
>>> On Wed, Aug 3, 2011 at 3:04 AM, Mike Hearn <mike at plan99.net> wrote:
>>>
>>>> This is expected to happen from time to time of course as it's
inherently
>>>> racy, but there are a *lot* of bad nodes appearing in the DNS seeds.
>>>>
>>>> $ nmap -oG /tmp/x -p 8333 `dig +short bitseed.bitcoin.org.uk
>>>> dnsseed.bluematt.me bitseed.xf2.org`
>>>> ...
>>>> Nmap done: 48 IP addresses (25 hosts up) scanned in 9.80 seconds
>>>>
>>>> $ grep -c 'closed' /tmp/x
>>>> 6
>>>>
>>>> So of 48 IPs returned only 19 are actually usable. This is slowing down
>>>> peer bringup for the Android apps, which don't currently save the
addresses
>>>> of last-used peers (yes, I know we should fix this).
>>>>
>>>> I was talking to a friend a few days ago about Bitcoin, he seemed
>>>> interested. I'm hoping he might take on DNS seeding as a project. A
custom
>>>> DNS server that watches the network to find long-lived peers that run
the
>>>> latest version would be helpful for resolving this kind of thing.
>>>>
>>>>
>>>>
------------------------------------------------------------------------------
>>>> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
>>>> The must-attend event for mobile developers. Connect with experts.
>>>> Get tools for creating Super Apps. See the latest technologies.
>>>> Sessions, hands-on labs, demos & much more. Register early & save!
>>>> http://p.sf.net/sfu/rim-blackberry-1
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110803/520f6d84/attachment.html>

From bitcoin-list at bluematt.me  Wed Aug  3 15:32:00 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 03 Aug 2011 17:32:00 +0200
Subject: [Bitcoin-development] DNS seeds returning gone peers
In-Reply-To: <CAAS2fgQc9a_-Qnv666c4gdkC0+jjk1QwAY8gMQv9Ts74LLaYbg@mail.gmail.com>
References: <CANEZrP1-BaNmKhSPXSe2sjH0-DPm62_=OQ_S6aCT3-nLdFLLGA@mail.gmail.com>
	<CAJ1JLtuRhqwcCWjv+H2XUjsX-Za9ZkSkOsH3t=JaUu1581RGUA@mail.gmail.com>
	<CANEZrP2Cr1mVcj3CQQNx6BeWSb=hzxawva2Lz=sAbjx4AwYdmw@mail.gmail.com>
	<CAJ1JLttf+h5J8ehmx1j5P1GiGYAUiLN=fGjSV_dLoy72XQohfA@mail.gmail.com>
	<CAPiTikUc5At5r8XH_5paQ2odx_bib0FGO4OqhGCeQEZ_VRkz0w@mail.gmail.com>
	<CANEZrP0DDkeuDwNZA+WV3LGXp0Q31ZJeJAWiV=6Xm+f=ZusrhQ@mail.gmail.com>
	<CAAS2fgQc9a_-Qnv666c4gdkC0+jjk1QwAY8gMQv9Ts74LLaYbg@mail.gmail.com>
Message-ID: <1312385520.6416.1.camel@BMThinkPad.lan.bluematt.me>

On Wed, 2011-08-03 at 10:48 -0400, Gregory Maxwell wrote:
> On Wed, Aug 3, 2011 at 10:39 AM, Mike Hearn <mike at plan99.net> wrote:
> >> There's a bigger problem here honestly. The p2p network is just starved
> >> for connectable slots.
> >
> > Suggestions:
> > - massively increasing all the anti-DoS limits in 0.4, so far they've caused
> > a lot more damage than they solved.
They were redone in .24 to the point that they should not cause any such
issues in the future.
> 
> You can't "massively increase" the number of available connection
> slots without risking running nodes on lower memory systems (e.g. VMs)
> out of memory.
> 
> Moreover, 125 slots should be more than enough.  We need to figure out
> why it isn't.
Agreed.




From witchspace81 at gmail.com  Thu Aug  4 10:56:42 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 4 Aug 2011 10:56:42 +0000
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
Message-ID: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>

L.S.

Some bitcoin "security vulnerabilities" have been discussed by Dan Kaminsky
at BH 2011, there is one article about this dated yesterday:

http://searchsecurity.techtarget.com/news/2240039221/Black-Hat-2011-Dan-Kaminsky-reveals-network-security-research-topics

The article is very unspecific though. They talk about a tool called
"blitcoin" that "unmasks" both sides of a bitcoin transaction. A google
search also turned up nothing, except some misspellings.

Does anyone have more information?

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/3023ad09/attachment.html>

From andyparkins at gmail.com  Thu Aug  4 13:23:10 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 4 Aug 2011 14:23:10 +0100
Subject: [Bitcoin-development] Double spend detection to speed up
	transaction trust
Message-ID: <201108041423.14176.andyparkins@gmail.com>

Hello,

Here's a scenario (it's contrived to make the players easy to identify, more 
likely this would be low value automated vendors):

Two scammers get together to buy two Ferraris using only one set of BTC.  They 
travel to opposite ends of the world to two car dealerships that accept 
bitcoins without waiting for confirmations.  They are in contact by mobile.  
They each buy the car and come to pay.  At exactly the same moment, they both 
spend the same coins.  They both walk away with a car.

The current solution is the recommendation that vendors wait for six 
confirmations before releasing goods.  That's a long time though; more than 
most would be willing to wait.

Some points:
 - The bitcoin network is essentially honest
 - If a block chain fork happens, the transactions that are orphaned get added
   to the pending transaction list again, meaning ...
 - A valid transaction will _eventually_ make it into the (longest) block
   chain.
 - Actual distribution time for a transaction through the network is in the
   order of seconds not minutes
 - A double spend attempt has to enter the network near simulateously at
   different places, otherwise the second spend will be rejected instantly by
   the whole network.

New transactions propagate through the network if they are found to be valid.  
If they aren't valid, they are silently dropped.  In the event of a double 
spend attempt one of those transactions goes to (say) half the network, the 
other goes to the other half.  Whichever one reaches a node first is seen as 
the real one, the second being seen as invalid.  One or other of these will 
therefore end up in the "longest" chain; but there is no way to know which.

Here's my proposal then: when a node drops a transaction, it should not be 
silent.  It should be broadcast just as it always was going to be had it been 
valid.  Only it is broadcast with a new "inv" type, let's say 
"MSG_DOUBLESPEND" instead of "MSG_TX".

Now run the Ferrari test again.  The vendor sees the transaction that pays for 
the car appear near instantly (within the propagation time of the network).  A 
short while later they also see a MSG_DOUBLESPEND of the same coins that they 
have just accepted.  They can then operate whatever policy they want: wait for 
six, ten, twenty confirmations.  Call the police.  Whatever.  Miners can also 
significantly lower the priority of any transactions that get flagged in this 
way.

When there isn't a double spend attempt message within the network propagation 
time, they can be sure that their transaction is the one that miners are 
working on, and they'll eventually get their money.  In other words, they can 
accept the payment on zero confirmations.

At first I was concerned that this would make it possible to DOS a 
transaction, but of course it doesn't -- the transaction has to be internally-
valid to result in a MSG_DOUBLESPEND, meaning it can only be DOSed by someone 
with the appropriate private keys.



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/00d1be22/attachment.sig>

From bitcoin-list at bluematt.me  Thu Aug  4 14:14:54 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 04 Aug 2011 16:14:54 +0200
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
Message-ID: <1312467294.9762.4.camel@BMThinkPad.lan.bluematt.me>

Sounds like Dan wrote a tool which attempts to connect inputs/outputs
and make a map of a person on the network, or at least thats my blind
guess.  Something people have been saying was easily possible for some
time, but for some reason people insist on refusing their precious
Bitcoin isnt anonymous.

Matt

On Thu, 2011-08-04 at 10:56 +0000, John Smith wrote:
> L.S.
> 
> Some bitcoin "security vulnerabilities" have been discussed by Dan
> Kaminsky at BH 2011, there is one article about this dated yesterday:
> 
> http://searchsecurity.techtarget.com/news/2240039221/Black-Hat-2011-Dan-Kaminsky-reveals-network-security-research-topics
> 
> The article is very unspecific though. They talk about a tool called
> "blitcoin" that "unmasks" both sides of a bitcoin transaction. A
> google search also turned up nothing, except some misspellings. 
> 
> Does anyone have more information?
> 
> JS
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/9c4de841/attachment.sig>

From luke at dashjr.org  Thu Aug  4 14:38:44 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 4 Aug 2011 10:38:44 -0400
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
Message-ID: <201108041038.47396.luke@dashjr.org>

On Thursday, August 04, 2011 6:56:42 AM John Smith wrote:
> L.S.
> 
> Some bitcoin "security vulnerabilities" have been discussed by Dan Kaminsky
> at BH 2011, there is one article about this dated yesterday:
> 
> http://searchsecurity.techtarget.com/news/2240039221/Black-Hat-2011-Dan-Kam
> insky-reveals-network-security-research-topics
> 
> The article is very unspecific though. They talk about a tool called
> "blitcoin" that "unmasks" both sides of a bitcoin transaction. A google
> search also turned up nothing, except some misspellings.

Well, that certainly doesn't sound like a security vulnerability at all.
It's by design that everyone knows about every transaction.



From bitcoin-list at bluematt.me  Thu Aug  4 17:45:17 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 04 Aug 2011 19:45:17 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108041423.14176.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
Message-ID: <1312479917.3109.25.camel@Desktop666>

There really is no reason to add the extra network complexity for this.

First of all (as you point out) no one buying a Ferrari will refuse to
wait an hour for the payment to confirm.  If someone is attempting to
pull a similar trick on, say, a vending machine however it might make
sense.  But that changes the equation.  In order for these two scammers
to pull it off, some effort is required in terms of communicating the
time to send the coins and the nodes of the targets (vending machines or
whatever) must be figured out.  So now its less of "make it impossible"
and more of "make it really hard to the point that it is no where near
worth the effort".

Lets simplify the scenario a bit so that one scammer can pull it off.
Send one copy of your transaction to the target node and another to
large mining operations so that the payment transaction is considered
invalid to miners and a transaction which pays you is confirmed.

If you are the vending machine, your goal is not to figure out any
transactions which are yours, but to figure out which transactions which
are yours are going to be confirmed.  So, you peer with the largest
miners (a "Bitcoin backbone" or large miners and merchants has been
suggested over and over again and really hasn't happened) and modify
your client to, instead of dropping transactions which are
double-spends, keep both in memory pool and consider them both invalid
until one of them confirms.

This will work with 1, 2, or n scammers, doesn't require any additional
network messages, and offers just as good, if not better security over a
double spend message.

Additionally, in the future, when(/if) Bitcoin payment processors exist,
most merchants will rely on those, which can handle such double-spend
checks and tell a merchant a transaction is confirmed in ten seconds for
small transactions, an hour for large ones, or anywhere in between.
Such payment processors could also mine or have contracts with large
miners which allows them to influence the transactions which are to be
confirmed, allowing for even quicker confirmations and the offering of
insurance against unconfirmed transactions being invalidated.

Matt

On Thu, 2011-08-04 at 14:23 +0100, Andy Parkins wrote:
> Hello,
> 
> Here's a scenario (it's contrived to make the players easy to identify, more 
> likely this would be low value automated vendors):
> 
> Two scammers get together to buy two Ferraris using only one set of BTC.  They 
> travel to opposite ends of the world to two car dealerships that accept 
> bitcoins without waiting for confirmations.  They are in contact by mobile.  
> They each buy the car and come to pay.  At exactly the same moment, they both 
> spend the same coins.  They both walk away with a car.
> 
> The current solution is the recommendation that vendors wait for six 
> confirmations before releasing goods.  That's a long time though; more than 
> most would be willing to wait.
> 
> Some points:
>  - The bitcoin network is essentially honest
>  - If a block chain fork happens, the transactions that are orphaned get added
>    to the pending transaction list again, meaning ...
>  - A valid transaction will _eventually_ make it into the (longest) block
>    chain.
>  - Actual distribution time for a transaction through the network is in the
>    order of seconds not minutes
>  - A double spend attempt has to enter the network near simulateously at
>    different places, otherwise the second spend will be rejected instantly by
>    the whole network.
> 
> New transactions propagate through the network if they are found to be valid.  
> If they aren't valid, they are silently dropped.  In the event of a double 
> spend attempt one of those transactions goes to (say) half the network, the 
> other goes to the other half.  Whichever one reaches a node first is seen as 
> the real one, the second being seen as invalid.  One or other of these will 
> therefore end up in the "longest" chain; but there is no way to know which.
> 
> Here's my proposal then: when a node drops a transaction, it should not be 
> silent.  It should be broadcast just as it always was going to be had it been 
> valid.  Only it is broadcast with a new "inv" type, let's say 
> "MSG_DOUBLESPEND" instead of "MSG_TX".
> 
> Now run the Ferrari test again.  The vendor sees the transaction that pays for 
> the car appear near instantly (within the propagation time of the network).  A 
> short while later they also see a MSG_DOUBLESPEND of the same coins that they 
> have just accepted.  They can then operate whatever policy they want: wait for 
> six, ten, twenty confirmations.  Call the police.  Whatever.  Miners can also 
> significantly lower the priority of any transactions that get flagged in this 
> way.
> 
> When there isn't a double spend attempt message within the network propagation 
> time, they can be sure that their transaction is the one that miners are 
> working on, and they'll eventually get their money.  In other words, they can 
> accept the payment on zero confirmations.
> 
> At first I was concerned that this would make it possible to DOS a 
> transaction, but of course it doesn't -- the transaction has to be internally-
> valid to result in a MSG_DOUBLESPEND, meaning it can only be DOSed by someone 
> with the appropriate private keys.
> 
> 
> 
> Andy
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/25520642/attachment.sig>

From andyparkins at gmail.com  Thu Aug  4 18:22:16 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 4 Aug 2011 19:22:16 +0100
Subject: [Bitcoin-development] Double spend detection to speed up
	transaction trust
In-Reply-To: <1312479917.3109.25.camel@Desktop666>
References: <201108041423.14176.andyparkins@gmail.com>
	<1312479917.3109.25.camel@Desktop666>
Message-ID: <201108041922.16956.andyparkins@gmail.com>

On Thursday 04 August 2011 18:45:17 Matt Corallo wrote:
> There really is no reason to add the extra network complexity for this.

It's hardly complex.  It's exactly as it is now, with exactly the messages 
there are now, but with an extra type added to the inventory list.  A 
transaction _already_ propagates using inv messages with MSG_TX, is it 
really so "complex" to add MSG_DOUBLESPEND to the enum?  What's more it's 
backward compatible because clients that don't understand MSG_DOUBLESPEND 
will ignore the inv ending up exactly where we are now.

> First of all (as you point out) no one buying a Ferrari will refuse to
> wait an hour for the payment to confirm.  If someone is attempting to
> pull a similar trick on, say, a vending machine however it might make
> sense.  But that changes the equation.  In order for these two scammers

Vending machine, newspaper salesman, ice creams, a beer.  The list of small 
vendors is endless.  I picked Ferrari's out of the air.

> to pull it off, some effort is required in terms of communicating the
> time to send the coins and the nodes of the targets (vending machines or
> whatever) must be figured out.  So now its less of "make it impossible"
> and more of "make it really hard to the point that it is no where near
> worth the effort".

I think you've missed the point.  Double spend transactions that enters the 
network at two reasonably evenly connected points are each only seen by half 
the network, since the first one locks out the second from propagation.

> Lets simplify the scenario a bit so that one scammer can pull it off.
> Send one copy of your transaction to the target node and another to
> large mining operations so that the payment transaction is considered
> invalid to miners and a transaction which pays you is confirmed.

There is no "target" node.  There is only a vending machine listening for 
transactions.  It's unlikely that vending machines will even have incoming 
connections enabled.  They certainly won't be keeping a full copy of the 
block chain or be mining.

> If you are the vending machine, your goal is not to figure out any
> transactions which are yours, but to figure out which transactions which

It is a little bit.  Your job is _first_ to figure out which are yours; 
then, as you say, to see which are going to be confirmed.  Well: once you've 
seen a transaction on the net you know it's going to be confirmed... unless 
a matching double spend transaction was accepted by the next miner to 
generate a block.

> are yours are going to be confirmed.  So, you peer with the largest
> miners (a "Bitcoin backbone" or large miners and merchants has been
> suggested over and over again and really hasn't happened) and modify

It hasn't happened, and yet it seems to be that this non-existant thing is 
your solution to the problem.

> your client to, instead of dropping transactions which are
> double-spends, keep both in memory pool and consider them both invalid
> until one of them confirms.

Well that's what happens now.  But that doesn't help the poor sap who's just 
handed over some goods.  I want it so that small businesses can use the 
client to give them practical answers instead of this "0/unconfirmed" stuff 
which requires understanding of the system.

> This will work with 1, 2, or n scammers, doesn't require any additional
> network messages, and offers just as good, if not better security over a
> double spend message.

I'm not really trying to prevent double spends -- bitcoin _already_ prevents 
double spends.  Also: the only difference between your suggestion (don't 
drop) and my suggestion (don't drop but mark with MSG_DOUBLESPEND) is a 
single number in the inv.  I really don't get the objection.

> Additionally, in the future, when(/if) Bitcoin payment processors exist,

"In the future" is all well and good.  What if there is no future because 
bitcoin is still too difficult for average joe to use?



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From bitcoin-list at bluematt.me  Thu Aug  4 18:39:56 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 04 Aug 2011 20:39:56 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108041922.16956.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<1312479917.3109.25.camel@Desktop666>
	<201108041922.16956.andyparkins@gmail.com>
Message-ID: <1312483196.3109.38.camel@Desktop666>

On Thu, 2011-08-04 at 19:22 +0100, Andy Parkins wrote:
> On Thursday 04 August 2011 18:45:17 Matt Corallo wrote:
> > There really is no reason to add the extra network complexity for this.
> 
> It's hardly complex.  It's exactly as it is now, with exactly the messages 
> there are now, but with an extra type added to the inventory list.  A 
> transaction _already_ propagates using inv messages with MSG_TX, is it 
> really so "complex" to add MSG_DOUBLESPEND to the enum?  What's more it's 
> backward compatible because clients that don't understand MSG_DOUBLESPEND 
> will ignore the inv ending up exactly where we are now.
But why? It results in slightly more network traffic which is exactly
what we don't want, and it adds yet another message people have to know
about.
> 
> > First of all (as you point out) no one buying a Ferrari will refuse to
> > wait an hour for the payment to confirm.  If someone is attempting to
> > pull a similar trick on, say, a vending machine however it might make
> > sense.  But that changes the equation.  In order for these two scammers
> 
> Vending machine, newspaper salesman, ice creams, a beer.  The list of small 
> vendors is endless.  I picked Ferrari's out of the air.
Ferraris aren't exactly small ;)
> 
> > to pull it off, some effort is required in terms of communicating the
> > time to send the coins and the nodes of the targets (vending machines or
> > whatever) must be figured out.  So now its less of "make it impossible"
> > and more of "make it really hard to the point that it is no where near
> > worth the effort".
> 
> I think you've missed the point.  Double spend transactions that enters the 
> network at two reasonably evenly connected points are each only seen by half 
> the network, since the first one locks out the second from propagation.
No one cares about what the network thinks is the right transaction, its
only what miners believe that matters.
> 
> > Lets simplify the scenario a bit so that one scammer can pull it off.
> > Send one copy of your transaction to the target node and another to
> > large mining operations so that the payment transaction is considered
> > invalid to miners and a transaction which pays you is confirmed.
> 
> There is no "target" node.  There is only a vending machine listening for 
> transactions.  It's unlikely that vending machines will even have incoming 
> connections enabled.  They certainly won't be keeping a full copy of the 
> block chain or be mining.
Even if the vending machine doesn't keep the full chain and doesn't
accept incoming connections, its still the target node.  What other
nodes on the network think doesn't matter as long as you get the target
to think a transaction that won't be confirmed will be.  If it doesn't
accept incoming connections you want to find nodes that do that are
connected to your target.
> 
> > If you are the vending machine, your goal is not to figure out any
> > transactions which are yours, but to figure out which transactions which
> 
> It is a little bit.  Your job is _first_ to figure out which are yours; 
> then, as you say, to see which are going to be confirmed.  Well: once you've 
> seen a transaction on the net you know it's going to be confirmed... unless 
> a matching double spend transaction was accepted by the next miner to 
> generate a block.
That is exactly my point.
> 
> > are yours are going to be confirmed.  So, you peer with the largest
> > miners (a "Bitcoin backbone" or large miners and merchants has been
> > suggested over and over again and really hasn't happened) and modify
> 
> It hasn't happened, and yet it seems to be that this non-existant thing is 
> your solution to the problem.
Its much easier to create than to change the network code to relay info
on double-spend transactions.
> 
> > your client to, instead of dropping transactions which are
> > double-spends, keep both in memory pool and consider them both invalid
> > until one of them confirms.
> 
> Well that's what happens now.  But that doesn't help the poor sap who's just 
> handed over some goods.  I want it so that small businesses can use the 
> client to give them practical answers instead of this "0/unconfirmed" stuff 
> which requires understanding of the system.
No, thats not what happens now.  Currently if your node gets a
transaction which conflicts with one it already knows about, it silently
drops it without a second thought.  My point is if you actually dealt
with such cases and made good connections, you would be able to prevent
double spends nearly perfectly.
> 
> > This will work with 1, 2, or n scammers, doesn't require any additional
> > network messages, and offers just as good, if not better security over a
> > double spend message.
> 
> I'm not really trying to prevent double spends -- bitcoin _already_ prevents 
> double spends.  Also: the only difference between your suggestion (don't 
> drop) and my suggestion (don't drop but mark with MSG_DOUBLESPEND) is a 
> single number in the inv.  I really don't get the objection.
No, my suggestion is not to relay the second transaction.  The second
transaction should continue to not be relayed as it currently is,
however receiving such a transaction should trigger the node to notify
the user that the transaction should not be accepted until it makes it
into a block (in fact, you could already do this if you implemented a
debug.log parser and made well-placed connections).
> 
> > Additionally, in the future, when(/if) Bitcoin payment processors exist,
> 
> "In the future" is all well and good.  What if there is no future because 
> bitcoin is still too difficult for average joe to use?
Bitcoin is absolutely still an experiment and no one thinks that any
kind of future is guaranteed.  This was not meant as an argument, but
simply as "if bitcoin does end up going somewhere, it will likely be
done like this".

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/fcd95f9d/attachment.sig>

From andyparkins at gmail.com  Thu Aug  4 19:42:55 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 4 Aug 2011 20:42:55 +0100
Subject: [Bitcoin-development] Double spend detection to speed up
	transaction trust
In-Reply-To: <1312483196.3109.38.camel@Desktop666>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
Message-ID: <201108042042.55214.andyparkins@gmail.com>

On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:

> But why? It results in slightly more network traffic which is exactly
> what we don't want, and it adds yet another message people have to know
> about.

"Slightly" is an understatement.  It add more network traffic for every 
double spend attempt.  Which don't happen very often.

Also, I'm not proposing a new message, heaven forbid that we add a new 
message type, I'm proposing that we do this:

 enum
 {
     MSG_TX = 1,
     MSG_BLOCK,
+    MSG_DOUBLESPEND,
 };

Also, people don't "have" to know about it.  And it's not "people" it's an 
addition to the _one_ official client.  _and_ it's backward compatible 
because if they don't know about it, nothing changes... the TX gets dropped 
just as it is now.

> > I think you've missed the point.  Double spend transactions that enters
> > the network at two reasonably evenly connected points are each only
> > seen by half the network, since the first one locks out the second
> > from propagation.
> 
> No one cares about what the network thinks is the right transaction, its
> only what miners believe that matters.

They do care because the network as a whole is what makes the eventual 
decision about which is the block-chain-to-rule-them-all.  Chain forks, and 
eventual reorgs are also far less disruptive when each leg of a double spend 
isn't on each potential chain.  "Half the network" includes half of the 
miners.  It's perfectly possible for half the miners to be working on one 
leg, half on the other.  That means it's 50/50 which leg eventually gets 
confirmed.

> Even if the vending machine doesn't keep the full chain and doesn't
> accept incoming connections, its still the target node.  What other
> nodes on the network think doesn't matter as long as you get the target
> to think a transaction that won't be confirmed will be.  If it doesn't
> accept incoming connections you want to find nodes that do that are
> connected to your target.

Well that's true enough; but how on earth you're going to identify an IP 
address of a particular vending machine that isn't accepting incoming 
connections is beyond me.  If it is a target it's pretty close to invisible.

> Its much easier to create than to change the network code to relay info
> on double-spend transactions.

What?  It's easier to trigger massive adoption and organisation of an 
inherently disorgainsed network of miners than it is to write a few lines of 
code?  If that's true, then the bitcoin source is even more impenetrable 
than I imagine.

> > Well that's what happens now.  But that doesn't help the poor sap who's
> > just handed over some goods.  I want it so that small businesses can
> > use the client to give them practical answers instead of this
> > "0/unconfirmed" stuff which requires understanding of the system.
> 
> No, thats not what happens now.  Currently if your node gets a
> transaction which conflicts with one it already knows about, it silently
> drops it without a second thought.  My point is if you actually dealt
> with such cases and made good connections, you would be able to prevent
> double spends nearly perfectly.

It's not about prevention, they are already prevented.  It's about 
detection.  Quickly.

> > I'm not really trying to prevent double spends -- bitcoin _already_
> > prevents double spends.  Also: the only difference between your
> > suggestion (don't drop) and my suggestion (don't drop but mark with
> > MSG_DOUBLESPEND) is a single number in the inv.  I really don't get
> > the objection.
> 
> No, my suggestion is not to relay the second transaction.  The second
> transaction should continue to not be relayed as it currently is,
> however receiving such a transaction should trigger the node to notify
> the user that the transaction should not be accepted until it makes it
> into a block (in fact, you could already do this if you implemented a
> debug.log parser and made well-placed connections).

How is this second transaction going to end up anywhere but on a few 
isolated nodes if it isn't propagated?  The only way _both_ can be in a pool 
is if they are both received.  If they aren't both forwarded then it won't 
be in most pools.  If it isn't in most pools then which how is the relevant 
user going to get notified?

> Bitcoin is absolutely still an experiment and no one thinks that any
> kind of future is guaranteed.  This was not meant as an argument, but

If it's still an experiment why is there such huge objection to pretty much 
every change anyone proposes?  Bitcoin is one of the most conservative 
projects I've ever seen, even for the most passive of changes.  I can 
understand wanting to prevent potential financial loss, but it's not like 
I'm suggesting we start broadcasting private keys on the network.

> simply as "if bitcoin does end up going somewhere, it will likely be
> done like this".

When you're using it as an argument for why a suggestion is unnecessary 
that's not how it sounds.

Anyway; it's fine.  You don't think it's a good idea; and I suspect none of 
the other official client developers will either, they don't like protocol 
changes.  So be it; it was only a suggestion and I'm a nobody around here.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From gmaxwell at gmail.com  Thu Aug  4 20:08:07 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 4 Aug 2011 16:08:07 -0400
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108042042.55214.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
Message-ID: <CAAS2fgSMFmtLeDzzOf5dxrGUEGCrUzAqbuzGeSaDzBFx940x7Q@mail.gmail.com>

On Thu, Aug 4, 2011 at 3:42 PM, Andy Parkins <andyparkins at gmail.com> wrote:
> On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:
>
>> But why? It results in slightly more network traffic which is exactly
>> what we don't want, and it adds yet another message people have to know
>> about.
>
> "Slightly" is an understatement. ?It add more network traffic for every
> double spend attempt. ?Which don't happen very often.

But they can be trivially generated on demand, and potentially result
in unbounded flooding.

Even if you carefully don't duplicate an announcement I can easily
generate an unlimited number of double-spends for the network to
flood. The normal anti-DDOS logic doesn't work because there can be no
additional proof-of-workish costs for the double spend (they'd share
whatever anti-ddos fees the first txn had).

This is somewhat soluble, I guess. Rather than NAK the transaction the
way it would work is propagating conflicts on each of the conflicted
inputs.  "I've seen at least two transactions recently trying to spend
input X, here is proof: (two txn IDs)". Even if there are more spends
of that input you don't need to hear about them, knowing about two
spends of an input is enough to consider that input (and perhaps all
inputs with an identical script to that one) temporarily suspect.
Though it would have to be done input by input.

This might be an interesting feature if not for the fact that the
software already waits a fair number of confirms before considering
something confirmed. Of course, a sybil can just filter these messages
diminishing their usefulness.

I suppose I could add this as a (7) to this list:
https://bitcointalk.org/index.php?topic=28565.msg359948#msg359948



From luke at dashjr.org  Thu Aug  4 20:29:01 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 4 Aug 2011 16:29:01 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <201107101442.43605.luke@dashjr.org>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201107101442.43605.luke@dashjr.org>
Message-ID: <201108041629.04130.luke@dashjr.org>

Reminder these are still ready for merging...

Jeff, you seem to have rewritten *part of* bugfix_CreateThread_leak and 
neglected to attribute the original author (as my branch did/does).

> For the "3diff" version, I extracted and made proper git branches for each
> logical part:
>   hub_mode
>   threaded_rpc
>   \-- rpc_keepalive (depends on threaded_rpc, or a single connection would
>                      keep the JSON-RPC interface locked up)
>   signal_blk_notify (generic version of -pollpidfile, with a bugfix)
>   bugfix_CreateThread_leak
>   getwork_dedupe (original branch for my bugfix)
> 
> In addition, I also consider these branches valid candidates for merging:
>   coinbaser (popens a given command and reads coinbase outputs from stdout)
>   gitignore (ignore some common misc files)
>   minfee_modes (internal function changes to allow specifying different
> fees for relay, send, or accept-in-block)
>   \-- eligius_relay (relay lower fees only Eligius will accept)
>       \-- eligius_sendfee (send lower fees only Eligius will accept)
>   txinfo (adds entries to getinfo for transactions accepted for relaying,
>           transactions accepted for the current block-in-progress, and
> current block-in-progress size)
>   bitcoinuri (compliant support for all bitcoin: URIs)
> 
> All available from git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git



From bitcoin-list at bluematt.me  Thu Aug  4 20:33:29 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 04 Aug 2011 22:33:29 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108042042.55214.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
Message-ID: <1312490009.3109.45.camel@Desktop666>

On Thu, 2011-08-04 at 20:42 +0100, Andy Parkins wrote:
> On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:
> 
> > But why? It results in slightly more network traffic which is exactly
> > what we don't want, and it adds yet another message people have to know
> > about.
> 
> "Slightly" is an understatement.  It add more network traffic for every 
> double spend attempt.  Which don't happen very often.
Exactly, why add more network traffic for something that you can get
better without doing that?
> 
> Also, I'm not proposing a new message, heaven forbid that we add a new 
> message type, I'm proposing that we do this:
> 
>  enum
>  {
>      MSG_TX = 1,
>      MSG_BLOCK,
> +    MSG_DOUBLESPEND,
>  };
> 
> Also, people don't "have" to know about it.  And it's not "people" it's an 
> addition to the _one_ official client.  _and_ it's backward compatible 
> because if they don't know about it, nothing changes... the TX gets dropped 
> just as it is now.
Again though, adding more crap to the protocols is something we want to
avoid, especially if it offers no gain.
> 
> > > I think you've missed the point.  Double spend transactions that enters
> > > the network at two reasonably evenly connected points are each only
> > > seen by half the network, since the first one locks out the second
> > > from propagation.
> > 
> > No one cares about what the network thinks is the right transaction, its
> > only what miners believe that matters.
> 
> They do care because the network as a whole is what makes the eventual 
> decision about which is the block-chain-to-rule-them-all.  Chain forks, and 
> eventual reorgs are also far less disruptive when each leg of a double spend 
> isn't on each potential chain.  "Half the network" includes half of the 
> miners.  It's perfectly possible for half the miners to be working on one 
> leg, half on the other.  That means it's 50/50 which leg eventually gets 
> confirmed.
Nope, the network decides nothing, only the miners decide.
> 
> > Even if the vending machine doesn't keep the full chain and doesn't
> > accept incoming connections, its still the target node.  What other
> > nodes on the network think doesn't matter as long as you get the target
> > to think a transaction that won't be confirmed will be.  If it doesn't
> > accept incoming connections you want to find nodes that do that are
> > connected to your target.
> 
> Well that's true enough; but how on earth you're going to identify an IP 
> address of a particular vending machine that isn't accepting incoming 
> connections is beyond me.  If it is a target it's pretty close to invisible.
Then your whole attack scenario is broken and it becomes a 50/50 (or
more likely less) guess.
> 
> > Its much easier to create than to change the network code to relay info
> > on double-spend transactions.
> 
> What?  It's easier to trigger massive adoption and organisation of an 
> inherently disorgainsed network of miners than it is to write a few lines of 
> code?  If that's true, then the bitcoin source is even more impenetrable 
> than I imagine.
No, its easier for people who care to make sure they are peered with
well-connected nodes than for us to change the network protocol.
> 
> > > Well that's what happens now.  But that doesn't help the poor sap who's
> > > just handed over some goods.  I want it so that small businesses can
> > > use the client to give them practical answers instead of this
> > > "0/unconfirmed" stuff which requires understanding of the system.
> > 
> > No, thats not what happens now.  Currently if your node gets a
> > transaction which conflicts with one it already knows about, it silently
> > drops it without a second thought.  My point is if you actually dealt
> > with such cases and made good connections, you would be able to prevent
> > double spends nearly perfectly.
> 
> It's not about prevention, they are already prevented.  It's about 
> detection.  Quickly.
Yep, which is what my suggestion does.
> 
> > > I'm not really trying to prevent double spends -- bitcoin _already_
> > > prevents double spends.  Also: the only difference between your
> > > suggestion (don't drop) and my suggestion (don't drop but mark with
> > > MSG_DOUBLESPEND) is a single number in the inv.  I really don't get
> > > the objection.
> > 
> > No, my suggestion is not to relay the second transaction.  The second
> > transaction should continue to not be relayed as it currently is,
> > however receiving such a transaction should trigger the node to notify
> > the user that the transaction should not be accepted until it makes it
> > into a block (in fact, you could already do this if you implemented a
> > debug.log parser and made well-placed connections).
> 
> How is this second transaction going to end up anywhere but on a few 
> isolated nodes if it isn't propagated?  The only way _both_ can be in a pool 
> is if they are both received.  If they aren't both forwarded then it won't 
> be in most pools.  If it isn't in most pools then which how is the relevant 
> user going to get notified?
If it only ends up on a few isolated nodes, then you dont care as the
ones that you dont know about will never be confirmed.  If it ends up on
a node you peer with, you will be able to fetch both transactions and
then you know about the double spend.  Hence why you have to have
well-connected peers.
> 
> > Bitcoin is absolutely still an experiment and no one thinks that any
> > kind of future is guaranteed.  This was not meant as an argument, but
> 
> If it's still an experiment why is there such huge objection to pretty much 
> every change anyone proposes?  Bitcoin is one of the most conservative 
> projects I've ever seen, even for the most passive of changes.  I can 
> understand wanting to prevent potential financial loss, but it's not like 
> I'm suggesting we start broadcasting private keys on the network.
No one is against making changes if they offer clear incentive.  This
one doesnt.  Additionally, whether its an experiment or not, people have
money stored in it and a mistake could mean the loss of tens of
thousands or hundreds of thousands of dollars.  Lastly, no one is (yet)
paid to work on Bitcoin, sorry the developers dont spend enough time
merging for your liking.
> 
> > simply as "if bitcoin does end up going somewhere, it will likely be
> > done like this".
> 
> When you're using it as an argument for why a suggestion is unnecessary 
> that's not how it sounds.
> 
> Anyway; it's fine.  You don't think it's a good idea; and I suspect none of 
> the other official client developers will either, they don't like protocol 
> changes.  So be it; it was only a suggestion and I'm a nobody around here.
I think having the ability to detect double-spends rapidly is something
that is needed, my point is that you already can with relatively little
effort, no point adding more stuff to make it no easier.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/469ee132/attachment.sig>

From andrew at andrewschaaf.com  Thu Aug  4 20:07:42 2011
From: andrew at andrewschaaf.com (Andrew Schaaf)
Date: Thu, 4 Aug 2011 16:07:42 -0400
Subject: [Bitcoin-development] Double spend detection to speed up
	transaction trust
In-Reply-To: <201108042042.55214.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
Message-ID: <82CEB610-9821-4928-8A13-30088A59223C@andrewschaaf.com>


One double-spend fighting option is for each mining pool to offer a realtime feed of accepted TXs.

I am hoping to complete the following later this month:
	
	(1) A minimal bitcoind patch that writes raw accepted TXs and BLOCKs to stdout with a prefix of ("2naXaRQj--TX\n%d\n" % (data_length))
		(Proof-of-concept done ? I'll submit a pull request with "--print-accepted-txs-and-blocks" when I get a chance to clean it up)
	
	(2) A minimal NodeJS app which invokes bitcoind as a subprocess, parses the TXs and BLOCKs, and offers a realtime feed



On Aug 4, 2011, at 3:42 PM, Andy Parkins wrote:

> On Thursday 04 August 2011 19:39:56 Matt Corallo wrote:
> 
>> But why? It results in slightly more network traffic which is exactly
>> what we don't want, and it adds yet another message people have to know
>> about.
> 
> "Slightly" is an understatement.  It add more network traffic for every 
> double spend attempt.  Which don't happen very often.
> 
> Also, I'm not proposing a new message, heaven forbid that we add a new 
> message type, I'm proposing that we do this:
> 
> enum
> {
>     MSG_TX = 1,
>     MSG_BLOCK,
> +    MSG_DOUBLESPEND,
> };
> 
> Also, people don't "have" to know about it.  And it's not "people" it's an 
> addition to the _one_ official client.  _and_ it's backward compatible 
> because if they don't know about it, nothing changes... the TX gets dropped 
> just as it is now.
> 
>>> I think you've missed the point.  Double spend transactions that enters
>>> the network at two reasonably evenly connected points are each only
>>> seen by half the network, since the first one locks out the second
>>> from propagation.
>> 
>> No one cares about what the network thinks is the right transaction, its
>> only what miners believe that matters.
> 
> They do care because the network as a whole is what makes the eventual 
> decision about which is the block-chain-to-rule-them-all.  Chain forks, and 
> eventual reorgs are also far less disruptive when each leg of a double spend 
> isn't on each potential chain.  "Half the network" includes half of the 
> miners.  It's perfectly possible for half the miners to be working on one 
> leg, half on the other.  That means it's 50/50 which leg eventually gets 
> confirmed.
> 
>> Even if the vending machine doesn't keep the full chain and doesn't
>> accept incoming connections, its still the target node.  What other
>> nodes on the network think doesn't matter as long as you get the target
>> to think a transaction that won't be confirmed will be.  If it doesn't
>> accept incoming connections you want to find nodes that do that are
>> connected to your target.
> 
> Well that's true enough; but how on earth you're going to identify an IP 
> address of a particular vending machine that isn't accepting incoming 
> connections is beyond me.  If it is a target it's pretty close to invisible.
> 
>> Its much easier to create than to change the network code to relay info
>> on double-spend transactions.
> 
> What?  It's easier to trigger massive adoption and organisation of an 
> inherently disorgainsed network of miners than it is to write a few lines of 
> code?  If that's true, then the bitcoin source is even more impenetrable 
> than I imagine.
> 
>>> Well that's what happens now.  But that doesn't help the poor sap who's
>>> just handed over some goods.  I want it so that small businesses can
>>> use the client to give them practical answers instead of this
>>> "0/unconfirmed" stuff which requires understanding of the system.
>> 
>> No, thats not what happens now.  Currently if your node gets a
>> transaction which conflicts with one it already knows about, it silently
>> drops it without a second thought.  My point is if you actually dealt
>> with such cases and made good connections, you would be able to prevent
>> double spends nearly perfectly.
> 
> It's not about prevention, they are already prevented.  It's about 
> detection.  Quickly.
> 
>>> I'm not really trying to prevent double spends -- bitcoin _already_
>>> prevents double spends.  Also: the only difference between your
>>> suggestion (don't drop) and my suggestion (don't drop but mark with
>>> MSG_DOUBLESPEND) is a single number in the inv.  I really don't get
>>> the objection.
>> 
>> No, my suggestion is not to relay the second transaction.  The second
>> transaction should continue to not be relayed as it currently is,
>> however receiving such a transaction should trigger the node to notify
>> the user that the transaction should not be accepted until it makes it
>> into a block (in fact, you could already do this if you implemented a
>> debug.log parser and made well-placed connections).
> 
> How is this second transaction going to end up anywhere but on a few 
> isolated nodes if it isn't propagated?  The only way _both_ can be in a pool 
> is if they are both received.  If they aren't both forwarded then it won't 
> be in most pools.  If it isn't in most pools then which how is the relevant 
> user going to get notified?
> 
>> Bitcoin is absolutely still an experiment and no one thinks that any
>> kind of future is guaranteed.  This was not meant as an argument, but
> 
> If it's still an experiment why is there such huge objection to pretty much 
> every change anyone proposes?  Bitcoin is one of the most conservative 
> projects I've ever seen, even for the most passive of changes.  I can 
> understand wanting to prevent potential financial loss, but it's not like 
> I'm suggesting we start broadcasting private keys on the network.
> 
>> simply as "if bitcoin does end up going somewhere, it will likely be
>> done like this".
> 
> When you're using it as an argument for why a suggestion is unnecessary 
> that's not how it sounds.
> 
> Anyway; it's fine.  You don't think it's a good idea; and I suspect none of 
> the other official client developers will either, they don't like protocol 
> changes.  So be it; it was only a suggestion and I'm a nobody around here.
> 
> 
> 
> Andy
> 
> -- 
> Dr Andy Parkins
> andyparkins at gmail.com
> 
> ------------------------------------------------------------------------------
> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
> The must-attend event for mobile developers. Connect with experts. 
> Get tools for creating Super Apps. See the latest technologies.
> Sessions, hands-on labs, demos & much more. Register early & save!
> http://p.sf.net/sfu/rim-blackberry-1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gmaxwell at gmail.com  Thu Aug  4 20:35:53 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 4 Aug 2011 16:35:53 -0400
Subject: [Bitcoin-development] Discussion related to pull 349 and pull
 319 (escrow transactions)
In-Reply-To: <43351.137.56.163.46.1312351847.squirrel@lavabit.com>
References: <CAAS2fgQ-L-1K2Oi40tqnhxpnnWQHqgbd4BmqedhA3WcevYiCzg@mail.gmail.com>
	<43351.137.56.163.46.1312351847.squirrel@lavabit.com>
Message-ID: <CAAS2fgQ6GXfebUV8_PLVpLJ9jvPF8FXiBqwquhGFNZ+Vt3uCtg@mail.gmail.com>

On Wed, Aug 3, 2011 at 2:10 AM,  <bgroff at lavabit.com> wrote:
> Thank you! ?(I think you mean 319 here)

Correct.

> With Eligius mining !IsStandard transactions and probably other pools open
> to the idea, I am hopeful that we can quickly get 30%+ of mining power to
> upgrade, which means that we could still mine these in a reasonable time
> frame (under 1 hour).

It's not just a matter of mining power, it's also a question of
propagation.  Matt and I tried to perform a non-standard transaction
weeks ago and weren't able to get in mined after many hours. (we
eventually double spent the input with a normal transaction in order
to make it go away, interestingly one point about non-propagating txn
is that they're extra vulnerable to double spending by a standard txn,
as the non-standard one won't preclude the propagation of the standard
one)

>From discussion on IRC it seemed clear enough that the current focus
on maturity/bugfixes is probably going to delay your full patch, but
the IsStandard part is uncontroversial and could go in quickly.

Based on that I think it would be very useful to split 319 into two
pull requests: one which does the IsStandard change, and one which
adds the full escrow feature set.  This way when the escrow patch does
enter the mainline client it will be meet up with a network which is
happy to handle its transactions.

(and people who are eager to use escrow can use modified clients on
the main network before that point in time)

> I'm not sure I see the problem here.  CScript.operator<< currently inserts
> values into scripts using the shortest possible sequence.

Ah for some reason I thought your current code did not always produce
the shortest sequence.

If so, I see no reason to block on the other pull.



From bitcoin-list at bluematt.me  Thu Aug  4 20:38:25 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 04 Aug 2011 22:38:25 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <82CEB610-9821-4928-8A13-30088A59223C@andrewschaaf.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<82CEB610-9821-4928-8A13-30088A59223C@andrewschaaf.com>
Message-ID: <1312490305.3109.46.camel@Desktop666>

On Thu, 2011-08-04 at 16:07 -0400, Andrew Schaaf wrote:
> One double-spend fighting option is for each mining pool to offer a realtime feed of accepted TXs.
> 
> I am hoping to complete the following later this month:
> 	
> 	(1) A minimal bitcoind patch that writes raw accepted TXs and BLOCKs to stdout with a prefix of ("2naXaRQj--TX\n%d\n" % (data_length))
> 		(Proof-of-concept done ? I'll submit a pull request with "--print-accepted-txs-and-blocks" when I get a chance to clean it up)
> 	
> 	(2) A minimal NodeJS app which invokes bitcoind as a subprocess, parses the TXs and BLOCKs, and offers a realtime feed

They already do if they provide the IP of their node (or a proxy node on
top of theirs which would be recommended for security).  This has been
my whole point the entire time.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110804/6bbe2769/attachment.sig>

From luke at dashjr.org  Thu Aug  4 20:42:01 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 4 Aug 2011 16:42:01 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <201108041629.04130.luke@dashjr.org>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201107101442.43605.luke@dashjr.org>
	<201108041629.04130.luke@dashjr.org>
Message-ID: <201108041642.04208.luke@dashjr.org>

On Thursday, August 04, 2011 4:29:01 PM Luke-Jr wrote:
> Jeff, you seem to have rewritten *part of* bugfix_CreateThread_leak and
> neglected to attribute the original author (as my branch did/does).

My apologies. BlueMatt showed me how my comment here was wrong.
Hopefully I'll remember how GitHub shows merges like this in the future.



From mike at plan99.net  Thu Aug  4 21:36:23 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 4 Aug 2011 23:36:23 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108042042.55214.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
Message-ID: <CANEZrP3kEquEvqkqGqSh0iPRqoHhKLHoNgqc+9EORLoxpL7a=g@mail.gmail.com>

> If it's still an experiment why is there such huge objection to pretty much
> every change anyone proposes?

I don't think there are huge objections to every change. You've only
really argued about this with Matt ;)

The vending machine/detecting double spends issue was discussed by
Satoshi in July 2010:

   https://bitcointalk.org/index.php?topic=423.msg3819#msg3819

He mentioned payment processors that could "alert the transaction is bad".

Gregorys idea looks sound to me. It'd be useful, though, to have a NAK
message for transactions anyway (not propagated). It's possible to get
yourself into a situation today where you connect to nodes that refuse
to relay your transaction for some reason (perhaps your peers are
using old fee rules, or you are) but you think the transaction was
relayed. The user is left wondering why the spend didn't confirm.

If nodes sent a message saying "I refuse to process this tx because
<reason>" it'd make debugging and testing easier as well.



From moon at justmoon.de  Thu Aug  4 22:10:59 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Fri, 05 Aug 2011 00:10:59 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <1312490305.3109.46.camel@Desktop666>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<82CEB610-9821-4928-8A13-30088A59223C@andrewschaaf.com>
	<1312490305.3109.46.camel@Desktop666>
Message-ID: <4E3B18F3.4010605@justmoon.de>

Since nobody else has mentioned it: There is another (more pragmatic?) 
way to detect double spends:

1. Connect to lots of clients
2a. If they all send you the same transaction -> double spend unlikely
2b. If some don't send you the transaction (or send a conflicting one) 
-> double spend in progress

Obviously not everyone will run a double spend detector - it's much more 
easily realized as a service (just like mining.) Jan put up a proof of 
concept: http://www.transactionradar.com/

Would network support like a MSG_DOUBLESPEND be better? I used to think 
yes, but looking at the reality of Transaction Radar, I'm not so sure. 
Nothing stops such a service from scaling up and connecting to thousands 
of random nodes (especially when the network itself grows bigger), 
pushing the probabilities of missing a double spend "in the wild" to 
near zero. It could also connect directly to important miners/pools as 
others have suggested.

Of course this doesn't help against double spends where the attacker 
does his own mining*, but neither would MSG_DOUBLESPEND. Given the added 
network load I'd argue that network support for double spends is 
unnecessary and potentially damaging. DoS is more scary to me than 
non-instant transactions.

* In this case of course the hacker will be exposed to some randomness, 
and I doubt many attackers will buy 100 televisions, newspaper 
subscriptions or MP3s to get one for free. So this is only a problem for 
liquid goods with tiny spreads (any investment or stored value instrument.)




From bitcoin-list at bluematt.me  Thu Aug  4 22:16:13 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 05 Aug 2011 00:16:13 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <CANEZrP3kEquEvqkqGqSh0iPRqoHhKLHoNgqc+9EORLoxpL7a=g@mail.gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<CANEZrP3kEquEvqkqGqSh0iPRqoHhKLHoNgqc+9EORLoxpL7a=g@mail.gmail.com>
Message-ID: <1312496173.3109.55.camel@Desktop666>

On Thu, 2011-08-04 at 23:36 +0200, Mike Hearn wrote:
> The vending machine/detecting double spends issue was discussed by
> Satoshi in July 2010:
> 
>    https://bitcointalk.org/index.php?topic=423.msg3819#msg3819
> 
> He mentioned payment processors that could "alert the transaction is bad".
I stand with satoshi here.  No need to add more stuff to the network
protocol, a well-connected node can easily monitor the miners(/network)
for double-spends and alert whoever may need to know that the
transaction should not be accepted.  True, not everyone has the
resources to try to implement this, however the number of people who
have the resources to implement a Bitcoin storefront and not implement
this (vs those who will/do use a payment processor who handles such
things), I would think, are fairly small.
Additionally, keep in mind that many storefronts don't need to care if a
transaction confirms in 10 seconds or 1 hour.  Only digital goods and
physical purchases could benefit from such speed increases.

On Fri, 2011-08-05 at 00:10 +0200, Stefan Thomas wrote:
Since nobody else has mentioned it: There is another (more pragmatic?) 
> way to detect double spends:
> 
> 1. Connect to lots of clients
> 2a. If they all send you the same transaction -> double spend unlikely
> 2b. If some don't send you the transaction (or send a conflicting one) 
> -> double spend in progress

This is exactly what I've been suggesting this whole time.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/46bac9d9/attachment.sig>

From gmaxwell at gmail.com  Thu Aug  4 22:18:40 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 4 Aug 2011 18:18:40 -0400
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <4E3B18F3.4010605@justmoon.de>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<82CEB610-9821-4928-8A13-30088A59223C@andrewschaaf.com>
	<1312490305.3109.46.camel@Desktop666>
	<4E3B18F3.4010605@justmoon.de>
Message-ID: <CAAS2fgSmHJOd38FicROapfcYoxooCvg_Hh1Cc1r1WjOkGW+yjA@mail.gmail.com>

On Thu, Aug 4, 2011 at 6:10 PM, Stefan Thomas <moon at justmoon.de> wrote:
> Would network support like a MSG_DOUBLESPEND be better? I used to think
> yes, but looking at the reality of Transaction Radar, I'm not so sure.
> Nothing stops such a service from scaling up and connecting to thousands
> of random nodes (especially when the network itself grows bigger),

Except for the fact that such a party is a DOS attack on the network
which is already short on functioning listeners.  I don't have much
doubt that people doing the "connect to everyone" are already causing
harm. There are some nodes in .ru/.ua which aggressively connect to me
(instant reconnects if I hang up on them) which have never passed me a
transaction in all my available logs.

Alerts scale better? both can have a place in the ecosystem, they're
actually complementary: Alerts are vulnerable to filtering by sibyl
attackers but they have deeper network penetration and where filtering
doesn't prevent them you don't need a connection to hear them.



From bitcoin-list at bluematt.me  Thu Aug  4 22:21:53 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 05 Aug 2011 00:21:53 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <CAAS2fgSmHJOd38FicROapfcYoxooCvg_Hh1Cc1r1WjOkGW+yjA@mail.gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<82CEB610-9821-4928-8A13-30088A59223C@andrewschaaf.com>
	<1312490305.3109.46.camel@Desktop666> <4E3B18F3.4010605@justmoon.de>
	<CAAS2fgSmHJOd38FicROapfcYoxooCvg_Hh1Cc1r1WjOkGW+yjA@mail.gmail.com>
Message-ID: <1312496513.3109.57.camel@Desktop666>

On Thu, 2011-08-04 at 18:18 -0400, Gregory Maxwell wrote:
> I don't have much
> doubt that people doing the "connect to everyone" are already causing
> harm. There are some nodes in .ru/.ua which aggressively connect to me
> (instant reconnects if I hang up on them) which have never passed me a
> transaction in all my available logs.

I've been thinking about going through my logs to see how many nodes I
am connected to that are clearly bad (like those), but I suppose you
beat me to it.  Should such connections not be dropped over time as they
are clearly not functioning nodes?
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/785ca673/attachment.sig>

From jgarzik at exmulti.com  Thu Aug  4 23:43:56 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Thu, 4 Aug 2011 19:43:56 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <201108041629.04130.luke@dashjr.org>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201107101442.43605.luke@dashjr.org>
	<201108041629.04130.luke@dashjr.org>
Message-ID: <CA+8xBpdYJVE_DkKrmZCUd1gAdoMzcLuS-7fBdZx+fPeYqTz83Q@mail.gmail.com>

>> ? threaded_rpc
>> ? \-- rpc_keepalive (depends on threaded_rpc, or a single connection would
>> ? ? ? ? ? ? ? ? ? ? ?keep the JSON-RPC interface locked up)

Definitely want _some_ path to HTTP/1.1 persistent connections, either
this or async I/O, https://github.com/bitcoin/bitcoin/pull/214

Based on field usage, it sounds like the above, threaded rpc, is more
stable.  So my only question remaining, for which I've not yet
reviewed the code, is:  what is the behaviour under assault from lots
of new incoming TCP connections?  One very common problem with
threaded TCP servers is blindly creating new threads without any
filtering or checking of incoming connections, thereby quickly
reaching thread limits, possibly causing other parts of the program to
fail.

Any amount of RPC request volume, miner or not, sent to the present
implementation winds up using a lot of socket resources due to the
constant disconnect/reconnect demanded of the current HTTP/1.0 code.
This patch addresses that key issue, providing positive impact for all
production bitcoin sites using RPC.

Miners are hitting these problems now, and Gavin's right that mainnet
miners are a small portion of the total population, but our RPC server
implementation really is bloody awful at present.  Reliable,
production TCP servers use either threads or async I/O, or a
combination of both (thread pool + async I/O == win).  Deploying
HTTP/1.1 persistent connections will make a positive impact at any
site heavily using RPC.


>> ? bugfix_CreateThread_leak

Did I leave something out, when merging

     commit 67ed7d9d4929d8fe1c5f976c184c72dff02d83b7
     Author: JoelKatz <DavidJoelSchwartz at GMail.com>
     Date:   Mon Jul 25 15:06:45 2011 -0700

?


>> ? getwork_dedupe (original branch for my bugfix)

I think we need this, but have not yet reviewed/thought about it.

>> ? gitignore (ignore some common misc files)

Sounds nice to have.

     Jeff


P.S.  I'm moving my home computer lab setup to a new house.  Internet
will be spotty until August 11, and you won't see much of me at all on
#bitcoin-dev.



From gavinandresen at gmail.com  Fri Aug  5 00:07:46 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 5 Aug 2011 10:07:46 +1000
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <1312496513.3109.57.camel@Desktop666>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<82CEB610-9821-4928-8A13-30088A59223C@andrewschaaf.com>
	<1312490305.3109.46.camel@Desktop666>
	<4E3B18F3.4010605@justmoon.de>
	<CAAS2fgSmHJOd38FicROapfcYoxooCvg_Hh1Cc1r1WjOkGW+yjA@mail.gmail.com>
	<1312496513.3109.57.camel@Desktop666>
Message-ID: <CABsx9T3hkdOo9fwpKzAAX6MiVWV7Fr3HGi8Bkhfm9ZV77xvpEg@mail.gmail.com>

Couple of semi-random thoughts:

RE: detecting double spends:  I agree that extending the protocol to make
double-spend detection better is probably a bad idea.

That said, I could see extending the information reported by the
listtransactions/gettransaction API calls to report detected double spends (
== transaction uses the same inputs as another transaction in the block
chain or memory pool). IIRC, now the code just drops double spends, so if
this was done the implementation would have to be careful about being
vulnerable to a "fill memory with bogus transactions" attack.

RE: badly-behaved nodes:  I'd really like somebody to start experimenting
with algorithms for detecting well-behaved and ill-behaved nodes-- maybe
starting with a dns-seed implementation.  I suspect people are starting to
experiment with various types of Sybil attacks, which might explain why
network connectivity has been so bad.

(sent from the Sydney airport, before a very LOOONG flight back to
Massachusetts)
-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/f9930054/attachment.html>

From moon at justmoon.de  Fri Aug  5 00:14:31 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Fri, 05 Aug 2011 02:14:31 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <1312496173.3109.55.camel@Desktop666>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<CANEZrP3kEquEvqkqGqSh0iPRqoHhKLHoNgqc+9EORLoxpL7a=g@mail.gmail.com>
	<1312496173.3109.55.camel@Desktop666>
Message-ID: <4E3B35E7.1010409@justmoon.de>

On 8/5/2011 12:18 AM, Gregory Maxwell wrote:
> Except for the fact that such a party is a DOS attack on the network
> which is already short on functioning listeners.

To the transaction radar it doesn't much matter whether its connections 
are outgoing or incoming (assuming it can keep its nodes' IPs secret and 
it has reasonable uptime). So you could say that this is an argument 
*for* this kind of double spend protection if it means the creation of 
nodes/clusters accepting 10000+ incoming connections while making few 
outgoing connections. My point is, the amount of connections a node has 
has nothing to do with its effect on the in/out balance.

Some words on the shortage of listeners itself:

Could this be because the network right now consists largely of end 
users with residential type networks? With BitTorrent a lot of users go 
through the trouble of opening up ports in their router manually in 
order to get more peers and better download speeds - this is not (yet?) 
a widespread practice with Bitcoin. (I know Bitcoin has UPnP support, 
but I haven't found any numbers on how widely the IGD protocol is 
actually deployed. Wikipedia says that "some NAT routers" support it and 
that it's not an IETF standard. All routers I've actually seen in real 
life had it disabled by default.)

In the long term all the trends favor more clients allowing incoming 
connections: End users will tend to move towards lighter clients and the 
ones that stick with full nodes will tend to configure them better - 
meaning opening ports etc. - as documentation improves.

As for downright malicious nodes: It should be possible to come up with 
some sensible policies to temp ban nodes that don't relay any useful 
messages or try to flood you. This is an ongoing optimization problem in 
any peer-to-peer network and I expect us to make progress with this over 
time.


On 8/5/2011 12:16 AM, Matt Corallo wrote:
> This is exactly what I've been suggesting this whole time.

I had only seen you mention a "miner backbone" which is sort of a more 
long-term vision, whereas Transaction Radar exists today. I didn't read 
everything though, so if you mentioned this idea specifically, please 
just consider my post as further support for your position.





From gavinandresen at gmail.com  Fri Aug  5 01:16:36 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 5 Aug 2011 11:16:36 +1000
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <201108041038.47396.luke@dashjr.org>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
Message-ID: <CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>

Dan gave a brief explanation of "blitcoin" on the forums:
  https://bitcointalk.org/index.php?topic=34458.0

"As reported, I've got a BitCoin deanonymization mechanism.  It's not
complicated.

Connect to every node in the cloud, discoverable via sweeping/IRC/get_peers
messages.  The first IP to consistently relay transactions for a given
identity, is the given identity.

Of course the entire BitCoin cloud doesn't allow inbound connections
(although you can do rather evil stuff with UPNP to force that open too).
But this isn't a problem -- there's only about 3000 to 8000 IPs that are
BitCoin nodes that accept inbound connections.  Since everyone else depends
on them, you just need to create your own mass cluster of IPs that are a
decent chunk of the P2P network.  Nodes on average have seven outbound
connections, so it should take only a few hundred unique to be one of the
first-hop peers even for the outbound-only set."

... so it is a de-anonymize-via IP address not de-anonymize-via Bitcoin
address.  And might go partway to explaining why we're having trouble with
network connectivity...

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/7c7e43ab/attachment.html>

From luke at dashjr.org  Fri Aug  5 03:01:47 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 4 Aug 2011 23:01:47 -0400
Subject: [Bitcoin-development] Useful bitcoin patches...
In-Reply-To: <CA+8xBpdYJVE_DkKrmZCUd1gAdoMzcLuS-7fBdZx+fPeYqTz83Q@mail.gmail.com>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201108041629.04130.luke@dashjr.org>
	<CA+8xBpdYJVE_DkKrmZCUd1gAdoMzcLuS-7fBdZx+fPeYqTz83Q@mail.gmail.com>
Message-ID: <201108042301.49990.luke@dashjr.org>

On Thursday, August 04, 2011 7:43:56 PM Jeff Garzik wrote:
> >>   bugfix_CreateThread_leak
> 
> Did I leave something out, when merging
> 
>      commit 67ed7d9d4929d8fe1c5f976c184c72dff02d83b7
>      Author: JoelKatz <DavidJoelSchwartz at GMail.com>
>      Date:   Mon Jul 25 15:06:45 2011 -0700
> 
> ?

Yes. I'm not sure it has any practical impact on the software, but there was 
what looks like a platform-specific compile fix (casting between potentially 
incompatible types) too.



From witchspace81 at gmail.com  Fri Aug  5 05:37:42 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 5 Aug 2011 05:37:42 +0000
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
Message-ID: <CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>

On Fri, Aug 5, 2011 at 1:16 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

>
> ... so it is a de-anonymize-via IP address not de-anonymize-via Bitcoin
> address.  And might go partway to explaining why we're having trouble with
> network connectivity...
>

Well it's good that the bitcoin network is seeing some security testing.

So I understand that we have a combination of problems at the moment:

1) A DDoS possibility  (if this is really the cause of the network
connectivity problems)

2) An attacker can figure out which node first broadcasted a transaction, by
connecting to the entire network or having everyone connect to his node(s)

3) The recipient re-broadcasts transactions (is Theymos right here?),
allowing both the sender and recipient to be found

Drawok's suggestion about using UDP packets with spoofed sender addresses is
interesting, as UDP has another advantage; you can open up an "inbound" UDP
port on almost any NAT router without any UPNP magic: just send out an UDP
packet, the router will wait a certain time for answers (on a mapped port
number) and relay these back.

It also has some potential issues; the client needs special privileges to
spoof sender addresses, and some ISPs might filter out packets with
non-matching sender addriess (unsure how common this is).

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/1c336328/attachment.html>

From jgarzik at exmulti.com  Fri Aug  5 05:52:05 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Fri, 5 Aug 2011 01:52:05 -0400
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
	<CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>
Message-ID: <CA+8xBpd0ud0Jn7Xxfw3C-WCH12WuB7k_W5x00Mj2EidemGoYpQ@mail.gmail.com>

On Fri, Aug 5, 2011 at 1:37 AM, John Smith <witchspace81 at gmail.com> wrote:
> Well it's good that the bitcoin network is seeing some security testing.

Yep.

> 1) A DDoS possibility? (if this is really the cause of the network
> connectivity problems)

Unfortunately the nodes accepting incoming connections are small
enough in number (7000?) that you can shut down a lot by attacking
those nodes.

This was part of the motivation of turning on upnp by default in the
GUI version, but maybe we need to go further than that...

> 3) The recipient re-broadcasts transactions (is Theymos right here?),
> allowing both the sender and recipient to be found

Yes, that is correct.  Bitcoin resends wallet transactions with zero
confirmations, and both sent and received transactions fall within the
"wallet tx" superset.

TBH I had forgotten about the resend on the receiver side, though.
It, of course, makes plenty of sense in the context of importing
transactions from foreign sources, e.g. receiving transactions via a
USB flash drive.

> Drawok's suggestion about using UDP packets with spoofed sender addresses is
> interesting, as UDP has another advantage; you can open up an "inbound" UDP
> port on almost any NAT router without any UPNP magic: just send out an UDP
> packet, the router will wait a certain time for answers (on a mapped port
> number) and relay these back.
>
> It also has some potential issues; the client needs special privileges to
> spoof sender addresses, and some ISPs might filter out packets with
> non-matching sender addriess (unsure how common this is).

Well, it -is- possible to implement TCP over UDP <grin>  The TCP
connection sequence over UDP helps to work against spoofing, while UDP
helps to open an inbound UDP port as you describe.

Not that I'm endorsing a bitcoin-internal TCP stack... just sayin'  :)

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From witchspace81 at gmail.com  Fri Aug  5 05:55:56 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 5 Aug 2011 05:55:56 +0000
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
	<CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>
Message-ID: <CAJNQ0svkPWRcJ840yiBHaCXh3apGjO69mA4rLJrB-9DxC_nPsQ@mail.gmail.com>

> 3) The recipient re-broadcasts transactions (is Theymos right here?),
> allowing both the sender and recipient to be found
>

Hm this would potentially allow getting the IP for any recipient Bitcoin
address, given that a client with the private key connects to the network
once in a while.

Send them a transaction that is guaranteed to not be written into a block by
a miner, then monitor who rebroadcasts it over a few days/weeks.

I guess this could also be used to find out who has the stolen coins.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/26b73de3/attachment.html>

From mike at plan99.net  Fri Aug  5 11:05:34 2011
From: mike at plan99.net (Mike Hearn)
Date: Fri, 5 Aug 2011 13:05:34 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <4E3B35E7.1010409@justmoon.de>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<CANEZrP3kEquEvqkqGqSh0iPRqoHhKLHoNgqc+9EORLoxpL7a=g@mail.gmail.com>
	<1312496173.3109.55.camel@Desktop666>
	<4E3B35E7.1010409@justmoon.de>
Message-ID: <CANEZrP1QVdOdttOk4_kzoHkVf_KYRzVFyBEpOFvi+L_DLd=74A@mail.gmail.com>

> Could this be because the network right now consists largely of end
> users with residential type networks?

Probably.

How many connections "should" a node use? We faced this decision in
BitCoinJ recently and I asked the patch writer to reduce the number.
It seems pretty arbitrary to me - if you aren't going to relay, a
single connection should be good enough. Yes, it makes sybil easier,
but if you pick the one node randomly enough it might be ok?

> actually deployed. Wikipedia says that "some NAT routers" support it and
> that it's not an IETF standard. All routers I've actually seen in real
> life had it disabled by default.)

Hmm, I don't recall ever enabling it in my router but it's on and the
Bitcoin support works. UPnP is used by all kinds of common programs
like Skype and Xbox Live.



From andyparkins at gmail.com  Fri Aug  5 11:58:25 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 5 Aug 2011 12:58:25 +0100
Subject: [Bitcoin-development] Double spend detection to speed up
	transaction trust
In-Reply-To: <CANEZrP1QVdOdttOk4_kzoHkVf_KYRzVFyBEpOFvi+L_DLd=74A@mail.gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<4E3B35E7.1010409@justmoon.de>
	<CANEZrP1QVdOdttOk4_kzoHkVf_KYRzVFyBEpOFvi+L_DLd=74A@mail.gmail.com>
Message-ID: <201108051258.25813.andyparkins@gmail.com>

On 2011 August 05 Friday, Mike Hearn wrote:

> How many connections "should" a node use? We faced this decision in
> BitCoinJ recently and I asked the patch writer to reduce the number.
> It seems pretty arbitrary to me - if you aren't going to relay, a
> single connection should be good enough. Yes, it makes sybil easier,
> but if you pick the one node randomly enough it might be ok?

I don't really see that "number of connections" is the relevant metric.  For a 
well designed bit of software the number of connections shouldn't matter.  
There's a bit of overhead in the operating system per connection, but I'd be 
surprised if that ever became a limiting factor in a stateless system like 
bitcoin.  In fact, bitcoin would work perfectly well as a UDP system (I'm not 
advocating that of course), and then there would be no such thing as a 
connection.

Bandwidth is the measure that's relevant.

Therefore if bandwidth is the measure, just pick a bandwidth you like and 
add/accept connections until you hit that bandwidth limit (probably averaged).  
This has the advantage that it can be measured automatically, or sensibly set 
by a user.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/4090edad/attachment.sig>

From bitcoin-list at bluematt.me  Fri Aug  5 12:00:02 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 05 Aug 2011 14:00:02 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <4E3B35E7.1010409@justmoon.de>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108041922.16956.andyparkins@gmail.com>
	<1312483196.3109.38.camel@Desktop666>
	<201108042042.55214.andyparkins@gmail.com>
	<CANEZrP3kEquEvqkqGqSh0iPRqoHhKLHoNgqc+9EORLoxpL7a=g@mail.gmail.com>
	<1312496173.3109.55.camel@Desktop666>  <4E3B35E7.1010409@justmoon.de>
Message-ID: <1312545602.4516.3.camel@BMThinkPad.lan.bluematt.me>

On Fri, 2011-08-05 at 02:14 +0200, Stefan Thomas wrote:
> (I know Bitcoin has UPnP support, 
> but I haven't found any numbers on how widely the IGD protocol is 
> actually deployed. Wikipedia says that "some NAT routers" support it and 
> that it's not an IETF standard. All routers I've actually seen in real 
> life had it disabled by default.)
It used to be enabled by default on virtually all routers a couple years
ago, but too many "security researchers" complained that it was a "huge
security vulnerability" (I guess they hadn't heard of stun or outgoing
connections) so its not typically disabled on most routers.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/5ce8214a/attachment.sig>

From joel.kaartinen at gmail.com  Fri Aug  5 12:01:37 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Fri, 05 Aug 2011 15:01:37 +0300
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CA+8xBpd0ud0Jn7Xxfw3C-WCH12WuB7k_W5x00Mj2EidemGoYpQ@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
	<CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>
	<CA+8xBpd0ud0Jn7Xxfw3C-WCH12WuB7k_W5x00Mj2EidemGoYpQ@mail.gmail.com>
Message-ID: <1312545697.19584.56.camel@mei>

On Fri, 2011-08-05 at 01:52 -0400, Jeff Garzik wrote:
> Yes, that is correct.  Bitcoin resends wallet transactions with zero
> confirmations, and both sent and received transactions fall within the
> "wallet tx" superset.
> 
> TBH I had forgotten about the resend on the receiver side, though.
> It, of course, makes plenty of sense in the context of importing
> transactions from foreign sources, e.g. receiving transactions via a
> USB flash drive.

Could every node do the resends? Alternatively, could we implement a TOR
like tunneling system just for the first leg of the transactions
(overkill?). Then again, maybe just a TOR gateway if that's desired.

> > Drawok's suggestion about using UDP packets with spoofed sender addresses is
> > interesting, as UDP has another advantage; you can open up an "inbound" UDP
> > port on almost any NAT router without any UPNP magic: just send out an UDP
> > packet, the router will wait a certain time for answers (on a mapped port
> > number) and relay these back.

This is a nice idea but sounds rather unreliable.

> Well, it -is- possible to implement TCP over UDP <grin>  The TCP
> connection sequence over UDP helps to work against spoofing, while UDP
> helps to open an inbound UDP port as you describe.

There's already an implementation of this, called UTP. If we do decide
that using UDP is worthwhile, this library is probably better than
implementing something ourselves.

- Joel





From bitcoin-list at bluematt.me  Fri Aug  5 12:06:09 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 05 Aug 2011 14:06:09 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108051258.25813.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<4E3B35E7.1010409@justmoon.de>
	<CANEZrP1QVdOdttOk4_kzoHkVf_KYRzVFyBEpOFvi+L_DLd=74A@mail.gmail.com>
	<201108051258.25813.andyparkins@gmail.com>
Message-ID: <1312545969.4516.8.camel@BMThinkPad.lan.bluematt.me>

On Fri, 2011-08-05 at 12:58 +0100, Andy Parkins wrote:
> On 2011 August 05 Friday, Mike Hearn wrote:
> 
> I don't really see that "number of connections" is the relevant metric.
Number of connections is something that needs serious thought.  Too many
and you fill everyone's connection slots and no one can make
connections.  Too few and you don't have a network but just a bunch of
islands which would also cause serious problems.
If you aren't relaying, each connection takes almost no bandwidth, so
the question is how many do you need to be considered secure.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/ede79af3/attachment.sig>

From decker.christian at gmail.com  Fri Aug  5 12:58:53 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Fri, 5 Aug 2011 14:58:53 +0200
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <1312545697.19584.56.camel@mei>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
	<CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>
	<CA+8xBpd0ud0Jn7Xxfw3C-WCH12WuB7k_W5x00Mj2EidemGoYpQ@mail.gmail.com>
	<1312545697.19584.56.camel@mei>
Message-ID: <CALxbBHXbgDqZc1W+NJDbD78MP45U_oLkFVed5f3xWmJJGm=gCA@mail.gmail.com>

While I do think that anonymity (or pseudonymity) is a nice feature, I don't
think it deserves the full focus of the developers. The core of the protocol
is about making transactions in a secure and fast way, not allowing
everybody to be anonymous, whether they want to or not. TOR already is a
good options for those that want to stay anonymous, and there is no need to
pull support into the main client, if only a few will use it. I think very
few of the developers actually claimed that Bitcoin is anonymous, and has
never been a big advertising point from the "official" side of Bitcoin,
network analysis has been always known to break anonymity.

I see no need for action from the developer side.

-cdecker

On Fri, Aug 5, 2011 at 2:01 PM, Joel Joonatan Kaartinen <
joel.kaartinen at gmail.com> wrote:

> On Fri, 2011-08-05 at 01:52 -0400, Jeff Garzik wrote:
> > Yes, that is correct.  Bitcoin resends wallet transactions with zero
> > confirmations, and both sent and received transactions fall within the
> > "wallet tx" superset.
> >
> > TBH I had forgotten about the resend on the receiver side, though.
> > It, of course, makes plenty of sense in the context of importing
> > transactions from foreign sources, e.g. receiving transactions via a
> > USB flash drive.
>
> Could every node do the resends? Alternatively, could we implement a TOR
> like tunneling system just for the first leg of the transactions
> (overkill?). Then again, maybe just a TOR gateway if that's desired.
>
> > > Drawok's suggestion about using UDP packets with spoofed sender
> addresses is
> > > interesting, as UDP has another advantage; you can open up an "inbound"
> UDP
> > > port on almost any NAT router without any UPNP magic: just send out an
> UDP
> > > packet, the router will wait a certain time for answers (on a mapped
> port
> > > number) and relay these back.
>
> This is a nice idea but sounds rather unreliable.
>
> > Well, it -is- possible to implement TCP over UDP <grin>  The TCP
> > connection sequence over UDP helps to work against spoofing, while UDP
> > helps to open an inbound UDP port as you describe.
>
> There's already an implementation of this, called UTP. If we do decide
> that using UDP is worthwhile, this library is probably better than
> implementing something ourselves.
>
> - Joel
>
>
>
>
> ------------------------------------------------------------------------------
> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
> The must-attend event for mobile developers. Connect with experts.
> Get tools for creating Super Apps. See the latest technologies.
> Sessions, hands-on labs, demos & much more. Register early & save!
> http://p.sf.net/sfu/rim-blackberry-1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/97edd967/attachment.html>

From andyparkins at gmail.com  Fri Aug  5 13:03:05 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 5 Aug 2011 14:03:05 +0100
Subject: [Bitcoin-development] Double spend detection to speed up
	transaction trust
In-Reply-To: <1312545969.4516.8.camel@BMThinkPad.lan.bluematt.me>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108051258.25813.andyparkins@gmail.com>
	<1312545969.4516.8.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <201108051403.05506.andyparkins@gmail.com>

On 2011 August 05 Friday, Matt Corallo wrote:
> On Fri, 2011-08-05 at 12:58 +0100, Andy Parkins wrote:
> > I don't really see that "number of connections" is the relevant metric.
> 
> Number of connections is something that needs serious thought.  Too many
> and you fill everyone's connection slots and no one can make
> connections.  Too few and you don't have a network but just a bunch of
> islands which would also cause serious problems.
> If you aren't relaying, each connection takes almost no bandwidth, so
> the question is how many do you need to be considered secure.

I'm arguing that "number of connection slots" isn't the best metric; so that 
wouldn't matter.  Just keep accepting incoming connections (with some sanity 
limit of course) until you've allocated your bandwidth, not your number of 
connections.

If I connect to a thousand nodes and never send anything, I'm not using up 
very much of their resources.  If _they_ want to use up resources by relaying, 
then that is their choice, but again they can do that based on bandwidth 
calculations rather than connection counts.  If I am sending, then that adds 
to their bandwidth and gets included in whatever limit they've chosen.

For example: the client could simply maintain an average bandwidth over all 
connections.  If that average is less than threshold0, then make new outgoing 
connections.  If that average exceeds threshold1, then stop accepting incoming 
connections.  If it exceeds threshold2, start dropping established incoming 
connections.  If it exceeds theshold3, start dropping established outgoing 
connections.

The actual rules don't matter so much; I'm just saying bandwidth is a better 
metric than connection count.  If you limit by connection count, then you'll 
just end up filled with non-relaying listeners, since they (in the future) 
will be the most commonplace.  You'll have no incoming relays, and therefore 
nothing to forward, so your bandwidth will be zero, but your connection count 
at maximum -- you've locked yourself out.



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/c74ccaae/attachment.sig>

From andyparkins at gmail.com  Fri Aug  5 13:07:05 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Fri, 5 Aug 2011 14:07:05 +0100
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
Message-ID: <201108051407.06216.andyparkins@gmail.com>

On 2011 August 05 Friday, Gavin Andresen wrote:

> "As reported, I've got a BitCoin deanonymization mechanism.  It's not
> complicated.
> 
> Connect to every node in the cloud, discoverable via sweeping/IRC/get_peers
> messages.  The first IP to consistently relay transactions for a given
> identity, is the given identity.

Transaction forwarding could be randomised slightly, by randomising the 
outgoing relay order; and adding a random delay between each forward.  Even 
the massively connected monitor can't represent _all_ the connections on every 
real node, so it would have no way of knowing whether it got any transaction 
from the originator or because it got a fast path through the first N nodes to 
receive it.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/dd11a165/attachment.sig>

From witchspace81 at gmail.com  Fri Aug  5 13:11:48 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 5 Aug 2011 13:11:48 +0000
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <CALxbBHXbgDqZc1W+NJDbD78MP45U_oLkFVed5f3xWmJJGm=gCA@mail.gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
	<CAJNQ0stRrv4Yqf9ENszoXJE8+FpzwXZaGVDP=stZi27x4BRmmg@mail.gmail.com>
	<CA+8xBpd0ud0Jn7Xxfw3C-WCH12WuB7k_W5x00Mj2EidemGoYpQ@mail.gmail.com>
	<1312545697.19584.56.camel@mei>
	<CALxbBHXbgDqZc1W+NJDbD78MP45U_oLkFVed5f3xWmJJGm=gCA@mail.gmail.com>
Message-ID: <CAJNQ0ss3-AuTysZhi6KWcoXt=Om9QbvWEHFkvBXwdifXOBanCA@mail.gmail.com>

On Fri, Aug 5, 2011 at 12:58 PM, Christian Decker <
decker.christian at gmail.com> wrote:

> While I do think that anonymity (or pseudonymity) is a nice feature, I
> don't think it deserves the full focus of the developers. The core of the
> protocol is about making transactions in a secure and fast way, not allowing
> everybody to be anonymous, whether they want to or not. TOR already is a
> good options for those that want to stay anonymous, and there is no need to
> pull support into the main client, if only a few will use it. I think very
> few of the developers actually claimed that Bitcoin is anonymous, and has
> never been a big advertising point from the "official" side of Bitcoin,
> network analysis has been always known to break anonymity.
>

Yes. Optionally layering Bitcoin over Tor/I2P is a much better option than
trying to replicate an onion network in Bitcoin itself. For one,  traffic
analysis is much more difficult if your onion routing network contains
multiple kinds of traffic. Also it would complicate the core algorithm and
waste developer time. Doing anonymity *right* is very hard. So let's leave
it to the Tor/I2P people that know what they're doing.


>
> I see no need for action from the developer side.
>

Except the part about making the client/network more resistant against DDoS.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/3d4fc4a5/attachment.html>

From witchspace81 at gmail.com  Fri Aug  5 13:19:23 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 5 Aug 2011 13:19:23 +0000
Subject: [Bitcoin-development] Blitcoin? (Black Hat 2011)
In-Reply-To: <201108051407.06216.andyparkins@gmail.com>
References: <CAJNQ0svWgFwZrra0gQFpxNLOPXk4RbKygeMUNPEA=k-Wqwa-ZA@mail.gmail.com>
	<201108041038.47396.luke@dashjr.org>
	<CABsx9T2tAeOp6RAb+Zb5zmzdSePZV90Uu=r4mzFc44d6ndbcnQ@mail.gmail.com>
	<201108051407.06216.andyparkins@gmail.com>
Message-ID: <CAJNQ0stJeFx0X+vHZfx-3SHt3=0JAho_kqDU44mZM613YuUaSA@mail.gmail.com>

On Fri, Aug 5, 2011 at 1:07 PM, Andy Parkins <andyparkins at gmail.com> wrote:

> On 2011 August 05 Friday, Gavin Andresen wrote:
>
> Transaction forwarding could be randomised slightly, by randomising the
> outgoing relay order; and adding a random delay between each forward.  Even
> the massively connected monitor can't represent _all_ the connections on
> every
> real node, so it would have no way of knowing whether it got any
> transaction
> from the originator or because it got a fast path through the first N nodes
> to
> receive it.
>

Right, while it doesn't warrant completely changing the transport protocol
to UDP or implementing onion routing,  I'm all for simple timing and order
randomization changes if they can make attacks like this less effective.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/8dd72a58/attachment.html>

From gmaxwell at gmail.com  Fri Aug  5 21:23:09 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 5 Aug 2011 17:23:09 -0400
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108051403.05506.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108051258.25813.andyparkins@gmail.com>
	<1312545969.4516.8.camel@BMThinkPad.lan.bluematt.me>
	<201108051403.05506.andyparkins@gmail.com>
Message-ID: <CAAS2fgT-O8sHaS_2zYfiv93Tvj1dtjVSmV35bXdU0hNDZoObmA@mail.gmail.com>

On Fri, Aug 5, 2011 at 9:03 AM, Andy Parkins <andyparkins at gmail.com> wrote:
> The actual rules don't matter so much; I'm just saying bandwidth is a better
> metric than connection count.

I'm sure many people would be interested in patches that solve the
~O(N) peak memory usage with additional connections.



From bitcoin-list at bluematt.me  Fri Aug  5 21:30:50 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 05 Aug 2011 23:30:50 +0200
Subject: [Bitcoin-development] Double spend detection to speed up
 transaction trust
In-Reply-To: <201108051403.05506.andyparkins@gmail.com>
References: <201108041423.14176.andyparkins@gmail.com>
	<201108051258.25813.andyparkins@gmail.com>
	<1312545969.4516.8.camel@BMThinkPad.lan.bluematt.me>
	<201108051403.05506.andyparkins@gmail.com>
Message-ID: <1312550081.12447.3.camel@BMThinkPad.lan.bluematt.me>

On Fri, 2011-08-05 at 14:03 +0100, Andy Parkins wrote:
> I'm arguing that "number of connection slots" isn't the best metric; so that 
> wouldn't matter.  Just keep accepting incoming connections (with some sanity 
> limit of course) until you've allocated your bandwidth, not your number of 
> connections.
Mike and me were talking about outgoing connection count, not incoming,
which is another thing entirely.
However, to your point: having 1000 Bitcoin connection is still almost
no traffic, the only timt you really hit much traffic is when you get a
peer with a client who doesn't have the full chain as they will start
downloading the chain maxing your bandwidth.  My bandwidth of Bitcoin is
something like avg 3GB/month for 125 connections which is nothing.
However it has very brief spikes of my entire outgoing bandwidth.
Thus, neither bandwidth nor connection count are really good metrics for
choosing your number of incoming slots.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110805/d487f4cb/attachment.sig>

From bgroff at lavabit.com  Mon Aug  8 00:21:48 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Sun, 7 Aug 2011 20:21:48 -0400 (EDT)
Subject: [Bitcoin-development] Discussion related to pull 349 and pull
 319 (escrow transactions)
In-Reply-To: <CAAS2fgQ6GXfebUV8_PLVpLJ9jvPF8FXiBqwquhGFNZ+Vt3uCtg@mail.gmail.com>
References: <CAAS2fgQ-L-1K2Oi40tqnhxpnnWQHqgbd4BmqedhA3WcevYiCzg@mail.gmail.com>
	<43351.137.56.163.46.1312351847.squirrel@lavabit.com>
	<CAAS2fgQ6GXfebUV8_PLVpLJ9jvPF8FXiBqwquhGFNZ+Vt3uCtg@mail.gmail.com>
Message-ID: <42430.77.247.181.163.1312762908.squirrel@lavabit.com>

> On Wed, Aug 3, 2011 at 2:10 AM,  <bgroff at lavabit.com> wrote:
>> Thank you! ??(I think you mean 319 here)
>
> Correct.
>
>> With Eligius mining !IsStandard transactions and probably other pools
>> open
>> to the idea, I am hopeful that we can quickly get 30%+ of mining power
>> to
>> upgrade, which means that we could still mine these in a reasonable time
>> frame (under 1 hour).
>
> It's not just a matter of mining power, it's also a question of
> propagation.  Matt and I tried to perform a non-standard transaction
> weeks ago and weren't able to get in mined after many hours. (we
> eventually double spent the input with a normal transaction in order
> to make it go away, interestingly one point about non-propagating txn
> is that they're extra vulnerable to double spending by a standard txn,
> as the non-standard one won't preclude the propagation of the standard
> one)

Right, the user would have to connect directly to miners accepting
non-standard transactions.

> From discussion on IRC it seemed clear enough that the current focus
> on maturity/bugfixes is probably going to delay your full patch, but
> the IsStandard part is uncontroversial and could go in quickly.

With the latest high profile security breaches, I am hoping that the whole
things can be pulled relatively soon.  Building secure deposit systems
will improve trust in the ecosystem.

I've included a significant amount of unit tests to "pay" for the
additional feature, and I can add more if needed.

--
Bobby Groff






From me at endeavour.zapto.org  Mon Aug  8 03:07:52 2011
From: me at endeavour.zapto.org (Venkatesh Srinivas)
Date: Sun, 7 Aug 2011 23:07:52 -0400
Subject: [Bitcoin-development] DragonFly BSD bitcoind patches
Message-ID: <4e3f530c.6374340a.2490.7a81@mx.google.com>

Hi,

Related to https://bitcointalk.org/index.php?topic=28022.0 ;

Here are three patches that allow bitcoind to build and run on DragonFly BSD.

0001) bitcoind assumes a definition of BSD implies SO_NOSIGPIPE is available.
This is not true on NetBSD, OpenBSD, and DragonFly.

0002) main.cpp has: "char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };"
Per discussion on the thread linked, leaving the signedness of pchMessageStart
is unsafe for values > 0x80. This patch specifies 'unsigned char' in main.cpp
and net.h.

0003) db.cpp has a number of uses of make_tuple and has 'using namespace std'
and 'using namespace boost'. Without qualifying make_tuple, std::make_tuple is
preferred, which is incorrect. This patch qualifies make_tuple.

Patches are from git format-patch and can be applied with git-am.

Thanks,
-- vs
-------------- next part --------------
From 310cd8d1bdd130d04c98e5e724b2af904fe94e2e Mon Sep 17 00:00:00 2001
From: Venkatesh Srinivas <me at endeavour.zapto.org>
Date: Sun, 7 Aug 2011 12:18:05 -0400
Subject: [PATCH 1/3] Test for SO_NOSIGPIPE rather than assuming all BSDs
 support it.

---
 src/net.cpp |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/net.cpp b/src/net.cpp
index d697788..9feeb43 100644
--- a/src/net.cpp
+++ b/src/net.cpp
@@ -98,7 +98,7 @@ bool ConnectSocket(const CAddress& addrConnect, SOCKET& hSocketRet, int nTimeout
     SOCKET hSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
     if (hSocket == INVALID_SOCKET)
         return false;
-#ifdef BSD
+#ifdef SO_NOSIGPIPE
     int set = 1;
     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));
 #endif
@@ -1579,7 +1579,7 @@ bool BindListenPort(string& strError)
         return false;
     }
 
-#ifdef BSD
+#ifdef SO_NOSIGPIPE
     // Different way of disabling SIGPIPE on BSD
     setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));
 #endif
-- 
1.7.5.4

-------------- next part --------------
From 7ed0ddde65b3f5c467e471fc6f9fff648b976e56 Mon Sep 17 00:00:00 2001
From: Venkatesh Srinivas <me at endeavour.zapto.org>
Date: Sun, 7 Aug 2011 12:19:14 -0400
Subject: [PATCH 2/3] Use 'unsigned char' rather than 'char' for
 pchMessageStart.

---
 src/main.cpp |    2 +-
 src/net.h    |    2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/main.cpp b/src/main.cpp
index b57974f..4bcb87f 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -1766,7 +1766,7 @@ bool static AlreadyHave(CTxDB& txdb, const CInv& inv)
 // The message start string is designed to be unlikely to occur in normal data.
 // The characters are rarely used upper ascii, not valid as UTF-8, and produce
 // a large 4-byte int at any alignment.
-char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };
+unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };
 
 
 bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)
diff --git a/src/net.h b/src/net.h
index 78055bf..6678e56 100644
--- a/src/net.h
+++ b/src/net.h
@@ -66,7 +66,7 @@ bool StopNode();
 //  (4) size
 //  (4) checksum
 
-extern char pchMessageStart[4];
+extern unsigned char pchMessageStart[4];
 
 class CMessageHeader
 {
-- 
1.7.5.4

-------------- next part --------------
From 74647b73e06ae5b4ec995873a8ef56977f3b7e93 Mon Sep 17 00:00:00 2001
From: Venkatesh Srinivas <me at endeavour.zapto.org>
Date: Sun, 7 Aug 2011 12:20:00 -0400
Subject: [PATCH 3/3] Qualify make_tuple with boost:: namespace.

---
 src/db.cpp |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/db.cpp b/src/db.cpp
index 9c8c9c4..b3fa3e1 100644
--- a/src/db.cpp
+++ b/src/db.cpp
@@ -610,7 +610,7 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)
 
 bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)
 {
-    return Write(make_tuple(string("acentry"), acentry.strAccount, ++nAccountingEntryNumber), acentry);
+    return Write(boost::make_tuple(string("acentry"), acentry.strAccount, ++nAccountingEntryNumber), acentry);
 }
 
 int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)
@@ -638,7 +638,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin
         // Read next record
         CDataStream ssKey;
         if (fFlags == DB_SET_RANGE)
-            ssKey << make_tuple(string("acentry"), (fAllAccounts? string("") : strAccount), uint64(0));
+            ssKey << boost::make_tuple(string("acentry"), (fAllAccounts? string("") : strAccount), uint64(0));
         CDataStream ssValue;
         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);
         fFlags = DB_NEXT;
-- 
1.7.5.4

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110807/d7036521/attachment.sig>

From witchspace81 at gmail.com  Wed Aug 10 09:36:05 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 10 Aug 2011 09:36:05 +0000
Subject: [Bitcoin-development] Change to multiple executables?
Message-ID: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>

All,

In the current mainline client everything is lugged into one executable
(with an optional daemon-only one). I think this is a bad idea for various
reasons, and would propose something like:

   - bitcoind: bitcoin daemon
   - bitcoin(-qt): bitcoin GUI executable
   - bitcoincl: bitcoin RPC command line

By default, all three would be built. In non-GUI mode, only bitcoind and
bitcoincl are built (the names are obviously open for discussion).

Advantages:

   - It is more clear to the user. One command, one function.
   - It simplifies the main functions.
   - The UI would no longer double-function as daemon. It is a waste of
   memory to link the UI libs if you only want to run a background process.
   - The UI and daemon would no longer double-function as RPC call. Why load
   the code for UI and network if you just want to send a single command over
   JSONRPC?  This would also prevent accidentally launching the daemon/UI
   locally if you just want to send a command and forget to give an argument.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/dc4f6bdd/attachment.html>

From bitcoin-list at bluematt.me  Wed Aug 10 10:14:49 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 10 Aug 2011 12:14:49 +0200
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
Message-ID: <1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>

On Wed, 2011-08-10 at 09:36 +0000, John Smith wrote:
> All,
> 
> In the current mainline client everything is lugged into one
> executable (with an optional daemon-only one). I think this is a bad
> idea for various reasons, and would propose something like:
>       * bitcoind: bitcoin daemon
>       * bitcoin(-qt): bitcoin GUI executable
>       * bitcoincl: bitcoin RPC command line
> By default, all three would be built. In non-GUI mode, only bitcoind
> and bitcoincl are built (the names are obviously open for
> discussion). 
> 
> Advantages:
>       * It is more clear to the user. One command, one function.
I would argue its less clear for the user.  Instead of opening either
bitcoind or bitcoin to get RPC or GUI, now you have to open bitcoin and
bitcoind or bitcoincl and bitcoind.  Now, obviously bitcoin and
bitcoincl can open bitcoind for you, but I think adding more executables
complicates things for little clear advantage.
>       * It simplifies the main functions.
>       * The UI would no longer double-function as daemon. It is a
>         waste of memory to link the UI libs if you only want to run a
>         background process.
As you pointed out, we have bitcoind for just this reason.
>       * The UI and daemon would no longer double-function as RPC call.
>         Why load the code for UI and network if you just want to send
>         a single command over JSONRPC?  This would also prevent
>         accidentally launching the daemon/UI locally if you just want
>         to send a command and forget to give an argument.
Making RPC optional for GUI users would be an interesting addition.
> JS

All this said, I totally agree with the more clear split of the source
into separate library-ish components (I'm working on part of that now).
However, I don't like the idea of splitting into more executables.  

If you are suggesting this so that bitcoin-qt can be distributed being
built off of bitcoind, I would say go ahead and pull-request bitcoin-qt.
I'm of the opinion that it should be merged whether we have autotools or
not (we already have 5 makefiles, whats a few more options in those?)
and jgarzik seemed to indicate that he would agree (Gavin?, sipa?
tcatm?).

Matt




From witchspace81 at gmail.com  Wed Aug 10 10:26:30 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 10 Aug 2011 10:26:30 +0000
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CAJNQ0stFevVgfwBuXkJKJ_mJsEuogOPyHR6U+qVTvpdKjdkd=g@mail.gmail.com>

On Wed, Aug 10, 2011 at 10:14 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> I would argue its less clear for the user.  Instead of opening either
> bitcoind or bitcoin to get RPC or GUI, now you have to open bitcoin and
> bitcoind or bitcoincl and bitcoind.  Now, obviously bitcoin and
> bitcoincl can open bitcoind for you, but I think adding more executables
> complicates things for little clear advantage.
>

UI would obviously still have RPC functionality with -server. I don't mean
dropping that. The UI links both the UI and the network code (for now, until
this is separated out and the preferred UI<->core communication method is
through RPC).

I just mean that the *headless* daemon is separate from the UI executable,
which is the case for any other sane client/server-based program in
existence, from bittorrent nodes to game servers.

It would also make it possible to build the command line RPC client
(bitcoin-cl) *without* building the server or UI. Useful if you want to
remotely control a Bitcoin daemon but not want to build it locally.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/891241ae/attachment.html>

From pieter.wuille at gmail.com  Wed Aug 10 10:43:36 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 10 Aug 2011 12:43:36 +0200
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <20110810104316.GA30749@ulyssis.org>

On Wed, Aug 10, 2011 at 12:14:49PM +0200, Matt Corallo wrote:
> On Wed, 2011-08-10 at 09:36 +0000, John Smith wrote:
> > All,
> > 
> > In the current mainline client everything is lugged into one
> > executable (with an optional daemon-only one). I think this is a bad
> > idea for various reasons, and would propose something like:
> >       * bitcoind: bitcoin daemon
> >       * bitcoin(-qt): bitcoin GUI executable
> >       * bitcoincl: bitcoin RPC command line
> > By default, all three would be built. In non-GUI mode, only bitcoind
> > and bitcoincl are built (the names are obviously open for
> > discussion). 
> 
> All this said, I totally agree with the more clear split of the source
> into separate library-ish components (I'm working on part of that now).
> However, I don't like the idea of splitting into more executables.  

I do agree about splitting off bitcoincl - it's kinda confusing now how
the client behaves as a rpc daemon or UI when no RPC command-line
parameters are present, and as a command-line client otherwise.

I am less sure UI and RPC should be split (though being able to select
both independently from eachother at compile time would be nice). I
often run the UI and switch to RPC calls to inspect some details.
Not sure how common this usage pattern is, though.

> If you are suggesting this so that bitcoin-qt can be distributed being
> built off of bitcoind, I would say go ahead and pull-request bitcoin-qt.
> I'm of the opinion that it should be merged whether we have autotools or
> not (we already have 5 makefiles, whats a few more options in those?)
> and jgarzik seemed to indicate that he would agree (Gavin?, sipa?
> tcatm?).

The problem is that bitcoin-qt is built using qmake, and the rest using
makefiles... so it's more than just adding an additional makefile.

That said, it seems bitcoin-qt is mature enough to replace wxbitcoin
to me, and would definitely like to see it in mainline. How streamlined
is the process of building bitcoin-qt on windows and osx? Maybe we can
switch everything to qmake (for now, as long as no maintained autotools 
is present)?

-- 
Pieter




From witchspace81 at gmail.com  Wed Aug 10 13:18:38 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 10 Aug 2011 13:18:38 +0000
Subject: [Bitcoin-development]  Change to multiple executables?
In-Reply-To: <CAJNQ0ssWeU2vgR8XmCyGiZ3UHPv=zjLZEKVM=gqP0ozSC7Wmiw@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
	<20110810104316.GA30749@ulyssis.org>
	<CAJNQ0ssWeU2vgR8XmCyGiZ3UHPv=zjLZEKVM=gqP0ozSC7Wmiw@mail.gmail.com>
Message-ID: <CAJNQ0stkZ=iBCJA7E5+LZToe2MjEJnhqWoiUtLcqTGPygSikiA@mail.gmail.com>

> I do agree about splitting off bitcoincl - it's kinda confusing now how
> the client behaves as a rpc daemon or UI when no RPC command-line
> parameters are present, and as a command-line client otherwise.
>
> I am less sure UI and RPC should be split (though being able to select
> both independently from eachother at compile time would be nice). I
> often run the UI and switch to RPC calls to inspect some details.
> Not sure how common this usage pattern is, though.
>

No no no I never stated that the UI should no longer support RPC. If you
want the UI, with RPC, you can still run the UI executable with -server.
There are many usecases in which you want to access the UI bitcoin client
using RPC...

I only meant that it would also build the *headless* daemon by default, as
separate "bitcoind" executable. So you cannot run the UI exectuable as
headless server anymore. The -daemon option would go away. It would make the
setup a lot easier: The UI can connect to  X and display a splash screen
immediately without first looking at the command line arguments, whereas the
headless daemon can ignore all that stuff and get straight to work.


> > If you are suggesting this so that bitcoin-qt can be distributed being
> > built off of bitcoind, I would say go ahead and pull-request bitcoin-qt.
> > I'm of the opinion that it should be merged whether we have autotools or
> > not (we already have 5 makefiles, whats a few more options in those?)
> > and jgarzik seemed to indicate that he would agree (Gavin?, sipa?
> > tcatm?).
>

> That said, it seems bitcoin-qt is mature enough to replace wxbitcoin
> to me, and would definitely like to see it in mainline. How streamlined
> is the process of building bitcoin-qt on windows and osx? Maybe we can
> switch everything to qmake (for now, as long as no maintained autotools
> is present)?
>

It's easy on windows:  just install Qt Creator (comes with the Qt SDK),
install the extra dependencies (build instructions are in README.rst), and
hit build.

On MacOSX I'm not sure.  I think it's similar, as a few people built it for
MacOSX and contributed settings for the .pro file...

It can build the GUI fine for every platform, however it can only build the
GUI, not the headless daemon or the command line client. You'd still need
old fashioned makefiles for those.

Cmake or autotools would be better, especially as those are intelligent
enough to auto-detect the name of libraries such as boost, and detect
presence of optional dependencies (miniupnp).

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/c50474fa/attachment.html>

From gavinandresen at gmail.com  Wed Aug 10 16:29:50 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 10 Aug 2011 12:29:50 -0400
Subject: [Bitcoin-development] Roadmap/schedules
Message-ID: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>

I've been wading through the pull requests and bug lists to figure out
a roadmap for the next few months.

Here are the things on my priority list:

1. Where are we at with network health? What metrics should we be
using? Is there work to be done?
And meta-issue:  can somebody volunteer to be the Bitcoin Network
Health Inspector to keep track of this?

2. We've got a chronic problem with new code causing CRITICAL_SECTION
deadlocks (see issue #453 for the latest). Detecting potential
deadlocks early should be done; longer term I think re-architecting to
be single-threaded/asio is probably the right thing to do.

3. Wallet security.  I'd like to get Matt's wallet encryption shipped
soon, along with all or part of groffer's Multisign patch (#319 --
since that will enable the creation of trojan-resistant secure wallet
solutions).

4. Bug fixing.  44 bugs in the issue list, some of which I think are
already fixed. Anybody else want to volunteer to be BugKeeper?  (job
would be: prioritize/assign bugs, make sure they get closed when
they're fixed).

5. Testing. I don't have time to personally test every PULL request,
but if a pull involves more than trivial code changes I'm not going to
pull it unless it has been thoroughly tested.  We had a very good rule
at a company I used to work for-- programmers were NOT allowed to be
the only ones to test their own code. Help finding money and/or people
for a dedicated "core bitcoin quality assurance team" is welcome.
More unit tests and automated testing is also certainly welcome.

If this was open source blogging software I'd be much less uptight
about testing and code review and bugs. But it's not, it is software
for handling money.


Stuff I'd like to see in the release-after-next:

fClient mode (download headers only, for faster initial startup; I've
started the work, talk to me if you want to take over)
Sipa's wallet and key export/import
Move from wxWidgets to qt for the GUI
Un-hardcode fee handling (anybody already working on this?)

And research-y features I'd like to see happen soon:

"Impolite peer" detection/reaction to prevent various DOS/Sybil attacks
Better detection/reaction to double spend attempts or block-chain splits
Code for mining pool participants that helps keep mining pool operators honest


Everything else I consider lower priority. But if it is important to
you, is important to other people (and non-controversial), you
thoroughly test it, and there's zero chance it introduces a security
vulnerability... then I'll have no objections to pulling it.

Did I miss anything important? I'll create a Roadmap page on the
bitcoin wiki if there is general consensus about priorities.

-- 
--
Gavin Andresen



From gavinandresen at gmail.com  Wed Aug 10 16:49:21 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 10 Aug 2011 12:49:21 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CAJNQ0stkZ=iBCJA7E5+LZToe2MjEJnhqWoiUtLcqTGPygSikiA@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
	<20110810104316.GA30749@ulyssis.org>
	<CAJNQ0ssWeU2vgR8XmCyGiZ3UHPv=zjLZEKVM=gqP0ozSC7Wmiw@mail.gmail.com>
	<CAJNQ0stkZ=iBCJA7E5+LZToe2MjEJnhqWoiUtLcqTGPygSikiA@mail.gmail.com>
Message-ID: <CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>

RE: splitting off the "send commands to a running bitcoin" :

I'm mildly against it. It would be less confusing for newbies, at the
cost of forcing everybody who has already written backup scripts or
other interact-with-running-bitcoin tools to tweak their code. The
coding will be easy, but do you really want to spend the time to
answer all the "I installed Bitcoin X.Y and now my backup script
doesn't work" questions and modify the wiki pages and ...

I'd rather that time be spent working on any remaining build issues so
we can switch to bitcoin-qt.  I don't care if it is autotools or qmake
or QT creator, I just care that it works on Windows and Linux under
gitian and has clear instructions so I can build it on my Mac.

-- 
--
Gavin Andresen



From bitcoin-list at bluematt.me  Wed Aug 10 16:59:14 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 10 Aug 2011 18:59:14 +0200
Subject: [Bitcoin-development] Roadmap/schedules
In-Reply-To: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
References: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
Message-ID: <1312995554.17416.22.camel@BMThinkPad.lan.bluematt.me>

On Wed, 2011-08-10 at 12:29 -0400, Gavin Andresen wrote:
> I've been wading through the pull requests and bug lists to figure out
> a roadmap for the next few months.
> 
> Here are the things on my priority list:
> 
> 1. Where are we at with network health? What metrics should we be
> using? Is there work to be done?
We really don't have too many metrics here.  AFAIK the only real metric
keeping place would be my dnsseed (as well as the one run by IO- ) and
they don't look good (I show about 3x as many 0.3.23 nodes listening as
0.3.24, likely due to the rate that 0.3.23 nodes will drop connections,
made worse by recent block size increases).
> And meta-issue:  can somebody volunteer to be the Bitcoin Network
> Health Inspector to keep track of this?
Very much needed, didn't TD say something about a friend who wanted to
do research in this area?
> 
> 2. We've got a chronic problem with new code causing CRITICAL_SECTION
> deadlocks (see issue #453 for the latest). Detecting potential
> deadlocks early should be done; longer term I think re-architecting to
> be single-threaded/asio is probably the right thing to do.
Sipa had begin looking at doing some redoing of the locking system (to
support more broad stuff like read-only locks, etc) to solve that exact
bug, but I never heard anything about if he actually started writing
code or how far he got.
> 
> 3. Wallet security.  I'd like to get Matt's wallet encryption shipped
> soon, along with all or part of groffer's Multisign patch (#319 --
> since that will enable the creation of trojan-resistant secure wallet
> solutions).
I was under the impression all that was left on the to-do for 0.4 was
wallet import/export testing and merge (and a few bug fixes like #453),
I agree #319 should be pulled sometime soon, but maybe for 0.4 just the
IsStandard parts in 0.4 as those need to get out first anyway?
> 
> 4. Bug fixing.  44 bugs in the issue list, some of which I think are
> already fixed. Anybody else want to volunteer to be BugKeeper?  (job
> would be: prioritize/assign bugs, make sure they get closed when
> they're fixed).
Personally, I'd like to see a better bug tracking system used anyway, ie
one with a full feature set, better tagging system, etc (I really hate
github's system here, but moving would be hard...).  Anyway, many of
them are future "would be nice to have things" or a minor or annoying
bug which effects almost no one (or is at least doesnt keep anyone from
using the client) but require a lot of effort to fix.
> 
> 5. Testing. I don't have time to personally test every PULL request,
> but if a pull involves more than trivial code changes I'm not going to
> pull it unless it has been thoroughly tested.  We had a very good rule
> at a company I used to work for-- programmers were NOT allowed to be
> the only ones to test their own code. Help finding money and/or people
> for a dedicated "core bitcoin quality assurance team" is welcome.
> More unit tests and automated testing is also certainly welcome.
Would be really nice.  I'm looking to move the jenkins server somewhere
(moving to college means move as much as possible to VPSs instead of my
parent's basement where I can't manage it) but it could allow for pretty
good sanity tests on patches (which they often currently fail) including
unit tests and build tests.  If someone trusted wants to part with a VPS
or can spare some bitcoins so I can grab one myself, it would be much
appreciated (or if someone wants to take over that server, that would be
nicer).
> 
> If this was open source blogging software I'd be much less uptight
> about testing and code review and bugs. But it's not, it is software
> for handling money.
> 
> 
> Stuff I'd like to see in the release-after-next:
> 
> fClient mode (download headers only, for faster initial startup; I've
> started the work, talk to me if you want to take over)
Need to talk here, I started work on splitting the block/transaction
check/store and net with the ultimate goal of making a nice api that
they communicate over (as well as wallet and potentially other) and
allowing for a different block/transaction check module for lightweight
nodes.  It would also mean a bit cleaner codebase which could allow for,
say, a partial rewrite of net code without far-reaching changes.
Whether or not its even a good idea, I don't know, but I've written some
code anyway.
> Sipa's wallet and key export/import
I was under the impression the plan was for this to go in 0.4 aka next
release, but personally, I don't care too much either way.
> Move from wxWidgets to qt for the GUI
> Un-hardcode fee handling (anybody already working on this?)
Sipa did some good thinking through for algorithms that could be really
useful here, but I don't think any code was ever written, nor did he
finish (is he off doing the studying thing?)
> 
> And research-y features I'd like to see happen soon:
> 
> "Impolite peer" detection/reaction to prevent various DOS/Sybil attacks
> Better detection/reaction to double spend attempts or block-chain splits
Not sure what is meant here.  Personally, I'm animately against any kind
of notification to spread through the network in case of a double spend,
and I really think it double-spend detection could be very efficiently
done now.  I was under the impression block-chain splits were fairly
efficiently handled already?
> Code for mining pool participants that helps keep mining pool operators honest
> 
> 
> Everything else I consider lower priority. But if it is important to
> you, is important to other people (and non-controversial), you
> thoroughly test it, and there's zero chance it introduces a security
> vulnerability... then I'll have no objections to pulling it.
> 
> Did I miss anything important? I'll create a Roadmap page on the
> bitcoin wiki if there is general consensus about priorities.


Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/e6dd9e29/attachment.sig>

From witchspace81 at gmail.com  Wed Aug 10 17:45:42 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 10 Aug 2011 17:45:42 +0000
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
	<20110810104316.GA30749@ulyssis.org>
	<CAJNQ0ssWeU2vgR8XmCyGiZ3UHPv=zjLZEKVM=gqP0ozSC7Wmiw@mail.gmail.com>
	<CAJNQ0stkZ=iBCJA7E5+LZToe2MjEJnhqWoiUtLcqTGPygSikiA@mail.gmail.com>
	<CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>
Message-ID: <CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>

On Wed, Aug 10, 2011 at 4:49 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> RE: splitting off the "send commands to a running bitcoin" :
>
> I'm mildly against it. It would be less confusing for newbies, at the
> cost of forcing everybody who has already written backup scripts or
> other interact-with-running-bitcoin tools to tweak their code. The
> coding will be easy, but do you really want to spend the time to
> answer all the "I installed Bitcoin X.Y and now my backup script
> doesn't work" questions and modify the wiki pages and ...
>

As the project is still in "experimental" phase I suppose people can expect
changes like this? And the change is pretty much trivial, and it makes sense
for a future direction (UI<->Wallet in separate processes for security
concerns).

To be honest I feel a bit like every change that I (and I've also heard this
from others) propose is shot down, no matter how well formulated.  This is
actively discouraging developers from joining this project.

Of course it makes sense to be a careful, but the project is not on life
support is it? Satoshi did a great job making the program, but his work was
not perfect, and it makes sense to look ahead a bit.

I think it would be better to switch to two branches, like most other open
source projects I've worked with:

0.3.x -> small, compatible changes, bugfixes, like now
0.4.x -> trunk, more impactful changes, refactorings, eventual major release

Both will obviously be fully compatible on the P2P-level.


> I'd rather that time be spent working on any remaining build issues so
> we can switch to bitcoin-qt.  I don't care if it is autotools or qmake
> or QT creator, I just care that it works on Windows and Linux under
> gitian and has clear instructions so I can build it on my Mac.
>

I could do the Gitian stuff but not the Mac instructions, as I don't have a
Mac...

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110810/199e8a3e/attachment.html>

From gavinandresen at gmail.com  Wed Aug 10 18:41:51 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 10 Aug 2011 14:41:51 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
	<20110810104316.GA30749@ulyssis.org>
	<CAJNQ0ssWeU2vgR8XmCyGiZ3UHPv=zjLZEKVM=gqP0ozSC7Wmiw@mail.gmail.com>
	<CAJNQ0stkZ=iBCJA7E5+LZToe2MjEJnhqWoiUtLcqTGPygSikiA@mail.gmail.com>
	<CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>
	<CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
Message-ID: <CABsx9T059A+RtJ-Mc8XCX6m3dyF23WZ5jraBLGt1=hvSGn14kg@mail.gmail.com>

> To be honest I feel a bit like every change that I (and I've also heard this
> from others) propose is shot down, no matter how well formulated.? This is
> actively discouraging developers from joining this project.

Well, to be honest I don't think more developers adding new features
are needed right now-- I think the project's critical needs are more
people testing and helping to fix bugs and scalability issues.

In this particular case, I said I was mildly against it-- if you want
me to switch to supporting it, then reassure me you're willing to do
ALL the work to make it happen.  Send me a list of wiki pages you'll
edit to document the change and tell me that you'll be around to help
people rewrite their backup scripts.

> I think it would be better to switch to two branches, like most other open
> source projects I've worked with.

I don't see how dividing efforts between a 'bug fix' and 'development'
branch will help fix the project's critical needs. If we did, I think
there would be less pressure to help with the boring bug-fixing and
testing of the bug-fix branch, which I think would be bad.

-- 
--
Gavin Andresen



From luke at dashjr.org  Wed Aug 10 18:43:14 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 10 Aug 2011 14:43:14 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>
	<CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
Message-ID: <201108101443.17015.luke@dashjr.org>

On Wednesday, August 10, 2011 1:45:42 PM John Smith wrote:
> 0.3.x -> small, compatible changes, bugfixes, like now
> 0.4.x -> trunk, more impactful changes, refactorings, eventual major
> release

It seems there's room for some kind of "experimental" branch as well, 
including features that might not make it into any stable release (due to lack 
of use/interest or whatever).



From pieter.wuille at gmail.com  Wed Aug 10 18:57:53 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 10 Aug 2011 20:57:53 +0200
Subject: [Bitcoin-development] Roadmap/schedules
In-Reply-To: <1312995554.17416.22.camel@BMThinkPad.lan.bluematt.me>
References: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
	<1312995554.17416.22.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <20110810185752.GA18562@ulyssis.org>

On Wed, Aug 10, 2011 at 06:59:14PM +0200, Matt Corallo wrote:
> On Wed, 2011-08-10 at 12:29 -0400, Gavin Andresen wrote:
> > I've been wading through the pull requests and bug lists to figure out
> > a roadmap for the next few months.
> > 
> > Here are the things on my priority list:
>
> > 2. We've got a chronic problem with new code causing CRITICAL_SECTION
> > deadlocks (see issue #453 for the latest). Detecting potential
> > deadlocks early should be done; longer term I think re-architecting to
> > be single-threaded/asio is probably the right thing to do.
> Sipa had begin looking at doing some redoing of the locking system (to
> support more broad stuff like read-only locks, etc) to solve that exact
> bug, but I never heard anything about if he actually started writing
> code or how far he got.

No I didn't start writing anything - I've been quite busy the past few weeks,
and will be more so the coming weeks. Anyway, some ideas:

Either we try to make everything single threaded, and aim towards a bitcoin
library which you pass events (which can be network, rpc, UI, ...) and
it always processes in finite time, without any separate threads. That
would be a serious rewrite, and maybe a limitation on potential growth
(there *will* be a time where a full node doesn't run on anything but
a 16-core machine...).

The alternative is doing a very careful checking/rework of the locking
system. I think you want some per-object locking instead of per single
data structure. Making it so fine-grained forces careful checking of
the order in which things are locked. That is hard to keep track of,
and probably doesn't gain you very much (just a guess, experiments could
prove me wrong, obviously)

I would propose a system with one lock for the node-handling code
(mapTransactions, mapBlockIndex, mapOrphanBlocks, ...), one lock for
the wallet-handling code (mapWallet, CKeyStore), and one lock for
network-handling code. No access to any inner data structures of
these components is exposed, and everything goes through accessor
functions. All exposed functions of each component take the respective
lock upon entering the component. This includes functions that only
need read-only access (which currently often don't take a lock at
all, iirc).

However, I think we can move to reader-writer locks (boost's shared_mutex).
A lot of code does not need an exclusive lock on the data, as multiple
threads reading the internal data structures simultaneously is not a
problem. This would mean that all inspector functions are wrapped in a
lock_shared/unlock_shared blocks, all mutator functions are wrapped in
a lock_upgrade/unlock_upgrade block, and code that actually modifies
data structures is wrapped in a unlock_upgrade_and_lock/
unlock_and_lock_upgrade block. 

This is clearly part of a larger code-cleanup effort, as it would mean
moving all code in GUI and RPC that take locks on various things, to
the component they are taking locks on. That's immediately a nice step
towards "librarification" of the code...

> > Sipa's wallet and key export/import
> I was under the impression the plan was for this to go in 0.4 aka next
> release, but personally, I don't care too much either way.

I think it should be more or less finished by now in terms of
functionality, at least for dumpprivkey, importprivkey, removeprivkey.
I'm somewhat less sure about dumpwallet/importwallet, as some changes
to the json dump format might be useful still. It does require testing
though...

> > Move from wxWidgets to qt for the GUI

I'd really like to see that - with or without autotools, if some degree
of consistent config/build architecture can be maintained for the
different platforms.

> > Un-hardcode fee handling (anybody already working on this?)
> Sipa did some good thinking through for algorithms that could be really
> useful here, but I don't think any code was ever written, nor did he
> finish (is he off doing the studying thing?)

I was working on a draft for a reworked fee system. I didn't get to
write things out nicely, but the main idea was: assign a score to each
transaction group, in a way that scores always keep increasing over time.
Keep the memory pool sorted according to those scores, and drop the lowest
scoring ones when a configurable memory limit is reached (no limit on the
score itself). Finally, for mining, select the top N transaction groups
from the pool in such a way that an average configurable fee per byte
is maintained. 

As each mining node chooses a (hopefully more or less fixed, or at least
only slowly changing) cutoff score above which transactions are included,
the network should converge to a more or less fixed probability distribution
for the score at which transactions are included.

Nodes can measure and estimate this distribution, and calculate expected time
to inclusion for a given fee.

The devil is in the details, as it is kinda hard to define a scoring system
for transactions that is independent from the current exchange value of
bitcoins, from which kind of transactions are common on the network, but still
tries to mimic the cost for the network to handle that transaction.



Anyway, as said, I currently don't have the time to implement these ideas
right now. I do read the mailing list, though :)

-- 
Pieter



From andyparkins at gmail.com  Wed Aug 10 19:32:00 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 10 Aug 2011 20:32:00 +0100
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CABsx9T059A+RtJ-Mc8XCX6m3dyF23WZ5jraBLGt1=hvSGn14kg@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
	<CABsx9T059A+RtJ-Mc8XCX6m3dyF23WZ5jraBLGt1=hvSGn14kg@mail.gmail.com>
Message-ID: <201108102032.00373.andyparkins@gmail.com>

On Wednesday 10 August 2011 19:41:51 Gavin Andresen wrote:
> > To be honest I feel a bit like every change that I (and I've also heard
> > this from others) propose is shot down, no matter how well
> > formulated.  This is actively discouraging developers from joining
> > this project.
> 
> Well, to be honest I don't think more developers adding new features
> are needed right now-- I think the project's critical needs are more
> people testing and helping to fix bugs and scalability issues.

(Rant follows; stop reading now)

That paragraph reveals a gross misunderstanding of how open source works.  

People get itches and they want to scratch them.  They aren't paid, so they 
don't necessarilly want to turn up and be told which part they _should_ be 
working on.  The choice is not "bug fix that Gavin wants" or "new feature 
that New Developer wants", it is "New Feature" or nothing.

Of course, nothing forces existing developers to accept these new features; 
but the incredibly negative attitude on display when any new feature is 
suggested is not the way to grow a community.  The correct way is a 
mentoring attitude -- offering opinions on how a new developer can get their 
idea in rather than telling them why it will never happen.

> I don't see how dividing efforts between a 'bug fix' and 'development'
> branch will help fix the project's critical needs. If we did, I think

Again: that's not your call.  People will work on what interests them.  I've 
suggested a couple of features both here and on the forum and been shot down 
in varying degrees every time.  Fine, but don't expect that I'm thinking 
"well I'll become an unpaid bug fixing grunt instead".

I don't expect to be appointed head developer because I suggest an idea.  I 
don't even expect anyone else to implement my idea for me.  But why should I 
spend time on my own idea when the feedback is "no", "no", "we've already 
thought of that", "not needed", "go away", "why not fix some bugs instead"?

I'm amazed that John Smith is as polite and persistent as he is looking at 
the amount of effort he's put in putting a pretty face on the train crash 
that existed before hand and seems to get no benefit of the doubt for his 
work.

> there would be less pressure to help with the boring bug-fixing and
> testing of the bug-fix branch, which I think would be bad.

That pressure might be relieved if the community were able to grow a bit, 
and people felt they had a personal investment.  That means loosening the 
reigns a bit; and perhaps a development branch would be the way to do that 
while not compromising code quality.

I suggest a look at the way git itself is developed; it has the following 
branches:

 - master: the latest release + newly accepted features
 - maint: the latest release + bug fixes only
 - next: new features planned for inclusion, actively being worked on.
   Often created by merging "topic" branches from individual developers
   working on their current itch
 - pu: crazy stuff; not planned for inclusion, but acting as a staging
   area for people to show what they're working on



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From jgarzik at exmulti.com  Wed Aug 10 19:48:10 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 10 Aug 2011 15:48:10 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <201108101443.17015.luke@dashjr.org>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>
	<CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
	<201108101443.17015.luke@dashjr.org>
Message-ID: <CA+8xBpdR6KsT6mWtHsrynKp0csQHHr+28DMunJjRhhBywv4GOQ@mail.gmail.com>

On Wed, Aug 10, 2011 at 2:43 PM, Luke-Jr <luke at dashjr.org> wrote:
> On Wednesday, August 10, 2011 1:45:42 PM John Smith wrote:
>> 0.3.x -> small, compatible changes, bugfixes, like now
>> 0.4.x -> trunk, more impactful changes, refactorings, eventual major
>> release
>
> It seems there's room for some kind of "experimental" branch as well,
> including features that might not make it into any stable release (due to lack
> of use/interest or whatever).

In kernel land there exists "linux-next"  Stephen Rothwell maintains a
tree that is linux -tip, plus a list of trees & branches to pull from
various individual developers.  For example, linux-next pulls my SATA
tree from libata-dev.git branch NEXT.

Each developer is expected to publish changes they feel are ready for
upstream.  Developers are expected to "play nicely" and coordinate
amongst themselves when two trees include conflicting changes.
Trivial merge conflicts are handled by Stephen Rothwell, who does
merging, build testing and such of the final set-of-N-trees result.
More difficult merge conflicts are coordinated by the developers
themselves, who work together to create a temporary "merge tree" that
is then pulled by the linux-next maintainer.

linux-next is the always moving, regenerated daily target where
developers stage [in their opinion] upstream-ready changes.

Thus Linus's linux.git development process really looks like the
following, when linux-next is included in the picture:

1. Version X-1 is released, on day 0.
2. Merge window for version X opens, on day 0.
3. Linus pulls all changes that have seen testing in linux-next, over
the -rc window (step #6, below)
4. Merge window closes, on day 7.
5. Version X-rc1 is released, on day 7.
6. Only bug fixes are accepted now (hopefully seen at least 24 hours
of testing in linux-next, unless urgency demands otherwise).  All new
development is done in developer trees and branches, and is
automatically published nightly in linux-next.
7. Version X is released, on day 90.

Thus "upstream" stays almost constantly stable, except for the short
1-week merge window period, and linux-next comprises the rolling
"development version" where new changes are staged.

Note the subtle but important distinction between this and maintaining
a strict 'bugfix' and 'development' branch system like John Smith
described.  The underlying linux-next dependent trees may be rebased
at any time, and so linux-next is constantly regenerated, rather than
being a cumulative history of choatic development.  Major changes can
and will be staged, de-staged, and re-staged during development, and
maintaining a strict "official development branch" methodology is less
flexible.

Here is an example linux-next report.  Stephen sends one, daily, with
each linux-next tree generated:
http://marc.info/?l=linux-next&m=131295044704945&w=2

As it applies to bitcoin, this "bitcoin-next" approach may simply be
layered on top of the current methodology.  All it requires is a
volunteer who maintains this tree-of-trees, and wha-la:  bitcoin has a
development branch.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Wed Aug 10 19:57:29 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 10 Aug 2011 15:57:29 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <201108102032.00373.andyparkins@gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
	<CABsx9T059A+RtJ-Mc8XCX6m3dyF23WZ5jraBLGt1=hvSGn14kg@mail.gmail.com>
	<201108102032.00373.andyparkins@gmail.com>
Message-ID: <CA+8xBpdCtYQkKwQZzZY2PsHm=+BrhD4TdoKqoAVoa7R0W9YkRw@mail.gmail.com>

On Wed, Aug 10, 2011 at 3:32 PM, Andy Parkins <andyparkins at gmail.com> wrote:
> People get itches and they want to scratch them. ?They aren't paid, so they
> don't necessarilly want to turn up and be told which part they _should_ be
> working on. ?The choice is not "bug fix that Gavin wants" or "new feature
> that New Developer wants", it is "New Feature" or nothing.

This is true -- though there is value to having a list of "things we
think people should focus on" for the motivated, and for new people
interested in tackling a project, but not sure what project to tackle.

>> there would be less pressure to help with the boring bug-fixing and
>> testing of the bug-fix branch, which I think would be bad.
>
> That pressure might be relieved if the community were able to grow a bit,
> and people felt they had a personal investment. ?That means loosening the
> reigns a bit; and perhaps a development branch would be the way to do that
> while not compromising code quality.

A centrally managed development branch on bitcoin/bitcoin.git is not
the way to do it, however.  See the description of linux-next, in my
previous email, for a more distributed method which can easily be
layered on top of the existing bitcoin dev structure by any motivated
volunteer(s).

Think distributed.  :)  The community does not need Linus's help
(linux-next) or Gavin's help (bitcoin-next) to do this.  linux-next
became so widely used and useful that Linus requires almost all
changes to be first staged in linux-next.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Wed Aug 10 20:41:26 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 10 Aug 2011 16:41:26 -0400
Subject: [Bitcoin-development] Roadmap/schedules
In-Reply-To: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
References: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
Message-ID: <CA+8xBpeuzO9+BWZtgpR8h2rSRdB-gQYjq9pyKnbxgBHDX=UnZg@mail.gmail.com>

On Wed, Aug 10, 2011 at 12:29 PM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> 1. Where are we at with network health? What metrics should we be
> using? Is there work to be done?
> And meta-issue: ?can somebody volunteer to be the Bitcoin Network
> Health Inspector to keep track of this?

Seems like this would be a useful companion website + project.
bitcoin/networkmon.git could be a central point for contributors to
add various monitors and tests.

Getting on-going network health information is critical to bitcoin's
success.  We need to know if incoming nodes are getting DDoS'd...

> 2. We've got a chronic problem with new code causing CRITICAL_SECTION
> deadlocks (see issue #453 for the latest). Detecting potential
> deadlocks early should be done; longer term I think re-architecting to
> be single-threaded/asio is probably the right thing to do.

Agree

> 3. Wallet security. ?I'd like to get Matt's wallet encryption shipped
> soon, along with all or part of groffer's Multisign patch (#319 --
> since that will enable the creation of trojan-resistant secure wallet
> solutions).

IMO the only thing lacking is docs.  There is no real admin guide
describing how to prepare bitcoind installations for encryption;
doc/README does not mention RPC encryptwallet at all, nor does it
describe the various states your wallet may be in, when before and
after encryptwallet has been run.  The information is very general,
and not adequate for a competent admin to be able to evaluate.  It
does not describe encryption method or other security parameters.  It
does not describe the specific technical relationship between the
master key and other keys.


> 4. Bug fixing. ?44 bugs in the issue list, some of which I think are
> already fixed. Anybody else want to volunteer to be BugKeeper? ?(job
> would be: prioritize/assign bugs, make sure they get closed when
> they're fixed).

I have never seen an open source project with a successful Bug Czar,
unless that is an actively compensated position.

> 5. Testing. I don't have time to personally test every PULL request,
> but if a pull involves more than trivial code changes I'm not going to
> pull it unless it has been thoroughly tested. ?We had a very good rule
> at a company I used to work for-- programmers were NOT allowed to be
> the only ones to test their own code. Help finding money and/or people
> for a dedicated "core bitcoin quality assurance team" is welcome.
> More unit tests and automated testing is also certainly welcome.

I think Q/A will naturally grow out of some sort of dedicated support
organization, rather than have a dev fiat requirement.  Testing like
that is always desireable in the "I'd love it, if it were this way"
vein, but not always realistic at all for open source projects.
Especially with open source, time has shown that the best testing
comes from the field, and we have the biggest test lab in the world:
the Internet.  So IMO focus less on roadblocks to publishing software,
and more on widely distributed test software.

For new features, simple "it works" test at a minimum seems
reasonable, most of the time.  But in open source the testing and such
tends to happen in the periphery, by organizations and individuals
with the incentive to focus on those issues.

In my recent emails describing linux-next and a proposed
"bitcoin-next", one attribute of linux-next is that it is run through
automated tests on a daily basis, right after the merge is complete.
It forms a useful layer on top of the primary linux project & tree.

> If this was open source blogging software I'd be much less uptight
> about testing and code review and bugs. But it's not, it is software
> for handling money.

Although I do agree, remember that it is the nature of open source
that you always have less control than you'd like :)

If the Iron Fist of Developer Justice squeezes too tightly, people
will simply route around the bottleneck with their own trees and
software releases.  genjix is already pushing for his libbitcoin
branch, for example.

> Stuff I'd like to see in the release-after-next:
>
> fClient mode (download headers only, for faster initial startup; I've
> started the work, talk to me if you want to take over)

Nice to have, but I think it's just a short term fix.  Long term, it
will be SPV clients vs. full nodes, and bringing up a full node will
be so costly that you'll just mirror the block database directly out
of band, then boot the node at 99%+ block height.

> Sipa's wallet and key export/import

Yes.  I was hoping to get that for 0.4.

> Move from wxWidgets to qt for the GUI

Not a big deal to me, I never use GUI :)

> Un-hardcode fee handling (anybody already working on this?)

Has anyone actually come up with a good idea to code?

This is a widely acknowledged problem, sure, but where are the good
solutions, even on paper?

> Everything else I consider lower priority. But if it is important to
> you, is important to other people (and non-controversial), you
> thoroughly test it, and there's zero chance it introduces a security
> vulnerability... then I'll have no objections to pulling it.
>
> Did I miss anything important? I'll create a Roadmap page on the
> bitcoin wiki if there is general consensus about priorities.

Parting shot:  there is a reason Linus specifically says there is no
roadmap for the kernel.  That's because it is always driven by the
community, and like a free market, the collective motivations and
goals of the group.

Projecting into the future, _and then attempting to stick to that
roadmap_, will end in much frustration.

Open source contributions are far more organic and unpredictable.
Roadmaps work better in fiat organizations where developers do what
they're paid/told to do :)

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From andyparkins at gmail.com  Wed Aug 10 21:13:09 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 10 Aug 2011 22:13:09 +0100
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CA+8xBpdCtYQkKwQZzZY2PsHm=+BrhD4TdoKqoAVoa7R0W9YkRw@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102032.00373.andyparkins@gmail.com>
	<CA+8xBpdCtYQkKwQZzZY2PsHm=+BrhD4TdoKqoAVoa7R0W9YkRw@mail.gmail.com>
Message-ID: <201108102213.09632.andyparkins@gmail.com>

On Wednesday 10 August 2011 20:57:29 Jeff Garzik wrote:

> > People get itches and they want to scratch them.  They aren't paid, so
> > they don't necessarilly want to turn up and be told which part they
> > _should_ be working on.  The choice is not "bug fix that Gavin wants"
> > or "new feature that New Developer wants", it is "New Feature" or
> > nothing.
> 
> This is true -- though there is value to having a list of "things we
> think people should focus on" for the motivated, and for new people
> interested in tackling a project, but not sure what project to tackle.

My objection is not that such a list exists, it is that potential new 
developers are, essentially, shouted down unless they are working on that 
list.  I cannot imagine that many new developers arrive under those 
circumstances.

> A centrally managed development branch on bitcoin/bitcoin.git is not
> the way to do it, however.  See the description of linux-next, in my
> previous email, for a more distributed method which can easily be
> layered on top of the existing bitcoin dev structure by any motivated
> volunteer(s).

I don't think I said anything about it being centrally managed.  git lets us 
store these branches anywhere of course.  The fact is that such a branch 
exists somewhere.

> Think distributed.  :)  The community does not need Linus's help
> (linux-next) or Gavin's help (bitcoin-next) to do this.  linux-next

I didn't say that it required anybody's help; but it does require a bit of 
willingess on the part of the master-branch-owning developers to import from 
that branch.

> became so widely used and useful that Linus requires almost all
> changes to be first staged in linux-next.

They key thing with linux-next is that work done on it _does_ make it into 
the kernel.  Tell me -- how many feature branches for bitcoin are just 
sitting as a pull request on github, and are now months old and abandoned 
out of disgust by their original authors?  Here's another question: why is 
it that so many projects have "specially compiled" versions of bitcoin?  
Rhetorical question... it's because the official client doesn't do what they 
need, and won't accept their patches to add it (even optionally).

I've only been watching this list for a few weeks (since the forum turned 
into an echo chamber); but I'm completely depressed by the agressive 
rejections of every new idea anyone raises.

Don't believe me?  Here's a list of ideas I've had "no, no, no"d so far; not 
one of which would have any financial implication at all.  Only some of 
which would break backward compatibility.

 - Extra bits in the service field of the version message to allow nodes
   to indicate if they are mining; if they are willing to be seed nodes;
   if they relay transactions; if they want relayed transactions.
 - getblocks in reverse chronological order so clients can start up quicker
   while downloading the blocks in the backround.  Ironically I was told 
   "patches welcome" by someone who didn't reject this one instantly.
 - Remove verack, as it's completely unnecessary.
 - Query miners for pending transactions
 - Application version separate from client version
 - A way of requesting block bodies without headers (saving a lot of traffic
   for a thin client upgrading)
 - Double SHA-256 for a packet checksum?  Seriously?
 - Sequence number as part of TxIn instead of part of the whole transaction
 - Script parameters should be stored outside the script, and reference by
   the script.  All that ridiculous filtering of the scripts in OP_CHECKSIG
   would then go away.
 - MSG_DOUBLESPEND... nope
 - getblocks to accept MSG_TX and do something sensible

Every single one of those has been shot down by one or more of the main 
developers.  I'm not a genius, and not arrogant enough to assume that 
everything I say is right, but _nothing_?  Really?  There is no problem that 
one of the above addresses?

Given that, what do I do?  Hang around and get battered some more, or go 
away to my own little corner and work on my own implementation?

You can imagine then that when I read moans about there not being enough new 
developers fixing bugs, that I am unsurprised and unsympathetic.  I like 
bitcoin enough to hover on this list; and offer a view of your world from a 
potential developer who was chased away.



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com



From jgarzik at exmulti.com  Wed Aug 10 21:35:01 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 10 Aug 2011 17:35:01 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <201108102213.09632.andyparkins@gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102032.00373.andyparkins@gmail.com>
	<CA+8xBpdCtYQkKwQZzZY2PsHm=+BrhD4TdoKqoAVoa7R0W9YkRw@mail.gmail.com>
	<201108102213.09632.andyparkins@gmail.com>
Message-ID: <CA+8xBpd9QCPt50E0VohfP8THwzf34UuT8gMtCE=gXZw1Sf0BBQ@mail.gmail.com>

On Wed, Aug 10, 2011 at 5:13 PM, Andy Parkins <andyparkins at gmail.com> wrote:
> Don't believe me? ?Here's a list of ideas I've had "no, no, no"d so far; not
> one of which would have any financial implication at all. ?Only some of
> which would break backward compatibility.

Breaking backwards compatibility means breaking people's access to
their own money.

If you remove an "unnecessary" step that existing nodes expect, then
the cost of disrupting monetary access seems higher than the value of
that breaking change.


> ?- Extra bits in the service field of the version message to allow nodes
> ? to indicate if they are mining; if they are willing to be seed nodes;
> ? if they relay transactions; if they want relayed transactions.

My own 'supernode' proposal also includes using the nServices bits.
There's nothing fundamentally incompatible or wrong about that.

> ?- Remove verack, as it's completely unnecessary.

Compatibility issues?

> ?- Query miners for pending transactions

I could see value in querying a bitcoind node over JSON-RPC for
pending transactions... and by extension, supporting that as an RPC on
various miners' pool servers.  Having a local dump of pending TX's
would be useful.

As an optional bitcoin P2P protocol command, available to anyone,
seems to negatively impact privacy.

> ?- Application version separate from client version

Consensus has already approved this one, AFAIK.

> ?- A way of requesting block bodies without headers (saving a lot of traffic
> ? for a thin client upgrading)

Do you mean headers without bodies?  Gavin wants to work on
headers-only, from what I've read, but others are welcome to
contribute patches.

> ?- Double SHA-256 for a packet checksum? ?Seriously?

Compatibility issues?

> ?- Sequence number as part of TxIn instead of part of the whole transaction

Compatibility issues?

> ?- Script parameters should be stored outside the script, and reference by
> ? the script. ?All that ridiculous filtering of the scripts in OP_CHECKSIG
> ? would then go away.

Compatibility issues?

> ?- MSG_DOUBLESPEND... nope

Does consensus want this?

> ?- getblocks to accept MSG_TX and do something sensible

Link to elaboration of use case and need?


> You can imagine then that when I read moans about there not being enough new
> developers fixing bugs, that I am unsurprised and unsympathetic. ?I like
> bitcoin enough to hover on this list; and offer a view of your world from a
> potential developer who was chased away.

Well, one unfortunate current aspect of bitcoin is...  there seem to
be problems aplenty right now :)

However demotivating it may be, keeping the current system running
must take priority over new features.

I also heartily encourage others to do something I always want to do,
but for lack of time:  work on the design for bitcoin v2 ("theme: any
breaking change is acceptable, it is a new block chain")  There you
may improve the protocol, get rid of the patent-cloudy ECDSA, use
google's protocol buffers for encoding, make the proof-of-work
algorithm memory-intensive, and other excellent, thoughtful
breaking-change suggestions that have been made.

Securing the integrity of money means that a lot of implementation
decisions have been cemented into stone, however much we may
personally dislike them.  Backwards compatibility is paramount.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Wed Aug 10 21:37:41 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 10 Aug 2011 17:37:41 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
Message-ID: <CA+8xBpcFKiYnp3+yzqhoeVvo0qiYoewqNcCUTp=kfyK-SFXeqQ@mail.gmail.com>

On Wed, Aug 10, 2011 at 5:36 AM, John Smith <witchspace81 at gmail.com> wrote:
> In the current mainline client everything is lugged into one executable
> (with an optional daemon-only one). I think this is a bad idea for various
> reasons, and would propose something like:
>
> bitcoind: bitcoin daemon
> bitcoin(-qt): bitcoin GUI executable
> bitcoincl: bitcoin RPC command line
>
> By default, all three would be built. In non-GUI mode, only bitcoind and
> bitcoincl are built (the names are obviously open for discussion).

Seems reasonable to me.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From andyparkins at gmail.com  Wed Aug 10 22:38:21 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 10 Aug 2011 23:38:21 +0100
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CA+8xBpd9QCPt50E0VohfP8THwzf34UuT8gMtCE=gXZw1Sf0BBQ@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102213.09632.andyparkins@gmail.com>
	<CA+8xBpd9QCPt50E0VohfP8THwzf34UuT8gMtCE=gXZw1Sf0BBQ@mail.gmail.com>
Message-ID: <201108102338.21680.andyparkins@gmail.com>

On Wednesday 10 August 2011 22:35:01 Jeff Garzik wrote:

> On Wed, Aug 10, 2011 at 5:13 PM, Andy Parkins <andyparkins at gmail.com> 
wrote:
> > Don't believe me?  Here's a list of ideas I've had "no, no, no"d so
> > far; not one of which would have any financial implication at all.
> >  Only some of which would break backward compatibility.
> 
> Breaking backwards compatibility means breaking people's access to
> their own money.

I wasn't actually giving a full explanation of how these things could be 
done, I was providing a list of "negatively received ideas"; imagine my 
surprise that they have been negatively received by you.

However... The version number field combined with the massive complexity of:

 if( blockNumber > 500000 )
   new_process();
 else
   old_process();

Would sort all of your "compatibility" objections out, and would give nodes 
time to upgrade.

> If you remove an "unnecessary" step that existing nodes expect, then
> the cost of disrupting monetary access seems higher than the value of
> that breaking change.

If only there were some way of sending different things to different nodes, 
based on some sort of version number field.

> >  - Remove verack, as it's completely unnecessary.
> 
> Compatibility issues?

  if( Version < VERSION_INTRODUCED )
    sendVerack();

My point is that you are a clever guy; you are perfectly capable of coming 
up with these answers, but you don't want to.  Nor does any other bitcoin 
developer.  The protocol is perfect and there is no way of changing it.

> >  - Query miners for pending transactions
> 
> I could see value in querying a bitcoind node over JSON-RPC for
> pending transactions... and by extension, supporting that as an RPC on
> various miners' pool servers.  Having a local dump of pending TX's
> would be useful.
> 
> As an optional bitcoin P2P protocol command, available to anyone,
> seems to negatively impact privacy.

Eh?  The transaction list is available on bitcoincharts.  If my node had 
been connected it would have received that list anyway when each one was 
broadcast.  What possible privacy loss could there be by making it possible 
to request it be repeated?

Again though: the detail isn't the point.  It's another half-hearted 
objection.

> >  - A way of requesting block bodies without headers (saving a lot of
> > traffic for a thin client upgrading)
> 
> Do you mean headers without bodies?  Gavin wants to work on
> headers-only, from what I've read, but others are welcome to
> contribute patches.

No; I mean being able to ask for just the block without the header.  The 
reason being that a thin client might request blocks on demand... it's 
already got the header and doesn't need it again.

The response: "it's only 80 bytes, blah, blah".  80*150000*N is a non-
trivial amount of traffic.

> >  - Double SHA-256 for a packet checksum?  Seriously?
> 
> Compatibility issues?

Only for the version message.  But it would be trivial to do both types of 
checksum on the version message, and if either is true to accept the version 
message.  After which the version is known and a much simpler checksum could 
be used for subsequent messages.  Eventually the network would be upgraded 
enough that the old way can be dropped.

Besides... hasn't TCP already got checksumming?  Let's just stop checking 
the checksum.  Or better still, stop calculating it and sending it.  Double 
SHA-256 on every single message on every single node to create four checksum 
bytes is an enormous waste of CPU.

> >  - Sequence number as part of TxIn instead of part of the whole
> > transaction
> 
> Compatibility issues?

If only there were a version field in the transaction and block structures.

Again; casual rejection.

> >  - Script parameters should be stored outside the script, and reference
> > by the script.  All that ridiculous filtering of the scripts in
> > OP_CHECKSIG would then go away.
> 
> Compatibility issues?

See above.

> >  - MSG_DOUBLESPEND... nope
> 
> Does consensus want this?

No, "consensus" doesn't.  I was simply listing all the ideas that got 
rejected out of hand.  The reason "consensus" doesn't think this one is 
necessary is because "we can already detect double spends by being widely 
connected"; ignoring the fact that a light or intermittently connected 
client would not be widely connected.  But that's okay because "eventually 
payment processors will appear".  Yep, my idea for fixing bitcoin is stupid 
because eventually someone else will mitigate it.

> >  - getblocks to accept MSG_TX and do something sensible
> 
> Link to elaboration of use case and need?

It was a few weeks ago; and it was an email from me about getblocks 
enhancements.  It was patronisingly laughed off as being something that all 
you newbie "alternative client" writers go through.

The use case is an on-demand thin client that wants to find the block that 
contains a particular transaction ID without downloading and indexing every 
single block in the chain.  Additionally, _I_ plan to separate the block 
chain and wallet executables, so much so that the wallet executable doesn't 
necessarily need a local blockchain node and relies on a partially trusted 
remote -- it still wants to be able to do spot checks on that remote, and 
confirm whatever it's told.  I would like to be able to do that using only 
commands that are in the official protocol; but I'm rapidly coming to accept 
that nothing I ask for will ever go in because there is no "use case".

> Well, one unfortunate current aspect of bitcoin is...  there seem to
> be problems aplenty right now :)

As with every project.

However, the protocol is being treated as if it is some kind of holy scroll, 
and must not be touched.  Bitcoin's ideas are revolutionary, its 
implementation is not.  If we started again today, it would be done 
differently.  Shouldn't we be trying to move the current protocol toward 
_that_ "done differently" as much as possible while bitcoin is still 
relatively small?  Rhetorical again... I know the answer, it's "no".

What exactly do the developers mean when they keep talking about bitcoin as 
"experimental"?  It seems to me they mean "incredibly conservative, with no 
changes for the rest of time".

> However demotivating it may be, keeping the current system running
> must take priority over new features.

Nothing I've suggested was to "stop the current system".  I'm not even 
asking for developers to prioritise my ideas.  I would just like mine, or 
anyone's ideas to not be instantly rejected out of hand.  I mean for 
goodness sake, even "splitting into multiple executables" has been stomped 
on in this very thread.  If something as trivial as that is "impossible" 
what chance is there that I would ever get "Change the 64-bit timestamp 
field to be microseconds since the epoch instead of seconds" in?

> I also heartily encourage others to do something I always want to do,
> but for lack of time:  work on the design for bitcoin v2 ("theme: any
> breaking change is acceptable, it is a new block chain")  There you
> may improve the protocol, get rid of the patent-cloudy ECDSA, use
> google's protocol buffers for encoding, make the proof-of-work
> algorithm memory-intensive, and other excellent, thoughtful
> breaking-change suggestions that have been made.

There is a popular idea that some other cryptocurrency will come along and 
displace bitcoin.  It's not going to happen.  Networking effects mean that 
there is no reason for people to change.  I can just see the queue around 
the block now for bitcoin.2; identical in function to bitcoin except it 
"doesn't use ECDSA and the it uses protocol buffers on the wire, and uses 
more memory".  Wow; there's a set of unique selling points.  I'll get signs 
made.

Let's be practical: technical-only improvements _have_ to be to bitcoin.1. 
Bitcoin's financial features are already complete or in progress; and it is 
financial features that would make people migrate to a competitor.  Nobody 
is going to move to bitcoin.v2 because the source code has better comments.

> Securing the integrity of money means that a lot of implementation
> decisions have been cemented into stone, however much we may
> personally dislike them.  Backwards compatibility is paramount.

I disagree about how set in stone these things are; but yeah; I've accepted 
that I'm on a loser.  My list was to demonstrate how negative the community 
is; and you have confirmed that for me admirably.  Bear that in mind the 
next time you're discussing the lack of manpower for bug fixes.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From jgarzik at exmulti.com  Thu Aug 11 02:45:36 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 10 Aug 2011 22:45:36 -0400
Subject: [Bitcoin-development] DragonFly BSD bitcoind patches
In-Reply-To: <4e3f530c.6374340a.2490.7a81@mx.google.com>
References: <4e3f530c.6374340a.2490.7a81@mx.google.com>
Message-ID: <CA+8xBpcwu0+KsT5sCYiOGS+_201rNTOc=Y6VToDW4wDwrVjcYA@mail.gmail.com>

On Sun, Aug 7, 2011 at 11:07 PM, Venkatesh Srinivas
<me at endeavour.zapto.org> wrote:
> Hi,
>
> Related to https://bitcointalk.org/index.php?topic=28022.0 ;
>
> Here are three patches that allow bitcoind to build and run on DragonFly
> BSD.
>
> 0001) bitcoind assumes a definition of BSD implies SO_NOSIGPIPE is
> available.
> This is not true on NetBSD, OpenBSD, and DragonFly.

applied

> 0002) main.cpp has: "char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };"
> Per discussion on the thread linked, leaving the signedness of
> pchMessageStart
> is unsafe for values > 0x80. This patch specifies 'unsigned char' in
> main.cpp
> and net.h.
>
> 0003) db.cpp has a number of uses of make_tuple and has 'using namespace
> std'
> and 'using namespace boost'. Without qualifying make_tuple, std::make_tuple
> is
> preferred, which is incorrect. This patch qualifies make_tuple.

Looks good at first glance.  Creating pull requests @ github for these two.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Thu Aug 11 03:20:25 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 10 Aug 2011 23:20:25 -0400
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <201108102338.21680.andyparkins@gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102213.09632.andyparkins@gmail.com>
	<CA+8xBpd9QCPt50E0VohfP8THwzf34UuT8gMtCE=gXZw1Sf0BBQ@mail.gmail.com>
	<201108102338.21680.andyparkins@gmail.com>
Message-ID: <CA+8xBpdFH0YtkKPP6hKCf3Q2+2+Lzy0hjjaGYt6y8iBDudJuDw@mail.gmail.com>

On Wed, Aug 10, 2011 at 6:38 PM, Andy Parkins <andyparkins at gmail.com> wrote:
> On Wednesday 10 August 2011 22:35:01 Jeff Garzik wrote:
>
>> On Wed, Aug 10, 2011 at 5:13 PM, Andy Parkins <andyparkins at gmail.com>
> wrote:
>> > Don't believe me? ?Here's a list of ideas I've had "no, no, no"d so
>> > far; not one of which would have any financial implication at all.
>> > ?Only some of which would break backward compatibility.
>>
>> Breaking backwards compatibility means breaking people's access to
>> their own money.
>
> I wasn't actually giving a full explanation of how these things could be
> done, I was providing a list of "negatively received ideas"; imagine my
> surprise that they have been negatively received by you.
>
> However... The version number field combined with the massive complexity of:
>
> ?if( blockNumber > 500000 )
> ? new_process();
> ?else
> ? old_process();
>
> Would sort all of your "compatibility" objections out, and would give nodes
> time to upgrade.

The above has been discussed on the forums.  The community seems to
consider that option one of last resort, because the consequences of
-not- upgrading immediately become "I cannot access my money."  The
community also seems rather hard-wired against breaking changes like
that, because it implies that we lowly dev peons are daring to mess
with the Blessed Satoshi Design that has received extensive study, and
100% communal agreement.

If the community changes its mind, and there are strong calls to make
a breaking change, we can certainly do that.  Bitcoin is not only open
source but very much democratic -- people vote by choosing which
client software to use.


> However, the protocol is being treated as if it is some kind of holy scroll,
> and must not be touched.  Bitcoin's ideas are revolutionary, its
> implementation is not.  If we started again today, it would be done
> differently.  Shouldn't we be trying to move the current protocol toward
> _that_ "done differently" as much as possible while bitcoin is still
> relatively small?  Rhetorical again... I know the answer, it's "no".

Historically speaking, the protocol has had minor tweaks, if you check
the patch history.  Adding new protocol commands is pretty easy, for
example.  Removing commands tends to be high cost for low benefit
("protocol removes a harmless redundancy"), if you're messing with the
initial negotiation sequence.  IMO verack is not redundant, anyway.

But the answer is "what do the users want" not "no"  At the end of the
day we're here to adequately reflect the needs of our userbase at all.
 And so far, the userbase seems highly conservative when it comes to
incompatible changes.  Correct me if I'm wrong...


> I disagree about how set in stone these things are; but yeah; I've accepted
> that I'm on a loser. ?My list was to demonstrate how negative the community
> is; and you have confirmed that for me admirably. ?Bear that in mind the
> next time you're discussing the lack of manpower for bug fixes.

It's negative to weight costs vs. benefits?  That is what I expect any
good engineer to do.

In any case, our -users- are not clamoring for breaking changes of the
type you describe above, as far as I can see.  Just the opposite.  So
if you want to deploy a breaking change, the burden is on you to
convince the bitcoin users and miners that it's a good idea.

If the bitcoin dev team is not accurately reflecting the desire of its
users, then that should be corrected, and we want to hear feedback.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From andyparkins at gmail.com  Thu Aug 11 05:47:34 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 11 Aug 2011 06:47:34 +0100
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CA+8xBpdFH0YtkKPP6hKCf3Q2+2+Lzy0hjjaGYt6y8iBDudJuDw@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102338.21680.andyparkins@gmail.com>
	<CA+8xBpdFH0YtkKPP6hKCf3Q2+2+Lzy0hjjaGYt6y8iBDudJuDw@mail.gmail.com>
Message-ID: <201108110647.35194.andyparkins@gmail.com>

On Thursday 11 August 2011 04:20:25 Jeff Garzik wrote:

> > However... The version number field combined with the massive
> > complexity of:
> > 
> >  if( blockNumber > 500000 )
> >   new_process();
> >  else
> >   old_process();
> > 
> > Would sort all of your "compatibility" objections out, and would give
> > nodes time to upgrade.
> 
> The above has been discussed on the forums.  The community seems to
> consider that option one of last resort, because the consequences of
> -not- upgrading immediately become "I cannot access my money."  The

Did you even read what I wrote?  "if( blockNumber > 5000000 )" is about as 
far from immediate as you can get.  I'm not an idiot; I understand we can't 
lock people out of their money simply because of a software upgrade.  It's 
not unreasonable to expect people will have upgraded by block 500000 though 
(or whatever number the community decided upon).

Again you're missing my point... you are still shooting ideas down.

> community also seems rather hard-wired against breaking changes like
> that, because it implies that we lowly dev peons are daring to mess
> with the Blessed Satoshi Design that has received extensive study, and
> 100% communal agreement.

Well the community had better unhardwire itself or its going to end up with 
five developers and no more.

> If the community changes its mind, and there are strong calls to make
> a breaking change, we can certainly do that.  Bitcoin is not only open
> source but very much democratic -- people vote by choosing which
> client software to use.

Voting with ones feet should be a last resort.  Wouldn't it be better not to 
end up with incompatible clients out there?

> Historically speaking, the protocol has had minor tweaks, if you check
> the patch history.  Adding new protocol commands is pretty easy, for
> example.  Removing commands tends to be high cost for low benefit
> ("protocol removes a harmless redundancy"), if you're messing with the
> initial negotiation sequence.  IMO verack is not redundant, anyway.

Client: I speak version 10
Server: hmmm, I don't speak version 10, I only speak version 5
Client: I am willing to lower to version 5 so I shall continue

or

Client: I speak version 10
Server: hmmm, I don't speak version 10, I only speak version 5
Client: I am unwilling to lower to version 5 so I shall hang up

or

Client: I speak version 5
Server: hmmm, I speak version 10, but I am willing to speak version 5

or

Client: I speak version 5
Server: hmmm, I speak version 10, and I am unwilling to speak version 5
        so I shall hang up

'verack' is redundant.  It sends no information and merely says that the 
other end is willing to continue.  Willing to continue is easily determined 
when the remote continues.  Handling 'verack' is an annoyance, and adds 
nothing.

> But the answer is "what do the users want" not "no"  At the end of the
> day we're here to adequately reflect the needs of our userbase at all.
>  And so far, the userbase seems highly conservative when it comes to
> incompatible changes.  Correct me if I'm wrong...

Please point me at a single incompatible change that has been rejected by 
the userbase.

Further: I'm not suggesting incompatible changes alone; that would be 
insane.  I'm suggesting upgrade paths that delay incompatible changes until 
the change has propagated.

> It's negative to weight costs vs. benefits?  That is what I expect any
> good engineer to do.

I don't think that's what's happening.  Not once have I seen the "benefits" 
side of that equation.  What I have seen is plenty of "I can't see a use 
case for that"; when the key word in that sentence is "I".

> In any case, our -users- are not clamoring for breaking changes of the
> type you describe above, as far as I can see.  Just the opposite.  So
> if you want to deploy a breaking change, the burden is on you to
> convince the bitcoin users and miners that it's a good idea.

The users aren't typically going to be familiar enough with the internals of 
bitcoin to care about many of the changes I suggested.  I have repeatedly 
said I don't want to break anything, I want to transition in an orderly 
fashion (and the majority of my suggestions were backward compatible).  But 
of course, I don't actually want to do anything with bitcoind itself, it's 
been made repeatedly clear to me that anything I might ask for is not going 
to happen -- and of course what I was pointing out, _not_ asking for, was 
that you can't expect to get new developers on board if they aren't going to 
be allowed to scratch their itches.

> If the bitcoin dev team is not accurately reflecting the desire of its
> users, then that should be corrected, and we want to hear feedback.

You've just had some.  The response was "you're wrong".



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com



From bitcoin-list at bluematt.me  Thu Aug 11 08:48:09 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 11 Aug 2011 10:48:09 +0200
Subject: [Bitcoin-development] Roadmap/schedules
In-Reply-To: <CA+8xBpeuzO9+BWZtgpR8h2rSRdB-gQYjq9pyKnbxgBHDX=UnZg@mail.gmail.com>
References: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
	<CA+8xBpeuzO9+BWZtgpR8h2rSRdB-gQYjq9pyKnbxgBHDX=UnZg@mail.gmail.com>
Message-ID: <1313052489.20348.5.camel@BMThinkPad.lan.bluematt.me>

> > 3. Wallet security.  I'd like to get Matt's wallet encryption shipped
> > soon, along with all or part of groffer's Multisign patch (#319 --
> > since that will enable the creation of trojan-resistant secure wallet
> > solutions).
> 
> IMO the only thing lacking is docs.  There is no real admin guide
> describing how to prepare bitcoind installations for encryption;
> doc/README does not mention RPC encryptwallet at all, nor does it
> describe the various states your wallet may be in, when before and
> after encryptwallet has been run.  The information is very general,
> and not adequate for a competent admin to be able to evaluate.  It
> does not describe encryption method or other security parameters.  It
> does not describe the specific technical relationship between the
> master key and other keys.
My fault, Ill write something up on the train back today.
> 
> > 5. Testing. I don't have time to personally test every PULL request,
> > but if a pull involves more than trivial code changes I'm not going to
> > pull it unless it has been thoroughly tested.  We had a very good rule
> > at a company I used to work for-- programmers were NOT allowed to be
> > the only ones to test their own code. Help finding money and/or people
> > for a dedicated "core bitcoin quality assurance team" is welcome.
> > More unit tests and automated testing is also certainly welcome.
> 
> I think Q/A will naturally grow out of some sort of dedicated support
> organization, rather than have a dev fiat requirement.  Testing like
> that is always desireable in the "I'd love it, if it were this way"
> vein, but not always realistic at all for open source projects.
> Especially with open source, time has shown that the best testing
> comes from the field, and we have the biggest test lab in the world:
> the Internet.  So IMO focus less on roadblocks to publishing software,
> and more on widely distributed test software.
> 
> For new features, simple "it works" test at a minimum seems
> reasonable, most of the time.  But in open source the testing and such
> tends to happen in the periphery, by organizations and individuals
> with the incentive to focus on those issues.
> 
> In my recent emails describing linux-next and a proposed
> "bitcoin-next", one attribute of linux-next is that it is run through
> automated tests on a daily basis, right after the merge is complete.
> It forms a useful layer on top of the primary linux project & tree.
Jenkins + a large enough test suite could do very nice automatic sanity
testing IMHO...that is what it is designed for (even if not to
automatically test pre-merge, but it could be adapted).  Many pull
requests build on Linux, but not on MinGW, OSX, etc so just that would
be useful IMHO.
> Not a big deal to me, I never use GUI :)
> 
> > Un-hardcode fee handling (anybody already working on this?)
> 
> Has anyone actually come up with a good idea to code?
> 
> This is a widely acknowledged problem, sure, but where are the good
> solutions, even on paper?
Sipa's stuff is quite good IMHO, it still has some problems left to
solve (like choosing minor details of the underlying priority algorithm)
but aside from those, I think it could work.  I'm not sure if sipa wants
to just publish the stuff he did so far and let this list debate on the
remaining details and eventual implementation, or if he wanted to come
up with something complete before publishing, it up to him, but it is
doable.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/58746a63/attachment.sig>

From joel.kaartinen at gmail.com  Thu Aug 11 11:45:30 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Thu, 11 Aug 2011 14:45:30 +0300
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <201108110647.35194.andyparkins@gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102338.21680.andyparkins@gmail.com>
	<CA+8xBpdFH0YtkKPP6hKCf3Q2+2+Lzy0hjjaGYt6y8iBDudJuDw@mail.gmail.com>
	<201108110647.35194.andyparkins@gmail.com>
Message-ID: <1313063130.18196.154.camel@mei>

On Thu, 2011-08-11 at 06:47 +0100, Andy Parkins wrote:
> Again you're missing my point... you are still shooting ideas down.

And you're only shooting his actions down without indicating clearly
what you think ought to be done instead. What do you want him to say
instead?

> > community also seems rather hard-wired against breaking changes like
> > that, because it implies that we lowly dev peons are daring to mess
> > with the Blessed Satoshi Design that has received extensive study, and
> > 100% communal agreement.
> 
> Well the community had better unhardwire itself or its going to end up with 
> five developers and no more.

No way that will happen. A fork is going to happen sooner rather than
later if this continues. It'd be great if it could be done within this
project and named bitcoin-dev or bitcoin-next or similar.

If this is not done, I wouldn't be surprised with the network splitting
into 2 camps with different protocols but still working on the same
blockchain.

> > If the community changes its mind, and there are strong calls to make
> > a breaking change, we can certainly do that.  Bitcoin is not only open
> > source but very much democratic -- people vote by choosing which
> > client software to use.
> 
> Voting with ones feet should be a last resort.  Wouldn't it be better not to 
> end up with incompatible clients out there?

There's no way to get the majority to vote with their feet to move to an
incompatible client. Not immediately anyway. It can happen gradually
though.

As in: 1) alternative client is published that is compatible but
extended. 2) this client gets the majority share of users/miners 3) they
see this and decide to break compatibility. 4) original bitcoin client
is now incompatible/history.

> > It's negative to weight costs vs. benefits?  That is what I expect any
> > good engineer to do.
> 
> I don't think that's what's happening.  Not once have I seen the "benefits" 
> side of that equation.  What I have seen is plenty of "I can't see a use 
> case for that"; when the key word in that sentence is "I".

What is happening here is that most suggestions you point at have been
discussed about before and so the "early adopter" developers remember
that a decision about that was made already. However, the problem here
lies with the fact that it's difficult to find the previous
conversations.

If there was a section in the wiki for recording past suggestions, there
would be no need to say 'no'. You could instead say "We have discussed
this before, please read..." and give them a link to the page with the
relevant discussion. Of course, this would require actively forwarding
people to the wiki for discussions and having them there. I think this
would be a good idea.

That would leave this list for discussing and coordinating the
implementation of the changes that have been agreed on.

For things that have already been discussed, you could try to find the
previous discussion and add it there. But I expect for some things, new
discussion needs to be had to get it on the wiki.

- Joel




From mike at plan99.net  Thu Aug 11 11:56:34 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 11 Aug 2011 13:56:34 +0200
Subject: [Bitcoin-development] Roadmap/schedules
In-Reply-To: <1312995554.17416.22.camel@BMThinkPad.lan.bluematt.me>
References: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
	<1312995554.17416.22.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CANEZrP35RKSGmAOiqp=fm2z97u+njGsOaPC0ttWXYfki6chR=g@mail.gmail.com>

> they don't look good (I show about 3x as many 0.3.23 nodes listening as
> 0.3.24

*cough* Upgrade alerts.

> Very much needed, didn't TD say something about a friend who wanted to
> do research in this area?

I don't know if he'll actually do anything. Best assume this
"position" is still open.

>> 2. We've got a chronic problem with new code causing CRITICAL_SECTION
>> deadlocks

I've seen locks that track ordering relative to other locks and assert
when they are locked out of order.

Though it's not inversion related, running ThreadSanitizer might help
find other thread safety issues:

http://code.google.com/p/data-race-test/wiki/ThreadSanitizer



From decker.christian at gmail.com  Thu Aug 11 12:01:33 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 11 Aug 2011 14:01:33 +0200
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <1313063130.18196.154.camel@mei>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102338.21680.andyparkins@gmail.com>
	<CA+8xBpdFH0YtkKPP6hKCf3Q2+2+Lzy0hjjaGYt6y8iBDudJuDw@mail.gmail.com>
	<201108110647.35194.andyparkins@gmail.com>
	<1313063130.18196.154.camel@mei>
Message-ID: <CALxbBHXRq0dF7-=nmQn==t+6HiimRRF=oOOX8RQxaVhXsZS6mQ@mail.gmail.com>

On Thu, Aug 11, 2011 at 1:45 PM, Joel Joonatan Kaartinen <
joel.kaartinen at gmail.com> wrote:

> On Thu, 2011-08-11 at 06:47 +0100, Andy Parkins wrote:
> > Again you're missing my point... you are still shooting ideas down.
>
> And you're only shooting his actions down without indicating clearly
> what you think ought to be done instead. What do you want him to say
> instead?
>
> > > community also seems rather hard-wired against breaking changes like
> > > that, because it implies that we lowly dev peons are daring to mess
> > > with the Blessed Satoshi Design that has received extensive study, and
> > > 100% communal agreement.
> >
> > Well the community had better unhardwire itself or its going to end up
> with
> > five developers and no more.
>
> No way that will happen. A fork is going to happen sooner rather than
> later if this continues. It'd be great if it could be done within this
> project and named bitcoin-dev or bitcoin-next or similar.
>
I personally would welcome alternative clients as a vulnerability in the
main client right now has the potential to kill the entire network.

>
> If this is not done, I wouldn't be surprised with the network splitting
> into 2 camps with different protocols but still working on the same
> blockchain.
>
Changes to the protocol are hard, mainly because hashes of packets are used
to identify transactions and blocks, and even the target hash is a hash of a
packet.
As for your proposal to eliminate some parts of the protocol, I have to
agree (the magic bytes seem an ugly hack by satoshi as I discussed with
Mike, and the double SHA256 hashes as checksums are incredibly wasteful, and
seem to have been chosen simply because a double hashing was already
implemented).

>
> > > If the community changes its mind, and there are strong calls to make
> > > a breaking change, we can certainly do that.  Bitcoin is not only open
> > > source but very much democratic -- people vote by choosing which
> > > client software to use.
> >
> > Voting with ones feet should be a last resort.  Wouldn't it be better not
> to
> > end up with incompatible clients out there?
>
> There's no way to get the majority to vote with their feet to move to an
> incompatible client. Not immediately anyway. It can happen gradually
> though.
>
> As in: 1) alternative client is published that is compatible but
> extended. 2) this client gets the majority share of users/miners 3) they
> see this and decide to break compatibility. 4) original bitcoin client
> is now incompatible/history.
>
Changes should be implemented with backward compatibility in mind, even if
it restricts the freedom of what can be changed.

>
> > > It's negative to weight costs vs. benefits?  That is what I expect any
> > > good engineer to do.
> >
> > I don't think that's what's happening.  Not once have I seen the
> "benefits"
> > side of that equation.  What I have seen is plenty of "I can't see a use
> > case for that"; when the key word in that sentence is "I".
>
> What is happening here is that most suggestions you point at have been
> discussed about before and so the "early adopter" developers remember
> that a decision about that was made already. However, the problem here
> lies with the fact that it's difficult to find the previous
> conversations.
>
> If there was a section in the wiki for recording past suggestions, there
> would be no need to say 'no'. You could instead say "We have discussed
> this before, please read..." and give them a link to the page with the
> relevant discussion. Of course, this would require actively forwarding
> people to the wiki for discussions and having them there. I think this
> would be a good idea.
>
Having a Wiki or a single Wikipage to list proposed changes, with all pro
and cons, maybe pointing back to the original discussion would be nice. But
don't forget that situations change, and features that have been shot down
way back might become reachable/desirable at a later time, so please don't
just use it as a method to shoot down ideas, but as a way to bring people up
to speed and, if necessary, continue the discussion where it left.

>
> That would leave this list for discussing and coordinating the
> implementation of the changes that have been agreed on.
>
> For things that have already been discussed, you could try to find the
> previous discussion and add it there. But I expect for some things, new
> discussion needs to be had to get it on the wiki.
>
> - Joel
>
- cdecker
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/b83f0dee/attachment.html>

From mike at plan99.net  Thu Aug 11 12:11:29 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 11 Aug 2011 14:11:29 +0200
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <201108102213.09632.andyparkins@gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102032.00373.andyparkins@gmail.com>
	<CA+8xBpdCtYQkKwQZzZY2PsHm=+BrhD4TdoKqoAVoa7R0W9YkRw@mail.gmail.com>
	<201108102213.09632.andyparkins@gmail.com>
Message-ID: <CANEZrP16NhS=4rqKcqBBqdDzd7XbDR_aXudBeq-_51ddmcLd_w@mail.gmail.com>

I don't think Gavin misunderstands how open source works at all. It's
completely normal for project maintainers to say "no" more often than
they say "yes". When I worked on open source for a living this was
part of the natural flow of things.

It's important to understand that ideas which receive "maybe" or "yes
but later" or "no unless you convince me" or "perhaps in a different
way" are not being shot down. These answers are requests for more work
to be done. You *cannot* get emotional about open source contributions
and any veteran will tell you this. Open source maintainers cannot and
do not say yes to every patch or idea that is proposed. I would be
very worried if Gavin did.

Now let's review these ideas:

> Don't believe me? ?Here's a list of ideas
>
> ?- Extra bits in the service field of the version message to allow nodes
> ? to indicate if they are mining; if they are willing to be seed nodes;
> ? if they relay transactions; if they want relayed transactions.

I think the concept is reasonable but service flags might not be the
best way to do it, for instance, asking for a filtered transaction
feed is useful for lightweight clients so you'd want more precision
that can be fit into service bits.

> ?- getblocks in reverse chronological order so clients can start up quicker
> ? while downloading the blocks in the backround. ?Ironically I was told
> ? "patches welcome" by someone who didn't reject this one instantly.

I already told you this won't help startup time because you have to
connect blocks together in sequence. You can't build up the block
chain backwards unless you don't care about validation at all.

> ?- Query miners for pending transactions

Or just have them send an inv containing them after connect. I don't
remember this one being "shot down".

> ?- Application version separate from client version

You mean separate from protocol version, right?

> ?- A way of requesting block bodies without headers (saving a lot of traffic
> ? for a thin client upgrading)

The cost/benefit ratio of this one isn't obvious at all. The resource
requirements for running a full node are large enough that
re-downloading 80 bytes per block is the least of your worries if
you're upgrading.

> ?- Double SHA-256 for a packet checksum? ?Seriously?

Feel free to submit a patch to disable checksum validation and see if
Gavin accepts it. It needs to still be calculated at send time for
other implementations.

> ?- Sequence number as part of TxIn instead of part of the whole transaction

Sequence numbers are already part of the tx inputs. Or do you mean
they should be part of the whole transaction? If the latter then this
is indeed an idea that will be shot down, it's deliberate that seqnums
are part of the txinputs and it needs to be that way for contracts. It
can't be changed without forking the protocol anyway.

> Every single one of those has been shot down by one or more of the main
> developers. ?I'm not a genius, and not arrogant enough to assume that
> everything I say is right, but _nothing_? ?Really? ?There is no problem that
> one of the above addresses?

Some of your proposals address problems that need to be solved, but
it's not clear that way is the right way to solve them. Others reflect
either lack of understanding of the system or the fact that you don't
value backwards compatibility whereas other people do.



From witchspace81 at gmail.com  Thu Aug 11 12:19:45 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 11 Aug 2011 12:19:45 +0000
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CABsx9T059A+RtJ-Mc8XCX6m3dyF23WZ5jraBLGt1=hvSGn14kg@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
	<20110810104316.GA30749@ulyssis.org>
	<CAJNQ0ssWeU2vgR8XmCyGiZ3UHPv=zjLZEKVM=gqP0ozSC7Wmiw@mail.gmail.com>
	<CAJNQ0stkZ=iBCJA7E5+LZToe2MjEJnhqWoiUtLcqTGPygSikiA@mail.gmail.com>
	<CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>
	<CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
	<CABsx9T059A+RtJ-Mc8XCX6m3dyF23WZ5jraBLGt1=hvSGn14kg@mail.gmail.com>
Message-ID: <CAJNQ0st4tp83=Dov5phi24jA+4h+qcbgRRTnkRVa00ys_LV+YA@mail.gmail.com>

On Wed, Aug 10, 2011 at 6:41 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

>
> Well, to be honest I don't think more developers adding new features
> are needed right now-- I think the project's critical needs are more
> people testing and helping to fix bugs and scalability issues.
>

I do think to be an successful open source project we need more developers
and more features. Activity is very important, it is kind of the lifeblood.
Yes, a project will generally become more stable and slow in time as it
nears "perfection" (or at least, a local optimum) but the current source is
*far* from that.

Yes -- bugs and scalability issues need to be addressed, but this will be a
lot easier if some underlying problems are solved. And if we ignore the end
users, they may run away and it becomes a pointless exercise.

Taking the "long view" this includes build system, handling of
threads/concurrency, modularization, pluggable DB and storage back-ends,
separating the system into multiple "locked-down" processes, and so on.
This can all be done while remaining P2P-compatible for as long as possible
(we have versioning, don't we?).

My proposal with multiple branches was about looking at the long view as
well as the immediate firefighting.  Yes, some changes might be riskier than
others, but we can't just cargo-cult Satoshi's work forever... so with
multiple branches, people can choose whether they have the balls to try
something newer or just want to run the older version with the issues they
know and love.

It's better to be open. Look at Open Office, it only started to un-stagnate
when it was forked out of Oracle's stranglehold. People want to work on
these things, so why not?

Until this is addressed, developers will prefer creating their own fork or
even alternative client. After this UI stuff is handled I'll probably join
up with one of them.

> In this particular case, I said I was mildly against it-- if you want
> me to switch to supporting it, then reassure me you're willing to do
> ALL the work to make it happen.  Send me a list of wiki pages you'll
> edit to document the change and tell me that you'll be around to help
> people rewrite their backup scripts.

IMO this should have been your first reply, instead of first discourgaging
me from doing it. Just make a list of what needs to be done.

But I won't bother anymore... Let's just keep lumping everything in one
executable. It's the Satoshi way.

On Wed, Aug 10, 2011 at 7:32 PM, Andy Parkins <andyparkins at gmail.com> wrote:
> Of course, nothing forces existing developers to accept these new
features;
> but the incredibly negative attitude on display when any new feature is
> suggested is not the way to grow a community.  The correct way is a
> mentoring attitude -- offering opinions on how a new developer can get
their
> idea in rather than telling them why it will never happen.

Exactly. My gripe is more about the negative attitude then anything else.
The focus is always on the negative sides of every proposal, a bit of a
climate of fear.

I've had an employer that worked in the same way. Eternally hammering on
"stability" the codebase, hiring 100's of extra developers, all firefighting
and fixing immediate issues with "priority", the code became a minefield.
Even with 8 hours of testcases, the overall structure of the code caused so
many issues that customers feared every new release more. A classic negative
feedback loop.

I understand where it is coming from, many people just come and dump their
"ideas" and never implement a line of code. But if people are actually
proposing to implement something, or implemented it, they should IMO be
given the benefit of the doubt. Not all outside ideas are bad.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/107ac309/attachment.html>

From pieter.wuille at gmail.com  Thu Aug 11 13:08:45 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 11 Aug 2011 15:08:45 +0200
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CAJNQ0st4tp83=Dov5phi24jA+4h+qcbgRRTnkRVa00ys_LV+YA@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<1312971289.3253.6.camel@BMThinkPad.lan.bluematt.me>
	<20110810104316.GA30749@ulyssis.org>
	<CAJNQ0ssWeU2vgR8XmCyGiZ3UHPv=zjLZEKVM=gqP0ozSC7Wmiw@mail.gmail.com>
	<CAJNQ0stkZ=iBCJA7E5+LZToe2MjEJnhqWoiUtLcqTGPygSikiA@mail.gmail.com>
	<CABsx9T0Yvssr04AeT3B8+Gj43hV=P0Uw6M0f+NBNygnAyruQ4A@mail.gmail.com>
	<CAJNQ0stfYFN2YCGq-be5D-XW+81ZkVVM_jHHonSy2OHsNyN1Cw@mail.gmail.com>
	<CABsx9T059A+RtJ-Mc8XCX6m3dyF23WZ5jraBLGt1=hvSGn14kg@mail.gmail.com>
	<CAJNQ0st4tp83=Dov5phi24jA+4h+qcbgRRTnkRVa00ys_LV+YA@mail.gmail.com>
Message-ID: <20110811130844.GA24003@ulyssis.org>

On Thu, Aug 11, 2011 at 12:19:45PM +0000, John Smith wrote:
> > In this particular case, I said I was mildly against it-- if you want
> > me to switch to supporting it, then reassure me you're willing to do
> > ALL the work to make it happen.  Send me a list of wiki pages you'll
> > edit to document the change and tell me that you'll be around to help
> > people rewrite their backup scripts.
> 
> IMO this should have been your first reply, instead of first discourgaging
> me from doing it. Just make a list of what needs to be done.
> 
> But I won't bother anymore... Let's just keep lumping everything in one
> executable. It's the Satoshi way.

I think there are a lot of misunderstandings here. Given your clarification
that you simply wanted to remove the RPC client from the gui/daemon executable,
I'm all for it. If I reread the answers, there is only "mild against" and a "no"
that was based on a partial misunderstanding.

Somehow it seems that many discussions in which some negative remarks were made
just die out, and the person originally suggesting it takes this as a "shot
down". Maybe (and that includes myself) we should be more outspoken about ideas
we do like.

As for the rest of this thread: i think some dev branch (either something
linux-next like, or a separate official branch, or something else) is indeed
very needed. The main tree should definitely be dealt with in a conservative
way, but it's hard to make progress if you know that every patch that does
some internal changes will need many rebasings and maintainance before it's
actually merged and finally tested by some larger user base.

Considering the issue of backward incompatible changes to the protocol: there is
no denying that there are some serious deficiencies now (double sha256 checksums,
the handling of the data being signed) and redundant things (magic bytes, verack).

Yes, it is true that we could change these in the future with a (nBlocks >= X)
test, but that would still mean you carry around both the old and the new code
until at least block height X. Additionally, if you get another (better) idea
that supercedes it somewhere between now and block X, you're still forced to
first switch to the intermediate one, as some clients may not have upgraded...

This is not to say this isn't an option we should consider, but for now, it just
doesn't seem worth the hassle to me. There may come a day where we absolutely
need a change to the protocol, and when we do, maybe it is time to fix all these
"known and agreed upon defficiencies". It's definitely useful to discuss these,
and in the context of "for when we do an incompatible change", no "breaks backward
compatibility!" argument is valid. I'm in favor of wiki page where these are listed,
together with pro and cons.

-- 
Pieter



From pieter.wuille at gmail.com  Thu Aug 11 13:50:54 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 11 Aug 2011 15:50:54 +0200
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
Message-ID: <CAPg+sBjrq5NG8wavwfpcGLLO2rmY8xLo+BNhDygFU1TS59h-JQ@mail.gmail.com>

On Wed, Aug 10, 2011 at 11:36, John Smith <witchspace81 at gmail.com> wrote:
> All,
>
> In the current mainline client everything is lugged into one executable
> (with an optional daemon-only one). I think this is a bad idea for various
> reasons, and would propose something like:
>
> bitcoind: bitcoin daemon
> bitcoin(-qt): bitcoin GUI executable
> bitcoincl: bitcoin RPC command line

Back on topic:

I initially misunderstood your proposal. Let me reformulate, and
suggest some names:
* bitcoin-gui (or bitcoin-qt): always starts GUI, optionally starts
RPC server, no RPC client
* bitcoin-server: always starts RPC server, no RPC client, no GUI
* bitcoin-client: always runs RPC client, no RPC server, no GUI

Additionally, we could offer a script or symlinked executable with
names "bitcoin" and
"bitcoind" that detect whether RPC commands are present on the command line, and
based on this invoke either bitcoin-server/bitcoin-gui or
bitcoin-client (for backward
compatibility).

-- 
Pieter



From andyparkins at gmail.com  Thu Aug 11 13:51:04 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 11 Aug 2011 14:51:04 +0100
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <CANEZrP16NhS=4rqKcqBBqdDzd7XbDR_aXudBeq-_51ddmcLd_w@mail.gmail.com>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108102213.09632.andyparkins@gmail.com>
	<CANEZrP16NhS=4rqKcqBBqdDzd7XbDR_aXudBeq-_51ddmcLd_w@mail.gmail.com>
Message-ID: <201108111451.09296.andyparkins@gmail.com>

On 2011 August 11 Thursday, Mike Hearn wrote:
> I don't think Gavin misunderstands how open source works at all. It's
> completely normal for project maintainers to say "no" more often than
> they say "yes". When I worked on open source for a living this was
> part of the natural flow of things.

That wasn't the part I said he didn't understand.  It was assuming that you 
can just declare that people should work on bug fixes and not features was a 
misunderstanding.  People work on open source (at least at first) to get a 
feature they want.  They aren't just going to show up and cry "command me 
lord".

> It's important to understand that ideas which receive "maybe" or "yes
> but later" or "no unless you convince me" or "perhaps in a different
> way" are not being shot down. These answers are requests for more work
> to be done. You *cannot* get emotional about open source contributions
> and any veteran will tell you this. Open source maintainers cannot and
> do not say yes to every patch or idea that is proposed. I would be
> very worried if Gavin did.

I don't expect them to; as I said, I'm not after everything I say being 
accepted out of hand, certainly as I haven't even turned up with patches.  And 
you are absolutely correct that that would be worrying if it were so.  What I 
object to is no guidance is offered to get the suggester what they want, a 
"you could have this if you did it like this", or "perhaps if you explained a 
bit more".  It's just "no, your idea is based on your weak understanding of 
bitcoin," perhaps I'm being overly arrogant, but I think I understand it a lot 
more than you presume I do.

I do try not to get emotional about these things; and email is not the best 
medium for conveying level of distress -- I'm certainly not banging on my 
keyboard, close to a heart attack.  My motivation is only that I would like to 
see bitcoin do well, and I do see that the treatment of potential new people, 
while not offensive (nobody says f*ck off), is not encouraging.

> Now let's review these ideas:

Honestly you needn't have bothered.  They've been reviewed to death at this 
point; and I'm not that interested in fighting to get them into a project that 
doesn't want them.  I'll just play with my bricks over in the corner if that's 
okay?  I offered the list as a demonstration that ideas don't get constructive 
help as to how progress can be made on them (i.e. how to make them 
acceptable), they just get rejected.

Anyway; as you've put the time in, I'll do the same and respond.

> > Don't believe me?  Here's a list of ideas
> > 
> >  - Extra bits in the service field of the version message to allow nodes
> >   to indicate if they are mining; if they are willing to be seed nodes;
> >   if they relay transactions; if they want relayed transactions.
> 
> I think the concept is reasonable but service flags might not be the
> best way to do it, for instance, asking for a filtered transaction
> feed is useful for lightweight clients so you'd want more precision
> that can be fit into service bits.

The service bits just seemed like the "bitcoin way" as the field already 
existed.  Personally I would prefer an additional "capabilities" request with 
a variable number of ASCII strings in it, each indicating a capability, and if 
that's good with all of you -- excellent.

> >  - getblocks in reverse chronological order so clients can start up
> > quicker while downloading the blocks in the backround.  Ironically I was
> > told "patches welcome" by someone who didn't reject this one instantly.
> 
> I already told you this won't help startup time because you have to
> connect blocks together in sequence. You can't build up the block
> chain backwards unless you don't care about validation at all.

I know you "told me this", but I think you are wrong.  This is an example of 
the problem I'm trying to get across -- I see things differently; but rather 
than try and either fix my misunderstanding or see what I'm trying to achieve, 
it's rejected.

I've already got it well on its way to being implemented is how I know you are 
wrong.  It's perfectly possible to validate backwards because you are 
constructing a coherent chain based on an unvalidated start point.  You then 
request the parent block and either (a) you finally reach the genesis block, 
you have reached a hard-coded valid point and the entire chain is therefore 
instantly validated or (b) you have a new start block, floating but validated 
to be part of the chain, if not absolutely validated.  Further, with some 
checkpoints hard coded you don't even need to reach the genesis block to get a 
validated chain.  The body of a block obviously can't be faked because of the 
Merkle hash.

And finally... who says I care about validation?  Perhaps I plan a situation 
where I implicitly trust the peer I'm talking to (which is exactly what I do 
plan).  "There are more things in heaven and earth, Horatio, than are dreamt 
of in your philosophy".

> >  - Query miners for pending transactions
> 
> Or just have them send an inv containing them after connect. I don't
> remember this one being "shot down".

I was told it had severe privacy implications; and you told me that it would 
be better to wait for some sort of filtering system that was planned, which 
I'd not heard of.  I admit it wasn't exactly clear to me how what you 
described helped with my suggestion.  Your suggestion here is a good 
alternative; but wouldn't it waste bandwidth?  After all a receving node has 
no idea whether I have been connected to another node for 24 hours before I 
connect to it, and hence wouldn't need the list.

> >  - Application version separate from client version
> 
> You mean separate from protocol version, right?

Yep.  I can well imagine that when alternative clients start appearing, some 
will have bugs.  It will be very handy to either work around those bugs or 
simply deny version 1.4.17 of "Andy's Sexy Bitcoin Client" from connecting.  
Even just for monitoring network state it's useful.  There is already talk, I 
see, of establishing how much of the network runs each released bitcoin 
version.

> >  - A way of requesting block bodies without headers (saving a lot of
> > traffic for a thin client upgrading)
> 
> The cost/benefit ratio of this one isn't obvious at all. The resource
> requirements for running a full node are large enough that
> re-downloading 80 bytes per block is the least of your worries if
> you're upgrading.

The benefit I'm aiming at is to imagine a thin client that has done a fast 
startup and only downloaded the headers.  Then, it has a finite number of 
addresses it's interested in and wants to grab only the relevant bodies from 
the full chain.  Or, fast startup is to grab all the headers, and then slowly 
grab the transactions from the blocks.

The cost is

 if( !bodyOnly )
   sendHeader();
 sendBody();

I can't say I'm that invested in it; but it was another one for the list of 
"well I don't see what use that is" responses.

> >  - Double SHA-256 for a packet checksum?  Seriously?
> 
> Feel free to submit a patch to disable checksum validation and see if
> Gavin accepts it. It needs to still be calculated at send time for
> other implementations.

I do feel free to write any patch I like.  It's such a trivial patch though, 
that I feel certain you are being faceitous, knowing full well that it 
wouldn't be accepted.  I'm trying to look five years in the future.  I'm not 
suggesting it be turned off now -- that's impossible and I'm not an idiot.  
I'm trying to think of what the protocol should be and have a way of moving to 
that.

The patch that is needed then is the one that makes the change gracefully.

> >  - Sequence number as part of TxIn instead of part of the whole
> > transaction
> 
> Sequence numbers are already part of the tx inputs. Or do you mean
> they should be part of the whole transaction? If the latter then this
> is indeed an idea that will be shot down, it's deliberate that seqnums
> are part of the txinputs and it needs to be that way for contracts. It
> can't be changed without forking the protocol anyway.

The sequence number (and perhaps I've misunderstood) allows me to replace a 
transaction I've already submitted.  I can't replace just one of the inputs, I 
have to replace the whole transaction.  It's therefore the transaction that 
should have the sequence number.  A signed transaction received with a higher 
sequence number should displace a lower one.

I'm happy to accept that I have missed the use of the current sequence numbers 
in contracts.  (To be fair, the wiki says "Transaction version as defined by 
the sender. Intended for "replacement" of transactions when information is 
updated before inclusion into a block.")

Perhaps putting it in TxIn was because no one thought of having 
OP_PUSH_SEQUENCENUMBER as a script operator.

> > Every single one of those has been shot down by one or more of the main
> > developers.  I'm not a genius, and not arrogant enough to assume that
> > everything I say is right, but _nothing_?  Really?  There is no problem
> > that one of the above addresses?
> 
> Some of your proposals address problems that need to be solved, but
> it's not clear that way is the right way to solve them. Others reflect
> either lack of understanding of the system or the fact that you don't
> value backwards compatibility whereas other people do.

Of the above, only one could be lack of understanding (txIn).

As to not valuing backward compatibility -- I certainly do.  That shouldn't be 
used as an excuse to freeze the protocol forever.  There are version fields in 
there, sensibly so; they should be used to fix problems.   As I said a few 
times, the incompatible changes don't have to activate straight away, they can 
be delayed using the block number.  Make it a block number four years away if 
you want, but the sooner those changes go in (whatever they may be), the more 
likely it is you'll get the majority of the network to change over.  And once 
the alternative clients start appearing, the opportunity is gone -- if it's 
hard to get one client to change, imagine how hard it will be to change five.

As I said above though, I don't want these fights.  I know full well that what 
I want is not what you all want as far as client ideas go.  I only started 
this response because I thought Gavin's "we don't want new developers for new 
features, we want bug fixes" was a bit of a foolish thing to say.




Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/18c8c85d/attachment.sig>

From andyparkins at gmail.com  Thu Aug 11 14:04:22 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 11 Aug 2011 15:04:22 +0100
Subject: [Bitcoin-development] Change to multiple executables?
In-Reply-To: <1313063130.18196.154.camel@mei>
References: <CAJNQ0sudgAnr9hMUMt8grSNTYswunyNnp25Uzw5t17ucxTBoGA@mail.gmail.com>
	<201108110647.35194.andyparkins@gmail.com>
	<1313063130.18196.154.camel@mei>
Message-ID: <201108111504.22851.andyparkins@gmail.com>

On 2011 August 11 Thursday, Joel Joonatan Kaartinen wrote:
> On Thu, 2011-08-11 at 06:47 +0100, Andy Parkins wrote:
> > Again you're missing my point... you are still shooting ideas down.
> 
> And you're only shooting his actions down without indicating clearly

Yeah, shooting down a shooting down, which you've just shot down.  Where will 
it end?

> what you think ought to be done instead. What do you want him to say
> instead?

How about:

"This is a good idea, but we don't want to break backward compatibility a 
little piece at a time.  Instead we'd like to collect all such changes into 
one single compatibility breaking release.  Here's the wiki page you should 
update; and here's the git branch you should push changes like this to."

> most suggestions you point at have been discussed about before

I know the application/protocol version split has been discussed before, but 
please point me to the relevant discussion on: loading the block chain in 
reverse; transaction only requests; checksumming removal; verack removal; 
storing script parameters outside the script; and requesting blocks by 
transaction hash instead of block hash.

If I've missed all of these discussions and their inevitable logically 
indisputable rejection, I apologise.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/bc780656/attachment.sig>

From mike at plan99.net  Thu Aug 11 16:17:23 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 11 Aug 2011 18:17:23 +0200
Subject: [Bitcoin-development] Protocol changes
Message-ID: <CANEZrP2hvYst92u22c_41e9=izPCP7uv-RzVM4XSt7gxC99D0A@mail.gmail.com>

This thread is getting off-topic so I changed the subject.

> The benefit I'm aiming at is to imagine a thin client that has done a fast
> startup and only downloaded the headers.

OK. A better way is tx filtering, as discussed here:

   http://bitcointalk.org/?topic=7972.0

The reason is you want to only get the transactions+merkle branches
relevant to you, otherwise cost is still O(system activity) not O(your
activity) as blocks get bigger, even if you don't download every
block.

> The sequence number (and perhaps I've misunderstood) allows me to replace a
> transaction I've already submitted

Yes, but it's more complex than that.

Some contract protocols require one party in a set to be able to
re-issue transactions without interacting with the other parties. The
reason is that each input can come from a different person. If the
sequence number was a property of the transaction, updating it would
either require all participants to re-sign the transaction, or for the
signatures to not cover the sequence number at all.

With seqnums on the inputs, I can create a newer version of the
transaction by just resigning my input with a higher sequence number.
This is defined by IsNewerThan(). Note that my options here are
limited - I can't create an arbitrarily different version of the
transaction without invalidating all the other input signatures. If I
own all the inputs, no problem. If some are owned by others, what I
can change is defined by the SIGHASH flags. To replace this tx in the
memory pool requires others to re-sign their input with a higher
sequence number than mine - so we establish a kind of chain. Nobody
can rewind the transaction to an earlier point, but anyone can update
it within the parameters established by the SIGHASH flags on the
others signatures.

These features all combine together to allow for particular types of
contracts that take place on the negotiating table of the networks
memory pool. For instance, if you are taking part and then decide you
don't wish to continue, you can set the output that's in the same
position as your input to reassign all the money you put in back to
you, sign the input with SIGHASH_SINGLE and broadcast with nSequence
set to UINT_MAX. Now the transaction is still valid but is a no-op
from your perspective. Note that once you've done this, you've bowed
out of the negotiation completely because you can't replace the
transaction anymore.

You can't change anything about the inputs beyond scripts this way.
The transaction still has to connect to the same outputs as before,
and thus import the same amount of value.



From andyparkins at gmail.com  Thu Aug 11 17:24:42 2011
From: andyparkins at gmail.com (Andy Parkins)
Date: Thu, 11 Aug 2011 18:24:42 +0100
Subject: [Bitcoin-development] Protocol changes
In-Reply-To: <CANEZrP2hvYst92u22c_41e9=izPCP7uv-RzVM4XSt7gxC99D0A@mail.gmail.com>
References: <CANEZrP2hvYst92u22c_41e9=izPCP7uv-RzVM4XSt7gxC99D0A@mail.gmail.com>
Message-ID: <201108111824.42807.andyparkins@gmail.com>

On Thursday 11 August 2011 17:17:23 Mike Hearn wrote:

> This thread is getting off-topic so I changed the subject.

Fair enough.

> > The benefit I'm aiming at is to imagine a thin client that has done a
> > fast startup and only downloaded the headers.
> 
> OK. A better way is tx filtering, as discussed here:
> 
>    http://bitcointalk.org/?topic=7972.0
> 
> The reason is you want to only get the transactions+merkle branches
> relevant to you, otherwise cost is still O(system activity) not O(your
> activity) as blocks get bigger, even if you don't download every
> block.

Well okay; it seems to me that that is considerably bigger task, and I'm not 
sure how likely that is to appear.  But that sounds workable, since my 
feature request is simply this filtering system with the filter set to 
"ALL"; so I can hardly complain about that.

> > The sequence number (and perhaps I've misunderstood) allows me to
> > replace a transaction I've already submitted
> 
> Yes, but it's more complex than that.

 ... good stuff removed for brevity ...

> sequence number than mine - so we establish a kind of chain. Nobody
> can rewind the transaction to an earlier point, but anyone can update
> it within the parameters established by the SIGHASH flags on the
> others signatures.

I can't say I see what the point of all that added complexity is, contracts 
are usually more than just financial, and the ability to pick a slightly 
different set of source inputs doesn't seem like a hugely useful feature; 
but I'm willing to accept someone thinks it is a good idea and leave it at 
that.  I withdraw my "move sequence number" feature request.

> You can't change anything about the inputs beyond scripts this way.
> The transaction still has to connect to the same outputs as before,
> and thus import the same amount of value.

What then allows the contract out of the memory pool into a chain?  The 
locktime?  No, no, forget it... I don't want to open a new can of worms.


Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com



From bgroff at lavabit.com  Thu Aug 11 17:49:21 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Thu, 11 Aug 2011 13:49:21 -0400 (EDT)
Subject: [Bitcoin-development] Roadmap/schedules
In-Reply-To: <1312995554.17416.22.camel@BMThinkPad.lan.bluematt.me>
References: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
	<1312995554.17416.22.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <11231.137.56.163.64.1313084961.squirrel@lavabit.com>

Matt Corallo wrote:
> On Wed, 2011-08-10 at 12:29 -0400, Gavin Andresen wrote:
>> I've been wading through the pull requests and bug lists to figure out
>> a roadmap for the next few months.
>> ...
>> 3. Wallet security.  I'd like to get Matt's wallet encryption shipped
>> soon, along with all or part of groffer's Multisign patch (#319 --
>> since that will enable the creation of trojan-resistant secure wallet
>> solutions).
> I was under the impression all that was left on the to-do for 0.4 was
> wallet import/export testing and merge (and a few bug fixes like #453),
> I agree #319 should be pulled sometime soon, but maybe for 0.4 just the
> IsStandard parts in 0.4 as those need to get out first anyway?

I'm not sure splitting the patch this way makes a big difference.  The
IsStandard part depends on the construction of the multisign script, which
is what most of the patch does anyway.  In other words, if upon further
review the script construction needs to change, IsStandard will change. 
So a full review would be better.

Also, with unit test coverage for both this feature and existing
script.cpp code, I'm hoping that this patch is relatively low risk and
actually pays down some existing test debt.

--
Bobby Groff





From rick at support-intelligence.com  Thu Aug 11 18:20:23 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Thu, 11 Aug 2011 11:20:23 -0700
Subject: [Bitcoin-development] Roadmap/schedules
In-Reply-To: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
References: <CABsx9T2pTg8YG_Q09cnAvsrxquLO-6cWr1tb=fdWtLPBEyJzng@mail.gmail.com>
Message-ID: <CAJ1JLtu7UXz2X25iWLKUUmK=oapj8OzGRH964JY=Ppzd8rOfTg@mail.gmail.com>

On Wed, Aug 10, 2011 at 9:29 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> I've been wading through the pull requests and bug lists to figure out
> a roadmap for the next few months.
>
> Here are the things on my priority list:
>
> 1. Where are we at with network health? What metrics should we be
> using? Is there work to be done?
> And meta-issue:  can somebody volunteer to be the Bitcoin Network
> Health Inspector to keep track of this?
>
>
I'm already on it, leveraging bitcoinj to do the work. I've added async
capabilities to bitcoinj so that I can peer with everything that will let me
with the goal of publishing quality peer lists via the DNS. Once I can build
some metrics off the network its a matter of creating the visualizations.

I just started on this project last week. Happy to work with others on what
a healty network looks like as well as best ways to communicate status.

also need advise on how to not be an impolite peer.

-rick
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110811/2d1e0271/attachment.html>

From mike at plan99.net  Thu Aug 11 22:02:09 2011
From: mike at plan99.net (Mike Hearn)
Date: Fri, 12 Aug 2011 00:02:09 +0200
Subject: [Bitcoin-development] Protocol changes
In-Reply-To: <201108111824.42807.andyparkins@gmail.com>
References: <CANEZrP2hvYst92u22c_41e9=izPCP7uv-RzVM4XSt7gxC99D0A@mail.gmail.com>
	<201108111824.42807.andyparkins@gmail.com>
Message-ID: <CANEZrP1Dt9pqQ7-kj=DjPDi6zU83JgWqjRQa1t4SZt+CErxm9w@mail.gmail.com>

> I can't say I see what the point of all that added complexity is, contracts
> are usually more than just financial

The term "contract" is sort of misleading, but there isn't a better
word for it. Satoshi called them contracts so that's what I call them
too.

http://en.bitcoin.it/wiki/Contracts

The point is to allow for lower trust in certain types of
transactions. For instance, consider Kickstarter. They allow people to
club together to fund the creation of new things, typically indie
movies and games. The problem is you need this trusted middleman to
collect peoples pledges and aggregate them. That adds fees, etc. With
contracts it can be done entirely with software, all the artist/game
programmer would need is to run some software on their website.

> What then allows the contract out of the memory pool into a chain? ?The
> locktime? ?No, no, forget it... I don't want to open a new can of worms.

;)

Lock time or if every sequence number is UINT_MAX.



From sam.revitch at gmail.com  Fri Aug 12 15:53:10 2011
From: sam.revitch at gmail.com (Sam Revitch)
Date: Fri, 12 Aug 2011 08:53:10 -0700
Subject: [Bitcoin-development] Password-protected private key export format
	and version bytes
Message-ID: <4E454C66.4010706@gmail.com>

Hi folks,

I've been working on a new private key export format that includes
simple password-protection.  Details of the scheme are posted at:

https://bitcointalk.org/index.php?topic=36195.0

It is intended as an interchange format, not specifically integrated
with wallet encryption, and simple enough to be produced by the
vanitygen program.  Importing to the official bitcoin client using a
method like the import/export patch would require the user to provide
the password of the private key, in addition to the wallet password if
the wallet is encrypted.

Comments on the format are welcomed!

As the proposed format is base-58, I would like to make a request to use
one of the data classes as proposed by Pieter Wuille about a month ago:

http://sourceforge.net/mailarchive/forum.php?thread_name=20110708092506.GA6641%40ulyssis.org&forum_name=bitcoin-development

If this doesn't fit with the general bitcoin development agenda, that's
OK too, but I would like to explore some possibility for a protected
export format for private keys.

Thanks,
-Sam Revitch



From luke at dashjr.org  Fri Aug 12 16:19:50 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 12 Aug 2011 12:19:50 -0400
Subject: [Bitcoin-development] [PULL] When parsing base58 data,
	accept [0O] as o, and [l|!] as 1
Message-ID: <201108121219.53004.luke@dashjr.org>

http://tinyurl.com/3gpvrhm

git fetch git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git \
 base58_liberal_parsing && git merge FETCH_HEAD

This simple modification allows base58 inputs to use zero and uppercase 'O' in 
place of lowercase 'O', as well as lowercase 'L', bar/pipe, and exclamation 
point in place of one. This allows more tolerance when inputting addresses or 
other data by manual typing, and gives a bit more variety to vanity addresses.



From luke at dashjr.org  Fri Aug 12 16:43:22 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 12 Aug 2011 12:43:22 -0400
Subject: [Bitcoin-development] [PULL] When parsing base58 data,
	accept [0O] as o, and [l|!] as 1
In-Reply-To: <CABsx9T0iCYr591RVXA40mHMU75sEL0AfbbBHXFaz0XLFp6_kFQ@mail.gmail.com>
References: <201108121219.53004.luke@dashjr.org>
	<CABsx9T0iCYr591RVXA40mHMU75sEL0AfbbBHXFaz0XLFp6_kFQ@mail.gmail.com>
Message-ID: <201108121243.24207.luke@dashjr.org>

On Friday, August 12, 2011 12:35:27 PM Gavin Andresen wrote:
> pszDecode58 is not a pointer to a zero-terminated string; it should be
> pnDecode58.

Updated variable name in branch...

> I'm torn between "meh, whatever" and "this will just cause people
> headaches when they wonder why vanity addresses don't work in
> blockexplorer because theymos decides not to bother changing his
> code..."

Perhaps the vanity use would need to be introduced only after the community 
has accepted these as alternative legitimate representations. Even without 
that, I think gracefully handling the typos would be sensible.



From vladimir at marchenko.co.uk  Fri Aug 12 17:32:06 2011
From: vladimir at marchenko.co.uk (Vladimir Marchenko)
Date: Fri, 12 Aug 2011 18:32:06 +0100
Subject: [Bitcoin-development] The forums...
In-Reply-To: <4E25B9E9.5020906@lavabit.com>
References: <4E2492CE.9040500@lavabit.com>
	<4E25B9E9.5020906@lavabit.com>
Message-ID: <CACv5nHKnXBv-qpaiL5YdOb_adzckGoK6zNGoCdcDQvNq=MnHcQ@mail.gmail.com>

I am in a final stage of preparation for launch of bitcoin community
portal at https://bitcoin.org.uk . It contains fairly advanced forum
functionality, blogging platform, community calendar, and even chat.
Professionally hosted on highend dedicated servers running FreeBSD in
a DC loated in Amsterdaam, NL

There is a  "by invitation only" section, which might be suitable for
bitcoin developers. Please consider starting using it and helping to
jump start it.

Additionally, if any bitcoin businesses would like to have their
"support" forums set up there so that they retail moderatorial control
over it please let me know.

Soft launch is scheduled on 15th of August, but it is fairly
functional already and open for registration. Feel free to register
and ping me for setting up appropriate permission for use of private
forums.

Any suggestions and feedback are also very welcome.

Kind Regards,
Vladimir.



From me at endeavour.zapto.org  Sun Aug 14 19:05:07 2011
From: me at endeavour.zapto.org (Venkatesh Srinivas)
Date: Sun, 14 Aug 2011 15:05:07 -0400
Subject: [Bitcoin-development] Patch to UNIX makefile to remove -DFOURWAYSSE2
Message-ID: <20110814190506.GA13383@centaur.acm.jhu.edu>

-DFOURWAYSSE2 is an obsolete flag; lets remove it.

-- vs
-------------- next part --------------
From 136f8fbd449b7584b61451ac396ca921d5e731c2 Mon Sep 17 00:00:00 2001
From: Venkatesh Srinivas <me at endeavour.zapto.org>
Date: Sun, 14 Aug 2011 15:02:31 -0400
Subject: [PATCH] Remove -DFOURWAYSSE2 flag from UNIX makefile.

---
 src/makefile.unix |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/makefile.unix b/src/makefile.unix
index ba9d0ca..4c92797 100644
--- a/src/makefile.unix
+++ b/src/makefile.unix
@@ -10,7 +10,7 @@ WXLIBS=$(shell wx-config --libs)
 
 USE_UPNP:=0
 
-DEFS=-DNOPCH -DFOURWAYSSE2 -DUSE_SSL
+DEFS=-DNOPCH -DUSE_SSL
 
 # for boost 1.37, add -mt to the boost libraries
 LIBS= \
-- 
1.7.2.3

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110814/d85274be/attachment.sig>

From jgarzik at exmulti.com  Tue Aug 16 14:12:27 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 16 Aug 2011 10:12:27 -0400
Subject: [Bitcoin-development] Patch to UNIX makefile to remove
	-DFOURWAYSSE2
In-Reply-To: <20110814190506.GA13383@centaur.acm.jhu.edu>
References: <20110814190506.GA13383@centaur.acm.jhu.edu>
Message-ID: <CA+8xBpfdQT9mO0nRHN5hGWtXHWw0mrTWAo5k8e3dj3Dp-tb8Fw@mail.gmail.com>

On Sun, Aug 14, 2011 at 3:05 PM, Venkatesh Srinivas
<me at endeavour.zapto.org> wrote:
> -DFOURWAYSSE2 is an obsolete flag; lets remove it.

applied

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From gavinandresen at gmail.com  Wed Aug 17 14:53:43 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 17 Aug 2011 10:53:43 -0400
Subject: [Bitcoin-development] DEBUG_LOCKORDER : early detection of
	potential deadlocks
Message-ID: <CABsx9T0nZcAnM29R8H9Diw3B3Ak2UXzE4u6zCpfCL0T8cF60mg@mail.gmail.com>

Commit 865ed8a adds a new compile-time #ifdef : DEBUG_LOCKORDER

Compile with -DDEBUG_LOCKORDER and every time a lock is acquired by a
CCriticalSection a check is made to record the order of locks and
complain if they are being acquired in an inconsistent order.  Here's
what you get in debug.log when potential deadlocks are detected:

POTENTIAL DEADLOCK DETECTED
Previous lock order was:
 pwallet->cs_mapWallet  db.cpp:686
 pwallet->cs_KeyStore  db.cpp:687
 cs_KeyStore  keystore.cpp:74
 cs_vMasterKey  keystore.cpp:75
 cs_KeyStore  keystore.cpp:31
Current lock order is:
 pwallet->cs_mapWallet  db.cpp:686
 pwallet->cs_KeyStore  db.cpp:687
 cs_KeyStore  keystore.cpp:74
 cs_vMasterKey  keystore.cpp:75

POTENTIAL DEADLOCK DETECTED
Previous lock order was:
 pnode->cs_vRecv  net.cpp:1525
 cs_main  main.cpp:2372
 cs_vSend  net.h:681
Current lock order is:
 pnode->cs_vSend  net.cpp:1531
 cs_main  main.cpp:2411

I'll be working on figuring out how to eliminate these, and will be
working on some RPC stress-tests that try to exercise all the code
paths to early-detect other potential problems.

-- 
--
Gavin Andresen



From sam.revitch at gmail.com  Wed Aug 17 18:59:31 2011
From: sam.revitch at gmail.com (Sam Revitch)
Date: Wed, 17 Aug 2011 11:59:31 -0700
Subject: [Bitcoin-development] Password-protected private key export
	format and version bytes
In-Reply-To: <4E454C66.4010706@gmail.com>
References: <4E454C66.4010706@gmail.com>
Message-ID: <4E4C0F93.7000309@gmail.com>

Hello all,

The description of the password-protected export format has been revised
slightly, and now includes multiple algorithms and a parameter byte for
selecting the encryption parameters.  As before, the thread is here:

https://bitcointalk.org/index.php?topic=36195.0

Unless there is an existing or other planned use for data class 32, or
another specific objection, I would like to use it for
password-protected private keys.  Going by Sipa's description, this
would mean that a password-protected private key for bitcoin is type 32,
and for the testnet, type 79.

Thanks,
-Sam Revitch



From gavinandresen at gmail.com  Thu Aug 18 14:00:01 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 18 Aug 2011 10:00:01 -0400
Subject: [Bitcoin-development] From the forums: one-confirmation attack
Message-ID: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>

vector76 on the Forums posted this interesting variation on a 'Finney attack' :
  https://bitcointalk.org/index.php?topic=36788.msg463391#msg463391

"Let's say I observe the timing of when nodes are broadcasting
transactions and how they are propagating through the network.  By
watching for which nodes are earliest to broadcast transactions from
my target, I manage to establish a direct connection to my target.

I use a similar method of watching block broadcasts to establish
connections to most of the mining pools.

Now I create a transaction making a valid, large deposit into my
target.  I do not broadcast this transaction but I add it to a block
that I am attempting to mine.  I mine solo, just like normal, except
that I have an extra non-broadcasted tx that I am including.

Eventually, I succeed in creating a valid block.  I do not broadcast
it immediately, but instead I wait until someone else mines a block,
and when that happens, I immediately broadcast my block to my target.
If my target sees my block before the other block, they will accept
it, and my transaction will have one confirmation.  The block chain
has forked, and my target (and possibly other nodes, if my target
relays quickly enough) will believe that my block is the correct one,
while other nodes will believe that the other fork is the correct one.

I immediately request a withdrawal, and my target generates a
transaction sending the large amount of coins to an address I control.
 I also double-spend some of the inputs, sending the coins to myself.
The part of the network that did not receive my block first (which
hopefully is most of the miners) will accept this as valid and work to
include it in the next block.

If my block eventually "wins" because enough miners saw my block first
and added onto it first, then I have just made a deposit and
withdrawal, and I lose nothing.

If my block eventually "loses", then the deposit is invalidated.  If
the deposit tx was not one of the inputs to the withdrawal
transaction, then the withdrawal is still valid."

-------------------------------

The lessons are "don't accept 1-confirmation transactions" and  "try
to be well-connected."

But maybe the deeper lesson is "don't trust information you get from
only one peer." Or maybe "watch for peers that are trying to fool
you."


-- 
--
Gavin Andresen



From joel.kaartinen at gmail.com  Thu Aug 18 15:36:23 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Thu, 18 Aug 2011 18:36:23 +0300
Subject: [Bitcoin-development] From the forums: one-confirmation attack
In-Reply-To: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
References: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
Message-ID: <1313681783.14523.79.camel@mei>

On Thu, 2011-08-18 at 10:00 -0400, Gavin Andresen wrote:
> The lessons are "don't accept 1-confirmation transactions" and  "try
> to be well-connected."
> 
> But maybe the deeper lesson is "don't trust information you get from
> only one peer." Or maybe "watch for peers that are trying to fool
> you."

This particular attack seems quite dependant on the target not using the
deposit Tx as input. I believe this whole class of attacks become
ineffective if each account has it's own separate wallet.

Also, receiving a block with a transaction that hasn't been broadcast to
the network is in itself quite suspect. Are there cases where that
happens legitimately? Perhaps in such a case, don't treat the block it
came in as a confirmation at all. Instead, start counting from the next
one.

- Joel




From mike at plan99.net  Thu Aug 18 15:52:03 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 18 Aug 2011 17:52:03 +0200
Subject: [Bitcoin-development] From the forums: one-confirmation attack
In-Reply-To: <1313681783.14523.79.camel@mei>
References: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
	<1313681783.14523.79.camel@mei>
Message-ID: <CANEZrP0rXWO51O6wJfQ3r3A6bviZ7zpthJjzZkA0JDC7auBEdw@mail.gmail.com>

> Also, receiving a block with a transaction that hasn't been broadcast to
> the network is in itself quite suspect. Are there cases where that
> happens legitimately?

There's no way to obtain the memory pools of your peers today, so if
you're newly started up it can happen that you get blocks with unseen
transactions.

For vectors variant, I wonder if it'd be safe to report the number of
confirmations differently for the duration of a chain split. If you
have a block but a majority of peers relayed a block that split the
chain, subtract 1 from each confirmation reported via RPC.



From gavinandresen at gmail.com  Thu Aug 18 16:16:31 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 18 Aug 2011 12:16:31 -0400
Subject: [Bitcoin-development] From the forums: one-confirmation attack
In-Reply-To: <CANEZrP0rXWO51O6wJfQ3r3A6bviZ7zpthJjzZkA0JDC7auBEdw@mail.gmail.com>
References: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
	<1313681783.14523.79.camel@mei>
	<CANEZrP0rXWO51O6wJfQ3r3A6bviZ7zpthJjzZkA0JDC7auBEdw@mail.gmail.com>
Message-ID: <CABsx9T2zpG=M6nkX4W=KrAJAYaTFR25_MLFmwj43+btWanqqsw@mail.gmail.com>

> For vectors variant, I wonder if it'd be safe to report the number of
> confirmations differently for the duration of a chain split. If you
> have a block but a majority of peers relayed a block that split the
> chain, subtract 1 from each confirmation reported via RPC.

Or maybe report them as 'suspicious.'  Changing the meaning of
'confirmations' is likely to break code (e.g. code like block =
current_blockchain[blockcount-tx.confirmations] ... would give the
wrong block).

A floating-point 0.0-1.0 'confidence' measure might be a good idea to
go along with the integer confirmations. I can think of all sorts of
ways of gauging the reliability of transactions or blocks (did it come
from a trusted peer-- assuming we eventually have trusted peers.  Does
it have a lot of confirmations?  Are there no active block chain
forks?  Have we been getting new blocks at the rate we expect?  etc
etc etc)

We could start with an as simple-as-possible "confidence == 0 if
confirmations < 2, otherwise confidence = function(#confirmations)"
and improve it from there.

-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Thu Aug 18 16:46:17 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 18 Aug 2011 12:46:17 -0400
Subject: [Bitcoin-development] From the forums: one-confirmation attack
In-Reply-To: <CABsx9T2zpG=M6nkX4W=KrAJAYaTFR25_MLFmwj43+btWanqqsw@mail.gmail.com>
References: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
	<1313681783.14523.79.camel@mei>
	<CANEZrP0rXWO51O6wJfQ3r3A6bviZ7zpthJjzZkA0JDC7auBEdw@mail.gmail.com>
	<CABsx9T2zpG=M6nkX4W=KrAJAYaTFR25_MLFmwj43+btWanqqsw@mail.gmail.com>
Message-ID: <CAAS2fgQJZ2b-YDZKfmbA-rTtZfmKsP=QBYuYSQbwFdihoQyHsQ@mail.gmail.com>

On Thu, Aug 18, 2011 at 12:16 PM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> We could start with an as simple-as-possible "confidence == 0 if
> confirmations < 2, otherwise confidence = function(#confirmations)"
> and improve it from there.


At the same time, if this causes people to wait less than the 6 blocks
that the software currently waits for before leaving unconfirmed
status then that would be sad.

Simply waiting a number of blocks is an excellent metric and provides
robustness against almost all attack patterns in a way that various
one-off-heuristics can not as it equates to _real difficulty_ (and
real expense (hashing computation, loss of income on the orphaned
blocks)) in a way that can't be faked.

A few weeks back when there was some rumor going around that mybitcoin
lost coin based on some kind of one confirmation attack I described on
IRC a similar attack pattern which had a useful improvement:

* The attacker runs many widely distributed sybil nodes (e.g. using
botnet drones as simple tcp proxies to appear at many addresses). He
takes advantage of the fact the bitcoin won't connect to /16s that
have already connected to it to further isolate nodes.

* By creating normal looking probe transactions which his own nodes
won't forward he detects network partitions which he is able to
create. He searches for a cut which causes there to be at least two
partitions which contain significant mining power.

* He creates two accounts at MoronBank. He doesn't even bother
identifying MoronBank's node. MoronBank will be in one partition or
another. He makes deposits in both partitions, and conflicting
transactions in the opposite partitions, while carefully filtering out
these transactions from crossing the boundary.

(Notably, the network doesn't appear partitioned to everyone else now
because he's still forwarding blocks and transactions unrelated to his
attack? it only becomes visible once some of his evil transactions are
mined)

* After the funds show up in MoronBank he withdraws and drops the partitioning.

Only if he has difficulty getting MoronBank into the smaller partition
does he need to bother locating it and attacking it directly.

The bad thing about this attack is that it doesn't require the
attacker to have any hash power at all: he captures miners as
unwilling (or willing but plausibly deniable) participants. The lost
income from orphaned blocks is externalized to the victimized miners
(and since most pools don't pay orphaned blocks out of pocket a pool
operator would be inclined to help out).

The good thing about it is that it's killed dead by nodes adding in a
few manually configured peerings, they don't even really need to be
trusted: You just need to trust that they don't all go to a single
bad-guy conspiracy. At a minimum all major miners should be fully
meshed.

Unfortunately, We don't currently have software for this as addnode
doesn't worry about keeping the links up... and the major pools also
don't seem to be interested in participating.



From theymos at mm.st  Thu Aug 18 16:47:56 2011
From: theymos at mm.st (theymos)
Date: Thu, 18 Aug 2011 11:47:56 -0500
Subject: [Bitcoin-development] From the forums: one-confirmation attack
In-Reply-To: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
References: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
Message-ID: <1313686076.6324.140258131139585@webmail.messagingengine.com>

> The part of the network that did not receive my block first (which
> hopefully is most of the miners) will accept this as valid and work to
> include it in the next block.

To make this more difficult, nodes that receive new transactions via
blocks should relay the new transactions as if they had received them
normally. Then the double-spend transaction will be rejected by most of
the network because the other version is already widely-known.



From gmaxwell at gmail.com  Thu Aug 18 17:27:29 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 18 Aug 2011 13:27:29 -0400
Subject: [Bitcoin-development] From the forums: one-confirmation attack
In-Reply-To: <1313686076.6324.140258131139585@webmail.messagingengine.com>
References: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
	<1313686076.6324.140258131139585@webmail.messagingengine.com>
Message-ID: <CAAS2fgRxNiGYETKJJ-o=z=ZwBMR5Sa=yF54AXeV=VgP-bsTT8g@mail.gmail.com>

On Thu, Aug 18, 2011 at 12:47 PM, theymos <theymos at mm.st> wrote:
> To make this more difficult, nodes that receive new transactions via
> blocks should relay the new transactions as if they had received them
> normally. Then the double-spend transaction will be rejected by most of
> the network because the other version is already widely-known.

Not that helpful. In that attack pattern the attacker can release the
block and the conflicting transaction at the same time (to different
nodes, of course). They can also inject the conflicting transaction
into many places in the network at once.



From gavinandresen at gmail.com  Thu Aug 18 17:36:05 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 18 Aug 2011 13:36:05 -0400
Subject: [Bitcoin-development] From the forums: one-confirmation attack
In-Reply-To: <CAAS2fgQJZ2b-YDZKfmbA-rTtZfmKsP=QBYuYSQbwFdihoQyHsQ@mail.gmail.com>
References: <CABsx9T0AgUL+rphhB8YUVHDGJnc0TmaYG=kjt7Pz1yrwLjBbDQ@mail.gmail.com>
	<1313681783.14523.79.camel@mei>
	<CANEZrP0rXWO51O6wJfQ3r3A6bviZ7zpthJjzZkA0JDC7auBEdw@mail.gmail.com>
	<CABsx9T2zpG=M6nkX4W=KrAJAYaTFR25_MLFmwj43+btWanqqsw@mail.gmail.com>
	<CAAS2fgQJZ2b-YDZKfmbA-rTtZfmKsP=QBYuYSQbwFdihoQyHsQ@mail.gmail.com>
Message-ID: <CABsx9T2oCJeXKFVz4k=oT=QrtdgomJGCc5dRc+UqbY4zJn8nXQ@mail.gmail.com>

Gregory said: "...if this causes people to wait less than the 6 blocks
that the software currently waits for before leaving unconfirmed
status then that would be sad."

People are already considering transactions 'confirmed enough' at less
than six blocks. I'm guilty, too-- 3 is/was the magic number for
ClearCoin.

And people are already experimenting with ways of safely accepting
0-confirmation transactions, like InstaWallet's "green" payments (sent
from a trusted-not-to-double-spend address).

Since there is definitely market demand for "as fast as possible"
confirmation, I'm thinking adding a placeholder to the RPC interface
might be a good idea.  Although after thinking about it some more,
maybe a signed integer "trust" rating for blocks/transactions would be
a better way of doing it...


RE: miners connecting themselves together in a semi-trusted "bitcoin
backbone"  :  agreed.

Matt submitted a patch to connect and stay-connected to a set of
nodes, but I complained about the implementation.  Seems to me the
networking code needs an overhaul, to implement a priority queue of
potential peers (trusted peers would be sorted to near the top of the
queue, peers you think are badly-behaved would be sorted to the
bottom, with lots of randomness so not everybody on the network is
trying to connect to the same set of peers). With peer rotation to
mitigate manipulate-time and other Sybil attacks.

-- 
--
Gavin Andresen



From me at endeavour.zapto.org  Fri Aug 19 13:52:27 2011
From: me at endeavour.zapto.org (Venkatesh Srinivas)
Date: Fri, 19 Aug 2011 09:52:27 -0400
Subject: [Bitcoin-development] Patch to provide MSG_NOSIGNAL defn where not
	available
Message-ID: <20110819135225.GB28263@centaur.acm.jhu.edu>

Hi,

The attached patch defines MSG_NOSIGNAL to 0 on platforms where it is
unavailable. Previously this definition was only available under
__WXMSW__.

-- vs
-------------- next part --------------
From 8299efe45e090b81c988bcdca58c8e25c0001841 Mon Sep 17 00:00:00 2001
From: Venkatesh Srinivas <me at endeavour.zapto.org>
Date: Fri, 19 Aug 2011 09:41:04 -0400
Subject: [PATCH] Define MSG_NOSIGNAL to 0 on platforms where it is unavailable.

---
 src/util.h |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/src/util.h b/src/util.h
index 1e4ceb2..9d3824f 100644
--- a/src/util.h
+++ b/src/util.h
@@ -89,8 +89,11 @@ T* alignup(T* p)
     return u.ptr;
 }
 
-#ifdef __WXMSW__
+#ifndef MSG_NOSIGNAL
 #define MSG_NOSIGNAL        0
+#endif
+
+#ifdef __WXMSW__
 #define MSG_DONTWAIT        0
 #ifndef UINT64_MAX
 #define UINT64_MAX          _UI64_MAX
-- 
1.7.2.3

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 198 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110819/7a3ca546/attachment.sig>

From luke at dashjr.org  Fri Aug 19 16:48:33 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 19 Aug 2011 12:48:33 -0400
Subject: [Bitcoin-development] [PATCH] Boost filesystem v3 support
Message-ID: <201108191248.36093.luke@dashjr.org>

This patch conditionally adapts the one line needed to support boost 
filesystem version 3 (default in Boost 1.46+ and required for 1.48+)

I have tested it with Boost 1.41.0 to verify it still works on these older 
versions too.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0001-Support-for-boost-filesystem-version-3.patch
Type: text/x-patch
Size: 743 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110819/2b9d25e4/attachment.bin>

From fconcklin at trucoin.com  Mon Aug 22 19:02:18 2011
From: fconcklin at trucoin.com (Fred Concklin)
Date: Mon, 22 Aug 2011 15:02:18 -0400
Subject: [Bitcoin-development] Introduction
Message-ID: <4E52A7BA.1030208@trucoin.com>

Hey all!

My name is Fred Concklin and I plan on working on Bitcoin development
through my position at Trucoin. I thought I'd take this chance to
introduce myself and go over where I can make contributions.

I'm great with automated builds and testing for GNU/Linux and BSD
platforms and generally plan on structuring the bitcoin project into a
structure compliant with GNU autotools to facilitate testing and bug
reporting.

I'm also interested in work to daemonize bitcoin on boot and furthering
work to bring bitcoin into general coding and implementation paradigms
seen on GNU/Linux platforms.

While I mainly spend my time in high level functional programming
languages these days, I look forward to working on bitcoin and hope
everybody is patient with my occasional cpp implementation ineptitudes.

I'm also interested in spurring discussion on new blockchain
distribution techniques and thoughts on improvements for bitcoin.

I'm excited to begin work on bitcoin.

fpc

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 262 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/b85ecd90/attachment.sig>

From dhuff at jrbobdobbs.org  Mon Aug 22 19:30:04 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Mon, 22 Aug 2011 14:30:04 -0500
Subject: [Bitcoin-development] Introduction
In-Reply-To: <4E52A7BA.1030208@trucoin.com>
References: <4E52A7BA.1030208@trucoin.com>
Message-ID: <CAPiTikVrw9QZAdmNwa5RCik+O4QvM4nGMZZx9Xc9L+XmtgX23w@mail.gmail.com>

On Aug 22, 2011 2:26 PM, "Fred Concklin" <fconcklin at trucoin.com> wrote:
>
> I'm also interested in work to daemonize bitcoin on boot and furthering
> work to bring bitcoin into general coding and implementation paradigms
> seen on GNU/Linux platforms.

What? It already works fine in this regard using standard tools. Especially
easy with daemontools/runit.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/0657ed70/attachment.html>

From luke at dashjr.org  Mon Aug 22 19:49:36 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 22 Aug 2011 15:49:36 -0400
Subject: [Bitcoin-development] Introduction
In-Reply-To: <CAPiTikVrw9QZAdmNwa5RCik+O4QvM4nGMZZx9Xc9L+XmtgX23w@mail.gmail.com>
References: <4E52A7BA.1030208@trucoin.com>
	<CAPiTikVrw9QZAdmNwa5RCik+O4QvM4nGMZZx9Xc9L+XmtgX23w@mail.gmail.com>
Message-ID: <201108221549.44440.luke@dashjr.org>

On Monday, August 22, 2011 3:30:04 PM Douglas Huff wrote:
> On Aug 22, 2011 2:26 PM, "Fred Concklin" <fconcklin at trucoin.com> wrote:
> > I'm also interested in work to daemonize bitcoin on boot and furthering
> > work to bring bitcoin into general coding and implementation paradigms
> > seen on GNU/Linux platforms.
> 
> What? It already works fine in this regard using standard tools. Especially
> easy with daemontools/runit.

He said standard *coding and implementation paradigms*. This has nothing to do 
with integration with some non-standard "init replacement" that goes against 
the whole design of Unix.

What I understand this to mean, is properly abstracting the components such 
that the node, wallet, and GUI can work together while being distinct parts.
In this sense, Fred, you may be interested in working on coming up with a 
standard for a https://en.bitcoin.it/wiki/Wallet_protocol



From dhuff at jrbobdobbs.org  Mon Aug 22 20:12:15 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Mon, 22 Aug 2011 15:12:15 -0500
Subject: [Bitcoin-development] Introduction
In-Reply-To: <201108221549.44440.luke@dashjr.org>
References: <4E52A7BA.1030208@trucoin.com>
	<CAPiTikVrw9QZAdmNwa5RCik+O4QvM4nGMZZx9Xc9L+XmtgX23w@mail.gmail.com>
	<201108221549.44440.luke@dashjr.org>
Message-ID: <CAPiTikUaZbp0t2aYBoJ4w+uvEh=PHorXXLtzkATaOvbUt9qTtw@mail.gmail.com>

I don't think you're actually familiar with either of those tools. A run
script is not much different than an init script?

Those who live in tonal caves shouldn't crap on themselves, or something.

On Aug 22, 2011 2:49 PM, "Luke-Jr" <luke at dashjr.org> wrote:
>
> On Monday, August 22, 2011 3:30:04 PM Douglas Huff wrote:
> > On Aug 22, 2011 2:26 PM, "Fred Concklin" <fconcklin at trucoin.com> wrote:
> > > I'm also interested in work to daemonize bitcoin on boot and
furthering
> > > work to bring bitcoin into general coding and implementation paradigms
> > > seen on GNU/Linux platforms.
> >
> > What? It already works fine in this regard using standard tools.
Especially
> > easy with daemontools/runit.
>
> He said standard *coding and implementation paradigms*. This has nothing
to do
> with integration with some non-standard "init replacement" that goes
against
> the whole design of Unix.
>
> What I understand this to mean, is properly abstracting the components
such
> that the node, wallet, and GUI can work together while being distinct
parts.
> In this sense, Fred, you may be interested in working on coming up with a
> standard for a https://en.bitcoin.it/wiki/Wallet_protocol
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/cdad2324/attachment.html>

From bitcoin-list at bluematt.me  Mon Aug 22 20:45:18 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 22 Aug 2011 16:45:18 -0400
Subject: [Bitcoin-development] Introduction
In-Reply-To: <4E52A7BA.1030208@trucoin.com>
References: <4E52A7BA.1030208@trucoin.com>
Message-ID: <1314045918.7339.1.camel@BMThinkPad.lan.bluematt.me>

Nice to meet you.  Its always nice to have more dedicated developers.

On Mon, 2011-08-22 at 15:02 -0400, Fred Concklin wrote:
> Hey all!
> 
> My name is Fred Concklin and I plan on working on Bitcoin development
> through my position at Trucoin. I thought I'd take this chance to
> introduce myself and go over where I can make contributions.
> 
> I'm great with automated builds and testing for GNU/Linux and BSD
> platforms and generally plan on structuring the bitcoin project into a
> structure compliant with GNU autotools to facilitate testing and bug
> reporting.
autotools yay.  Also, have you seen jenkins.bluematt.me?
> 
> While I mainly spend my time in high level functional programming
> languages these days, I look forward to working on bitcoin and hope
> everybody is patient with my occasional cpp implementation ineptitudes.
No one has complained too much about mine yet, so I think you are safe.
> 
> I'm excited to begin work on bitcoin.
And Id bet everyone here is exited to have you.

Matt




From fconcklin at trucoin.com  Tue Aug 23 03:26:53 2011
From: fconcklin at trucoin.com (Fred Concklin)
Date: Mon, 22 Aug 2011 23:26:53 -0400
Subject: [Bitcoin-development] Introduction
In-Reply-To: <CAPiTikUaZbp0t2aYBoJ4w+uvEh=PHorXXLtzkATaOvbUt9qTtw@mail.gmail.com>
References: <4E52A7BA.1030208@trucoin.com>	<CAPiTikVrw9QZAdmNwa5RCik+O4QvM4nGMZZx9Xc9L+XmtgX23w@mail.gmail.com>	<201108221549.44440.luke@dashjr.org>
	<CAPiTikUaZbp0t2aYBoJ4w+uvEh=PHorXXLtzkATaOvbUt9qTtw@mail.gmail.com>
Message-ID: <4E531DFD.1070407@trucoin.com>

Thanks for the warm welcome...

I was specifically referring to building with autotools as a starting
point. Primarily autoconf to ease the installation and testing process.

On 08/22/2011 04:12 PM, Douglas Huff wrote:
> I don't think you're actually familiar with either of those tools. A run
> script is not much different than an init script?
In this regard I was referring to running bitcoin in /etc/init.d on
Debian based systems. By init script, I was referring to making scripts
run at boot time.
> Those who live in tonal caves shouldn't crap on themselves, or something.
>
> On Aug 22, 2011 2:49 PM, "Luke-Jr" <luke at dashjr.org> wrote:
>> On Monday, August 22, 2011 3:30:04 PM Douglas Huff wrote:
>>> On Aug 22, 2011 2:26 PM, "Fred Concklin" <fconcklin at trucoin.com> wrote:
>>>> I'm also interested in work to daemonize bitcoin on boot and
> furthering
>>>> work to bring bitcoin into general coding and implementation paradigms
>>>> seen on GNU/Linux platforms.
>>> What? It already works fine in this regard using standard tools.
> Especially
>>> easy with daemontools/runit.
>> He said standard *coding and implementation paradigms*. This has nothing
> to do
>> with integration with some non-standard "init replacement" that goes
> against
>> the whole design of Unix.
>>
>> What I understand this to mean, is properly abstracting the components
> such
>> that the node, wallet, and GUI can work together while being distinct
> parts.
>> In this sense, Fred, you may be interested in working on coming up with a
>> standard for a https://en.bitcoin.it/wiki/Wallet_protocol

I'll check this out.

fpc

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 262 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/50958f94/attachment.sig>

From jayschwa at gmail.com  Tue Aug 23 03:42:06 2011
From: jayschwa at gmail.com (Jay Weisskopf)
Date: Mon, 22 Aug 2011 22:42:06 -0500
Subject: [Bitcoin-development] Introduction
In-Reply-To: <4E531DFD.1070407@trucoin.com>
References: <4E52A7BA.1030208@trucoin.com>
	<CAPiTikVrw9QZAdmNwa5RCik+O4QvM4nGMZZx9Xc9L+XmtgX23w@mail.gmail.com>
	<201108221549.44440.luke@dashjr.org>
	<CAPiTikUaZbp0t2aYBoJ4w+uvEh=PHorXXLtzkATaOvbUt9qTtw@mail.gmail.com>
	<4E531DFD.1070407@trucoin.com>
Message-ID: <CANAndtx9PJp1ffDx7HxuQiKWf4_7G7STdAi99-VPXRp8E12W0w@mail.gmail.com>

On Mon, Aug 22, 2011 at 10:26 PM, Fred Concklin <fconcklin at trucoin.com>wrote:

> I was specifically referring to building with autotools as a starting
> point. Primarily autoconf to ease the installation and testing process.


Some work has already been done for autotools (not yet merged into main
repo). You might want to start there.

https://github.com/bitcoin/bitcoin/pull/180

- Jay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110822/40cc528c/attachment.html>

From fconcklin at trucoin.com  Tue Aug 23 04:20:22 2011
From: fconcklin at trucoin.com (Fred Concklin)
Date: Tue, 23 Aug 2011 00:20:22 -0400
Subject: [Bitcoin-development] Introduction
In-Reply-To: <CANAndtx9PJp1ffDx7HxuQiKWf4_7G7STdAi99-VPXRp8E12W0w@mail.gmail.com>
References: <4E52A7BA.1030208@trucoin.com>	<CAPiTikVrw9QZAdmNwa5RCik+O4QvM4nGMZZx9Xc9L+XmtgX23w@mail.gmail.com>	<201108221549.44440.luke@dashjr.org>	<CAPiTikUaZbp0t2aYBoJ4w+uvEh=PHorXXLtzkATaOvbUt9qTtw@mail.gmail.com>	<4E531DFD.1070407@trucoin.com>
	<CANAndtx9PJp1ffDx7HxuQiKWf4_7G7STdAi99-VPXRp8E12W0w@mail.gmail.com>
Message-ID: <4E532A86.4080802@trucoin.com>

Thanks for the heads up. I'll get started there.

On 08/22/2011 11:42 PM, Jay Weisskopf wrote:
> On Mon, Aug 22, 2011 at 10:26 PM, Fred Concklin <fconcklin at trucoin.com>wrote:
>
>> I was specifically referring to building with autotools as a starting
>> point. Primarily autoconf to ease the installation and testing process.
>
> Some work has already been done for autotools (not yet merged into main
> repo). You might want to start there.
>
> https://github.com/bitcoin/bitcoin/pull/180
>
> - Jay
>
fpc

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 262 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110823/3cd9dade/attachment.sig>

From gavinandresen at gmail.com  Wed Aug 24 15:12:10 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 24 Aug 2011 11:12:10 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
	schedule a blockchain split?
Message-ID: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>

It seems to me the fastest path to very secure, very-hard-to-lose
bitcoin wallets is multi-signature transactions.

To organize this discussion: first, does everybody agree?

ByteCoin pointed to a research paper that gives a scheme for splitting
a private key between two people, neither of which every knows the
full key, but, together, both can DSA-sign transactions.  That's very
cool, but it involves high-end cutting-edge crypto like zero-knowledge
proofs that I know very little about (are implementations available?
are they patented?  have they been thoroughly vetted/tested?  etc).
So I'm assuming that is NOT the fastest way to solving the problem.

If anybody has some open-source, patent-free, thoroughly-tested code
that already does DSA-key-splitting, speak up please.


I've been trying to get consensus on low-level 'standard' transactions
for transactions that must be signed by 2 or 3 keys; current draft
proposal is here:
 https://gist.github.com/39158239e36f6af69d6f
and discussion on the forums here:
 https://bitcointalk.org/index.php?topic=38928.0
... and there is a pull request that is relevant here:
 https://github.com/bitcoin/bitcoin/pull/319


I still think it is a good idea to enable a set of new 'standard'
multisignature transactions, so they get relayed and included into
blocks.  I don't want to let "the perfect become the enemy of the
good" -- does anybody disagree?

The arguments against are that if the proposed standard transactions
are accepted, then the next step is to define a new kind of bitcoin
address that lets coins be deposited into a multisignature-protected
wallet.

And those new as-yet-undefined bitcoin addresses will have to be 2 or
3 times as big as current bitcoin addresses, and will be incompatible
with old clients.

So, if we are going to have new releases that are incompatible with
old clients why not do things right in the first place, implement or
enable opcodes so the new bitcoin addresses can be small, and schedule
a block chain split for N months from now.

My biggest worry is we'll say "Sure, it'll only take a couple days to
agree on how to do it right" and six months from now there is still no
consensus on exactly which digest function should be used, or whether
or not there should be a new opcode for arbitrary boolean expressions
involving keypairs.  And people's wallets continue to get lost or
stolen.



-- 
--
Gavin Andresen



From rick at support-intelligence.com  Wed Aug 24 15:17:07 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 24 Aug 2011 08:17:07 -0700
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <CAJ1JLtsYrHpwhehUx2WDHpLoE0GwEVzF6gsqHiGnHFGh7i7o_g@mail.gmail.com>

wow, with all the feature requests and bug fixing that needs to be done you
want to go off on a tangent.

Vision my friend, once centered on robust architecture, may then be directed
on a hard left turn.

Lets get a feature road map done, bug fix and testing framework set up

... or fork this puppy to folks that can execute the above.

-rick

On Wed, Aug 24, 2011 at 8:12 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> It seems to me the fastest path to very secure, very-hard-to-lose
> bitcoin wallets is multi-signature transactions.
>
> To organize this discussion: first, does everybody agree?
>
> ByteCoin pointed to a research paper that gives a scheme for splitting
> a private key between two people, neither of which every knows the
> full key, but, together, both can DSA-sign transactions.  That's very
> cool, but it involves high-end cutting-edge crypto like zero-knowledge
> proofs that I know very little about (are implementations available?
> are they patented?  have they been thoroughly vetted/tested?  etc).
> So I'm assuming that is NOT the fastest way to solving the problem.
>
> If anybody has some open-source, patent-free, thoroughly-tested code
> that already does DSA-key-splitting, speak up please.
>
>
> I've been trying to get consensus on low-level 'standard' transactions
> for transactions that must be signed by 2 or 3 keys; current draft
> proposal is here:
>  https://gist.github.com/39158239e36f6af69d6f
> and discussion on the forums here:
>  https://bitcointalk.org/index.php?topic=38928.0
> ... and there is a pull request that is relevant here:
>  https://github.com/bitcoin/bitcoin/pull/319
>
>
> I still think it is a good idea to enable a set of new 'standard'
> multisignature transactions, so they get relayed and included into
> blocks.  I don't want to let "the perfect become the enemy of the
> good" -- does anybody disagree?
>
> The arguments against are that if the proposed standard transactions
> are accepted, then the next step is to define a new kind of bitcoin
> address that lets coins be deposited into a multisignature-protected
> wallet.
>
> And those new as-yet-undefined bitcoin addresses will have to be 2 or
> 3 times as big as current bitcoin addresses, and will be incompatible
> with old clients.
>
> So, if we are going to have new releases that are incompatible with
> old clients why not do things right in the first place, implement or
> enable opcodes so the new bitcoin addresses can be small, and schedule
> a block chain split for N months from now.
>
> My biggest worry is we'll say "Sure, it'll only take a couple days to
> agree on how to do it right" and six months from now there is still no
> consensus on exactly which digest function should be used, or whether
> or not there should be a new opcode for arbitrary boolean expressions
> involving keypairs.  And people's wallets continue to get lost or
> stolen.
>
>
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> EMC VNX: the world's simplest storage, starting under $10K
> The only unified storage solution that offers unified management
> Up to 160% more powerful than alternatives and 25% more efficient.
> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/887027f8/attachment.html>

From gmaxwell at gmail.com  Wed Aug 24 15:45:09 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 24 Aug 2011 11:45:09 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <CAAS2fgS+YLf3hP+VbMiQAZ8S7fNrno1g6pi33825MFWiTg7=4A@mail.gmail.com>

On Wed, Aug 24, 2011 at 11:12 AM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> It seems to me the fastest path to very secure, very-hard-to-lose
> bitcoin wallets is multi-signature transactions.
>
> To organize this discussion: first, does everybody agree?

It's a good tool which we should have in our tool-belt.

Though it's a bit of when you are a hammer all problems are nails.
This issue can also be addressed by things like external private key
protectors.  But someone would have to build one.

Someone might be more inclined to build such a thing if the software
had good support for tracking public keys without private keys, and
generating unsigned transactions for export to the device for signing.

> ByteCoin pointed to a research paper that gives a scheme for splitting
> a private key between two people, neither of which every knows the
[snip]
> So I'm assuming that is NOT the fastest way to solving the problem.

Regardless, it might be useful to contact the authors.

> I still think it is a good idea to enable a set of new 'standard'
> multisignature transactions, so they get relayed and included into
> blocks. ?I don't want to let "the perfect become the enemy of the
> good" -- does anybody disagree?

I agree.

> The arguments against are that if the proposed standard transactions
> are accepted, then the next step is to define a new kind of bitcoin
> address that lets coins be deposited into a multisignature-protected
> wallet.
>
> And those new as-yet-undefined bitcoin addresses will have to be 2 or
> 3 times as big as current bitcoin addresses, and will be incompatible
> with old clients.
>
> So, if we are going to have new releases that are incompatible with
> old clients why not do things right in the first place, implement or
> enable opcodes so the new bitcoin addresses can be small, and schedule
> a block chain split for N months from now.

One way of doing this would be to have an address which hashes an
ordered concatenation of many addresses (perhaps plus a length
argument). To redeem you provide the public keys which are signing,
plus the addresses which aren't signing, and the receiver validates.

If it can be done, then yes, I agree it would be worth forking the chain.

This _feels_ like something which could and should be done with the
existing (but disabled opcodes).


It's not exclusive, however, with a long N-address address type for
multisig destinations.  We could support that _now_ and defer the
'compressed version' until after people have experience with this
usage.  The only cost would be supporting this address type forever,
which isn't that bad.

It's also important to note that incompatibility wouldn't be complete:
The only limit is that old clients couldn't send funds to escrow
addresses? which is an issue no matter how you encode the information.



From rick at support-intelligence.com  Wed Aug 24 15:55:41 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 24 Aug 2011 08:55:41 -0700
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAAS2fgS+YLf3hP+VbMiQAZ8S7fNrno1g6pi33825MFWiTg7=4A@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<CAAS2fgS+YLf3hP+VbMiQAZ8S7fNrno1g6pi33825MFWiTg7=4A@mail.gmail.com>
Message-ID: <CAJ1JLtuukHSPOamKFbexjRMC=Gs2pt=hbgbhthM7-eG9YQoBcg@mail.gmail.com>

On Wed, Aug 24, 2011 at 8:45 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Aug 24, 2011 at 11:12 AM, Gavin Andresen
> <gavinandresen at gmail.com> wrote:
> > It seems to me the fastest path to very secure, very-hard-to-lose
> > bitcoin wallets is multi-signature transactions.
> >
> > To organize this discussion: first, does everybody agree?
>
> It's a good tool which we should have in our tool-belt.
>
> Though it's a bit of when you are a hammer all problems are nails.
> This issue can also be addressed by things like external private key
> protectors.  But someone would have to build one.
>
> Someone might be more inclined to build such a thing if the software
> had good support for tracking public keys without private keys, and
> generating unsigned transactions for export to the device for signing.
>
> > ByteCoin pointed to a research paper that gives a scheme for splitting
> > a private key between two people, neither of which every knows the
> [snip]
> > So I'm assuming that is NOT the fastest way to solving the problem.
>
> Regardless, it might be useful to contact the authors.
>
> > I still think it is a good idea to enable a set of new 'standard'
> > multisignature transactions, so they get relayed and included into
> > blocks.  I don't want to let "the perfect become the enemy of the
> > good" -- does anybody disagree?
>
> I agree.
>
> > The arguments against are that if the proposed standard transactions
> > are accepted, then the next step is to define a new kind of bitcoin
> > address that lets coins be deposited into a multisignature-protected
> > wallet.
> >
> > And those new as-yet-undefined bitcoin addresses will have to be 2 or
> > 3 times as big as current bitcoin addresses, and will be incompatible
> > with old clients.
> >
> > So, if we are going to have new releases that are incompatible with
> > old clients why not do things right in the first place, implement or
> > enable opcodes so the new bitcoin addresses can be small, and schedule
> > a block chain split for N months from now.
>
> One way of doing this would be to have an address which hashes an
> ordered concatenation of many addresses (perhaps plus a length
> argument). To redeem you provide the public keys which are signing,
> plus the addresses which aren't signing, and the receiver validates.
>
> If it can be done, then yes, I agree it would be worth forking the chain.
>
> This _feels_ like something which could and should be done with the
> existing (but disabled opcodes).
>
>
> It's not exclusive, however, with a long N-address address type for
> multisig destinations.  We could support that _now_ and defer the
> 'compressed version' until after people have experience with this
> usage.  The only cost would be supporting this address type forever,
> which isn't that bad.
>
> It's also important to note that incompatibility wouldn't be complete:
> The only limit is that old clients couldn't send funds to escrow
> addresses? which is an issue no matter how you encode the information.
>
>
> ------------------------------------------------------------------------------
> EMC VNX: the world's simplest storage, starting under $10K
> The only unified storage solution that offers unified management
> Up to 160% more powerful than alternatives and 25% more efficient.
> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/4805602a/attachment.html>

From dhuff at jrbobdobbs.org  Wed Aug 24 16:05:02 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Wed, 24 Aug 2011 11:05:02 -0500
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <CAPiTikUi7vN-Z_7i0rYUAHbdiPnwAgpZZOLLCb1z3pjV733DTw@mail.gmail.com>

On Aug 24, 2011 10:12 AM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
>
> If anybody has some open-source, patent-free, thoroughly-tested code
> that already does DSA-key-splitting, speak up please.
>

If the caveat of a trusted third party is acceptable and, as greg mentioned,
if there was a way to export unsigned transactions and then import/broadcast
after signing this becomes fairly trivial.

Shamir's + 3rd party to combine and sign means no protocol level changes.

Process could work something like this:

Parties agree to endpoint destination address and provide it to third party.
Third party generates key and provides shares to each party in the txn and
the resulting address to both as well.
Third party destroys (preferably, never stores) private key.
Sender sends to address.
Both parties after confirmation of reciept of goods or what have you provide
shares back to third party who uses the privkey to xfer inputs to the
previously agreed upon destination subtracting their fee.

This resembles more traditional escrow setups and relies on the trust of a
third party, which is not ideal, but would be fairly simple to implement
until the other proposals could be better investigated and implemented.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/a6faa861/attachment.html>

From luke at dashjr.org  Wed Aug 24 16:15:34 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 24 Aug 2011 12:15:34 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
	schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <201108241215.36847.luke@dashjr.org>

On Wednesday, August 24, 2011 11:12:10 AM Gavin Andresen wrote:
> So, if we are going to have new releases that are incompatible with
> old clients why not do things right in the first place, implement or
> enable opcodes so the new bitcoin addresses can be small, and schedule
> a block chain split for N months from now.

If a block chain split is to occur, it makes sense to try to fix as many 
problems as possible:
- Replace hard limits (like 1 MB maximum block size) with something that can
  dynamically adapt with the times. Maybe based on difficulty so it can't be
  gamed?
- Adjust difficulty every block, without limits, based on a N-block sliding
  window. I think this would solve the issue when the hashrate drops
  overnight, but maybe also add a block time limit, or perhaps include the
  "current block" in the difficulty calculation?
- 21 million really isn't enough if Bitcoin ever takes off, even with
  100,000,000 units per BTC. Replacing the "Satoshi" 64-bit integers with
  "Satoshi" variable-size fractions (ie, infinite numerator + denominator)
  would create infinite possibilities of future divison, allowing people to
  not only do nBTC and pBTC, but also exact 1/3 of any quantity. Transaction
  size would go up based on the number of primes involved in an amount, which 
  would encourage discarding annoying primes in transaction fees.
- Standardize everything on network (big) endian.

I'm sure others can think of other chain-splitting fixes that wouldn't be too 
much work to fix.



From pieter.wuille at gmail.com  Wed Aug 24 16:18:54 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 24 Aug 2011 18:18:54 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
Message-ID: <20110824161853.GA29981@ulyssis.org>

On Wed, Aug 24, 2011 at 11:12:10AM -0400, Gavin Andresen wrote:
> So, if we are going to have new releases that are incompatible with
> old clients why not do things right in the first place, implement or
> enable opcodes so the new bitcoin addresses can be small, and schedule
> a block chain split for N months from now.

What was the reason for disabling these opcodes in the first place? I can
understand wanting to prevent excessive signature-verification, or limitation
of arithmetic to a limited amount of bits, but completely disabling all
arithmetic beyond addition and subtraction, and all bitwise operations seems
very limiting to me. Thus, if we agree to do a future incompatible update,
i would vote to re-enable these, and maybe allow arithmetic up to 520 or
1024 bits numbers.

While we're at it, some additional opcodes could be useful. Either a custom
operator to do boolean evaluation, or a few more lowlevel operations. Given
the presence of bitwise operators, you could have scripts that process a
sequence of pubkey/signature pairs, build up a number in which each bit
corresponds to a valid signature, and then do some bitwise checks on this
number. I'd argue that a "count number of bits set in number" opcode would
be very useful for this.

In short: I'm in favor of re-enabling opcodes, and possibly adding an
OP_BITCOUNT operation.

-- 
Pieter



From luke at dashjr.org  Wed Aug 24 16:26:20 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 24 Aug 2011 12:26:20 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
	schedule a blockchain split?
In-Reply-To: <20110824161853.GA29981@ulyssis.org>
References: <20110824161853.GA29981@ulyssis.org>
Message-ID: <201108241226.26307.luke@dashjr.org>

On Wednesday, August 24, 2011 12:18:54 PM Pieter Wuille wrote:
> While we're at it, some additional opcodes could be useful.

Also:
- Access to the block height it's part of. While this can be abused,
  transactions accessing it can be given a big red flag in the GUI or
  something. Legitimate uses include "Clearcoin" functionality in the script
  itself.
- Remove the 100 confirmation requirement for spending generated coins. If
  they are respent before 100 confirmations, clients can/should flag the new
  outputs as also "generated" or "recently generated" so recipients are aware
  of the risk. It would be especially handy for pool operators if blocks could
  contain a transaction spending one of the same block's generation in
  addition to other non-generated coins, and specifying the full amount as a
  fee to safely add coins to the generation. Right now, if I were to embed a
  25 BTC fee-only transaction, there is a risk that Deepbit could grab that
  transaction for their own, and fork. By making pool payouts all generated,
  there is no risk to paying invalid blocks instantly (since if the block is
  invalid, so is the payout made in it).



From gmaxwell at gmail.com  Wed Aug 24 16:46:42 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 24 Aug 2011 12:46:42 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <201108241215.36847.luke@dashjr.org>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
Message-ID: <CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>

On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:

> - Replace hard limits (like 1 MB maximum block size) with something that can
> dynamically adapt with the times. Maybe based on difficulty so it can't be
> gamed?

Too early for that.

> - Adjust difficulty every block, without limits, based on a N-block sliding
> ?window. I think this would solve the issue when the hashrate drops
> ?overnight, but maybe also add a block time limit, or perhaps include the
> ?"current block" in the difficulty calculation?

The quantized scheme limits the amount of difficulty skew miners can
create by lying about timestamps to about a half a percent. A rolling
window with the same time constant would allow much more skew.

> Replacing the "Satoshi" 64-bit integers with
> "Satoshi" variable-size fractions (ie, infinite numerator + denominator)

Increasing precision I would agree with but, sadly, causing people to
need more than 64 bit would create a lot of bugs.

infinite numerator + denominator is absolutely completely and totally
batshit insane. For one, it has weird consequences that the same value
can have redundant encodings.

Most importantly, it suffers factor inflation: If you spend inputs
1/977 1/983 1/991 1/997 the smallest denominator you can use for the
output 948892238557.

Not to mention that the idiots writing financial software can only
barely manage to not use radix-2 floating point on everything. Asking
them to use arbitrary rational numbers with mixed radix will never
fly.

> - Remove the 100 confirmation requirement for spending generated coins. If
>  they are respent before 100 confirmations, clients can/should flag the new
>  outputs as also "generated" or "recently generated" so recipients are aware
> of the risk.

Please lets not make bitcoin _less_ trustworthy.

The 100 block maturity on generated coins is good. The generation from
an orphaning is lost forever like the losing side of a double spend,
but far far worse... because orphaning happens all the time on its own
without any malice.

I agree it's obnoxious that you can't pad your generation payouts
without creating more transactions, but I don't see a solution for
that. Repeat the addresses... make up for it by increasing your payout
threshold.



From theymos at mm.st  Wed Aug 24 17:03:12 2011
From: theymos at mm.st (theymos)
Date: Wed, 24 Aug 2011 12:03:12 -0500
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <1314205392.21042.140258133279217@webmail.messagingengine.com>

On Wed, 24 Aug 2011 11:12 -0400, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> To organize this discussion: first, does everybody agree?

Yes. The feature will be very good.

> I still think it is a good idea to enable a set of new 'standard'
> multisignature transactions, so they get relayed and included into
> blocks.  I don't want to let "the perfect become the enemy of the
> good" -- does anybody disagree?

Please do enable any transactions that seem to be a possible solution.
Even if this client doesn't ever implement any of them, alternative
clients can try them.

> My biggest worry is we'll say "Sure, it'll only take a couple days to
> agree on how to do it right" and six months from now there is still
> no consensus on exactly which digest function should be used, or
> whether or not there should be a new opcode for arbitrary boolean
> expressions involving keypairs.  And people's wallets continue to get
> lost or stolen.

I agree that something should be done with what we have now. It *will*
take months to properly figure out how to add chain-forking features for
this. If we want to consider all of the unrelated feature proposals, it
might take years of discussion...

However, as I said in the forum thread, I think it would be better for
people using this protection to receive at a normal address and then
create new transactions at their end. Then no one has to handle huge
addresses, and the sender will never have to pay abnormal fees or deal
with incompatibilities. There will be a short period of time when the
recipient's money is unprotected, but I think this is worth it. A better
scheme can be made later after chain-forking features are figured out.



From luke at dashjr.org  Wed Aug 24 17:03:45 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 24 Aug 2011 13:03:45 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
	schedule a blockchain split?
In-Reply-To: <CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
Message-ID: <201108241303.47660.luke@dashjr.org>

On Wednesday, August 24, 2011 12:46:42 PM Gregory Maxwell wrote:
> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:
> > - Replace hard limits (like 1 MB maximum block size) with something that
> > can dynamically adapt with the times. Maybe based on difficulty so it
> > can't be gamed?
> 
> Too early for that.

Dynamically adapting would be by design never too early/late. Changing from a 
fixed 1 MB will fork the block chain, which should be a minimized event.

> > - Adjust difficulty every block, without limits, based on a N-block
> > sliding window. I think this would solve the issue when the hashrate
> > drops overnight, but maybe also add a block time limit, or perhaps
> > include the "current block" in the difficulty calculation?
> 
> The quantized scheme limits the amount of difficulty skew miners can
> create by lying about timestamps to about a half a percent. A rolling
> window with the same time constant would allow much more skew.

Depends on the implementation, I'd think.

> > Replacing the "Satoshi" 64-bit integers with
> > "Satoshi" variable-size fractions (ie, infinite numerator + denominator)
> 
> Increasing precision I would agree with but, sadly, causing people to
> need more than 64 bit would create a lot of bugs.
> 
> infinite numerator + denominator is absolutely completely and totally
> batshit insane. For one, it has weird consequences that the same value
> can have redundant encodings.

So? You can already have redundant transactions simply by changing the order 
of inputs/outputs. A good client would minimize the transaction size by 
reducing them, of course.

> Most importantly, it suffers factor inflation: If you spend inputs
> 1/977 1/983 1/991 1/997 the smallest denominator you can use for the
> output 948892238557.

I already tried to address this in my original mail. If I had those 4 coins, I 
would use a denominator of 987 and discard the difference as fees.



From rick at support-intelligence.com  Wed Aug 24 17:07:33 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 24 Aug 2011 10:07:33 -0700
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
Message-ID: <CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>

On Wed, Aug 24, 2011 at 9:46 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:
>
> > - Replace hard limits (like 1 MB maximum block size) with something that
> can
> > dynamically adapt with the times. Maybe based on difficulty so it can't
> be
> > gamed?
>
> Too early for that.
>
>
Could you provide a reference to why in your estimation it is "to early."
 Simpy stating this as fact isn't enough to sway demand.

> - Adjust difficulty every block, without limits, based on a N-block
> sliding
> >  window. I think this would solve the issue when the hashrate drops
> >  overnight, but maybe also add a block time limit, or perhaps include the
> >  "current block" in the difficulty calculation?
>
> The quantized scheme limits the amount of difficulty skew miners can
> create by lying about timestamps to about a half a percent. A rolling
> window with the same time constant would allow much more skew.
>
> > Replacing the "Satoshi" 64-bit integers with
> > "Satoshi" variable-size fractions (ie, infinite numerator + denominator)
>
> Increasing precision I would agree with but, sadly, causing people to
> need more than 64 bit would create a lot of bugs.
>
>
how about we agree that increasing precision is a goal and worry about how
to encode that once its on the road map.



> infinite numerator + denominator is absolutely completely and totally
> batshit insane. For one, it has weird consequences that the same value
> can have redundant encodings.
>
> Most importantly, it suffers factor inflation: If you spend inputs
> 1/977 1/983 1/991 1/997 the smallest denominator you can use for the
> output 948892238557.
>
> Not to mention that the idiots writing financial software can only
> barely manage to not use radix-2 floating point on everything. Asking
> them to use arbitrary rational numbers with mixed radix will never
> fly.
>
> > - Remove the 100 confirmation requirement for spending generated coins.
> If
> >  they are respent before 100 confirmations, clients can/should flag the
> new
> >  outputs as also "generated" or "recently generated" so recipients are
> aware
> > of the risk.
>
> Please lets not make bitcoin _less_ trustworthy.
>
> The 100 block maturity on generated coins is good. The generation from
> an orphaning is lost forever like the losing side of a double spend,
> but far far worse... because orphaning happens all the time on its own
> without any malice.
>
> I agree it's obnoxious that you can't pad your generation payouts
> without creating more transactions, but I don't see a solution for
> that. Repeat the addresses... make up for it by increasing your payout
> threshold.
>
>
> ------------------------------------------------------------------------------
> EMC VNX: the world's simplest storage, starting under $10K
> The only unified storage solution that offers unified management
> Up to 160% more powerful than alternatives and 25% more efficient.
> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/995254b5/attachment.html>

From gmaxwell at gmail.com  Wed Aug 24 17:19:52 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 24 Aug 2011 13:19:52 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
Message-ID: <CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>

On Wed, Aug 24, 2011 at 1:07 PM, Rick Wesson
<rick at support-intelligence.com> wrote:
> On Wed, Aug 24, 2011 at 9:46 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
>> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:
>>
>> > - Replace hard limits (like 1 MB maximum block size) with something that
>> > can
>> > dynamically adapt with the times. Maybe based on difficulty so it can't
>> > be
>> > gamed?
>> Too early for that.
> Could you provide a?reference?to why in your estimation it is "to early."
> ?Simpy stating this as fact isn't enough to sway demand.

Can you provide a reference to this 'demand' a post by Luke isn't
enough to support the claim of demand.

We're not at maximum size right now (thankfully).

We don't know what the network dynamics would look like at that
traffic level. So how could we competently say what the right metrics
would be to get the right behavior there?  Thats what I meant by too
early.



From rick at support-intelligence.com  Wed Aug 24 17:40:49 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Wed, 24 Aug 2011 10:40:49 -0700
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
Message-ID: <CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>

On Wed, Aug 24, 2011 at 10:19 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:

> On Wed, Aug 24, 2011 at 1:07 PM, Rick Wesson
> <rick at support-intelligence.com> wrote:
> > On Wed, Aug 24, 2011 at 9:46 AM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
> >> On Wed, Aug 24, 2011 at 12:15 PM, Luke-Jr <luke at dashjr.org> wrote:
> >>
> >> > - Replace hard limits (like 1 MB maximum block size) with something
> that
> >> > can
> >> > dynamically adapt with the times. Maybe based on difficulty so it
> can't
> >> > be
> >> > gamed?
> >> Too early for that.
> > Could you provide a reference to why in your estimation it is "to early."
> >  Simpy stating this as fact isn't enough to sway demand.
>
> Can you provide a reference to this 'demand' a post by Luke isn't
> enough to support the claim of demand.
>
> how about trend, its a hard limit and as you acknowledged below we are not
there yet; however the trend is for more transactions and we will bump into
the limit. Being good architects we should consider how to scale or
explicitly state why its a good idea not to.

-rick



> We're not at maximum size right now (thankfully).
>
> We don't know what the network dynamics would look like at that
> traffic level. So how could we competently say what the right metrics
> would be to get the right behavior there?  Thats what I meant by too
> early.
>

no one ever "knows" what the network dynamics are going to be in developing
infrastructure -- so lets not kid our selves, in being able to estimate this
before the code is even written.

-rick
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/7ffd3502/attachment.html>

From bgroff at lavabit.com  Wed Aug 24 17:47:55 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Wed, 24 Aug 2011 13:47:55 -0400 (EDT)
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <21952.77.109.139.87.1314208075.squirrel@lavabit.com>

"Gavin Andresen" <gavinandresen at gmail.com> wrote:

> It seems to me the fastest path to very secure, very-hard-to-lose
> bitcoin wallets is multi-signature transactions.
>
> To organize this discussion: first, does everybody agree?

I agree.  For example, a corporate wallet can require threshold signatures
to disburse.  Or for personal use you can have a couple of additional
keys, one stored on a secure device for confirmation and one offline as
emergency backup if you lose your secure device.

...

> I've been trying to get consensus on low-level 'standard' transactions
> for transactions that must be signed by 2 or 3 keys; current draft
> proposal is here:
>  https://gist.github.com/39158239e36f6af69d6f
> and discussion on the forums here:
>  https://bitcointalk.org/index.php?topic=38928.0
> ... and there is a pull request that is relevant here:
>  https://github.com/bitcoin/bitcoin/pull/319

For context - I am the author of the latter.

> I still think it is a good idea to enable a set of new 'standard'
> multisignature transactions, so they get relayed and included into
> blocks.  I don't want to let "the perfect become the enemy of the
> good" -- does anybody disagree?
>
> The arguments against are that if the proposed standard transactions
> are accepted, then the next step is to define a new kind of bitcoin
> address that lets coins be deposited into a multisignature-protected
> wallet.
>
> And those new as-yet-undefined bitcoin addresses will have to be 2 or
> 3 times as big as current bitcoin addresses, and will be incompatible
> with old clients.

Incompatible at the UI level, but not at the block chain level.  Changing
the block chain rules will be quite an undertaking.  You will have to set
a block number for the rule change a few months in advance and will have
to get agreement from the pools.  I think it is important to increase
trust in the bitcoin ecosystem sooner than that.  The current flat
exchange rate and difficulty may be a signal that people are getting risk
averse.

> So, if we are going to have new releases that are incompatible with
> old clients why not do things right in the first place, implement or
> enable opcodes so the new bitcoin addresses can be small, and schedule
> a block chain split for N months from now.
>
> My biggest worry is we'll say "Sure, it'll only take a couple days to
> agree on how to do it right" and six months from now there is still no
> consensus on exactly which digest function should be used, or whether
> or not there should be a new opcode for arbitrary boolean expressions
> involving keypairs.  And people's wallets continue to get lost or
> stolen.

That is my worry too.  We already have working code for this (pull 319),
and the addresses are not so long as to be unusable.  I hope we can move
forward on the existing code and in parallel move forward on block chain
rule proposals at an agreed upon block number.

--
Bobby Groff





From gavinandresen at gmail.com  Wed Aug 24 17:57:11 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 24 Aug 2011 13:57:11 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
Message-ID: <CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>

This discussion is convincing me that scheduling a blockchain split is
definitely the wrong idea at this time.  We can revisit in N months,
when we've got a roadmap and nice unit tests and a bunch of
well-tested patches for fixing all of the things that aught to be
fixed when we DO decide a blockchain split is necessary.

There seems to be rough consensus that new, imperfect standard
transactions are a good-enough short term solution.

-- 
--
Gavin Andresen



From jgarzik at exmulti.com  Wed Aug 24 18:45:58 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 24 Aug 2011 14:45:58 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
Message-ID: <CA+8xBpefWGE02SWRe=6GdNKc1jwdDQu-HEvDiEF_pw2XLX_7rQ@mail.gmail.com>

On Wed, Aug 24, 2011 at 1:57 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> This discussion is convincing me that scheduling a blockchain split is
> definitely the wrong idea at this time. ?We can revisit in N months,

Strongly agreed...

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From decker.christian at gmail.com  Wed Aug 24 19:05:42 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 24 Aug 2011 21:05:42 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <CALxbBHXAcRse9YE-evKNmDut684vjkUMHkbx+8E+aTNT5wMg5A@mail.gmail.com>

Sorry for keeping this short but I'm in holiday and reading/writing on my
phone is a pain.

On Aug 24, 2011 4:12 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
>
> It seems to me the fastest path to very secure, very-hard-to-lose
> bitcoin wallets is multi-signature transactions.
>
> To organize this discussion: first, does everybody agree?
It's a great way for companies to secure their assets.

>
> ByteCoin pointed to a research paper that gives a scheme for splitting
> a private key between two people, neither of which every knows the
> full key, but, together, both can DSA-sign transactions.  That's very
> cool, but it involves high-end cutting-edge crypto like zero-knowledge
> proofs that I know very little about (are implementations available?
> are they patented?  have they been thoroughly vetted/tested?  etc).
> So I'm assuming that is NOT the fastest way to solving the problem.
>
> If anybody has some open-source, patent-free, thoroughly-tested code
> that already does DSA-key-splitting, speak up please.
Since. we have the possibility o add other signature schemes to the protocol
we could add an rsa-like scheme which allows m-out-of-n signatures. It works
by distributing shares of the key which are points on a curve having the
actual key as 0-value. It does not require special length for the key so if
ecdsa allows something similar there need not be anything changed.
>
> I've been trying to get consensus on low-level 'standard' transactions
> for transactions that must be signed by 2 or 3 keys; current draft
> proposal is here:
>  https://gist.github.com/39158239e36f6af69d6f
> and discussion on the forums here:
>  https://bitcointalk.org/index.php?topic=38928.0
> ... and there is a pull request that is relevant here:
>  https://github.com/bitcoin/bitcoin/pull/319
>
>
> I still think it is a good idea to enable a set of new 'standard'
> multisignature transactions, so they get relayed and included into
> blocks.  I don't want to let "the perfect become the enemy of the
> good" -- does anybody disagree?

Would be a first step.
>
> The arguments against are that if the proposed standard transactions
> are accepted, then the next step is to define a new kind of bitcoin
> address that lets coins be deposited into a multisignature-protected
> wallet.
>
> And those new as-yet-undefined bitcoin addresses will have to be 2 or
> 3 times as big as current bitcoin addresses, and will be incompatible
> with old clients.
>
> So, if we are going to have new releases that are incompatible with
> old clients why not do things right in the first place, implement or
> enable opcodes so the new bitcoin addresses can be small, and schedule
> a block chain split for N months from now.
>
> My biggest worry is we'll say "Sure, it'll only take a couple days to
> agree on how to do it right" and six months from now there is still no
> consensus on exactly which digest function should be used, or whether
> or not there should be a new opcode for arbitrary boolean expressions
> involving keypairs.  And people's wallets continue to get lost or
> stolen.
>
>

Just wanted to point you in that alternative direction as it would possibly
keep backward compatibility and allow multisignature.

Regards,
Chris
>
> --
> --
> Gavin Andresen
>
>
------------------------------------------------------------------------------
> EMC VNX: the world's simplest storage, starting under $10K
> The only unified storage solution that offers unified management
> Up to 160% more powerful than alternatives and 25% more efficient.
> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/e6a07cf3/attachment.html>

From luke at dashjr.org  Wed Aug 24 19:21:02 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 24 Aug 2011 15:21:02 -0400
Subject: [Bitcoin-development] [PATCH] Boost filesystem v3 support
In-Reply-To: <CA+8xBpefktyYduS8LN1Ai++Y3OaYf_Torvid8=A-x05LB992QQ@mail.gmail.com>
References: <201108191248.36093.luke@dashjr.org>
	<CA+8xBpefktyYduS8LN1Ai++Y3OaYf_Torvid8=A-x05LB992QQ@mail.gmail.com>
Message-ID: <201108241521.04686.luke@dashjr.org>

On Wednesday, August 24, 2011 3:19:08 PM Jeff Garzik wrote:
> On Fri, Aug 19, 2011 at 12:48 PM, Luke-Jr <luke at dashjr.org> wrote:
> > This patch conditionally adapts the one line needed to support boost
> > filesystem version 3 (default in Boost 1.46+ and required for 1.48+)
> > 
> > I have tested it with Boost 1.41.0 to verify it still works on these
> > older versions too.
> 
> Your change appears to be technically correct.  It is disappointing
> for #ifdefs to crap up the code, though...

It's only one line, and can be removed when the old APIs are sufficiently 
removed.



From jgarzik at exmulti.com  Wed Aug 24 19:19:08 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 24 Aug 2011 15:19:08 -0400
Subject: [Bitcoin-development] [PATCH] Boost filesystem v3 support
In-Reply-To: <201108191248.36093.luke@dashjr.org>
References: <201108191248.36093.luke@dashjr.org>
Message-ID: <CA+8xBpefktyYduS8LN1Ai++Y3OaYf_Torvid8=A-x05LB992QQ@mail.gmail.com>

On Fri, Aug 19, 2011 at 12:48 PM, Luke-Jr <luke at dashjr.org> wrote:
> This patch conditionally adapts the one line needed to support boost
> filesystem version 3 (default in Boost 1.46+ and required for 1.48+)
>
> I have tested it with Boost 1.41.0 to verify it still works on these older
> versions too.

Your change appears to be technically correct.  It is disappointing
for #ifdefs to crap up the code, though...

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Wed Aug 24 19:29:20 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 24 Aug 2011 15:29:20 -0400
Subject: [Bitcoin-development] [PATCH] Boost filesystem v3 support
In-Reply-To: <201108241521.04686.luke@dashjr.org>
References: <201108191248.36093.luke@dashjr.org>
	<CA+8xBpefktyYduS8LN1Ai++Y3OaYf_Torvid8=A-x05LB992QQ@mail.gmail.com>
	<201108241521.04686.luke@dashjr.org>
Message-ID: <CA+8xBpf1Xxe4b8xQFvSKZS2Dz=3qUOuvn3X1vrSLW_Wmr_UAMw@mail.gmail.com>

On Wed, Aug 24, 2011 at 3:21 PM, Luke-Jr <luke at dashjr.org> wrote:
> On Wednesday, August 24, 2011 3:19:08 PM Jeff Garzik wrote:
>> On Fri, Aug 19, 2011 at 12:48 PM, Luke-Jr <luke at dashjr.org> wrote:
>> > This patch conditionally adapts the one line needed to support boost
>> > filesystem version 3 (default in Boost 1.46+ and required for 1.48+)
>> >
>> > I have tested it with Boost 1.41.0 to verify it still works on these
>> > older versions too.
>>
>> Your change appears to be technically correct. ?It is disappointing
>> for #ifdefs to crap up the code, though...
>
> It's only one line, and can be removed when the old APIs are sufficiently
> removed.

Yeah, I think it is fair to apply.  Just saying... a nicer version
would be... nice.  Most projects work a bit to hide this stuff in
headers, so that the actual code is a bit clean.

Now, this is a general guideline, not a hard rule.  We have plenty of
#ifdef windows code already, for example.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From gmaxwell at gmail.com  Wed Aug 24 20:29:06 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 24 Aug 2011 16:29:06 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CALxbBHXAcRse9YE-evKNmDut684vjkUMHkbx+8E+aTNT5wMg5A@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<CALxbBHXAcRse9YE-evKNmDut684vjkUMHkbx+8E+aTNT5wMg5A@mail.gmail.com>
Message-ID: <CAAS2fgSwkvcpFTUAAEdXg2upGTXfToztS_bKfUNbUGcvRJ9xOQ@mail.gmail.com>

On Wed, Aug 24, 2011 at 3:05 PM, Christian Decker
<decker.christian at gmail.com> wrote:
> we could add an rsa-like scheme which allows m-out-of-n signatures. It works
> by distributing shares of the key which are points on a curve having the
> actual key as 0-value. It does not require special length for the key so if
> ecdsa allows something similar there need not be anything changed.

This works fine for ECC.  But it requires that the composite key
signer has simultaneous access to all the key-parts, so it doesn't
solve the "my PC has malware" problem.



From dhuff at jrbobdobbs.org  Wed Aug 24 22:27:42 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Wed, 24 Aug 2011 17:27:42 -0500
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAAS2fgSwkvcpFTUAAEdXg2upGTXfToztS_bKfUNbUGcvRJ9xOQ@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<CALxbBHXAcRse9YE-evKNmDut684vjkUMHkbx+8E+aTNT5wMg5A@mail.gmail.com>
	<CAAS2fgSwkvcpFTUAAEdXg2upGTXfToztS_bKfUNbUGcvRJ9xOQ@mail.gmail.com>
Message-ID: <CAPiTikUY+7c8gPxPf-mvUQgFh-G1xEy0Mo_5rf1NAObf15keTw@mail.gmail.com>

On Aug 24, 2011 3:29 PM, "Gregory Maxwell" <gmaxwell at gmail.com> wrote:
>
> On Wed, Aug 24, 2011 at 3:05 PM, Christian Decker
> <decker.christian at gmail.com> wrote:
> > we could add an rsa-like scheme which allows m-out-of-n signatures. It
works
> > by distributing shares of the key which are points on a curve having the
> > actual key as 0-value. It does not require special length for the key so
if
> > ecdsa allows something similar there need not be anything changed.
>
> This works fine for ECC.  But it requires that the composite key
> signer has simultaneous access to all the key-parts, so it doesn't
> solve the "my PC has malware" problem.

I don't think anything simple enough to actually be used by people in
general does. Same concept as what I proposed earlier before nanotube gave
me the context for Gavin's intent on irc.

Now that I'm understanding the use case I really think the best way to go
about this initially is like you said earlier.

Provide methods to export/import unsigned txns, provide methods to run the
GUI in a way that can track your own addresses with only pubkeys available
to the client, provide methods to sign and import/export/broadcast signed
txns.

With these tools offline wallets become feasible. Combined with wallet
crypto I think this is really the best that can be done to protect users
from themselves in a way that isn't too complicated for them to actually
use.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110824/b20c936f/attachment.html>

From gronager at ceptacle.com  Thu Aug 25 07:39:12 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 25 Aug 2011 09:39:12 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
	schedule a blockchain split?
In-Reply-To: <CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
Message-ID: <D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>

Hi Gavin (the list escaped the cc...),

I participated also in the hacakathon Sunday @ OnlyOneTV and I felt that this had a strong chance to diverge. So - yes - I agree - no "constitution" changes now. Further, I have thought later on on the analogy of a clerk and a safe.

WHen you enter the bank you hand over your money to the clerk (one key) - then after the clerks wallet has been filled over the day _he_ transfers the money to the safe (3 keys). My point is do we really need the customer to bypass the clerk and have 3 key addresses, or could we just leave it to the/a client to implement the multisign transaction after the money has been received - as a transfer to a safe? This would greatly simplify the problem and cover the vast majority of use cases. Not covered in this is huge single transfers where the intruder of a single key system finds it profitable to reveal their intrusion by grabbing the entire wallet.

Put in another way - do we *really* need to couple the securing of the wallet to creating a new address type ?

Cheers,

M

On 24/08/2011, at 19:57, Gavin Andresen wrote:

> This discussion is convincing me that scheduling a blockchain split is
> definitely the wrong idea at this time.  We can revisit in N months,
> when we've got a roadmap and nice unit tests and a bunch of
> well-tested patches for fixing all of the things that aught to be
> fixed when we DO decide a blockchain split is necessary.
> 
> There seems to be rough consensus that new, imperfect standard
> transactions are a good-enough short term solution.
> 
> -- 
> --
> Gavin Andresen
> 
> ------------------------------------------------------------------------------
> EMC VNX: the world's simplest storage, starting under $10K
> The only unified storage solution that offers unified management 
> Up to 160% more powerful than alternatives and 25% more efficient. 
> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Owner Ceptacle / NDGF Director, NORDUnet A/S
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 62 14 01
E-mail: gronager at ceptacle.com





From gavinandresen at gmail.com  Thu Aug 25 17:18:24 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 25 Aug 2011 13:18:24 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
	<D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
Message-ID: <CABsx9T0vqbFwTJL2gj0N3FWH7KkEN+0FjRWR9_XqbEuxNMM6Aw@mail.gmail.com>

On Thu, Aug 25, 2011 at 3:39 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> Put in another way - do we *really* need to couple the securing of the wallet to creating a new address type ?

Nope.

I should have been more clear in my initial email and in the
proposal-- I am not proposing anything more than just agreeing on the
very lowest-level infrastructure, so there is a solid foundation upon
which we can build a couple of key very-high-priority features.

I wanted to talk about it now so there is rough consensus on what to
put on the road map, and to get as many smart brains looking at the
proposal and making it as good as possible.  Current proposal is at:
  https://gist.github.com/39158239e36f6af69d6f

I have two issues with it:

1) groffer reports that there's a bug in CHECKMULTISIG (pops too many
arguments off the stack), so perhaps we should avoid using it at all.
Fixing the bug would change its behavior, and is not an option because
that would cause a blockchain split. We absolutely need unit tests and
better documentation for how CHECKMULTISIG behaves (perhaps it is
working as intended, and Satoshi just messed up the description of
what it does in the comment).

2) How often will the 1-of-3 and 3-of-3 cases be used? I included them
just for completeness, but perhaps they should be dropped for now so
there is less code to write and test.  I just don't imagine there are
many cases where you have exactly three parties and 1-of-3 or 3-of-3
are required to spend.


-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Thu Aug 25 18:31:49 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 25 Aug 2011 14:31:49 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
	<D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
Message-ID: <CAAS2fgR-frjHrFypvBA0H+kVpm21mzcf8RyBEKVfMnD9LNAfcA@mail.gmail.com>

On Thu, Aug 25, 2011 at 3:39 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
the customer to bypass the clerk and have 3 key addresses, or could we
just leave it to the/a client to implement the multisign transaction
after the money has been received - as a transfer to a safe? This
would greatly simplify the problem and cover the vast majority of use
cases. Not covered in this is huge single transfers where the intruder
of a single key system finds it profitable to reveal their intrusion
by grabbing the entire wallet.

Obviously these things don't need to be hard coupled, since they're
useful independently.   But I don't agree with the premise that being
able to pay directly into an escrow using an address isn't essential
at least as an eventual feature.

The bank analogy falls down because in our threat model people are
replacing the bank teller with a convincing facsimile (malware turning
your computer against you).  Funds can be stolen in a microsecond, so
any exposure isn't good.

Again, I'm not arguing to delay anything? just pointing out that the
ability to have usable addresses (they can be long) that encode a
couple escrow destination.

Perhaps just an address type that can encode any payment script?  User
provides the inputs, sets the outputs plus and additional outputs, and
signs. Client refuses to pay to an address if the resulting
transaction fails IsStandard.

On Thu, Aug 25, 2011 at 1:18 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> 2) How often will the 1-of-3 and 3-of-3 cases be used? I included them
> just for completeness, but perhaps they should be dropped for now so
> there is less code to write and test.  I just don't imagine there are
> many cases where you have exactly three parties and 1-of-3 or 3-of-3
> are required to spend.

3-of-3 in particular seems somewhat important to me (group trust
accounts).  I'd really rather not drop use cases unless we're not
confident that they can't be tested sufficiently simply because it'll
just mean another cycle of testing later someday to test them and,
honestly, a more uphill argument as the usecases get narrower and
narrower.

I'll spend some cycles testing whatever cases make it in.



From pieter.wuille at gmail.com  Thu Aug 25 20:14:54 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 25 Aug 2011 22:14:54 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
Message-ID: <20110825201453.GA28296@ulyssis.org>

On Thu, Aug 25, 2011 at 02:31:49PM -0400, Gregory Maxwell wrote:
> Perhaps just an address type that can encode any payment script?  User
> provides the inputs, sets the outputs plus and additional outputs, and
> signs. Client refuses to pay to an address if the resulting
> transaction fails IsStandard.

On the github pull request I posted a general scheme that can convert arbitrary
expressions over signature-checks (given in RPL notation) to bitcoin scripts.
Maybe we can define an address type that encodes an expression in RPL form (which
should be more compact and more easily parseable)?

That basically just means the usual bitcoin scripts, with two extra pseudo-
instructions: one that represents an address check, one that represents an
pubkey check.

For example (same example as on the pull req), the expression
a1 OR (a2 AND a3) OR COUNT(a4,a5,a6)>1 (with a1-a6 given addresses)
can be given in RPL form as

  ADDR<a1> ADDR<a2> ADDR<a3> BOOLAND BOOLOR ADDR<a4> ADDR<a5>
  ADD ADDR<a6> ADD 1 GREATERTHAN BOOLOR

Which is 13 bytes + 6*20 bytes, instead of the 54 bytes + 6*20 bytes for the
real bitcoin output script.


-- 
Pieter



From gmaxwell at gmail.com  Thu Aug 25 20:29:03 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 25 Aug 2011 16:29:03 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <20110825201026.GA21380@ulyssis.org>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
	<D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
	<CAAS2fgR-frjHrFypvBA0H+kVpm21mzcf8RyBEKVfMnD9LNAfcA@mail.gmail.com>
	<20110825201026.GA21380@ulyssis.org>
Message-ID: <CAAS2fgQJwy80=xNrpuma1hy4UCSstfY+dZUJDo0vzhDZrCeffw@mail.gmail.com>

On Thu, Aug 25, 2011 at 4:10 PM, Pieter Wuille
<pieter.wuille at cs.kuleuven.be> wrote:
> Which is 13 bytes + 6*20 bytes, instead of the 54 bytes + 6*20 bytes for the
> real bitcoin output script.

So 187 bytes in base-58? I think pretty darn good for a destination
with 6 keys and complicated rules. I like that a lot.



From pieter.wuille at gmail.com  Thu Aug 25 21:06:44 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 25 Aug 2011 23:06:44 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAAS2fgQJwy80=xNrpuma1hy4UCSstfY+dZUJDo0vzhDZrCeffw@mail.gmail.com>
References: <201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
	<D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
	<CAAS2fgR-frjHrFypvBA0H+kVpm21mzcf8RyBEKVfMnD9LNAfcA@mail.gmail.com>
	<20110825201026.GA21380@ulyssis.org>
	<CAAS2fgQJwy80=xNrpuma1hy4UCSstfY+dZUJDo0vzhDZrCeffw@mail.gmail.com>
Message-ID: <20110825210642.GA3309@ulyssis.org>

On Thu, Aug 25, 2011 at 04:29:03PM -0400, Gregory Maxwell wrote:
> On Thu, Aug 25, 2011 at 4:10 PM, Pieter Wuille
> <pieter.wuille at cs.kuleuven.be> wrote:
> > Which is 13 bytes + 6*20 bytes, instead of the 54 bytes + 6*20 bytes for the
> > real bitcoin output script.
> 
> So 187 bytes in base-58? I think pretty darn good for a destination
> with 6 keys and complicated rules. I like that a lot.

Some extra estimates:
* single address: 21 bytes (36 characters), 27 bytes script
* 1-out-of-2: 43 bytes (66 characters), 56 bytes script
* 2-out-of-3: 67 bytes (98 characters), 88 bytes script 
* (a and b) or c: 65 bytes (96 characters), 85 bytes script

-- 
Pieter



From decker.christian at gmail.com  Thu Aug 25 21:30:56 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 25 Aug 2011 23:30:56 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CAAS2fgSwkvcpFTUAAEdXg2upGTXfToztS_bKfUNbUGcvRJ9xOQ@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<CALxbBHXAcRse9YE-evKNmDut684vjkUMHkbx+8E+aTNT5wMg5A@mail.gmail.com>
	<CAAS2fgSwkvcpFTUAAEdXg2upGTXfToztS_bKfUNbUGcvRJ9xOQ@mail.gmail.com>
Message-ID: <CALxbBHWYg_OmPcNnckAyRM_rsaeWkUWwQCA=ZLFPuUWCRKiyKQ@mail.gmail.com>

If I remember the details correctly you could combine (lagrange
interpolation) the results of m smaller encryptions/signatures without ever
sharing the secret key share itself. No idea if that is possible with ecdsa
at all, but it sure would solve quite a few problems, as it would allow
several independent servers to share a secret key, sign transactions with
it, but no m-1 compromised machines would endanger the whole balance.
I will definitely look into it when I'm back from holidays.

Cheers,
Cdecker
On Aug 24, 2011 9:29 PM, "Gregory Maxwell" <gmaxwell at gmail.com> wrote:
> On Wed, Aug 24, 2011 at 3:05 PM, Christian Decker
> <decker.christian at gmail.com> wrote:
>> we could add an rsa-like scheme which allows m-out-of-n signatures. It
works
>> by distributing shares of the key which are points on a curve having the
>> actual key as 0-value. It does not require special length for the key so
if
>> ecdsa allows something similar there need not be anything changed.
>
> This works fine for ECC. But it requires that the composite key
> signer has simultaneous access to all the key-parts, so it doesn't
> solve the "my PC has malware" problem.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110825/1c075b51/attachment.html>

From capibara at xs4all.nl  Fri Aug 26 07:48:28 2011
From: capibara at xs4all.nl (Rob Meijer)
Date: Fri, 26 Aug 2011 09:48:28 +0200
Subject: [Bitcoin-development] BitCoin and MinorFs/AppArmor
Message-ID: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>

A few years ago I wrote a least authority based set of filesystems named
MinorFs that worked closely together with AppArmor (suse/ubuntu) to give '
pseudo persistent processes' their own private but decomposable and
delegatable piece of filesystem storage:

http://www.linuxjournal.com/magazine/minorfs
http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/

Currently there is only one perfect fit for MinorFs and that's the stack
AppArmor/MinorFs/E-language-persistent-application. There are some close
fits like running ssh without a passphrase (
http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase )
but these require lots of manual fiddling by the user to get working. The
ssh trick would probably work with bitcoin, but as you can see from the
link above, it would be rather cumbersome.

I am trying to get specs together for rewriting MinorFs (in Python) in a
way that would make it easy and natural for application developers that
want their application to be able to protect user data (like bitcoin
wallets) from mallware running under the same uid as that user.

Currently minorfs granularity is hard fixed to that of the 'pseudo
persistent process', and that granularity is determined as described in
the following link:

http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process

When using pseudo persistent processes, you basically end up with
file-system storage that follows almost all of the modeling principles of
the object capability model. This is great when designing a least
authority program from scratch and writing it in the (object capability)
e-language using its persistence facilities.

Given however that I don't expect bitcoin, openssh, chrome, firefox, or
any other application that would benefit from what MinorFs provides to be
rewritten in E, it seems like the next version of MinorFs should give up
on the purity of its least authority model, and take an approach that
better suits common development languages and practices.

With bitcoin being a project that could benefit most from what MinorFs has
to offer, I would like to ask bitcoin developers to think about what
attributes from the current granularity level (pseudo persistent process)
should be kept, what attributes should be dropped, and what properties
should be added to arrive at an 'id' that is the best fit for granularity
of persistent private storage for bitcoin.

I really want to accommodate bitcoin developer needs in this, so all input
that helps me help you guys to get the next MinorFs version to accommodate
your needs to a level that code to use MinorFs where available can be
added to bitcoin, would be extremely welcome.

Let me know what you think,

Rob




From mike at plan99.net  Fri Aug 26 10:50:00 2011
From: mike at plan99.net (Mike Hearn)
Date: Fri, 26 Aug 2011 12:50:00 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T0vqbFwTJL2gj0N3FWH7KkEN+0FjRWR9_XqbEuxNMM6Aw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
	<D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
	<CABsx9T0vqbFwTJL2gj0N3FWH7KkEN+0FjRWR9_XqbEuxNMM6Aw@mail.gmail.com>
Message-ID: <CANEZrP3r+s3yQrEx6AF_K6guTK5BdR5OiscYUim_Zf-50wvt8A@mail.gmail.com>

> 1) groffer reports that there's a bug in CHECKMULTISIG (pops too many
> arguments off the stack), so perhaps we should avoid using it at all.

What is the bug, exactly? Perhaps it can be worked around.



From mike at plan99.net  Fri Aug 26 11:09:37 2011
From: mike at plan99.net (Mike Hearn)
Date: Fri, 26 Aug 2011 13:09:37 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <20110825201453.GA28296@ulyssis.org>
References: <20110825201453.GA28296@ulyssis.org>
Message-ID: <CANEZrP0OyKSqEZj3UF0ArKFePuTi_HyM2_OZA8zXO5Uf+bAZwA@mail.gmail.com>

> On the github pull request I posted a general scheme that can convert arbitrary
> expressions over signature-checks (given in RPL notation) to bitcoin scripts.
> Maybe we can define an address type that encodes an expression in RPL form (which
> should be more compact and more easily parseable)?

What are the use cases for this?

>From a mobile apps perspective, it doesn't make much sense to have
arbitrary scripts in a user-facing address. The software has to be
able to present some kind of reasonable user interface given an
address, it has to explain what is going to happen to the users money
and so on. From this perspective, doing pattern matching against some
encoded script template is annoying and inefficient. It'd be better to
just define another type of URI for each kind of transaction you wish
to support. This is doubly true because often to do the more
interesting contracts, you need out of band protocols, so the
"address" would probably specify some information that's not in the
final output script, like a rendezvous point.



From mike at plan99.net  Fri Aug 26 11:42:29 2011
From: mike at plan99.net (Mike Hearn)
Date: Fri, 26 Aug 2011 13:42:29 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
Message-ID: <CANEZrP2FYjJXvB=kzu+wBcoGOyL=45QeDqLfyZONxYu-9M50Uw@mail.gmail.com>

> It seems to me the fastest path to very secure, very-hard-to-lose
> bitcoin wallets is multi-signature transactions.

Agreed.

That said I'm not sure it makes sense for payers to care about the
details of how somebody is protecting their wallets (which is what new
address types means). It's possible for a users software to notice
inbound payments to a regular Bitcoin address and then immediately
respend them to multi-signed outputs. This way key management can be
simpler as you don't need to integrate it with your shopping cart
software or anything like that - you can just do the usual thing of
pre-generating a few hundred thousand addresses, fill up your cart
implementation and go. When a payment is received, your wallet
software can keep an eye on how much unlocked balance it has and start
locking value once it goes over a pre-set amount, or use any other
policy the user might have.

This fits with my belief that we'll eventually move away from senders
attaching tx fees, instead receivers will respend the fee-less
transaction adding whatever fee they believe is appropriate (eg, maybe
it's very low in the case of a buyer with good reputation, or higher
for unknown buyers). It doesn't make a whole lot of sense for buyers
to have to attach more fees just because the merchant is using complex
wallet policies.

Whitelisting the basic CHECKMULTISIG form (assuming it can be made to
work) seems uncontroversial, why not do it today? The forms designed
to make fancier addresses be embeddable inside QRcodes, can come later
if people feel it's necessary. I'm still not convinced it is.

Once malware can't just email wallets to the attacker, or steal the
keys when the user decrypts due to a second factor, the next easiest
attack is to that malware can rewrite addresses on-screen as it sees
fit, forwarding small payments so the user doesn't notice then
stealing a big one. To solve that, Bitcoin addresses need to contain
not only a pubkey[hash] but some kind of endpoint the second factor
can use to verify ownership of the key. It can be discussed later, I
don't think there are many possible designs here so it shouldn't be
too controversial.



From gavinandresen at gmail.com  Fri Aug 26 19:44:59 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 26 Aug 2011 15:44:59 -0400
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CANEZrP2FYjJXvB=kzu+wBcoGOyL=45QeDqLfyZONxYu-9M50Uw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<CANEZrP2FYjJXvB=kzu+wBcoGOyL=45QeDqLfyZONxYu-9M50Uw@mail.gmail.com>
Message-ID: <CABsx9T1RnwLZkBwOipXsscDUbMoiikFTbb2WMkGxhGDO9je3zA@mail.gmail.com>

> Whitelisting the basic CHECKMULTISIG form (assuming it can be made to
> work) seems uncontroversial, why not do it today?

That seems like the right way forward.

I just wrote a unit test and stepped through the CHECKMULTISIG code to
see exactly what the bug is, and the offending line is:
   797	                    int isig = ++i;
   798	                    i += nSigsCount;

It should be just   int isig = i;

The result is CHECKMULTISIG expects one extra item on the stack, so
the workaround would be a standard transaction type of the form:

scriptSig: OP_0 sig1...m
scriptPubKey: m pubkey1...n  n OP_CHECKMULTISIG


-- 
--
Gavin Andresen



From pieter.wuille at gmail.com  Fri Aug 26 21:30:11 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 26 Aug 2011 23:30:11 +0200
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CANEZrP0OyKSqEZj3UF0ArKFePuTi_HyM2_OZA8zXO5Uf+bAZwA@mail.gmail.com>
References: <20110825201453.GA28296@ulyssis.org>
	<CANEZrP0OyKSqEZj3UF0ArKFePuTi_HyM2_OZA8zXO5Uf+bAZwA@mail.gmail.com>
Message-ID: <20110826213009.GA22361@ulyssis.org>

On Fri, Aug 26, 2011 at 01:09:37PM +0200, Mike Hearn wrote:
> > On the github pull request I posted a general scheme that can convert arbitrary
> > expressions over signature-checks (given in RPL notation) to bitcoin scripts.
> > Maybe we can define an address type that encodes an expression in RPL form (which
> > should be more compact and more easily parseable)?
> 
> What are the use cases for this?
> 
> From a mobile apps perspective, it doesn't make much sense to have
> arbitrary scripts in a user-facing address. The software has to be
> able to present some kind of reasonable user interface given an
> address, it has to explain what is going to happen to the users money
> and so on. From this perspective, doing pattern matching against some
> encoded script template is annoying and inefficient. It'd be better to
> just define another type of URI for each kind of transaction you wish
> to support. This is doubly true because often to do the more
> interesting contracts, you need out of band protocols, so the
> "address" would probably specify some information that's not in the
> final output script, like a rendezvous point.

You're quite right - currently addresses encode a particular output script,
and the client pattern matches to know how to deal with the incoming funds.
It's far from sure this will remain the case in the future. Maybe we'll have
an out of band protocol over which a request "i want to pay you for item X"
is sent, with the required transaction output as answer.

A generic way for encoding complex transaction scripts in a compact form may
be useful for "manual" playing with them - but I agree that we should
probably wait for a use case for this.

Independent from the question of complex-script-addresses are useful, I do
think it is useful (and possible, see pull req) to allow a class of scripts
that represent boolean expressions over signature checks to pass the
IsStandard() test - that way we make sure that whenever in the future we
want to support creating such an expression, there will at least be a to
encode it in a way that the network will accept it. The only question is
what possible problems there are with accepting them.

-- 
Pieter



From bgroff at lavabit.com  Sat Aug 27 01:15:26 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Fri, 26 Aug 2011 21:15:26 -0400 (EDT)
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T1RnwLZkBwOipXsscDUbMoiikFTbb2WMkGxhGDO9je3zA@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<CANEZrP2FYjJXvB=kzu+wBcoGOyL=45QeDqLfyZONxYu-9M50Uw@mail.gmail.com>
	<CABsx9T1RnwLZkBwOipXsscDUbMoiikFTbb2WMkGxhGDO9je3zA@mail.gmail.com>
Message-ID: <1929.81.218.219.122.1314407726.squirrel@lavabit.com>

>> Whitelisting the basic CHECKMULTISIG form (assuming it can be made to
>> work) seems uncontroversial, why not do it today?
>
> That seems like the right way forward.
>
> I just wrote a unit test and stepped through the CHECKMULTISIG code to
> see exactly what the bug is, and the offending line is:
>    797	                    int isig = ++i;
>    798	                    i += nSigsCount;
>
> It should be just   int isig = i;
>
> The result is CHECKMULTISIG expects one extra item on the stack, so
> the workaround would be a standard transaction type of the form:
>
> scriptSig: OP_0 sig1...m
> scriptPubKey: m pubkey1...n  n OP_CHECKMULTISIG

Right, that is the workaround in pull 319.

There is another disadvantage to CHECKMULTISIG - you currently can only
have 1000 of these in a block.  This is because a CHECKMULTISIG is counted
as 20 sigop operations in GetSigOpCount, and you can have a maximum of
20000 sigops in a block (MAX_BLOCK_SIGOPS).  This is in CheckBlock so
won't change anytime soon.

If you want to use HASH160 based addresses, CHECKMULTISIG looks even less
attractive.  The shortest script with CHECKSIG is something like:

0
OVER 2SWAP CHECKSIG SWAP HASH160 {} EQUAL BOOLAND ADD // n times
m GREATERTHANOREQUAL

( thanks to coblee
https://gist.github.com/39158239e36f6af69d6f#gistcomment-47017 )

I think this is actually as short as the shortest you can do with
CHECKMULTISIG.

Another issue that came up during pull 319 discussion is whether to
support more general cases or more specific cases.  For example, should we
optimize for the 1-of-2, 2-of-2 and 2-of-3 cases or should we just have
one script template for all m-of-n? I would propose focusing on a more
general case for the following reasons:

* It is easier to validate one general algorithm than an expanding set of
special-purpose functions.  For example, I think the most people on this
list can validate the coblee script above for all n and m, but faced with
a bunch of special purpose scripts they might miss a bug.

* We don't have to expose the most general cases to the API, but it would
be nice if we didn't have to keep changing IsStandard as people find use
cases for 2-of-4, etc.  With IsStandard remaining narrow, innovation with
new scripts is stifled because most client won't mine or relay
non-standard transactions.

* It would be less work for third-party software to track this
(blockexplorer, android wallet).

--
Bobby Groff






From bgroff at lavabit.com  Sat Aug 27 01:36:19 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Fri, 26 Aug 2011 21:36:19 -0400 (EDT)
Subject: [Bitcoin-development] New standard transaction types: time to
 schedule a blockchain split?
In-Reply-To: <CABsx9T0vqbFwTJL2gj0N3FWH7KkEN+0FjRWR9_XqbEuxNMM6Aw@mail.gmail.com>
References: <CABsx9T1uw43JuvhEmJP0KCyojsDi1r7v6BaLBHz7wWazduE5iw@mail.gmail.com>
	<201108241215.36847.luke@dashjr.org>
	<CAAS2fgQspsXy1Vw=fNr1FvsDRkEbP6dEcFLgUpK9DrBKXyiWNg@mail.gmail.com>
	<CAJ1JLtsxPG9v-Hwdb-pfgY6GU0Z4it+frFzw_tObVbNC6Xgdjw@mail.gmail.com>
	<CAAS2fgTARAMqMu79Sp4XS4KxmUBWiXebpavHWr-EdLZbxS=sTw@mail.gmail.com>
	<CAJ1JLttqEnCjALadESmpntxSobD8Lj1zcXL4S7ghqdhyBrwVNw@mail.gmail.com>
	<CABsx9T12R2dd=Ak7k4N+ZVAyLvJnx9oS0vVjwRa5T+UoCjbEMQ@mail.gmail.com>
	<D0D808D6-DBF2-47C0-A65A-22AE689C861F@ceptacle.com>
	<CABsx9T0vqbFwTJL2gj0N3FWH7KkEN+0FjRWR9_XqbEuxNMM6Aw@mail.gmail.com>
Message-ID: <41177.77.109.139.87.1314408979.squirrel@lavabit.com>

"Gavin Andresen" <gavinandresen at gmail.com> wrote:

> I wanted to talk about it now so there is rough consensus on what to
> put on the road map, and to get as many smart brains looking at the
> proposal and making it as good as possible.  Current proposal is at:
>   https://gist.github.com/39158239e36f6af69d6f
>
> I have two issues with it:
>
> 1) groffer reports that there's a bug in CHECKMULTISIG (pops too many
> arguments off the stack), so perhaps we should avoid using it at all.
> Fixing the bug would change its behavior, and is not an option because
> that would cause a blockchain split. We absolutely need unit tests and
> better documentation for how CHECKMULTISIG behaves (perhaps it is
> working as intended, and Satoshi just messed up the description of
> what it does in the comment).
>
> 2) How often will the 1-of-3 and 3-of-3 cases be used? I included them
> just for completeness, but perhaps they should be dropped for now so
> there is less code to write and test.  I just don't imagine there are
> many cases where you have exactly three parties and 1-of-3 or 3-of-3
> are required to spend.


Here are some additional use cases:

* Long term lock funds, requiring signatures from 2 officers of a company
to disburse (2 of n for n between 3 and 20)

* Short term lock funds, with 2-factor auth to disburse and an additional
2 of n backup in case one of the factors is lost (2-of-2 OR 2-of-n)

* "Escrow" with the the two parties having to agree or one of two backup
observers helping in case of disagreement (2-of-2 OR 2-of-3 OR 2-of-3)

* An options contract where the outcome is triggered by a key being
broadcast: (Ks AND K1) OR (Kr AND K2) - s gets control of funds if K1 is
broadcast, r gets control if K2 is broadcast.







From gavinandresen at gmail.com  Mon Aug 29 20:10:01 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 29 Aug 2011 16:10:01 -0400
Subject: [Bitcoin-development] Project status
Message-ID: <CABsx9T20JDnt5xF24HbJdhHe=MFZ3PDyk2cE+Q4V8iC0rgbASg@mail.gmail.com>

Quick brain dump on a bunch of stuff:

I'd like to get a 0.4 release out, but am still working on a fix for
the deadlock bugs that the new wallet encryption and/or the CWallet
refactoring caused. My short-term plan is to reduce the number of
locks and make sure they're always acquired in a consistent order.
Longer term, I think reworking the design to be based on
boost::asio and use fewer threads is probably the right thing to do.

Other things on the 0.4 TODO list:  block chain checkpoint (got a PULL
for that, thanks).  Updated list of hard-coded seed nodes (nanotube
did that last time). Pieter's dump/import privkey patch.

After my talk at the conference, Alex Waters approached me about being
the core bitcoin Q/A lead; he'll be working on creating test plans,
keeping on top of the issues list, testing new features, and
suggesting improvements to the code/test/release process.  And
whatever else he thinks needs to be done to improve core bitcoin.

I'll be rewriting the m-of-n signature "standard transaction" proposal
to mitigate a potential denial-of-service attack that I realized it
would open up (details later, I don't want to give bad guys ideas).


-- 
--
Gavin Andresen



From luke at dashjr.org  Mon Aug 29 20:15:47 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 29 Aug 2011 16:15:47 -0400
Subject: [Bitcoin-development] Project status
In-Reply-To: <CABsx9T20JDnt5xF24HbJdhHe=MFZ3PDyk2cE+Q4V8iC0rgbASg@mail.gmail.com>
References: <CABsx9T20JDnt5xF24HbJdhHe=MFZ3PDyk2cE+Q4V8iC0rgbASg@mail.gmail.com>
Message-ID: <201108291615.51100.luke@dashjr.org>

On Monday, August 29, 2011 4:10:01 PM Gavin Andresen wrote:
> Other things on the 0.4 TODO list:

Can we get some form of the signmessage method in?



From bitcoin-list at bluematt.me  Tue Aug 30 01:09:03 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 29 Aug 2011 21:09:03 -0400
Subject: [Bitcoin-development] Project status
In-Reply-To: <CABsx9T20JDnt5xF24HbJdhHe=MFZ3PDyk2cE+Q4V8iC0rgbASg@mail.gmail.com>
References: <CABsx9T20JDnt5xF24HbJdhHe=MFZ3PDyk2cE+Q4V8iC0rgbASg@mail.gmail.com>
Message-ID: <1314666543.5889.2.camel@BMThinkPad.lan.bluematt.me>

On Mon, 2011-08-29 at 16:10 -0400, Gavin Andresen wrote:
> Quick brain dump on a bunch of stuff:
> 
> I'd like to get a 0.4 release out, but am still working on a fix for
> the deadlock bugs that the new wallet encryption and/or the CWallet
> refactoring caused. My short-term plan is to reduce the number of
> locks and make sure they're always acquired in a consistent order.
> Longer term, I think reworking the design to be based on
> boost::asio and use fewer threads is probably the right thing to do.
Hopefully working on something that would help do this now.
> 
> Other things on the 0.4 TODO list:  block chain checkpoint (got a PULL
> for that, thanks).  Updated list of hard-coded seed nodes (nanotube
> did that last time). Pieter's dump/import privkey patch.
Also my build update pull would be much appreciated.
> 
> After my talk at the conference, Alex Waters approached me about being
> the core bitcoin Q/A lead; he'll be working on creating test plans,
> keeping on top of the issues list, testing new features, and
> suggesting improvements to the code/test/release process.  And
> whatever else he thinks needs to be done to improve core bitcoin.
NICE




From witchspace81 at gmail.com  Wed Aug 31 14:20:48 2011
From: witchspace81 at gmail.com (John Smith)
Date: Wed, 31 Aug 2011 14:20:48 +0000
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
Message-ID: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>

Hi,

Bitcoin-qt is now feature complete (including wallet encryption), and has
been tested for a while by various people without any major problems.

It is now in status of feature freeze.

The project builds on Windows, MacOSX and Linux using qmake.

Impact to the core bitcoin functions is still minimal, and it can co-exist
with Wx in the source tree. The only thing it lacks compared to the Wx GUI
is translations, currently we only have English, Dutch and Russian.

So IMO, it is ready to be merged.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110831/f5880f9a/attachment.html>

From matt at bluematt.me  Wed Aug 31 15:07:10 2011
From: matt at bluematt.me (Matt Corallo)
Date: Wed, 31 Aug 2011 11:07:10 -0400
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
References: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
Message-ID: <1314803146.2601.5.camel@BMThinkPad.lan.bluematt.me>

On Wed, 2011-08-31 at 14:20 +0000, John Smith wrote:
> Hi,
> 
> Bitcoin-qt is now feature complete (including wallet encryption), and
> has been tested for a while by various people without any major
> problems.
> 
> It is now in status of feature freeze.
> 
> The project builds on Windows, MacOSX and Linux using qmake.
> 
> Impact to the core bitcoin functions is still minimal, and it can
> co-exist with Wx in the source tree. The only thing it lacks compared
> to the Wx GUI is translations, currently we only have English, Dutch
> and Russian.
Would it be possible to port some of the existing translations?
Something is better than nothing so some text that is close to the wx
version can just be copied.
Though IMHO its not a huge deal if qt is merged without all the
translations as IMHO it should be merged soon and then not the default
release GUI until its in tree for a bit (like one release) and some
translations can be built up.
> 
> So IMO, it is ready to be merged.
IMHO it should be merged right after 0.4 is pushed.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110831/b0f12e10/attachment.sig>

