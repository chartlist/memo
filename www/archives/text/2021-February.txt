From luke at dashjr.org  Mon Feb  1 02:28:36 2021
From: luke at dashjr.org (Luke Dashjr)
Date: Mon, 1 Feb 2021 02:28:36 +0000
Subject: [bitcoin-dev] Bitcoin Knots 0.21.0.knots20210130 released
Message-ID: <202102010228.41407.luke@dashjr.org>

Bitcoin Knots version 0.21.0.knots20210130 is now available from:

  https://bitcoinknots.org/files/0.21.x/0.21.0.knots20210130/

This release includes new features, various bug fixes and performance
improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

  https://github.com/bitcoinknots/bitcoin/issues

To receive security and update notifications, please subscribe to:

  https://bitcoinknots.org/list/announcements/join/

For the full release notes and change log, see:

https://github.com/bitcoinknots/bitcoin/blob/v0.21.0.knots20210130/doc/release-notes.md
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 1528 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210201/78dfe7a2/attachment.sig>

From ZmnSCPxj at protonmail.com  Wed Feb  3 02:06:46 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Wed, 03 Feb 2021 02:06:46 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
Message-ID: <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>

Good morning Luke,

I happen to have experience designing digital ASICs, mostly pipelined data processing.
However my experience is limited to larger geometries and in SystemVerilog.

On the technical side, as I understand it (I have been out of that industry for 4 years now, so my knowledge may be obsolete) as you approach lower geometries, you also start approaching analog design.
In our case we were already manually laying out gates and flip-flops (or replacing flip-flops with level-triggered latches and being extra careful with clocks) to squeeze performance (and area) for some of the more boring parts (i.e. just deserialization of data from a high-frequency low bus width to a lower-frequency wide bus width).

Formal correctness proofs are nice, but we were impeded from using those because of the need to manually lay out devices, meaning the netlist did not correspond exactly to an RTL that formal correctness could understand.
Though to be fair most of the circuit was standard RTL->synthesized netlist and formal correctness proofs worked perfectly well for those.
Many of the formal correctness proofs were really about the formal equivalence of the netlist to the RTL; the correctness of the RTL was "proved" by simulation testing.
(to be fair, there were tools to force you to improve coverage by injecting faults to your RTL, e.g. it would virtually flip an `&&` to an `||` and if none of your tests signaled an error it would complain that your test coverage sucked.)
Things might have changed.

A good RTL would embed SystemVerilog Assertions or PSL Assertions as well.
Some formal verification tools can understand a subset of SystemVerilog Assertions / PSL assertions and validate that your RTL conformed to the assertions, which would probably help cut down on the need for RTL simulation.

Overall, my understanding is that smaller geometries are needed only if you want to target a really high performance / unit cost and performance / energy consumption ratios.
That is, you would target smaller geometries for mining.

If you need a secure tr\*sted computing module that does not need to be fast or cheap, just very accurate to the required specification, the larger geometries should be fine and you would be able to live almost entirely in RTL-land without diving into netlist and layout specifications.

A wrinkle here is that licenses for tools from tr\*sted vendors like Synopsys or Cadence are ***expensive***.
What is more, you should really buy two sets of licenses, e.g. do logic synthesis with Synopsys and then formal verification with Cadence, because you do not want to fully tr\*st just one vendor.
Synthesis in particular is a black box and each vendor keeps their particular implementations and tricks secret.

Pointing some funding at the open-source Icarus Verilog might also fit, as it lost its ability to do synthesis more than a decade ago due to inability to maintain.
Icarus Verilog only supports Verilog-2001 and only has very very partial support for SystemVerilog (though to be fair, there is little that SystemVerilog adds that can be used in RTL --- `always_comb` and `always_ff` come to mind, as well as assertions, and I think recent Icarus has started experimental support for those for `always` variants).
Note as well that I heard (at the time when I was in the industry) that some foundries will not even accept a netlist unless it was created by a synthesis tool from one of the major vendors (Synopsys, Cadence, Mentor Graphics, maybe more I have forgotten since).

Regards,
ZmnSCPxj

> folks, hi, please do cc me as i am subscribed "digest", apologies for the inconvenience.
>
> i've been speaking on and off with kanzure, asking his advice about a libre / transparently-developed ASIC / SoC, for some time, since meeting a very interesting person at the Barcelona RISC-V Workshop in 2018.
>
> this person pointed out that FIPS-approved algorithms, implemented in FIPS-approved crypto-chips used in hardware wallets to protect billions to trillions in cryptocurrency assets world-wide are basically asking for trouble.? i heard 3rd-hand that the constants used in the original bitcoin protocol were very deliberately changed from those approved by FIPS and the NSA for exactly the reasons that drive people to question whether it is a good idea to trust closed and secretive crypto-chips, no matter how well-intentioned the company that manufactures them.? the person i met was there to "sound out" interested parties willing to help with such a venture, even to the extent of actually buying a Foundry, in order to guarantee that the crypto-chip they would like to see made had not been tampered with at any point during manufacturing.
>
> at FOSDEM2019 i was also approached by a team that also wanted to do a basic "embedded" processor, entirely libre-licensed, only in 350nm or 180nm, with just enough horsepower to do digital signing and so on.? since then, fascinatingly, NLnet has obtained a new EU Horizon Grant and started their "Assure" Programme:
> https://nlnet.nl/assure/
>
> (our application may be found here):
> https://libre-soc.org/nlnet_2021_crypto_router/
>
> in addition, betrusted (headed by Bunnie Huang) is also funded by NLnet and is along similar lines:
> https://betrusted.io/
>
> NLnet is even funding LibreSOC with a 180nm test chip tape-out of the LibreSOC Core, with help from Sorbonne University and https://chips4makers.io
> https://bugs.libre-soc.org/show_bug.cgi?id=199
>
> and we also have funding to do Formal Correctness Proofs for the low-level portions of the HDL (similar to c++ and python "assert", but for hardware)
> https://bugs.libre-soc.org/show_bug.cgi?id=158
>
> the point being that where even one year ago the idea of an open source developer creating and paying for an actual ASIC was so ridiculous they would be laughed at and viewed in a derisive fashion thereafter, reality is that things are opening up to the point where even Foundry PDKs are now open source:
> https://github.com/google/skywater-pdk
>
> technically it is possible to use Open Hardware to create commercial (closed) products.? Richard Herveille, most well-known for his early involvement in Opencores, was the Open Hardware developer responsible for the HDL behind the first Antminer product by Bitmain, for example.? It used his RV32 core and i believe he also developed the SHA256 HDL for them.? however that is different in that it was a closed product, not open for independent public audit and review.
>
> what i am therefore trying to say is that it is a genuinely achievable goal, now, to create fully transparently-openly-developed ASICs that could perform crytographic tasks such as mining and hardware wallet key protection *and have a full audit trail* even to the extent of having mathematical Formal Correctness Proofs.
>
> my question is - therefore - with all that background in mind - is: is this something that is of interest?
>
> now, before getting all excited about the possibilities, it's critically important to provide a reality-check on the costs involved:
>
> * 350nm ASICs: https://chips4makers.io - EUR 1750 for 20 samples
> * 180nm ASICs: EUR $600 per mm^2 MPW Shuttle (test ASICs) and EUR 50,000 for production masks
> * ... exponential curve going through 130nm, 65nm, 45nm gets to around $500k...
> * 28nm ASICs: USD 100,000 for MPW and USD $1 million for production masks
> * 22nm ASICs: double 28nm
> * 14nm: double 22nm
> * 7nm: quadruple 14nm
>
> you get where that is going.? where higher geometries are now easily within reach even of a hobbyist ASIC developer, USD 20 million is a bare minimum to design, develop and bring to manufacture a 7nm Custom ASIC.? full-custom silicon, as carried out regularly by Intel, is USD 100 million.
>
> this is not to say that it is completely outside the realm of possibility to do something in these lower geometries: you either simply have to have a damn good reason, or a hell of a lot of money, or a product that's so compelling that customers really *really* want it, or you have OEMs lining up to sign LOIs or put up cash-with-preorder.
>
> [my personal favourite is a focus on power-efficiency: battery-operated hand-held devices at or below 3.5 watts (thus not requiring thermal pipes or fans - which tend to break). i have to admit i am a little alarmed at the world-wide energy consumption of bitcoin: personally i would very much prefer to be involved in eco-conscious blockchain and crypto-currency products].
>
> so - as an open question: what would people really like to see happen, here, what do people feel would be of interest to the wider bitcoin community, and, crucially, is there a realistic way to bridge (fund) the gap and actually deliver to the bitcoin user community?
>
> best,
>
> l.
>
> ---
> crowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68
>
> --
> ---
> crowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68



From ZmnSCPxj at protonmail.com  Wed Feb  3 03:17:48 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Wed, 03 Feb 2021 03:17:48 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
Message-ID: <S5xSo0WU5O0xwb5Ot7jF8L011HUGf1oSpJSxtB93NY8qDZDwtCcNh9LSILMaZvT4uBh43jl638H7_bCz1WtSde34i0LnsNsXOyoJjuN5RIw=@protonmail.com>

Good morning again Luke,



> [my personal favourite is a focus on power-efficiency: battery-operated hand-held devices at or below 3.5 watts (thus not requiring thermal pipes or fans - which tend to break). i have to admit i am a little alarmed at the world-wide energy consumption of bitcoin: personally i would very much prefer to be involved in eco-conscious blockchain and crypto-currency products].

If you mean miner power usage, then power efficiency will not reduce energy consumption.

Suppose you are a miner.
Suppose you have access to 1 watt of energy at a particular fixed cost of 1 BTC per watt, and you have a current hardware that gives 1 Exahash for 1 watt of energy usage.
Suppose this 1 Exahash earns 2 BTC (and that is why you mine, you earn 1 BTC).

Now suppose there is a new technology where a hardware can give 1 Exohash for only 0.5 watt of energy usage.
Your choices are:

* Buy only one unit, get 1 Exohash for 0.5 watt, thus getting 2.0 BTC while only paying 0.5 BTC in electricity fees for a net of 1.5 BTC.
* Buy two units, get 2 Exohash for 1.0 watt, thus getting 4.0 BTC while only paying 1.0 BTC in electricity fees for a net of 3.0 BTC.

What do you think your better choice is?

That assumes that difficulty adjustments do not occur.
If difficulty adjustments are put into consideration, then if everyone *else* does the second choice, global mining hashrate doubles and the difficulty adjustment matches, and if you took the first choice, you would end up earning far less than 2.0 BTC after the difficulty adjustment.

Thus, any rational miner will just pack more miners in the same number of watts rather than reduce their watt consumption.
There may be physical limits involved (only so many miners you can put in an amount of space, or whatever other limits) but absent those, a rational miner will not reduce their energy expenditure with higher-efficiency units, they will buy more units.

Thus, increasing power efficiency for mining does not reduce the amount of actual energy that will be consumed by Bitcoin mining.

If you are not referring to mining energy, then I think a computer running BitTorrent software 24/7 would consume about the same amount of energy as a fullnode running Bitcoin software 24/7, and I do not think the energy consumed thus is actually particularly high relative to a lot of other things.

Regards,
ZmnSCPxj

From lkcl at lkcl.net  Wed Feb  3 13:24:13 2021
From: lkcl at lkcl.net (Luke Kenneth Casson Leighton)
Date: Wed, 3 Feb 2021 13:24:13 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
Message-ID: <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>

(hi folks do cc me, i am subscribed digest, thank you for doing that,
ZmnSCPxj)

On Wednesday, February 3, 2021, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:
> Good morning Luke,
>
> I happen to have experience designing digital ASICs, mostly pipelined
data processing.
> However my experience is limited to larger geometries and in
SystemVerilog.

larger geometries for a hardware wallet ASIC is ok (as long as it is not
retail based and trying to run e.g. RSA, taking so long to complete that
the retail customer walks out)

> On the technical side, as I understand it (I have been out of that
industry for 4 years now, so my knowledge may be obsolete)

not at all! still very valuable

> as you approach lower geometries, you also start approaching analog
design.

yyeah i could intuitively tell/guess there might be something like this
which would throw a spanner in the works, it is why the grant request i put
in specifically excluded data-dependent constant time analysis and also
power analysis.


> In our case we were already manually laying out gates and flip-flops (or
replacing flip-flops with level-triggered latches and being extra careful
with clocks) to squeeze performance (and area) ...

ya-howw :)


> Many of the formal correctness proofs were really about the formal
equivalence of the netlist to the RTL; the correctness of the RTL was
"proved" by simulation testing.

thanks to Symbiyosys we are using formal proofs much more extensively, as
effectively a 100% coverage replacement for unit tests.

an example is popcount.  we did two versions.  one is a recursive tree
algorithm, almost impossible to read and understand what the hell it does.

the other is a total braindead 1-liner "x = x + input[i]", rubbish
performance though.

running a formal proof on these gave us 100% confidence that the complex
optimised version does the damn job.


yes we still do unit tests, these are more "demo code".

now, the caveat is that you have to have a model of the "dut" (device under
test) against which to compare, and if the dut is ridiculously complex then
the formal model variant, which has to do the same job, ends up equally as
complex (or effectively a duplicate of the dut) and the exercise is a bit
of a waste of time...

...*unless*... there happens to be other implementations out there.  then
the proof can be run against those and everybody wins through collaboration.



now, here's why i put in the NLnet Grant request to explore going back to
the mathematics of crypto-primitives.

many ISAs e.g. intel AVX2 have added GFMULT8 etc etc because that does
S-Boxes for Rijndael.  they have gone mad by analysing algorithms trying to
fit them to standard ISAs.

nobody does Rijndael S-Boxes any way other than 256-entry lookup tables
because no standard ISA has general-purpose Galois Field Multiply.

consequently implementations in assembler get completely divorced from the
original mathematics on which the cryptographic algorithm was based.

the approach i would like to take is, "hang on a minute: how far would you
get if you actually added *general-purpose* instructions that *directly*
provided the underlying mathematical principles, and then wrapped a
Vector-Matrix Engine around them?".

would this drastically simplify algorithms to the point where *READABLE* c
code compiles directly to opcodes that run screamingly fast, outperforming
hand-optimised SIMD code using standard ISAs?

then, given the Formal Correctness approach above, can we verify that the
mathematically-related opcodes do the job?


> (to be fair, there were tools to force you to improve coverage by
injecting faults to your RTL, e.g. it would virtually flip an `&&` to an
`||` and if none of your tests signaled an error it would complain that
your test coverage sucked.)

nice!

> Things might have changed.

nah.  this is such a complex area, run by few incumbent players, that
innovation is rare.  not least, innovation is different and cannot be
trusted by the Foundries!


> A good RTL would embed SystemVerilog Assertions or PSL Assertions as well.
> Some formal verification tools can understand a subset of SystemVerilog
Assertions / PSL assertions and validate that your RTL conformed to the
assertions, which would probably help cut down on the need for RTL
simulation.

interesting.

> Overall, my understanding is that smaller geometries are needed only if
you want to target a really high performance / unit cost and performance /
energy consumption ratios.
> That is, you would target smaller geometries for mining.

yes.

> If you need a secure tr\*sted computing module that does not need to be
fast or cheap, just very accurate to the required specification, the larger
geometries should be fine and you would be able to live almost entirely in
RTL-land without diving into netlist and layout specifications.

hardware wallet ASICs.

i concur.

> A wrinkle here is that licenses for tools from tr\*sted vendors like
Synopsys or Cadence are ***expensive***.

yes they are :)  we are currently working with Sorbonne University LIP6.fr
and Staf Verhaegen from Chips4Makers, trying a different approach:
coriolis2.

this will do fine up to 130nm (skywater).  beyond that, mmm, we need a few
more years.

> What is more, you should really buy two sets of licenses, e.g. do logic
synthesis with Synopsys and then formal verification with Cadence, because
you do not want to fully tr\*st just one vendor.

interesting, good advice.

> Synthesis in particular is a black box and each vendor keeps their
particular implementations and tricks secret.

sigh.  i think that's partly because they have to insert diodes, and
buffers, and generally mess with the netlist.

i was stunned to learn that in a 28nm ASIC, 50% of it is repeater-buffers!

plus, they make an awful lot of money, it is good business.

> Pointing some funding at the open-source Icarus Verilog might also fit,
as it lost its ability to do synthesis more than a decade ago due to
inability to maintain.

ah i didn't know it could do synthesis at all! i thought it was simulation
only.

> Note as well that I heard (at the time when I was in the industry) that
some foundries will not even accept a netlist unless it was created by a
synthesis tool from one of the major vendors (Synopsys, Cadence, Mentor
Graphics, maybe more I have forgotten since).

yes i heard this too, they don't want their time wasted: after all they
only make money by selling wafers, and if they can't sell any they have to
run empty wafers to keep the equipment at operating temperature.

if you book a slot 18 months in advance and the RTL doesn't work during
testing 3 months before the deadline they may not be able to find someone
else in time.

anything to reduce the risk there is good, so i totally get why.

thank you for the insights and the discussion, really appreciated.

l.


-- 
---
crowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210203/855e015c/attachment.html>

From lkcl at lkcl.net  Wed Feb  3 14:07:24 2021
From: lkcl at lkcl.net (Luke Kenneth Casson Leighton)
Date: Wed, 3 Feb 2021 14:07:24 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <S5xSo0WU5O0xwb5Ot7jF8L011HUGf1oSpJSxtB93NY8qDZDwtCcNh9LSILMaZvT4uBh43jl638H7_bCz1WtSde34i0LnsNsXOyoJjuN5RIw=@protonmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <S5xSo0WU5O0xwb5Ot7jF8L011HUGf1oSpJSxtB93NY8qDZDwtCcNh9LSILMaZvT4uBh43jl638H7_bCz1WtSde34i0LnsNsXOyoJjuN5RIw=@protonmail.com>
Message-ID: <CAPweEDxRUaGDrezZqdM9dm9QrbQtxF_JZND84SQfgX_yQUuvLA@mail.gmail.com>

On Wednesday, February 3, 2021, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:
> Good morning again Luke,

:)

> If you mean miner power usage, then power efficiency will not reduce
energy consumption.


> Thus, any rational miner will just pack more miners in the same number of
watts rather than reduce their watt consumption.

yes, of course.  the same non-consumer-computing-intuitive logic applies to
purchasing decisions for beowulf clusters.


> Thus, increasing power efficiency for mining does not reduce the amount
of actual energy that will be consumed by Bitcoin mining.

arse.

and if everybody does that, then no matter the performance/watt nobody
"wins".  in fact a case could be made that everybody "loses".

my biggest concern here is that the inherent "arms race" results in very
few players being able to create bitcoin mining ASICs *at all*.

i mentioned earlier that geometry costs are an exponential scale.  3nm must
be somewhere around USD 16 million for production masks.

if there are only a few players that leaves the entirety of bitcoin open to
hardware backdoors.

l.






-- 
---
crowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210203/e5c225c5/attachment.html>

From michaelfolkson at gmail.com  Wed Feb  3 14:24:59 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Wed, 3 Feb 2021 14:24:59 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on IRC
Message-ID: <CAFvNmHSaM4FotFG+Liv-0+C1jYFsVPQyG6aPgUXvEPtrr8XC+w@mail.gmail.com>

Yesterday (February 2nd) we held a relatively unstructured meeting on
Taproot activation on IRC which was open to all.


The conversation log is here:
http://gnusha.org/taproot-activation/2021-02-02.log


The meeting was previously announced here:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018370.html


I will summarize what was discussed as best I can. Please revert to the
conversation log if you have the time as any summary is going to be
imperfect. Any errors or biases are my own and corrections will be
gratefully accepted.


I?ll start with Rusty Russell?s takeaways (many thanks to our Asia Pacific
representatives for joining in the middle of the night by the way) on
Mastodon:


1. Unanimous support for BIP 8. RIP BIP 9.

2. Overwhelming consensus that 1 year is the correct timeout value (it?s
actually defined in blocks, so 26x2016 or maybe 87600).

3. Majority consensus for lockinontimeout false, though Luke Dashjr
strongly opposed.

4. No decision I could see on start time, but 2 months was done for SegWit
and that didn?t seem too objectionable.


https://bitcoinhackers.org/@rusty/105664386728806153


I personally think this is a solid summary though I do want to point out it
wasn?t only Luke that opposed lockinontimeout=false. There were other
individuals who also opposed lockinontimeout=false but at least from my
reading that was the minority opinion. Luke concluded there wasn?t clear
consensus on it and that even if lockinontimeout=false was eventually
chosen as a Bitcoin Core default he would be running lockinontimeout=true
on his node.


In terms of the PRs, the following BIP 8 PRs were merged following the
meeting.


https://github.com/bitcoin/bips/pull/1020


https://github.com/bitcoin/bips/pull/1021


The latter was merged due to an observation from Jonas Nick in the PR
comments and during the meeting that without it nodes could end up on the
wrong chain in a scenario where they run lockinontimeout=true with most
nodes running lockinontimeout=false.


The Bitcoin Core PR #19573 requires additional work from its author and
further review before it can be considered for merging.


I do want to thank the large number of participants for engaging in the
discussion in the spirit of wanting to make progress on Taproot activation
and for gracefully allowing me to interrupt them and keep the discussion on
topic. The vast majority of the time this level of bluntness (and pushing
away slightly off topic questions) is not desired or required in Bitcoin
technical meetings. I hope those who were interrupted during this meeting
will return and ask their questions now a meeting of that sheer size is
over.


We are in the process of attempting to organize a follow up more closely
following the format of John Newbery?s Bitcoin Core PR review club which
will be lower level, technical and focused on the Bitcoin Core PR #19573.
The Bitcoin Core PR review club is also open to all but given its more
technical nature it shouldn?t present the same challenges as yesterday?s
meeting.


Thanks to Alejandro De La Torre for providing an update on his website (
taprootactivation.com) following the meeting. Chun Wang (co-founder of
F2Pool, ~ 16 percent of global hash rate) has decided to support BIP
8(false,1 year).

-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210203/ab887d1d/attachment-0001.html>

From michaelfolkson at gmail.com  Fri Feb  5 12:43:57 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Fri, 5 Feb 2021 12:43:57 +0000
Subject: [bitcoin-dev] Taproot activation meeting 2 - Tuesday 16th February
	19:00 UTC
Message-ID: <CAFvNmHSnd4OM+c0_L8fFXRNrxo23WdQpNdBjTJjhmGuHumgLDA@mail.gmail.com>

A summary of the first Taproot activation meeting (February 3rd) is here:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018379.html


It appears there is one (hopefully) last stumbling block before we are
ready to propose Taproot activation parameters to the mailing list.


Hence we are organizing a follow up meeting on IRC on the
##taproot-activation channel on Tuesday 16th February at 19:00 UTC.


As I said in the summary of the first Taproot activation meeting whether
lockinontimeout (LOT) is set to true or false in a Bitcoin Core release
attracted discussion during the meeting and has continued to attract
discussion afterwards.


I will weigh up the arguments I have seen for both true and false here. I
won?t comment on the strength of the arguments, merely attempt to summarize
them. Any errors are my own.


Arguments for setting lockinontimeout (LOT) to true in a Core release

T1) This entirely eradicates the possibility (however unlikely) that
Taproot fails to activate within a year. Although approximately 90 percent
of mining pools have already pledged to activate Taproot there is no reason
to open the door to possible delays and political shenanigans for no
reason, however unlikely.

T2) Given users can change LOT=true at any point (and some have declared
they will be setting LOT=true regardless), setting LOT=false in Core opens
up edge case scenarios where different proportions of users on the network
change to LOT=true at different points in time in an uncoordinated fashion.
Given the end state we all want is Taproot activated it doesn?t make sense
to open the door to these edge cases. Setting LOT=true in Core would mean
there is no motivation for users to change LOT in the software they are
running.

T3) We should not be putting users in a place where they feel they need to
change LOT. The urge to change LOT will be strong if miners delay for an
unreasonable period. We are then in a situation where a decision has to be
made on whether Core releases a new version with LOT=true and this whole
discussion kicks off again. We should definitely seek to avoid the need to
rehash this discussion later in the year.

T4) LOT is only relevant if miners fail to activate. It doesn?t make sense
to set it to false as that is essentially saying if miners fail to activate
early, LOT should also let them not activate.

T5) Activation should only be attempted once community consensus for the
soft fork has been reached. Miner signaling is not voting for the changes,
it is signaling readiness. There is no reasonable rationale for not being
ready within a year.

T6) An argument belcher outlined on IRC. If LOT was set to true and a chain
split happened then the Taproot chain doesn?t have wipeout risk so there?s
a really strong incentive to be on the Taproot activating LOT=true chain
and therefore using LOT=true means the risk of a chain split is actually
lower.



Arguments for setting lockinontimeout (LOT) to false in a Core release

F1) The probability of Taproot not being activated by miners is small. This
is not 2017, this is not SegWit, there is no need to worry.

F2) The worst case scenario is we have to wait over a year for Taproot to
be activated. Even the worst case scenario is not a disaster.

F3) If in the unlikely scenario miners did not activate Taproot for a year
for no apparent reason we would never set LOT to false again for any
potential future soft fork. If miners fail to activate Taproot despite
pledging support and there being overwhelming community consensus for it,
it would set a precedent that miners cannot be relied upon *at all* to
activate soft forks.

F4) If in the highly unlikely scenario that a bug or some problem with the
Taproot implementation was found during the signaling period miners could
choose not to activate it which is cleaner than needing an emergency Core
release.


Then some additional arguments nullc posted on Reddit

https://old.reddit.com/r/Bitcoin/comments/lcjhl6/taproot_activation_pools_will_be_able_to_veto/gm2l02w/

F5) LOT = false is more similar to what was done previously (unless you go
way back to the earliest soft forks which were more similar to LOT = true)

F6) It is more important that no rules that harm users are deployed than it
is that new useful rules are deployed quickly. If there is a choice between
?faster? and ?more clear that this isn?t a mechanism to force bad things on
users? we should prefer the latter. Plenty of people just don?t like
LOT=true very much absent evidence that miners are blocking deployment. To
some it just feels needlessly antagonistic and distrusting towards part of
our community.


There are some additional parameters other than LOT we will discuss in this
meeting such as activation threshold, start time etc but personally I don?t
think they will attract the same discussion as LOT.


As I?ve stated before please continue to engage productively and in good
faith. I can see arguments with merit on both sides of the LOT discussion
but there appears to be overwhelming consensus that Taproot is activated
this year and there appears to be no reason it shouldn?t be. This
discussion on LOT really should not derail that.

-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210205/75f486c6/attachment.html>

From orlovsky at protonmail.com  Fri Feb  5 17:51:27 2021
From: orlovsky at protonmail.com (Dr Maxim Orlovsky)
Date: Fri, 05 Feb 2021 17:51:27 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
Message-ID: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>

Hi,


Background
==========

Had a discussion last night in Bitcoin Core IRC with Peter Wuille on different topics regarding key derivations, security, key tweaks in context of Schnorr signatures & Taproot. Would like to share some action points and plans that emerged from there:

1. There is a real need for BIP-43 based new BIP with a new purpose field for keys used in Schnorr signatures. Peter will not do it (he is not very much interested in spending his time on wallet-level stuff), so someone else should.

2. Keys used in Schnorr signatures MUST NEVER BE used in ECDSA signatures, otherwise there is a risk of private key leak via correlation attack. This is rationale behind N1.

3. The other need (not discussed with Peter) is to change the general structure of derivation path used before with BIP-44, 45, 84. This change is required to enable the use of all modern wallet use cases under a single standard: single-sigs & multi-sigs, ECDSA & BIP340 signatures.

4. Embedding multisig support in a hierarchical format requires introduction of a ?signer id? concept as a part of the derivation path. I found a way how this can be done seamlessly, leading to emergence of decentralized identity as a side effect.


Proposal
========

Derivation path structure & purpose values
------------------------------------------

The new format for the hierarchical derivation BIP32 path is the following:

	m/purpose?/blockchain?/identity?/scope'/case/index

**Purpose:**
BIP-43 purpose values under the proposal:
- 340? for BIP340 signatures
- ???? for old-style ECDSA signatures (??? will be set to the BIP number of this standard once it gets assigned)
Thus, purpose will be used to signify the type of the signature.
NB: purpose MUST be hardened since otherwise a key leak may occur.

**Blockchain:**
was not there before, but now we should have it:
- to prevent key reuse across blockchains & combined inter-chain analysis
- to get rid of using custom xpub prefixes (like SLIP-132) which are very unwelcomed by the community and are unnecessary since we have descriptors.

Testnet path `1` covers all testnets (no problem with key re-use for valueless testnet or inter-testnet chainanalysis) - this follows the logic of recent changes in other standards related to testnet (use the same Bech32 prefixes for all testnets).

Testnet path is unhardened from this point & till the end of the derivation path: no need to prevent private key leak there, simplifies test software (hardened paths require private key access for derivation).

Devs are free to choose other unhardened number if they need, without changing the standard - unhardened numbers will never be used for chains with real value.

**Identity and scope**
Hardened components signify the main identity (decentralized id) and the scope under that id used in context of specific multisig wallet or other identity case. Scope is required to use the same id with different peers without exposing the main identity xpub (and, thus, the scope must be hardened as well).


**Case**
This is the same as a ?change? field before (under BIP44 etc), however it is proposed to change the name to denote that the field may have other values and is used for signalling support for some custom features (for instance, pay-to-contract or sign-to-contract schemes, which may be used for client-side validation like in RGB protocol etc).

**Index**
Sequentially increased index like in BIP44


Identity basics
---------------

**Identity index** SHOULD be a random number within BIP32 hardened index range.

Rationale: derivation path may be kept public (see decentralized logins below), and use of sequential numbers will leak information of how many identities are used by some person.

**(Identity) scope index**: depending on whether revocation is enabled:
- if revocation is not enabled, or before the first revocation, it SHOULD be any random hardened number
- otherwise, it must be a number provided during the revocation procedure for the previous scope

Rationale for identity scope: it is required for an identity to be safely usable under multiple multisig wallets/descriptors without exposure of the identity xpub to unrelated parties. Its introduction also allows to use the keys derived under the same identity index as a universal decentralized identity (see details below) without the risk of correlation analyses; especially when they are used outside of the transaction context (for instance as a part of login) without the risk of chain analysis against such data (linking logins to onchain transactions). 


Identity representations
------------------------

The XpubIdentifier created with extended public key under BIP32 derivation path ending at the level of the identity index is called **bitcoin decentralized id** (hereinafter simply **decentralized id**).

Rationale: XpubIdentifier is a hash of the extended public key, thus id does not leak any confidential information about the user, her/his outputs or any keys used in the setup and after. As a 256-bit number it is sufficient for global unique identification; and it is created in such a way that it will always be unique for each user (based on the selection of random number), seed & derivation path combination; which allows each user to have multiple unique decentralized ids without any significant risk collision. These ids will be scoped to some blockchain & authorization scheme (based on the use of specific signature algorithm).

Decentralized id can be used as a unique user login or a key for searching user metadata with different centralized or decentralized systems, which design is outside of the scope of this proposal (however there is a WIP in this regard involving client-validated LN-based smart contract system).

Aside from the decentralized id, when a user needs to use the identity under some scope (i.e. creating multisig wallet or registering/signing up to some online service or an app) he should use the following string, called ?decentralized login? and/or ?decentralized id string":

	m/purpose?/blockchain'/identity?=[decentralized_id]/scope?=[scope_xpub]

Where:
- purpose', blockchain?, identity? and scope' have the meaning according to this proposal (see the proposed BIP43 derivation path structure above);
- * decentralized_id* is the decentralized id (XpubIdentifier value at that derivation path level) encoded as BIP350 Bech32m string with HRP set ot `bcid`;
- **scope_xpub* is the Base64-encoded xpubkey (according to BIP32) derived at that level.

Rationale on the use of Bech32m encoding for XpubIdentifier
- the standard 64-hex string can be easily confused with other 64-hex strings such as transaction ids, XpubIdentifiers, SHA256(d) hash values etc. Bech32 prefix provides context making it unambiguously parsable by software
- Bech32m contains a checksum which makes it easier to check whether two ids are equal visually
- `bcid` HRP is selected to signify that this particular id standard is based on bitcoin ecosystem and Secp256k1 curves.

Rationale on login string: 
- decentralized login string is designed in such a way that it can both be an id backup for the id owner (providing full information necessary for deriving keys under this id or checking the value of the scoped xpub from the seed) - and give the context (blockchain and signature algo) under which this id is valid.
- text representation of the login string is easy to check in the logs and simple to use in text-based protocols such as HTTP for authentication.

NB: If the revocation protocol is supported this string MUST be suffixed with a revocation single-use-seal (see below) in form of `?txid:vout`

**Examples:**

Decentralized id: bcid1ncr68x65lpvpz8nqtjrchnheru2e5x9rcdf2dk (this id corresponds to XpubIdentifier 9e07a39b54f858111e605c878bcef91f159a18a3; since I do not have Bech32m at hand I have temporally used Bech32)

Decentralized login: m/340?/0'/[bcid1ncr68x65lpvpz8nqtjrchnheru2e5x9rcdf2dk]/20721421274?=[xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV]

Decentralized login with key revocation: m/340?/0'/[bcid1ncr68x65lpvpz8nqtjrchnheru2e5x9rcdf2dk]/20721421274?=[xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV]?0e94ada127fbbc6d2152b18a50fd02ea9aaa608ec20cfc606ad327da1c255201:1


Multisig wallets with decentralized id
--------------------------------------

In case of multisig wallet creation, the parties may share their decentralized id strings in one of two forms:

1. Compact, skipping the scope xpub and replacing it with 32-bit xpub fingerprint:
    ```
	m/purpose?/blockchain'/identity?=[decentralized_id]/scope?=[scope_xpub_fingerprint]
    ```
2. Full, as specified in the previous section

This will provide all parties with a sufficient information to construct full paths with a sequentally-increased final indexes

	m/purpose?/blockchain?/identity?/scope'/case/index

for change and normal cases.

The first option will allow all parties to prepare PSBTs for the common signing process; however they will not be able to generate invoices or track blockchain for new transactions. However, on the other hand, that will not leak the scoped xpub.

The second option allows full features for multisig wallets, including invoice creating and onchain tracking.


Authenticating with decentralized id
------------------------------------

To authenticate (or register) a user must provide the authentification service with the following information:
- Login string from the previous section
- Random number within the **unhardened** BIP32 index range
- A signature, created according to the signature algorithm specified as a part of login (ECDSA or BIP340) with the private key derived with the following derivation path:

	m/purpose?/blockchain'/identity?/scope?/random_seed

where *random_seed* is the random number from the above.

This scheme is non-interactive and can be used for authentication, authorization and registration with servers or applications.

Rationale:
- random number is required for avoiding private key reuse
- it is unhardened so the public key required for signature verification may be generated by the service from the scoped identity xpub provided as a part of the login
- random number can?t be a challenge from the service side since it will (a) make the protocol interactive, introducing unnecessary complexity and (b) will allow malicious servers to repeat the same challenge for private key correlation analysis if BIP340 signature is used.


Identity revocations
--------------------

It will be possible to revoke identities using single-use-seals mechanics ([originally proposed by Peter Todd][1]) based on bitcoin blockchain. What's important here is that this will not lead to the increase in transaction size and may be simply combined with normally happening transactions using special signature design procedure (see below).

NB: Since the revocation procedure is non-trivial, it is proposed to have the first version of the standard to be published without it and add it later by using the suffix `?txid:vout` with the revocation single-use-seal added to the identity string.

The protocol runs as follows:

### Identity creation
Alice, after creating a decentralized identity under this standard and its first scope, chooses some of her existing bitcoin UTXOs and uses it as a suffix for the identity/login string. It is important that:
- the UTXO must be protected by a key from the derivation path unrelated to the used identity. 
- the UTXO should be mined at a safe depth, such that reogs would have a negligible probability.
- should be spendable by a single signature from a private key in Alice's possession.

### Identity scope revocation
If Alice needs to revoke specific scoped identity xpub (for instance, a private key leak happened) she needs to:
1. Spend the previously specified revocation UTXO signalling about the revocation by setting two most significant bits of the random number `k` used during the signature creation to `01` value.
2. Use the first output of the spending transaction as a new revocation UTXO.
3. For now, she needs to use 32-byte fingerprint | 0x8000000 of the transaction as a new identity scope for future logins and key derivations under the same identity.

### Full identity revocation
Alice also has an option of completely revoking the identity without providing a new scope, which will be an equivalent of removing login or cancelling participation in a multisig wallet. To do so she just needs to set two most significant bits to `10` value instead of `01`.

### Identity revocation detection
Other parties knowing Alice's identity string (her multisig co-signers under the same identity scope or services that her login information is) will know about revocation by monitoring the spending of the revocation UTXO in the blockchain and checking firts two most significant bit values in `k` value computable from the the signature in the spending input. They will be able to monitor consequent revocations using the first output from the revocation transaction as a new single-use-seal. They will also update Alice?s identity scope accordingly and will be able to verify Alice?s new signatures without any communications with her. It?s quite important that they will also be able to decline Alice's login attempts with the revoked key from the moment the revocation tx got into mempool, i.e. instantly.

### Spending single-use-seal without revocation
If, because of whatever reason, Alice needs to spend the UTXO which was previously marked as a revocation UTXO without the actual revocation, she can do that by setting ?k? two most significant bits to `00` value. The new revocation UTXO will become assigned to the first input of that transaction, but the identity would not be revoked and the scope value will not change.


Visual summaries
================

I have prepared some visual summary covering the proposal, which may simplify its analysis:

![image](https://user-images.githubusercontent.com/372034/107058405-dd645580-67d4-11eb-986f-a0211d2dd54f.png)


=================

Hope that all make sense. Me and my colleagues spent more than a year on finding ways to build decentralized identity standard suitable for cypherpunk needs, and this is the first part of what I came up with. Since I am also engineer behind [RGB smart contracts][2] (allow complex logic on top of bitcoin transactions & Lightning channels using client-side-validation and single-use-seals), the proposed identity, if accepted, will be later accompanied by layer-2 and 3 solutions on top, giving user the ability to provide the identity meta-information (name, surname, emails, avatars etc) with such features as:
- decentralized non-blockchain database & search engine for metadata: LN network
- no centralized notary: I will not need to ask anyone?s permission if I?d like to change my name
- partial meta-information disclosures: ability to selectively hide some fields
- multiple IDs under some root ID: unlinkable, until I disclose the link myself (and I can prove that the link exists, if I need)
- can be combined with bitcoin multisigs without confidentiality leaks: no onchain analysis is possible

Since there is no need to make that part of BIPs, I narrowed this proposal down to the part which is relevant only in the context of Layer 1 stuff.

??
[1]: https://building-on-bitcoin.com/docs/slides/Peter_Todd_BoB_2018.pdf
[2]: https://rgb-org.github.io/ 


Kind regards,
Dr Maxim Orlovsky,
LNP/BP Standards Association (https://lnp-bp.org)
& Pandora Core AG
GPG: FBDE A843 3DDC 1E69 FA90  C35E FFC0 2509 47E5 C6F7

https://github.com/dr-orlovsky
IRC: dr-orlovsky at freenode (usually in #rust-bitcoin, #lnp-bp & ##taproot-activation)
Twitter: @dr_orlovsky



From dp at simplexum.com  Fri Feb  5 22:00:29 2021
From: dp at simplexum.com (Dmitry Petukhov)
Date: Fri, 5 Feb 2021 23:00:29 +0100
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
 decentralized identity
In-Reply-To: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
Message-ID: <20210205230029.4dd6fc4d@simplexum.com>

? Fri, 05 Feb 2021 17:51:27 +0000
Dr Maxim Orlovsky via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:

> Testnet path is unhardened from this point & till the end of the
> derivation path: no need to prevent private key leak there,
> simplifies test software (hardened paths require private key access
> for derivation).

I believe this will reduce robustness and will add complexity to the
test software instead. If the derivation path is hardened in 'production
code' and is unhardened in 'test code', then: code paths that depend on
hardened derivation may not be tested; there will be unnecessary
code that will need to deal with 'un-hardening' the paths for test code.

It is much more robust to just change the 'purpose' part of the path,
and leave the rest unchanged.

It is OK to require privkey access to hardened paths in test
software, because the same behaviour is expected in 'production'.

From ChristopherA at lifewithalacrity.com  Fri Feb  5 22:37:01 2021
From: ChristopherA at lifewithalacrity.com (Christopher Allen)
Date: Fri, 5 Feb 2021 14:37:01 -0800
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
 decentralized identity
In-Reply-To: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
Message-ID: <CACrqygChUjwo43=ferqErAz8Mrq+n0zUghRy37cSqRTp3S1Q4g@mail.gmail.com>

Concept ACK.

I, in my role as a co-author of the emerging W3C Decentralized Identifier
standard and of the BTCR DID method, organizer of the Bitcoin Airgapped
Wallet Community (
https://github.com/blockchainCommons/airgapped-Wallet-Community/discussions),
and as principal architect of Blockchain Commons, am very interested in
supporting discussion on this topic, and implementation of anything we
decide. I also have some Patron's to Blockchain Commons interested in this
topic and may be willing to financially support some reference code.

-- Christopher Allen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210205/859226ce/attachment.html>

From bitcoin-dev at wuille.net  Sat Feb  6 01:15:12 2021
From: bitcoin-dev at wuille.net (Pieter Wuille)
Date: Sat, 06 Feb 2021 01:15:12 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
In-Reply-To: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
Message-ID: <mCGqNxZZgiKEO8gbRcHFUxcU5fGBMWMfkJdapM2Nuhe0gemmqXRfnyqqaRY70UFea1udvQe0LIYt9Ps3lsgDArVHlfeMOWacXqZ7ZiGzMTU=@wuille.net>

On Friday, February 5, 2021 9:51 AM, Dr Maxim Orlovsky via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
>
> Background
>
> ====================
>
> Had a discussion last night in Bitcoin Core IRC with Peter Wuille on different topics regarding key derivations, security, key tweaks in context of Schnorr signatures & Taproot. Would like to share some action points and plans that emerged from there:
>
> 1.  There is a real need for BIP-43 based new BIP with a new purpose field for keys used in Schnorr signatures. Peter will not do it (he is not very much interested in spending his time on wallet-level stuff), so someone else should.
> 2.  Keys used in Schnorr signatures MUST NEVER BE used in ECDSA signatures, otherwise there is a risk of private key leak via correlation attack. This is rationale behind N1.

Hi Maxim,

thanks for bringing up this discussion here. I'd like to clarify a few things though, as I think the above is formulated far too strongly.

There are two issues here: (1) reasons to avoid reusing the same key for privacy reasons, and (2) reasons to avoid using related keys for cryptographic reasons. And in practice, solutions to the first (which we already need, unrelated to Taproot/Schnorr) mean the second is largely moot.


# Don't reuse keys for privacy/organizational reasons.

Reusing the same key in Bitcoin scripts - for use in distinct signature schemes or not - should always be avoided. It has obvious privacy implications; I don't think this is controversial, and it's a problem that exists today, unrelated to Taproot. E.g. you don't want to reuse the same keys as both single-sig and participation in multisig.

My personal view here is that distinct standard derivation paths help with this in the simple cases, but they're not a full solution in the most general case. E.g. if you want to use one seed/root to participate in multiple sets of multisig policies, you'll need some kind of index to assign to each anyway. For this reason in general I prefer solutions that explicitly track what path is used for what.


# Don't use related keys for cryptographic reasons

There are some concerns to address here, but I want to make it clear there are no known attacks against usage of related keys across ECDSA and Schnorr, and I don't expect there will be. However, there is probably no proof for this, and creating one may be tricky. On the other hand, the ecosystem (Bitcoin, but also many other applications) has accepted ECDSA long ago, while it had no security proofs whatsoever (and even the ones that exist now rely on fairly unusual assumption; a proof for security of mixed Schnorr/ECDSA usage would inherently need equally unusual assumptions too).

Now, as soon as a hardened derivation separates different uses there is no concern at all. So any solution for avoiding key reuse (section above) that works by assigning (implicitly or explicitly) different hardened derivation paths (as BIP43 etc. do) to different uses implies there is never any concern about related keys across Schnorr/ECDSA.

If the keys are not separated by a hardened step, it's more complicated. Looking at the different cases:

(1) Signing with related ECDSA keys (e.g. two unhardened child keys from the same xpub)

- This is very common on BIP32 usage today, so hopefully it is secure! Tim Ruffing pointed me today to https://link.springer.com/chapter/10.1007/978-3-030-36938-5_8 whose abstract seems to indicate they prove this is actually secure, but I don't know under what assumptions. Note that the comment there about Schnorr not having this property does not apply to BIP340, because it uses key-prefixed Schnorr.

(2) Signing with related Schnorr keys.

- I believe this is secure simply because BIP340 challenges commit to the pubkey (key prefixing), and thus a signature on one shouldn't teach you anything about others. A formal proof is probably a bit longer, but still trivial to construct.

(3) The real question: signing with a Schnorr key that is related to an ECDSA key.

- I don't expect that this is easy to prove, but I have a very hard time imagining how it could be exploitable, given the use of domain-separated hashes. Aspects such as BIP340's key prefixing and the fact that Bitcoin sighashes indirectly commit to the (set of) signing pubkeys make it even harder.


# TL;DR

* For privacy reasons, you should use separate keys/derivation branches for different uses in all circumstances (duh).
* To stay within the realm of provably security it's advisable to make sure ECDSA key and Schnorr keys use distinct hardened derivation steps.
* Even if you don't, you're really just back to the level of assurance we had about unhardened BIP32 ECDSA keys before a proof was known (which I think most people aren't even aware of).

Cheers,

--
Pieter


From hugo at nunchuk.io  Mon Feb  8 23:14:17 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Mon, 8 Feb 2021 15:14:17 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
Message-ID: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>

Hi all,
I would like to propose a new BIP for Secure Multisig Setup.
This proposal has taken inputs from folks at Coldcard, Shift Crypto and
Cobo -- listed below as co-authors.

This was inspired by my own experience working with hardware wallets on the
market, as well as existing research into the challenges of multisig.

Cheers,
Hugo

<pre>
  BIP: To be determined
  Layer: Applications
  Title: Bitcoin Secure Multisig Setup (BSMS)
  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>,
Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>,
Rodolfo Novak <rodolfo at coinkite.com>
  Comments-Summary: No comments yet.
  Comments-URI:
  Status: Proposed
  Type: Standards Track
  Created: 2020-11-10
  License: BSD-2-Clause
</pre>

==Introduction==

===Abstract===

This document proposes a mechanism to set up multisig wallets securely.

===Copyright===

This BIP is licensed under the 2-clause BSD license.

===Motivation===

The Bitcoin multisig experience has been greatly streamlined under [
https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174
(Partially Signed Bitcoin Transaction)]. However, what is still missing is
a standardized process for setting up multisig wallets securely across
different vendors.

There are a number of concerns when it comes to setting up a multisig
wallet:

# Whether the multisig configuration, such as Signer membership, script
type, derivation paths and number of signatures required, is correct and
not tampered with.
# Whether Signer persists the multisig configuration in their respective
storage, and under what format.
# Whether Signer's storage is tamper-proof.
# Whether Signer subsequently uses the multisig configuration to generate
and verify receive and change addresses.

An attacker who can modify the multisig configuration can steal or hold
funds to ransom by duping the user into sending funds to the wrong address.

This proposal seeks to address concerns #1 and #2: to mitigate the risk of
tampering during the initial setup phase, and to define an interoperable
multisig configuration format.

Concerns #3 and #4 should be handled by Signers and is out of scope of this
proposal.

==Specification==

===Prerequisites===
This proposal assumes the parties in the multisig support [
https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32], [
https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the
descriptor language] and encryption.

==Roles==
===Coordinator===

The Coordinator initiates the multisig setup. The Coordinator determines
what type of multisig is used and how many members and signatures are
needed. If encryption is enabled, the Coordinator generates a secret token,
to be shared among the parties for secure communication. The Coordinator
gathers information from the Signers to generate a descriptor record. The
Coordinator distributes the descriptor record back to the Signers.

===Signer===

The Signer is a participating member in the multisig. Its responsibilities
include providing its XPUB to the Coordinator, verifying that its XPUB is
included in the descriptor record and persisting the descriptor record in
its storage.

==Setup Process==

===Round 1===

====Coordinator====

* The Coordinator creates a multisig wallet creation session. The
Coordinator determines the type of multisig script used and the signing
configuration (<tt>M</tt> and <tt>N</tt>).
* If encryption is enabled, the Coordinator also generates a secret token,
hereby denoted <tt>TOKEN</tt>.
* TOKEN is in ASCII format and must have a minimum of 8 characters. TOKEN
should expire after some time period determined by the Coordinator, e.g.,
24 hours.
* TOKEN acts as an encryption key among the parties. The method of
encryption is AES, CTR mode. The encryption key can be calculated by
performing a double hash operation on the TOKEN: <tt>ENCRYPTION_KEY =
SHA256(SHA256(TOKEN))</tt>.
* A TOKEN value of <tt>-1</tt> means that encryption is disabled and all
the encryption/decryption steps below can be skipped.
* The Coordinator shares the TOKEN with all participating Signers over a
secure channel.

====Signer====

* The Signer generates a key record by prompting the user for the TOKEN and
a derivation path.
* The first line in the record must be the <tt>TOKEN</tt>. If encryption is
disabled, set the TOKEN to -1. The second line must be the <tt>KEY</tt>,
whereas KEY is an XPUB. KEY must include key origin information and written
in the descriptor-defined format, i.e.: <tt>[{master key
fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a
<tt>SIG</tt>, whereas SIG is the signature generated by using the
corresponding private key to sign the first two lines. Finally, the Signer
encrypts the entire record with ENCRYPTION_KEY.

===Round 2===

====Coordinator====

* The Coordinator gathers key records from all participating Signers. Abort
the setup if TOKEN has expired.
* For each key record, the Coordinator decrypts it using ENCRYPTION_KEY.
The Coordinator verifies that the included SIG is valid given the KEY.
* If all key records look good, the Coordinator generates a descriptor
record, which is simply the descriptor string plus a <tt>CHECKSUM</tt>, all
in one line. The CHECKSUM has BECH32 encoding and is described at [
https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums].
The Coordinator encrypts this descriptor record with ENCRYPTION_KEY.
* The Coordinator sends the encrypted descriptor record to all
participating Signers.

====Signer====

* The Signer imports the descriptor record, decrypts it by prompting the
user for TOKEN.
* The Signer calculates and verifies the descriptor?s CHECKSUM. Abort the
setup if the CHECKSUM is incorrect.
* The Signer checks whether one of the KEYs in the descriptor belongs to
it, using path and fingerprint information included in the descriptor. The
check must perform an exact match on the KEYs, and not using shortcuts such
as matching fingerprints (which is trivial to spoof). Abort the setup if it
doesn?t detect its own KEY.
* For confirmation, the Signer must display to the user the descriptor's
CHECKSUM, plus other configurations, such as M and N. The total number of
Signers, N, is important to prevent a KEY insertion attack. All
participating Signers should be able to display the same confirmation.
* If all checks pass, the Signer persists the descriptor record in its
storage. The Signer should subsequently use the descriptor to generate and
verify receive and change addresses.

This completes the setup.

==QR Codes==
For signers that use QR codes to transmit data, key and descriptor records
can be converted to QR codes, following [
https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md
the BCR standard].

==Security==

This proposal introduce two layers of protection. The first one is a
temporary, secret token, used to encrypt the two rounds of communication
between the Signers and the Coordinator. The second one is through the
descriptor checksum and visual inspection of the descriptor itself.

The token is only needed during the setup phase, and can be safely thrown
away afterwards. The token does not guarantee that the Signer membership
set is not modified, since that depends on the overall security of all
parties in the setup, but it can make it significantly harder for an
attacker to do so.

There are three ways an attacker can modify the membership set: by changing
an existing member, by removing an existing member, or by adding a new
member.

For the first two methods, one of the Signers will be able to detect that
its membership has been changed or removed, and reject the final
descriptor. Thus, it is vital that all participating Signers check that
their membership is intact in the descriptor. Even one Signer failing to
check for its membership means that the setup could be compromised.

For the third type of attack, the descriptor checksum and visual inspection
of the descriptor itself are the only way to guard against malicious
members from being inserted into the set.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210208/77bca22d/attachment.html>

From craigraw at gmail.com  Tue Feb  9 09:33:38 2021
From: craigraw at gmail.com (Craig Raw)
Date: Tue, 9 Feb 2021 11:33:38 +0200
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
Message-ID: <CAPR5oBPPC--BNrkh1iTU3_M844Z4AfuuHseqhfgykZSgPrhPXA@mail.gmail.com>

Hi Hugo,

Thanks for raising this again - I'll note there has already been much
discussion on this topic. With respect to your "two layers of protection":

> The Coordinator shares the TOKEN with all participating Signers over a
secure channel.

What secure channel do you propose? Currently, with the default of a
software wallet coordinator talking to hardware wallets, we have USB, file
(microSD), and QR as communication channels. It's unclear to me why the
token and encryption process is necessary - in fact it's easier to verify
what is going on using clear text, and the majority of setups will be
locally done with the reasonable assumption of a secure environment. When
the setup is remote, it's simpler to just transmit the key information over
the secure channel which presumably already has encryption.

> The second one is through the descriptor checksum and visual inspection
of the descriptor itself.

This is a reasonable suggestion, although it's worth noting that support
for storing multisig setups on hardware wallets varies. Coldcard supports
this through importing of a proprietary .txt format file (which has been
adopted by a number of other vendors). Trezor and Ledger (AFAIK) do not
however store multisig setups, which could make this step confusing. With
that said, the use of an output descriptor is certainly a more standardised
approach, albeit one without the wallet name included. By the use of the
singular, I assume you mean a descriptor without the /0/* or /1/* suffix
(which I think is a good idea).

WRT to QR codes, using the BCR UR2.0 standard you linked to is IMO the
right approach. I'll link directly to the two BCR UR2.0 formats here which
are relevant:

1. For sharing the sharing the BIP44 account information from the signers
to the coordinator, the crypto-account format: [
https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md
]
2. For sharing the output descriptor from the coordinator to the signers,
the crypto-output format: [
https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md
]

Craig

On Tue, Feb 9, 2021 at 9:53 AM Hugo Nguyen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi all,
> I would like to propose a new BIP for Secure Multisig Setup.
> This proposal has taken inputs from folks at Coldcard, Shift Crypto and
> Cobo -- listed below as co-authors.
>
> This was inspired by my own experience working with hardware wallets on
> the market, as well as existing research into the challenges of multisig.
>
> Cheers,
> Hugo
>
> <pre>
>   BIP: To be determined
>   Layer: Applications
>   Title: Bitcoin Secure Multisig Setup (BSMS)
>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>,
> Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>,
> Rodolfo Novak <rodolfo at coinkite.com>
>   Comments-Summary: No comments yet.
>   Comments-URI:
>   Status: Proposed
>   Type: Standards Track
>   Created: 2020-11-10
>   License: BSD-2-Clause
> </pre>
>
> ==Introduction==
>
> ===Abstract===
>
> This document proposes a mechanism to set up multisig wallets securely.
>
> ===Copyright===
>
> This BIP is licensed under the 2-clause BSD license.
>
> ===Motivation===
>
> The Bitcoin multisig experience has been greatly streamlined under [
> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174
> (Partially Signed Bitcoin Transaction)]. However, what is still missing is
> a standardized process for setting up multisig wallets securely across
> different vendors.
>
> There are a number of concerns when it comes to setting up a multisig
> wallet:
>
> # Whether the multisig configuration, such as Signer membership, script
> type, derivation paths and number of signatures required, is correct and
> not tampered with.
> # Whether Signer persists the multisig configuration in their respective
> storage, and under what format.
> # Whether Signer's storage is tamper-proof.
> # Whether Signer subsequently uses the multisig configuration to generate
> and verify receive and change addresses.
>
> An attacker who can modify the multisig configuration can steal or hold
> funds to ransom by duping the user into sending funds to the wrong address.
>
> This proposal seeks to address concerns #1 and #2: to mitigate the risk of
> tampering during the initial setup phase, and to define an interoperable
> multisig configuration format.
>
> Concerns #3 and #4 should be handled by Signers and is out of scope of
> this proposal.
>
> ==Specification==
>
> ===Prerequisites===
> This proposal assumes the parties in the multisig support [
> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32], [
> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the
> descriptor language] and encryption.
>
> ==Roles==
> ===Coordinator===
>
> The Coordinator initiates the multisig setup. The Coordinator determines
> what type of multisig is used and how many members and signatures are
> needed. If encryption is enabled, the Coordinator generates a secret token,
> to be shared among the parties for secure communication. The Coordinator
> gathers information from the Signers to generate a descriptor record. The
> Coordinator distributes the descriptor record back to the Signers.
>
> ===Signer===
>
> The Signer is a participating member in the multisig. Its responsibilities
> include providing its XPUB to the Coordinator, verifying that its XPUB is
> included in the descriptor record and persisting the descriptor record in
> its storage.
>
> ==Setup Process==
>
> ===Round 1===
>
> ====Coordinator====
>
> * The Coordinator creates a multisig wallet creation session. The
> Coordinator determines the type of multisig script used and the signing
> configuration (<tt>M</tt> and <tt>N</tt>).
> * If encryption is enabled, the Coordinator also generates a secret token,
> hereby denoted <tt>TOKEN</tt>.
> * TOKEN is in ASCII format and must have a minimum of 8 characters. TOKEN
> should expire after some time period determined by the Coordinator, e.g.,
> 24 hours.
> * TOKEN acts as an encryption key among the parties. The method of
> encryption is AES, CTR mode. The encryption key can be calculated by
> performing a double hash operation on the TOKEN: <tt>ENCRYPTION_KEY =
> SHA256(SHA256(TOKEN))</tt>.
> * A TOKEN value of <tt>-1</tt> means that encryption is disabled and all
> the encryption/decryption steps below can be skipped.
> * The Coordinator shares the TOKEN with all participating Signers over a
> secure channel.
>
> ====Signer====
>
> * The Signer generates a key record by prompting the user for the TOKEN
> and a derivation path.
> * The first line in the record must be the <tt>TOKEN</tt>. If encryption
> is disabled, set the TOKEN to -1. The second line must be the <tt>KEY</tt>,
> whereas KEY is an XPUB. KEY must include key origin information and written
> in the descriptor-defined format, i.e.: <tt>[{master key
> fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a
> <tt>SIG</tt>, whereas SIG is the signature generated by using the
> corresponding private key to sign the first two lines. Finally, the Signer
> encrypts the entire record with ENCRYPTION_KEY.
>
> ===Round 2===
>
> ====Coordinator====
>
> * The Coordinator gathers key records from all participating Signers.
> Abort the setup if TOKEN has expired.
> * For each key record, the Coordinator decrypts it using ENCRYPTION_KEY.
> The Coordinator verifies that the included SIG is valid given the KEY.
> * If all key records look good, the Coordinator generates a descriptor
> record, which is simply the descriptor string plus a <tt>CHECKSUM</tt>, all
> in one line. The CHECKSUM has BECH32 encoding and is described at [
> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums].
> The Coordinator encrypts this descriptor record with ENCRYPTION_KEY.
> * The Coordinator sends the encrypted descriptor record to all
> participating Signers.
>
> ====Signer====
>
> * The Signer imports the descriptor record, decrypts it by prompting the
> user for TOKEN.
> * The Signer calculates and verifies the descriptor?s CHECKSUM. Abort the
> setup if the CHECKSUM is incorrect.
> * The Signer checks whether one of the KEYs in the descriptor belongs to
> it, using path and fingerprint information included in the descriptor. The
> check must perform an exact match on the KEYs, and not using shortcuts such
> as matching fingerprints (which is trivial to spoof). Abort the setup if it
> doesn?t detect its own KEY.
> * For confirmation, the Signer must display to the user the descriptor's
> CHECKSUM, plus other configurations, such as M and N. The total number of
> Signers, N, is important to prevent a KEY insertion attack. All
> participating Signers should be able to display the same confirmation.
> * If all checks pass, the Signer persists the descriptor record in its
> storage. The Signer should subsequently use the descriptor to generate and
> verify receive and change addresses.
>
> This completes the setup.
>
> ==QR Codes==
> For signers that use QR codes to transmit data, key and descriptor records
> can be converted to QR codes, following [
> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md
> the BCR standard].
>
> ==Security==
>
> This proposal introduce two layers of protection. The first one is a
> temporary, secret token, used to encrypt the two rounds of communication
> between the Signers and the Coordinator. The second one is through the
> descriptor checksum and visual inspection of the descriptor itself.
>
> The token is only needed during the setup phase, and can be safely thrown
> away afterwards. The token does not guarantee that the Signer membership
> set is not modified, since that depends on the overall security of all
> parties in the setup, but it can make it significantly harder for an
> attacker to do so.
>
> There are three ways an attacker can modify the membership set: by
> changing an existing member, by removing an existing member, or by adding a
> new member.
>
> For the first two methods, one of the Signers will be able to detect that
> its membership has been changed or removed, and reject the final
> descriptor. Thus, it is vital that all participating Signers check that
> their membership is intact in the descriptor. Even one Signer failing to
> check for its membership means that the setup could be compromised.
>
> For the third type of attack, the descriptor checksum and visual
> inspection of the descriptor itself are the only way to guard against
> malicious members from being inserted into the set.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/52df63dc/attachment-0001.html>

From ChristopherA at lifewithalacrity.com  Tue Feb  9 09:38:43 2021
From: ChristopherA at lifewithalacrity.com (Christopher Allen)
Date: Tue, 9 Feb 2021 01:38:43 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
Message-ID: <CACrqygC9z_YrnWdmo=kVh_6jWbCb=w++vAe1uBkeQMmKy6nYtg@mail.gmail.com>

In the Airgapped Wallet Community we also have been investigating
solutions, in particular as current common practice is is reuse the same
xpub for all multisigs, for instance [90081696/48'/0'/0'/2']
xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b

We?ve also have been looking into multi round commitment scheme, but wanted
to align the UX so that it would work like to musig for users. Discussion
on it is scattered, for instance
https://github.com/BlockchainCommons/Airgapped-Wallet-Community/discussions/16#discussioncomment-212013

Nothing got as far as your version though.

So Concept ACK from Blockchain Commons. Less clear on your specifics
though. We will review.

Note that we are releasing a descriptor & multisig centric iOS and Android
reference wallet soon so solving this correctly and having interoperability
with others is very important for our roadmap.

? Christopher Allen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/25fbca00/attachment-0001.html>

From hugo at nunchuk.io  Tue Feb  9 10:05:54 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Tue, 9 Feb 2021 02:05:54 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
Message-ID: <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>

Hi Christopher,
Comments inline.

On Tue, Feb 9, 2021 at 1:31 AM Christopher Allen <
ChristopherA at lifewithalacrity.com> wrote:

> In the Airgapped Wallet Community we also have been investigating
> solutions, in particular as current common practice is is reuse the same
> xpub for all multisigs, for instance [90081696/48'/0'/0'/2']
> xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b
>
>
I don't think reusing XPUBs inside different multisig wallets is a good
idea... For starters, loss of privacy in one wallet will immediately affect
privacy of other wallets. I think multisig wallets should be completely
firewalled from each other. That means one unique XPUB per wallet. This is
what we have been doing with the Nunchuk wallet.



> We?ve also have been looking into multi round commitment scheme, but
> wanted to align the UX so that it would work like to musig for users.
> Discussion on it is scattered, for instance
>
> https://github.com/BlockchainCommons/Airgapped-Wallet-Community/discussions/16#discussioncomment-212013
>
> Nothing got as far as your version though.
>
> So Concept ACK from Blockchain Commons. Less clear on your specifics
> though. We will review.
>
> Note that we are releasing a descriptor & multisig centric iOS and Android
> reference wallet soon so solving this correctly and having interoperability
> with others is very important for our roadmap.
>

Thank you and good to know ! Look forward to solving this correctly as well.

Best,

Hugo


>
> ? Christopher Allen
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/6ae0ad8d/attachment-0001.html>

From hugo at nunchuk.io  Tue Feb  9 09:45:48 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Tue, 9 Feb 2021 01:45:48 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPR5oBNWGLcnw97yPJBCgrj=EwoNdxz_RS9HM6EMpuX2-90JnQ@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CAPR5oBNWGLcnw97yPJBCgrj=EwoNdxz_RS9HM6EMpuX2-90JnQ@mail.gmail.com>
Message-ID: <CAPKmR9s1qrpxOsG12_x8pX5Rebf5ZZPrb+jO5X9d3bOO6Z9zzQ@mail.gmail.com>

Hi Craig,
Comments inline.

On Tue, Feb 9, 2021 at 1:17 AM Craig Raw <craigraw at gmail.com> wrote:

> Hi Hugo,
>
> Thanks for raising this again - I'll note there has already been much
> discussion on this topic. With respect to your "two layers of protection":
>
> > The Coordinator shares the TOKEN with all participating Signers over a
> secure channel.
>
> What secure channel do you propose? Currently, with the default of a
> software wallet coordinator talking to hardware wallets, we have USB, file
> (microSD), and QR as communication channels. It's unclear to me why the
> token and encryption process is necessary - in fact it's easier to verify
> what is going on using clear text, and the majority of setups will be
> locally done with the reasonable assumption of a secure environment. When
> the setup is remote, it's simpler to just transmit the key information over
> the secure channel which presumably already has encryption.
>
>
In short, a shared secret (the TOKEN) is needed because without it you
cannot guarantee that the devices you are connecting to are legitimate
members of the multisig wallet. Yes, the connection between the coordinator
and each device could be secure - but a malicious actor can establish a
secure channel just as well as a good one. You are correct that this is
less of an issue for local setups, but this is especially important for
distributed multisig - where you cannot physically see what's on the other
side.

I would love to remove the shared secret/encryption aspect out of the
proposal, but so far I haven't found any way around this issue, aside from
establishing a shared secret prior to setting up the wallet...

I also realized that supporting this could be a big ask for vendors, so
I've made this part of the proposal optional.

Another note here is that right after I posted the proposal (classic...), I
also realized there could be another optimization: the secure session
established by the shared secret can remain open indefinitely on the device
side - until a different TOKEN is entered. That way the user needs to enter
the TOKEN only once, saving us one interaction.


> > The second one is through the descriptor checksum and visual inspection
> of the descriptor itself.
>
> This is a reasonable suggestion, although it's worth noting that support
> for storing multisig setups on hardware wallets varies. Coldcard supports
> this through importing of a proprietary .txt format file (which has been
> adopted by a number of other vendors). Trezor and Ledger (AFAIK) do not
> however store multisig setups, which could make this step confusing. With
> that said, the use of an output descriptor is certainly a more standardised
> approach, albeit one without the wallet name included. By the use of the
> singular, I assume you mean a descriptor without the /0/* or /1/* suffix
> (which I think is a good idea).
>
>
I'm aware that Trezor and Ledger currently cannot support this. But IMHO
lack of support on some devices shouldn't prevent us from setting a good
standard here. Cosigner registration on the device is crucial, as you don't
have to rely on everything being included in the PSBT (which also adds
mental overhead as the user has to verify each and every transaction).

Yes, descriptor without the /0/* and /1/* - Thanks for clarifying. Will
update the proposal.



> WRT to QR codes, using the BCR UR2.0 standard you linked to is IMO the
> right approach. I'll link directly to the two BCR UR2.0 formats here which
> are relevant:
>
> 1. For sharing the sharing the BIP44 account information from the signers
> to the coordinator, the crypto-account format: [
> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md
> ]
> 2. For sharing the output descriptor from the coordinator to the signers,
> the crypto-output format: [
> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md
> ]
>
>
Thanks, will update!


> Craig
>
>
>
> On Tue, Feb 9, 2021 at 9:53 AM Hugo Nguyen via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi all,
>> I would like to propose a new BIP for Secure Multisig Setup.
>> This proposal has taken inputs from folks at Coldcard, Shift Crypto and
>> Cobo -- listed below as co-authors.
>>
>> This was inspired by my own experience working with hardware wallets on
>> the market, as well as existing research into the challenges of multisig.
>>
>> Cheers,
>> Hugo
>>
>> <pre>
>>   BIP: To be determined
>>   Layer: Applications
>>   Title: Bitcoin Secure Multisig Setup (BSMS)
>>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>,
>> Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>,
>> Rodolfo Novak <rodolfo at coinkite.com>
>>   Comments-Summary: No comments yet.
>>   Comments-URI:
>>   Status: Proposed
>>   Type: Standards Track
>>   Created: 2020-11-10
>>   License: BSD-2-Clause
>> </pre>
>>
>> ==Introduction==
>>
>> ===Abstract===
>>
>> This document proposes a mechanism to set up multisig wallets securely.
>>
>> ===Copyright===
>>
>> This BIP is licensed under the 2-clause BSD license.
>>
>> ===Motivation===
>>
>> The Bitcoin multisig experience has been greatly streamlined under [
>> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174
>> (Partially Signed Bitcoin Transaction)]. However, what is still missing is
>> a standardized process for setting up multisig wallets securely across
>> different vendors.
>>
>> There are a number of concerns when it comes to setting up a multisig
>> wallet:
>>
>> # Whether the multisig configuration, such as Signer membership, script
>> type, derivation paths and number of signatures required, is correct and
>> not tampered with.
>> # Whether Signer persists the multisig configuration in their respective
>> storage, and under what format.
>> # Whether Signer's storage is tamper-proof.
>> # Whether Signer subsequently uses the multisig configuration to generate
>> and verify receive and change addresses.
>>
>> An attacker who can modify the multisig configuration can steal or hold
>> funds to ransom by duping the user into sending funds to the wrong address.
>>
>> This proposal seeks to address concerns #1 and #2: to mitigate the risk
>> of tampering during the initial setup phase, and to define an interoperable
>> multisig configuration format.
>>
>> Concerns #3 and #4 should be handled by Signers and is out of scope of
>> this proposal.
>>
>> ==Specification==
>>
>> ===Prerequisites===
>> This proposal assumes the parties in the multisig support [
>> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32], [
>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the
>> descriptor language] and encryption.
>>
>> ==Roles==
>> ===Coordinator===
>>
>> The Coordinator initiates the multisig setup. The Coordinator determines
>> what type of multisig is used and how many members and signatures are
>> needed. If encryption is enabled, the Coordinator generates a secret token,
>> to be shared among the parties for secure communication. The Coordinator
>> gathers information from the Signers to generate a descriptor record. The
>> Coordinator distributes the descriptor record back to the Signers.
>>
>> ===Signer===
>>
>> The Signer is a participating member in the multisig. Its
>> responsibilities include providing its XPUB to the Coordinator, verifying
>> that its XPUB is included in the descriptor record and persisting the
>> descriptor record in its storage.
>>
>> ==Setup Process==
>>
>> ===Round 1===
>>
>> ====Coordinator====
>>
>> * The Coordinator creates a multisig wallet creation session. The
>> Coordinator determines the type of multisig script used and the signing
>> configuration (<tt>M</tt> and <tt>N</tt>).
>> * If encryption is enabled, the Coordinator also generates a secret
>> token, hereby denoted <tt>TOKEN</tt>.
>> * TOKEN is in ASCII format and must have a minimum of 8 characters. TOKEN
>> should expire after some time period determined by the Coordinator, e.g.,
>> 24 hours.
>> * TOKEN acts as an encryption key among the parties. The method of
>> encryption is AES, CTR mode. The encryption key can be calculated by
>> performing a double hash operation on the TOKEN: <tt>ENCRYPTION_KEY =
>> SHA256(SHA256(TOKEN))</tt>.
>> * A TOKEN value of <tt>-1</tt> means that encryption is disabled and all
>> the encryption/decryption steps below can be skipped.
>> * The Coordinator shares the TOKEN with all participating Signers over a
>> secure channel.
>>
>> ====Signer====
>>
>> * The Signer generates a key record by prompting the user for the TOKEN
>> and a derivation path.
>> * The first line in the record must be the <tt>TOKEN</tt>. If encryption
>> is disabled, set the TOKEN to -1. The second line must be the <tt>KEY</tt>,
>> whereas KEY is an XPUB. KEY must include key origin information and written
>> in the descriptor-defined format, i.e.: <tt>[{master key
>> fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a
>> <tt>SIG</tt>, whereas SIG is the signature generated by using the
>> corresponding private key to sign the first two lines. Finally, the Signer
>> encrypts the entire record with ENCRYPTION_KEY.
>>
>> ===Round 2===
>>
>> ====Coordinator====
>>
>> * The Coordinator gathers key records from all participating Signers.
>> Abort the setup if TOKEN has expired.
>> * For each key record, the Coordinator decrypts it using ENCRYPTION_KEY.
>> The Coordinator verifies that the included SIG is valid given the KEY.
>> * If all key records look good, the Coordinator generates a descriptor
>> record, which is simply the descriptor string plus a <tt>CHECKSUM</tt>, all
>> in one line. The CHECKSUM has BECH32 encoding and is described at [
>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums].
>> The Coordinator encrypts this descriptor record with ENCRYPTION_KEY.
>> * The Coordinator sends the encrypted descriptor record to all
>> participating Signers.
>>
>> ====Signer====
>>
>> * The Signer imports the descriptor record, decrypts it by prompting the
>> user for TOKEN.
>> * The Signer calculates and verifies the descriptor?s CHECKSUM. Abort the
>> setup if the CHECKSUM is incorrect.
>> * The Signer checks whether one of the KEYs in the descriptor belongs to
>> it, using path and fingerprint information included in the descriptor. The
>> check must perform an exact match on the KEYs, and not using shortcuts such
>> as matching fingerprints (which is trivial to spoof). Abort the setup if it
>> doesn?t detect its own KEY.
>> * For confirmation, the Signer must display to the user the descriptor's
>> CHECKSUM, plus other configurations, such as M and N. The total number of
>> Signers, N, is important to prevent a KEY insertion attack. All
>> participating Signers should be able to display the same confirmation.
>> * If all checks pass, the Signer persists the descriptor record in its
>> storage. The Signer should subsequently use the descriptor to generate and
>> verify receive and change addresses.
>>
>> This completes the setup.
>>
>> ==QR Codes==
>> For signers that use QR codes to transmit data, key and descriptor
>> records can be converted to QR codes, following [
>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md
>> the BCR standard].
>>
>> ==Security==
>>
>> This proposal introduce two layers of protection. The first one is a
>> temporary, secret token, used to encrypt the two rounds of communication
>> between the Signers and the Coordinator. The second one is through the
>> descriptor checksum and visual inspection of the descriptor itself.
>>
>> The token is only needed during the setup phase, and can be safely thrown
>> away afterwards. The token does not guarantee that the Signer membership
>> set is not modified, since that depends on the overall security of all
>> parties in the setup, but it can make it significantly harder for an
>> attacker to do so.
>>
>> There are three ways an attacker can modify the membership set: by
>> changing an existing member, by removing an existing member, or by adding a
>> new member.
>>
>> For the first two methods, one of the Signers will be able to detect that
>> its membership has been changed or removed, and reject the final
>> descriptor. Thus, it is vital that all participating Signers check that
>> their membership is intact in the descriptor. Even one Signer failing to
>> check for its membership means that the setup could be compromised.
>>
>> For the third type of attack, the descriptor checksum and visual
>> inspection of the descriptor itself are the only way to guard against
>> malicious members from being inserted into the set.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/0796efc1/attachment-0001.html>

From hugo at nunchuk.io  Tue Feb  9 10:58:06 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Tue, 9 Feb 2021 02:58:06 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
Message-ID: <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>

On Tue, Feb 9, 2021 at 2:19 AM Christopher Allen <
ChristopherA at lifewithalacrity.com> wrote:

>
>
> On Tue, Feb 9, 2021 at 2:06 AM Hugo Nguyen <hugo at nunchuk.io> wrote:
>
>>
>> I don't think reusing XPUBs inside different multisig wallets is a good
>> idea... For starters, loss of privacy in one wallet will immediately affect
>> privacy of other wallets. I think multisig wallets should be completely
>> firewalled from each other. That means one unique XPUB per wallet. This is
>> what we have been doing with the Nunchuk wallet.
>>
>
> To be clear, I have stated repeatedly that xpub reuse into multisig is a
> poor practice. However, finding a trustless solution when a wallet is
> airgapped with no network, or is stateless like Trezor, is quite hard.
>
> The challenge also includes how does an airgapped or stateless wallet know
> that it is talking to the same process on the other side that that it gave
> the xpub to in the first place. Without state to allow for a commitment, or
> at least a TOFU, a cosigner who thought he was part of a 3 of 5 could
> discover that he instead is in a 2 of 3, or in a script with an OR, as some
> form of scam.
>

The shared secret approach that I mentioned in the proposal actually can
help you here. The TOKEN doubles as a session ID - thereby establishing a
common state on both sides.

Best,
Hugo


>
> ? Christopher Allen
>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210209/51b3281e/attachment.html>

From antoine.riard at gmail.com  Wed Feb 10 13:13:34 2021
From: antoine.riard at gmail.com (Antoine Riard)
Date: Wed, 10 Feb 2021 08:13:34 -0500
Subject: [bitcoin-dev] Proposal to stop processing of unrequested
	transactions in Bitcoin Core
Message-ID: <CALZpt+E6UqB5cew145PO2qiEMsELJ-TuGyE5PBL04T1tESiOiQ@mail.gmail.com>

Hi,

I'm proposing to stop the processing of unrequested transactions in Bitcoin
Core 22.0+ at TX message reception. An unrequested transaction is one
defined by which a "getdata" message for its specific identifier (either
txid or wtxid) has not been previously issued by the node [0].

This change is motivated by reducing the CPU DoS surface of Bitcoin Core
around mempool acceptance. Currently, an attacker can open multiple inbound
connections to a node and send expensive to validate, junk transactions.
Once the canonical INV/GETDATA sequence is enforced on the network, a
further protection would be to deprioritize bandwidth and validation
resources allocation, or even to wither connections with such DoSy peers. A
permissioned peer (PF_RELAY) will still be able to bypass such restrictions.

Raw TX message processing has always been tolerated by Core and as such
some Bitcoin clients aren't bothering with an INV/GETDATA sequence. Such
change will break their tx-relay capabilities on the p2p network and
require adaptation from them. Given deployment time of any release, I hope
it provides a window time wide enough before the old tx-processing behavior
becomes the minority.

Eager to gather feedback on this proposal, especially if such change is
deemed as too much constraining or fast on any Bitcoin software.

Cheers,
Antoine

[0] See https://github.com/bitcoin/bitcoin/pull/20277
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210210/16d1a33d/attachment.html>

From ZmnSCPxj at protonmail.com  Thu Feb 11 08:20:54 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Thu, 11 Feb 2021 08:20:54 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
 <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
Message-ID: <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>


Good morning Luke,

> > (to be fair, there were tools to force you to improve coverage by injecting faults to your RTL, e.g. it would virtually flip an `&&` to an `||` and if none of your tests signaled an error it would complain that your test coverage sucked.)
>
> nice!

It should be possible for a tool to be developed to parse a Verilog RTL design, then generate a new version of it with one change.
Then you could add some automation to run a set of testcases around mutated variants of the design.
For example, it could create a "wrapper" module that connects to an unmutated differently-named version of the design, and various mutated versions, wire all their inputs together, then compare outputs.
If the testcase could trigger an output of a mutated version to be different from the reference version, then we would consider that mutation covered by that testcase.
Possibly that could be done with Verilog-2001 file writing code in the wrapper module to dump out which mutations were covered, then a summary program could just read in the generated file.
Or Verilog plugins could be used as well (Icarus supports this, that is how it implements all `$` functions).

A drawback is that just because an output is different does not mean the testcase actually ***checks*** that output.
If the testcase does not detect the diverging output it could still not be properly covering that.

The point of this is to check coverage of the tests.
Not sure how well this works with formal validation.



> > Synthesis in particular is a black box and each vendor keeps their particular implementations and tricks secret.
>
> sigh. ?i think that's partly because they have to insert diodes, and buffers, and generally mess with the netlist.
>
> i was stunned to learn that in a 28nm ASIC, 50% of it is repeater-buffers!

Well, that surprises me as well.

On the other hand, smaller technologies consistently have lower raw output current driving capability due to the smaller size, and as trace width goes down and frequency goes up they stop acting like ideal 0-impedance traces and start acting more like transmission lines.
So I suppose at some point something like that would occur and I should not actually be surprised.
(Maybe I am more surprised that it reached that level at that technology size, I would have thought 33% at 7nm.)

In the modules where we were doing manual netlist+layout, we used inverting buffers instead (slightly smaller than non-inverrting buffers, in most technologies a non-inverting buffer is just an inverter followed by an inverting buffer), it was an advantage of manual design since it looks like synthesis tools are not willing to invert the contents of intermediate flip-lfops even if it could give theoretical speed+size advantage to use an inverting buffer rather than an non-inverting one (it looks like synthesis optimization starts at the output of flip-flops and ends at their input, so a manual designer could achieve slightly better performance if they were willing to invert an intermediate flip-flop).
Another was that inverting latches were smaller in the technology we were using than non-inverting latches, so it was perfectly natural for us to use an inverting latch and an inverting buffer on those parts where we needed higher fan-out (t was equivalent to a "custom" latch that had higher-than-normal driving capability).

Scan chain test generation was impossible though, as those require flip-flops, not latches.
Fortunately this was "just" deserialization of high-frequency low-width data with no transformation of the data (that was done after the deserialization, at lower clock speeds but higher data width, in pure RTL so flip-flops), so it was judged acceptable that it would not be covered by scan chain, since scan chain is primarily for testing combinational logic between flip-flops.
So we just had flip-flops at the input, and flip-flops at the output, and forced all latches to pass-through mode, during scan mode.
We just needed to have enough coverage to uncover stuck-at faults (which was still a pain, since additional test vectors slow down manufacturing so we had to reduce the test vectors to the minimum possible) in non-scan-momde testing.

Man, making ASICs was tough.


>
> plus, they make an awful lot of money, it is good business.
>
> > Pointing some funding at the open-source Icarus Verilog might also fit, as it lost its ability to do synthesis more than a decade ago due to inability to maintain.
>
> ah i didn't know it could do synthesis at all! i thought it was simulation only.

Icarus was the only open-source synthesis tool I could find back then, and it dropped synthesis capability fairly early due to maintenance burden (I never managed to get the old version with synthesis compiled and never managed actual synthesis on it, so my knowledge of it is theoretical).


There is an argument that open-source software is not truly open-source unless it can be compiled by open-source compilers or executed by open-source interpreters.
Similarly, I think open-source hardware RTL designs are not truly open-source if there are no open-source synthesis tools that can synthesize it to netlist and then lay it out.

Icarus can interpret most Veriog RTL designs, though.
However, at the time I left, I had already mandated that new code should use `always_comb` and `always_ff` (previously I had mandated that new code should use `always @*` for combinational logic) and was encouraging my subordinates to use loops and `generate`.
Icarus did not support `always_comb` and `always_ff` at the time (though worked perfectly fine with loops and `generate`).
In addition, at the time, we (actually just me in that company haha) were dabbling in object-oriented testing methodologies (which Icarus has no plans on ever implementing, which is understandable since it is a massive increase in complexity, it is much much harder than the scheduling shenanigans of `always_comb` and the "just treat it as `always`" of `always_ff`).

(Particularly, you need object-oriented testbenches since SystemVerilog includes a fuzz-testing framework to randomize fields of objects according to certain engineer-provided constraints, and then you would use those object fields to derive the test vectors your test framework would feed into the DUT, this was a massive increase in code coverage for a largish up-front cost but once you built the test framework you could just dump various constraints on your test specification objects, I actually caught a few bugs that we would not have otherwise found with our previous checklist-based testing methodology.)
(Unfortunately it turned out that it required a more expensive license and I ended up hogging the only one we had of that more expensive license (which, if I remember correctly, was the same license needed for formal verification of netlist<->RTL equivalence) for this, which killed enthusiasm for this technique, sigh, this is another argument for getting open-source hardware design tools developed; not much sense in having open-source RTL for a crypto device if you have to pay through the nose for a license just to synthesize it, never mind the manufacturing cost.)


-----------------------


Another point to ponder is test modes.

In mass production you **need** test modes.
There will always be some number of manufacturing defects because even the cleanest of cleanrooms *will* have a tiny amount of contaminants (what can go wrong will go wrong).
Test modes are run in manufacturing to filter out chips with failing circuitry due to contamination.

Now, a typical way of implementing test modes is to have a special command sent over, say, the "normal" serial port interface of a chip, which then enters various test modes to allow, say, scan chain testing.
Of course, scan chain testing is done by pushing test vectors into all flip-flops, and then the test is validated by pulsing global clock once (often the test mode forces all flip-flops on the same clock), then pulling data from all flip-flops to verify that all the circuitry works as designed.

The "pulling data from all flip-flops" is of course just another way of saying that all mass-produced chips have a way of letting ***anyone*** exfiltrate data from their flip-flops via test modes.

Thus, for a secure environment, you need to ensure that test modes cannot be entered after the device enters normal operation.
For example, you might have a dedicated pad which is normally pulled-down, but if at reset it is pulled up, the device enters test mode.
If at reset the pad is pulled down, the device is in normal mode and even if the pad is pulled up afterwards the device will not enter test mode.
This ensures that only reset data can be read from the device, without possibility of exfiltration of sensitive (key material or midstate) data.
The pad should also not be exposed as a package pinout except perhaps on DS and ES packages, and the pulldown resistor has to be on-chip.

As an additional precaution, we can also create a small secure memory (maybe 256 octet addressable would be more than enough).
It is possible to exempt flip-flops from scan chain generation (usually by explicitly instantiating flip-flops in a separate module and telling post-synthesis tools to exempt the module from scan chain synthesis).
This gives an extra layer of protection against test mode accessing sensitive data; even if we manage to screw up test mode and it is possible to force reset on the test mode circuit without resetting the rest of the design, sensitive data is still out of the scan chain.
Of course, since they are not on scan, it is possible they have undetectable manufacturing defects, so you would need to use some kind of ECC, or better triple-redundancy best-of-three, to protect against manufacturing defects on the non-scan flip-flops.
Fortunately non-scan flip-flops are often a good bit smaller than scan flip-flops, so the redundancy is not so onerous.
Since the ECC / best-of-three circuit itself would need to be tested, you would multiplex their inputs, in normal mode they get inputs from the non-scan-chain flip-flops, in test mode they get inputs from separate scan-chain flip-flops, so that the ECC / best-of-three circuit is testable at scan mode.
You would also need a separate test of the secure memory, this time running in normal mode with a special test program in the CPU, just in case.
Finally, you would explicitly lay them out "distributed" around the chip, since manufacturing defects tend to correlate in space (they are usually from dust, and dust particles can be large relative to cell size), you do not want all three of the best-of-three to have manufacturing defects.
For example, you could have a 256 x 8 non-scan-chain flip-flop module, instantiate three of those, and explicitly place them in corners of the digital area, then use a best-of-three circuit to resolve the "correct" value.

The test mode circuit itself could ensure that the device enters test mode if and only if the secure memory contains all 0 data after the test mode circuit is reset.
For example, the 256 x 8 non-scan-chain flip-flop module could have a large OR circuit that ORs all the flip-flops, then outputs a single bit that is the bitwise OR of all the flip-flop contents.
Then the test mode circuit gets the `in_use` outputs fo the three secure flip-flop modules, and if at reset any of them are `1` then it will refuse to enter test mode even if the test mode pad is pulled high.
This ensures that even if an attacker is somehow able to reset *only* the test mode circuit somehow (this is basic engineering, always assume something will go wrong), if the secure memory has any non-0 data (we presume it resets to 0), the device will still not enter test mode.

Of course, if the secure memory itself is accessible from the CPU, then it remains possible that a CPU program is reading from the secure area, keeping raw data in CPU registers, from which a test-mode might be able to extract if the device is somehow forced into test mode even after normal mode.
You could redesign your implementations of field multiplication and SHA midstate computation so that they directly read from the secure memory and write to the secure memory without using any flip-flops along the way, and have only the cryptographic circuit have access to the secure memory.
That way there is reduced possibility that intermediate flip-flops (that are part of the scan chain) outside the secure memory having sensitive key material or midstate data.
You would need to use a custom bus with separate read and write addresses, and non-pipelined unbuffered access, and since you want to distribute your secure memory physically distant, that translates to wide and long buses (it might be better to use 64 x 32 or 32 x 64 addressable memories, to increase what the cryptographic circuit has access to per clock cycle) screwing with your layout, and probably having to run the secure memory + crypto circuit at a ***much*** slower clock domain (but more secure is a good tradeoff for slowness).
Of course, that is a major design headache (the crypto circuit has to act mostly as a reduced-functionality processor), so you might just want to have the CPU directly access the secure memory and in early boot poke a `0x01` in some part of the memory, in the hope that the `in_use` flag in the previous paragraph is enough to suppress test modes from exfiltrating CPU registers.

Do note that with enough power-cycles and ESD noise you can put digital circuitry into really weird and unexpected states (seen it happen, though fairly hard to replicate, we had an ESD gun you could point at a chip to make it go into weird states), so being extra paranoid about test modes is important.
What can go wrong will go wrong!
In particular with "`TESTMODE_PAD` is only checked at reset" you would have to store `TESTMODE` in a non-scan flip-flop, and with enough targeted ESD that flip-flop can be jostled, setting `TESTMODE` even after normal operation.
You might instead want to use, say, a byte pattern instead of a single bit to represent `TESTMODE`, so the `TESTMODE` register has to have a specific value such as `0xA5`, so that targeted ESD has to be very lucky in order to force your device into test mode.
For example, since you need to check the `TESTMODE` pad at reset anyway, you could do something like this:

    input CLK, RESET_N, TESTMODE_PAD, IN_USE0, IN_USE1, IN_USE2;
    output reg TESTMODE;

    wire in_use = IN_USE0 || IN_USE1 || IN_USE2;

    reg [7:0] testmode_ff;
    wire [7:0] next_testmode_ff =
        (testmode_ff == 8'hA5 || testmode_ff == 8'h00) ?
          (TESTMODE_PAD && !in_use) ?                      8'hA5 :
          /*otherwise*/                                    8'h5A :
        /*otherwise*/                                      testmode_ff ;
    always_ff @(posedge CLK, negedge RESET_N) begin
        if (!RESET_N) testmode_ff <= 0x00;
        else          testmode_ff <= next_testmode_ff; end

    wire next_TESTMODE = (testmode_ff == 8'hA5);
    always_ff @(posedge CLK, negedge RESET_N) begin
        if (!RESET_N) TESTMODE <= 1'b0;
        else          TESTMODE <= next_TESTMODE; end

Do note that the `TESTMODE` is a flip-flop, since you do ***not*** want glitches on the `TESTMODE` signal line, it would be horribly unsafe to output it from combinational circuitry directly, please do not do that.
Of course that flip-flop can instead be the target of ESD gunnery, but since you need many clock pulses to read the scan chain, it should with good probability also get set to `0` on the next clock pulse and leave test mode (and probably crash the device as well until full reset, but this "fails safe" since at least sensitive data cannot be extracted).
`TESTMODE` has no feedback, thus cannot be stuck in a state loop.
`testmode_ff` *can* be stuck in a state loop, but that is deliberate, as it would "fail safe" if it gets a value other than `0xA5`, it would not enter test mode (and if it enters `0xA5` it can easily leave test mode by either `TESTMODE_PAD` or `in_use`).

(Sure, an attacker can try targeted ESD at the `TESTMODE` flip-flop repeatedly, but this risks also flipping other scan flip-flops that contain the data that is being extracted, so this might be sufficient protection in practice.)

If you are really going to open-source the hardware design then the layout is also open and attackers can probably target specific chip area for ESD pulse to try a flip-flop upset, so you need to be extra careful.
Note as well that even closed-source "secure" elements can be reverse-engineered (I used to do this in the IC design job as a junior engineer, it was the sort of shitty brain-numbing work forced on new hires), so security-by-obscurity does have a limit as well, it should be possible to try to figure out the testmode circuitry on "secure" elements and try to get targeted ESD upsets at flip-flops on the testmode circuit.

Test mode design is something of an arcane art, especially if you are trying to build a security device, on the one hand you need to ensure you deliver devices without manufacturing defects, on the other hand you need to ensure that the test mode is not entered inadvertently by strange conditions.

In general, because test modes are such a pain to deal with securely, and are an absolute necessity for mass production, you should assume that any "secure" chip can be broken by physical access and shooting short-range ESD pulses at it to try to get it into some test mode, unless it is openly designed to prevent test mode from persisting after entering normal mode, as above.

(No idea how that ESD gun thing worked or what it was formally called, we just called it the ESD gun, it was an amusing toy, you point it at the DUT and pull the trigger and suddenly it would switch modes, this of course was a bad thing since you want to make sure that as much as possible such upsets do not cause the chip to enter an irrecoverable mode but an amusing thing to do still, we even had small amounts of flash memory containing register settings that we would load into the settings registers periodically at the end of each display frame to protect against this kind of ESD gun thing since the flip-flops backing the settings registers were vulnerable to it and we needed a way to preserve the settings of the customer for the IC, the expected effect would be to cause the display to flicker.)

Regards,
ZmnSCPxj


From orlovsky at protonmail.com  Thu Feb 11 07:27:42 2021
From: orlovsky at protonmail.com (Dr Maxim Orlovsky)
Date: Thu, 11 Feb 2021 07:27:42 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
In-Reply-To: <20210205230029.4dd6fc4d@simplexum.com>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
 <20210205230029.4dd6fc4d@simplexum.com>
Message-ID: <19374944-3B6C-40FC-8E91-4319851E13D9@protonmail.com>

Hi Dmitry,

Thank you very much for readying and analyzing my proposal!

>> Testnet path is unhardened from this point & till the end of the
>> derivation path: no need to prevent private key leak there,
>> simplifies test software (hardened paths require private key access
>> for derivation).
> 
> I believe this will reduce robustness and will add complexity to the
> test software instead. If the derivation path is hardened in 'production
> code' and is unhardened in 'test code', then: code paths that depend on
> hardened derivation may not be tested; there will be unnecessary
> code that will need to deal with 'un-hardening' the paths for test code.
<...>
> It is OK to require privkey access to hardened paths in test
> software, because the same behaviour is expected in 'production?.

You are right, agree

> It is much more robust to just change the 'purpose' part of the path,
> and leave the rest unchanged.

Not sure whether the purpose is the correct place to indicate testnet: in this case it we will have to support one testnet per each blockchain type (which is not the case). So probably we should reserve a single dedicated value for any testnet withing ``blockchain` field using hardened path as you suggested - for instance, 0xFFFFFFFF may do the job.

Kind regards,
Maxim



From orlovsky at protonmail.com  Thu Feb 11 07:28:07 2021
From: orlovsky at protonmail.com (Dr Maxim Orlovsky)
Date: Thu, 11 Feb 2021 07:28:07 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
In-Reply-To: <CACrqygChUjwo43=ferqErAz8Mrq+n0zUghRy37cSqRTp3S1Q4g@mail.gmail.com>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
 <CACrqygChUjwo43=ferqErAz8Mrq+n0zUghRy37cSqRTp3S1Q4g@mail.gmail.com>
Message-ID: <CA961800-21A5-4BF9-AF2C-FD485368ABA8@protonmail.com>

Hi Christopher,

Thank you very much! Will look forward to talk to you regarding all of these, as we discussed elsewhere.

Kind regard,
Maxim


> On Feb 5, 2021, at 23:37, Christopher Allen <ChristopherA at lifewithalacrity.com> wrote:
> 
> Concept ACK.
> 
> I, in my role as a co-author of the emerging W3C Decentralized Identifier standard and of the BTCR DID method, organizer of the Bitcoin Airgapped Wallet Community (https://github.com/blockchainCommons/airgapped-Wallet-Community/discussions), and as principal architect of Blockchain Commons, am very interested in supporting discussion on this topic, and implementation of anything we decide. I also have some Patron's to Blockchain Commons interested in this topic and may be willing to financially support some reference code.
> 
> -- Christopher Allen



From stick at satoshilabs.com  Thu Feb 11 13:25:08 2021
From: stick at satoshilabs.com (Pavol Rusnak)
Date: Thu, 11 Feb 2021 14:25:08 +0100
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
Message-ID: <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>

> ENCRYPTION_KEY = SHA256(SHA256(TOKEN))

This scheme might be vulnerable to rainbow table attack.

The following scheme might be more secure:

DESCRIPTION = ASCII description provided by user
NONCE = 256-bit random number
ENCRYPTION_KEY = hmac-sha256(key=NONCE, msg=DESCRIPTION)

Coordinator distributes DESCRIPTION (fka TOKEN) together with NONCE to the
signers.

Also, is there any reason why you'd want to disable encryption? Why not
keep that as mandatory?


On Tue, 9 Feb 2021 at 12:39, Hugo Nguyen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>
> On Tue, Feb 9, 2021 at 2:19 AM Christopher Allen <
> ChristopherA at lifewithalacrity.com> wrote:
>
>>
>>
>> On Tue, Feb 9, 2021 at 2:06 AM Hugo Nguyen <hugo at nunchuk.io> wrote:
>>
>>>
>>> I don't think reusing XPUBs inside different multisig wallets is a good
>>> idea... For starters, loss of privacy in one wallet will immediately affect
>>> privacy of other wallets. I think multisig wallets should be completely
>>> firewalled from each other. That means one unique XPUB per wallet. This is
>>> what we have been doing with the Nunchuk wallet.
>>>
>>
>> To be clear, I have stated repeatedly that xpub reuse into multisig is a
>> poor practice. However, finding a trustless solution when a wallet is
>> airgapped with no network, or is stateless like Trezor, is quite hard.
>>
>> The challenge also includes how does an airgapped or stateless wallet
>> know that it is talking to the same process on the other side that that it
>> gave the xpub to in the first place. Without state to allow for a
>> commitment, or at least a TOFU, a cosigner who thought he was part of a 3
>> of 5 could discover that he instead is in a 2 of 3, or in a script with an
>> OR, as some form of scam.
>>
>
> The shared secret approach that I mentioned in the proposal actually can
> help you here. The TOKEN doubles as a session ID - thereby establishing a
> common state on both sides.
>
> Best,
> Hugo
>
>
>>
>> ? Christopher Allen
>>
>>> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>


-- 
Best Regards / S pozdravom,

Pavol "stick" Rusnak
CTO, SatoshiLabs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/9aae5cfa/attachment.html>

From hugo at nunchuk.io  Thu Feb 11 13:45:33 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Thu, 11 Feb 2021 05:45:33 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
Message-ID: <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>

Hi Pavol,

On Thu, Feb 11, 2021 at 5:25 AM Pavol Rusnak <stick at satoshilabs.com> wrote:

> > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))
>
> This scheme might be vulnerable to rainbow table attack.
>

Thank you for pointing this out! Incidentally, Dmitry Petukhov also told me
the same privately.


>
> The following scheme might be more secure:
>
> DESCRIPTION = ASCII description provided by user
> NONCE = 256-bit random number
> ENCRYPTION_KEY = hmac-sha256(key=NONCE, msg=DESCRIPTION)
>
> Coordinator distributes DESCRIPTION (fka TOKEN) together with NONCE to
> the signers.
>

This does seem to add a lot more entropy. The challenge is to balance the
security requirement with UX. In the absence of some handshake protocol to
exchange the shared secrets (DESCRIPTION / NONCE) , the user will have to
enter these manually on the devices. I'll think about this some more.


>
> Also, is there any reason why you'd want to disable encryption? Why not
> keep that as mandatory?
>

Making it mandatory would be nice, but IMHO not all use cases might require
encryption. For example, if you are setting up the multisig locally under a
safe environment you control, encryption might be an overkill.

Best,
Hugo



>
>
> On Tue, 9 Feb 2021 at 12:39, Hugo Nguyen via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>>
>>
>> On Tue, Feb 9, 2021 at 2:19 AM Christopher Allen <
>> ChristopherA at lifewithalacrity.com> wrote:
>>
>>>
>>>
>>> On Tue, Feb 9, 2021 at 2:06 AM Hugo Nguyen <hugo at nunchuk.io> wrote:
>>>
>>>>
>>>> I don't think reusing XPUBs inside different multisig wallets is a good
>>>> idea... For starters, loss of privacy in one wallet will immediately affect
>>>> privacy of other wallets. I think multisig wallets should be completely
>>>> firewalled from each other. That means one unique XPUB per wallet. This is
>>>> what we have been doing with the Nunchuk wallet.
>>>>
>>>
>>> To be clear, I have stated repeatedly that xpub reuse into multisig is a
>>> poor practice. However, finding a trustless solution when a wallet is
>>> airgapped with no network, or is stateless like Trezor, is quite hard.
>>>
>>> The challenge also includes how does an airgapped or stateless wallet
>>> know that it is talking to the same process on the other side that that it
>>> gave the xpub to in the first place. Without state to allow for a
>>> commitment, or at least a TOFU, a cosigner who thought he was part of a 3
>>> of 5 could discover that he instead is in a 2 of 3, or in a script with an
>>> OR, as some form of scam.
>>>
>>
>> The shared secret approach that I mentioned in the proposal actually can
>> help you here. The TOKEN doubles as a session ID - thereby establishing a
>> common state on both sides.
>>
>> Best,
>> Hugo
>>
>>
>>>
>>> ? Christopher Allen
>>>
>>>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> --
> Best Regards / S pozdravom,
>
> Pavol "stick" Rusnak
> CTO, SatoshiLabs
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/2ab27396/attachment-0001.html>

From orlovsky at protonmail.com  Thu Feb 11 14:38:57 2021
From: orlovsky at protonmail.com (Dr Maxim Orlovsky)
Date: Thu, 11 Feb 2021 14:38:57 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
In-Reply-To: <mCGqNxZZgiKEO8gbRcHFUxcU5fGBMWMfkJdapM2Nuhe0gemmqXRfnyqqaRY70UFea1udvQe0LIYt9Ps3lsgDArVHlfeMOWacXqZ7ZiGzMTU=@wuille.net>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
 <mCGqNxZZgiKEO8gbRcHFUxcU5fGBMWMfkJdapM2Nuhe0gemmqXRfnyqqaRY70UFea1udvQe0LIYt9Ps3lsgDArVHlfeMOWacXqZ7ZiGzMTU=@wuille.net>
Message-ID: <5096768E-3A77-4CD8-AC22-105CA63152A7@protonmail.com>

Hi Pieter,

... and sorry for misspelling your name in my first e-mail :(

Thank you very much for all the clarifications; it?s good to have them sorted out and clearly structured. From what you wrote it follows that we still need to reserve a dedicated purpose (with new BIP) for BIP340 signatures to avoid key reuse, am I right?

Kind regards,
Maxim

> On Feb 6, 2021, at 02:15, Pieter Wuille <bitcoin-dev at wuille.net> wrote:
> 
> 
> On Friday, February 5, 2021 9:51 AM, Dr Maxim Orlovsky via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
>> Hi,
>> 
>> Background
>> 
>> ====================
>> 
>> Had a discussion last night in Bitcoin Core IRC with Peter Wuille on different topics regarding key derivations, security, key tweaks in context of Schnorr signatures & Taproot. Would like to share some action points and plans that emerged from there:
>> 
>> 1.  There is a real need for BIP-43 based new BIP with a new purpose field for keys used in Schnorr signatures. Peter will not do it (he is not very much interested in spending his time on wallet-level stuff), so someone else should.
>> 2.  Keys used in Schnorr signatures MUST NEVER BE used in ECDSA signatures, otherwise there is a risk of private key leak via correlation attack. This is rationale behind N1.
> 
> Hi Maxim,
> 
> thanks for bringing up this discussion here. I'd like to clarify a few things though, as I think the above is formulated far too strongly.
> 
> There are two issues here: (1) reasons to avoid reusing the same key for privacy reasons, and (2) reasons to avoid using related keys for cryptographic reasons. And in practice, solutions to the first (which we already need, unrelated to Taproot/Schnorr) mean the second is largely moot.
> 
> 
> # Don't reuse keys for privacy/organizational reasons.
> 
> Reusing the same key in Bitcoin scripts - for use in distinct signature schemes or not - should always be avoided. It has obvious privacy implications; I don't think this is controversial, and it's a problem that exists today, unrelated to Taproot. E.g. you don't want to reuse the same keys as both single-sig and participation in multisig.
> 
> My personal view here is that distinct standard derivation paths help with this in the simple cases, but they're not a full solution in the most general case. E.g. if you want to use one seed/root to participate in multiple sets of multisig policies, you'll need some kind of index to assign to each anyway. For this reason in general I prefer solutions that explicitly track what path is used for what.
> 
> 
> # Don't use related keys for cryptographic reasons
> 
> There are some concerns to address here, but I want to make it clear there are no known attacks against usage of related keys across ECDSA and Schnorr, and I don't expect there will be. However, there is probably no proof for this, and creating one may be tricky. On the other hand, the ecosystem (Bitcoin, but also many other applications) has accepted ECDSA long ago, while it had no security proofs whatsoever (and even the ones that exist now rely on fairly unusual assumption; a proof for security of mixed Schnorr/ECDSA usage would inherently need equally unusual assumptions too).
> 
> Now, as soon as a hardened derivation separates different uses there is no concern at all. So any solution for avoiding key reuse (section above) that works by assigning (implicitly or explicitly) different hardened derivation paths (as BIP43 etc. do) to different uses implies there is never any concern about related keys across Schnorr/ECDSA.
> 
> If the keys are not separated by a hardened step, it's more complicated. Looking at the different cases:
> 
> (1) Signing with related ECDSA keys (e.g. two unhardened child keys from the same xpub)
> 
> - This is very common on BIP32 usage today, so hopefully it is secure! Tim Ruffing pointed me today to https://link.springer.com/chapter/10.1007/978-3-030-36938-5_8 whose abstract seems to indicate they prove this is actually secure, but I don't know under what assumptions. Note that the comment there about Schnorr not having this property does not apply to BIP340, because it uses key-prefixed Schnorr.
> 
> (2) Signing with related Schnorr keys.
> 
> - I believe this is secure simply because BIP340 challenges commit to the pubkey (key prefixing), and thus a signature on one shouldn't teach you anything about others. A formal proof is probably a bit longer, but still trivial to construct.
> 
> (3) The real question: signing with a Schnorr key that is related to an ECDSA key.
> 
> - I don't expect that this is easy to prove, but I have a very hard time imagining how it could be exploitable, given the use of domain-separated hashes. Aspects such as BIP340's key prefixing and the fact that Bitcoin sighashes indirectly commit to the (set of) signing pubkeys make it even harder.
> 
> 
> # TL;DR
> 
> * For privacy reasons, you should use separate keys/derivation branches for different uses in all circumstances (duh).
> * To stay within the realm of provably security it's advisable to make sure ECDSA key and Schnorr keys use distinct hardened derivation steps.
> * Even if you don't, you're really just back to the level of assurance we had about unhardened BIP32 ECDSA keys before a proof was known (which I think most people aren't even aware of).
> 
> Cheers,
> 
> --
> Pieter



From dp at simplexum.com  Thu Feb 11 16:29:10 2021
From: dp at simplexum.com (Dmitry Petukhov)
Date: Thu, 11 Feb 2021 17:29:10 +0100
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
Message-ID: <20210211172910.3b550706@simplexum.com>

? Thu, 11 Feb 2021 05:45:33 -0800
Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
wrote:

> > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))  
> >
> > This scheme might be vulnerable to rainbow table attack.
> >  
> 
> Thank you for pointing this out! Incidentally, Dmitry Petukhov also
> told me the same privately.

My thought was that if TOKEN has the characteristics of a password
(short ASCII string), then it would be better to use key derivation
function designed for passwords, like PBKDF2.

The counter-argument to this is that this adds another code dependency
for vendors, if the device firmware does not already have the required
key derivation function.

Maybe this could be solved by going into opposite direction - make the
"token" even longer, use the mnemoic.

The issue is that entering long data of the shared key into the device
manually is difficult UX-wise.

Hww vendors that allow to enter custom keys into their device already
have to face this issue, and those who allow to enter custom keys via
mnemonic probably tackled this somehow.

Maybe the shared key for multisig setup can be entered in the same way
? (with maybe additional visual check via some fingerprint).

Although we would then have another issue of potential confusion
between two procedures (entering the main key and entering the shared
key for multisig setup), and the measures has to be taken to prevent
such confusion.

The approaches can be combined - specify a key derivation function
suitable for passwords; via secure channel, share a password and/or the
derived key. If hww supports derivation function, it can derive the key
from password. If hww supports only keys, the key can be entered raw or
via mnemonic.

From jlrubin at mit.edu  Thu Feb 11 18:29:35 2021
From: jlrubin at mit.edu (Jeremy)
Date: Thu, 11 Feb 2021 10:29:35 -0800
Subject: [bitcoin-dev] Proposal to stop processing of unrequested
 transactions in Bitcoin Core
In-Reply-To: <CALZpt+E6UqB5cew145PO2qiEMsELJ-TuGyE5PBL04T1tESiOiQ@mail.gmail.com>
References: <CALZpt+E6UqB5cew145PO2qiEMsELJ-TuGyE5PBL04T1tESiOiQ@mail.gmail.com>
Message-ID: <CAD5xwhjGsB38otK5+H30XcnFnUdP+D29_k5=p2ZBgXzvdRRggw@mail.gmail.com>

I'm not sure of the existing behavior is of when we issue a getdata
request, but noting that there could be a privacy implication of this sort
of change. Could you (or someone else) expand on why this is not a concern
here?
--
@JeremyRubin <https://twitter.com/JeremyRubin>
<https://twitter.com/JeremyRubin>


On Wed, Feb 10, 2021 at 6:29 AM Antoine Riard via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
>
> I'm proposing to stop the processing of unrequested transactions in
> Bitcoin Core 22.0+ at TX message reception. An unrequested transaction is
> one defined by which a "getdata" message for its specific identifier
> (either txid or wtxid) has not been previously issued by the node [0].
>
> This change is motivated by reducing the CPU DoS surface of Bitcoin Core
> around mempool acceptance. Currently, an attacker can open multiple inbound
> connections to a node and send expensive to validate, junk transactions.
> Once the canonical INV/GETDATA sequence is enforced on the network, a
> further protection would be to deprioritize bandwidth and validation
> resources allocation, or even to wither connections with such DoSy peers. A
> permissioned peer (PF_RELAY) will still be able to bypass such restrictions.
>
> Raw TX message processing has always been tolerated by Core and as such
> some Bitcoin clients aren't bothering with an INV/GETDATA sequence. Such
> change will break their tx-relay capabilities on the p2p network and
> require adaptation from them. Given deployment time of any release, I hope
> it provides a window time wide enough before the old tx-processing behavior
> becomes the minority.
>
> Eager to gather feedback on this proposal, especially if such change is
> deemed as too much constraining or fast on any Bitcoin software.
>
> Cheers,
> Antoine
>
> [0] See https://github.com/bitcoin/bitcoin/pull/20277
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/828bd719/attachment.html>

From hugo at nunchuk.io  Thu Feb 11 19:11:11 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Thu, 11 Feb 2021 11:11:11 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <20210211172910.3b550706@simplexum.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
Message-ID: <CAPKmR9udiK+2gC2qUueAfKm7VBf8csM-3WOz1+-bMNR0iVeGew@mail.gmail.com>

Hi Pavol,

On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> ? Thu, 11 Feb 2021 05:45:33 -0800
> Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> wrote:
>
> > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))
> > >
> > > This scheme might be vulnerable to rainbow table attack.
> > >
> >
> > Thank you for pointing this out! Incidentally, Dmitry Petukhov also
> > told me the same privately.
>
> My thought was that if TOKEN has the characteristics of a password
> (short ASCII string), then it would be better to use key derivation
> function designed for passwords, like PBKDF2.
>
> The counter-argument to this is that this adds another code dependency
> for vendors, if the device firmware does not already have the required
> key derivation function.
>
> Maybe this could be solved by going into opposite direction - make the
> "token" even longer, use the mnemoic.
>
> The issue is that entering long data of the shared key into the device
> manually is difficult UX-wise.
>
> Hww vendors that allow to enter custom keys into their device already
> have to face this issue, and those who allow to enter custom keys via
> mnemonic probably tackled this somehow.
>
> Maybe the shared key for multisig setup can be entered in the same way
> ? (with maybe additional visual check via some fingerprint).
>

You just gave me a great idea! We can reuse the BIP32 seed words list!
Perhaps the encryption key can just be 6 words, but it'll be derived the
same way. BIP39 also uses PBKDF2 as a key derivation function, so it
matches with what you described here.

And all HWW should have this functionality already.

Best,
Hugo


>
> Although we would then have another issue of potential confusion
> between two procedures (entering the main key and entering the shared
> key for multisig setup), and the measures has to be taken to prevent
> such confusion.
>
> The approaches can be combined - specify a key derivation function
> suitable for passwords; via secure channel, share a password and/or the
> derived key. If hww supports derivation function, it can derive the key
> from password. If hww supports only keys, the key can be entered raw or
> via mnemonic.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/ed0f8b95/attachment-0001.html>

From hugo at nunchuk.io  Thu Feb 11 19:11:45 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Thu, 11 Feb 2021 11:11:45 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9udiK+2gC2qUueAfKm7VBf8csM-3WOz1+-bMNR0iVeGew@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9udiK+2gC2qUueAfKm7VBf8csM-3WOz1+-bMNR0iVeGew@mail.gmail.com>
Message-ID: <CAPKmR9t0hta0n4tAqp1SwH4gJ_5cswh-pg4DDAJ=qMhZjtUgYw@mail.gmail.com>

*BIP39 seed words list.

On Thu, Feb 11, 2021 at 11:11 AM Hugo Nguyen <hugo at nunchuk.io> wrote:

> Hi Pavol,
>
> On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> ? Thu, 11 Feb 2021 05:45:33 -0800
>> Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>> wrote:
>>
>> > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))
>> > >
>> > > This scheme might be vulnerable to rainbow table attack.
>> > >
>> >
>> > Thank you for pointing this out! Incidentally, Dmitry Petukhov also
>> > told me the same privately.
>>
>> My thought was that if TOKEN has the characteristics of a password
>> (short ASCII string), then it would be better to use key derivation
>> function designed for passwords, like PBKDF2.
>>
>> The counter-argument to this is that this adds another code dependency
>> for vendors, if the device firmware does not already have the required
>> key derivation function.
>>
>> Maybe this could be solved by going into opposite direction - make the
>> "token" even longer, use the mnemoic.
>>
>> The issue is that entering long data of the shared key into the device
>> manually is difficult UX-wise.
>>
>> Hww vendors that allow to enter custom keys into their device already
>> have to face this issue, and those who allow to enter custom keys via
>> mnemonic probably tackled this somehow.
>>
>> Maybe the shared key for multisig setup can be entered in the same way
>> ? (with maybe additional visual check via some fingerprint).
>>
>
> You just gave me a great idea! We can reuse the BIP32 seed words list!
> Perhaps the encryption key can just be 6 words, but it'll be derived the
> same way. BIP39 also uses PBKDF2 as a key derivation function, so it
> matches with what you described here.
>
> And all HWW should have this functionality already.
>
> Best,
> Hugo
>
>
>>
>> Although we would then have another issue of potential confusion
>> between two procedures (entering the main key and entering the shared
>> key for multisig setup), and the measures has to be taken to prevent
>> such confusion.
>>
>> The approaches can be combined - specify a key derivation function
>> suitable for passwords; via secure channel, share a password and/or the
>> derived key. If hww supports derivation function, it can derive the key
>> from password. If hww supports only keys, the key can be entered raw or
>> via mnemonic.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/a7915106/attachment-0001.html>

From bitcoin-dev at wuille.net  Thu Feb 11 20:31:13 2021
From: bitcoin-dev at wuille.net (Pieter Wuille)
Date: Thu, 11 Feb 2021 20:31:13 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
In-Reply-To: <5096768E-3A77-4CD8-AC22-105CA63152A7@protonmail.com>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
 <mCGqNxZZgiKEO8gbRcHFUxcU5fGBMWMfkJdapM2Nuhe0gemmqXRfnyqqaRY70UFea1udvQe0LIYt9Ps3lsgDArVHlfeMOWacXqZ7ZiGzMTU=@wuille.net>
 <5096768E-3A77-4CD8-AC22-105CA63152A7@protonmail.com>
Message-ID: <AzQAiClGFEDDux7hDtaD3As76nWOJELk9eck-_Ra4lDTwXQz2lYJEwRHjq9Gt65cA7AgKbidpNQlD-U6g5OKM-EaNvPbgva-ASzt-LcBDT8=@wuille.net>

??????? Original Message ???????
On Thursday, February 11, 2021 6:38 AM, Dr Maxim Orlovsky <orlovsky at protonmail.com> wrote:

> Thank you very much for all the clarifications; it?s good to have them sorted out and clearly structured. From what you wrote it follows that we still need to reserve a dedicated purpose (with new BIP) for BIP340 signatures to avoid key reuse, am I right?

Maybe, but it would be for a particular way of using keys (presumably: single-key pay-to-taproot), not just the signature scheme itself. If you go down this path you'll also want dedicated branches for multisig participation, and presumably several interesting new policies that become possible with Taproot.

The only thing ECDSA/Schnorr specific about this is that - if you want to maintain provable security - the keys used for ECDSA and BIP340 should be separated by a hardened step. It seems however that all approaches people actually use to prevent reuse do that already.

And as I said, dedicated branches only help for the simple case. For example, it doesn't address the more general problem of preventing reuse of keys in multiple distinct groups of multisig sets you participate in. If you want to solve that you need to keep track of  index is for participating in what - and once you have something like that you don't need dedicated purpose based derivation at all anymore.

So I'm not sure I'd state it as us *needing* a dedicated purpose/branch for single-key P2TR (and probably many other useful ways of using taproot based spending policies...). But perhaps it's useful to have.

Greg Maxwell pointed out to me that there may be another reason to want non-reuse across ECDSA and BIP340 keys: if someone were to do all of these wrong:
* not follow BIP340 and re-use RFC6979 for BIP340 nonce generation
* reuse the same keys for both
* sign the same message with both
... you would actually leak your private key. This isn't a concern for Bitcoin transaction signing however, as the sighash (message) indirectly commits to BIP341 or not, and thus it'd be impossible to construct colliding messages. Still, it's a consideration to factor in.

Cheers,

--
Pieter


From bitcoin-dev at wuille.net  Thu Feb 11 21:15:15 2021
From: bitcoin-dev at wuille.net (Pieter Wuille)
Date: Thu, 11 Feb 2021 21:15:15 +0000
Subject: [bitcoin-dev] Proposal to stop processing of unrequested
	transactions in Bitcoin Core
In-Reply-To: <CAD5xwhjGsB38otK5+H30XcnFnUdP+D29_k5=p2ZBgXzvdRRggw@mail.gmail.com>
References: <CALZpt+E6UqB5cew145PO2qiEMsELJ-TuGyE5PBL04T1tESiOiQ@mail.gmail.com>
 <CAD5xwhjGsB38otK5+H30XcnFnUdP+D29_k5=p2ZBgXzvdRRggw@mail.gmail.com>
Message-ID: <ii__M4064KswBFoSG8QQus9QE36Iv0wSBIEcRm-jWPZhZhT5d3aBFrjiO27whqJ5iZ6MeNuz8KMSSFec7bMAh3DddZvFRtgbngO3edsX6Cw=@wuille.net>

> I'm not sure of the existing behavior is of when we issue a getdata request, but noting that there could be a privacy implication of this sort of change. Could you (or someone else) expand on why this is not a concern here?

What kind of privacy concern are you talking about? I'm not sure I see how this could matter.

Cheers,

--
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/fb0c9a2f/attachment.html>

From ChristopherA at lifewithalacrity.com  Thu Feb 11 22:29:46 2021
From: ChristopherA at lifewithalacrity.com (Christopher Allen)
Date: Thu, 11 Feb 2021 14:29:46 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9t0hta0n4tAqp1SwH4gJ_5cswh-pg4DDAJ=qMhZjtUgYw@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9udiK+2gC2qUueAfKm7VBf8csM-3WOz1+-bMNR0iVeGew@mail.gmail.com>
 <CAPKmR9t0hta0n4tAqp1SwH4gJ_5cswh-pg4DDAJ=qMhZjtUgYw@mail.gmail.com>
Message-ID: <CACrqygAMG67dajktTcq9hgyhfu2u1NRSHzkM345=jc6NLDUsbg@mail.gmail.com>

I think the key issue here is avoiding xpub key reuse in multisig. Not only
in the future with Schnorr, but we need it today!

Current common practice by hardware wallets is the 48'/0'/0'/2' derivation
for segwit multsig ( e.g.
[90081696/48'/0'/0'/2']xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b
) is the only one used for ALL multisigs offered by that hardware wallet.

As Pieter said, leveraging a HD path parameters can help, but we need a
better, less reusable path for the index.

I personally suggest a simpler solution, which is to create an index using
a PBKDF of the Account Policy (a descriptor with all xpubs and keys
removed), plus optional notes. (BTW, I think double sha256 or HMAC is
overkill).

Example: for the reference bit descriptor that might result in:

```
wsh(sortedmulti(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))
```

What Blockchain Commons (and the Airgapped Wallet Community) call a policy
map would be

```
wsh(sortedmulti(1,,,))
```

A PBKDF of that as would be unique for all 2 of 3 segwig transactions. With
the addition of the addition of the Policy Map creators optional note, it
would be truly unique. The Policy Map and/or PBKDF are small and could
easily added to existing APIs.

So for legacy hardware, we can use existing 48' subtree, but 3' as the
format for this form (2' is segwit), then the desktop can just ask for the
/48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.
More sophisticated Airgapped apps you can send
"wsh(sortedmulti(1,,,))"+label and let the cosigner app do the PBKDF, and
optionally allow it return something different in a full keyset (i.e.
"[90081696/48'/0'/0'/3'/af3948cg?'/]xpub6DYLEk?", and then the requesting
app, knowing that it is different from the PBKDF can know what to do if it
needs to what to ask for in the future.

The other advantage of this technique is that the cosigner app can know
what policy it is participating in, before the descriptor is completed. It
may decide it doesn't want to participate in some funky 4:9 with a weird
script, and not return an xpub at all.

Long term I think a commitment scheme should be used, so that you don't
reveal what xpub you offered until all the parties xpubs are shared, but as
Pieter said, we can do that at the same time we do the musig. But we need
to prevent xpub reuse NOW, and I think my proposal easy and could the job.

-- Christopher Allen, Blockchain Commons
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210211/30d4ab91/attachment.html>

From antoine.riard at gmail.com  Fri Feb 12 11:49:42 2021
From: antoine.riard at gmail.com (Antoine Riard)
Date: Fri, 12 Feb 2021 06:49:42 -0500
Subject: [bitcoin-dev] Proposal to stop processing of unrequested
 transactions in Bitcoin Core
In-Reply-To: <ii__M4064KswBFoSG8QQus9QE36Iv0wSBIEcRm-jWPZhZhT5d3aBFrjiO27whqJ5iZ6MeNuz8KMSSFec7bMAh3DddZvFRtgbngO3edsX6Cw=@wuille.net>
References: <CALZpt+E6UqB5cew145PO2qiEMsELJ-TuGyE5PBL04T1tESiOiQ@mail.gmail.com>
 <CAD5xwhjGsB38otK5+H30XcnFnUdP+D29_k5=p2ZBgXzvdRRggw@mail.gmail.com>
 <ii__M4064KswBFoSG8QQus9QE36Iv0wSBIEcRm-jWPZhZhT5d3aBFrjiO27whqJ5iZ6MeNuz8KMSSFec7bMAh3DddZvFRtgbngO3edsX6Cw=@wuille.net>
Message-ID: <CALZpt+HnAbD+EGKE_=fCS8YPJ77XEqT6xvUq8YO3ErSQ+=FaxQ@mail.gmail.com>

Hi Jeremy,

If I understand correctly your concern, you're worried that change would
ease discovery of the node's tx-relay topology ? I don't scope transaction
origin inference, if you suppose the
unrequested-tx peer sending is the attacker it must have learnt the
transaction from somewhere else which is more likely to be the tx owner
rather than the probed node.

As far I can think of this change, a peer might send an unrequested
transaction to this node and observe that it's either a) processed, the
node has learnt about the txid from another peer or b) rejected, the node
has never learnt about the txid. The outcome can be queried by sending a
GETDATA for the "is-unrequested" txid.

I think the same result can already be achieved by sending an INV and
observing if a GETDATA is replied back to guess the presence of another
peer with already the knowledge of the txid. Or alternatively, just connect
to this other peer and wait for an announcement.

What else can we think of ?

>From my side, compared to the already-existing heuristics, I don't see how
this change is easing attackers' work. That said, I don't deny our
transaction announcements/requests logic is worthy of more study about its
privacy properties, especially when you acknowledge the recent overhaul of
the transaction request and the upcoming Erlay changes.

Cheers,
Antoine

Le jeu. 11 f?vr. 2021 ? 16:15, Pieter Wuille <bitcoin-dev at wuille.net> a
?crit :

>
> I'm not sure of the existing behavior is of when we issue a getdata
> request, but noting that there could be a privacy implication of this sort
> of change. Could you (or someone else) expand on why this is not a concern
> here?
>
>
> What kind of privacy concern are you talking about? I'm not sure I see how
> this could matter.
>
> Cheers,
>
> --
> Pieter
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/43b4e0e4/attachment.html>

From hugo at nunchuk.io  Fri Feb 12 12:31:24 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Fri, 12 Feb 2021 04:31:24 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CACrqygAMG67dajktTcq9hgyhfu2u1NRSHzkM345=jc6NLDUsbg@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9udiK+2gC2qUueAfKm7VBf8csM-3WOz1+-bMNR0iVeGew@mail.gmail.com>
 <CAPKmR9t0hta0n4tAqp1SwH4gJ_5cswh-pg4DDAJ=qMhZjtUgYw@mail.gmail.com>
 <CACrqygAMG67dajktTcq9hgyhfu2u1NRSHzkM345=jc6NLDUsbg@mail.gmail.com>
Message-ID: <CAPKmR9vpTUna+uVYRqcPxdS28FU5CryMWbybCHcCZEoAOacfUw@mail.gmail.com>

On Thu, Feb 11, 2021 at 3:05 PM Christopher Allen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> What Blockchain Commons (and the Airgapped Wallet Community) call a policy
> map would be
>
> ```
> wsh(sortedmulti(1,,,))
> ```
>
> A PBKDF of that as would be unique for all 2 of 3 segwig transactions.
> With the addition of the addition of the Policy Map creators optional note,
> it would be truly unique. The Policy Map and/or PBKDF are small and could
> easily added to existing APIs.
>
> So for legacy hardware, we can use existing 48' subtree, but 3' as the
> format for this form (2' is segwit), then the desktop can just ask for the
> /48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.
> More sophisticated Airgapped apps you can send
> "wsh(sortedmulti(1,,,))"+label and let the cosigner app do the PBKDF, and
> optionally allow it return something different in a full keyset (i.e.
> "[90081696/48'/0'/0'/3'/af3948cg?'/]xpub6DYLEk?", and then the requesting
> app, knowing that it is different from the PBKDF can know what to do if it
> needs to what to ask for in the future.
>

Thanks Christopher, very interesting ideas... A couple of thoughts:
1/ Generating the path index using the policy is clever. However, I think
it has 2 problems. Number #1 is with the above scheme now you have a hard
dependency on (policy map + note) - losing (policy map + note) means that
you will lose access to PBKDF', and hence the funds permanently. At least
with the current soluttions, you can look up what the most common
derivation paths and indices are to recover funds in the worst case.
2/ Number #2 is that this wouldn't necessarily prevent XPUB reuse. It seems
like the above scheme depends on (a) the Coordinator keeping track
accurately of all the existing PBKDF-ed indices and (b) the Signer
truthfully gives the XPUB at the path that the Coordinator asks for. In
reality, neither of these conditions can be guaranteed. For example, the
Signer could lie about the XPUB at /48'/0'/0'/3'/PBKDF' when it just keeps
reusing the XPUB at /48'/0'/0'/2'
3/ Preventing XPUB reuse is an interesting problem, but IMHO it is beyond
the scope of the current proposal. Maybe worth a separate BIP?

Best,
Hugo



On Thu, Feb 11, 2021 at 3:05 PM Christopher Allen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I think the key issue here is avoiding xpub key reuse in multisig. Not
> only in the future with Schnorr, but we need it today!
>
> Current common practice by hardware wallets is the 48'/0'/0'/2' derivation
> for segwit multsig ( e.g.
> [90081696/48'/0'/0'/2']xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b
> ) is the only one used for ALL multisigs offered by that hardware wallet.
>
> As Pieter said, leveraging a HD path parameters can help, but we need a
> better, less reusable path for the index.
>
> I personally suggest a simpler solution, which is to create an index using
> a PBKDF of the Account Policy (a descriptor with all xpubs and keys
> removed), plus optional notes. (BTW, I think double sha256 or HMAC is
> overkill).
>
> Example: for the reference bit descriptor that might result in:
>
> ```
>
> wsh(sortedmulti(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))
> ```
>
> What Blockchain Commons (and the Airgapped Wallet Community) call a policy
> map would be
>
> ```
> wsh(sortedmulti(1,,,))
> ```
>
> A PBKDF of that as would be unique for all 2 of 3 segwig transactions.
> With the addition of the addition of the Policy Map creators optional note,
> it would be truly unique. The Policy Map and/or PBKDF are small and could
> easily added to existing APIs.
>
> So for legacy hardware, we can use existing 48' subtree, but 3' as the
> format for this form (2' is segwit), then the desktop can just ask for the
> /48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.
> More sophisticated Airgapped apps you can send
> "wsh(sortedmulti(1,,,))"+label and let the cosigner app do the PBKDF, and
> optionally allow it return something different in a full keyset (i.e.
> "[90081696/48'/0'/0'/3'/af3948cg?'/]xpub6DYLEk?", and then the requesting
> app, knowing that it is different from the PBKDF can know what to do if it
> needs to what to ask for in the future.
>
> The other advantage of this technique is that the cosigner app can know
> what policy it is participating in, before the descriptor is completed. It
> may decide it doesn't want to participate in some funky 4:9 with a weird
> script, and not return an xpub at all.
>
> Long term I think a commitment scheme should be used, so that you don't
> reveal what xpub you offered until all the parties xpubs are shared, but as
> Pieter said, we can do that at the same time we do the musig. But we need
> to prevent xpub reuse NOW, and I think my proposal easy and could the job.
>
> -- Christopher Allen, Blockchain Commons
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/bfb1f588/attachment.html>

From peter at coinkite.com  Fri Feb 12 13:48:16 2021
From: peter at coinkite.com (Peter D. Gray)
Date: Fri, 12 Feb 2021 08:48:16 -0500
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CACrqygAMG67dajktTcq9hgyhfu2u1NRSHzkM345=jc6NLDUsbg@mail.gmail.com>
References: <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9udiK+2gC2qUueAfKm7VBf8csM-3WOz1+-bMNR0iVeGew@mail.gmail.com>
 <CAPKmR9t0hta0n4tAqp1SwH4gJ_5cswh-pg4DDAJ=qMhZjtUgYw@mail.gmail.com>
 <CACrqygAMG67dajktTcq9hgyhfu2u1NRSHzkM345=jc6NLDUsbg@mail.gmail.com>
Message-ID: <20210212134816.GM47135@coinkite.com>

Hard no to this idea:

On Thu, Feb 11, 2021 at 02:29:46PM -0800, Christopher Allen proposed:
...
> /48'/0'/0'/3'/PBKDF(complex string)'

As someone who has helped people find UTXO at key paths they didn't
know/want, this is a terrible idea. Key derivation paths should be
small, sequential integers, so they can be searched in reasonable time.

Of course when things are working it doesn't matter, but the stakes
can be very high when they stop working.

This is true for multisig and single signer.

---
Peter D. Gray  ||  Founder, Coinkite  ||  Twitter: @dochex  ||  GPG: A3A31BAD 5A2A5B10

On Thu, Feb 11, 2021 at 02:29:46PM -0800, Christopher Allen wrote:
> I think the key issue here is avoiding xpub key reuse in multisig. Not only
> in the future with Schnorr, but we need it today!
> 
> Current common practice by hardware wallets is the 48'/0'/0'/2' derivation
> for segwit multsig ( e.g.
> [90081696/48'/0'/0'/2']xpub6DYLEkDfCdHzh5FHGHDJksQvFqu6kYANa1sfo6fA8n5ZWkSwyCRVVzyq9LY2eNGB6T9BKDeGJp2ZarjRZHd7WB95nSaFEDhFMK6zSV6D49b
> ) is the only one used for ALL multisigs offered by that hardware wallet.
> 
> As Pieter said, leveraging a HD path parameters can help, but we need a
> better, less reusable path for the index.
> 
> I personally suggest a simpler solution, which is to create an index using
> a PBKDF of the Account Policy (a descriptor with all xpubs and keys
> removed), plus optional notes. (BTW, I think double sha256 or HMAC is
> overkill).
> 
> Example: for the reference bit descriptor that might result in:
> 
> ```
> wsh(sortedmulti(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))
> ```
> 
> What Blockchain Commons (and the Airgapped Wallet Community) call a policy
> map would be
> 
> ```
> wsh(sortedmulti(1,,,))
> ```
> 
> A PBKDF of that as would be unique for all 2 of 3 segwig transactions. With
> the addition of the addition of the Policy Map creators optional note, it
> would be truly unique. The Policy Map and/or PBKDF are small and could
> easily added to existing APIs.
> 
> So for legacy hardware, we can use existing 48' subtree, but 3' as the
> format for this form (2' is segwit), then the desktop can just ask for the
> /48'/0'/0'/3'/PBKDF' when it requests a new xpub from the hardware token.
> More sophisticated Airgapped apps you can send
> "wsh(sortedmulti(1,,,))"+label and let the cosigner app do the PBKDF, and
> optionally allow it return something different in a full keyset (i.e.
> "[90081696/48'/0'/0'/3'/af3948cg?'/]xpub6DYLEk?", and then the requesting
> app, knowing that it is different from the PBKDF can know what to do if it
> needs to what to ask for in the future.
> 
> The other advantage of this technique is that the cosigner app can know
> what policy it is participating in, before the descriptor is completed. It
> may decide it doesn't want to participate in some funky 4:9 with a weird
> script, and not return an xpub at all.
> 
> Long term I think a commitment scheme should be used, so that you don't
> reveal what xpub you offered until all the parties xpubs are shared, but as
> Pieter said, we can do that at the same time we do the musig. But we need
> to prevent xpub reuse NOW, and I think my proposal easy and could the job.
> 
> -- Christopher Allen, Blockchain Commons


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/cce516d7/attachment-0001.sig>

From hugo at nunchuk.io  Fri Feb 12 16:55:55 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Fri, 12 Feb 2021 08:55:55 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <20210211172910.3b550706@simplexum.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
Message-ID: <CAPKmR9v5jzsu7siuyAu42XOCdtXqMXmKzmiDzjEy_bVNbSPyyw@mail.gmail.com>

Thanks everyone who has provided inputs so far!

This is the new proposal for the encryption aspect of the scheme, based on
all the feedback.

The key derivation function would be PBKDF2, with PRF = SHA512. This should
be readily available on today's hardware already, as they are used for
BIP39.

DK = PBKDF2(PRF, Password, Salt, c, dkLen)
PRF = SHA512
Pwd = HUMAN_READABLE_TITLE
Salt = NONCE
c = 2048
dkLen = 256

HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8, maximum length
= 20.
NONCE is a 64-bit number.

Reason for going with SHA512 is due to legacy support on some hardware.
c=2048 also mimics BIP39. It takes about ~3 seconds to derive
the encryption key on a 80Mhz MCU. We feel like this is a good enough
tradeoff for this use case. The assumption here is that the secure session
is only needed temporarily for a few hours, maybe up to one day.

The Coordinator and Signers agree and exchange these 2 secrets prior to the
setup. The NONCE can be converted to either:
(a) a 6-word phrase using BIP39 wordlist
(b) a 20-digit decimal number
(c) a QR code

Depending on the vendor. This flexibility in the data format allows each
vendor to customize the UX based on their respective device capabilities.

Best,
Hugo

On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> ? Thu, 11 Feb 2021 05:45:33 -0800
> Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> wrote:
>
> > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))
> > >
> > > This scheme might be vulnerable to rainbow table attack.
> > >
> >
> > Thank you for pointing this out! Incidentally, Dmitry Petukhov also
> > told me the same privately.
>
> My thought was that if TOKEN has the characteristics of a password
> (short ASCII string), then it would be better to use key derivation
> function designed for passwords, like PBKDF2.
>
> The counter-argument to this is that this adds another code dependency
> for vendors, if the device firmware does not already have the required
> key derivation function.
>
> Maybe this could be solved by going into opposite direction - make the
> "token" even longer, use the mnemoic.
>
> The issue is that entering long data of the shared key into the device
> manually is difficult UX-wise.
>
> Hww vendors that allow to enter custom keys into their device already
> have to face this issue, and those who allow to enter custom keys via
> mnemonic probably tackled this somehow.
>
> Maybe the shared key for multisig setup can be entered in the same way
> ? (with maybe additional visual check via some fingerprint).
>
> Although we would then have another issue of potential confusion
> between two procedures (entering the main key and entering the shared
> key for multisig setup), and the measures has to be taken to prevent
> such confusion.
>
> The approaches can be combined - specify a key derivation function
> suitable for passwords; via secure channel, share a password and/or the
> derived key. If hww supports derivation function, it can derive the key
> from password. If hww supports only keys, the key can be entered raw or
> via mnemonic.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/cb8584f3/attachment-0001.html>

From dp at simplexum.com  Fri Feb 12 17:42:31 2021
From: dp at simplexum.com (Dmitry Petukhov)
Date: Fri, 12 Feb 2021 18:42:31 +0100
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9v5jzsu7siuyAu42XOCdtXqMXmKzmiDzjEy_bVNbSPyyw@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9v5jzsu7siuyAu42XOCdtXqMXmKzmiDzjEy_bVNbSPyyw@mail.gmail.com>
Message-ID: <20210212184231.22b517aa@simplexum.com>

If HUMAN_READABLE_TITLE is the additional secret, the user would need
to enter it on the device in addition to the nonce, wouldn't it defeat
the advantage in UX that was gained by using (relatively) short nonce ?

Is 64 bit nonce not enough ?

It seems that to crack this with fixed Pwd and 64 bit nonce, the
attacker will need to be about 10^15 more powerful than 80Mhz MCU:
(2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is realistic
scale. Average desktop cpu seems to be about 10^3 more powerful than
the mentioned MCU for this task.

Maybe for the UX it would be better to choose the number of rounds to
use in PBKDF2, instead of using variable Pwd. Number of rounds will be
easier to enter on the device (or just choose it from a set of
pre-defined values). The more money is at stake, the higher number of
rounds could the coordinator choose (taking into account the
characteristics of the participant devices)

? Fri, 12 Feb 2021 08:55:55 -0800
Hugo Nguyen <hugo at nunchuk.io> wrote:

> Thanks everyone who has provided inputs so far!
> 
> This is the new proposal for the encryption aspect of the scheme,
> based on all the feedback.
> 
> The key derivation function would be PBKDF2, with PRF = SHA512. This
> should be readily available on today's hardware already, as they are
> used for BIP39.
> 
> DK = PBKDF2(PRF, Password, Salt, c, dkLen)
> PRF = SHA512
> Pwd = HUMAN_READABLE_TITLE
> Salt = NONCE
> c = 2048
> dkLen = 256
> 
> HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8, maximum
> length = 20.
> NONCE is a 64-bit number.
> 
> Reason for going with SHA512 is due to legacy support on some
> hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to
> derive the encryption key on a 80Mhz MCU. We feel like this is a good
> enough tradeoff for this use case. The assumption here is that the
> secure session is only needed temporarily for a few hours, maybe up
> to one day.
> 
> The Coordinator and Signers agree and exchange these 2 secrets prior
> to the setup. The NONCE can be converted to either:
> (a) a 6-word phrase using BIP39 wordlist
> (b) a 20-digit decimal number
> (c) a QR code
> 
> Depending on the vendor. This flexibility in the data format allows
> each vendor to customize the UX based on their respective device
> capabilities.
> 
> Best,
> Hugo
> 
> On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> > ? Thu, 11 Feb 2021 05:45:33 -0800
> > Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> > wrote:
> >  
> > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))  
> > > >
> > > > This scheme might be vulnerable to rainbow table attack.
> > > >  
> > >
> > > Thank you for pointing this out! Incidentally, Dmitry Petukhov
> > > also told me the same privately.  
> >
> > My thought was that if TOKEN has the characteristics of a password
> > (short ASCII string), then it would be better to use key derivation
> > function designed for passwords, like PBKDF2.
> >
> > The counter-argument to this is that this adds another code
> > dependency for vendors, if the device firmware does not already
> > have the required key derivation function.
> >
> > Maybe this could be solved by going into opposite direction - make
> > the "token" even longer, use the mnemoic.
> >
> > The issue is that entering long data of the shared key into the
> > device manually is difficult UX-wise.
> >
> > Hww vendors that allow to enter custom keys into their device
> > already have to face this issue, and those who allow to enter
> > custom keys via mnemonic probably tackled this somehow.
> >
> > Maybe the shared key for multisig setup can be entered in the same
> > way ? (with maybe additional visual check via some fingerprint).
> >
> > Although we would then have another issue of potential confusion
> > between two procedures (entering the main key and entering the
> > shared key for multisig setup), and the measures has to be taken to
> > prevent such confusion.
> >
> > The approaches can be combined - specify a key derivation function
> > suitable for passwords; via secure channel, share a password and/or
> > the derived key. If hww supports derivation function, it can derive
> > the key from password. If hww supports only keys, the key can be
> > entered raw or via mnemonic.
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >  


From dp at simplexum.com  Fri Feb 12 17:48:09 2021
From: dp at simplexum.com (Dmitry Petukhov)
Date: Fri, 12 Feb 2021 18:48:09 +0100
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <20210212184231.22b517aa@simplexum.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9v5jzsu7siuyAu42XOCdtXqMXmKzmiDzjEy_bVNbSPyyw@mail.gmail.com>
 <20210212184231.22b517aa@simplexum.com>
Message-ID: <20210212184809.40208bfd@simplexum.com>

? Fri, 12 Feb 2021 18:42:31 +0100
Dmitry Petukhov <dp at simplexum.com> wrote:

> Maybe for the UX it would be better to choose the number of rounds to
> use in PBKDF2, instead of using variable Pwd. Number of rounds will be
> easier to enter on the device (or just choose it from a set of
> pre-defined values). The more money is at stake, the higher number of
> rounds could the coordinator choose (taking into account the
> characteristics of the participant devices)

Or simply allow bigger entropy (more than 6 mnemonic words), if
the coordinator feels that 64 bit of entropy is not enough.

From hugo at nunchuk.io  Fri Feb 12 17:54:57 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Fri, 12 Feb 2021 09:54:57 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <20210212184231.22b517aa@simplexum.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9v5jzsu7siuyAu42XOCdtXqMXmKzmiDzjEy_bVNbSPyyw@mail.gmail.com>
 <20210212184231.22b517aa@simplexum.com>
Message-ID: <CAPKmR9uUv32AbSUv9C-JvzEQo5WQb+a6iPSBWTnY1wwKwGaDng@mail.gmail.com>

On Fri, Feb 12, 2021 at 9:36 AM Dmitry Petukhov <dp at simplexum.com> wrote:

> If HUMAN_READABLE_TITLE is the additional secret, the user would need
> to enter it on the device in addition to the nonce, wouldn't it defeat
> the advantage in UX that was gained by using (relatively) short nonce ?
>
> Is 64 bit nonce not enough ?
>
>
Good question. If we don't need the extra entropy, we can fix
the HUMAN_READABLE_TITLE string.

Something like "No SPOF". (No Single Point Of Failure).



> It seems that to crack this with fixed Pwd and 64 bit nonce, the
> attacker will need to be about 10^15 more powerful than 80Mhz MCU:
> (2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is realistic
> scale. Average desktop cpu seems to be about 10^3 more powerful than
> the mentioned MCU for this task.
>
> Maybe for the UX it would be better to choose the number of rounds to
> use in PBKDF2, instead of using variable Pwd. Number of rounds will be
> easier to enter on the device (or just choose it from a set of
> pre-defined values). The more money is at stake, the higher number of
> rounds could the coordinator choose (taking into account the
> characteristics of the participant devices)
>

> Or simply allow bigger entropy (more than 6 mnemonic words), if
> the coordinator feels that 64 bit of entropy is not enough.


That could work. Allowing variable iteration count is probably better
UX-wise.

Best,
Hugo


>
> ? Fri, 12 Feb 2021 08:55:55 -0800
> Hugo Nguyen <hugo at nunchuk.io> wrote:
>
> > Thanks everyone who has provided inputs so far!
> >
> > This is the new proposal for the encryption aspect of the scheme,
> > based on all the feedback.
> >
> > The key derivation function would be PBKDF2, with PRF = SHA512. This
> > should be readily available on today's hardware already, as they are
> > used for BIP39.
> >
> > DK = PBKDF2(PRF, Password, Salt, c, dkLen)
> > PRF = SHA512
> > Pwd = HUMAN_READABLE_TITLE
> > Salt = NONCE
> > c = 2048
> > dkLen = 256
> >
> > HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8, maximum
> > length = 20.
> > NONCE is a 64-bit number.
> >
> > Reason for going with SHA512 is due to legacy support on some
> > hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to
> > derive the encryption key on a 80Mhz MCU. We feel like this is a good
> > enough tradeoff for this use case. The assumption here is that the
> > secure session is only needed temporarily for a few hours, maybe up
> > to one day.
> >
> > The Coordinator and Signers agree and exchange these 2 secrets prior
> > to the setup. The NONCE can be converted to either:
> > (a) a 6-word phrase using BIP39 wordlist
> > (b) a 20-digit decimal number
> > (c) a QR code
> >
> > Depending on the vendor. This flexibility in the data format allows
> > each vendor to customize the UX based on their respective device
> > capabilities.
> >
> > Best,
> > Hugo
> >
> > On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <
> > bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > > ? Thu, 11 Feb 2021 05:45:33 -0800
> > > Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> > > wrote:
> > >
> > > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))
> > > > >
> > > > > This scheme might be vulnerable to rainbow table attack.
> > > > >
> > > >
> > > > Thank you for pointing this out! Incidentally, Dmitry Petukhov
> > > > also told me the same privately.
> > >
> > > My thought was that if TOKEN has the characteristics of a password
> > > (short ASCII string), then it would be better to use key derivation
> > > function designed for passwords, like PBKDF2.
> > >
> > > The counter-argument to this is that this adds another code
> > > dependency for vendors, if the device firmware does not already
> > > have the required key derivation function.
> > >
> > > Maybe this could be solved by going into opposite direction - make
> > > the "token" even longer, use the mnemoic.
> > >
> > > The issue is that entering long data of the shared key into the
> > > device manually is difficult UX-wise.
> > >
> > > Hww vendors that allow to enter custom keys into their device
> > > already have to face this issue, and those who allow to enter
> > > custom keys via mnemonic probably tackled this somehow.
> > >
> > > Maybe the shared key for multisig setup can be entered in the same
> > > way ? (with maybe additional visual check via some fingerprint).
> > >
> > > Although we would then have another issue of potential confusion
> > > between two procedures (entering the main key and entering the
> > > shared key for multisig setup), and the measures has to be taken to
> > > prevent such confusion.
> > >
> > > The approaches can be combined - specify a key derivation function
> > > suitable for passwords; via secure channel, share a password and/or
> > > the derived key. If hww supports derivation function, it can derive
> > > the key from password. If hww supports only keys, the key can be
> > > entered raw or via mnemonic.
> > > _______________________________________________
> > > bitcoin-dev mailing list
> > > bitcoin-dev at lists.linuxfoundation.org
> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210212/0c8f1ab1/attachment-0001.html>

From ZmnSCPxj at protonmail.com  Sat Feb 13 06:10:08 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Sat, 13 Feb 2021 06:10:08 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
 <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
 <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
Message-ID: <rYmUVDf2a5W3sUoLcai_8Iy48f-vEUgC8xZ6J7W5A-3hFBQwt4W5LhO1hgc3v0P-3qfij_ocWno852Ig_vc_pn7WiBK8_YcJ4eYpHQTfp8E=@protonmail.com>

Good morning Luke,

Another thing we can do with scan mode would be something like the below masking:

    input CLK, RESET_N;
    input TESTMODE;
    input SCANOUT_INTERNAL;
    output SCANOUT_PAD;

    reg gating;
    wire n_gating = gating && TESTMODE;
    always_ff @(posedge CLK, negedge RESET_N) begin
      if (!RESET_N)   gating <= 1'b1; /*RESET-HIGH*/
      else            gating <= n_gating; end

    assign SCANOUT_PAD = SCANOUT_INTERNAL && gating;

The `gating` means that after reset, if we are not in test mode, `gating` becomes 0 permanently and prevents any scan data from being extracted.
Assuming scan is not used in normal operation (it should not) then inadvertent ESD noise on the `gating` flip-flop would not have an effect.

Output being combinational should be fine as the output is "just" an AND gate, as long as `gating` does not transition from 0->1 (impossible in normal operation, only at reset condition) then glitching is impossible, and when scan is running then `TESTMODE` should not be exited which means `gating` should remain high as well, thus output is still glitch-free.

Since the flip-flop resets to 1, and in some technologies I have seen a reset-to-0 FF is slightly smaller than a reset-to-1 FF, it might do good to invert the sense of `gating` instead, and use a NOR gate at the output (which might also be smaller than an AND gate, look it up in the technology you are targeting).
On the other hand the above is a tiny circuit already and it is unlikely you need more than one of it (well for large enough ICs you might want more than one scan chain but still, even the largest ICs we handled never had more than 8 scan chains, usually just 4 to 6) so overoptimizing this is not necessary.


Regards,
ZmnSCPxj

From lkcl at lkcl.net  Sat Feb 13 09:29:38 2021
From: lkcl at lkcl.net (Luke Kenneth Casson Leighton)
Date: Sat, 13 Feb 2021 09:29:38 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <rYmUVDf2a5W3sUoLcai_8Iy48f-vEUgC8xZ6J7W5A-3hFBQwt4W5LhO1hgc3v0P-3qfij_ocWno852Ig_vc_pn7WiBK8_YcJ4eYpHQTfp8E=@protonmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
 <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
 <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
 <rYmUVDf2a5W3sUoLcai_8Iy48f-vEUgC8xZ6J7W5A-3hFBQwt4W5LhO1hgc3v0P-3qfij_ocWno852Ig_vc_pn7WiBK8_YcJ4eYpHQTfp8E=@protonmail.com>
Message-ID: <CAPweEDyLwHt0xOty-eVdOvnB5LXezcw=0vNbt6keL0+FirXy1w@mail.gmail.com>

On Sat, Feb 13, 2021 at 6:10 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:
>
> Good morning Luke,

morning - can i ask you a favour because moderated (off-topic)
messages are being forwarded
https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/

could you send these instead to libre-soc-dev at lists.libre-soc.org?

many thanks,

l.

> Another thing we can do with scan mode would be something like the below masking:
>
>     input CLK, RESET_N;
>     input TESTMODE;
>     input SCANOUT_INTERNAL;
>     output SCANOUT_PAD;
>
>     reg gating;
>     wire n_gating = gating && TESTMODE;
>     always_ff @(posedge CLK, negedge RESET_N) begin
>       if (!RESET_N)   gating <= 1'b1; /*RESET-HIGH*/
>       else            gating <= n_gating; end
>
>     assign SCANOUT_PAD = SCANOUT_INTERNAL && gating;
>
> The `gating` means that after reset, if we are not in test mode, `gating` becomes 0 permanently and prevents any scan data from being extracted.
> Assuming scan is not used in normal operation (it should not) then inadvertent ESD noise on the `gating` flip-flop would not have an effect.
>
> Output being combinational should be fine as the output is "just" an AND gate, as long as `gating` does not transition from 0->1 (impossible in normal operation, only at reset condition) then glitching is impossible, and when scan is running then `TESTMODE` should not be exited which means `gating` should remain high as well, thus output is still glitch-free.
>
> Since the flip-flop resets to 1, and in some technologies I have seen a reset-to-0 FF is slightly smaller than a reset-to-1 FF, it might do good to invert the sense of `gating` instead, and use a NOR gate at the output (which might also be smaller than an AND gate, look it up in the technology you are targeting).
> On the other hand the above is a tiny circuit already and it is unlikely you need more than one of it (well for large enough ICs you might want more than one scan chain but still, even the largest ICs we handled never had more than 8 scan chains, usually just 4 to 6) so overoptimizing this is not necessary.
>
>
> Regards,
> ZmnSCPxj

From kanzure at gmail.com  Sat Feb 13 14:59:29 2021
From: kanzure at gmail.com (Bryan Bishop)
Date: Sat, 13 Feb 2021 08:59:29 -0600
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <CAPweEDymve0zRaqN9yEGHyOeuaSLEYWQ0K2h6usWbXiV=HkOzA@mail.gmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
 <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
 <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
 <rYmUVDf2a5W3sUoLcai_8Iy48f-vEUgC8xZ6J7W5A-3hFBQwt4W5LhO1hgc3v0P-3qfij_ocWno852Ig_vc_pn7WiBK8_YcJ4eYpHQTfp8E=@protonmail.com>
 <CAPweEDyLwHt0xOty-eVdOvnB5LXezcw=0vNbt6keL0+FirXy1w@mail.gmail.com>
 <CAPweEDymve0zRaqN9yEGHyOeuaSLEYWQ0K2h6usWbXiV=HkOzA@mail.gmail.com>
Message-ID: <CABaSBax79xqU2VAKri29dSXsre9q471iXB3S_bFiUC+pasSFrA@mail.gmail.com>

On Sat, Feb 13, 2021 at 4:18 AM Luke Kenneth Casson Leighton <lkcl at lkcl.net>
wrote:

> ... actually i don't see them in the bounces.  what's happening there?
>
> On Saturday, February 13, 2021, Luke Kenneth Casson Leighton <
> lkcl at lkcl.net> wrote:
> > On Sat, Feb 13, 2021 at 6:10 AM ZmnSCPxj <ZmnSCPxj at protonmail.com>
> wrote:
> >> Good morning Luke,
> >
> > morning - can i ask you a favour because moderated (off-topic)
> > messages are being forwarded
> > https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/
> >
> > could you send these instead to libre-soc-dev at lists.libre-soc.org?
>

I don't see what you're talking about? None of your February emails were
sent to ozlabs according to the archives there. Threads for the bitcoin-dev
mailing list are stored here:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/thread.html

- Bryan
https://twitter.com/kanzure
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210213/5275abae/attachment.html>

From dave at dtrt.org  Sat Feb 13 16:32:57 2021
From: dave at dtrt.org (David A. Harding)
Date: Sat, 13 Feb 2021 06:32:57 -1000
Subject: [bitcoin-dev] Taproot activation meeting 2 - Tuesday 16th
 February 19:00 UTC
In-Reply-To: <CAFvNmHSnd4OM+c0_L8fFXRNrxo23WdQpNdBjTJjhmGuHumgLDA@mail.gmail.com>
References: <CAFvNmHSnd4OM+c0_L8fFXRNrxo23WdQpNdBjTJjhmGuHumgLDA@mail.gmail.com>
Message-ID: <20210213163257.uvn4apdy4znr7p2t@ganymede>

On Fri, Feb 05, 2021 at 12:43:57PM +0000, Michael Folkson via bitcoin-dev wrote:
> https://old.reddit.com/r/Bitcoin/comments/lcjhl6/taproot_activation_pools_will_be_able_to_veto/gm2l02w/
> [...] 
> F6) It is more important that no rules that harm users are deployed
> than it is that new useful rules are deployed quickly. If there is a
> choice between ?faster? and ?more clear that this isn?t a mechanism to
> force bad things on users? we should prefer the latter. Plenty of
> people just don?t like LOT=true very much absent evidence that miners
> are blocking deployment. To some it just feels needlessly antagonistic
> and distrusting towards part of our community.

I think F6, above, bundles together several of Maxwell's points and
maybe loses something in summary.  I'd encourage interested readers to
view the original post that Folkson referenced.  I'd like to extract one
part as a separate point and write about it a bit in my own words:

F7) defaulting to LOT=false makes non-activation possible even if people
    run the code that developers provide, meaning a successful
    activation proves that at least some people (e.g. miners or UASFers)
    voluntarily took actions that were well outside the scope of
    developer control.

    This makes it clear that developers don't control changes to the
    system.  There are other arguments that demonstrate that developers
    aren't in control[1], but they aren't as clear as simply pointing
    out that a rule change won't go into effect until at least several
    non-developers independently act of their own accord.

    Having such a clear argument that developers aren't in control
    bolsters the decentralized ethos of Bitcoin and reduces the chance
    that bad actors will pressure Bitcoin developers to attempt future
    unwanted changes.  

-Dave

[1] IMO, the main evidence we have that developers aren't in control of
    the system is that Bitcoin Core is free software which gives anyone
    who obtains a copy of it the legal right to run it, learn from it,
    modify it, and share additional copies of it for any purpose.  Each
    time someone uses those rights to create alternative Bitcoin
    implementations, altcoins, or forkcoins, they demonstrate that users
    could change the system---or resist changes to it---in opposition to
    the current developer team, should that become necessary.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210213/47a055ac/attachment.sig>

From lkcl at lkcl.net  Sat Feb 13 16:44:27 2021
From: lkcl at lkcl.net (Luke Kenneth Casson Leighton)
Date: Sat, 13 Feb 2021 16:44:27 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <CABaSBax79xqU2VAKri29dSXsre9q471iXB3S_bFiUC+pasSFrA@mail.gmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
 <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
 <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
 <rYmUVDf2a5W3sUoLcai_8Iy48f-vEUgC8xZ6J7W5A-3hFBQwt4W5LhO1hgc3v0P-3qfij_ocWno852Ig_vc_pn7WiBK8_YcJ4eYpHQTfp8E=@protonmail.com>
 <CAPweEDyLwHt0xOty-eVdOvnB5LXezcw=0vNbt6keL0+FirXy1w@mail.gmail.com>
 <CAPweEDymve0zRaqN9yEGHyOeuaSLEYWQ0K2h6usWbXiV=HkOzA@mail.gmail.com>
 <CABaSBax79xqU2VAKri29dSXsre9q471iXB3S_bFiUC+pasSFrA@mail.gmail.com>
Message-ID: <CAPweEDwMHQUX2kt21eQzoOU_U9q9ZydoZXS8GqBEG6nbnpFkZw@mail.gmail.com>

On Sat, Feb 13, 2021 at 3:01 PM Bryan Bishop <kanzure at gmail.com> wrote:

> I don't see what you're talking about? None of your February emails
> were sent to ozlabs according to the archives there. Threads for the
> bitcoin-dev mailing list are stored here:
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/thread.html

... i am very confused, and also did not mean to send this to the list
at all!  with many apologies for taking up peoples' time here.

l.

From lkcl at lkcl.net  Sat Feb 13 17:19:01 2021
From: lkcl at lkcl.net (Luke Kenneth Casson Leighton)
Date: Sat, 13 Feb 2021 17:19:01 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
 <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
 <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
Message-ID: <CAPweEDz0AsvcbYnS2o3KL6snvUV67JpFawruq0gpcWwcTc4npQ@mail.gmail.com>

(cc'ing over to libre-soc-dev)
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018392.html

On Thu, Feb 11, 2021 at 8:21 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:

> > i was stunned to learn that in a 28nm ASIC, 50% of it is repeater-buffers!
>
> Well, that surprises me as well.
> [...]
> So I suppose at some point something like that would occur and I should not actually be surprised.
> (Maybe I am more surprised that it reached that level at that technology size, I would have thought 33% at 7nm.)

it's about line-drive strength: lower geometries are even *less* able
to line-drive long distances.

> Another point to ponder is test modes.
> In mass production you **need** test modes.

> (Sure, an attacker can try targeted ESD at the `TESTMODE` flip-flop repeatedly, but this risks also flipping other scan flip-flops that contain the data that is being extracted, so this might be sufficient protection in practice.)

if however the ASIC can be flipped into TESTMODE and yet it carries on
otherwise working, an algorithm can be re-run and the exposed data
will be clean.

> If you are really going to open-source the hardware design then the layout
> is also open and attackers can probably target specific chip area for ESD
> pulse to try a flip-flop upset, so you need to be extra careful.

this is extremely valuable advice.  in the followup [1] you describe a
gating method: this we have already deployed on a couple of places in
case the Libre Cell Library (also being developed at the same time by
Staf Verhaegen of Chips4Makers) causes errors: we do not want, for
example, an error in a Cell Library to cause a permanent HI which
locks us from being able to perform testing of other areas of the
ASIC.

the idea of being able to actually randomly flip bits inside an ASIC
from outside is both hilarious and entirely news to me, yet it sounds
to be exactly the kind of thing that would allow an attacker to
compromise a hardware wallet.  potentially destructively, mind, but
compromise all the same.

beyond even what the trezor team discovered [2] it makes it even more
important that wallet ASICs be Libre/Open.

l.

[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018412.html
[2] https://blog.trezor.io/introducing-tropic-square-why-transparency-matters-a895dab12dd3

From ZmnSCPxj at protonmail.com  Sun Feb 14 00:27:36 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Sun, 14 Feb 2021 00:27:36 +0000
Subject: [bitcoin-dev] Libre/Open blockchain / cryptographic ASICs
In-Reply-To: <CAPweEDz0AsvcbYnS2o3KL6snvUV67JpFawruq0gpcWwcTc4npQ@mail.gmail.com>
References: <CAPweEDx4wH_PG8=wqLgM_+RfTQEUSGfax=SOkgTZhe1FagXF9g@mail.gmail.com>
 <oCNGbVElAQCJ1bEmwLXLzIVec0ZoOA2Ar3vkOc1a0GW12h78bhMi_W4n3pCdDt7hJyPFoMRb0U1T5Wx5uQl4oo6zeQtjKs0MdAXGtvLw1SQ=@protonmail.com>
 <CAPweEDy7Xf3nD1mfyX5MmtsGX=1sd5=gsLosZ=bYavJ0BZyy3g@mail.gmail.com>
 <puUth0RIvY16I3ghjUiTkIPJQEKETPLZrm2QiiELW8AheIGIin29u5RkztTXIeYIK0xg2UIbsx6m-TpkJU2BvmVyYYr_BYbCdIQSk2t7TkU=@protonmail.com>
 <CAPweEDz0AsvcbYnS2o3KL6snvUV67JpFawruq0gpcWwcTc4npQ@mail.gmail.com>
Message-ID: <PrPIKz5dz72OO3dKSJS0Qjp-Gk3WYG4uA75UnK2Bze1H1XvSQOsCfDOBlPwG5UtOql8W6yv_cDWLsIFjJj60QunxD_NB__6HU7uOs1cxQMc=@protonmail.com>

Good morning Luke,

> > Another point to ponder is test modes.
> > In mass production you need test modes.
>
> > (Sure, an attacker can try targeted ESD at the `TESTMODE` flip-flop repeatedly, but this risks also flipping other scan flip-flops that contain the data that is being extracted, so this might be sufficient protection in practice.)
>
> if however the ASIC can be flipped into TESTMODE and yet it carries on
> otherwise working, an algorithm can be re-run and the exposed data
> will be clean.

But in most testmodes I have seen (and designed) all clocks are driven externally from a different pin (usually the serial interface) when in testmode.
If the CPU clock is now controlled by the attacker, how do you run any kind of algorithm?

(This could be an artifact of how my old design company designed testmodes, YMMV.)

Really the concern here is that testmode is entered while the CPU has key material loaded into registers, or caches, then it is possible, if those registers/caches are in the scan chain, to exfiltrate data.
Does not matter if the chip is now in a mode that cannot execute algorithms, if it was doing any kind of computation involving privkeys (including say deriving its public key so that PC-side hardware can get the `xpub`) then key material may be in scan chain registers, clock is now controlled by the attacker, and possibly scan mode as well (which disables combinational circuitry thus none of your algorithms can run).

>
> > If you are really going to open-source the hardware design then the layout
> > is also open and attackers can probably target specific chip area for ESD
> > pulse to try a flip-flop upset, so you need to be extra careful.
>
> this is extremely valuable advice. in the followup [1] you describe a
> gating method: this we have already deployed on a couple of places in
> case the Libre Cell Library (also being developed at the same time by
> Staf Verhaegen of Chips4Makers) causes errors: we do not want, for
> example, an error in a Cell Library to cause a permanent HI which
> locks us from being able to perform testing of other areas of the
> ASIC.
>
> the idea of being able to actually randomly flip bits inside an ASIC
> from outside is both hilarious and entirely news to me, yet it sounds
> to be exactly the kind of thing that would allow an attacker to
> compromise a hardware wallet. potentially destructively, mind, but
> compromise all the same.

Certainly outside of the the old company design philosophy I have seen many experts strongly protest against a design philosophy which assumes that any flip-flop could randomly switch.

Yet the design philosophy within the old company always had this assumption, supposedly (according to in-company lore) because previous engineers had actually found the hard way that random bitflips did occur, and for e.g. automobile chips the risk was too great to not have strong mitigations:

* State machines had to force unused states into known states.
  For example a state machine with 3 states needs 2 bits of state, but 2 bits of state is actually 4 states, so there is a 4th unused state.
  * Not all state machines needed this rule but during planning we had to identify state machines that needed this rule, and often we just targeted having 2^n states just to ensure that there were no unused states.
  * I even suggested the use of ECC encoding for important state machines and it was something being investigated at the time I left.
* State machines that otherwise did not need the above rule were strongly encouraged to clear state at display frame vsync.
  This ensured that any unexpected states they had would only last up to one display frame, which was considered acceptable.
* Flip-flops that held settings were periodically reloaded at each display frame vsync from a flash memory (which apparently as a lot more immune to bitflips).

It could be an artifact as well that the company had its own in-house foundry rather than delegate out to TSMC or whatnot --- maybe the technology we had was just suckier than state-of-the-art so bitflips were more common.

The reason why this stuck to mind is because at one time we had a DS test where shooting the ESD gun could sometimes cause the chip to fail (blank display) until reset, when the expectation was that at most it would flicker for one display frame.
And afterwards we had to go through the entire RTL looking for which state machine or settings register was the culprit.
I even wrote a little Verilog-PLI plugin that would inject deterministically random data into flip-flops in the model to try to catch it.
Eventually we found a bunch of possible root causes, and on the next DS iteration testing we had fun shooting the chip with the ESD gun over and over again and sighing in relief that the display was not failing for more than one frame.

The chip was a display driver for automotive, apparently at the time cars were starting to transition to using LCD for things like speedometer and accelerometer rather than physical dials.
And of course the display suddenly switching off while the car is running at high speed due to some extra-powerful pulse elsewhere was potentially dangerous and could distract the driver, so that is why we were paranoid about such sudden bitflips potentially leading to such massive cascade of upsets as to make the display fail permanently.

I think being excessively cautious for cryptographic chips should be standard as well.
And certainly test mode exfiltration of data is always an issue, JTAG is very standard way of reading memory.

Regards,
ZmnSCPxj

From dp at simplexum.com  Sun Feb 14 10:37:52 2021
From: dp at simplexum.com (Dmitry Petukhov)
Date: Sun, 14 Feb 2021 11:37:52 +0100
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9uUv32AbSUv9C-JvzEQo5WQb+a6iPSBWTnY1wwKwGaDng@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9v5jzsu7siuyAu42XOCdtXqMXmKzmiDzjEy_bVNbSPyyw@mail.gmail.com>
 <20210212184231.22b517aa@simplexum.com>
 <CAPKmR9uUv32AbSUv9C-JvzEQo5WQb+a6iPSBWTnY1wwKwGaDng@mail.gmail.com>
Message-ID: <20210214113752.0a255161@simplexum.com>

I think that it is better to issue individual TOKEN for each
participant. Otherwise it will be possible for one participant to
attack another (intercept and replace their xpub sent to the
coordinator).

It will also be convenient to have a public 'participant id', derived
from the token. It can be derived from the same token, but with
different (but fixed) `Pwd`. With unique token per participant, such
derivation will uniquely identify each participant, so the coordinator
won't need to try all the tokens to decrypt the data.

It will also be easier to deal with more elaborate setups where the
position of the xpub in the descriptor does matter - for example, with
miniscript-extended descriptors. With a descriptor template such as

`wsh(or(multi(2, <Alice>, <Bob>, <Carol>), older(1000, <Dylan>))`

The coordinator will be able to store the map between the participant
labels (Alice, Bob, Carol, Dylan) and their participant ids (and the
TOKENs). When the data from Alice comes with participant id attached,
the coordinator will immediately know which TOKEN to use, and which
place in the descriptor the xpub should be put in.

Of course this is all possible without 'participant id' derived from
token, as long as there's unique TOKEN per participant - the coordinator
can always try all the tokens to decrypt the data from participant. But
implementors will likely invent their own ways to introduce
'participant id' anyway, as this is more convenient, and it might make
sense to have this standardized, for interoperability. 

? Fri, 12 Feb 2021 09:54:57 -0800
Hugo Nguyen <hugo at nunchuk.io> wrote:

> On Fri, Feb 12, 2021 at 9:36 AM Dmitry Petukhov <dp at simplexum.com>
> wrote:
> 
> > If HUMAN_READABLE_TITLE is the additional secret, the user would
> > need to enter it on the device in addition to the nonce, wouldn't
> > it defeat the advantage in UX that was gained by using (relatively)
> > short nonce ?
> >
> > Is 64 bit nonce not enough ?
> >
> >  
> Good question. If we don't need the extra entropy, we can fix
> the HUMAN_READABLE_TITLE string.
> 
> Something like "No SPOF". (No Single Point Of Failure).
> 
> 
> 
> > It seems that to crack this with fixed Pwd and 64 bit nonce, the
> > attacker will need to be about 10^15 more powerful than 80Mhz MCU:
> > (2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is
> > realistic scale. Average desktop cpu seems to be about 10^3 more
> > powerful than the mentioned MCU for this task.
> >
> > Maybe for the UX it would be better to choose the number of rounds
> > to use in PBKDF2, instead of using variable Pwd. Number of rounds
> > will be easier to enter on the device (or just choose it from a set
> > of pre-defined values). The more money is at stake, the higher
> > number of rounds could the coordinator choose (taking into account
> > the characteristics of the participant devices)
> >  
> 
> > Or simply allow bigger entropy (more than 6 mnemonic words), if
> > the coordinator feels that 64 bit of entropy is not enough.  
> 
> 
> That could work. Allowing variable iteration count is probably better
> UX-wise.
> 
> Best,
> Hugo
> 
> 
> >
> > ? Fri, 12 Feb 2021 08:55:55 -0800
> > Hugo Nguyen <hugo at nunchuk.io> wrote:
> >  
> > > Thanks everyone who has provided inputs so far!
> > >
> > > This is the new proposal for the encryption aspect of the scheme,
> > > based on all the feedback.
> > >
> > > The key derivation function would be PBKDF2, with PRF = SHA512.
> > > This should be readily available on today's hardware already, as
> > > they are used for BIP39.
> > >
> > > DK = PBKDF2(PRF, Password, Salt, c, dkLen)
> > > PRF = SHA512
> > > Pwd = HUMAN_READABLE_TITLE
> > > Salt = NONCE
> > > c = 2048
> > > dkLen = 256
> > >
> > > HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8,
> > > maximum length = 20.
> > > NONCE is a 64-bit number.
> > >
> > > Reason for going with SHA512 is due to legacy support on some
> > > hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to
> > > derive the encryption key on a 80Mhz MCU. We feel like this is a
> > > good enough tradeoff for this use case. The assumption here is
> > > that the secure session is only needed temporarily for a few
> > > hours, maybe up to one day.
> > >
> > > The Coordinator and Signers agree and exchange these 2 secrets
> > > prior to the setup. The NONCE can be converted to either:
> > > (a) a 6-word phrase using BIP39 wordlist
> > > (b) a 20-digit decimal number
> > > (c) a QR code
> > >
> > > Depending on the vendor. This flexibility in the data format
> > > allows each vendor to customize the UX based on their respective
> > > device capabilities.
> > >
> > > Best,
> > > Hugo
> > >
> > > On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev <
> > > bitcoin-dev at lists.linuxfoundation.org> wrote:
> > >  
> > > > ? Thu, 11 Feb 2021 05:45:33 -0800
> > > > Hugo Nguyen via bitcoin-dev
> > > > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > > >  
> > > > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))  
> > > > > >
> > > > > > This scheme might be vulnerable to rainbow table attack.
> > > > > >  
> > > > >
> > > > > Thank you for pointing this out! Incidentally, Dmitry Petukhov
> > > > > also told me the same privately.  
> > > >
> > > > My thought was that if TOKEN has the characteristics of a
> > > > password (short ASCII string), then it would be better to use
> > > > key derivation function designed for passwords, like PBKDF2.
> > > >
> > > > The counter-argument to this is that this adds another code
> > > > dependency for vendors, if the device firmware does not already
> > > > have the required key derivation function.
> > > >
> > > > Maybe this could be solved by going into opposite direction -
> > > > make the "token" even longer, use the mnemoic.
> > > >
> > > > The issue is that entering long data of the shared key into the
> > > > device manually is difficult UX-wise.
> > > >
> > > > Hww vendors that allow to enter custom keys into their device
> > > > already have to face this issue, and those who allow to enter
> > > > custom keys via mnemonic probably tackled this somehow.
> > > >
> > > > Maybe the shared key for multisig setup can be entered in the
> > > > same way ? (with maybe additional visual check via some
> > > > fingerprint).
> > > >
> > > > Although we would then have another issue of potential confusion
> > > > between two procedures (entering the main key and entering the
> > > > shared key for multisig setup), and the measures has to be
> > > > taken to prevent such confusion.
> > > >
> > > > The approaches can be combined - specify a key derivation
> > > > function suitable for passwords; via secure channel, share a
> > > > password and/or the derived key. If hww supports derivation
> > > > function, it can derive the key from password. If hww supports
> > > > only keys, the key can be entered raw or via mnemonic.
> > > > _______________________________________________
> > > > bitcoin-dev mailing list
> > > > bitcoin-dev at lists.linuxfoundation.org
> > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > > >  
> >
> >  


From dp at simplexum.com  Sun Feb 14 11:28:58 2021
From: dp at simplexum.com (Dmitry Petukhov)
Date: Sun, 14 Feb 2021 12:28:58 +0100
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <20210214113752.0a255161@simplexum.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CACrqygA1JRA293joYOxxpSepiuFD=uVvQQy3wpuosYyLQHff-A@mail.gmail.com>
 <CAPKmR9tcR7gBfJ=EqJ60J=XvsreZgByL+HEfR0_YvwadJRWNhg@mail.gmail.com>
 <CACrqygDhuateDtJMBSWd9sGRu1yzrZBw2yZ75OyKD1Xmzix3Cw@mail.gmail.com>
 <CAPKmR9sUFJqsxKQS_x9rYZzkEO7hXr6vwAyPnysQPzA91TDjMA@mail.gmail.com>
 <CAF90AvkeG53o5H2dZsdsG_c4PxxooMgx-Fv47RWpNNwm_su-hg@mail.gmail.com>
 <CAPKmR9vg1BMDQWNDk41N4i4cJ8J6K9GuqSpstFpMFwyiVBYw-w@mail.gmail.com>
 <20210211172910.3b550706@simplexum.com>
 <CAPKmR9v5jzsu7siuyAu42XOCdtXqMXmKzmiDzjEy_bVNbSPyyw@mail.gmail.com>
 <20210212184231.22b517aa@simplexum.com>
 <CAPKmR9uUv32AbSUv9C-JvzEQo5WQb+a6iPSBWTnY1wwKwGaDng@mail.gmail.com>
 <20210214113752.0a255161@simplexum.com>
Message-ID: <20210214122858.54de7bcc@simplexum.com>

After off-list discussion with Hugo, I'm convinced that
adding a requirement for signers to derive participant ids is
unnecessary complication that only buys slight convenience for
coordinator, and this is not a net positive tradeoff.

And since the coordinator can choose to generate unique TOKEN per
participant without participants even knowing about this, there's
probably no reason to mention this possibility in the spec, either.

? Sun, 14 Feb 2021 11:37:52 +0100
Dmitry Petukhov <dp at simplexum.com> wrote:

> I think that it is better to issue individual TOKEN for each
> participant. Otherwise it will be possible for one participant to
> attack another (intercept and replace their xpub sent to the
> coordinator).
> 
> It will also be convenient to have a public 'participant id', derived
> from the token. It can be derived from the same token, but with
> different (but fixed) `Pwd`. With unique token per participant, such
> derivation will uniquely identify each participant, so the coordinator
> won't need to try all the tokens to decrypt the data.
> 
> It will also be easier to deal with more elaborate setups where the
> position of the xpub in the descriptor does matter - for example, with
> miniscript-extended descriptors. With a descriptor template such as
> 
> `wsh(or(multi(2, <Alice>, <Bob>, <Carol>), older(1000, <Dylan>))`
> 
> The coordinator will be able to store the map between the participant
> labels (Alice, Bob, Carol, Dylan) and their participant ids (and the
> TOKENs). When the data from Alice comes with participant id attached,
> the coordinator will immediately know which TOKEN to use, and which
> place in the descriptor the xpub should be put in.
> 
> Of course this is all possible without 'participant id' derived from
> token, as long as there's unique TOKEN per participant - the
> coordinator can always try all the tokens to decrypt the data from
> participant. But implementors will likely invent their own ways to
> introduce 'participant id' anyway, as this is more convenient, and it
> might make sense to have this standardized, for interoperability. 
> 
> ? Fri, 12 Feb 2021 09:54:57 -0800
> Hugo Nguyen <hugo at nunchuk.io> wrote:
> 
> > On Fri, Feb 12, 2021 at 9:36 AM Dmitry Petukhov <dp at simplexum.com>
> > wrote:
> >   
> > > If HUMAN_READABLE_TITLE is the additional secret, the user would
> > > need to enter it on the device in addition to the nonce, wouldn't
> > > it defeat the advantage in UX that was gained by using
> > > (relatively) short nonce ?
> > >
> > > Is 64 bit nonce not enough ?
> > >
> > >    
> > Good question. If we don't need the extra entropy, we can fix
> > the HUMAN_READABLE_TITLE string.
> > 
> > Something like "No SPOF". (No Single Point Of Failure).
> > 
> > 
> >   
> > > It seems that to crack this with fixed Pwd and 64 bit nonce, the
> > > attacker will need to be about 10^15 more powerful than 80Mhz MCU:
> > > (2^64)/(0.3*10^15)/3600 = 17 hours. I don't know if 10^15 is
> > > realistic scale. Average desktop cpu seems to be about 10^3 more
> > > powerful than the mentioned MCU for this task.
> > >
> > > Maybe for the UX it would be better to choose the number of rounds
> > > to use in PBKDF2, instead of using variable Pwd. Number of rounds
> > > will be easier to enter on the device (or just choose it from a
> > > set of pre-defined values). The more money is at stake, the higher
> > > number of rounds could the coordinator choose (taking into account
> > > the characteristics of the participant devices)
> > >    
> >   
> > > Or simply allow bigger entropy (more than 6 mnemonic words), if
> > > the coordinator feels that 64 bit of entropy is not enough.    
> > 
> > 
> > That could work. Allowing variable iteration count is probably
> > better UX-wise.
> > 
> > Best,
> > Hugo
> > 
> >   
> > >
> > > ? Fri, 12 Feb 2021 08:55:55 -0800
> > > Hugo Nguyen <hugo at nunchuk.io> wrote:
> > >    
> > > > Thanks everyone who has provided inputs so far!
> > > >
> > > > This is the new proposal for the encryption aspect of the
> > > > scheme, based on all the feedback.
> > > >
> > > > The key derivation function would be PBKDF2, with PRF = SHA512.
> > > > This should be readily available on today's hardware already, as
> > > > they are used for BIP39.
> > > >
> > > > DK = PBKDF2(PRF, Password, Salt, c, dkLen)
> > > > PRF = SHA512
> > > > Pwd = HUMAN_READABLE_TITLE
> > > > Salt = NONCE
> > > > c = 2048
> > > > dkLen = 256
> > > >
> > > > HUMAN_READABLE_TITLE is in ASCII format, minimum length = 8,
> > > > maximum length = 20.
> > > > NONCE is a 64-bit number.
> > > >
> > > > Reason for going with SHA512 is due to legacy support on some
> > > > hardware. c=2048 also mimics BIP39. It takes about ~3 seconds to
> > > > derive the encryption key on a 80Mhz MCU. We feel like this is a
> > > > good enough tradeoff for this use case. The assumption here is
> > > > that the secure session is only needed temporarily for a few
> > > > hours, maybe up to one day.
> > > >
> > > > The Coordinator and Signers agree and exchange these 2 secrets
> > > > prior to the setup. The NONCE can be converted to either:
> > > > (a) a 6-word phrase using BIP39 wordlist
> > > > (b) a 20-digit decimal number
> > > > (c) a QR code
> > > >
> > > > Depending on the vendor. This flexibility in the data format
> > > > allows each vendor to customize the UX based on their respective
> > > > device capabilities.
> > > >
> > > > Best,
> > > > Hugo
> > > >
> > > > On Thu, Feb 11, 2021 at 8:25 AM Dmitry Petukhov via bitcoin-dev
> > > > < bitcoin-dev at lists.linuxfoundation.org> wrote:
> > > >    
> > > > > ? Thu, 11 Feb 2021 05:45:33 -0800
> > > > > Hugo Nguyen via bitcoin-dev
> > > > > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > > > >    
> > > > > > > > ENCRYPTION_KEY = SHA256(SHA256(TOKEN))    
> > > > > > >
> > > > > > > This scheme might be vulnerable to rainbow table attack.
> > > > > > >    
> > > > > >
> > > > > > Thank you for pointing this out! Incidentally, Dmitry
> > > > > > Petukhov also told me the same privately.    
> > > > >
> > > > > My thought was that if TOKEN has the characteristics of a
> > > > > password (short ASCII string), then it would be better to use
> > > > > key derivation function designed for passwords, like PBKDF2.
> > > > >
> > > > > The counter-argument to this is that this adds another code
> > > > > dependency for vendors, if the device firmware does not
> > > > > already have the required key derivation function.
> > > > >
> > > > > Maybe this could be solved by going into opposite direction -
> > > > > make the "token" even longer, use the mnemoic.
> > > > >
> > > > > The issue is that entering long data of the shared key into
> > > > > the device manually is difficult UX-wise.
> > > > >
> > > > > Hww vendors that allow to enter custom keys into their device
> > > > > already have to face this issue, and those who allow to enter
> > > > > custom keys via mnemonic probably tackled this somehow.
> > > > >
> > > > > Maybe the shared key for multisig setup can be entered in the
> > > > > same way ? (with maybe additional visual check via some
> > > > > fingerprint).
> > > > >
> > > > > Although we would then have another issue of potential
> > > > > confusion between two procedures (entering the main key and
> > > > > entering the shared key for multisig setup), and the measures
> > > > > has to be taken to prevent such confusion.
> > > > >
> > > > > The approaches can be combined - specify a key derivation
> > > > > function suitable for passwords; via secure channel, share a
> > > > > password and/or the derived key. If hww supports derivation
> > > > > function, it can derive the key from password. If hww supports
> > > > > only keys, the key can be entered raw or via mnemonic.
> > > > > _______________________________________________
> > > > > bitcoin-dev mailing list
> > > > > bitcoin-dev at lists.linuxfoundation.org
> > > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > > > >    
> > >
> > >    
> 


From hugo at nunchuk.io  Mon Feb 15 08:44:19 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Mon, 15 Feb 2021 00:44:19 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
Message-ID: <CAPKmR9urumKTTdBFtu-xY+RdSptOGomnJGK+sbEVnmDH=ZkBKw@mail.gmail.com>

Hi all,
I have updated the proposal based on further feedback. The new spec is
included at the bottom.

I have also created a public Github PR to make it easier to comment on the
text of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .

Could someone please let me know what else needs to be done before a BIP
number can be assigned?


=== Quick summary of changes from last update ===

1. Define encryption modes

# NO_ENCRYPTION: Encryption is disabled.
# STANDARD : the TOKEN is a 64-bit nonce.
# EXTENDED : the TOKEN is a 128-bit nonce.

2. Define signature algorithm

Follow BIP-0322, legacy format allowed.

3. Multiple TOKENs (optional)

Also add an option where the Coordinator can choose to use one common TOKEN
for all Signers, or use one per Signer.

=== End of summary ===


Cheers,
Hugo


<pre>
  BIP: To be determined
  Layer: Applications
  Title: Bitcoin Secure Multisig Setup (BSMS)
  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at
coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <
stick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo
Novak <rodolfo at coinkite.com>
  Comments-Summary: No comments yet.
  Comments-URI:
  Status: Proposed
  Type: Standards Track
  Created: 2020-11-10
  License: BSD-2-Clause
</pre>

==Introduction==

===Abstract===

This document proposes a mechanism to set up multisig wallets securely.

===Copyright===

This BIP is licensed under the 2-clause BSD license.

===Motivation===

The Bitcoin multisig experience has been greatly streamlined under [
https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174
(Partially Signed Bitcoin Transaction)]. However, what is still missing is
a standardized process for setting up multisig wallets securely across
different vendors.

There are a number of concerns when it comes to setting up a multisig
wallet:

# Whether the multisig configuration, such as Signer membership, script
type, derivation paths and number of signatures required, is correct and
not tampered with.
# Whether Signer persists the multisig configuration in their respective
storage, and under what format.
# Whether Signer's storage is tamper-proof.
# Whether Signer subsequently uses the multisig configuration to generate
and verify receive and change addresses.

An attacker who can modify the multisig configuration can steal or hold
funds to ransom by duping the user into sending funds to the wrong address.

This proposal seeks to address concerns #1 and #2: to mitigate the risk of
tampering during the initial setup phase, and to define an interoperable
multisig configuration format.

Concerns #3 and #4 should be handled by Signers and is out of scope of this
proposal.

==Specification==

===Prerequisites===
This proposal assumes the parties in the multisig support [
https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032], [
https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the
descriptor language] and encryption.

===Roles===
====Coordinator====

The Coordinator initiates the multisig setup. The Coordinator determines
what type of multisig is used and the exact policy script. If encryption is
enabled, the Coordinator also distributes a shared secret or shared secrets
to the parties involved for secure communication. The Coordinator gathers
information from the Signers to generate a descriptor record. The
Coordinator distributes the descriptor record back to the Signers.

====Signer====

The Signer is a participating member in the multisig. Its responsibilities
include providing its key record -- which contains an Extended Public Key
(XPUB) -- to the Coordinator, verifying that its XPUB is included in the
descriptor record and persisting the descriptor record in its storage.

===Setup Process===

====Round 1====

=====Coordinator=====

* The Coordinator creates a multisig wallet creation session. The
Coordinator constructs the multisig script and its policy parameters, such
as the total number of signers and the required number of signatures
(<tt>M</tt> and <tt>N</tt>).
* The session should expire after some time period determined by the
Coordinator, e.g., 24 hours.
* If encryption is enabled, the Coordinator distributes a secret
<tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the
<tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the
Encryption section below for details on the <tt>TOKEN</tt>, the key
derivation function and the encryption scheme. Depending on the use case,
the Coordinator can decide whether to share one common <tt>TOKEN</tt> for
all Signers, or to have one per Signer.
* If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and all
the encryption/decryption steps below can be skipped.

=====Signer=====

* The Signer initiates a new secure multisig setup session by setting the
<tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the
<tt>TOKEN</tt>. The Signer can keep the session open until a different
value for the <tt>TOKEN</tt> is set.
* The Signer generates a key record by prompting the user for a multisig
derivation path and retrieves the XPUB at that derivation path. Optionally,
the Signer can choose a path on behalf of the user. If the Signer chooses
the path, it should try to avoid reusing XPUBs for different wallets.
* The first line in the record must be the <tt>TOKEN</tt>. The second line
must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin
information, written in the descriptor-defined format, i.e.: <tt>[{master
key fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a
<tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the
private key associated with the XPUB to sign the first two lines.  The
signature should follow [
https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322],
legacy format accepted. Finally, the Signer encrypts the entire record with
<tt>ENCRYPTION_KEY</tt>.

====Round 2====

=====Coordinator=====

* The Coordinator gathers key records from all participating Signers. Abort
the setup if the wallet setup session has expired.
* For each key record, the Coordinator decrypts it using
<tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included
<tt>SIG</tt> is valid given the <tt>KEY</tt>.
* If all key records look good, the Coordinator fills in all necessary
information to generate a descriptor record, which is simply the descriptor
string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has
[https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums
BECH32 encoding].
* The Coordinator encrypts this descriptor record with
<tt>ENCRYPTION_KEY</tt>.
* The Coordinator sends the encrypted descriptor record to all
participating Signers.

=====Signer=====

* The Signer imports the descriptor record, decrypts it using the
<tt>ENCRYPTION_KEY</tt> derived from the open session.
* The Signer calculates and verifies the descriptor?s <tt>CHECKSUM</tt>.
Abort the setup if the <tt>CHECKSUM</tt> is incorrect.
* The Signer checks whether one of the <tt>KEY</tt>s in the descriptor
belongs to it, using path and fingerprint information included in the
descriptor. The check must perform an exact match on the <tt>KEY</tt>s, and
not using shortcuts such as matching fingerprints (which is trivial to
spoof). Abort the setup if it doesn?t detect its own <tt>KEY</tt>.
* For confirmation, the Signer must display to the user the
<tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and
<tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to
prevent a <tt>KEY</tt> insertion attack. All participating Signers should
be able to display the same confirmation.
* If all checks pass, the Signer persists the descriptor record in its
storage.
* The Signer can choose to further restrict post-XPUB derivation paths,
such as to those defined in [
https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki BIP-0044].
* The Signer should subsequently use the descriptor to generate and verify
receive and change addresses.

This completes the setup.

===Encryption===

====The Token====
We define three modes of encryption.

# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.
Encryption is disabled.
# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.
# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.

The <tt>TOKEN</tt> can be converted to one of these formats:
* A mnemonic phrase using [
https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039]
word list (6 words in <tt>STANDARD</tt> mode, 12 words in <tt>EXTENDED</tt>
mode)
* A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in
<tt>EXTENDED</tt> mode)
* A QR code
* Other formats

The flexibility in the data format allows each Signer to customize the User
Experience based on its respective capabilities.

====Key Derivation====
The key derivation function is [https://tools.ietf.org/html/rfc2898
PBKDF2], with PRF = SHA512. Specifically:

<tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>

Whereas:

* PRF = <tt>SHA512</tt>
* Password = <tt>"No SPOF"</tt>
* Salt = <tt>TOKEN</tt>
* c = <tt>2048</tt>
* dkLen = <tt>256</tt>
* DK = Derived <tt>ENCRYPTION_KEY</tt>

====Encryption Scheme====
The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR
mode].

==QR Codes==
For signers that use QR codes to transmit data, key and descriptor records
can be converted to QR codes, following [
https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md
the BCR standard].

Also refer to [
https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md
UR Type Definition for BIP44 Accounts] and [
https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md
UR Type Definition for Bitcoin Output Descriptors] for more details.

==Security==

This proposal introduces two layers of protection. The first one is a
temporary, secret token, used to encrypt the two rounds of communication
between the Signer and the Coordinator. The second one is through the
descriptor checksum and visual inspection of the descriptor itself.

The token is only needed during the setup phase, and can be safely thrown
away afterwards. The token does not guarantee that the Signer membership
set is not modified, since that depends on the overall security of all
parties in the setup, but it can make it significantly harder for an
attacker to do so.

There are three ways an attacker can modify the membership set: by changing
an existing member, by removing an existing member, or by adding a new
member.

For the first two methods, one of the Signers will be able to detect that
its membership has been changed or removed, and reject the final
descriptor. Thus, it is vital that all participating Signers check that
their membership is intact in the descriptor. Even one Signer failing to
check for its membership means that the setup could be compromised.

For the third type of attack, the descriptor checksum and visual inspection
of the descriptor itself are the only way to guard against malicious
members from being inserted into the set.

==Acknowledgement==

Special thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and others
for their feedback on the specification.

==References==

Original mailing list thread:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/0d58580e/attachment-0001.html>

From craigraw at gmail.com  Mon Feb 15 13:53:05 2021
From: craigraw at gmail.com (Craig Raw)
Date: Mon, 15 Feb 2021 15:53:05 +0200
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9urumKTTdBFtu-xY+RdSptOGomnJGK+sbEVnmDH=ZkBKw@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CAPKmR9urumKTTdBFtu-xY+RdSptOGomnJGK+sbEVnmDH=ZkBKw@mail.gmail.com>
Message-ID: <CAPR5oBPtap5Q7DUbNsjy9JxLOp82nEOnj5WA=amas1OqVot-Ew@mail.gmail.com>

Hi all,

Hugo and I have discussed off-list, and I have two concerns with this
proposal:

1. I believe adding the TOKEN and encryption to the exchange adds
complexity to already notoriously complex multisig, without adding much in
the way of security. This is because the shared secret (TOKEN) must still
be shared securely, and if you have established an (off-protocol) secure
channel to do this, why not just share the actual multisig configuration
data directly in that channel? If you are able to do so, you retain the
advantage of being able to inspect the data directly.

2. Asking the user to enter the derivation into the Signer also adds (IMO
unnecessary) complexity to the multisig setup process. A different way of
doing it, which is specified in the UR crypto-account format linked to
previously, has the Signer provide as many common derivations (along with
their xpubs) as it can support for a given BIP44 account number. This has
the dual advantage of making things simpler for the user (they only have to
provide an optional account number) and increasing the standardisation on
common derivation paths. On receiving these derivation/xpub pairs, the
Coordinator can simply pick the appropriate one.

These concerns noted, I agree it's a good idea to have Signers save the
multisig configuration as proposed, and it would be great to have
standardisation in hww import and export formats (not just for multisig).
On that note, I'd love to see greater adoption of the efficient UR2.0
standard and associated formats for airgapped data transmission using QR
codes.

Craig


On Mon, Feb 15, 2021 at 11:13 AM Hugo Nguyen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi all,
> I have updated the proposal based on further feedback. The new spec is
> included at the bottom.
>
> I have also created a public Github PR to make it easier to comment on the
> text of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .
>
> Could someone please let me know what else needs to be done before a BIP
> number can be assigned?
>
>
> === Quick summary of changes from last update ===
>
> 1. Define encryption modes
>
> # NO_ENCRYPTION: Encryption is disabled.
> # STANDARD : the TOKEN is a 64-bit nonce.
> # EXTENDED : the TOKEN is a 128-bit nonce.
>
> 2. Define signature algorithm
>
> Follow BIP-0322, legacy format allowed.
>
> 3. Multiple TOKENs (optional)
>
> Also add an option where the Coordinator can choose to use one common
> TOKEN for all Signers, or use one per Signer.
>
> === End of summary ===
>
>
> Cheers,
> Hugo
>
>
> <pre>
>   BIP: To be determined
>   Layer: Applications
>   Title: Bitcoin Secure Multisig Setup (BSMS)
>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at
> coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <
> stick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo
> Novak <rodolfo at coinkite.com>
>   Comments-Summary: No comments yet.
>   Comments-URI:
>   Status: Proposed
>   Type: Standards Track
>   Created: 2020-11-10
>   License: BSD-2-Clause
> </pre>
>
> ==Introduction==
>
> ===Abstract===
>
> This document proposes a mechanism to set up multisig wallets securely.
>
> ===Copyright===
>
> This BIP is licensed under the 2-clause BSD license.
>
> ===Motivation===
>
> The Bitcoin multisig experience has been greatly streamlined under [
> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174
> (Partially Signed Bitcoin Transaction)]. However, what is still missing is
> a standardized process for setting up multisig wallets securely across
> different vendors.
>
> There are a number of concerns when it comes to setting up a multisig
> wallet:
>
> # Whether the multisig configuration, such as Signer membership, script
> type, derivation paths and number of signatures required, is correct and
> not tampered with.
> # Whether Signer persists the multisig configuration in their respective
> storage, and under what format.
> # Whether Signer's storage is tamper-proof.
> # Whether Signer subsequently uses the multisig configuration to generate
> and verify receive and change addresses.
>
> An attacker who can modify the multisig configuration can steal or hold
> funds to ransom by duping the user into sending funds to the wrong address.
>
> This proposal seeks to address concerns #1 and #2: to mitigate the risk of
> tampering during the initial setup phase, and to define an interoperable
> multisig configuration format.
>
> Concerns #3 and #4 should be handled by Signers and is out of scope of
> this proposal.
>
> ==Specification==
>
> ===Prerequisites===
> This proposal assumes the parties in the multisig support [
> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP-0032],
> [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the
> descriptor language] and encryption.
>
> ===Roles===
> ====Coordinator====
>
> The Coordinator initiates the multisig setup. The Coordinator determines
> what type of multisig is used and the exact policy script. If encryption is
> enabled, the Coordinator also distributes a shared secret or shared secrets
> to the parties involved for secure communication. The Coordinator gathers
> information from the Signers to generate a descriptor record. The
> Coordinator distributes the descriptor record back to the Signers.
>
> ====Signer====
>
> The Signer is a participating member in the multisig. Its responsibilities
> include providing its key record -- which contains an Extended Public Key
> (XPUB) -- to the Coordinator, verifying that its XPUB is included in the
> descriptor record and persisting the descriptor record in its storage.
>
> ===Setup Process===
>
> ====Round 1====
>
> =====Coordinator=====
>
> * The Coordinator creates a multisig wallet creation session. The
> Coordinator constructs the multisig script and its policy parameters, such
> as the total number of signers and the required number of signatures
> (<tt>M</tt> and <tt>N</tt>).
> * The session should expire after some time period determined by the
> Coordinator, e.g., 24 hours.
> * If encryption is enabled, the Coordinator distributes a secret
> <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the
> <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the
> Encryption section below for details on the <tt>TOKEN</tt>, the key
> derivation function and the encryption scheme. Depending on the use case,
> the Coordinator can decide whether to share one common <tt>TOKEN</tt> for
> all Signers, or to have one per Signer.
> * If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and all
> the encryption/decryption steps below can be skipped.
>
> =====Signer=====
>
> * The Signer initiates a new secure multisig setup session by setting the
> <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the
> <tt>TOKEN</tt>. The Signer can keep the session open until a different
> value for the <tt>TOKEN</tt> is set.
> * The Signer generates a key record by prompting the user for a multisig
> derivation path and retrieves the XPUB at that derivation path. Optionally,
> the Signer can choose a path on behalf of the user. If the Signer chooses
> the path, it should try to avoid reusing XPUBs for different wallets.
> * The first line in the record must be the <tt>TOKEN</tt>. The second line
> must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin
> information, written in the descriptor-defined format, i.e.: <tt>[{master
> key fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a
> <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the
> private key associated with the XPUB to sign the first two lines.  The
> signature should follow [
> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki BIP-0322],
> legacy format accepted. Finally, the Signer encrypts the entire record with
> <tt>ENCRYPTION_KEY</tt>.
>
> ====Round 2====
>
> =====Coordinator=====
>
> * The Coordinator gathers key records from all participating Signers.
> Abort the setup if the wallet setup session has expired.
> * For each key record, the Coordinator decrypts it using
> <tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included
> <tt>SIG</tt> is valid given the <tt>KEY</tt>.
> * If all key records look good, the Coordinator fills in all necessary
> information to generate a descriptor record, which is simply the descriptor
> string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has
> [
> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums
> BECH32 encoding].
> * The Coordinator encrypts this descriptor record with
> <tt>ENCRYPTION_KEY</tt>.
> * The Coordinator sends the encrypted descriptor record to all
> participating Signers.
>
> =====Signer=====
>
> * The Signer imports the descriptor record, decrypts it using the
> <tt>ENCRYPTION_KEY</tt> derived from the open session.
> * The Signer calculates and verifies the descriptor?s <tt>CHECKSUM</tt>.
> Abort the setup if the <tt>CHECKSUM</tt> is incorrect.
> * The Signer checks whether one of the <tt>KEY</tt>s in the descriptor
> belongs to it, using path and fingerprint information included in the
> descriptor. The check must perform an exact match on the <tt>KEY</tt>s, and
> not using shortcuts such as matching fingerprints (which is trivial to
> spoof). Abort the setup if it doesn?t detect its own <tt>KEY</tt>.
> * For confirmation, the Signer must display to the user the
> <tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and
> <tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to
> prevent a <tt>KEY</tt> insertion attack. All participating Signers should
> be able to display the same confirmation.
> * If all checks pass, the Signer persists the descriptor record in its
> storage.
> * The Signer can choose to further restrict post-XPUB derivation paths,
> such as to those defined in [
> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki BIP-0044].
> * The Signer should subsequently use the descriptor to generate and verify
> receive and change addresses.
>
> This completes the setup.
>
> ===Encryption===
>
> ====The Token====
> We define three modes of encryption.
>
> # <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.
> Encryption is disabled.
> # <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.
> # <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.
>
> The <tt>TOKEN</tt> can be converted to one of these formats:
> * A mnemonic phrase using [
> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039]
> word list (6 words in <tt>STANDARD</tt> mode, 12 words in <tt>EXTENDED</tt>
> mode)
> * A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in
> <tt>EXTENDED</tt> mode)
> * A QR code
> * Other formats
>
> The flexibility in the data format allows each Signer to customize the
> User Experience based on its respective capabilities.
>
> ====Key Derivation====
> The key derivation function is [https://tools.ietf.org/html/rfc2898
> PBKDF2], with PRF = SHA512. Specifically:
>
> <tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>
>
> Whereas:
>
> * PRF = <tt>SHA512</tt>
> * Password = <tt>"No SPOF"</tt>
> * Salt = <tt>TOKEN</tt>
> * c = <tt>2048</tt>
> * dkLen = <tt>256</tt>
> * DK = Derived <tt>ENCRYPTION_KEY</tt>
>
> ====Encryption Scheme====
> The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR
> mode].
>
> ==QR Codes==
> For signers that use QR codes to transmit data, key and descriptor records
> can be converted to QR codes, following [
> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md
> the BCR standard].
>
> Also refer to [
> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md
> UR Type Definition for BIP44 Accounts] and [
> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md
> UR Type Definition for Bitcoin Output Descriptors] for more details.
>
> ==Security==
>
> This proposal introduces two layers of protection. The first one is a
> temporary, secret token, used to encrypt the two rounds of communication
> between the Signer and the Coordinator. The second one is through the
> descriptor checksum and visual inspection of the descriptor itself.
>
> The token is only needed during the setup phase, and can be safely thrown
> away afterwards. The token does not guarantee that the Signer membership
> set is not modified, since that depends on the overall security of all
> parties in the setup, but it can make it significantly harder for an
> attacker to do so.
>
> There are three ways an attacker can modify the membership set: by
> changing an existing member, by removing an existing member, or by adding a
> new member.
>
> For the first two methods, one of the Signers will be able to detect that
> its membership has been changed or removed, and reject the final
> descriptor. Thus, it is vital that all participating Signers check that
> their membership is intact in the descriptor. Even one Signer failing to
> check for its membership means that the setup could be compromised.
>
> For the third type of attack, the descriptor checksum and visual
> inspection of the descriptor itself are the only way to guard against
> malicious members from being inserted into the set.
>
> ==Acknowledgement==
>
> Special thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and others
> for their feedback on the specification.
>
> ==References==
>
> Original mailing list thread:
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/4ca65ae9/attachment-0001.html>

From hugo at nunchuk.io  Mon Feb 15 14:19:14 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Mon, 15 Feb 2021 06:19:14 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPR5oBPtap5Q7DUbNsjy9JxLOp82nEOnj5WA=amas1OqVot-Ew@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CAPKmR9urumKTTdBFtu-xY+RdSptOGomnJGK+sbEVnmDH=ZkBKw@mail.gmail.com>
 <CAPR5oBPtap5Q7DUbNsjy9JxLOp82nEOnj5WA=amas1OqVot-Ew@mail.gmail.com>
Message-ID: <CAPKmR9uhuC5L9RUK3MsMrzgNezTgmHsZ6MWwaud1bcxRje0=ww@mail.gmail.com>

Hi Craig,
Thanks for the feedback! Sharing my comments inline.

On Mon, Feb 15, 2021 at 5:53 AM Craig Raw <craigraw at gmail.com> wrote:

> Hi all,
>
> Hugo and I have discussed off-list, and I have two concerns with this
> proposal:
>
> 1. I believe adding the TOKEN and encryption to the exchange adds
> complexity to already notoriously complex multisig, without adding much in
> the way of security.
>

I disagree that this doesn't add security. This proposal was inspired by a
real vulnerability we discovered in the wild while experimenting with HWWs,
and during that process I noticed that there is little in the way of a an
attacker to pull off a MITM attack, where he/she can intercept and tamper
with the multisig configuration file, potentially swapping in their own
XPUBs. This is especially important for remote multisig setups - which is
not common now but I imagine will be a lot more common in the future.

This is because the shared secret (TOKEN) must still be shared securely,
> and if you have established an (off-protocol) secure channel to do this,
> why not just share the actual multisig configuration data directly in that
> channel?


Because multisig is inherently an interactive process. If we can create the
multisig configuration in one shot for everybody, you're correct that this
is not necessary! But the fact that multisig is by nature interactive and
requires a few rounds of communication (since it needs each Signer to
voluntarily share its XPUB before a wallet can be created) makes this
necessary IMO.

If you are able to do so, you retain the advantage of being able to inspect
> the data directly.


Note that some manual inspection is still part of the proposal. But instead
of exclusively relying on manual inspection (which is error-prone, and also
doesn't scale very well for a large number of signers), we strengthen this
process by automating some of the checks and making it harder to tamper
with.


>
> 2. Asking the user to enter the derivation into the Signer also adds (IMO
> unnecessary) complexity to the multisig setup process. A different way of
> doing it, which is specified in the UR crypto-account format linked to
> previously, has the Signer provide as many common derivations (along with
> their xpubs) as it can support for a given BIP44 account number. This has
> the dual advantage of making things simpler for the user (they only have to
> provide an optional account number) and increasing the standardisation on
> common derivation paths. On receiving these derivation/xpub pairs, the
> Coordinator can simply pick the appropriate one.
>

Note that in the updated proposal, I added the option of the Signer
automatically filling in the derivation paths on behalf of the user (and
also should take care not to reuse XPUBs). Perhaps this can be made the
default behavior.

Best,
Hugo


>
> These concerns noted, I agree it's a good idea to have Signers save the
> multisig configuration as proposed, and it would be great to have
> standardisation in hww import and export formats (not just for multisig).
> On that note, I'd love to see greater adoption of the efficient UR2.0
> standard and associated formats for airgapped data transmission using QR
> codes.
>
> Craig
>
>
> On Mon, Feb 15, 2021 at 11:13 AM Hugo Nguyen via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi all,
>> I have updated the proposal based on further feedback. The new spec is
>> included at the bottom.
>>
>> I have also created a public Github PR to make it easier to comment on
>> the text of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .
>>
>> Could someone please let me know what else needs to be done before a BIP
>> number can be assigned?
>>
>>
>> === Quick summary of changes from last update ===
>>
>> 1. Define encryption modes
>>
>> # NO_ENCRYPTION: Encryption is disabled.
>> # STANDARD : the TOKEN is a 64-bit nonce.
>> # EXTENDED : the TOKEN is a 128-bit nonce.
>>
>> 2. Define signature algorithm
>>
>> Follow BIP-0322, legacy format allowed.
>>
>> 3. Multiple TOKENs (optional)
>>
>> Also add an option where the Coordinator can choose to use one common
>> TOKEN for all Signers, or use one per Signer.
>>
>> === End of summary ===
>>
>>
>> Cheers,
>> Hugo
>>
>>
>> <pre>
>>   BIP: To be determined
>>   Layer: Applications
>>   Title: Bitcoin Secure Multisig Setup (BSMS)
>>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at
>> coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <
>> stick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo
>> Novak <rodolfo at coinkite.com>
>>   Comments-Summary: No comments yet.
>>   Comments-URI:
>>   Status: Proposed
>>   Type: Standards Track
>>   Created: 2020-11-10
>>   License: BSD-2-Clause
>> </pre>
>>
>> ==Introduction==
>>
>> ===Abstract===
>>
>> This document proposes a mechanism to set up multisig wallets securely.
>>
>> ===Copyright===
>>
>> This BIP is licensed under the 2-clause BSD license.
>>
>> ===Motivation===
>>
>> The Bitcoin multisig experience has been greatly streamlined under [
>> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174
>> (Partially Signed Bitcoin Transaction)]. However, what is still missing
>> is a standardized process for setting up multisig wallets securely across
>> different vendors.
>>
>> There are a number of concerns when it comes to setting up a multisig
>> wallet:
>>
>> # Whether the multisig configuration, such as Signer membership, script
>> type, derivation paths and number of signatures required, is correct and
>> not tampered with.
>> # Whether Signer persists the multisig configuration in their respective
>> storage, and under what format.
>> # Whether Signer's storage is tamper-proof.
>> # Whether Signer subsequently uses the multisig configuration to generate
>> and verify receive and change addresses.
>>
>> An attacker who can modify the multisig configuration can steal or hold
>> funds to ransom by duping the user into sending funds to the wrong address.
>>
>> This proposal seeks to address concerns #1 and #2: to mitigate the risk
>> of tampering during the initial setup phase, and to define an interoperable
>> multisig configuration format.
>>
>> Concerns #3 and #4 should be handled by Signers and is out of scope of
>> this proposal.
>>
>> ==Specification==
>>
>> ===Prerequisites===
>> This proposal assumes the parties in the multisig support [
>> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
>> BIP-0032], [
>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the
>> descriptor language] and encryption.
>>
>> ===Roles===
>> ====Coordinator====
>>
>> The Coordinator initiates the multisig setup. The Coordinator determines
>> what type of multisig is used and the exact policy script. If encryption is
>> enabled, the Coordinator also distributes a shared secret or shared secrets
>> to the parties involved for secure communication. The Coordinator gathers
>> information from the Signers to generate a descriptor record. The
>> Coordinator distributes the descriptor record back to the Signers.
>>
>> ====Signer====
>>
>> The Signer is a participating member in the multisig. Its
>> responsibilities include providing its key record -- which contains an
>> Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB
>> is included in the descriptor record and persisting the descriptor record
>> in its storage.
>>
>> ===Setup Process===
>>
>> ====Round 1====
>>
>> =====Coordinator=====
>>
>> * The Coordinator creates a multisig wallet creation session. The
>> Coordinator constructs the multisig script and its policy parameters, such
>> as the total number of signers and the required number of signatures
>> (<tt>M</tt> and <tt>N</tt>).
>> * The session should expire after some time period determined by the
>> Coordinator, e.g., 24 hours.
>> * If encryption is enabled, the Coordinator distributes a secret
>> <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the
>> <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the
>> Encryption section below for details on the <tt>TOKEN</tt>, the key
>> derivation function and the encryption scheme. Depending on the use case,
>> the Coordinator can decide whether to share one common <tt>TOKEN</tt> for
>> all Signers, or to have one per Signer.
>> * If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and all
>> the encryption/decryption steps below can be skipped.
>>
>> =====Signer=====
>>
>> * The Signer initiates a new secure multisig setup session by setting the
>> <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the
>> <tt>TOKEN</tt>. The Signer can keep the session open until a different
>> value for the <tt>TOKEN</tt> is set.
>> * The Signer generates a key record by prompting the user for a multisig
>> derivation path and retrieves the XPUB at that derivation path. Optionally,
>> the Signer can choose a path on behalf of the user. If the Signer chooses
>> the path, it should try to avoid reusing XPUBs for different wallets.
>> * The first line in the record must be the <tt>TOKEN</tt>. The second
>> line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key
>> origin information, written in the descriptor-defined format, i.e.:
>> <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The third line
>> must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by
>> using the private key associated with the XPUB to sign the first two
>> lines.  The signature should follow [
>> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki
>> BIP-0322], legacy format accepted. Finally, the Signer encrypts the entire
>> record with <tt>ENCRYPTION_KEY</tt>.
>>
>> ====Round 2====
>>
>> =====Coordinator=====
>>
>> * The Coordinator gathers key records from all participating Signers.
>> Abort the setup if the wallet setup session has expired.
>> * For each key record, the Coordinator decrypts it using
>> <tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included
>> <tt>SIG</tt> is valid given the <tt>KEY</tt>.
>> * If all key records look good, the Coordinator fills in all necessary
>> information to generate a descriptor record, which is simply the descriptor
>> string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has
>> [
>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums
>> BECH32 encoding].
>> * The Coordinator encrypts this descriptor record with
>> <tt>ENCRYPTION_KEY</tt>.
>> * The Coordinator sends the encrypted descriptor record to all
>> participating Signers.
>>
>> =====Signer=====
>>
>> * The Signer imports the descriptor record, decrypts it using the
>> <tt>ENCRYPTION_KEY</tt> derived from the open session.
>> * The Signer calculates and verifies the descriptor?s <tt>CHECKSUM</tt>.
>> Abort the setup if the <tt>CHECKSUM</tt> is incorrect.
>> * The Signer checks whether one of the <tt>KEY</tt>s in the descriptor
>> belongs to it, using path and fingerprint information included in the
>> descriptor. The check must perform an exact match on the <tt>KEY</tt>s, and
>> not using shortcuts such as matching fingerprints (which is trivial to
>> spoof). Abort the setup if it doesn?t detect its own <tt>KEY</tt>.
>> * For confirmation, the Signer must display to the user the
>> <tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and
>> <tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to
>> prevent a <tt>KEY</tt> insertion attack. All participating Signers should
>> be able to display the same confirmation.
>> * If all checks pass, the Signer persists the descriptor record in its
>> storage.
>> * The Signer can choose to further restrict post-XPUB derivation paths,
>> such as to those defined in [
>> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki BIP-0044].
>> * The Signer should subsequently use the descriptor to generate and
>> verify receive and change addresses.
>>
>> This completes the setup.
>>
>> ===Encryption===
>>
>> ====The Token====
>> We define three modes of encryption.
>>
>> # <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.
>> Encryption is disabled.
>> # <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.
>> # <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.
>>
>> The <tt>TOKEN</tt> can be converted to one of these formats:
>> * A mnemonic phrase using [
>> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki BIP-0039]
>> word list (6 words in <tt>STANDARD</tt> mode, 12 words in <tt>EXTENDED</tt>
>> mode)
>> * A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in
>> <tt>EXTENDED</tt> mode)
>> * A QR code
>> * Other formats
>>
>> The flexibility in the data format allows each Signer to customize the
>> User Experience based on its respective capabilities.
>>
>> ====Key Derivation====
>> The key derivation function is [https://tools.ietf.org/html/rfc2898
>> PBKDF2], with PRF = SHA512. Specifically:
>>
>> <tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>
>>
>> Whereas:
>>
>> * PRF = <tt>SHA512</tt>
>> * Password = <tt>"No SPOF"</tt>
>> * Salt = <tt>TOKEN</tt>
>> * c = <tt>2048</tt>
>> * dkLen = <tt>256</tt>
>> * DK = Derived <tt>ENCRYPTION_KEY</tt>
>>
>> ====Encryption Scheme====
>> The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR
>> mode].
>>
>> ==QR Codes==
>> For signers that use QR codes to transmit data, key and descriptor
>> records can be converted to QR codes, following [
>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md
>> the BCR standard].
>>
>> Also refer to [
>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md
>> UR Type Definition for BIP44 Accounts] and [
>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md
>> UR Type Definition for Bitcoin Output Descriptors] for more details.
>>
>> ==Security==
>>
>> This proposal introduces two layers of protection. The first one is a
>> temporary, secret token, used to encrypt the two rounds of communication
>> between the Signer and the Coordinator. The second one is through the
>> descriptor checksum and visual inspection of the descriptor itself.
>>
>> The token is only needed during the setup phase, and can be safely thrown
>> away afterwards. The token does not guarantee that the Signer membership
>> set is not modified, since that depends on the overall security of all
>> parties in the setup, but it can make it significantly harder for an
>> attacker to do so.
>>
>> There are three ways an attacker can modify the membership set: by
>> changing an existing member, by removing an existing member, or by adding a
>> new member.
>>
>> For the first two methods, one of the Signers will be able to detect that
>> its membership has been changed or removed, and reject the final
>> descriptor. Thus, it is vital that all participating Signers check that
>> their membership is intact in the descriptor. Even one Signer failing to
>> check for its membership means that the setup could be compromised.
>>
>> For the third type of attack, the descriptor checksum and visual
>> inspection of the descriptor itself are the only way to guard against
>> malicious members from being inserted into the set.
>>
>> ==Acknowledgement==
>>
>> Special thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and
>> others for their feedback on the specification.
>>
>> ==References==
>>
>> Original mailing list thread:
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/5675d8e2/attachment-0001.html>

From hugo at nunchuk.io  Mon Feb 15 16:45:10 2021
From: hugo at nunchuk.io (Hugo Nguyen)
Date: Mon, 15 Feb 2021 08:45:10 -0800
Subject: [bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup
In-Reply-To: <CAPKmR9uhuC5L9RUK3MsMrzgNezTgmHsZ6MWwaud1bcxRje0=ww@mail.gmail.com>
References: <CAPKmR9uyY70MhmVCh=C9DeyF2Tyxibux1E_bLPo00aW_h+OjLw@mail.gmail.com>
 <CAPKmR9urumKTTdBFtu-xY+RdSptOGomnJGK+sbEVnmDH=ZkBKw@mail.gmail.com>
 <CAPR5oBPtap5Q7DUbNsjy9JxLOp82nEOnj5WA=amas1OqVot-Ew@mail.gmail.com>
 <CAPKmR9uhuC5L9RUK3MsMrzgNezTgmHsZ6MWwaud1bcxRje0=ww@mail.gmail.com>
Message-ID: <CAPKmR9t1rswnzthbMa-Ja329ZPW1f7wK2exk_worwEGXOguoLA@mail.gmail.com>

I would also like to add 2 notes for those who are concerned about the
potential complexity that comes with encryption - which is understandable:

1. As mentioned elsewhere in the thread, I've made the encryption aspect
entirely optional. In scenarios where encryption is an overkill -- such as
when you're setting things up under an environment you control 100% -- you
can turn encryption off, and things are unchanged from the way they are
now. The "session" would be unencrypted and XPUBs and descriptor records
are simply shared in plaintext.

2. Multisig setup is a one-time operation! After the multisig wallet has
been set up and registered with the Signers, you don't have to worry about
sharing XPUBs ever again (not even in PSBTs which is an additional benefit
of the stateful registration approach). I believe this one-time cost is
worth it if the amount of funds you are securing are significant, e.g., few
millions of dollars or even billions of dollars. But it's important that we
have this extra level of security if necessary IMHO.

Best,
Hugo

On Mon, Feb 15, 2021 at 6:19 AM Hugo Nguyen <hugo at nunchuk.io> wrote:

> Hi Craig,
> Thanks for the feedback! Sharing my comments inline.
>
> On Mon, Feb 15, 2021 at 5:53 AM Craig Raw <craigraw at gmail.com> wrote:
>
>> Hi all,
>>
>> Hugo and I have discussed off-list, and I have two concerns with this
>> proposal:
>>
>> 1. I believe adding the TOKEN and encryption to the exchange adds
>> complexity to already notoriously complex multisig, without adding much in
>> the way of security.
>>
>
> I disagree that this doesn't add security. This proposal was inspired by a
> real vulnerability we discovered in the wild while experimenting with HWWs,
> and during that process I noticed that there is little in the way of a an
> attacker to pull off a MITM attack, where he/she can intercept and tamper
> with the multisig configuration file, potentially swapping in their own
> XPUBs. This is especially important for remote multisig setups - which is
> not common now but I imagine will be a lot more common in the future.
>
> This is because the shared secret (TOKEN) must still be shared securely,
>> and if you have established an (off-protocol) secure channel to do this,
>> why not just share the actual multisig configuration data directly in that
>> channel?
>
>
> Because multisig is inherently an interactive process. If we can create
> the multisig configuration in one shot for everybody, you're correct that
> this is not necessary! But the fact that multisig is by nature interactive
> and requires a few rounds of communication (since it needs each Signer to
> voluntarily share its XPUB before a wallet can be created) makes this
> necessary IMO.
>
> If you are able to do so, you retain the advantage of being able to
>> inspect the data directly.
>
>
> Note that some manual inspection is still part of the proposal. But
> instead of exclusively relying on manual inspection (which is error-prone,
> and also doesn't scale very well for a large number of signers), we
> strengthen this process by automating some of the checks and making it
> harder to tamper with.
>
>
>>
>> 2. Asking the user to enter the derivation into the Signer also adds (IMO
>> unnecessary) complexity to the multisig setup process. A different way of
>> doing it, which is specified in the UR crypto-account format linked to
>> previously, has the Signer provide as many common derivations (along with
>> their xpubs) as it can support for a given BIP44 account number. This has
>> the dual advantage of making things simpler for the user (they only have to
>> provide an optional account number) and increasing the standardisation on
>> common derivation paths. On receiving these derivation/xpub pairs, the
>> Coordinator can simply pick the appropriate one.
>>
>
> Note that in the updated proposal, I added the option of the Signer
> automatically filling in the derivation paths on behalf of the user (and
> also should take care not to reuse XPUBs). Perhaps this can be made the
> default behavior.
>
> Best,
> Hugo
>
>
>>
>> These concerns noted, I agree it's a good idea to have Signers save the
>> multisig configuration as proposed, and it would be great to have
>> standardisation in hww import and export formats (not just for multisig).
>> On that note, I'd love to see greater adoption of the efficient UR2.0
>> standard and associated formats for airgapped data transmission using QR
>> codes.
>>
>> Craig
>>
>>
>> On Mon, Feb 15, 2021 at 11:13 AM Hugo Nguyen via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> Hi all,
>>> I have updated the proposal based on further feedback. The new spec is
>>> included at the bottom.
>>>
>>> I have also created a public Github PR to make it easier to comment on
>>> the text of the spec itself: https://github.com/nunchuk-io/bips/pull/1 .
>>>
>>> Could someone please let me know what else needs to be done before a BIP
>>> number can be assigned?
>>>
>>>
>>> === Quick summary of changes from last update ===
>>>
>>> 1. Define encryption modes
>>>
>>> # NO_ENCRYPTION: Encryption is disabled.
>>> # STANDARD : the TOKEN is a 64-bit nonce.
>>> # EXTENDED : the TOKEN is a 128-bit nonce.
>>>
>>> 2. Define signature algorithm
>>>
>>> Follow BIP-0322, legacy format allowed.
>>>
>>> 3. Multiple TOKENs (optional)
>>>
>>> Also add an option where the Coordinator can choose to use one common
>>> TOKEN for all Signers, or use one per Signer.
>>>
>>> === End of summary ===
>>>
>>>
>>> Cheers,
>>> Hugo
>>>
>>>
>>> <pre>
>>>   BIP: To be determined
>>>   Layer: Applications
>>>   Title: Bitcoin Secure Multisig Setup (BSMS)
>>>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at
>>> coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Pavol Rusnak <
>>> stick at satoshilabs.com>, Aaron Chen <aarondongchen at gmail.com>,
>>> Rodolfo Novak <rodolfo at coinkite.com>
>>>   Comments-Summary: No comments yet.
>>>   Comments-URI:
>>>   Status: Proposed
>>>   Type: Standards Track
>>>   Created: 2020-11-10
>>>   License: BSD-2-Clause
>>> </pre>
>>>
>>> ==Introduction==
>>>
>>> ===Abstract===
>>>
>>> This document proposes a mechanism to set up multisig wallets securely.
>>>
>>> ===Copyright===
>>>
>>> This BIP is licensed under the 2-clause BSD license.
>>>
>>> ===Motivation===
>>>
>>> The Bitcoin multisig experience has been greatly streamlined under [
>>> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174
>>> (Partially Signed Bitcoin Transaction)]. However, what is still missing
>>> is a standardized process for setting up multisig wallets securely across
>>> different vendors.
>>>
>>> There are a number of concerns when it comes to setting up a multisig
>>> wallet:
>>>
>>> # Whether the multisig configuration, such as Signer membership, script
>>> type, derivation paths and number of signatures required, is correct and
>>> not tampered with.
>>> # Whether Signer persists the multisig configuration in their respective
>>> storage, and under what format.
>>> # Whether Signer's storage is tamper-proof.
>>> # Whether Signer subsequently uses the multisig configuration to
>>> generate and verify receive and change addresses.
>>>
>>> An attacker who can modify the multisig configuration can steal or hold
>>> funds to ransom by duping the user into sending funds to the wrong address.
>>>
>>> This proposal seeks to address concerns #1 and #2: to mitigate the risk
>>> of tampering during the initial setup phase, and to define an interoperable
>>> multisig configuration format.
>>>
>>> Concerns #3 and #4 should be handled by Signers and is out of scope of
>>> this proposal.
>>>
>>> ==Specification==
>>>
>>> ===Prerequisites===
>>> This proposal assumes the parties in the multisig support [
>>> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
>>> BIP-0032], [
>>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the
>>> descriptor language] and encryption.
>>>
>>> ===Roles===
>>> ====Coordinator====
>>>
>>> The Coordinator initiates the multisig setup. The Coordinator determines
>>> what type of multisig is used and the exact policy script. If encryption is
>>> enabled, the Coordinator also distributes a shared secret or shared secrets
>>> to the parties involved for secure communication. The Coordinator gathers
>>> information from the Signers to generate a descriptor record. The
>>> Coordinator distributes the descriptor record back to the Signers.
>>>
>>> ====Signer====
>>>
>>> The Signer is a participating member in the multisig. Its
>>> responsibilities include providing its key record -- which contains an
>>> Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB
>>> is included in the descriptor record and persisting the descriptor record
>>> in its storage.
>>>
>>> ===Setup Process===
>>>
>>> ====Round 1====
>>>
>>> =====Coordinator=====
>>>
>>> * The Coordinator creates a multisig wallet creation session. The
>>> Coordinator constructs the multisig script and its policy parameters, such
>>> as the total number of signers and the required number of signatures
>>> (<tt>M</tt> and <tt>N</tt>).
>>> * The session should expire after some time period determined by the
>>> Coordinator, e.g., 24 hours.
>>> * If encryption is enabled, the Coordinator distributes a secret
>>> <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the
>>> <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the
>>> Encryption section below for details on the <tt>TOKEN</tt>, the key
>>> derivation function and the encryption scheme. Depending on the use case,
>>> the Coordinator can decide whether to share one common <tt>TOKEN</tt> for
>>> all Signers, or to have one per Signer.
>>> * If encryption is disabled, <tt>TOKEN</tt> is set to <tt>0</tt>, and
>>> all the encryption/decryption steps below can be skipped.
>>>
>>> =====Signer=====
>>>
>>> * The Signer initiates a new secure multisig setup session by setting
>>> the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the
>>> <tt>TOKEN</tt>. The Signer can keep the session open until a different
>>> value for the <tt>TOKEN</tt> is set.
>>> * The Signer generates a key record by prompting the user for a multisig
>>> derivation path and retrieves the XPUB at that derivation path. Optionally,
>>> the Signer can choose a path on behalf of the user. If the Signer chooses
>>> the path, it should try to avoid reusing XPUBs for different wallets.
>>> * The first line in the record must be the <tt>TOKEN</tt>. The second
>>> line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key
>>> origin information, written in the descriptor-defined format, i.e.:
>>> <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The third line
>>> must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by
>>> using the private key associated with the XPUB to sign the first two
>>> lines.  The signature should follow [
>>> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki
>>> BIP-0322], legacy format accepted. Finally, the Signer encrypts the entire
>>> record with <tt>ENCRYPTION_KEY</tt>.
>>>
>>> ====Round 2====
>>>
>>> =====Coordinator=====
>>>
>>> * The Coordinator gathers key records from all participating Signers.
>>> Abort the setup if the wallet setup session has expired.
>>> * For each key record, the Coordinator decrypts it using
>>> <tt>ENCRYPTION_KEY</tt>. The Coordinator verifies that the included
>>> <tt>SIG</tt> is valid given the <tt>KEY</tt>.
>>> * If all key records look good, the Coordinator fills in all necessary
>>> information to generate a descriptor record, which is simply the descriptor
>>> string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has
>>> [
>>> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums
>>> BECH32 encoding].
>>> * The Coordinator encrypts this descriptor record with
>>> <tt>ENCRYPTION_KEY</tt>.
>>> * The Coordinator sends the encrypted descriptor record to all
>>> participating Signers.
>>>
>>> =====Signer=====
>>>
>>> * The Signer imports the descriptor record, decrypts it using the
>>> <tt>ENCRYPTION_KEY</tt> derived from the open session.
>>> * The Signer calculates and verifies the descriptor?s <tt>CHECKSUM</tt>.
>>> Abort the setup if the <tt>CHECKSUM</tt> is incorrect.
>>> * The Signer checks whether one of the <tt>KEY</tt>s in the descriptor
>>> belongs to it, using path and fingerprint information included in the
>>> descriptor. The check must perform an exact match on the <tt>KEY</tt>s, and
>>> not using shortcuts such as matching fingerprints (which is trivial to
>>> spoof). Abort the setup if it doesn?t detect its own <tt>KEY</tt>.
>>> * For confirmation, the Signer must display to the user the
>>> <tt>CHECKSUM</tt>, plus other configurations, such as <tt>M</tt> and
>>> <tt>N</tt>. The total number of Signers, <tt>N</tt>, is important to
>>> prevent a <tt>KEY</tt> insertion attack. All participating Signers should
>>> be able to display the same confirmation.
>>> * If all checks pass, the Signer persists the descriptor record in its
>>> storage.
>>> * The Signer can choose to further restrict post-XPUB derivation paths,
>>> such as to those defined in [
>>> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
>>> BIP-0044].
>>> * The Signer should subsequently use the descriptor to generate and
>>> verify receive and change addresses.
>>>
>>> This completes the setup.
>>>
>>> ===Encryption===
>>>
>>> ====The Token====
>>> We define three modes of encryption.
>>>
>>> # <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.
>>> Encryption is disabled.
>>> # <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.
>>> # <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 128-bit nonce.
>>>
>>> The <tt>TOKEN</tt> can be converted to one of these formats:
>>> * A mnemonic phrase using [
>>> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
>>> BIP-0039] word list (6 words in <tt>STANDARD</tt> mode, 12 words in
>>> <tt>EXTENDED</tt> mode)
>>> * A decimal number (20 digits in <tt>STANDARD</tt> mode, 40 digits in
>>> <tt>EXTENDED</tt> mode)
>>> * A QR code
>>> * Other formats
>>>
>>> The flexibility in the data format allows each Signer to customize the
>>> User Experience based on its respective capabilities.
>>>
>>> ====Key Derivation====
>>> The key derivation function is [https://tools.ietf.org/html/rfc2898
>>> PBKDF2], with PRF = SHA512. Specifically:
>>>
>>> <tt>DK = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>
>>>
>>> Whereas:
>>>
>>> * PRF = <tt>SHA512</tt>
>>> * Password = <tt>"No SPOF"</tt>
>>> * Salt = <tt>TOKEN</tt>
>>> * c = <tt>2048</tt>
>>> * dkLen = <tt>256</tt>
>>> * DK = Derived <tt>ENCRYPTION_KEY</tt>
>>>
>>> ====Encryption Scheme====
>>> The encryption scheme is [https://tools.ietf.org/html/rfc3686 AES, CTR
>>> mode].
>>>
>>> ==QR Codes==
>>> For signers that use QR codes to transmit data, key and descriptor
>>> records can be converted to QR codes, following [
>>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md
>>> the BCR standard].
>>>
>>> Also refer to [
>>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md
>>> UR Type Definition for BIP44 Accounts] and [
>>> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md
>>> UR Type Definition for Bitcoin Output Descriptors] for more details.
>>>
>>> ==Security==
>>>
>>> This proposal introduces two layers of protection. The first one is a
>>> temporary, secret token, used to encrypt the two rounds of communication
>>> between the Signer and the Coordinator. The second one is through the
>>> descriptor checksum and visual inspection of the descriptor itself.
>>>
>>> The token is only needed during the setup phase, and can be safely
>>> thrown away afterwards. The token does not guarantee that the Signer
>>> membership set is not modified, since that depends on the overall security
>>> of all parties in the setup, but it can make it significantly harder for an
>>> attacker to do so.
>>>
>>> There are three ways an attacker can modify the membership set: by
>>> changing an existing member, by removing an existing member, or by adding a
>>> new member.
>>>
>>> For the first two methods, one of the Signers will be able to detect
>>> that its membership has been changed or removed, and reject the final
>>> descriptor. Thus, it is vital that all participating Signers check that
>>> their membership is intact in the descriptor. Even one Signer failing to
>>> check for its membership means that the setup could be compromised.
>>>
>>> For the third type of attack, the descriptor checksum and visual
>>> inspection of the descriptor itself are the only way to guard against
>>> malicious members from being inserted into the set.
>>>
>>> ==Acknowledgement==
>>>
>>> Special thanks to Dmitry Petukhov, Christopher Allen, Craig Raw and
>>> others for their feedback on the specification.
>>>
>>> ==References==
>>>
>>> Original mailing list thread:
>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html
>>>
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210215/e33af953/attachment-0001.html>

From michaelfolkson at gmail.com  Wed Feb 17 12:51:41 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Wed, 17 Feb 2021 12:51:41 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
Message-ID: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>

Yesterday (February 16th) we held a second meeting on Taproot
activation on IRC which again was open to all. Despite what appeared
to be majority support for LOT=false over LOT=true in the first
meeting I (and others) thought the arguments had not been explored in
depth and that we should have a follow up meeting almost entirely
focused on whether LOT (lockinontimeout) should be set to true or
false.

The meeting was announced here:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html

In that mailing list post I outlined the arguments for LOT=true (T1 to
T6) and arguments for LOT=false (F1 to F6) in their strongest form I
could. David Harding responded with an additional argument for
LOT=false (F7) here:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html

These meetings are very challenging given they are open to all, you
don?t know who will attend and you don?t know most people?s views in
advance. I tried to give time for both the LOT=true arguments and the
LOT=false arguments to be discussed as I knew there was support for
both. We only tried evaluating which had more support and which had
more strong opposition towards the end of the meeting.

The conversation log is here:
http://gnusha.org/taproot-activation/2021-02-16.log

(If you are so inclined you can watch a video of the meeting here.
Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
https://www.youtube.com/watch?v=vpl5q1ovMLM)

A summary of the meeting was provided by Luke Dashjr on Mastodon here:
https://bitcoinhackers.org/@lukedashjr/105742918779234566

Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
did manage to come to consensus on everything but LockinOnTimeout.

Activation height range: 693504-745920

MASF threshold: 1815/2016 blocks (90%)

Keep in mind only ~100 people showed for the meetings, hardly
representative of the entire community.

So, these details remain JUST a proposal for now.

It seems inevitable that there won't be consensus on LOT.

Everyone will have to choose for himself. :/

Personally I agree with most of this. I agree that there wasn?t
overwhelming consensus for either LOT=true or LOT=false. However, from
my perspective there was clearly more strong opposition (what would
usually be deemed a NACK in Bitcoin Core review terminology) from
Bitcoin Core contributors, Lightning developers and other community
members against LOT=true than there was for LOT=false. Andrew Chow
tried to summarize views from the meeting in this analysis:
https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c

I am also aware of other current and previous Bitcoin Core
contributors and Lightning developers who didn?t attend the meeting in
person who are opposed to LOT=true. I don?t want to put them in the
spotlight for no reason but if you go through the conversation logs of
not only the meeting but the weeks of discussion prior to this meeting
you will see their views evaluated on the ##taproot-activation
channel. In addition, on taprootactivation.com some mining pools
expressed a preference for lot=false though I don?t know how strong
that preference was.

I am only one voice but it is my current assessment that if we are to
attempt to finalize Taproot activation parameters and propose them to
the community at this time our only option is to propose LOT=false.
Any further delay appears to me counterproductive in our collective
aim to get the Taproot soft fork activated as early as possible.

Obviously others are free to disagree with that assessment and
continue discussions but personally I will be attempting to avoid
those discussions unless prominent new information comes to light or
various specific individuals change their minds.

Next week we are planning a code review of the Bitcoin Core PR #19573
which was initially delayed because of this LOT discussion. As I?ve
said previously that will be loosely following the format of the
Bitcoin Core PR review club and will be lower level and more
technical. That is planned for Tuesday February 23rd at 19:00 UTC on
the IRC channel ##taproot-activation.

Thanks to the meeting participants (and those who joined the
discussion on the channel prior and post the meeting) for engaging
productively and in good faith.

-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

From belcher at riseup.net  Wed Feb 17 22:27:28 2021
From: belcher at riseup.net (Chris Belcher)
Date: Wed, 17 Feb 2021 22:27:28 +0000
Subject: [bitcoin-dev] Teleport Transactions: A CoinSwap implementation for
	Bitcoin
Message-ID: <5fcab0fc-6135-7587-7b3c-a314ccd099ca@riseup.net>

Suppose Alice has bitcoins and wants to send them with maximal privacy,
so she creates a special kind of transaction. For anyone looking at the
blockchain her transaction appears completely normal with her coins
seemingly going from bitcoin address A to address B. But in reality her
coins end up in address Z which is entirely unconnected to either A or B.

Now imagine another user, Carol, who isn't too bothered by privacy and
sends her bitcoin using a regular wallet. But because Carol's
transaction looks exactly the same as Alice's, anybody analyzing the
blockchain must now deal with the possibility that Carol's transaction
actually sent her coins to a totally unconnected address. So Carol's
privacy is improved even though she didn't change her behaviour, and
perhaps had never even heard of this software.

In a world where advertisers, social media and other companies want to
collect all of Alice's and Carol's data, such privacy improvement would
be incredibly valuable. And also the doubt added to every transaction
would greatly boost the fungibility of bitcoin and so make it a better
form of money.

This undetectable privacy can be developed today by implementing
CoinSwap. The software could be standalone as a kind of bitcoin mixing
app, but it could also be a library that existing wallets can implement
allowing their users to send Bitcoin transactions with much greater privacy.

For the last few months I've been working on implementing this project.
Here it is:


https://github.com/bitcoin-teleport/teleport-transactions/


The project can create multi-transaction CoinSwaps (intended to avoid
amount correlation), and multi-hop CoinSwaps (intended to stop one
single maker being able to unmix a taker's CoinSwap).

Just for fun I created a 5-hop CoinSwap on testnet. Here are the
transaction IDs of each funding transaction. Each hop has 3 individual
transactions.

taker's outgoing txes:
https://blockstream.info/testnet/tx/f45349bd279bea20b8b218300f8e2416abf28f3858470ad8c5eb2f6cd5ec10a9
https://blockstream.info/testnet/tx/40ea5c9e478b66fa3f615c2b8d3accfd69308443d90a5353de669767cb02c51f
https://blockstream.info/testnet/tx/8fe245e9c433127af4df8ff8853650808e3281fed7de6bfda62066a3fd3ad36e

maker[0] funding txes:
https://blockstream.info/testnet/tx/3d9b879866ad136f9fe6e80599e1b97d610b6330be3ab4aa7df4161fce1e41d4,
https://blockstream.info/testnet/tx/fa11e778d135be28b4e35498fc668c5aba7c70dcc43334b39e7488bd1259e8be,
https://blockstream.info/testnet/tx/a7713452bab711c09be83a8c630fb91127771ed99cf15b528eacd28b00ba6b20,

maker[1] funding txes:
https://blockstream.info/testnet/tx/245e1e87d83a4bef06ceb8933c758137ee2f7ba7aa66800ebb7103707d5de5f7,
https://blockstream.info/testnet/tx/15727b91e09a80634587f6210bdcba8808b93e4a780c55dd113ee85314db45c4,
https://blockstream.info/testnet/tx/94e4e4e9e8fc2012158ed068145c8b883c295b37f5b3b6cba7a21c229d4da103,

maker[2] funding txes:
https://blockstream.info/testnet/tx/1384d58e534543e22e4f23a367728bff12177ee9af01b036c397cfca9bbe2eb8,
https://blockstream.info/testnet/tx/eff3b1367f403c13927ddcb01c6d3c5c0d46076f7cb4419f8a18d6b62d884540,
https://blockstream.info/testnet/tx/617c52caec2f7f17f3ebd1cab80233cdc1b414591f1cc49affbd828ffec10278,

maker[3] funding txes (also taker's incoming txes):
https://blockstream.info/testnet/tx/8fde61974a4e0801ae5b76b620e2effd6c837310c1bd76d738216451ae1226e3,
https://blockstream.info/testnet/tx/6491b85ef73a8f88e276a9b0f951c09e0367851a83aa49ffee8f8ad095f50de2,
https://blockstream.info/testnet/tx/363b6803b7e3ed45472277448ce9938e3e73167a67762d6a9ac621243b8db019,


The so-called taker organized the whole thing. They decided what the
CoinSwap amount should be (0.05 tBTC in this case), decided which makers
to route over depending on their fees, how many transactions and makers
there would be. The only thing the makers do is follow the protocol and
collect their CoinSwap fees, they are not meant to even know their
position in the route. Because the taker chose how much bitcoin to
coinswap and when, they paid a fee to each maker to provide an incentive
for the makers to keep the software running.

To a passive observer of the blockchain a single-hop CoinSwap is as
private as a multi-hop, so I suspect in practice most users will just
create 2-hop CoinSwaps.

The project is still a work in progress. All kinds of attacks are
possible right now, so the it shouldn't be used on mainnet with real
money yet. Also right now the CoinSwap addresses created by the project
appear as 2-of-2 multisignature addresses, but the plan is to use
ECDSA-2P which will make them look the same as regular single-signature
addresses which is needed before the thing massively improves privacy
and fungibility.

CoinSwap is the next generation of bitcoin on-chain privacy tech. It
improves on CoinJoin because it breaks the transaction graph, and even
improves the privacy of people who don't use it. CoinSwap also uses less
block space for the same privacy and therefore is cheaper in miner fees.

Links:
* Design document:
https://gist.github.com/chris-belcher/9144bd57a91c194e332fb5ca371d0964
* Discussion: `##coinswap` IRC channel on the freenode network

From arielluaces at gmail.com  Thu Feb 18 05:43:10 2021
From: arielluaces at gmail.com (Ariel Lorenzo-Luaces)
Date: Wed, 17 Feb 2021 21:43:10 -0800
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
References: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
Message-ID: <8231ddff-aaa4-4ee0-b25f-40ba9a540aab@gmail.com>

Something what strikes me about the conversation is the emotion surrounding the letters UASF.

It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is "any activation that is not a MASF".

A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.

Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.

The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).

I say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.

The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.

Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.
The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.
How is that strictly safer or more coordinated?

I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.

Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.

An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.

Cheers
Ariel Lorenzo-Luaces


On Feb 17, 2021, 7:05 AM, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Yesterday (February 16th) we held a second meeting on Taproot
>activation on IRC which again was open to all. Despite what appeared
>to be majority support for LOT=false over LOT=true in the first
>meeting I (and others) thought the arguments had not been explored in
>depth and that we should have a follow up meeting almost entirely
>focused on whether LOT (lockinontimeout) should be set to true or
>false.
>
>The meeting was announced here:
>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>
>In that mailing list post I outlined the arguments for LOT=true (T1 to
>T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>could. David Harding responded with an additional argument for
>LOT=false (F7) here:
>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>
>These meetings are very challenging given they are open to all, you
>don?t know who will attend and you don?t know most people?s views in
>advance. I tried to give time for both the LOT=true arguments and the
>LOT=false arguments to be discussed as I knew there was support for
>both. We only tried evaluating which had more support and which had
>more strong opposition towards the end of the meeting.
>
>The conversation log is here:
>http://gnusha.org/taproot-activation/2021-02-16.log
>
>(If you are so inclined you can watch a video of the meeting here.
>Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>https://www.youtube.com/watch?v=vpl5q1ovMLM)
>
>A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>https://bitcoinhackers.org/@lukedashjr/105742918779234566
>
>Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>did manage to come to consensus on everything but LockinOnTimeout.
>
>Activation height range: 693504-745920
>
>MASF threshold: 1815/2016 blocks (90%)
>
>Keep in mind only ~100 people showed for the meetings, hardly
>representative of the entire community.
>
>So, these details remain JUST a proposal for now.
>
>It seems inevitable that there won't be consensus on LOT.
>
>Everyone will have to choose for himself. :/
>
>Personally I agree with most of this. I agree that there wasn?t
>overwhelming consensus for either LOT=true or LOT=false. However, from
>my perspective there was clearly more strong opposition (what would
>usually be deemed a NACK in Bitcoin Core review terminology) from
>Bitcoin Core contributors, Lightning developers and other community
>members against LOT=true than there was for LOT=false. Andrew Chow
>tried to summarize views from the meeting in this analysis:
>https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>
>I am also aware of other current and previous Bitcoin Core
>contributors and Lightning developers who didn?t attend the meeting in
>person who are opposed to LOT=true. I don?t want to put them in the
>spotlight for no reason but if you go through the conversation logs of
>not only the meeting but the weeks of discussion prior to this meeting
>you will see their views evaluated on the ##taproot-activation
>channel. In addition, on taprootactivation.com some mining pools
>expressed a preference for lot=false though I don?t know how strong
>that preference was.
>
>I am only one voice but it is my current assessment that if we are to
>attempt to finalize Taproot activation parameters and propose them to
>the community at this time our only option is to propose LOT=false.
>Any further delay appears to me counterproductive in our collective
>aim to get the Taproot soft fork activated as early as possible.
>
>Obviously others are free to disagree with that assessment and
>continue discussions but personally I will be attempting to avoid
>those discussions unless prominent new information comes to light or
>various specific individuals change their minds.
>
>Next week we are planning a code review of the Bitcoin Core PR #19573
>which was initially delayed because of this LOT discussion. As I?ve
>said previously that will be loosely following the format of the
>Bitcoin Core PR review club and will be lower level and more
>technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>the IRC channel ##taproot-activation.
>
>Thanks to the meeting participants (and those who joined the
>discussion on the channel prior and post the meeting) for engaging
>productively and in good faith.
>
>-- 
>Michael Folkson
>Email: michaelfolkson at gmail.com
>Keybase: michaelfolkson
>PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210217/689747ce/attachment-0001.html>

From michaelfolkson at gmail.com  Thu Feb 18 11:01:29 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Thu, 18 Feb 2021 11:01:29 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <8231ddff-aaa4-4ee0-b25f-40ba9a540aab@gmail.com>
References: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
 <8231ddff-aaa4-4ee0-b25f-40ba9a540aab@gmail.com>
Message-ID: <CAFvNmHSiZhJQ455=RkUVU00ZqagimjGPg_fhC-8oJV=WwM_o=Q@mail.gmail.com>

Thanks for your response Ariel. It would be useful if you responded to
specific points I have made in the mailing list post or at least quote
these ephemeral "people" you speak of. I don't know if you're responding to
conversation on the IRC channel or on social media etc.

> The argument comes from a naive assumption that users MUST upgrade to the
choice that is submitted into code. But in fact this isn't true and some
voices in this discussion need to be more humble about what users must or
must not run.

I personally have never made this assumption. Of course users aren't forced
to run any particular software version, quite the opposite. Defaults set in
software versions matter though as many users won't change them.

> Does no one realize that it is a very possible outcome that if LOT=true
is released there may be only a handful of people that begin running it
while everyone else delays their upgrade (with the very good reason of not
getting involved in politics) and a year later those handful of people just
become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?

It is a possible outcome but the likely outcome is that miners activate
Taproot before LOT is even relevant. I think it is prudent to prepare for
the unlikely but possible outcome that miners fail to activate and hence
have this discussion now rather than be unprepared for that eventuality. If
LOT is set to false in a software release there is the possibility (T2 in
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)
of individuals or a proportion of the community changing LOT to true. In
that sense setting LOT=false in a software release appears to be no more
safe than LOT=true.

> The result: a wasted year of waiting and a minority of people who didn't
want to be lenient with miners by default.

There is the (unlikely but possible) possibility of a wasted year if LOT is
set to false and miners fail to activate. I'm not convinced by this
perception that LOT=true is antagonistic to miners. I actually think it
offers them clarity on what will happen over a year time period and removes
the need for coordinated or uncoordinated community UASF efforts on top of
LOT=false.

> An activation mechanism is a consensus change like any other change, can
be contentious like any other change, and we must resolve it like any other
change. Otherwise we risk arriving at the darkest timeline.

I don't know what you are recommending here to avoid "this darkest
timeline". Open discussions have occurred and are continuing and in my
mailing list post that you responded to **I recommended we propose
LOT=false be set in protocol implementations such as Bitcoin Core**. I do
think this apocalyptic language isn't particularly helpful. In an open
consensus system discussion is healthy, we should prepare for bad or worst
case scenarios in advance and doing so is not antagonistic or destructive.
Mining pools have pledged support for Taproot but we don't build secure
systems based on pledges of support, we build them to minimize trust in any
human actors. We can be grateful that people like Alejandro have worked
hard on taprootactivation.com (and this effort has informed the discussion)
without taking pledges of support as cast iron guarantees.

TL;DR It sounds like you agree with my recommendation to set LOT=false in
protocol implementations in my email :)




On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com>
wrote:

> Something what strikes me about the conversation is the emotion
> surrounding the letters UASF.
>
> It appears as if people discuss UASF as if it's a massive tidal wave of
> support that is inevitable, like we saw during segwit activation. But the
> actual definition is "any activation that is not a MASF".
>
> A UASF can consist of a single node, ten nodes, a thousand, half of all
> nodes, all business' nodes, or even all the non mining nodes. On another
> dimension it can have zero mining support, 51% support, 49% support, or any
> support right up against a miner activation threshold.
>
> Hell a UASF doesn't even need code or even a single node running as long
> as it exists as a possibility in people's minds.
>
> The only thing a UASF doesn't have is miner support above an agreed
> activation threshold (some number above %51).
>
> I say this because it strikes me when people say that they are for
> LOT=true with the logic that since a UASF is guaranteed to happen then it's
> better to just make it default from the beginning. Words like coordination
> and safety are sometimes sprinkled into the argument.
>
> The argument comes from a naive assumption that users MUST upgrade to the
> choice that is submitted into code. But in fact this isn't true and some
> voices in this discussion need to be more humble about what users must or
> must not run.
>
> Does no one realize that it is a very possible outcome that if LOT=true is
> released there may be only a handful of people that begin running it while
> everyone else delays their upgrade (with the very good reason of not
> getting involved in politics) and a year later those handful of people just
> become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or
> attracting a minority of miners, activating, and forking off into a
> minority fork. Then a lot=false could be started that ends up activating
> the feature now that the stubborn option has ran its course.
> The result: a wasted year of waiting and a minority of people who didn't
> want to be lenient with miners by default. The chains could be called
> BitcoinLenient and BitcoinStubborn.
> How is that strictly safer or more coordinated?
>
> I may be in the minority, or maybe a silent majority, or maybe a majority
> that just hasn't considered this as a choice but honestly if there is
> contention about whether we're going to be stubborn or lenient with miners
> for Taproot and in the future then I prefer to just not activate anything
> at all. I'm fine for calling bitcoin ossified, accepting that segwit is
> Bitcoin's last network upgrade. Taproot is amazing but no new feature is
> worth a network split down the middle.
>
> Maybe in 10 or 20 years, when other blockchains implement features like
> Taproot and many more, we will become envious enough to put aside our
> differences on how to behave towards miners and finally activate Taproot.
>
> An activation mechanism is a consensus change like any other change, can
> be contentious like any other change, and we must resolve it like any other
> change. Otherwise we risk arriving at the darkest timeline.
>
> Cheers
> Ariel Lorenzo-Luaces
> On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Yesterday (February 16th) we held a second meeting on Taproot
>> activation on IRC which again was open to all. Despite what appeared
>> to be majority support for LOT=false over LOT=true in the first
>> meeting I (and others) thought the arguments had not been explored in
>> depth and that we should have a follow up meeting almost entirely
>> focused on whether LOT (lockinontimeout) should be set to true or
>> false.
>>
>> The meeting was announced here:
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>>
>> In that mailing list post I outlined the arguments for LOT=true (T1 to
>> T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>> could. David Harding responded with an additional argument for
>> LOT=false (F7) here:
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>>
>> These meetings are very challenging given they are open to all, you
>> don?t know who will attend and you don?t know most people?s views in
>> advance. I tried to give time for both the LOT=true arguments and the
>> LOT=false arguments to be discussed as I knew there was support for
>> both. We only tried evaluating which had more support and which had
>> more strong opposition towards the end of the meeting.
>>
>> The conversation log is here:
>> http://gnusha.org/taproot-activation/2021-02-16.log
>>
>> (If you are so inclined you can watch a video of the meeting here.
>> Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>> https://www.youtube.com/watch?v=vpl5q1ovMLM)
>>
>> A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>> https://bitcoinhackers.org/@lukedashjr/105742918779234566
>>
>> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>> did manage to come to consensus on everything but LockinOnTimeout.
>>
>> Activation height range: 693504-745920
>>
>> MASF threshold: 1815/2016 blocks (90%)
>>
>> Keep in mind only ~100 people showed for the meetings, hardly
>> representative of the entire community.
>>
>> So, these details remain JUST a proposal for now.
>>
>> It seems inevitable that there won't be consensus on LOT.
>>
>> Everyone will have to choose for himself. :/
>>
>> Personally I agree with most of this. I agree that there wasn?t
>> overwhelming consensus for either LOT=true or LOT=false. However, from
>> my perspective there was clearly more strong opposition (what would
>> usually be deemed a NACK in Bitcoin Core review terminology) from
>> Bitcoin Core contributors, Lightning developers and other community
>> members against LOT=true than there was for LOT=false. Andrew Chow
>> tried to summarize views from the meeting in this analysis:
>> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>>
>> I am also aware of other current and previous Bitcoin Core
>> contributors and Lightning developers who didn?t attend the meeting in
>> person who are opposed to LOT=true. I don?t want to put them in the
>> spotlight for no reason but if you go through the conversation logs of
>> not only the meeting but the weeks of discussion prior to this meeting
>> you will see their views evaluated on the ##taproot-activation
>> channel. In addition, on taprootactivation.com some mining pools
>> expressed a preference for lot=false though I don?t know how strong
>> that preference was.
>>
>> I am only one voice but it is my current assessment that if we are to
>> attempt to finalize Taproot activation parameters and propose them to
>> the community at this time our only option is to propose LOT=false.
>> Any further delay appears to me counterproductive in our collective
>> aim to get the Taproot soft fork activated as early as possible.
>>
>> Obviously others are free to disagree with that assessment and
>> continue discussions but personally I will be attempting to avoid
>> those discussions unless prominent new information comes to light or
>> various specific individuals change their minds.
>>
>> Next week we are planning a code review of the Bitcoin Core PR #19573
>> which was initially delayed because of this LOT discussion. As I?ve
>> said previously that will be loosely following the format of the
>> Bitcoin Core PR review club and will be lower level and more
>> technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>> the IRC channel ##taproot-activation.
>>
>> Thanks to the meeting participants (and those who joined the
>> discussion on the channel prior and post the meeting) for engaging
>> productively and in good faith.
>>
>>

-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/e09ce26a/attachment-0001.html>

From samson.mow at gmail.com  Thu Feb 18 11:11:54 2021
From: samson.mow at gmail.com (Samson Mow)
Date: Thu, 18 Feb 2021 03:11:54 -0800
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CAFvNmHSiZhJQ455=RkUVU00ZqagimjGPg_fhC-8oJV=WwM_o=Q@mail.gmail.com>
References: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
 <8231ddff-aaa4-4ee0-b25f-40ba9a540aab@gmail.com>
 <CAFvNmHSiZhJQ455=RkUVU00ZqagimjGPg_fhC-8oJV=WwM_o=Q@mail.gmail.com>
Message-ID: <CAAWeQ5fH+pbEx32uEc4gs_arQC7o+GS+HpVeAZGsKr8i6ewL5w@mail.gmail.com>

 "An activation mechanism is a consensus change like any other change, can
be contentious like any other change, and we must resolve it like any other
change. Otherwise we risk arriving at the darkest timeline."

Who's we here?

Release both and let the network decide.


On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Thanks for your response Ariel. It would be useful if you responded to
> specific points I have made in the mailing list post or at least quote
> these ephemeral "people" you speak of. I don't know if you're responding to
> conversation on the IRC channel or on social media etc.
>
> > The argument comes from a naive assumption that users MUST upgrade to
> the choice that is submitted into code. But in fact this isn't true and
> some voices in this discussion need to be more humble about what users must
> or must not run.
>
> I personally have never made this assumption. Of course users aren't
> forced to run any particular software version, quite the opposite. Defaults
> set in software versions matter though as many users won't change them.
>
> > Does no one realize that it is a very possible outcome that if LOT=true
> is released there may be only a handful of people that begin running it
> while everyone else delays their upgrade (with the very good reason of not
> getting involved in politics) and a year later those handful of people just
> become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?
>
> It is a possible outcome but the likely outcome is that miners activate
> Taproot before LOT is even relevant. I think it is prudent to prepare for
> the unlikely but possible outcome that miners fail to activate and hence
> have this discussion now rather than be unprepared for that eventuality. If
> LOT is set to false in a software release there is the possibility (T2 in
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)
> of individuals or a proportion of the community changing LOT to true. In
> that sense setting LOT=false in a software release appears to be no more
> safe than LOT=true.
>
> > The result: a wasted year of waiting and a minority of people who didn't
> want to be lenient with miners by default.
>
> There is the (unlikely but possible) possibility of a wasted year if LOT
> is set to false and miners fail to activate. I'm not convinced by this
> perception that LOT=true is antagonistic to miners. I actually think it
> offers them clarity on what will happen over a year time period and removes
> the need for coordinated or uncoordinated community UASF efforts on top of
> LOT=false.
>
> > An activation mechanism is a consensus change like any other change, can
> be contentious like any other change, and we must resolve it like any other
> change. Otherwise we risk arriving at the darkest timeline.
>
> I don't know what you are recommending here to avoid "this darkest
> timeline". Open discussions have occurred and are continuing and in my
> mailing list post that you responded to **I recommended we propose
> LOT=false be set in protocol implementations such as Bitcoin Core**. I do
> think this apocalyptic language isn't particularly helpful. In an open
> consensus system discussion is healthy, we should prepare for bad or worst
> case scenarios in advance and doing so is not antagonistic or destructive.
> Mining pools have pledged support for Taproot but we don't build secure
> systems based on pledges of support, we build them to minimize trust in any
> human actors. We can be grateful that people like Alejandro have worked
> hard on taprootactivation.com (and this effort has informed the
> discussion) without taking pledges of support as cast iron guarantees.
>
> TL;DR It sounds like you agree with my recommendation to set LOT=false in
> protocol implementations in my email :)
>
>
>
>
> On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <
> arielluaces at gmail.com> wrote:
>
>> Something what strikes me about the conversation is the emotion
>> surrounding the letters UASF.
>>
>> It appears as if people discuss UASF as if it's a massive tidal wave of
>> support that is inevitable, like we saw during segwit activation. But the
>> actual definition is "any activation that is not a MASF".
>>
>> A UASF can consist of a single node, ten nodes, a thousand, half of all
>> nodes, all business' nodes, or even all the non mining nodes. On another
>> dimension it can have zero mining support, 51% support, 49% support, or any
>> support right up against a miner activation threshold.
>>
>> Hell a UASF doesn't even need code or even a single node running as long
>> as it exists as a possibility in people's minds.
>>
>> The only thing a UASF doesn't have is miner support above an agreed
>> activation threshold (some number above %51).
>>
>> I say this because it strikes me when people say that they are for
>> LOT=true with the logic that since a UASF is guaranteed to happen then it's
>> better to just make it default from the beginning. Words like coordination
>> and safety are sometimes sprinkled into the argument.
>>
>> The argument comes from a naive assumption that users MUST upgrade to the
>> choice that is submitted into code. But in fact this isn't true and some
>> voices in this discussion need to be more humble about what users must or
>> must not run.
>>
>> Does no one realize that it is a very possible outcome that if LOT=true
>> is released there may be only a handful of people that begin running it
>> while everyone else delays their upgrade (with the very good reason of not
>> getting involved in politics) and a year later those handful of people just
>> become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or
>> attracting a minority of miners, activating, and forking off into a
>> minority fork. Then a lot=false could be started that ends up activating
>> the feature now that the stubborn option has ran its course.
>> The result: a wasted year of waiting and a minority of people who didn't
>> want to be lenient with miners by default. The chains could be called
>> BitcoinLenient and BitcoinStubborn.
>> How is that strictly safer or more coordinated?
>>
>> I may be in the minority, or maybe a silent majority, or maybe a majority
>> that just hasn't considered this as a choice but honestly if there is
>> contention about whether we're going to be stubborn or lenient with miners
>> for Taproot and in the future then I prefer to just not activate anything
>> at all. I'm fine for calling bitcoin ossified, accepting that segwit is
>> Bitcoin's last network upgrade. Taproot is amazing but no new feature is
>> worth a network split down the middle.
>>
>> Maybe in 10 or 20 years, when other blockchains implement features like
>> Taproot and many more, we will become envious enough to put aside our
>> differences on how to behave towards miners and finally activate Taproot.
>>
>> An activation mechanism is a consensus change like any other change, can
>> be contentious like any other change, and we must resolve it like any other
>> change. Otherwise we risk arriving at the darkest timeline.
>>
>> Cheers
>> Ariel Lorenzo-Luaces
>> On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>
>>> Yesterday (February 16th) we held a second meeting on Taproot
>>> activation on IRC which again was open to all. Despite what appeared
>>> to be majority support for LOT=false over LOT=true in the first
>>> meeting I (and others) thought the arguments had not been explored in
>>> depth and that we should have a follow up meeting almost entirely
>>> focused on whether LOT (lockinontimeout) should be set to true or
>>> false.
>>>
>>> The meeting was announced here:
>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>>>
>>> In that mailing list post I outlined the arguments for LOT=true (T1 to
>>> T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>>> could. David Harding responded with an additional argument for
>>> LOT=false (F7) here:
>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>>>
>>> These meetings are very challenging given they are open to all, you
>>> don?t know who will attend and you don?t know most people?s views in
>>> advance. I tried to give time for both the LOT=true arguments and the
>>> LOT=false arguments to be discussed as I knew there was support for
>>> both. We only tried evaluating which had more support and which had
>>> more strong opposition towards the end of the meeting.
>>>
>>> The conversation log is here:
>>> http://gnusha.org/taproot-activation/2021-02-16.log
>>>
>>> (If you are so inclined you can watch a video of the meeting here.
>>> Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>>> https://www.youtube.com/watch?v=vpl5q1ovMLM)
>>>
>>> A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>>> https://bitcoinhackers.org/@lukedashjr/105742918779234566
>>>
>>> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>>> did manage to come to consensus on everything but LockinOnTimeout.
>>>
>>> Activation height range: 693504-745920
>>>
>>> MASF threshold: 1815/2016 blocks (90%)
>>>
>>> Keep in mind only ~100 people showed for the meetings, hardly
>>> representative of the entire community.
>>>
>>> So, these details remain JUST a proposal for now.
>>>
>>> It seems inevitable that there won't be consensus on LOT.
>>>
>>> Everyone will have to choose for himself. :/
>>>
>>> Personally I agree with most of this. I agree that there wasn?t
>>> overwhelming consensus for either LOT=true or LOT=false. However, from
>>> my perspective there was clearly more strong opposition (what would
>>> usually be deemed a NACK in Bitcoin Core review terminology) from
>>> Bitcoin Core contributors, Lightning developers and other community
>>> members against LOT=true than there was for LOT=false. Andrew Chow
>>> tried to summarize views from the meeting in this analysis:
>>> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>>>
>>> I am also aware of other current and previous Bitcoin Core
>>> contributors and Lightning developers who didn?t attend the meeting in
>>> person who are opposed to LOT=true. I don?t want to put them in the
>>> spotlight for no reason but if you go through the conversation logs of
>>> not only the meeting but the weeks of discussion prior to this meeting
>>> you will see their views evaluated on the ##taproot-activation
>>> channel. In addition, on taprootactivation.com some mining pools
>>> expressed a preference for lot=false though I don?t know how strong
>>> that preference was.
>>>
>>> I am only one voice but it is my current assessment that if we are to
>>> attempt to finalize Taproot activation parameters and propose them to
>>> the community at this time our only option is to propose LOT=false.
>>> Any further delay appears to me counterproductive in our collective
>>> aim to get the Taproot soft fork activated as early as possible.
>>>
>>> Obviously others are free to disagree with that assessment and
>>> continue discussions but personally I will be attempting to avoid
>>> those discussions unless prominent new information comes to light or
>>> various specific individuals change their minds.
>>>
>>> Next week we are planning a code review of the Bitcoin Core PR #19573
>>> which was initially delayed because of this LOT discussion. As I?ve
>>> said previously that will be loosely following the format of the
>>> Bitcoin Core PR review club and will be lower level and more
>>> technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>>> the IRC channel ##taproot-activation.
>>>
>>> Thanks to the meeting participants (and those who joined the
>>> discussion on the channel prior and post the meeting) for engaging
>>> productively and in good faith.
>>>
>>>
>
> --
> Michael Folkson
> Email: michaelfolkson at gmail.com
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/ff91bcfb/attachment-0001.html>

From ZmnSCPxj at protonmail.com  Thu Feb 18 11:52:05 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Thu, 18 Feb 2021 11:52:05 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <CAAWeQ5fH+pbEx32uEc4gs_arQC7o+GS+HpVeAZGsKr8i6ewL5w@mail.gmail.com>
References: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
 <8231ddff-aaa4-4ee0-b25f-40ba9a540aab@gmail.com>
 <CAFvNmHSiZhJQ455=RkUVU00ZqagimjGPg_fhC-8oJV=WwM_o=Q@mail.gmail.com>
 <CAAWeQ5fH+pbEx32uEc4gs_arQC7o+GS+HpVeAZGsKr8i6ewL5w@mail.gmail.com>
Message-ID: <vMdhML4Coj8h6x3LS3kWrMXcINOLKmWOyVzElVr5TZ-nf4FkzDjmQsSaoyYcxL_f74rEI3NUX7JAmXprBSxqOzGi7ZNRhwluA_5f1oqa5oM=@protonmail.com>

Good morning all,

> "An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
>
> Who's we here?
>
> Release both and let the network decide.

A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.

This assures everyone that neither choice is being forced on users, and instead what is being forced on users, is for users to make that choice themselves.

Regards,
ZmnSCPxj

>
> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.
> >
> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.
> >
> > I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.
> >
> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?
> >
> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in?https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.
> >
> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default.
> >
> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.
> >
> > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> >
> > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have occurred and are continuing and in my mailing list post that you responded to **I recommended we propose LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools?have pledged support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize trust in any human actors. We can be grateful that people like Alejandro have worked hard on taprootactivation.com (and this effort has informed the discussion) without taking pledges of support as cast iron guarantees.
> >
> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)
> >
> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com> wrote:
> >
> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.
> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.
> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).
> > > I say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.
> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.
> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.
> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.
> > > How is that strictly safer or more coordinated?
> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.
> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.
> > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> > > Cheers
> > > Ariel Lorenzo-Luaces
> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > >
> > > > Yesterday (February 16th) we held a second meeting on Taproot
> > > > activation on IRC which again was open to all. Despite what appeared
> > > > to be majority support for LOT=false over LOT=true in the first
> > > > meeting I (and others) thought the arguments had not been explored in
> > > > depth and that we should have a follow up meeting almost entirely
> > > > focused on whether LOT (lockinontimeout) should be set to true or
> > > > false.
> > > >
> > > > The meeting was announced here:
> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> > > >
> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
> > > > could. David Harding responded with an additional argument for
> > > > LOT=false (F7) here:
> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> > > >
> > > > These meetings are very challenging given they are open to all, you
> > > > don?t know who will attend and you don?t know most people?s views in
> > > > advance. I tried to give time for both the LOT=true arguments and the
> > > > LOT=false arguments to be discussed as I knew there was support for
> > > > both. We only tried evaluating which had more support and which had
> > > > more strong opposition towards the end of the meeting.
> > > >
> > > > The conversation log is here:
> > > > http://gnusha.org/taproot-activation/2021-02-16.log
> > > >
> > > > (If you are so inclined you can watch a video of the meeting here.
> > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)
> > > >
> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
> > > >
> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
> > > > did manage to come to consensus on everything but LockinOnTimeout.
> > > >
> > > > Activation height range: 693504-745920
> > > >
> > > > MASF threshold: 1815/2016 blocks (90%)
> > > >
> > > > Keep in mind only ~100 people showed for the meetings, hardly
> > > > representative of the entire community.
> > > >
> > > > So, these details remain JUST a proposal for now.
> > > >
> > > > It seems inevitable that there won't be consensus on LOT.
> > > >
> > > > Everyone will have to choose for himself. :/
> > > >
> > > > Personally I agree with most of this. I agree that there wasn?t
> > > > overwhelming consensus for either LOT=true or LOT=false. However, from
> > > > my perspective there was clearly more strong opposition (what would
> > > > usually be deemed a NACK in Bitcoin Core review terminology) from
> > > > Bitcoin Core contributors, Lightning developers and other community
> > > > members against LOT=true than there was for LOT=false. Andrew Chow
> > > > tried to summarize views from the meeting in this analysis:
> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> > > >
> > > > I am also aware of other current and previous Bitcoin Core
> > > > contributors and Lightning developers who didn?t attend the meeting in
> > > > person who are opposed to LOT=true. I don?t want to put them in the
> > > > spotlight for no reason but if you go through the conversation logs of
> > > > not only the meeting but the weeks of discussion prior to this meeting
> > > > you will see their views evaluated on the ##taproot-activation
> > > > channel. In addition, on taprootactivation.com some mining pools
> > > > expressed a preference for lot=false though I don?t know how strong
> > > > that preference was.
> > > >
> > > > I am only one voice but it is my current assessment that if we are to
> > > > attempt to finalize Taproot activation parameters and propose them to
> > > > the community at this time our only option is to propose LOT=false.
> > > > Any further delay appears to me counterproductive in our collective
> > > > aim to get the Taproot soft fork activated as early as possible.
> > > >
> > > > Obviously others are free to disagree with that assessment and
> > > > continue discussions but personally I will be attempting to avoid
> > > > those discussions unless prominent new information comes to light or
> > > > various specific individuals change their minds.
> > > >
> > > > Next week we are planning a code review of the Bitcoin Core PR #19573
> > > > which was initially delayed because of this LOT discussion. As I?ve
> > > > said previously that will be loosely following the format of the
> > > > Bitcoin Core PR review club and will be lower level and more
> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
> > > > the IRC channel ##taproot-activation.
> > > >
> > > > Thanks to the meeting participants (and those who joined the
> > > > discussion on the channel prior and post the meeting) for engaging
> > > > productively and in good faith.
> >
> > --
> > Michael Folkson
> > Email:?michaelfolkson at gmail.com
> > Keybase: michaelfolkson
> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev



From michaelfolkson at gmail.com  Thu Feb 18 12:20:14 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Thu, 18 Feb 2021 12:20:14 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <vMdhML4Coj8h6x3LS3kWrMXcINOLKmWOyVzElVr5TZ-nf4FkzDjmQsSaoyYcxL_f74rEI3NUX7JAmXprBSxqOzGi7ZNRhwluA_5f1oqa5oM=@protonmail.com>
References: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
 <8231ddff-aaa4-4ee0-b25f-40ba9a540aab@gmail.com>
 <CAFvNmHSiZhJQ455=RkUVU00ZqagimjGPg_fhC-8oJV=WwM_o=Q@mail.gmail.com>
 <CAAWeQ5fH+pbEx32uEc4gs_arQC7o+GS+HpVeAZGsKr8i6ewL5w@mail.gmail.com>
 <vMdhML4Coj8h6x3LS3kWrMXcINOLKmWOyVzElVr5TZ-nf4FkzDjmQsSaoyYcxL_f74rEI3NUX7JAmXprBSxqOzGi7ZNRhwluA_5f1oqa5oM=@protonmail.com>
Message-ID: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>

Right, that is one option. Personally I would prefer a Bitcoin Core release
sets LOT=false (based on what I have heard from Bitcoin Core contributors)
and a community effort releases a version with LOT=true. I don't think
users should be forced to choose something they may have no context on
before they are allowed to use Bitcoin Core.

My current understanding is that roasbeef is planning to set LOT=false on
btcd (an alternative protocol implementation to Bitcoin Core) and Luke
Dashjr hasn't yet decided on Bitcoin Knots.



On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:

> Good morning all,
>
> > "An activation mechanism is a consensus change like any other change,
> can be contentious like any other change, and we must resolve it like any
> other change. Otherwise we risk arriving at the darkest timeline."
> >
> > Who's we here?
> >
> > Release both and let the network decide.
>
> A thing that could be done, without mandating either LOT=true or
> LOT=false, would be to have a release that requires a `taprootlot=1` or
> `taprootlot=0` and refuses to start if the parameter is not set.
>
> This assures everyone that neither choice is being forced on users, and
> instead what is being forced on users, is for users to make that choice
> themselves.
>
> Regards,
> ZmnSCPxj
>
> >
> > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > > Thanks for your response Ariel. It would be useful if you responded to
> specific points I have made in the mailing list post or at least quote
> these ephemeral "people" you speak of. I don't know if you're responding to
> conversation on the IRC channel or on social media etc.
> > >
> > > > The argument comes from a naive assumption that users MUST upgrade
> to the choice that is submitted into code. But in fact this isn't true and
> some voices in this discussion need to be more humble about what users must
> or must not run.
> > >
> > > I personally have never made this assumption. Of course users aren't
> forced to run any particular software version, quite the opposite. Defaults
> set in software versions matter though as many users won't change them.
> > >
> > > > Does no one realize that it is a very possible outcome that if
> LOT=true is released there may be only a handful of people that begin
> running it while everyone else delays their upgrade (with the very good
> reason of not getting involved in politics) and a year later those handful
> of people just become stuck at the moment of MUST_SIGNAL, unable to mine
> new blocks?
> > >
> > > It is a possible outcome but the likely outcome is that miners
> activate Taproot before LOT is even relevant. I think it is prudent to
> prepare for the unlikely but possible outcome that miners fail to activate
> and hence have this discussion now rather than be unprepared for that
> eventuality. If LOT is set to false in a software release there is the
> possibility (T2 in
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)
> of individuals or a proportion of the community changing LOT to true. In
> that sense setting LOT=false in a software release appears to be no more
> safe than LOT=true.
> > >
> > > > The result: a wasted year of waiting and a minority of people who
> didn't want to be lenient with miners by default.
> > >
> > > There is the (unlikely but possible) possibility of a wasted year if
> LOT is set to false and miners fail to activate. I'm not convinced by this
> perception that LOT=true is antagonistic to miners. I actually think it
> offers them clarity on what will happen over a year time period and removes
> the need for coordinated or uncoordinated community UASF efforts on top of
> LOT=false.
> > >
> > > > An activation mechanism is a consensus change like any other change,
> can be contentious like any other change, and we must resolve it like any
> other change. Otherwise we risk arriving at the darkest timeline.
> > >
> > > I don't know what you are recommending here to avoid "this darkest
> timeline". Open discussions have occurred and are continuing and in my
> mailing list post that you responded to **I recommended we propose
> LOT=false be set in protocol implementations such as Bitcoin Core**. I do
> think this apocalyptic language isn't particularly helpful. In an open
> consensus system discussion is healthy, we should prepare for bad or worst
> case scenarios in advance and doing so is not antagonistic or destructive.
> Mining pools have pledged support for Taproot but we don't build secure
> systems based on pledges of support, we build them to minimize trust in any
> human actors. We can be grateful that people like Alejandro have worked
> hard on taprootactivation.com (and this effort has informed the
> discussion) without taking pledges of support as cast iron guarantees.
> > >
> > > TL;DR It sounds like you agree with my recommendation to set LOT=false
> in protocol implementations in my email :)
> > >
> > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <
> arielluaces at gmail.com> wrote:
> > >
> > > > Something what strikes me about the conversation is the emotion
> surrounding the letters UASF.
> > > > It appears as if people discuss UASF as if it's a massive tidal wave
> of support that is inevitable, like we saw during segwit activation. But
> the actual definition is "any activation that is not a MASF".
> > > > A UASF can consist of a single node, ten nodes, a thousand, half of
> all nodes, all business' nodes, or even all the non mining nodes. On
> another dimension it can have zero mining support, 51% support, 49%
> support, or any support right up against a miner activation threshold.
> > > > Hell a UASF doesn't even need code or even a single node running as
> long as it exists as a possibility in people's minds.
> > > > The only thing a UASF doesn't have is miner support above an agreed
> activation threshold (some number above %51).
> > > > I say this because it strikes me when people say that they are for
> LOT=true with the logic that since a UASF is guaranteed to happen then it's
> better to just make it default from the beginning. Words like coordination
> and safety are sometimes sprinkled into the argument.
> > > > The argument comes from a naive assumption that users MUST upgrade
> to the choice that is submitted into code. But in fact this isn't true and
> some voices in this discussion need to be more humble about what users must
> or must not run.
> > > > Does no one realize that it is a very possible outcome that if
> LOT=true is released there may be only a handful of people that begin
> running it while everyone else delays their upgrade (with the very good
> reason of not getting involved in politics) and a year later those handful
> of people just become stuck at the moment of MUST_SIGNAL, unable to mine
> new blocks? Or attracting a minority of miners, activating, and forking off
> into a minority fork. Then a lot=false could be started that ends up
> activating the feature now that the stubborn option has ran its course.
> > > > The result: a wasted year of waiting and a minority of people who
> didn't want to be lenient with miners by default. The chains could be
> called BitcoinLenient and BitcoinStubborn.
> > > > How is that strictly safer or more coordinated?
> > > > I may be in the minority, or maybe a silent majority, or maybe a
> majority that just hasn't considered this as a choice but honestly if there
> is contention about whether we're going to be stubborn or lenient with
> miners for Taproot and in the future then I prefer to just not activate
> anything at all. I'm fine for calling bitcoin ossified, accepting that
> segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
> feature is worth a network split down the middle.
> > > > Maybe in 10 or 20 years, when other blockchains implement features
> like Taproot and many more, we will become envious enough to put aside our
> differences on how to behave towards miners and finally activate Taproot.
> > > > An activation mechanism is a consensus change like any other change,
> can be contentious like any other change, and we must resolve it like any
> other change. Otherwise we risk arriving at the darkest timeline.
> > > > Cheers
> > > > Ariel Lorenzo-Luaces
> > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> > > >
> > > > > Yesterday (February 16th) we held a second meeting on Taproot
> > > > > activation on IRC which again was open to all. Despite what
> appeared
> > > > > to be majority support for LOT=false over LOT=true in the first
> > > > > meeting I (and others) thought the arguments had not been explored
> in
> > > > > depth and that we should have a follow up meeting almost entirely
> > > > > focused on whether LOT (lockinontimeout) should be set to true or
> > > > > false.
> > > > >
> > > > > The meeting was announced here:
> > > > >
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> > > > >
> > > > > In that mailing list post I outlined the arguments for LOT=true
> (T1 to
> > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form
> I
> > > > > could. David Harding responded with an additional argument for
> > > > > LOT=false (F7) here:
> > > > >
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> > > > >
> > > > > These meetings are very challenging given they are open to all, you
> > > > > don?t know who will attend and you don?t know most people?s views
> in
> > > > > advance. I tried to give time for both the LOT=true arguments and
> the
> > > > > LOT=false arguments to be discussed as I knew there was support for
> > > > > both. We only tried evaluating which had more support and which had
> > > > > more strong opposition towards the end of the meeting.
> > > > >
> > > > > The conversation log is here:
> > > > > http://gnusha.org/taproot-activation/2021-02-16.log
> > > > >
> > > > > (If you are so inclined you can watch a video of the meeting here.
> > > > > Thanks to the YouTube account ?Bitcoin? for setting up the
> livestream:
> > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)
> > > > >
> > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon
> here:
> > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
> > > > >
> > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive,
> but we
> > > > > did manage to come to consensus on everything but LockinOnTimeout.
> > > > >
> > > > > Activation height range: 693504-745920
> > > > >
> > > > > MASF threshold: 1815/2016 blocks (90%)
> > > > >
> > > > > Keep in mind only ~100 people showed for the meetings, hardly
> > > > > representative of the entire community.
> > > > >
> > > > > So, these details remain JUST a proposal for now.
> > > > >
> > > > > It seems inevitable that there won't be consensus on LOT.
> > > > >
> > > > > Everyone will have to choose for himself. :/
> > > > >
> > > > > Personally I agree with most of this. I agree that there wasn?t
> > > > > overwhelming consensus for either LOT=true or LOT=false. However,
> from
> > > > > my perspective there was clearly more strong opposition (what would
> > > > > usually be deemed a NACK in Bitcoin Core review terminology) from
> > > > > Bitcoin Core contributors, Lightning developers and other community
> > > > > members against LOT=true than there was for LOT=false. Andrew Chow
> > > > > tried to summarize views from the meeting in this analysis:
> > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> > > > >
> > > > > I am also aware of other current and previous Bitcoin Core
> > > > > contributors and Lightning developers who didn?t attend the
> meeting in
> > > > > person who are opposed to LOT=true. I don?t want to put them in the
> > > > > spotlight for no reason but if you go through the conversation
> logs of
> > > > > not only the meeting but the weeks of discussion prior to this
> meeting
> > > > > you will see their views evaluated on the ##taproot-activation
> > > > > channel. In addition, on taprootactivation.com some mining pools
> > > > > expressed a preference for lot=false though I don?t know how strong
> > > > > that preference was.
> > > > >
> > > > > I am only one voice but it is my current assessment that if we are
> to
> > > > > attempt to finalize Taproot activation parameters and propose them
> to
> > > > > the community at this time our only option is to propose LOT=false.
> > > > > Any further delay appears to me counterproductive in our collective
> > > > > aim to get the Taproot soft fork activated as early as possible.
> > > > >
> > > > > Obviously others are free to disagree with that assessment and
> > > > > continue discussions but personally I will be attempting to avoid
> > > > > those discussions unless prominent new information comes to light
> or
> > > > > various specific individuals change their minds.
> > > > >
> > > > > Next week we are planning a code review of the Bitcoin Core PR
> #19573
> > > > > which was initially delayed because of this LOT discussion. As I?ve
> > > > > said previously that will be loosely following the format of the
> > > > > Bitcoin Core PR review club and will be lower level and more
> > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC
> on
> > > > > the IRC channel ##taproot-activation.
> > > > >
> > > > > Thanks to the meeting participants (and those who joined the
> > > > > discussion on the channel prior and post the meeting) for engaging
> > > > > productively and in good faith.
> > >
> > > --
> > > Michael Folkson
> > > Email: michaelfolkson at gmail.com
> > > Keybase: michaelfolkson
> > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> > > _______________________________________________
> > > bitcoin-dev mailing list
> > > bitcoin-dev at lists.linuxfoundation.org
> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>

-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/726417ad/attachment-0001.html>

From lf-lists at mattcorallo.com  Thu Feb 18 13:59:34 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 18 Feb 2021 08:59:34 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <vMdhML4Coj8h6x3LS3kWrMXcINOLKmWOyVzElVr5TZ-nf4FkzDjmQsSaoyYcxL_f74rEI3NUX7JAmXprBSxqOzGi7ZNRhwluA_5f1oqa5oM=@protonmail.com>
References: <vMdhML4Coj8h6x3LS3kWrMXcINOLKmWOyVzElVr5TZ-nf4FkzDjmQsSaoyYcxL_f74rEI3NUX7JAmXprBSxqOzGi7ZNRhwluA_5f1oqa5oM=@protonmail.com>
Message-ID: <9C0CDEF6-E77D-496F-BC38-8A0241B5E046@mattcorallo.com>

Bitcoin is a consensus system. Please let?s not jump to (or even consider) options that discourage consensus. We all laughed at (and later academics researched showed severe deficiencies in) Bitcoin XT?s ?emergent consensus? nonsense, why should we start doing things along that line in Bitcoin?

(Resent from the correct email)

Matt

> On Feb 18, 2021, at 06:52, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?Good morning all,
> 
>> "An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
>> 
>> Who's we here?
>> 
>> Release both and let the network decide.
> 
> A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
> 
> This assures everyone that neither choice is being forced on users, and instead what is being forced on users, is for users to make that choice themselves.
> 
> Regards,
> ZmnSCPxj
> 
>> 
>>> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> 
>>> Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.
>>> 
>>>> The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.
>>> 
>>> I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.
>>> 
>>>> Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?
>>> 
>>> It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.
>>> 
>>>> The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default.
>>> 
>>> There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.
>>> 
>>>> An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>>> 
>>> I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have occurred and are continuing and in my mailing list post that you responded to **I recommended we propose LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize trust in any human actors. We can be grateful that people like Alejandro have worked hard on taprootactivation.com (and this effort has informed the discussion) without taking pledges of support as cast iron guarantees.
>>> 
>>> TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)
>>> 
>>>> On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com> wrote:
>>> 
>>>> Something what strikes me about the conversation is the emotion surrounding the letters UASF.
>>>> It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
>>>> A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.
>>>> Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.
>>>> The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).
>>>> I say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.
>>>> The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.
>>>> Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.
>>>> The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.
>>>> How is that strictly safer or more coordinated?
>>>> I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.
>>>> Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.
>>>> An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>>>> Cheers
>>>> Ariel Lorenzo-Luaces
>>>> On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>> 
>>>>> Yesterday (February 16th) we held a second meeting on Taproot
>>>>> activation on IRC which again was open to all. Despite what appeared
>>>>> to be majority support for LOT=false over LOT=true in the first
>>>>> meeting I (and others) thought the arguments had not been explored in
>>>>> depth and that we should have a follow up meeting almost entirely
>>>>> focused on whether LOT (lockinontimeout) should be set to true or
>>>>> false.
>>>>> 
>>>>> The meeting was announced here:
>>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>>>>> 
>>>>> In that mailing list post I outlined the arguments for LOT=true (T1 to
>>>>> T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>>>>> could. David Harding responded with an additional argument for
>>>>> LOT=false (F7) here:
>>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>>>>> 
>>>>> These meetings are very challenging given they are open to all, you
>>>>> don?t know who will attend and you don?t know most people?s views in
>>>>> advance. I tried to give time for both the LOT=true arguments and the
>>>>> LOT=false arguments to be discussed as I knew there was support for
>>>>> both. We only tried evaluating which had more support and which had
>>>>> more strong opposition towards the end of the meeting.
>>>>> 
>>>>> The conversation log is here:
>>>>> http://gnusha.org/taproot-activation/2021-02-16.log
>>>>> 
>>>>> (If you are so inclined you can watch a video of the meeting here.
>>>>> Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>>>>> https://www.youtube.com/watch?v=vpl5q1ovMLM)
>>>>> 
>>>>> A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>>>>> https://bitcoinhackers.org/@lukedashjr/105742918779234566
>>>>> 
>>>>> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>>>>> did manage to come to consensus on everything but LockinOnTimeout.
>>>>> 
>>>>> Activation height range: 693504-745920
>>>>> 
>>>>> MASF threshold: 1815/2016 blocks (90%)
>>>>> 
>>>>> Keep in mind only ~100 people showed for the meetings, hardly
>>>>> representative of the entire community.
>>>>> 
>>>>> So, these details remain JUST a proposal for now.
>>>>> 
>>>>> It seems inevitable that there won't be consensus on LOT.
>>>>> 
>>>>> Everyone will have to choose for himself. :/
>>>>> 
>>>>> Personally I agree with most of this. I agree that there wasn?t
>>>>> overwhelming consensus for either LOT=true or LOT=false. However, from
>>>>> my perspective there was clearly more strong opposition (what would
>>>>> usually be deemed a NACK in Bitcoin Core review terminology) from
>>>>> Bitcoin Core contributors, Lightning developers and other community
>>>>> members against LOT=true than there was for LOT=false. Andrew Chow
>>>>> tried to summarize views from the meeting in this analysis:
>>>>> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>>>>> 
>>>>> I am also aware of other current and previous Bitcoin Core
>>>>> contributors and Lightning developers who didn?t attend the meeting in
>>>>> person who are opposed to LOT=true. I don?t want to put them in the
>>>>> spotlight for no reason but if you go through the conversation logs of
>>>>> not only the meeting but the weeks of discussion prior to this meeting
>>>>> you will see their views evaluated on the ##taproot-activation
>>>>> channel. In addition, on taprootactivation.com some mining pools
>>>>> expressed a preference for lot=false though I don?t know how strong
>>>>> that preference was.
>>>>> 
>>>>> I am only one voice but it is my current assessment that if we are to
>>>>> attempt to finalize Taproot activation parameters and propose them to
>>>>> the community at this time our only option is to propose LOT=false.
>>>>> Any further delay appears to me counterproductive in our collective
>>>>> aim to get the Taproot soft fork activated as early as possible.
>>>>> 
>>>>> Obviously others are free to disagree with that assessment and
>>>>> continue discussions but personally I will be attempting to avoid
>>>>> those discussions unless prominent new information comes to light or
>>>>> various specific individuals change their minds.
>>>>> 
>>>>> Next week we are planning a code review of the Bitcoin Core PR #19573
>>>>> which was initially delayed because of this LOT discussion. As I?ve
>>>>> said previously that will be loosely following the format of the
>>>>> Bitcoin Core PR review club and will be lower level and more
>>>>> technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>>>>> the IRC channel ##taproot-activation.
>>>>> 
>>>>> Thanks to the meeting participants (and those who joined the
>>>>> discussion on the channel prior and post the meeting) for engaging
>>>>> productively and in good faith.
>>> 
>>> --
>>> Michael Folkson
>>> Email: michaelfolkson at gmail.com
>>> Keybase: michaelfolkson
>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From lf-lists at mattcorallo.com  Thu Feb 18 14:01:32 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 18 Feb 2021 09:01:32 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
Message-ID: <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>

If the eventual outcome is that different implementations (that have material *transaction processing* userbases, and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here and not activate Taproot. Seriously.

Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.

Matt

> On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?
> Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think users should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core. 
> 
> My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
> 
> 
> 
>> On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:
>> Good morning all,
>> 
>> > "An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
>> >
>> > Who's we here?
>> >
>> > Release both and let the network decide.
>> 
>> A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
>> 
>> This assures everyone that neither choice is being forced on users, and instead what is being forced on users, is for users to make that choice themselves.
>> 
>> Regards,
>> ZmnSCPxj
>> 
>> >
>> > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >
>> > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.
>> > >
>> > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.
>> > >
>> > > I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.
>> > >
>> > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks?
>> > >
>> > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.
>> > >
>> > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default.
>> > >
>> > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.
>> > >
>> > > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>> > >
>> > > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have occurred and are continuing and in my mailing list post that you responded to **I recommended we propose LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize trust in any human actors. We can be grateful that people like Alejandro have worked hard on taprootactivation.com (and this effort has informed the discussion) without taking pledges of support as cast iron guarantees.
>> > >
>> > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)
>> > >
>> > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com> wrote:
>> > >
>> > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
>> > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
>> > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support, or any support right up against a miner activation threshold.
>> > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility in people's minds.
>> > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number above %51).
>> > > > I say this because it strikes me when people say that they are for LOT=true with the logic that since a UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like coordination and safety are sometimes sprinkled into the argument.
>> > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.
>> > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a handful of people that begin running it while everyone else delays their upgrade (with the very good reason of not getting involved in politics) and a year later those handful of people just become stuck at the moment of MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn option has ran its course.
>> > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners by default. The chains could be called BitcoinLenient and BitcoinStubborn.
>> > > > How is that strictly safer or more coordinated?
>> > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new feature is worth a network split down the middle.
>> > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.
>> > > > An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>> > > > Cheers
>> > > > Ariel Lorenzo-Luaces
>> > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > > >
>> > > > > Yesterday (February 16th) we held a second meeting on Taproot
>> > > > > activation on IRC which again was open to all. Despite what appeared
>> > > > > to be majority support for LOT=false over LOT=true in the first
>> > > > > meeting I (and others) thought the arguments had not been explored in
>> > > > > depth and that we should have a follow up meeting almost entirely
>> > > > > focused on whether LOT (lockinontimeout) should be set to true or
>> > > > > false.
>> > > > >
>> > > > > The meeting was announced here:
>> > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>> > > > >
>> > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
>> > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>> > > > > could. David Harding responded with an additional argument for
>> > > > > LOT=false (F7) here:
>> > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>> > > > >
>> > > > > These meetings are very challenging given they are open to all, you
>> > > > > don?t know who will attend and you don?t know most people?s views in
>> > > > > advance. I tried to give time for both the LOT=true arguments and the
>> > > > > LOT=false arguments to be discussed as I knew there was support for
>> > > > > both. We only tried evaluating which had more support and which had
>> > > > > more strong opposition towards the end of the meeting.
>> > > > >
>> > > > > The conversation log is here:
>> > > > > http://gnusha.org/taproot-activation/2021-02-16.log
>> > > > >
>> > > > > (If you are so inclined you can watch a video of the meeting here.
>> > > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>> > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)
>> > > > >
>> > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>> > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
>> > > > >
>> > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>> > > > > did manage to come to consensus on everything but LockinOnTimeout.
>> > > > >
>> > > > > Activation height range: 693504-745920
>> > > > >
>> > > > > MASF threshold: 1815/2016 blocks (90%)
>> > > > >
>> > > > > Keep in mind only ~100 people showed for the meetings, hardly
>> > > > > representative of the entire community.
>> > > > >
>> > > > > So, these details remain JUST a proposal for now.
>> > > > >
>> > > > > It seems inevitable that there won't be consensus on LOT.
>> > > > >
>> > > > > Everyone will have to choose for himself. :/
>> > > > >
>> > > > > Personally I agree with most of this. I agree that there wasn?t
>> > > > > overwhelming consensus for either LOT=true or LOT=false. However, from
>> > > > > my perspective there was clearly more strong opposition (what would
>> > > > > usually be deemed a NACK in Bitcoin Core review terminology) from
>> > > > > Bitcoin Core contributors, Lightning developers and other community
>> > > > > members against LOT=true than there was for LOT=false. Andrew Chow
>> > > > > tried to summarize views from the meeting in this analysis:
>> > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>> > > > >
>> > > > > I am also aware of other current and previous Bitcoin Core
>> > > > > contributors and Lightning developers who didn?t attend the meeting in
>> > > > > person who are opposed to LOT=true. I don?t want to put them in the
>> > > > > spotlight for no reason but if you go through the conversation logs of
>> > > > > not only the meeting but the weeks of discussion prior to this meeting
>> > > > > you will see their views evaluated on the ##taproot-activation
>> > > > > channel. In addition, on taprootactivation.com some mining pools
>> > > > > expressed a preference for lot=false though I don?t know how strong
>> > > > > that preference was.
>> > > > >
>> > > > > I am only one voice but it is my current assessment that if we are to
>> > > > > attempt to finalize Taproot activation parameters and propose them to
>> > > > > the community at this time our only option is to propose LOT=false.
>> > > > > Any further delay appears to me counterproductive in our collective
>> > > > > aim to get the Taproot soft fork activated as early as possible.
>> > > > >
>> > > > > Obviously others are free to disagree with that assessment and
>> > > > > continue discussions but personally I will be attempting to avoid
>> > > > > those discussions unless prominent new information comes to light or
>> > > > > various specific individuals change their minds.
>> > > > >
>> > > > > Next week we are planning a code review of the Bitcoin Core PR #19573
>> > > > > which was initially delayed because of this LOT discussion. As I?ve
>> > > > > said previously that will be loosely following the format of the
>> > > > > Bitcoin Core PR review club and will be lower level and more
>> > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>> > > > > the IRC channel ##taproot-activation.
>> > > > >
>> > > > > Thanks to the meeting participants (and those who joined the
>> > > > > discussion on the channel prior and post the meeting) for engaging
>> > > > > productively and in good faith.
>> > >
>> > > --
>> > > Michael Folkson
>> > > Email: michaelfolkson at gmail.com
>> > > Keybase: michaelfolkson
>> > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>> > > _______________________________________________
>> > > bitcoin-dev mailing list
>> > > bitcoin-dev at lists.linuxfoundation.org
>> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
>> 
> 
> 
> -- 
> Michael Folkson
> Email: michaelfolkson at gmail.com
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/3aeb6764/attachment-0001.html>

From lf-lists at mattcorallo.com  Thu Feb 18 14:42:58 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 18 Feb 2021 09:42:58 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
Message-ID: <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>

We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That 
should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as 
much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to 
use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an 
exchange losing millions would be worse than having Taproot is good.

Matt

On 2/18/21 09:26, Michael Folkson wrote:
> Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft forks, 
> all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.
> 
> You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades such as 
> Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain splits 
> I think is shortsighted. Indeed I think even if we collectively?decided not to do any future soft fork upgrades ever 
> again on this mailing list that wouldn't stop soft fork attempts from other people in future.
> 
> I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point though I'm 
> open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to (though 
> admittedly you have a much better understanding than me of what happened in 2017).
> 
> The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot 
> before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and 
> wouldn't kill Bitcoin long term.
> 
> On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:
> 
>     If the eventual outcome is that different implementations (that have material *transaction processing* userbases,
>     and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here and not
>     activate Taproot. Seriously.
> 
>     Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.
> 
>     Matt
> 
>>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>>
>>     ?
>>     Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have
>>     heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think users
>>     should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.
>>
>>     My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol
>>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
>>
>>
>>
>>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>> wrote:
>>
>>         Good morning all,
>>
>>         > "An activation mechanism is a consensus change like any other change, can be contentious like any other
>>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
>>         >
>>         > Who's we here?
>>         >
>>         > Release both and let the network decide.
>>
>>         A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that
>>         requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
>>
>>         This assures everyone that neither choice is being forced on users, and instead what is being forced on users,
>>         is for users to make that choice themselves.
>>
>>         Regards,
>>         ZmnSCPxj
>>
>>         >
>>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>>         >
>>         > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the
>>         mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding
>>         to conversation on the IRC channel or on social media etc.
>>         > >
>>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into
>>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
>>         must or must not run.
>>         > >
>>         > > I personally have never made this assumption. Of course users aren't forced to run any particular software
>>         version, quite the opposite. Defaults set in software versions matter though as many users won't change them.
>>         > >
>>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a
>>         handful of people that begin running it while everyone else delays their upgrade (with the very good reason of
>>         not getting involved in politics) and a year later those handful of people just become stuck at the moment of
>>         MUST_SIGNAL, unable to mine new blocks?
>>         > >
>>         > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even
>>         relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate
>>         and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a
>>         software release there is the possibility (T2 in
>>         https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>) of individuals or a
>>         proportion of the community changing LOT to true. In that sense setting LOT=false in a software release
>>         appears to be no more safe than LOT=true.
>>         > >
>>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners
>>         by default.
>>         > >
>>         > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail
>>         to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it
>>         offers them clarity on what will happen over a year time period and removes the need for coordinated or
>>         uncoordinated community UASF efforts on top of LOT=false.
>>         > >
>>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other
>>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>>         > >
>>         > > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have
>>         occurred and are continuing and in my mailing list post that you responded to **I recommended we propose
>>         LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language
>>         isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or
>>         worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools?have pledged
>>         support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize
>>         trust in any human actors. We can be grateful that people like Alejandro have worked hard on
>>         taprootactivation.com <http://taprootactivation.com> (and this effort has informed the discussion) without
>>         taking pledges of support as cast iron guarantees.
>>         > >
>>         > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my
>>         email :)
>>         > >
>>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com
>>         <mailto:arielluaces at gmail.com>> wrote:
>>         > >
>>         > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
>>         > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is inevitable, like
>>         we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
>>         > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or
>>         even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49% support,
>>         or any support right up against a miner activation threshold.
>>         > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility
>>         in people's minds.
>>         > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number
>>         above %51).
>>         > > > I say this because it strikes me when people say that they are for LOT=true with the logic that since a
>>         UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like
>>         coordination and safety are sometimes sprinkled into the argument.
>>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into
>>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
>>         must or must not run.
>>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be only a
>>         handful of people that begin running it while everyone else delays their upgrade (with the very good reason of
>>         not getting involved in politics) and a year later those handful of people just become stuck at the moment of
>>         MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off into a
>>         minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn
>>         option has ran its course.
>>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with miners
>>         by default. The chains could be called BitcoinLenient and BitcoinStubborn.
>>         > > > How is that strictly safer or more coordinated?
>>         > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered
>>         this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient with
>>         miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for calling
>>         bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
>>         feature is worth a network split down the middle.
>>         > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will
>>         become envious enough to put aside our differences on how to behave towards miners and finally activate Taproot.
>>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other
>>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>>         > > > Cheers
>>         > > > Ariel Lorenzo-Luaces
>>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>>         > > >
>>         > > > > Yesterday (February 16th) we held a second meeting on Taproot
>>         > > > > activation on IRC which again was open to all. Despite what appeared
>>         > > > > to be majority support for LOT=false over LOT=true in the first
>>         > > > > meeting I (and others) thought the arguments had not been explored in
>>         > > > > depth and that we should have a follow up meeting almost entirely
>>         > > > > focused on whether LOT (lockinontimeout) should be set to true or
>>         > > > > false.
>>         > > > >
>>         > > > > The meeting was announced here:
>>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
>>         > > > >
>>         > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
>>         > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>>         > > > > could. David Harding responded with an additional argument for
>>         > > > > LOT=false (F7) here:
>>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>
>>         > > > >
>>         > > > > These meetings are very challenging given they are open to all, you
>>         > > > > don?t know who will attend and you don?t know most people?s views in
>>         > > > > advance. I tried to give time for both the LOT=true arguments and the
>>         > > > > LOT=false arguments to be discussed as I knew there was support for
>>         > > > > both. We only tried evaluating which had more support and which had
>>         > > > > more strong opposition towards the end of the meeting.
>>         > > > >
>>         > > > > The conversation log is here:
>>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log <http://gnusha.org/taproot-activation/2021-02-16.log>
>>         > > > >
>>         > > > > (If you are so inclined you can watch a video of the meeting here.
>>         > > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>)
>>         > > > >
>>         > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>>         > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
>>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
>>         > > > >
>>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>>         > > > > did manage to come to consensus on everything but LockinOnTimeout.
>>         > > > >
>>         > > > > Activation height range: 693504-745920
>>         > > > >
>>         > > > > MASF threshold: 1815/2016 blocks (90%)
>>         > > > >
>>         > > > > Keep in mind only ~100 people showed for the meetings, hardly
>>         > > > > representative of the entire community.
>>         > > > >
>>         > > > > So, these details remain JUST a proposal for now.
>>         > > > >
>>         > > > > It seems inevitable that there won't be consensus on LOT.
>>         > > > >
>>         > > > > Everyone will have to choose for himself. :/
>>         > > > >
>>         > > > > Personally I agree with most of this. I agree that there wasn?t
>>         > > > > overwhelming consensus for either LOT=true or LOT=false. However, from
>>         > > > > my perspective there was clearly more strong opposition (what would
>>         > > > > usually be deemed a NACK in Bitcoin Core review terminology) from
>>         > > > > Bitcoin Core contributors, Lightning developers and other community
>>         > > > > members against LOT=true than there was for LOT=false. Andrew Chow
>>         > > > > tried to summarize views from the meeting in this analysis:
>>         > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>>         <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
>>         > > > >
>>         > > > > I am also aware of other current and previous Bitcoin Core
>>         > > > > contributors and Lightning developers who didn?t attend the meeting in
>>         > > > > person who are opposed to LOT=true. I don?t want to put them in the
>>         > > > > spotlight for no reason but if you go through the conversation logs of
>>         > > > > not only the meeting but the weeks of discussion prior to this meeting
>>         > > > > you will see their views evaluated on the ##taproot-activation
>>         > > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com> some mining pools
>>         > > > > expressed a preference for lot=false though I don?t know how strong
>>         > > > > that preference was.
>>         > > > >
>>         > > > > I am only one voice but it is my current assessment that if we are to
>>         > > > > attempt to finalize Taproot activation parameters and propose them to
>>         > > > > the community at this time our only option is to propose LOT=false.
>>         > > > > Any further delay appears to me counterproductive in our collective
>>         > > > > aim to get the Taproot soft fork activated as early as possible.
>>         > > > >
>>         > > > > Obviously others are free to disagree with that assessment and
>>         > > > > continue discussions but personally I will be attempting to avoid
>>         > > > > those discussions unless prominent new information comes to light or
>>         > > > > various specific individuals change their minds.
>>         > > > >
>>         > > > > Next week we are planning a code review of the Bitcoin Core PR #19573
>>         > > > > which was initially delayed because of this LOT discussion. As I?ve
>>         > > > > said previously that will be loosely following the format of the
>>         > > > > Bitcoin Core PR review club and will be lower level and more
>>         > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>>         > > > > the IRC channel ##taproot-activation.
>>         > > > >
>>         > > > > Thanks to the meeting participants (and those who joined the
>>         > > > > discussion on the channel prior and post the meeting) for engaging
>>         > > > > productively and in good faith.
>>         > >
>>         > > --
>>         > > Michael Folkson
>>         > > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
>>         > > Keybase: michaelfolkson
>>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>>         > > _______________________________________________
>>         > > bitcoin-dev mailing list
>>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>>         > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>>
>>
>>
>>
>>     -- 
>>     Michael Folkson
>>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
>>     Keybase: michaelfolkson
>>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>>     _______________________________________________
>>     bitcoin-dev mailing list
>>     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> 
> 
> 
> -- 
> Michael Folkson
> Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

From lf-lists at mattcorallo.com  Thu Feb 18 14:53:48 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 18 Feb 2021 09:53:48 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CAFvNmHQJAtxchH9fi8tjQa5zC2+9URu094=_joHQocBBFGFPVQ@mail.gmail.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
 <CAFvNmHQJAtxchH9fi8tjQa5zC2+9URu094=_joHQocBBFGFPVQ@mail.gmail.com>
Message-ID: <4a8a1978-f265-e81c-0286-b927b964fc98@mattcorallo.com>

You say "short term PR", I say "risking millions of user dollars".

On 2/18/21 09:51, Michael Folkson wrote:
>  > getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an exchange 
> losing millions would be worse than having Taproot is good.
> 
> We are at the point where an upgrade that confers significant long term benefits for the whole ecosystem is not as 
> important as bad short term PR? That is a depressing outlook if that is what you believe.
> 
> Even in that worst case scenario exchanges should not lose money if they are competent and are able to manage that risk.
> 
> On Thu, Feb 18, 2021 at 2:42 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:
> 
>     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That
>     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as
>     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to
>     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an
>     exchange losing millions would be worse than having Taproot is good.
> 
>     Matt
> 
>     On 2/18/21 09:26, Michael Folkson wrote:
>      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft
>     forks,
>      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.
>      >
>      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades
>     such as
>      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain
>     splits
>      > I think is shortsighted. Indeed I think even if we collectively?decided not to do any future soft fork upgrades ever
>      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.
>      >
>      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point
>     though I'm
>      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to
>     (though
>      > admittedly you have a much better understanding than me of what happened in 2017).
>      >
>      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot
>      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and
>      > wouldn't kill Bitcoin long term.
>      >
>      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>
>     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:
>      >
>      >? ? ?If the eventual outcome is that different implementations (that have material *transaction processing* userbases,
>      >? ? ?and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here
>     and not
>      >? ? ?activate Taproot. Seriously.
>      >
>      >? ? ?Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.
>      >
>      >? ? ?Matt
>      >
>      >>? ? ?On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>      >>? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>      >>
>      >>? ? ??
>      >>? ? ?Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have
>      >>? ? ?heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think
>     users
>      >>? ? ?should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.
>      >>
>      >>? ? ?My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol
>      >>? ? ?implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
>      >>
>      >>
>      >>
>      >>? ? ?On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>
>     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:
>      >>
>      >>? ? ? ? ?Good morning all,
>      >>
>      >>? ? ? ? ?> "An activation mechanism is a consensus change like any other change, can be contentious like any other
>      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> Who's we here?
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> Release both and let the network decide.
>      >>
>      >>? ? ? ? ?A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that
>      >>? ? ? ? ?requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
>      >>
>      >>? ? ? ? ?This assures everyone that neither choice is being forced on users, and instead what is being forced on
>     users,
>      >>? ? ? ? ?is for users to make that choice themselves.
>      >>
>      >>? ? ? ? ?Regards,
>      >>? ? ? ? ?ZmnSCPxj
>      >>
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>      >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made
>     in the
>      >>? ? ? ? ?mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding
>      >>? ? ? ? ?to conversation on the IRC channel or on social media etc.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
>     into
>      >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
>      >>? ? ? ? ?must or must not run.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > I personally have never made this assumption. Of course users aren't forced to run any particular
>     software
>      >>? ? ? ? ?version, quite the opposite. Defaults set in software versions matter though as many users won't change
>     them.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
>     only a
>      >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
>     reason of
>      >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
>     moment of
>      >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks?
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even
>      >>? ? ? ? ?relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to
>     activate
>      >>? ? ? ? ?and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to
>     false in a
>      >>? ? ? ? ?software release there is the possibility (T2 in
>      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a
>      >>? ? ? ? ?proportion of the community changing LOT to true. In that sense setting LOT=false in a software release
>      >>? ? ? ? ?appears to be no more safe than LOT=true.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
>     miners
>      >>? ? ? ? ?by default.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail
>      >>? ? ? ? ?to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually
>     think it
>      >>? ? ? ? ?offers them clarity on what will happen over a year time period and removes the need for coordinated or
>      >>? ? ? ? ?uncoordinated community UASF efforts on top of LOT=false.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any other
>      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have
>      >>? ? ? ? ?occurred and are continuing and in my mailing list post that you responded to **I recommended we propose
>      >>? ? ? ? ?LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language
>      >>? ? ? ? ?isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or
>      >>? ? ? ? ?worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools?have pledged
>      >>? ? ? ? ?support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize
>      >>? ? ? ? ?trust in any human actors. We can be grateful that people like Alejandro have worked hard on
>      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com
>     <http://taprootactivation.com>> (and this effort has informed the discussion) without
>      >>? ? ? ? ?taking pledges of support as cast iron guarantees.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my
>      >>? ? ? ? ?email :)
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com
>     <mailto:arielluaces at gmail.com>
>      >>? ? ? ? ?<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
>      >>? ? ? ? ?> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is
>     inevitable, like
>      >>? ? ? ? ?we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
>      >>? ? ? ? ?> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or
>      >>? ? ? ? ?even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%
>     support,
>      >>? ? ? ? ?or any support right up against a miner activation threshold.
>      >>? ? ? ? ?> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility
>      >>? ? ? ? ?in people's minds.
>      >>? ? ? ? ?> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number
>      >>? ? ? ? ?above %51).
>      >>? ? ? ? ?> > > I say this because it strikes me when people say that they are for LOT=true with the logic that
>     since a
>      >>? ? ? ? ?UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like
>      >>? ? ? ? ?coordination and safety are sometimes sprinkled into the argument.
>      >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
>     into
>      >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
>      >>? ? ? ? ?must or must not run.
>      >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
>     only a
>      >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
>     reason of
>      >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
>     moment of
>      >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off
>     into a
>      >>? ? ? ? ?minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn
>      >>? ? ? ? ?option has ran its course.
>      >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
>     miners
>      >>? ? ? ? ?by default. The chains could be called BitcoinLenient and BitcoinStubborn.
>      >>? ? ? ? ?> > > How is that strictly safer or more coordinated?
>      >>? ? ? ? ?> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered
>      >>? ? ? ? ?this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient
>     with
>      >>? ? ? ? ?miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for
>     calling
>      >>? ? ? ? ?bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
>      >>? ? ? ? ?feature is worth a network split down the middle.
>      >>? ? ? ? ?> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will
>      >>? ? ? ? ?become envious enough to put aside our differences on how to behave towards miners and finally activate
>     Taproot.
>      >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any other
>      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>      >>? ? ? ? ?> > > Cheers
>      >>? ? ? ? ?> > > Ariel Lorenzo-Luaces
>      >>? ? ? ? ?> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev
>     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>      >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>      >>? ? ? ? ?> > >
>      >>? ? ? ? ?> > > > Yesterday (February 16th) we held a second meeting on Taproot
>      >>? ? ? ? ?> > > > activation on IRC which again was open to all. Despite what appeared
>      >>? ? ? ? ?> > > > to be majority support for LOT=false over LOT=true in the first
>      >>? ? ? ? ?> > > > meeting I (and others) thought the arguments had not been explored in
>      >>? ? ? ? ?> > > > depth and that we should have a follow up meeting almost entirely
>      >>? ? ? ? ?> > > > focused on whether LOT (lockinontimeout) should be set to true or
>      >>? ? ? ? ?> > > > false.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > The meeting was announced here:
>      >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
>      >>? ? ? ? ?> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>      >>? ? ? ? ?> > > > could. David Harding responded with an additional argument for
>      >>? ? ? ? ?> > > > LOT=false (F7) here:
>      >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > These meetings are very challenging given they are open to all, you
>      >>? ? ? ? ?> > > > don?t know who will attend and you don?t know most people?s views in
>      >>? ? ? ? ?> > > > advance. I tried to give time for both the LOT=true arguments and the
>      >>? ? ? ? ?> > > > LOT=false arguments to be discussed as I knew there was support for
>      >>? ? ? ? ?> > > > both. We only tried evaluating which had more support and which had
>      >>? ? ? ? ?> > > > more strong opposition towards the end of the meeting.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > The conversation log is here:
>      >>? ? ? ? ?> > > > http://gnusha.org/taproot-activation/2021-02-16.log
>     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log
>     <http://gnusha.org/taproot-activation/2021-02-16.log>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > (If you are so inclined you can watch a video of the meeting here.
>      >>? ? ? ? ?> > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>      >>? ? ? ? ?> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>
>     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>      >>? ? ? ? ?> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
>      >>? ? ? ? ?<https://bitcoinhackers.org/@lukedashjr/105742918779234566
>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>      >>? ? ? ? ?> > > > did manage to come to consensus on everything but LockinOnTimeout.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Activation height range: 693504-745920
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > MASF threshold: 1815/2016 blocks (90%)
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Keep in mind only ~100 people showed for the meetings, hardly
>      >>? ? ? ? ?> > > > representative of the entire community.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > So, these details remain JUST a proposal for now.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > It seems inevitable that there won't be consensus on LOT.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Everyone will have to choose for himself. :/
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Personally I agree with most of this. I agree that there wasn?t
>      >>? ? ? ? ?> > > > overwhelming consensus for either LOT=true or LOT=false. However, from
>      >>? ? ? ? ?> > > > my perspective there was clearly more strong opposition (what would
>      >>? ? ? ? ?> > > > usually be deemed a NACK in Bitcoin Core review terminology) from
>      >>? ? ? ? ?> > > > Bitcoin Core contributors, Lightning developers and other community
>      >>? ? ? ? ?> > > > members against LOT=true than there was for LOT=false. Andrew Chow
>      >>? ? ? ? ?> > > > tried to summarize views from the meeting in this analysis:
>      >>? ? ? ? ?> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
>      >>? ? ? ? ?<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > I am also aware of other current and previous Bitcoin Core
>      >>? ? ? ? ?> > > > contributors and Lightning developers who didn?t attend the meeting in
>      >>? ? ? ? ?> > > > person who are opposed to LOT=true. I don?t want to put them in the
>      >>? ? ? ? ?> > > > spotlight for no reason but if you go through the conversation logs of
>      >>? ? ? ? ?> > > > not only the meeting but the weeks of discussion prior to this meeting
>      >>? ? ? ? ?> > > > you will see their views evaluated on the ##taproot-activation
>      >>? ? ? ? ?> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>
>     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools
>      >>? ? ? ? ?> > > > expressed a preference for lot=false though I don?t know how strong
>      >>? ? ? ? ?> > > > that preference was.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > I am only one voice but it is my current assessment that if we are to
>      >>? ? ? ? ?> > > > attempt to finalize Taproot activation parameters and propose them to
>      >>? ? ? ? ?> > > > the community at this time our only option is to propose LOT=false.
>      >>? ? ? ? ?> > > > Any further delay appears to me counterproductive in our collective
>      >>? ? ? ? ?> > > > aim to get the Taproot soft fork activated as early as possible.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Obviously others are free to disagree with that assessment and
>      >>? ? ? ? ?> > > > continue discussions but personally I will be attempting to avoid
>      >>? ? ? ? ?> > > > those discussions unless prominent new information comes to light or
>      >>? ? ? ? ?> > > > various specific individuals change their minds.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Next week we are planning a code review of the Bitcoin Core PR #19573
>      >>? ? ? ? ?> > > > which was initially delayed because of this LOT discussion. As I?ve
>      >>? ? ? ? ?> > > > said previously that will be loosely following the format of the
>      >>? ? ? ? ?> > > > Bitcoin Core PR review club and will be lower level and more
>      >>? ? ? ? ?> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>      >>? ? ? ? ?> > > > the IRC channel ##taproot-activation.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Thanks to the meeting participants (and those who joined the
>      >>? ? ? ? ?> > > > discussion on the channel prior and post the meeting) for engaging
>      >>? ? ? ? ?> > > > productively and in good faith.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > --
>      >>? ? ? ? ?> > Michael Folkson
>      >>? ? ? ? ?> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>     <mailto:michaelfolkson at gmail.com>>
>      >>? ? ? ? ?> > Keybase: michaelfolkson
>      >>? ? ? ? ?> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>      >>? ? ? ? ?> > _______________________________________________
>      >>? ? ? ? ?> > bitcoin-dev mailing list
>      >>? ? ? ? ?> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
>      >>? ? ? ? ?> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
>      >>
>      >>
>      >>
>      >>
>      >>? ? ?--
>      >>? ? ?Michael Folkson
>      >>? ? ?Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>     <mailto:michaelfolkson at gmail.com>>
>      >>? ? ?Keybase: michaelfolkson
>      >>? ? ?PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>      >>? ? ?_______________________________________________
>      >>? ? ?bitcoin-dev mailing list
>      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
>      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>      >>? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
>      >
>      >
>      >
>      > --
>      > Michael Folkson
>      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>     <mailto:michaelfolkson at gmail.com>>
>      > Keybase: michaelfolkson
>      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> 
> 
> 
> -- 
> Michael Folkson
> Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

From lf-lists at mattcorallo.com  Thu Feb 18 15:01:09 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 18 Feb 2021 10:01:09 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <4a8a1978-f265-e81c-0286-b927b964fc98@mattcorallo.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
 <CAFvNmHQJAtxchH9fi8tjQa5zC2+9URu094=_joHQocBBFGFPVQ@mail.gmail.com>
 <4a8a1978-f265-e81c-0286-b927b964fc98@mattcorallo.com>
Message-ID: <924c5cab-17c5-49c5-779d-10fc6a4067bd@bluematt.me>

To ensure we're on the same page, here - I'm not advocating we give up on Taproot. Indeed, without having dug deep into 
the issue, my overall impression is that Knots has a tiny transaction-processing userbase and it likely isn't worth 
giving deep thought to whether it forks itself off from the network or not. My point is that, if it were the case that 
various implementations of Bitcoin's consensus that have material userbases were to release either a configurable 
consensus mechanism (without incredible care being given to it, not just a "we can't decide, whatever" argument) or a 
different consensus, we'd be much, much better off not having Taproot at all.

Matt

On 2/18/21 09:53, Matt Corallo via bitcoin-dev wrote:
> You say "short term PR", I say "risking millions of user dollars".
> 
> On 2/18/21 09:51, Michael Folkson wrote:
>> ?> getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an exchange 
>> losing millions would be worse than having Taproot is good.
>>
>> We are at the point where an upgrade that confers significant long term benefits for the whole ecosystem is not as 
>> important as bad short term PR? That is a depressing outlook if that is what you believe.
>>
>> Even in that worst case scenario exchanges should not lose money if they are competent and are able to manage that risk.
>>
>> On Thu, Feb 18, 2021 at 2:42 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:
>>
>> ??? We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That
>> ??? should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of 
>> that as
>> ??? much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being 
>> able to
>> ??? use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an
>> ??? exchange losing millions would be worse than having Taproot is good.
>>
>> ??? Matt
>>
>> ??? On 2/18/21 09:26, Michael Folkson wrote:
>> ???? > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft
>> ??? forks,
>> ???? > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.
>> ???? >
>> ???? > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades
>> ??? such as
>> ???? > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain
>> ??? splits
>> ???? > I think is shortsighted. Indeed I think even if we collectively?decided not to do any future soft fork upgrades 
>> ever
>> ???? > again on this mailing list that wouldn't stop soft fork attempts from other people in future.
>> ???? >
>> ???? > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point
>> ??? though I'm
>> ???? > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to
>> ??? (though
>> ???? > admittedly you have a much better understanding than me of what happened in 2017).
>> ???? >
>> ???? > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate 
>> Taproot
>> ???? > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and
>> ???? > wouldn't kill Bitcoin long term.
>> ???? >
>> ???? > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>
>> ??? <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:
>> ???? >
>> ???? >? ? ?If the eventual outcome is that different implementations (that have material *transaction processing* 
>> userbases,
>> ???? >? ? ?and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here
>> ??? and not
>> ???? >? ? ?activate Taproot. Seriously.
>> ???? >
>> ???? >? ? ?Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.
>> ???? >
>> ???? >? ? ?Matt
>> ???? >
>> ???? >>? ? ?On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>> ??? <mailto:bitcoin-dev at lists.linuxfoundation.org>
>> ???? >>? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>> ???? >>
>> ???? >>? ? ??
>> ???? >>? ? ?Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what 
>> I have
>> ???? >>? ? ?heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think
>> ??? users
>> ???? >>? ? ?should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.
>> ???? >>
>> ???? >>? ? ?My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol
>> ???? >>? ? ?implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
>> ???? >>
>> ???? >>
>> ???? >>
>> ???? >>? ? ?On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>
>> ??? <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:
>> ???? >>
>> ???? >>? ? ? ? ?Good morning all,
>> ???? >>
>> ???? >>? ? ? ? ?> "An activation mechanism is a consensus change like any other change, can be contentious like any other
>> ???? >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest 
>> timeline."
>> ???? >>? ? ? ? ?>
>> ???? >>? ? ? ? ?> Who's we here?
>> ???? >>? ? ? ? ?>
>> ???? >>? ? ? ? ?> Release both and let the network decide.
>> ???? >>
>> ???? >>? ? ? ? ?A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release 
>> that
>> ???? >>? ? ? ? ?requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
>> ???? >>
>> ???? >>? ? ? ? ?This assures everyone that neither choice is being forced on users, and instead what is being forced on
>> ??? users,
>> ???? >>? ? ? ? ?is for users to make that choice themselves.
>> ???? >>
>> ???? >>? ? ? ? ?Regards,
>> ???? >>? ? ? ? ?ZmnSCPxj
>> ???? >>
>> ???? >>? ? ? ? ?>
>> ???? >>? ? ? ? ?> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>> ??? <mailto:bitcoin-dev at lists.linuxfoundation.org>
>> ???? >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>> ???? >>? ? ? ? ?>
>> ???? >>? ? ? ? ?> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made
>> ??? in the
>> ???? >>? ? ? ? ?mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're 
>> responding
>> ???? >>? ? ? ? ?to conversation on the IRC channel or on social media etc.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
>> ??? into
>> ???? >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what 
>> users
>> ???? >>? ? ? ? ?must or must not run.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > I personally have never made this assumption. Of course users aren't forced to run any particular
>> ??? software
>> ???? >>? ? ? ? ?version, quite the opposite. Defaults set in software versions matter though as many users won't change
>> ??? them.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
>> ??? only a
>> ???? >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
>> ??? reason of
>> ???? >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
>> ??? moment of
>> ???? >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks?
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even
>> ???? >>? ? ? ? ?relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to
>> ??? activate
>> ???? >>? ? ? ? ?and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to
>> ??? false in a
>> ???? >>? ? ? ? ?software release there is the possibility (T2 in
>> ???? >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>> ??? <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
>> ???? >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>> ??? <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a
>> ???? >>? ? ? ? ?proportion of the community changing LOT to true. In that sense setting LOT=false in a software release
>> ???? >>? ? ? ? ?appears to be no more safe than LOT=true.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
>> ??? miners
>> ???? >>? ? ? ? ?by default.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and 
>> miners fail
>> ???? >>? ? ? ? ?to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually
>> ??? think it
>> ???? >>? ? ? ? ?offers them clarity on what will happen over a year time period and removes the need for coordinated or
>> ???? >>? ? ? ? ?uncoordinated community UASF efforts on top of LOT=false.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any 
>> other
>> ???? >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have
>> ???? >>? ? ? ? ?occurred and are continuing and in my mailing list post that you responded to **I recommended we propose
>> ???? >>? ? ? ? ?LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language
>> ???? >>? ? ? ? ?isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for 
>> bad or
>> ???? >>? ? ? ? ?worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools?have 
>> pledged
>> ???? >>? ? ? ? ?support for Taproot but we don't build secure systems based on pledges of support, we build them to 
>> minimize
>> ???? >>? ? ? ? ?trust in any human actors. We can be grateful that people like Alejandro have worked hard on
>> ???? >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com
>> ??? <http://taprootactivation.com>> (and this effort has informed the discussion) without
>> ???? >>? ? ? ? ?taking pledges of support as cast iron guarantees.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations 
>> in my
>> ???? >>? ? ? ? ?email :)
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com
>> ??? <mailto:arielluaces at gmail.com>
>> ???? >>? ? ? ? ?<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
>> ???? >>? ? ? ? ?> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is
>> ??? inevitable, like
>> ???? >>? ? ? ? ?we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
>> ???? >>? ? ? ? ?> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' 
>> nodes, or
>> ???? >>? ? ? ? ?even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%
>> ??? support,
>> ???? >>? ? ? ? ?or any support right up against a miner activation threshold.
>> ???? >>? ? ? ? ?> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a 
>> possibility
>> ???? >>? ? ? ? ?in people's minds.
>> ???? >>? ? ? ? ?> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some 
>> number
>> ???? >>? ? ? ? ?above %51).
>> ???? >>? ? ? ? ?> > > I say this because it strikes me when people say that they are for LOT=true with the logic that
>> ??? since a
>> ???? >>? ? ? ? ?UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like
>> ???? >>? ? ? ? ?coordination and safety are sometimes sprinkled into the argument.
>> ???? >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
>> ??? into
>> ???? >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what 
>> users
>> ???? >>? ? ? ? ?must or must not run.
>> ???? >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
>> ??? only a
>> ???? >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
>> ??? reason of
>> ???? >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
>> ??? moment of
>> ???? >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off
>> ??? into a
>> ???? >>? ? ? ? ?minority fork. Then a lot=false could be started that ends up activating the feature now that the 
>> stubborn
>> ???? >>? ? ? ? ?option has ran its course.
>> ???? >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
>> ??? miners
>> ???? >>? ? ? ? ?by default. The chains could be called BitcoinLenient and BitcoinStubborn.
>> ???? >>? ? ? ? ?> > > How is that strictly safer or more coordinated?
>> ???? >>? ? ? ? ?> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't 
>> considered
>> ???? >>? ? ? ? ?this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient
>> ??? with
>> ???? >>? ? ? ? ?miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for
>> ??? calling
>> ???? >>? ? ? ? ?bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
>> ???? >>? ? ? ? ?feature is worth a network split down the middle.
>> ???? >>? ? ? ? ?> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, 
>> we will
>> ???? >>? ? ? ? ?become envious enough to put aside our differences on how to behave towards miners and finally activate
>> ??? Taproot.
>> ???? >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any 
>> other
>> ???? >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>> ???? >>? ? ? ? ?> > > Cheers
>> ???? >>? ? ? ? ?> > > Ariel Lorenzo-Luaces
>> ???? >>? ? ? ? ?> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev
>> ??? <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>> ???? >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>> ???? >>? ? ? ? ?> > >
>> ???? >>? ? ? ? ?> > > > Yesterday (February 16th) we held a second meeting on Taproot
>> ???? >>? ? ? ? ?> > > > activation on IRC which again was open to all. Despite what appeared
>> ???? >>? ? ? ? ?> > > > to be majority support for LOT=false over LOT=true in the first
>> ???? >>? ? ? ? ?> > > > meeting I (and others) thought the arguments had not been explored in
>> ???? >>? ? ? ? ?> > > > depth and that we should have a follow up meeting almost entirely
>> ???? >>? ? ? ? ?> > > > focused on whether LOT (lockinontimeout) should be set to true or
>> ???? >>? ? ? ? ?> > > > false.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > The meeting was announced here:
>> ???? >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>> ??? <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
>> ???? >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>> ??? <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
>> ???? >>? ? ? ? ?> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>> ???? >>? ? ? ? ?> > > > could. David Harding responded with an additional argument for
>> ???? >>? ? ? ? ?> > > > LOT=false (F7) here:
>> ???? >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>> ??? <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>
>> ???? >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>> ??? <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > These meetings are very challenging given they are open to all, you
>> ???? >>? ? ? ? ?> > > > don?t know who will attend and you don?t know most people?s views in
>> ???? >>? ? ? ? ?> > > > advance. I tried to give time for both the LOT=true arguments and the
>> ???? >>? ? ? ? ?> > > > LOT=false arguments to be discussed as I knew there was support for
>> ???? >>? ? ? ? ?> > > > both. We only tried evaluating which had more support and which had
>> ???? >>? ? ? ? ?> > > > more strong opposition towards the end of the meeting.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > The conversation log is here:
>> ???? >>? ? ? ? ?> > > > http://gnusha.org/taproot-activation/2021-02-16.log
>> ??? <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log
>> ??? <http://gnusha.org/taproot-activation/2021-02-16.log>>
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > (If you are so inclined you can watch a video of the meeting here.
>> ???? >>? ? ? ? ?> > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>> ???? >>? ? ? ? ?> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>
>> ??? <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>> ???? >>? ? ? ? ?> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
>> ??? <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
>> ???? >>? ? ? ? ?<https://bitcoinhackers.org/@lukedashjr/105742918779234566
>> ??? <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>> ???? >>? ? ? ? ?> > > > did manage to come to consensus on everything but LockinOnTimeout.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Activation height range: 693504-745920
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > MASF threshold: 1815/2016 blocks (90%)
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Keep in mind only ~100 people showed for the meetings, hardly
>> ???? >>? ? ? ? ?> > > > representative of the entire community.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > So, these details remain JUST a proposal for now.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > It seems inevitable that there won't be consensus on LOT.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Everyone will have to choose for himself. :/
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Personally I agree with most of this. I agree that there wasn?t
>> ???? >>? ? ? ? ?> > > > overwhelming consensus for either LOT=true or LOT=false. However, from
>> ???? >>? ? ? ? ?> > > > my perspective there was clearly more strong opposition (what would
>> ???? >>? ? ? ? ?> > > > usually be deemed a NACK in Bitcoin Core review terminology) from
>> ???? >>? ? ? ? ?> > > > Bitcoin Core contributors, Lightning developers and other community
>> ???? >>? ? ? ? ?> > > > members against LOT=true than there was for LOT=false. Andrew Chow
>> ???? >>? ? ? ? ?> > > > tried to summarize views from the meeting in this analysis:
>> ???? >>? ? ? ? ?> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>> ??? <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
>> ???? >>? ? ? ? ?<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>> ??? <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > I am also aware of other current and previous Bitcoin Core
>> ???? >>? ? ? ? ?> > > > contributors and Lightning developers who didn?t attend the meeting in
>> ???? >>? ? ? ? ?> > > > person who are opposed to LOT=true. I don?t want to put them in the
>> ???? >>? ? ? ? ?> > > > spotlight for no reason but if you go through the conversation logs of
>> ???? >>? ? ? ? ?> > > > not only the meeting but the weeks of discussion prior to this meeting
>> ???? >>? ? ? ? ?> > > > you will see their views evaluated on the ##taproot-activation
>> ???? >>? ? ? ? ?> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>
>> ??? <http://taprootactivation.com <http://taprootactivation.com>> some mining pools
>> ???? >>? ? ? ? ?> > > > expressed a preference for lot=false though I don?t know how strong
>> ???? >>? ? ? ? ?> > > > that preference was.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > I am only one voice but it is my current assessment that if we are to
>> ???? >>? ? ? ? ?> > > > attempt to finalize Taproot activation parameters and propose them to
>> ???? >>? ? ? ? ?> > > > the community at this time our only option is to propose LOT=false.
>> ???? >>? ? ? ? ?> > > > Any further delay appears to me counterproductive in our collective
>> ???? >>? ? ? ? ?> > > > aim to get the Taproot soft fork activated as early as possible.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Obviously others are free to disagree with that assessment and
>> ???? >>? ? ? ? ?> > > > continue discussions but personally I will be attempting to avoid
>> ???? >>? ? ? ? ?> > > > those discussions unless prominent new information comes to light or
>> ???? >>? ? ? ? ?> > > > various specific individuals change their minds.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Next week we are planning a code review of the Bitcoin Core PR #19573
>> ???? >>? ? ? ? ?> > > > which was initially delayed because of this LOT discussion. As I?ve
>> ???? >>? ? ? ? ?> > > > said previously that will be loosely following the format of the
>> ???? >>? ? ? ? ?> > > > Bitcoin Core PR review club and will be lower level and more
>> ???? >>? ? ? ? ?> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>> ???? >>? ? ? ? ?> > > > the IRC channel ##taproot-activation.
>> ???? >>? ? ? ? ?> > > >
>> ???? >>? ? ? ? ?> > > > Thanks to the meeting participants (and those who joined the
>> ???? >>? ? ? ? ?> > > > discussion on the channel prior and post the meeting) for engaging
>> ???? >>? ? ? ? ?> > > > productively and in good faith.
>> ???? >>? ? ? ? ?> >
>> ???? >>? ? ? ? ?> > --
>> ???? >>? ? ? ? ?> > Michael Folkson
>> ???? >>? ? ? ? ?> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>> ??? <mailto:michaelfolkson at gmail.com>>
>> ???? >>? ? ? ? ?> > Keybase: michaelfolkson
>> ???? >>? ? ? ? ?> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>> ???? >>? ? ? ? ?> > _______________________________________________
>> ???? >>? ? ? ? ?> > bitcoin-dev mailing list
>> ???? >>? ? ? ? ?> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>> ??? <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
>> ???? >>? ? ? ? ?> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> ??? <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>> ???? >>? ? ? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> ??? <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
>> ???? >>
>> ???? >>
>> ???? >>
>> ???? >>
>> ???? >>? ? ?--
>> ???? >>? ? ?Michael Folkson
>> ???? >>? ? ?Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>> ??? <mailto:michaelfolkson at gmail.com>>
>> ???? >>? ? ?Keybase: michaelfolkson
>> ???? >>? ? ?PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>> ???? >>? ? ?_______________________________________________
>> ???? >>? ? ?bitcoin-dev mailing list
>> ???? >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>> ??? <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
>> ???? >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> ??? <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>> ???? >>? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> ??? <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
>> ???? >
>> ???? >
>> ???? >
>> ???? > --
>> ???? > Michael Folkson
>> ???? > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>> ??? <mailto:michaelfolkson at gmail.com>>
>> ???? > Keybase: michaelfolkson
>> ???? > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>>
>>
>>
>> -- 
>> Michael Folkson
>> Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
>> Keybase: michaelfolkson
>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From lf-lists at mattcorallo.com  Thu Feb 18 15:18:08 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Thu, 18 Feb 2021 10:18:08 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CALeFGL1e+q2mrCox99sUOAXYu3qcC7Xce7AfkuKuLPmxh1oSiA@mail.gmail.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
 <CALeFGL1e+q2mrCox99sUOAXYu3qcC7Xce7AfkuKuLPmxh1oSiA@mail.gmail.com>
Message-ID: <a1ae49f7-049f-cda5-19af-e02a8952e5a4@mattcorallo.com>

This is absolutely the case, however note that the activation method itself is consensus code which executes as a part 
of a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should 
be designed, this doesn't imply anything about the consensus code which represents the activation thereof.

Hence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one 
which almost certainly carries significantly more risk than Taproot.

Note that I don't believe anyone is advocating for "try to activate, and if it fails, move on". Various people have 
various views on how conservative and timelines for what to do at that point, but I believe most in this discussion are 
OK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority 
of Bitcoin users and is only not activating due to lagging miner upgrades.

Matt

On 2/18/21 10:04, Keagan McClelland wrote:
> Hi all,
> 
> I think it's important for us to consider what is actually being considered for activation here.
> 
> The designation of "soft fork" is accurate but I don't think it adequately conveys how non-intrusive a change like this 
> is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with 
> actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for 
> that script version today. This is something I think that we can easily check by digging through the UTXO set or 
> history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we 
> can't switch to a script version that no one is actually using.
> 
> If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs 
> because there is simply no block that contains a transaction that only some of the network will accept.
> 
> Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on "undefined behavior" 
> (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run. 
> This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting 
> fees. It is a change that means that certain "always accept" transactions actually have real conditions you have to 
> meet. I can't imagine a less intrusive change.
> 
> On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate 
> to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners 
> are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable 
> outcome to let ~0.1% of the network get to block /non-intrusive/?changes that the rest of the network wants.
> 
> I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will 
> all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like "well, guess that's it 
> for Taproot". I have no idea what ensues at that point, but probably another community led UASF movement.
> 
> I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm 
> missing something please say so. But from my point of view, we can't treat all soft forks as equal.
> 
> Keagan
> 
> On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org 
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
>     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That
>     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as
>     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to
>     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an
>     exchange losing millions would be worse than having Taproot is good.
> 
>     Matt
> 
>     On 2/18/21 09:26, Michael Folkson wrote:
>      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft
>     forks,
>      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.
>      >
>      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades
>     such as
>      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain
>     splits
>      > I think is shortsighted. Indeed I think even if we collectively?decided not to do any future soft fork upgrades ever
>      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.
>      >
>      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point
>     though I'm
>      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to
>     (though
>      > admittedly you have a much better understanding than me of what happened in 2017).
>      >
>      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot
>      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and
>      > wouldn't kill Bitcoin long term.
>      >
>      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>
>     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:
>      >
>      >? ? ?If the eventual outcome is that different implementations (that have material *transaction processing* userbases,
>      >? ? ?and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here
>     and not
>      >? ? ?activate Taproot. Seriously.
>      >
>      >? ? ?Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.
>      >
>      >? ? ?Matt
>      >
>      >>? ? ?On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>      >>? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>      >>
>      >>? ? ??
>      >>? ? ?Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have
>      >>? ? ?heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think
>     users
>      >>? ? ?should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.
>      >>
>      >>? ? ?My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol
>      >>? ? ?implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
>      >>
>      >>
>      >>
>      >>? ? ?On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>
>     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:
>      >>
>      >>? ? ? ? ?Good morning all,
>      >>
>      >>? ? ? ? ?> "An activation mechanism is a consensus change like any other change, can be contentious like any other
>      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> Who's we here?
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> Release both and let the network decide.
>      >>
>      >>? ? ? ? ?A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that
>      >>? ? ? ? ?requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
>      >>
>      >>? ? ? ? ?This assures everyone that neither choice is being forced on users, and instead what is being forced on
>     users,
>      >>? ? ? ? ?is for users to make that choice themselves.
>      >>
>      >>? ? ? ? ?Regards,
>      >>? ? ? ? ?ZmnSCPxj
>      >>
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>      >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>      >>? ? ? ? ?>
>      >>? ? ? ? ?> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made
>     in the
>      >>? ? ? ? ?mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding
>      >>? ? ? ? ?to conversation on the IRC channel or on social media etc.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
>     into
>      >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
>      >>? ? ? ? ?must or must not run.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > I personally have never made this assumption. Of course users aren't forced to run any particular
>     software
>      >>? ? ? ? ?version, quite the opposite. Defaults set in software versions matter though as many users won't change
>     them.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
>     only a
>      >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
>     reason of
>      >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
>     moment of
>      >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks?
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even
>      >>? ? ? ? ?relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to
>     activate
>      >>? ? ? ? ?and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to
>     false in a
>      >>? ? ? ? ?software release there is the possibility (T2 in
>      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a
>      >>? ? ? ? ?proportion of the community changing LOT to true. In that sense setting LOT=false in a software release
>      >>? ? ? ? ?appears to be no more safe than LOT=true.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
>     miners
>      >>? ? ? ? ?by default.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail
>      >>? ? ? ? ?to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually
>     think it
>      >>? ? ? ? ?offers them clarity on what will happen over a year time period and removes the need for coordinated or
>      >>? ? ? ? ?uncoordinated community UASF efforts on top of LOT=false.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any other
>      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have
>      >>? ? ? ? ?occurred and are continuing and in my mailing list post that you responded to **I recommended we propose
>      >>? ? ? ? ?LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language
>      >>? ? ? ? ?isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or
>      >>? ? ? ? ?worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools?have pledged
>      >>? ? ? ? ?support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize
>      >>? ? ? ? ?trust in any human actors. We can be grateful that people like Alejandro have worked hard on
>      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com
>     <http://taprootactivation.com>> (and this effort has informed the discussion) without
>      >>? ? ? ? ?taking pledges of support as cast iron guarantees.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my
>      >>? ? ? ? ?email :)
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com
>     <mailto:arielluaces at gmail.com>
>      >>? ? ? ? ?<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
>      >>? ? ? ? ?> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is
>     inevitable, like
>      >>? ? ? ? ?we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
>      >>? ? ? ? ?> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or
>      >>? ? ? ? ?even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%
>     support,
>      >>? ? ? ? ?or any support right up against a miner activation threshold.
>      >>? ? ? ? ?> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility
>      >>? ? ? ? ?in people's minds.
>      >>? ? ? ? ?> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number
>      >>? ? ? ? ?above %51).
>      >>? ? ? ? ?> > > I say this because it strikes me when people say that they are for LOT=true with the logic that
>     since a
>      >>? ? ? ? ?UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like
>      >>? ? ? ? ?coordination and safety are sometimes sprinkled into the argument.
>      >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
>     into
>      >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
>      >>? ? ? ? ?must or must not run.
>      >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
>     only a
>      >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
>     reason of
>      >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
>     moment of
>      >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off
>     into a
>      >>? ? ? ? ?minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn
>      >>? ? ? ? ?option has ran its course.
>      >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
>     miners
>      >>? ? ? ? ?by default. The chains could be called BitcoinLenient and BitcoinStubborn.
>      >>? ? ? ? ?> > > How is that strictly safer or more coordinated?
>      >>? ? ? ? ?> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered
>      >>? ? ? ? ?this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient
>     with
>      >>? ? ? ? ?miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for
>     calling
>      >>? ? ? ? ?bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
>      >>? ? ? ? ?feature is worth a network split down the middle.
>      >>? ? ? ? ?> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will
>      >>? ? ? ? ?become envious enough to put aside our differences on how to behave towards miners and finally activate
>     Taproot.
>      >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any other
>      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
>      >>? ? ? ? ?> > > Cheers
>      >>? ? ? ? ?> > > Ariel Lorenzo-Luaces
>      >>? ? ? ? ?> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev
>     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>      >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
>      >>? ? ? ? ?> > >
>      >>? ? ? ? ?> > > > Yesterday (February 16th) we held a second meeting on Taproot
>      >>? ? ? ? ?> > > > activation on IRC which again was open to all. Despite what appeared
>      >>? ? ? ? ?> > > > to be majority support for LOT=false over LOT=true in the first
>      >>? ? ? ? ?> > > > meeting I (and others) thought the arguments had not been explored in
>      >>? ? ? ? ?> > > > depth and that we should have a follow up meeting almost entirely
>      >>? ? ? ? ?> > > > focused on whether LOT (lockinontimeout) should be set to true or
>      >>? ? ? ? ?> > > > false.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > The meeting was announced here:
>      >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
>      >>? ? ? ? ?> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
>      >>? ? ? ? ?> > > > could. David Harding responded with an additional argument for
>      >>? ? ? ? ?> > > > LOT=false (F7) here:
>      >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > These meetings are very challenging given they are open to all, you
>      >>? ? ? ? ?> > > > don?t know who will attend and you don?t know most people?s views in
>      >>? ? ? ? ?> > > > advance. I tried to give time for both the LOT=true arguments and the
>      >>? ? ? ? ?> > > > LOT=false arguments to be discussed as I knew there was support for
>      >>? ? ? ? ?> > > > both. We only tried evaluating which had more support and which had
>      >>? ? ? ? ?> > > > more strong opposition towards the end of the meeting.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > The conversation log is here:
>      >>? ? ? ? ?> > > > http://gnusha.org/taproot-activation/2021-02-16.log
>     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log
>     <http://gnusha.org/taproot-activation/2021-02-16.log>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > (If you are so inclined you can watch a video of the meeting here.
>      >>? ? ? ? ?> > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
>      >>? ? ? ? ?> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>
>     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
>      >>? ? ? ? ?> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
>      >>? ? ? ? ?<https://bitcoinhackers.org/@lukedashjr/105742918779234566
>     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
>      >>? ? ? ? ?> > > > did manage to come to consensus on everything but LockinOnTimeout.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Activation height range: 693504-745920
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > MASF threshold: 1815/2016 blocks (90%)
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Keep in mind only ~100 people showed for the meetings, hardly
>      >>? ? ? ? ?> > > > representative of the entire community.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > So, these details remain JUST a proposal for now.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > It seems inevitable that there won't be consensus on LOT.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Everyone will have to choose for himself. :/
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Personally I agree with most of this. I agree that there wasn?t
>      >>? ? ? ? ?> > > > overwhelming consensus for either LOT=true or LOT=false. However, from
>      >>? ? ? ? ?> > > > my perspective there was clearly more strong opposition (what would
>      >>? ? ? ? ?> > > > usually be deemed a NACK in Bitcoin Core review terminology) from
>      >>? ? ? ? ?> > > > Bitcoin Core contributors, Lightning developers and other community
>      >>? ? ? ? ?> > > > members against LOT=true than there was for LOT=false. Andrew Chow
>      >>? ? ? ? ?> > > > tried to summarize views from the meeting in this analysis:
>      >>? ? ? ? ?> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
>      >>? ? ? ? ?<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > I am also aware of other current and previous Bitcoin Core
>      >>? ? ? ? ?> > > > contributors and Lightning developers who didn?t attend the meeting in
>      >>? ? ? ? ?> > > > person who are opposed to LOT=true. I don?t want to put them in the
>      >>? ? ? ? ?> > > > spotlight for no reason but if you go through the conversation logs of
>      >>? ? ? ? ?> > > > not only the meeting but the weeks of discussion prior to this meeting
>      >>? ? ? ? ?> > > > you will see their views evaluated on the ##taproot-activation
>      >>? ? ? ? ?> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>
>     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools
>      >>? ? ? ? ?> > > > expressed a preference for lot=false though I don?t know how strong
>      >>? ? ? ? ?> > > > that preference was.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > I am only one voice but it is my current assessment that if we are to
>      >>? ? ? ? ?> > > > attempt to finalize Taproot activation parameters and propose them to
>      >>? ? ? ? ?> > > > the community at this time our only option is to propose LOT=false.
>      >>? ? ? ? ?> > > > Any further delay appears to me counterproductive in our collective
>      >>? ? ? ? ?> > > > aim to get the Taproot soft fork activated as early as possible.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Obviously others are free to disagree with that assessment and
>      >>? ? ? ? ?> > > > continue discussions but personally I will be attempting to avoid
>      >>? ? ? ? ?> > > > those discussions unless prominent new information comes to light or
>      >>? ? ? ? ?> > > > various specific individuals change their minds.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Next week we are planning a code review of the Bitcoin Core PR #19573
>      >>? ? ? ? ?> > > > which was initially delayed because of this LOT discussion. As I?ve
>      >>? ? ? ? ?> > > > said previously that will be loosely following the format of the
>      >>? ? ? ? ?> > > > Bitcoin Core PR review club and will be lower level and more
>      >>? ? ? ? ?> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
>      >>? ? ? ? ?> > > > the IRC channel ##taproot-activation.
>      >>? ? ? ? ?> > > >
>      >>? ? ? ? ?> > > > Thanks to the meeting participants (and those who joined the
>      >>? ? ? ? ?> > > > discussion on the channel prior and post the meeting) for engaging
>      >>? ? ? ? ?> > > > productively and in good faith.
>      >>? ? ? ? ?> >
>      >>? ? ? ? ?> > --
>      >>? ? ? ? ?> > Michael Folkson
>      >>? ? ? ? ?> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>     <mailto:michaelfolkson at gmail.com>>
>      >>? ? ? ? ?> > Keybase: michaelfolkson
>      >>? ? ? ? ?> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>      >>? ? ? ? ?> > _______________________________________________
>      >>? ? ? ? ?> > bitcoin-dev mailing list
>      >>? ? ? ? ?> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
>      >>? ? ? ? ?> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>      >>? ? ? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
>      >>
>      >>
>      >>
>      >>
>      >>? ? ?--
>      >>? ? ?Michael Folkson
>      >>? ? ?Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>     <mailto:michaelfolkson at gmail.com>>
>      >>? ? ?Keybase: michaelfolkson
>      >>? ? ?PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>      >>? ? ?_______________________________________________
>      >>? ? ?bitcoin-dev mailing list
>      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
>      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>      >>? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
>      >
>      >
>      >
>      > --
>      > Michael Folkson
>      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
>     <mailto:michaelfolkson at gmail.com>>
>      > Keybase: michaelfolkson
>      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>     _______________________________________________
>     bitcoin-dev mailing list
>     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> 

From michaelfolkson at gmail.com  Thu Feb 18 14:26:16 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Thu, 18 Feb 2021 14:26:16 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
Message-ID: <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>

Thanks for your response Matt. It is a fair challenge. There is always
going to be an element of risk with soft forks, all we can do is attempt to
minimize that risk. I would argue that risk has been minimized for Taproot.

You know (better than I do in fact) that Bitcoin (and layers built on top
of it) greatly benefit from upgrades such as Taproot. To say we shouldn't
do Taproot or any future soft forks because there is a small but real risk
of chain splits I think is shortsighted. Indeed I think even if we
collectively decided not to do any future soft fork upgrades ever again on
this mailing list that wouldn't stop soft fork attempts from other people
in future.

I don't think there is anything else we can do to minimize that risk for
the Taproot soft fork at this point though I'm open to ideas. To reiterate
that risk will never be zero. I don't think I see Bitcoin as fragile as you
seem to (though admittedly you have a much better understanding than me of
what happened in 2017).

The likely scenario for the Taproot soft fork is LOT turns out to be
entirely irrelevant and miners activate Taproot before it becomes relevant.
And even the unlikely worst case scenario would only cause short term
disruption and wouldn't kill Bitcoin long term.

On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com>
wrote:

> If the eventual outcome is that different implementations (that have
> material *transaction processing* userbases, and I?m not sure to what
> extent that?s true with Knots) ship different consensus rules, we should
> stop here and not activate Taproot. Seriously.
>
> Bitcoin is a consensus system. The absolute worst outcome at all possible
> is to have it fall out of consensus.
>
> Matt
>
> On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> ?
> Right, that is one option. Personally I would prefer a Bitcoin Core
> release sets LOT=false (based on what I have heard from Bitcoin Core
> contributors) and a community effort releases a version with LOT=true. I
> don't think users should be forced to choose something they may have no
> context on before they are allowed to use Bitcoin Core.
>
> My current understanding is that roasbeef is planning to set LOT=false on
> btcd (an alternative protocol implementation to Bitcoin Core) and Luke
> Dashjr hasn't yet decided on Bitcoin Knots.
>
>
>
> On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:
>
>> Good morning all,
>>
>> > "An activation mechanism is a consensus change like any other change,
>> can be contentious like any other change, and we must resolve it like any
>> other change. Otherwise we risk arriving at the darkest timeline."
>> >
>> > Who's we here?
>> >
>> > Release both and let the network decide.
>>
>> A thing that could be done, without mandating either LOT=true or
>> LOT=false, would be to have a release that requires a `taprootlot=1` or
>> `taprootlot=0` and refuses to start if the parameter is not set.
>>
>> This assures everyone that neither choice is being forced on users, and
>> instead what is being forced on users, is for users to make that choice
>> themselves.
>>
>> Regards,
>> ZmnSCPxj
>>
>> >
>> > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >
>> > > Thanks for your response Ariel. It would be useful if you responded
>> to specific points I have made in the mailing list post or at least quote
>> these ephemeral "people" you speak of. I don't know if you're responding to
>> conversation on the IRC channel or on social media etc.
>> > >
>> > > > The argument comes from a naive assumption that users MUST upgrade
>> to the choice that is submitted into code. But in fact this isn't true and
>> some voices in this discussion need to be more humble about what users must
>> or must not run.
>> > >
>> > > I personally have never made this assumption. Of course users aren't
>> forced to run any particular software version, quite the opposite. Defaults
>> set in software versions matter though as many users won't change them.
>> > >
>> > > > Does no one realize that it is a very possible outcome that if
>> LOT=true is released there may be only a handful of people that begin
>> running it while everyone else delays their upgrade (with the very good
>> reason of not getting involved in politics) and a year later those handful
>> of people just become stuck at the moment of MUST_SIGNAL, unable to mine
>> new blocks?
>> > >
>> > > It is a possible outcome but the likely outcome is that miners
>> activate Taproot before LOT is even relevant. I think it is prudent to
>> prepare for the unlikely but possible outcome that miners fail to activate
>> and hence have this discussion now rather than be unprepared for that
>> eventuality. If LOT is set to false in a software release there is the
>> possibility (T2 in
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html)
>> of individuals or a proportion of the community changing LOT to true. In
>> that sense setting LOT=false in a software release appears to be no more
>> safe than LOT=true.
>> > >
>> > > > The result: a wasted year of waiting and a minority of people who
>> didn't want to be lenient with miners by default.
>> > >
>> > > There is the (unlikely but possible) possibility of a wasted year if
>> LOT is set to false and miners fail to activate. I'm not convinced by this
>> perception that LOT=true is antagonistic to miners. I actually think it
>> offers them clarity on what will happen over a year time period and removes
>> the need for coordinated or uncoordinated community UASF efforts on top of
>> LOT=false.
>> > >
>> > > > An activation mechanism is a consensus change like any other
>> change, can be contentious like any other change, and we must resolve it
>> like any other change. Otherwise we risk arriving at the darkest timeline.
>> > >
>> > > I don't know what you are recommending here to avoid "this darkest
>> timeline". Open discussions have occurred and are continuing and in my
>> mailing list post that you responded to **I recommended we propose
>> LOT=false be set in protocol implementations such as Bitcoin Core**. I do
>> think this apocalyptic language isn't particularly helpful. In an open
>> consensus system discussion is healthy, we should prepare for bad or worst
>> case scenarios in advance and doing so is not antagonistic or destructive.
>> Mining pools have pledged support for Taproot but we don't build secure
>> systems based on pledges of support, we build them to minimize trust in any
>> human actors. We can be grateful that people like Alejandro have worked
>> hard on taprootactivation.com (and this effort has informed the
>> discussion) without taking pledges of support as cast iron guarantees.
>> > >
>> > > TL;DR It sounds like you agree with my recommendation to set
>> LOT=false in protocol implementations in my email :)
>> > >
>> > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <
>> arielluaces at gmail.com> wrote:
>> > >
>> > > > Something what strikes me about the conversation is the emotion
>> surrounding the letters UASF.
>> > > > It appears as if people discuss UASF as if it's a massive tidal
>> wave of support that is inevitable, like we saw during segwit activation.
>> But the actual definition is "any activation that is not a MASF".
>> > > > A UASF can consist of a single node, ten nodes, a thousand, half of
>> all nodes, all business' nodes, or even all the non mining nodes. On
>> another dimension it can have zero mining support, 51% support, 49%
>> support, or any support right up against a miner activation threshold.
>> > > > Hell a UASF doesn't even need code or even a single node running as
>> long as it exists as a possibility in people's minds.
>> > > > The only thing a UASF doesn't have is miner support above an agreed
>> activation threshold (some number above %51).
>> > > > I say this because it strikes me when people say that they are for
>> LOT=true with the logic that since a UASF is guaranteed to happen then it's
>> better to just make it default from the beginning. Words like coordination
>> and safety are sometimes sprinkled into the argument.
>> > > > The argument comes from a naive assumption that users MUST upgrade
>> to the choice that is submitted into code. But in fact this isn't true and
>> some voices in this discussion need to be more humble about what users must
>> or must not run.
>> > > > Does no one realize that it is a very possible outcome that if
>> LOT=true is released there may be only a handful of people that begin
>> running it while everyone else delays their upgrade (with the very good
>> reason of not getting involved in politics) and a year later those handful
>> of people just become stuck at the moment of MUST_SIGNAL, unable to mine
>> new blocks? Or attracting a minority of miners, activating, and forking off
>> into a minority fork. Then a lot=false could be started that ends up
>> activating the feature now that the stubborn option has ran its course.
>> > > > The result: a wasted year of waiting and a minority of people who
>> didn't want to be lenient with miners by default. The chains could be
>> called BitcoinLenient and BitcoinStubborn.
>> > > > How is that strictly safer or more coordinated?
>> > > > I may be in the minority, or maybe a silent majority, or maybe a
>> majority that just hasn't considered this as a choice but honestly if there
>> is contention about whether we're going to be stubborn or lenient with
>> miners for Taproot and in the future then I prefer to just not activate
>> anything at all. I'm fine for calling bitcoin ossified, accepting that
>> segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
>> feature is worth a network split down the middle.
>> > > > Maybe in 10 or 20 years, when other blockchains implement features
>> like Taproot and many more, we will become envious enough to put aside our
>> differences on how to behave towards miners and finally activate Taproot.
>> > > > An activation mechanism is a consensus change like any other
>> change, can be contentious like any other change, and we must resolve it
>> like any other change. Otherwise we risk arriving at the darkest timeline.
>> > > > Cheers
>> > > > Ariel Lorenzo-Luaces
>> > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > > >
>> > > > > Yesterday (February 16th) we held a second meeting on Taproot
>> > > > > activation on IRC which again was open to all. Despite what
>> appeared
>> > > > > to be majority support for LOT=false over LOT=true in the first
>> > > > > meeting I (and others) thought the arguments had not been
>> explored in
>> > > > > depth and that we should have a follow up meeting almost entirely
>> > > > > focused on whether LOT (lockinontimeout) should be set to true or
>> > > > > false.
>> > > > >
>> > > > > The meeting was announced here:
>> > > > >
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>> > > > >
>> > > > > In that mailing list post I outlined the arguments for LOT=true
>> (T1 to
>> > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest
>> form I
>> > > > > could. David Harding responded with an additional argument for
>> > > > > LOT=false (F7) here:
>> > > > >
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>> > > > >
>> > > > > These meetings are very challenging given they are open to all,
>> you
>> > > > > don?t know who will attend and you don?t know most people?s views
>> in
>> > > > > advance. I tried to give time for both the LOT=true arguments and
>> the
>> > > > > LOT=false arguments to be discussed as I knew there was support
>> for
>> > > > > both. We only tried evaluating which had more support and which
>> had
>> > > > > more strong opposition towards the end of the meeting.
>> > > > >
>> > > > > The conversation log is here:
>> > > > > http://gnusha.org/taproot-activation/2021-02-16.log
>> > > > >
>> > > > > (If you are so inclined you can watch a video of the meeting here.
>> > > > > Thanks to the YouTube account ?Bitcoin? for setting up the
>> livestream:
>> > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM)
>> > > > >
>> > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon
>> here:
>> > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
>> > > > >
>> > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive,
>> but we
>> > > > > did manage to come to consensus on everything but LockinOnTimeout.
>> > > > >
>> > > > > Activation height range: 693504-745920
>> > > > >
>> > > > > MASF threshold: 1815/2016 blocks (90%)
>> > > > >
>> > > > > Keep in mind only ~100 people showed for the meetings, hardly
>> > > > > representative of the entire community.
>> > > > >
>> > > > > So, these details remain JUST a proposal for now.
>> > > > >
>> > > > > It seems inevitable that there won't be consensus on LOT.
>> > > > >
>> > > > > Everyone will have to choose for himself. :/
>> > > > >
>> > > > > Personally I agree with most of this. I agree that there wasn?t
>> > > > > overwhelming consensus for either LOT=true or LOT=false. However,
>> from
>> > > > > my perspective there was clearly more strong opposition (what
>> would
>> > > > > usually be deemed a NACK in Bitcoin Core review terminology) from
>> > > > > Bitcoin Core contributors, Lightning developers and other
>> community
>> > > > > members against LOT=true than there was for LOT=false. Andrew Chow
>> > > > > tried to summarize views from the meeting in this analysis:
>> > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>> > > > >
>> > > > > I am also aware of other current and previous Bitcoin Core
>> > > > > contributors and Lightning developers who didn?t attend the
>> meeting in
>> > > > > person who are opposed to LOT=true. I don?t want to put them in
>> the
>> > > > > spotlight for no reason but if you go through the conversation
>> logs of
>> > > > > not only the meeting but the weeks of discussion prior to this
>> meeting
>> > > > > you will see their views evaluated on the ##taproot-activation
>> > > > > channel. In addition, on taprootactivation.com some mining pools
>> > > > > expressed a preference for lot=false though I don?t know how
>> strong
>> > > > > that preference was.
>> > > > >
>> > > > > I am only one voice but it is my current assessment that if we
>> are to
>> > > > > attempt to finalize Taproot activation parameters and propose
>> them to
>> > > > > the community at this time our only option is to propose
>> LOT=false.
>> > > > > Any further delay appears to me counterproductive in our
>> collective
>> > > > > aim to get the Taproot soft fork activated as early as possible.
>> > > > >
>> > > > > Obviously others are free to disagree with that assessment and
>> > > > > continue discussions but personally I will be attempting to avoid
>> > > > > those discussions unless prominent new information comes to light
>> or
>> > > > > various specific individuals change their minds.
>> > > > >
>> > > > > Next week we are planning a code review of the Bitcoin Core PR
>> #19573
>> > > > > which was initially delayed because of this LOT discussion. As
>> I?ve
>> > > > > said previously that will be loosely following the format of the
>> > > > > Bitcoin Core PR review club and will be lower level and more
>> > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC
>> on
>> > > > > the IRC channel ##taproot-activation.
>> > > > >
>> > > > > Thanks to the meeting participants (and those who joined the
>> > > > > discussion on the channel prior and post the meeting) for engaging
>> > > > > productively and in good faith.
>> > >
>> > > --
>> > > Michael Folkson
>> > > Email: michaelfolkson at gmail.com
>> > > Keybase: michaelfolkson
>> > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>> > > _______________________________________________
>> > > bitcoin-dev mailing list
>> > > bitcoin-dev at lists.linuxfoundation.org
>> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>>
>
> --
> Michael Folkson
> Email: michaelfolkson at gmail.com
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>

-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/7735bd99/attachment-0001.html>

From michaelfolkson at gmail.com  Thu Feb 18 14:51:47 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Thu, 18 Feb 2021 14:51:47 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
Message-ID: <CAFvNmHQJAtxchH9fi8tjQa5zC2+9URu094=_joHQocBBFGFPVQ@mail.gmail.com>

> getting unlucky and hitting a 4-block reorg that happens to include a
double-spend and some PR around an exchange losing millions would be worse
than having Taproot is good.

We are at the point where an upgrade that confers significant long term
benefits for the whole ecosystem is not as important as bad short term PR?
That is a depressing outlook if that is what you believe.

Even in that worst case scenario exchanges should not lose money if they
are competent and are able to manage that risk.

On Thu, Feb 18, 2021 at 2:42 PM Matt Corallo <lf-lists at mattcorallo.com>
wrote:

> We've had several softforks in Bitcoin which, through the course of their
> activation, had a several-block reorg. That
> should be indication enough that we need to very carefully consider
> activation to ensure we reduce the risk of that as
> much as absolutely possible. Again, while I think Taproot is a huge
> improvement and am looking forward to being able to
> use it, getting unlucky and hitting a 4-block reorg that happens to
> include a double-spend and some PR around an
> exchange losing millions would be worse than having Taproot is good.
>
> Matt
>
> On 2/18/21 09:26, Michael Folkson wrote:
> > Thanks for your response Matt. It is a fair challenge. There is always
> going to be an element of risk with soft forks,
> > all we can do is attempt to minimize that risk. I would argue that risk
> has been minimized for Taproot.
> >
> > You know (better than I do in fact) that Bitcoin (and layers built on
> top of it) greatly benefit from upgrades such as
> > Taproot. To say we shouldn't do Taproot or any future soft forks because
> there is a small but real risk of chain splits
> > I think is shortsighted. Indeed I think even if we collectively decided
> not to do any future soft fork upgrades ever
> > again on this mailing list that wouldn't stop soft fork attempts from
> other people in future.
> >
> > I don't think there is anything else we can do to minimize that risk for
> the Taproot soft fork at this point though I'm
> > open to ideas. To reiterate that risk will never be zero. I don't think
> I see Bitcoin as fragile as you seem to (though
> > admittedly you have a much better understanding than me of what happened
> in 2017).
> >
> > The likely scenario for the Taproot soft fork is LOT turns out to be
> entirely irrelevant and miners activate Taproot
> > before it becomes relevant. And even the unlikely worst case scenario
> would only cause short term disruption and
> > wouldn't kill Bitcoin long term.
> >
> > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com
> <mailto:lf-lists at mattcorallo.com>> wrote:
> >
> >     If the eventual outcome is that different implementations (that have
> material *transaction processing* userbases,
> >     and I?m not sure to what extent that?s true with Knots) ship
> different consensus rules, we should stop here and not
> >     activate Taproot. Seriously.
> >
> >     Bitcoin is a consensus system. The absolute worst outcome at all
> possible is to have it fall out of consensus.
> >
> >     Matt
> >
> >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org
> >>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >>
> >>     ?
> >>     Right, that is one option. Personally I would prefer a Bitcoin Core
> release sets LOT=false (based on what I have
> >>     heard from Bitcoin Core contributors) and a community effort
> releases a version with LOT=true. I don't think users
> >>     should be forced to choose something they may have no context on
> before they are allowed to use Bitcoin Core.
> >>
> >>     My current understanding is that roasbeef is planning to set
> LOT=false on btcd (an alternative protocol
> >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided
> on Bitcoin Knots.
> >>
> >>
> >>
> >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com
> <mailto:ZmnSCPxj at protonmail.com>> wrote:
> >>
> >>         Good morning all,
> >>
> >>         > "An activation mechanism is a consensus change like any other
> change, can be contentious like any other
> >>         change, and we must resolve it like any other change. Otherwise
> we risk arriving at the darkest timeline."
> >>         >
> >>         > Who's we here?
> >>         >
> >>         > Release both and let the network decide.
> >>
> >>         A thing that could be done, without mandating either LOT=true
> or LOT=false, would be to have a release that
> >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to
> start if the parameter is not set.
> >>
> >>         This assures everyone that neither choice is being forced on
> users, and instead what is being forced on users,
> >>         is for users to make that choice themselves.
> >>
> >>         Regards,
> >>         ZmnSCPxj
> >>
> >>         >
> >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via
> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >>         >
> >>         > > Thanks for your response Ariel. It would be useful if you
> responded to specific points I have made in the
> >>         mailing list post or at least quote these ephemeral "people"
> you speak of. I don't know if you're responding
> >>         to conversation on the IRC channel or on social media etc.
> >>         > >
> >>         > > > The argument comes from a naive assumption that users
> MUST upgrade to the choice that is submitted into
> >>         code. But in fact this isn't true and some voices in this
> discussion need to be more humble about what users
> >>         must or must not run.
> >>         > >
> >>         > > I personally have never made this assumption. Of course
> users aren't forced to run any particular software
> >>         version, quite the opposite. Defaults set in software versions
> matter though as many users won't change them.
> >>         > >
> >>         > > > Does no one realize that it is a very possible outcome
> that if LOT=true is released there may be only a
> >>         handful of people that begin running it while everyone else
> delays their upgrade (with the very good reason of
> >>         not getting involved in politics) and a year later those
> handful of people just become stuck at the moment of
> >>         MUST_SIGNAL, unable to mine new blocks?
> >>         > >
> >>         > > It is a possible outcome but the likely outcome is that
> miners activate Taproot before LOT is even
> >>         relevant. I think it is prudent to prepare for the unlikely but
> possible outcome that miners fail to activate
> >>         and hence have this discussion now rather than be unprepared
> for that eventuality. If LOT is set to false in a
> >>         software release there is the possibility (T2 in
> >>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >>         <
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>)
> of individuals or a
> >>         proportion of the community changing LOT to true. In that sense
> setting LOT=false in a software release
> >>         appears to be no more safe than LOT=true.
> >>         > >
> >>         > > > The result: a wasted year of waiting and a minority of
> people who didn't want to be lenient with miners
> >>         by default.
> >>         > >
> >>         > > There is the (unlikely but possible) possibility of a
> wasted year if LOT is set to false and miners fail
> >>         to activate. I'm not convinced by this perception that LOT=true
> is antagonistic to miners. I actually think it
> >>         offers them clarity on what will happen over a year time period
> and removes the need for coordinated or
> >>         uncoordinated community UASF efforts on top of LOT=false.
> >>         > >
> >>         > > > An activation mechanism is a consensus change like any
> other change, can be contentious like any other
> >>         change, and we must resolve it like any other change. Otherwise
> we risk arriving at the darkest timeline.
> >>         > >
> >>         > > I don't know what you are recommending here to avoid "this
> darkest timeline". Open discussions have
> >>         occurred and are continuing and in my mailing list post that
> you responded to **I recommended we propose
> >>         LOT=false be set in protocol implementations such as Bitcoin
> Core**. I do think this apocalyptic language
> >>         isn't particularly helpful. In an open consensus system
> discussion is healthy, we should prepare for bad or
> >>         worst case scenarios in advance and doing so is not
> antagonistic or destructive. Mining pools have pledged
> >>         support for Taproot but we don't build secure systems based on
> pledges of support, we build them to minimize
> >>         trust in any human actors. We can be grateful that people like
> Alejandro have worked hard on
> >>         taprootactivation.com <http://taprootactivation.com> (and this
> effort has informed the discussion) without
> >>         taking pledges of support as cast iron guarantees.
> >>         > >
> >>         > > TL;DR It sounds like you agree with my recommendation to
> set LOT=false in protocol implementations in my
> >>         email :)
> >>         > >
> >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <
> arielluaces at gmail.com
> >>         <mailto:arielluaces at gmail.com>> wrote:
> >>         > >
> >>         > > > Something what strikes me about the conversation is the
> emotion surrounding the letters UASF.
> >>         > > > It appears as if people discuss UASF as if it's a massive
> tidal wave of support that is inevitable, like
> >>         we saw during segwit activation. But the actual definition is
> "any activation that is not a MASF".
> >>         > > > A UASF can consist of a single node, ten nodes, a
> thousand, half of all nodes, all business' nodes, or
> >>         even all the non mining nodes. On another dimension it can have
> zero mining support, 51% support, 49% support,
> >>         or any support right up against a miner activation threshold.
> >>         > > > Hell a UASF doesn't even need code or even a single node
> running as long as it exists as a possibility
> >>         in people's minds.
> >>         > > > The only thing a UASF doesn't have is miner support above
> an agreed activation threshold (some number
> >>         above %51).
> >>         > > > I say this because it strikes me when people say that
> they are for LOT=true with the logic that since a
> >>         UASF is guaranteed to happen then it's better to just make it
> default from the beginning. Words like
> >>         coordination and safety are sometimes sprinkled into the
> argument.
> >>         > > > The argument comes from a naive assumption that users
> MUST upgrade to the choice that is submitted into
> >>         code. But in fact this isn't true and some voices in this
> discussion need to be more humble about what users
> >>         must or must not run.
> >>         > > > Does no one realize that it is a very possible outcome
> that if LOT=true is released there may be only a
> >>         handful of people that begin running it while everyone else
> delays their upgrade (with the very good reason of
> >>         not getting involved in politics) and a year later those
> handful of people just become stuck at the moment of
> >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a
> minority of miners, activating, and forking off into a
> >>         minority fork. Then a lot=false could be started that ends up
> activating the feature now that the stubborn
> >>         option has ran its course.
> >>         > > > The result: a wasted year of waiting and a minority of
> people who didn't want to be lenient with miners
> >>         by default. The chains could be called BitcoinLenient and
> BitcoinStubborn.
> >>         > > > How is that strictly safer or more coordinated?
> >>         > > > I may be in the minority, or maybe a silent majority, or
> maybe a majority that just hasn't considered
> >>         this as a choice but honestly if there is contention about
> whether we're going to be stubborn or lenient with
> >>         miners for Taproot and in the future then I prefer to just not
> activate anything at all. I'm fine for calling
> >>         bitcoin ossified, accepting that segwit is Bitcoin's last
> network upgrade. Taproot is amazing but no new
> >>         feature is worth a network split down the middle.
> >>         > > > Maybe in 10 or 20 years, when other blockchains implement
> features like Taproot and many more, we will
> >>         become envious enough to put aside our differences on how to
> behave towards miners and finally activate Taproot.
> >>         > > > An activation mechanism is a consensus change like any
> other change, can be contentious like any other
> >>         change, and we must resolve it like any other change. Otherwise
> we risk arriving at the darkest timeline.
> >>         > > > Cheers
> >>         > > > Ariel Lorenzo-Luaces
> >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via
> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >>         > > >
> >>         > > > > Yesterday (February 16th) we held a second meeting on
> Taproot
> >>         > > > > activation on IRC which again was open to all. Despite
> what appeared
> >>         > > > > to be majority support for LOT=false over LOT=true in
> the first
> >>         > > > > meeting I (and others) thought the arguments had not
> been explored in
> >>         > > > > depth and that we should have a follow up meeting
> almost entirely
> >>         > > > > focused on whether LOT (lockinontimeout) should be set
> to true or
> >>         > > > > false.
> >>         > > > >
> >>         > > > > The meeting was announced here:
> >>         > > > >
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >>         <
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >
> >>         > > > >
> >>         > > > > In that mailing list post I outlined the arguments for
> LOT=true (T1 to
> >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their
> strongest form I
> >>         > > > > could. David Harding responded with an additional
> argument for
> >>         > > > > LOT=false (F7) here:
> >>         > > > >
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >>         <
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >
> >>         > > > >
> >>         > > > > These meetings are very challenging given they are open
> to all, you
> >>         > > > > don?t know who will attend and you don?t know most
> people?s views in
> >>         > > > > advance. I tried to give time for both the LOT=true
> arguments and the
> >>         > > > > LOT=false arguments to be discussed as I knew there was
> support for
> >>         > > > > both. We only tried evaluating which had more support
> and which had
> >>         > > > > more strong opposition towards the end of the meeting.
> >>         > > > >
> >>         > > > > The conversation log is here:
> >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log <
> http://gnusha.org/taproot-activation/2021-02-16.log>
> >>         > > > >
> >>         > > > > (If you are so inclined you can watch a video of the
> meeting here.
> >>         > > > > Thanks to the YouTube account ?Bitcoin? for setting up
> the livestream:
> >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <
> https://www.youtube.com/watch?v=vpl5q1ovMLM>)
> >>         > > > >
> >>         > > > > A summary of the meeting was provided by Luke Dashjr on
> Mastodon here:
> >>         > > > >
> https://bitcoinhackers.org/@lukedashjr/105742918779234566
> >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
> >>         > > > >
> >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely
> unproductive, but we
> >>         > > > > did manage to come to consensus on everything but
> LockinOnTimeout.
> >>         > > > >
> >>         > > > > Activation height range: 693504-745920
> >>         > > > >
> >>         > > > > MASF threshold: 1815/2016 blocks (90%)
> >>         > > > >
> >>         > > > > Keep in mind only ~100 people showed for the meetings,
> hardly
> >>         > > > > representative of the entire community.
> >>         > > > >
> >>         > > > > So, these details remain JUST a proposal for now.
> >>         > > > >
> >>         > > > > It seems inevitable that there won't be consensus on
> LOT.
> >>         > > > >
> >>         > > > > Everyone will have to choose for himself. :/
> >>         > > > >
> >>         > > > > Personally I agree with most of this. I agree that
> there wasn?t
> >>         > > > > overwhelming consensus for either LOT=true or
> LOT=false. However, from
> >>         > > > > my perspective there was clearly more strong opposition
> (what would
> >>         > > > > usually be deemed a NACK in Bitcoin Core review
> terminology) from
> >>         > > > > Bitcoin Core contributors, Lightning developers and
> other community
> >>         > > > > members against LOT=true than there was for LOT=false.
> Andrew Chow
> >>         > > > > tried to summarize views from the meeting in this
> analysis:
> >>         > > > >
> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> >>         <
> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
> >>         > > > >
> >>         > > > > I am also aware of other current and previous Bitcoin
> Core
> >>         > > > > contributors and Lightning developers who didn?t attend
> the meeting in
> >>         > > > > person who are opposed to LOT=true. I don?t want to put
> them in the
> >>         > > > > spotlight for no reason but if you go through the
> conversation logs of
> >>         > > > > not only the meeting but the weeks of discussion prior
> to this meeting
> >>         > > > > you will see their views evaluated on the
> ##taproot-activation
> >>         > > > > channel. In addition, on taprootactivation.com <
> http://taprootactivation.com> some mining pools
> >>         > > > > expressed a preference for lot=false though I don?t
> know how strong
> >>         > > > > that preference was.
> >>         > > > >
> >>         > > > > I am only one voice but it is my current assessment
> that if we are to
> >>         > > > > attempt to finalize Taproot activation parameters and
> propose them to
> >>         > > > > the community at this time our only option is to
> propose LOT=false.
> >>         > > > > Any further delay appears to me counterproductive in
> our collective
> >>         > > > > aim to get the Taproot soft fork activated as early as
> possible.
> >>         > > > >
> >>         > > > > Obviously others are free to disagree with that
> assessment and
> >>         > > > > continue discussions but personally I will be
> attempting to avoid
> >>         > > > > those discussions unless prominent new information
> comes to light or
> >>         > > > > various specific individuals change their minds.
> >>         > > > >
> >>         > > > > Next week we are planning a code review of the Bitcoin
> Core PR #19573
> >>         > > > > which was initially delayed because of this LOT
> discussion. As I?ve
> >>         > > > > said previously that will be loosely following the
> format of the
> >>         > > > > Bitcoin Core PR review club and will be lower level and
> more
> >>         > > > > technical. That is planned for Tuesday February 23rd at
> 19:00 UTC on
> >>         > > > > the IRC channel ##taproot-activation.
> >>         > > > >
> >>         > > > > Thanks to the meeting participants (and those who
> joined the
> >>         > > > > discussion on the channel prior and post the meeting)
> for engaging
> >>         > > > > productively and in good faith.
> >>         > >
> >>         > > --
> >>         > > Michael Folkson
> >>         > > Email: michaelfolkson at gmail.com <mailto:
> michaelfolkson at gmail.com>
> >>         > > Keybase: michaelfolkson
> >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >>         > > _______________________________________________
> >>         > > bitcoin-dev mailing list
> >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:
> bitcoin-dev at lists.linuxfoundation.org>
> >>         > >
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >>
> >>
> >>
> >>
> >>     --
> >>     Michael Folkson
> >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
> >>     Keybase: michaelfolkson
> >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >>     _______________________________________________
> >>     bitcoin-dev mailing list
> >>     bitcoin-dev at lists.linuxfoundation.org <mailto:
> bitcoin-dev at lists.linuxfoundation.org>
> >>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >
> >
> >
> > --
> > Michael Folkson
> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
> > Keybase: michaelfolkson
> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>


-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/6d75f9dd/attachment-0001.html>

From keagan.mcclelland at gmail.com  Thu Feb 18 15:04:53 2021
From: keagan.mcclelland at gmail.com (Keagan McClelland)
Date: Thu, 18 Feb 2021 08:04:53 -0700
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
Message-ID: <CALeFGL1e+q2mrCox99sUOAXYu3qcC7Xce7AfkuKuLPmxh1oSiA@mail.gmail.com>

Hi all,

I think it's important for us to consider what is actually being considered
for activation here.

The designation of "soft fork" is accurate but I don't think it adequately
conveys how non-intrusive a change like this is. All that taproot does
(unless I'm completely missing something) is imbue a previously undefined
script version with actual semantics. In order for a chain reorg to take
place it would mean that someone would have to have a use case for that
script version today. This is something I think that we can easily check by
digging through the UTXO set or history. If anyone is using that script
version, we absolutely should not be using it, but that doesn't mean that
we can't switch to a script version that no one is actually using.

If no one is even attempting to use the script version, then the change has
no effect on whether a chain split occurs because there is simply no block
that contains a transaction that only some of the network will accept.

Furthermore, I don't know how Bitcoin can stand the test of time if we
allow developers who rely on "undefined behavior" (which the taproot script
version presently is) to exert tremendous influence over what code does or
does not get run. This isn't a soft fork that makes some particular UTXO's
unspendable. It isn't one that bans miners from collecting fees. It is a
change that means that certain "always accept" transactions actually have
real conditions you have to meet. I can't imagine a less intrusive change.

On the other hand, choosing to let L=F be a somewhat final call sets a very
real precedent that 10% of what I estimate to be 1% of bitcoin users can
effectively block any change from here on forward. At that point we are
saying that miners are in control of network consensus in ways they have
not been up until now. I don't think this is a more desirable outcome to
let ~0.1% of the network get to block *non-intrusive* changes that the rest
of the network wants.

I can certainly live with an L=F attempt as a way to punt on the
discussion, maybe the activation happens and this will all be fine. But if
it doesn't, I hardly think that users of Bitcoin are just going to be like
"well, guess that's it for Taproot". I have no idea what ensues at that
point, but probably another community led UASF movement.

I wasn't super well educated on this stuff back in '17 when Segwit went
down, as I was new at that time, so if I'm missing something please say so.
But from my point of view, we can't treat all soft forks as equal.

Keagan

On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> We've had several softforks in Bitcoin which, through the course of their
> activation, had a several-block reorg. That
> should be indication enough that we need to very carefully consider
> activation to ensure we reduce the risk of that as
> much as absolutely possible. Again, while I think Taproot is a huge
> improvement and am looking forward to being able to
> use it, getting unlucky and hitting a 4-block reorg that happens to
> include a double-spend and some PR around an
> exchange losing millions would be worse than having Taproot is good.
>
> Matt
>
> On 2/18/21 09:26, Michael Folkson wrote:
> > Thanks for your response Matt. It is a fair challenge. There is always
> going to be an element of risk with soft forks,
> > all we can do is attempt to minimize that risk. I would argue that risk
> has been minimized for Taproot.
> >
> > You know (better than I do in fact) that Bitcoin (and layers built on
> top of it) greatly benefit from upgrades such as
> > Taproot. To say we shouldn't do Taproot or any future soft forks because
> there is a small but real risk of chain splits
> > I think is shortsighted. Indeed I think even if we collectively decided
> not to do any future soft fork upgrades ever
> > again on this mailing list that wouldn't stop soft fork attempts from
> other people in future.
> >
> > I don't think there is anything else we can do to minimize that risk for
> the Taproot soft fork at this point though I'm
> > open to ideas. To reiterate that risk will never be zero. I don't think
> I see Bitcoin as fragile as you seem to (though
> > admittedly you have a much better understanding than me of what happened
> in 2017).
> >
> > The likely scenario for the Taproot soft fork is LOT turns out to be
> entirely irrelevant and miners activate Taproot
> > before it becomes relevant. And even the unlikely worst case scenario
> would only cause short term disruption and
> > wouldn't kill Bitcoin long term.
> >
> > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com
> <mailto:lf-lists at mattcorallo.com>> wrote:
> >
> >     If the eventual outcome is that different implementations (that have
> material *transaction processing* userbases,
> >     and I?m not sure to what extent that?s true with Knots) ship
> different consensus rules, we should stop here and not
> >     activate Taproot. Seriously.
> >
> >     Bitcoin is a consensus system. The absolute worst outcome at all
> possible is to have it fall out of consensus.
> >
> >     Matt
> >
> >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org
> >>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >>
> >>     ?
> >>     Right, that is one option. Personally I would prefer a Bitcoin Core
> release sets LOT=false (based on what I have
> >>     heard from Bitcoin Core contributors) and a community effort
> releases a version with LOT=true. I don't think users
> >>     should be forced to choose something they may have no context on
> before they are allowed to use Bitcoin Core.
> >>
> >>     My current understanding is that roasbeef is planning to set
> LOT=false on btcd (an alternative protocol
> >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided
> on Bitcoin Knots.
> >>
> >>
> >>
> >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com
> <mailto:ZmnSCPxj at protonmail.com>> wrote:
> >>
> >>         Good morning all,
> >>
> >>         > "An activation mechanism is a consensus change like any other
> change, can be contentious like any other
> >>         change, and we must resolve it like any other change. Otherwise
> we risk arriving at the darkest timeline."
> >>         >
> >>         > Who's we here?
> >>         >
> >>         > Release both and let the network decide.
> >>
> >>         A thing that could be done, without mandating either LOT=true
> or LOT=false, would be to have a release that
> >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to
> start if the parameter is not set.
> >>
> >>         This assures everyone that neither choice is being forced on
> users, and instead what is being forced on users,
> >>         is for users to make that choice themselves.
> >>
> >>         Regards,
> >>         ZmnSCPxj
> >>
> >>         >
> >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via
> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >>         >
> >>         > > Thanks for your response Ariel. It would be useful if you
> responded to specific points I have made in the
> >>         mailing list post or at least quote these ephemeral "people"
> you speak of. I don't know if you're responding
> >>         to conversation on the IRC channel or on social media etc.
> >>         > >
> >>         > > > The argument comes from a naive assumption that users
> MUST upgrade to the choice that is submitted into
> >>         code. But in fact this isn't true and some voices in this
> discussion need to be more humble about what users
> >>         must or must not run.
> >>         > >
> >>         > > I personally have never made this assumption. Of course
> users aren't forced to run any particular software
> >>         version, quite the opposite. Defaults set in software versions
> matter though as many users won't change them.
> >>         > >
> >>         > > > Does no one realize that it is a very possible outcome
> that if LOT=true is released there may be only a
> >>         handful of people that begin running it while everyone else
> delays their upgrade (with the very good reason of
> >>         not getting involved in politics) and a year later those
> handful of people just become stuck at the moment of
> >>         MUST_SIGNAL, unable to mine new blocks?
> >>         > >
> >>         > > It is a possible outcome but the likely outcome is that
> miners activate Taproot before LOT is even
> >>         relevant. I think it is prudent to prepare for the unlikely but
> possible outcome that miners fail to activate
> >>         and hence have this discussion now rather than be unprepared
> for that eventuality. If LOT is set to false in a
> >>         software release there is the possibility (T2 in
> >>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >>         <
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>)
> of individuals or a
> >>         proportion of the community changing LOT to true. In that sense
> setting LOT=false in a software release
> >>         appears to be no more safe than LOT=true.
> >>         > >
> >>         > > > The result: a wasted year of waiting and a minority of
> people who didn't want to be lenient with miners
> >>         by default.
> >>         > >
> >>         > > There is the (unlikely but possible) possibility of a
> wasted year if LOT is set to false and miners fail
> >>         to activate. I'm not convinced by this perception that LOT=true
> is antagonistic to miners. I actually think it
> >>         offers them clarity on what will happen over a year time period
> and removes the need for coordinated or
> >>         uncoordinated community UASF efforts on top of LOT=false.
> >>         > >
> >>         > > > An activation mechanism is a consensus change like any
> other change, can be contentious like any other
> >>         change, and we must resolve it like any other change. Otherwise
> we risk arriving at the darkest timeline.
> >>         > >
> >>         > > I don't know what you are recommending here to avoid "this
> darkest timeline". Open discussions have
> >>         occurred and are continuing and in my mailing list post that
> you responded to **I recommended we propose
> >>         LOT=false be set in protocol implementations such as Bitcoin
> Core**. I do think this apocalyptic language
> >>         isn't particularly helpful. In an open consensus system
> discussion is healthy, we should prepare for bad or
> >>         worst case scenarios in advance and doing so is not
> antagonistic or destructive. Mining pools have pledged
> >>         support for Taproot but we don't build secure systems based on
> pledges of support, we build them to minimize
> >>         trust in any human actors. We can be grateful that people like
> Alejandro have worked hard on
> >>         taprootactivation.com <http://taprootactivation.com> (and this
> effort has informed the discussion) without
> >>         taking pledges of support as cast iron guarantees.
> >>         > >
> >>         > > TL;DR It sounds like you agree with my recommendation to
> set LOT=false in protocol implementations in my
> >>         email :)
> >>         > >
> >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <
> arielluaces at gmail.com
> >>         <mailto:arielluaces at gmail.com>> wrote:
> >>         > >
> >>         > > > Something what strikes me about the conversation is the
> emotion surrounding the letters UASF.
> >>         > > > It appears as if people discuss UASF as if it's a massive
> tidal wave of support that is inevitable, like
> >>         we saw during segwit activation. But the actual definition is
> "any activation that is not a MASF".
> >>         > > > A UASF can consist of a single node, ten nodes, a
> thousand, half of all nodes, all business' nodes, or
> >>         even all the non mining nodes. On another dimension it can have
> zero mining support, 51% support, 49% support,
> >>         or any support right up against a miner activation threshold.
> >>         > > > Hell a UASF doesn't even need code or even a single node
> running as long as it exists as a possibility
> >>         in people's minds.
> >>         > > > The only thing a UASF doesn't have is miner support above
> an agreed activation threshold (some number
> >>         above %51).
> >>         > > > I say this because it strikes me when people say that
> they are for LOT=true with the logic that since a
> >>         UASF is guaranteed to happen then it's better to just make it
> default from the beginning. Words like
> >>         coordination and safety are sometimes sprinkled into the
> argument.
> >>         > > > The argument comes from a naive assumption that users
> MUST upgrade to the choice that is submitted into
> >>         code. But in fact this isn't true and some voices in this
> discussion need to be more humble about what users
> >>         must or must not run.
> >>         > > > Does no one realize that it is a very possible outcome
> that if LOT=true is released there may be only a
> >>         handful of people that begin running it while everyone else
> delays their upgrade (with the very good reason of
> >>         not getting involved in politics) and a year later those
> handful of people just become stuck at the moment of
> >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a
> minority of miners, activating, and forking off into a
> >>         minority fork. Then a lot=false could be started that ends up
> activating the feature now that the stubborn
> >>         option has ran its course.
> >>         > > > The result: a wasted year of waiting and a minority of
> people who didn't want to be lenient with miners
> >>         by default. The chains could be called BitcoinLenient and
> BitcoinStubborn.
> >>         > > > How is that strictly safer or more coordinated?
> >>         > > > I may be in the minority, or maybe a silent majority, or
> maybe a majority that just hasn't considered
> >>         this as a choice but honestly if there is contention about
> whether we're going to be stubborn or lenient with
> >>         miners for Taproot and in the future then I prefer to just not
> activate anything at all. I'm fine for calling
> >>         bitcoin ossified, accepting that segwit is Bitcoin's last
> network upgrade. Taproot is amazing but no new
> >>         feature is worth a network split down the middle.
> >>         > > > Maybe in 10 or 20 years, when other blockchains implement
> features like Taproot and many more, we will
> >>         become envious enough to put aside our differences on how to
> behave towards miners and finally activate Taproot.
> >>         > > > An activation mechanism is a consensus change like any
> other change, can be contentious like any other
> >>         change, and we must resolve it like any other change. Otherwise
> we risk arriving at the darkest timeline.
> >>         > > > Cheers
> >>         > > > Ariel Lorenzo-Luaces
> >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via
> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >>         > > >
> >>         > > > > Yesterday (February 16th) we held a second meeting on
> Taproot
> >>         > > > > activation on IRC which again was open to all. Despite
> what appeared
> >>         > > > > to be majority support for LOT=false over LOT=true in
> the first
> >>         > > > > meeting I (and others) thought the arguments had not
> been explored in
> >>         > > > > depth and that we should have a follow up meeting
> almost entirely
> >>         > > > > focused on whether LOT (lockinontimeout) should be set
> to true or
> >>         > > > > false.
> >>         > > > >
> >>         > > > > The meeting was announced here:
> >>         > > > >
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >>         <
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >
> >>         > > > >
> >>         > > > > In that mailing list post I outlined the arguments for
> LOT=true (T1 to
> >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their
> strongest form I
> >>         > > > > could. David Harding responded with an additional
> argument for
> >>         > > > > LOT=false (F7) here:
> >>         > > > >
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >>         <
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >
> >>         > > > >
> >>         > > > > These meetings are very challenging given they are open
> to all, you
> >>         > > > > don?t know who will attend and you don?t know most
> people?s views in
> >>         > > > > advance. I tried to give time for both the LOT=true
> arguments and the
> >>         > > > > LOT=false arguments to be discussed as I knew there was
> support for
> >>         > > > > both. We only tried evaluating which had more support
> and which had
> >>         > > > > more strong opposition towards the end of the meeting.
> >>         > > > >
> >>         > > > > The conversation log is here:
> >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log <
> http://gnusha.org/taproot-activation/2021-02-16.log>
> >>         > > > >
> >>         > > > > (If you are so inclined you can watch a video of the
> meeting here.
> >>         > > > > Thanks to the YouTube account ?Bitcoin? for setting up
> the livestream:
> >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <
> https://www.youtube.com/watch?v=vpl5q1ovMLM>)
> >>         > > > >
> >>         > > > > A summary of the meeting was provided by Luke Dashjr on
> Mastodon here:
> >>         > > > >
> https://bitcoinhackers.org/@lukedashjr/105742918779234566
> >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
> >>         > > > >
> >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely
> unproductive, but we
> >>         > > > > did manage to come to consensus on everything but
> LockinOnTimeout.
> >>         > > > >
> >>         > > > > Activation height range: 693504-745920
> >>         > > > >
> >>         > > > > MASF threshold: 1815/2016 blocks (90%)
> >>         > > > >
> >>         > > > > Keep in mind only ~100 people showed for the meetings,
> hardly
> >>         > > > > representative of the entire community.
> >>         > > > >
> >>         > > > > So, these details remain JUST a proposal for now.
> >>         > > > >
> >>         > > > > It seems inevitable that there won't be consensus on
> LOT.
> >>         > > > >
> >>         > > > > Everyone will have to choose for himself. :/
> >>         > > > >
> >>         > > > > Personally I agree with most of this. I agree that
> there wasn?t
> >>         > > > > overwhelming consensus for either LOT=true or
> LOT=false. However, from
> >>         > > > > my perspective there was clearly more strong opposition
> (what would
> >>         > > > > usually be deemed a NACK in Bitcoin Core review
> terminology) from
> >>         > > > > Bitcoin Core contributors, Lightning developers and
> other community
> >>         > > > > members against LOT=true than there was for LOT=false.
> Andrew Chow
> >>         > > > > tried to summarize views from the meeting in this
> analysis:
> >>         > > > >
> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> >>         <
> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
> >>         > > > >
> >>         > > > > I am also aware of other current and previous Bitcoin
> Core
> >>         > > > > contributors and Lightning developers who didn?t attend
> the meeting in
> >>         > > > > person who are opposed to LOT=true. I don?t want to put
> them in the
> >>         > > > > spotlight for no reason but if you go through the
> conversation logs of
> >>         > > > > not only the meeting but the weeks of discussion prior
> to this meeting
> >>         > > > > you will see their views evaluated on the
> ##taproot-activation
> >>         > > > > channel. In addition, on taprootactivation.com <
> http://taprootactivation.com> some mining pools
> >>         > > > > expressed a preference for lot=false though I don?t
> know how strong
> >>         > > > > that preference was.
> >>         > > > >
> >>         > > > > I am only one voice but it is my current assessment
> that if we are to
> >>         > > > > attempt to finalize Taproot activation parameters and
> propose them to
> >>         > > > > the community at this time our only option is to
> propose LOT=false.
> >>         > > > > Any further delay appears to me counterproductive in
> our collective
> >>         > > > > aim to get the Taproot soft fork activated as early as
> possible.
> >>         > > > >
> >>         > > > > Obviously others are free to disagree with that
> assessment and
> >>         > > > > continue discussions but personally I will be
> attempting to avoid
> >>         > > > > those discussions unless prominent new information
> comes to light or
> >>         > > > > various specific individuals change their minds.
> >>         > > > >
> >>         > > > > Next week we are planning a code review of the Bitcoin
> Core PR #19573
> >>         > > > > which was initially delayed because of this LOT
> discussion. As I?ve
> >>         > > > > said previously that will be loosely following the
> format of the
> >>         > > > > Bitcoin Core PR review club and will be lower level and
> more
> >>         > > > > technical. That is planned for Tuesday February 23rd at
> 19:00 UTC on
> >>         > > > > the IRC channel ##taproot-activation.
> >>         > > > >
> >>         > > > > Thanks to the meeting participants (and those who
> joined the
> >>         > > > > discussion on the channel prior and post the meeting)
> for engaging
> >>         > > > > productively and in good faith.
> >>         > >
> >>         > > --
> >>         > > Michael Folkson
> >>         > > Email: michaelfolkson at gmail.com <mailto:
> michaelfolkson at gmail.com>
> >>         > > Keybase: michaelfolkson
> >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >>         > > _______________________________________________
> >>         > > bitcoin-dev mailing list
> >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:
> bitcoin-dev at lists.linuxfoundation.org>
> >>         > >
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >>
> >>
> >>
> >>
> >>     --
> >>     Michael Folkson
> >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
> >>     Keybase: michaelfolkson
> >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >>     _______________________________________________
> >>     bitcoin-dev mailing list
> >>     bitcoin-dev at lists.linuxfoundation.org <mailto:
> bitcoin-dev at lists.linuxfoundation.org>
> >>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >
> >
> >
> > --
> > Michael Folkson
> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com>
> > Keybase: michaelfolkson
> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210218/a2f47541/attachment-0001.html>

From orlovsky at protonmail.com  Thu Feb 18 18:52:12 2021
From: orlovsky at protonmail.com (Dr Maxim Orlovsky)
Date: Thu, 18 Feb 2021 18:52:12 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
In-Reply-To: <CALqxMTG1MG+PvLfSLRqsa_yHBQOdu7BOqBjm4_ShSsB3CNSCOA@mail.gmail.com>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
 <mCGqNxZZgiKEO8gbRcHFUxcU5fGBMWMfkJdapM2Nuhe0gemmqXRfnyqqaRY70UFea1udvQe0LIYt9Ps3lsgDArVHlfeMOWacXqZ7ZiGzMTU=@wuille.net>
 <5096768E-3A77-4CD8-AC22-105CA63152A7@protonmail.com>
 <CALqxMTG1MG+PvLfSLRqsa_yHBQOdu7BOqBjm4_ShSsB3CNSCOA@mail.gmail.com>
Message-ID: <FFB823E1-97FF-4BA9-948A-EF293D56C0FD@protonmail.com>

Hi Adam,

Commenting on your question:

> With segWit vs pre-SegWit didn't wallets just select and standardize
> on a different HD derivation path?
> 
> Is there something else needed than a Schnorr derivation path?

The general accepted practice (defined in BIP43) is to define a dedicated purpose field for each kind of key derivation and address encoding. There is a dedicated purpose for pre-SegWit, SegWit, multisigs ? and now a purpose for Schnorr sigs/Taproot outputs is needed. That is why I brought forward this proposal, which addresses exactly this need - and also will support at the same time multisigs and pre-Taproot outputs, making all previously used purpose fields redundant, simplifying future wallets.

Kind regards,
Maxim

From orlovsky at protonmail.com  Thu Feb 18 18:58:54 2021
From: orlovsky at protonmail.com (Dr Maxim Orlovsky)
Date: Thu, 18 Feb 2021 18:58:54 +0000
Subject: [bitcoin-dev] BIP32/43-based standard for Schnorr signatures &
	decentralized identity
In-Reply-To: <AzQAiClGFEDDux7hDtaD3As76nWOJELk9eck-_Ra4lDTwXQz2lYJEwRHjq9Gt65cA7AgKbidpNQlD-U6g5OKM-EaNvPbgva-ASzt-LcBDT8=@wuille.net>
References: <D962F4E0-E10F-433D-BFC9-3462A8A9CF7A@protonmail.com>
 <mCGqNxZZgiKEO8gbRcHFUxcU5fGBMWMfkJdapM2Nuhe0gemmqXRfnyqqaRY70UFea1udvQe0LIYt9Ps3lsgDArVHlfeMOWacXqZ7ZiGzMTU=@wuille.net>
 <5096768E-3A77-4CD8-AC22-105CA63152A7@protonmail.com>
 <AzQAiClGFEDDux7hDtaD3As76nWOJELk9eck-_Ra4lDTwXQz2lYJEwRHjq9Gt65cA7AgKbidpNQlD-U6g5OKM-EaNvPbgva-ASzt-LcBDT8=@wuille.net>
Message-ID: <B51720B9-1BC4-4679-AA67-A1DE5687B89A@protonmail.com>

Hi Pieter,

Addressing your comments:

>> Thank you very much for all the clarifications; it?s good to have them sorted out and clearly structured. From what you wrote it follows that we still need to reserve a dedicated purpose (with new BIP) for BIP340 signatures to avoid key reuse, am I right?
> 
> Maybe, but it would be for a particular way of using keys (presumably: single-key pay-to-taproot), not just the signature scheme itself. If you go down this path you'll also want dedicated branches for multisig participation, and presumably several interesting new policies that become possible with Taproot.

Yes, previously we had a dedicated standards (BIPs) for purpose fields on each variant: single-sig, multi-sig etc. With this proposal I simplify this: you will have a dedicated deterministically-derived *hardened* keys for each use case under single standard, which should simplify future wallet implementations.


> And as I said, dedicated branches only help for the simple case. For example, it doesn't address the more general problem of preventing reuse of keys in multiple distinct groups of multisig sets you participate in. If you want to solve that you need to keep track of  index is for participating in what - and once you have something like that you don't need dedicated purpose based derivation at all anymore.

In the BIP proposal there is a part on how multisigs can be created in a simple and deterministic way without keys reuse.


> So I'm not sure I'd state it as us *needing* a dedicated purpose/branch for single-key P2TR (and probably many other useful ways of using taproot based spending policies...). But perhaps it's useful to have.

My proposal is to have a new purpose field supporting all the above: hardened derivation that supports for multisigs, single-sigs etc.


Kind regards,
Maxim



From thomasv at electrum.org  Fri Feb 19 09:14:39 2021
From: thomasv at electrum.org (Thomas Voegtlin)
Date: Fri, 19 Feb 2021 10:14:39 +0100
Subject: [bitcoin-dev] BIP70 is dead. What now?
Message-ID: <63e9654c-44b8-740b-79a7-bb58f7bd198c@electrum.org>

I never liked BIP70. It was too complex, had too many features, and when
people discuss it, they do not even agree on what the main feature was.

Nevertheless, there is ONE feature of BIP70 that I find useful: the fact
that payment requests were signed. I am making this post to discuss this.

When I send bitcoins to an exchange, I would like to receive a signed
request. I want to have a proof that the exchange asked me to send coins
to that address, in case it has been hijacked by some intern working
there. If that feature was implemented by an exchange, it would guide my
decision to use that exchange over its competitors.

I do not think that a single exchange ever implemented that, but I guess
this is because BIP70 is a terrible standard. LN payment requests are
signed, do not require SSL, do not require interactivity, and therefore
exchanges use them. Can't we achieve the same for on-chain payments? Is
anyone working on that?

I would be more than happy to remove BIP70 support from Electrum, if
there was another standard for signed requests.

Thomas

-- 
Electrum Technologies GmbH / Paul-Lincke-Ufer 8d / 10999 Berlin / Germany
Sitz, Registergericht: Berlin, Amtsgericht Charlottenburg, HRB 164636
Gesch?ftsf?hrer: Thomas Voegtlin

From ZmnSCPxj at protonmail.com  Fri Feb 19 11:30:08 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Fri, 19 Feb 2021 11:30:08 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <a1ae49f7-049f-cda5-19af-e02a8952e5a4@mattcorallo.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
 <CALeFGL1e+q2mrCox99sUOAXYu3qcC7Xce7AfkuKuLPmxh1oSiA@mail.gmail.com>
 <a1ae49f7-049f-cda5-19af-e02a8952e5a4@mattcorallo.com>
Message-ID: <3MD7z0ETqJZtDw2expUQkoDEwES5BnvCkgjBz4q8h9QRJTK86U9A-EL8pGTprlvjExItC3bz9AxGBNJuk0vqHBX6lnrKqmTEThy9VLA3pNs=@protonmail.com>

Good morning list,

> This is absolutely the case, however note that the activation method itself is consensus code which executes as a part
> of a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should
> be designed, this doesn't imply anything about the consensus code which represents the activation thereof.
>
> Hence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one
> which almost certainly carries significantly more risk than Taproot.
>
> Note that I don't believe anyone is advocating for "try to activate, and if it fails, move on". Various people have
> various views on how conservative and timelines for what to do at that point, but I believe most in this discussion are
> OK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority
> of Bitcoin users and is only not activating due to lagging miner upgrades.


Okay, I am backing off this proposal to force the LOT=false/true decision on users, it was not particularly serious anyway (and was more a reaction to the request of Samson Mow to just release both versions, which to my mind is no different from such a thing).


Nonetheless, as a thought experiment: the main issue is that some number of people run LOT=true when miners do not activate Taproot early for some reason and we decide to leave LOT=false for this particular bit until it times out.
The issue is that those people will get forked off the network at the end of this particular deployment attempt.

I suspect those people will still exist whether or not Bitcoin Core supports any kind of LOT=true mode.
("Never again" for some people)

How do we convince them to go run LOT=false instead of getting themselves forked off?
Or do we simply let them?

(and how is that different from asking each user to decide on LOT=false/true right now?)
("reasonable default"?)
(fundamentally speaking you still have to educate the users on the ramifications of accepting the default and changing it.)


Another thought experiment: From the point of view of a user who strongly supports LOT=true, would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?
Why or why not?


Regards,
ZmnSCPxj

> Matt
>
> On 2/18/21 10:04, Keagan McClelland wrote:
>
> > Hi all,
> > I think it's important for us to consider what is actually being considered for activation here.
> > The designation of "soft fork" is accurate but I don't think it adequately conveys how non-intrusive a change like this
> > is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with
> > actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for
> > that script version today. This is something I think that we can easily check by digging through the UTXO set or
> > history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we
> > can't switch to a script version that no one is actually using.
> > If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs
> > because there is simply no block that contains a transaction that only some of the network will accept.
> > Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on "undefined behavior"
> > (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run.
> > This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting
> > fees. It is a change that means that certain "always accept" transactions actually have real conditions you have to
> > meet. I can't imagine a less intrusive change.
> > On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate
> > to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners
> > are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable
> > outcome to let ~0.1% of the network get to block /non-intrusive/?changes that the rest of the network wants.
> > I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will
> > all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like "well, guess that's it
> > for Taproot". I have no idea what ensues at that point, but probably another community led UASF movement.
> > I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm
> > missing something please say so. But from my point of view, we can't treat all soft forks as equal.
> > Keagan
> > On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> > mailto:bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> >     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That
> >     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as
> >     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to
> >     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an
> >     exchange losing millions would be worse than having Taproot is good.
> >
> >     Matt
> >
> >     On 2/18/21 09:26, Michael Folkson wrote:
> >      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft
> >     forks,
> >      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.
> >      >
> >      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades
> >     such as
> >      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain
> >     splits
> >      > I think is shortsighted. Indeed I think even if we collectively?decided not to do any future soft fork upgrades ever
> >      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.
> >      >
> >      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point
> >     though I'm
> >      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to
> >     (though
> >      > admittedly you have a much better understanding than me of what happened in 2017).
> >      >
> >      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot
> >      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and
> >      > wouldn't kill Bitcoin long term.
> >      >
> >      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>
> >     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:
> >      >
> >      >? ? ?If the eventual outcome is that different implementations (that have material *transaction processing* userbases,
> >      >? ? ?and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here
> >     and not
> >      >? ? ?activate Taproot. Seriously.
> >      >
> >      >? ? ?Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.
> >      >
> >      >? ? ?Matt
> >      >
> >      >>? ? ?On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >      >>? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> >      >>
> >      >>? ? ??
> >      >>? ? ?Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have
> >      >>? ? ?heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think
> >     users
> >      >>? ? ?should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.
> >      >>
> >      >>? ? ?My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol
> >      >>? ? ?implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
> >      >>
> >      >>
> >      >>
> >      >>? ? ?On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>
> >     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:
> >      >>
> >      >>? ? ? ? ?Good morning all,
> >      >>
> >      >>? ? ? ? ?> "An activation mechanism is a consensus change like any other change, can be contentious like any other
> >      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
> >      >>? ? ? ? ?>
> >      >>? ? ? ? ?> Who's we here?
> >      >>? ? ? ? ?>
> >      >>? ? ? ? ?> Release both and let the network decide.
> >      >>
> >      >>? ? ? ? ?A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that
> >      >>? ? ? ? ?requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
> >      >>
> >      >>? ? ? ? ?This assures everyone that neither choice is being forced on users, and instead what is being forced on
> >     users,
> >      >>? ? ? ? ?is for users to make that choice themselves.
> >      >>
> >      >>? ? ? ? ?Regards,
> >      >>? ? ? ? ?ZmnSCPxj
> >      >>
> >      >>? ? ? ? ?>
> >      >>? ? ? ? ?> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >      >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> >      >>? ? ? ? ?>
> >      >>? ? ? ? ?> > Thanks for your response Ariel. It would be useful if you responded to specific points I have made
> >     in the
> >      >>? ? ? ? ?mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding
> >      >>? ? ? ? ?to conversation on the IRC channel or on social media etc.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
> >     into
> >      >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
> >      >>? ? ? ? ?must or must not run.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > I personally have never made this assumption. Of course users aren't forced to run any particular
> >     software
> >      >>? ? ? ? ?version, quite the opposite. Defaults set in software versions matter though as many users won't change
> >     them.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
> >     only a
> >      >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
> >     reason of
> >      >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
> >     moment of
> >      >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks?
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even
> >      >>? ? ? ? ?relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to
> >     activate
> >      >>? ? ? ? ?and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to
> >     false in a
> >      >>? ? ? ? ?software release there is the possibility (T2 in
> >      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
> >      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a
> >      >>? ? ? ? ?proportion of the community changing LOT to true. In that sense setting LOT=false in a software release
> >      >>? ? ? ? ?appears to be no more safe than LOT=true.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
> >     miners
> >      >>? ? ? ? ?by default.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail
> >      >>? ? ? ? ?to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually
> >     think it
> >      >>? ? ? ? ?offers them clarity on what will happen over a year time period and removes the need for coordinated or
> >      >>? ? ? ? ?uncoordinated community UASF efforts on top of LOT=false.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any other
> >      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have
> >      >>? ? ? ? ?occurred and are continuing and in my mailing list post that you responded to **I recommended we propose
> >      >>? ? ? ? ?LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language
> >      >>? ? ? ? ?isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or
> >      >>? ? ? ? ?worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools?have pledged
> >      >>? ? ? ? ?support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize
> >      >>? ? ? ? ?trust in any human actors. We can be grateful that people like Alejandro have worked hard on
> >      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com
> >     <http://taprootactivation.com>> (and this effort has informed the discussion) without
> >      >>? ? ? ? ?taking pledges of support as cast iron guarantees.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my
> >      >>? ? ? ? ?email :)
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com
> >     <mailto:arielluaces at gmail.com>
> >      >>? ? ? ? ?<mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
> >      >>? ? ? ? ?> > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is
> >     inevitable, like
> >      >>? ? ? ? ?we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
> >      >>? ? ? ? ?> > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or
> >      >>? ? ? ? ?even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%
> >     support,
> >      >>? ? ? ? ?or any support right up against a miner activation threshold.
> >      >>? ? ? ? ?> > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility
> >      >>? ? ? ? ?in people's minds.
> >      >>? ? ? ? ?> > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number
> >      >>? ? ? ? ?above %51).
> >      >>? ? ? ? ?> > > I say this because it strikes me when people say that they are for LOT=true with the logic that
> >     since a
> >      >>? ? ? ? ?UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like
> >      >>? ? ? ? ?coordination and safety are sometimes sprinkled into the argument.
> >      >>? ? ? ? ?> > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
> >     into
> >      >>? ? ? ? ?code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
> >      >>? ? ? ? ?must or must not run.
> >      >>? ? ? ? ?> > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
> >     only a
> >      >>? ? ? ? ?handful of people that begin running it while everyone else delays their upgrade (with the very good
> >     reason of
> >      >>? ? ? ? ?not getting involved in politics) and a year later those handful of people just become stuck at the
> >     moment of
> >      >>? ? ? ? ?MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off
> >     into a
> >      >>? ? ? ? ?minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn
> >      >>? ? ? ? ?option has ran its course.
> >      >>? ? ? ? ?> > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
> >     miners
> >      >>? ? ? ? ?by default. The chains could be called BitcoinLenient and BitcoinStubborn.
> >      >>? ? ? ? ?> > > How is that strictly safer or more coordinated?
> >      >>? ? ? ? ?> > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered
> >      >>? ? ? ? ?this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient
> >     with
> >      >>? ? ? ? ?miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for
> >     calling
> >      >>? ? ? ? ?bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
> >      >>? ? ? ? ?feature is worth a network split down the middle.
> >      >>? ? ? ? ?> > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will
> >      >>? ? ? ? ?become envious enough to put aside our differences on how to behave towards miners and finally activate
> >     Taproot.
> >      >>? ? ? ? ?> > > An activation mechanism is a consensus change like any other change, can be contentious like any other
> >      >>? ? ? ? ?change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> >      >>? ? ? ? ?> > > Cheers
> >      >>? ? ? ? ?> > > Ariel Lorenzo-Luaces
> >      >>? ? ? ? ?> > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev
> >     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >      >>? ? ? ? ?<mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> >      >>? ? ? ? ?> > >
> >      >>? ? ? ? ?> > > > Yesterday (February 16th) we held a second meeting on Taproot
> >      >>? ? ? ? ?> > > > activation on IRC which again was open to all. Despite what appeared
> >      >>? ? ? ? ?> > > > to be majority support for LOT=false over LOT=true in the first
> >      >>? ? ? ? ?> > > > meeting I (and others) thought the arguments had not been explored in
> >      >>? ? ? ? ?> > > > depth and that we should have a follow up meeting almost entirely
> >      >>? ? ? ? ?> > > > focused on whether LOT (lockinontimeout) should be set to true or
> >      >>? ? ? ? ?> > > > false.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > The meeting was announced here:
> >      >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
> >      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
> >      >>? ? ? ? ?> > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
> >      >>? ? ? ? ?> > > > could. David Harding responded with an additional argument for
> >      >>? ? ? ? ?> > > > LOT=false (F7) here:
> >      >>? ? ? ? ?> > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>
> >      >>? ? ? ? ?<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > These meetings are very challenging given they are open to all, you
> >      >>? ? ? ? ?> > > > don?t know who will attend and you don?t know most people?s views in
> >      >>? ? ? ? ?> > > > advance. I tried to give time for both the LOT=true arguments and the
> >      >>? ? ? ? ?> > > > LOT=false arguments to be discussed as I knew there was support for
> >      >>? ? ? ? ?> > > > both. We only tried evaluating which had more support and which had
> >      >>? ? ? ? ?> > > > more strong opposition towards the end of the meeting.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > The conversation log is here:
> >      >>? ? ? ? ?> > > > http://gnusha.org/taproot-activation/2021-02-16.log
> >     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log
> >     <http://gnusha.org/taproot-activation/2021-02-16.log>>
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > (If you are so inclined you can watch a video of the meeting here.
> >      >>? ? ? ? ?> > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
> >      >>? ? ? ? ?> > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>
> >     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
> >      >>? ? ? ? ?> > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
> >      >>? ? ? ? ?<https://bitcoinhackers.org/@lukedashjr/105742918779234566
> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
> >      >>? ? ? ? ?> > > > did manage to come to consensus on everything but LockinOnTimeout.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Activation height range: 693504-745920
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > MASF threshold: 1815/2016 blocks (90%)
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Keep in mind only ~100 people showed for the meetings, hardly
> >      >>? ? ? ? ?> > > > representative of the entire community.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > So, these details remain JUST a proposal for now.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > It seems inevitable that there won't be consensus on LOT.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Everyone will have to choose for himself. :/
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Personally I agree with most of this. I agree that there wasn?t
> >      >>? ? ? ? ?> > > > overwhelming consensus for either LOT=true or LOT=false. However, from
> >      >>? ? ? ? ?> > > > my perspective there was clearly more strong opposition (what would
> >      >>? ? ? ? ?> > > > usually be deemed a NACK in Bitcoin Core review terminology) from
> >      >>? ? ? ? ?> > > > Bitcoin Core contributors, Lightning developers and other community
> >      >>? ? ? ? ?> > > > members against LOT=true than there was for LOT=false. Andrew Chow
> >      >>? ? ? ? ?> > > > tried to summarize views from the meeting in this analysis:
> >      >>? ? ? ? ?> > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
> >      >>? ? ? ? ?<https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > I am also aware of other current and previous Bitcoin Core
> >      >>? ? ? ? ?> > > > contributors and Lightning developers who didn?t attend the meeting in
> >      >>? ? ? ? ?> > > > person who are opposed to LOT=true. I don?t want to put them in the
> >      >>? ? ? ? ?> > > > spotlight for no reason but if you go through the conversation logs of
> >      >>? ? ? ? ?> > > > not only the meeting but the weeks of discussion prior to this meeting
> >      >>? ? ? ? ?> > > > you will see their views evaluated on the ##taproot-activation
> >      >>? ? ? ? ?> > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>
> >     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools
> >      >>? ? ? ? ?> > > > expressed a preference for lot=false though I don?t know how strong
> >      >>? ? ? ? ?> > > > that preference was.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > I am only one voice but it is my current assessment that if we are to
> >      >>? ? ? ? ?> > > > attempt to finalize Taproot activation parameters and propose them to
> >      >>? ? ? ? ?> > > > the community at this time our only option is to propose LOT=false.
> >      >>? ? ? ? ?> > > > Any further delay appears to me counterproductive in our collective
> >      >>? ? ? ? ?> > > > aim to get the Taproot soft fork activated as early as possible.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Obviously others are free to disagree with that assessment and
> >      >>? ? ? ? ?> > > > continue discussions but personally I will be attempting to avoid
> >      >>? ? ? ? ?> > > > those discussions unless prominent new information comes to light or
> >      >>? ? ? ? ?> > > > various specific individuals change their minds.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Next week we are planning a code review of the Bitcoin Core PR #19573
> >      >>? ? ? ? ?> > > > which was initially delayed because of this LOT discussion. As I?ve
> >      >>? ? ? ? ?> > > > said previously that will be loosely following the format of the
> >      >>? ? ? ? ?> > > > Bitcoin Core PR review club and will be lower level and more
> >      >>? ? ? ? ?> > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
> >      >>? ? ? ? ?> > > > the IRC channel ##taproot-activation.
> >      >>? ? ? ? ?> > > >
> >      >>? ? ? ? ?> > > > Thanks to the meeting participants (and those who joined the
> >      >>? ? ? ? ?> > > > discussion on the channel prior and post the meeting) for engaging
> >      >>? ? ? ? ?> > > > productively and in good faith.
> >      >>? ? ? ? ?> >
> >      >>? ? ? ? ?> > --
> >      >>? ? ? ? ?> > Michael Folkson
> >      >>? ? ? ? ?> > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> >     <mailto:michaelfolkson at gmail.com>>
> >      >>? ? ? ? ?> > Keybase: michaelfolkson
> >      >>? ? ? ? ?> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >      >>? ? ? ? ?> > _______________________________________________
> >      >>? ? ? ? ?> > bitcoin-dev mailing list
> >      >>? ? ? ? ?> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
> >      >>? ? ? ? ?> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >      >>? ? ? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
> >      >>
> >      >>
> >      >>
> >      >>
> >      >>? ? ?--
> >      >>? ? ?Michael Folkson
> >      >>? ? ?Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> >     <mailto:michaelfolkson at gmail.com>>
> >      >>? ? ?Keybase: michaelfolkson
> >      >>? ? ?PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >      >>? ? ?_______________________________________________
> >      >>? ? ?bitcoin-dev mailing list
> >      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
> >      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >      >>? ? ?<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
> >      >
> >      >
> >      >
> >      > --
> >      > Michael Folkson
> >      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> >     <mailto:michaelfolkson at gmail.com>>
> >      > Keybase: michaelfolkson
> >      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >     _______________________________________________
> >     bitcoin-dev mailing list
> >     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >
>
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev




From arielluaces at gmail.com  Fri Feb 19 02:20:37 2021
From: arielluaces at gmail.com (Ariel Luaces)
Date: Thu, 18 Feb 2021 18:20:37 -0800
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <a1ae49f7-049f-cda5-19af-e02a8952e5a4@mattcorallo.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
 <CALeFGL1e+q2mrCox99sUOAXYu3qcC7Xce7AfkuKuLPmxh1oSiA@mail.gmail.com>
 <a1ae49f7-049f-cda5-19af-e02a8952e5a4@mattcorallo.com>
Message-ID: <CAOv1Tnh2wZ84kn_bCPxbjztuQhSmNOdUEhkkwXXPX8TfQLYeFQ@mail.gmail.com>

Hi Michael
I think you're right, sorry for getting a little apocalyptic at the
end there lol.

> On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
>
> Thanks for your response Ariel. It would be useful if you responded to specific points I have made in the mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding to conversation on the IRC channel or on social media etc.
> > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted into code. But in fact this isn't true and some voices in this discussion need to be more humble about what users must or must not run.
> I personally have never made this assumption. Of course users aren't forced to run any particular software version, quite the opposite. Defaults set in software versions matter though as many users won't change them.

I'm mostly referring to the two IRC discussions. I normally try to
avoid singling people out that's why I didn't refer to anyone in
perticular.
Here I'll list a couple of quotes from these ephemeral people, while
reading them keep in mind what would happen if a majority users and
miners decide to just avoid the latest version.
- 11:06: "LOT=true does not split the chain. It strictly reduces the
liklihood of that."
- 11:06: "LOT=false has chainsplit risks, not LOT=true"
- 08:59 "I guess it would be helpful to hear miners' answers to that question."
Response: 09:01 "not sure why; miners don't decide anything in this
regard it's more of `Taproot is activating. Please accelerate it if
you can`"
Reading the logs again I see some voices that do consider the right
that users and miners have to run whatever version they want
Response: 09:03 "I ask because you said something that's equivalent to
`miners don't get to decide which version of core their run`."
- T1, T2, T3, and T6 have language that assumes mass support for a
UASF and then proceed to make conclusions on what is safer and easier
to coordinate
A voice in the discussion expressed the same point I'm making:
10:53 "I disagree with T1: i don't think there is any logical
consequence in hardcoding LOT=true ensuring Taproot activation and
even less ensuring no political shenanigans. We obviously need
economic majority to run it and that would open way more political
arguments that they bluntly take part in an UASF without any bad
behaviour from miners."
- 11:14 "we know people will run LOT=true regardless of the default,
so it will be safer if LOT=true is made the default"
- 11:18 "With LOT=true, attempted UASFs are not necessary"
- 11:18 "why give them the ability to act maliciously in the first place?"
Response:11:18"LOT=false does not; people choosing to run software
that will enforce taproot under some reasonable circumstances provides
the information.  LOT=false just reduces the risk of unexpected
results from resulting in danger."
Response: 11:18 "LOT=false strictly increases the risks though.."
Response: 11:18 "please stop saying that, there are tradeoffs both ways."
- 11:11 "LOT=false gives miners the ability to decide [in response to
someone saying that LOT=false gives everyone else in the community the
ability to decide]"
This quote is a bit more nuanced because the implication is that
LOT=true doesn't give the ability to decide. But in reality they have
the ability to decide to not upgrade. Users  can also not upgrade to
be in solidarity with miners to protect them from unfair distrust and
aggression.
All the arguments above for LOT=true are rooted in the assumption that
everyone must upgrade to the latest version because of course they
will...? But that's not a given.

There are examples of people being aware that miners and users can run
any version they want. I misjudged the number of people who know that
LOT=true doesn't guarantee anything.
- 11:17 "The LOT=True crowd seems to have an underlying assumption
that a UASF will occur instead of something more orderly like Modern
Softfork Activation suggested, why? I don't think chances of that
happening are very high unless things play out similarly to Segwit but
it doesn't look like that."
- 11:17 "UASFs can be made much more difficult with a counter-UASF....
UASFs like this one and segwit relied on intolerant-minority effects"
(I'm assuming counter-UASF means not upgrading as opposed to upgrading
to a new client that rejects the activation flag)

> There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually think it offers them clarity on what will happen over a year time period and removes the need for coordinated or uncoordinated community UASF efforts on top of LOT=false.
If you look at https://taprootactivation.com/ no miners seem to be
expressing any support at all for lot=true. To pre-empt the counter
argument, I know that miners don't decide, I'm just using that poll as
a proxy to estimate whether they would be antagonized by the promotion
of LOT=true.
I'm not a miner and I think the "fork will happen regardless of the
consequences" attitude is antagonistic towards everyone in general,
not just miners.
The LOT=true activation mechanism may be tolerated today because
Taproot has wide support. But in order to prevent future antagonistic
behavior around future network changes (possibly more controversial
ones) we should continue the norm of including miners in the
activation process, as the friends they are.
This idea that LOT=true provides clarity is another is another example
of an argument rooted in the assumption that users will upgrade
because of course they will. No activation mechanism provides ANY
guarantees and neither does LOT=true so it's infair to frame it as if
it does.
This is your argument Michael, please don't take anything I say
personally I'm just arguing the points.

> It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to activate and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to false in a software release there is the possibility (T2 in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html) of individuals or a proportion of the community changing LOT to true. In that sense setting LOT=false in a software release appears to be no more safe than LOT=true.
If a LOT=true client is released I think the likely outcome is that
people won't upgrade at all and I would say that miners failing to
activate  will become more likely than you think, strictly due to a
loud group promoting LOT=true.
It's true that some will stubbornly run LOT=true regardless. But if
they have not been provoked to do so then I would hope the community
promotes unity and shuns needlessly conflictive attitudes to avoid
the, admittedly inevitable, network split from gathering momentum (a
counter-UASF).
I hope individuals opt for unity and become intolerant (counter-UASF)
of intolerance (unprovoked-UASF).

> TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my email :)
Yes I do agree with the recommendation of LOT=false. Thank you for
organizing the discussion.

On Thu, Feb 18, 2021 at 3:12 AM Samson Mow <samson.mow at gmail.com> wrote:
>
> "An activation mechanism is a consensus change like any other change, can be contentious like any other change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
>
> Who's we here?
By "we" I meant everyone involved in the discussion of the activation
mechanism. The discussion is slowly growing and eventually has to
reach social media.
>
> Release both and let the network decide.
If two clients are released with matching activation parameters except
for opposing LOT then LOT=true kind of spoils the LOT=false choice
(only if LOT=true manages to gather support) because running LOT=false
is being complicit/tolerant of the aggressive attitude of LOT=true.
In the case of both being released I would opt for running neither and
I hope most users and miners do too. Again, with the caveat that only
if there is visible significant support for LOT=true. And yes, the
"significant" is a subjective word and, based on risk appetite, is
different for everyone. That's part of the issue.
A funny metaphor is that if someone is visibly pissing in a pool I'm
not going to swim on the other side of the pool, I just won't swim at
all and go do whatever I was doing before.

Cheers
Ariel Lorenzo-Luaces

On Thu, Feb 18, 2021 at 7:18 AM Matt Corallo via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> This is absolutely the case, however note that the activation method itself is consensus code which executes as a part
> of a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should
> be designed, this doesn't imply anything about the consensus code which represents the activation thereof.
>
> Hence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one
> which almost certainly carries significantly more risk than Taproot.
>
> Note that I don't believe anyone is advocating for "try to activate, and if it fails, move on". Various people have
> various views on how conservative and timelines for what to do at that point, but I believe most in this discussion are
> OK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority
> of Bitcoin users and is only not activating due to lagging miner upgrades.
>
> Matt
>
> On 2/18/21 10:04, Keagan McClelland wrote:
> > Hi all,
> >
> > I think it's important for us to consider what is actually being considered for activation here.
> >
> > The designation of "soft fork" is accurate but I don't think it adequately conveys how non-intrusive a change like this
> > is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with
> > actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for
> > that script version today. This is something I think that we can easily check by digging through the UTXO set or
> > history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we
> > can't switch to a script version that no one is actually using.
> >
> > If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs
> > because there is simply no block that contains a transaction that only some of the network will accept.
> >
> > Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on "undefined behavior"
> > (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run.
> > This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting
> > fees. It is a change that means that certain "always accept" transactions actually have real conditions you have to
> > meet. I can't imagine a less intrusive change.
> >
> > On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate
> > to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners
> > are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable
> > outcome to let ~0.1% of the network get to block /non-intrusive/ changes that the rest of the network wants.
> >
> > I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will
> > all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like "well, guess that's it
> > for Taproot". I have no idea what ensues at that point, but probably another community led UASF movement.
> >
> > I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm
> > missing something please say so. But from my point of view, we can't treat all soft forks as equal.
> >
> > Keagan
> >
> > On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >
> >     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That
> >     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as
> >     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to
> >     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an
> >     exchange losing millions would be worse than having Taproot is good.
> >
> >     Matt
> >
> >     On 2/18/21 09:26, Michael Folkson wrote:
> >      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft
> >     forks,
> >      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.
> >      >
> >      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades
> >     such as
> >      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain
> >     splits
> >      > I think is shortsighted. Indeed I think even if we collectively decided not to do any future soft fork upgrades ever
> >      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.
> >      >
> >      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point
> >     though I'm
> >      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to
> >     (though
> >      > admittedly you have a much better understanding than me of what happened in 2017).
> >      >
> >      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot
> >      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and
> >      > wouldn't kill Bitcoin long term.
> >      >
> >      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>
> >     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:
> >      >
> >      >     If the eventual outcome is that different implementations (that have material *transaction processing* userbases,
> >      >     and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here
> >     and not
> >      >     activate Taproot. Seriously.
> >      >
> >      >     Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.
> >      >
> >      >     Matt
> >      >
> >      >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >      >>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> >      >>
> >      >>     ?
> >      >>     Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have
> >      >>     heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think
> >     users
> >      >>     should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.
> >      >>
> >      >>     My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol
> >      >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
> >      >>
> >      >>
> >      >>
> >      >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>
> >     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:
> >      >>
> >      >>         Good morning all,
> >      >>
> >      >>         > "An activation mechanism is a consensus change like any other change, can be contentious like any other
> >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
> >      >>         >
> >      >>         > Who's we here?
> >      >>         >
> >      >>         > Release both and let the network decide.
> >      >>
> >      >>         A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that
> >      >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
> >      >>
> >      >>         This assures everyone that neither choice is being forced on users, and instead what is being forced on
> >     users,
> >      >>         is for users to make that choice themselves.
> >      >>
> >      >>         Regards,
> >      >>         ZmnSCPxj
> >      >>
> >      >>         >
> >      >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> >      >>         >
> >      >>         > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made
> >     in the
> >      >>         mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding
> >      >>         to conversation on the IRC channel or on social media etc.
> >      >>         > >
> >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
> >     into
> >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
> >      >>         must or must not run.
> >      >>         > >
> >      >>         > > I personally have never made this assumption. Of course users aren't forced to run any particular
> >     software
> >      >>         version, quite the opposite. Defaults set in software versions matter though as many users won't change
> >     them.
> >      >>         > >
> >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
> >     only a
> >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good
> >     reason of
> >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the
> >     moment of
> >      >>         MUST_SIGNAL, unable to mine new blocks?
> >      >>         > >
> >      >>         > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even
> >      >>         relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to
> >     activate
> >      >>         and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to
> >     false in a
> >      >>         software release there is the possibility (T2 in
> >      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
> >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a
> >      >>         proportion of the community changing LOT to true. In that sense setting LOT=false in a software release
> >      >>         appears to be no more safe than LOT=true.
> >      >>         > >
> >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
> >     miners
> >      >>         by default.
> >      >>         > >
> >      >>         > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail
> >      >>         to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually
> >     think it
> >      >>         offers them clarity on what will happen over a year time period and removes the need for coordinated or
> >      >>         uncoordinated community UASF efforts on top of LOT=false.
> >      >>         > >
> >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other
> >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> >      >>         > >
> >      >>         > > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have
> >      >>         occurred and are continuing and in my mailing list post that you responded to **I recommended we propose
> >      >>         LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language
> >      >>         isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or
> >      >>         worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged
> >      >>         support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize
> >      >>         trust in any human actors. We can be grateful that people like Alejandro have worked hard on
> >      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com
> >     <http://taprootactivation.com>> (and this effort has informed the discussion) without
> >      >>         taking pledges of support as cast iron guarantees.
> >      >>         > >
> >      >>         > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my
> >      >>         email :)
> >      >>         > >
> >      >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com
> >     <mailto:arielluaces at gmail.com>
> >      >>         <mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:
> >      >>         > >
> >      >>         > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
> >      >>         > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is
> >     inevitable, like
> >      >>         we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
> >      >>         > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or
> >      >>         even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%
> >     support,
> >      >>         or any support right up against a miner activation threshold.
> >      >>         > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility
> >      >>         in people's minds.
> >      >>         > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number
> >      >>         above %51).
> >      >>         > > > I say this because it strikes me when people say that they are for LOT=true with the logic that
> >     since a
> >      >>         UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like
> >      >>         coordination and safety are sometimes sprinkled into the argument.
> >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
> >     into
> >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
> >      >>         must or must not run.
> >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
> >     only a
> >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good
> >     reason of
> >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the
> >     moment of
> >      >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off
> >     into a
> >      >>         minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn
> >      >>         option has ran its course.
> >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
> >     miners
> >      >>         by default. The chains could be called BitcoinLenient and BitcoinStubborn.
> >      >>         > > > How is that strictly safer or more coordinated?
> >      >>         > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered
> >      >>         this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient
> >     with
> >      >>         miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for
> >     calling
> >      >>         bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
> >      >>         feature is worth a network split down the middle.
> >      >>         > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will
> >      >>         become envious enough to put aside our differences on how to behave towards miners and finally activate
> >     Taproot.
> >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other
> >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> >      >>         > > > Cheers
> >      >>         > > > Ariel Lorenzo-Luaces
> >      >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev
> >     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> >      >>         > > >
> >      >>         > > > > Yesterday (February 16th) we held a second meeting on Taproot
> >      >>         > > > > activation on IRC which again was open to all. Despite what appeared
> >      >>         > > > > to be majority support for LOT=false over LOT=true in the first
> >      >>         > > > > meeting I (and others) thought the arguments had not been explored in
> >      >>         > > > > depth and that we should have a follow up meeting almost entirely
> >      >>         > > > > focused on whether LOT (lockinontimeout) should be set to true or
> >      >>         > > > > false.
> >      >>         > > > >
> >      >>         > > > > The meeting was announced here:
> >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
> >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>
> >      >>         > > > >
> >      >>         > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
> >      >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
> >      >>         > > > > could. David Harding responded with an additional argument for
> >      >>         > > > > LOT=false (F7) here:
> >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>
> >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>
> >      >>         > > > >
> >      >>         > > > > These meetings are very challenging given they are open to all, you
> >      >>         > > > > don?t know who will attend and you don?t know most people?s views in
> >      >>         > > > > advance. I tried to give time for both the LOT=true arguments and the
> >      >>         > > > > LOT=false arguments to be discussed as I knew there was support for
> >      >>         > > > > both. We only tried evaluating which had more support and which had
> >      >>         > > > > more strong opposition towards the end of the meeting.
> >      >>         > > > >
> >      >>         > > > > The conversation log is here:
> >      >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log
> >     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log
> >     <http://gnusha.org/taproot-activation/2021-02-16.log>>
> >      >>         > > > >
> >      >>         > > > > (If you are so inclined you can watch a video of the meeting here.
> >      >>         > > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
> >      >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>
> >     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)
> >      >>         > > > >
> >      >>         > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
> >      >>         > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
> >      >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566
> >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>
> >      >>         > > > >
> >      >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
> >      >>         > > > > did manage to come to consensus on everything but LockinOnTimeout.
> >      >>         > > > >
> >      >>         > > > > Activation height range: 693504-745920
> >      >>         > > > >
> >      >>         > > > > MASF threshold: 1815/2016 blocks (90%)
> >      >>         > > > >
> >      >>         > > > > Keep in mind only ~100 people showed for the meetings, hardly
> >      >>         > > > > representative of the entire community.
> >      >>         > > > >
> >      >>         > > > > So, these details remain JUST a proposal for now.
> >      >>         > > > >
> >      >>         > > > > It seems inevitable that there won't be consensus on LOT.
> >      >>         > > > >
> >      >>         > > > > Everyone will have to choose for himself. :/
> >      >>         > > > >
> >      >>         > > > > Personally I agree with most of this. I agree that there wasn?t
> >      >>         > > > > overwhelming consensus for either LOT=true or LOT=false. However, from
> >      >>         > > > > my perspective there was clearly more strong opposition (what would
> >      >>         > > > > usually be deemed a NACK in Bitcoin Core review terminology) from
> >      >>         > > > > Bitcoin Core contributors, Lightning developers and other community
> >      >>         > > > > members against LOT=true than there was for LOT=false. Andrew Chow
> >      >>         > > > > tried to summarize views from the meeting in this analysis:
> >      >>         > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
> >      >>         <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>
> >      >>         > > > >
> >      >>         > > > > I am also aware of other current and previous Bitcoin Core
> >      >>         > > > > contributors and Lightning developers who didn?t attend the meeting in
> >      >>         > > > > person who are opposed to LOT=true. I don?t want to put them in the
> >      >>         > > > > spotlight for no reason but if you go through the conversation logs of
> >      >>         > > > > not only the meeting but the weeks of discussion prior to this meeting
> >      >>         > > > > you will see their views evaluated on the ##taproot-activation
> >      >>         > > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>
> >     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools
> >      >>         > > > > expressed a preference for lot=false though I don?t know how strong
> >      >>         > > > > that preference was.
> >      >>         > > > >
> >      >>         > > > > I am only one voice but it is my current assessment that if we are to
> >      >>         > > > > attempt to finalize Taproot activation parameters and propose them to
> >      >>         > > > > the community at this time our only option is to propose LOT=false.
> >      >>         > > > > Any further delay appears to me counterproductive in our collective
> >      >>         > > > > aim to get the Taproot soft fork activated as early as possible.
> >      >>         > > > >
> >      >>         > > > > Obviously others are free to disagree with that assessment and
> >      >>         > > > > continue discussions but personally I will be attempting to avoid
> >      >>         > > > > those discussions unless prominent new information comes to light or
> >      >>         > > > > various specific individuals change their minds.
> >      >>         > > > >
> >      >>         > > > > Next week we are planning a code review of the Bitcoin Core PR #19573
> >      >>         > > > > which was initially delayed because of this LOT discussion. As I?ve
> >      >>         > > > > said previously that will be loosely following the format of the
> >      >>         > > > > Bitcoin Core PR review club and will be lower level and more
> >      >>         > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
> >      >>         > > > > the IRC channel ##taproot-activation.
> >      >>         > > > >
> >      >>         > > > > Thanks to the meeting participants (and those who joined the
> >      >>         > > > > discussion on the channel prior and post the meeting) for engaging
> >      >>         > > > > productively and in good faith.
> >      >>         > >
> >      >>         > > --
> >      >>         > > Michael Folkson
> >      >>         > > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> >     <mailto:michaelfolkson at gmail.com>>
> >      >>         > > Keybase: michaelfolkson
> >      >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >      >>         > > _______________________________________________
> >      >>         > > bitcoin-dev mailing list
> >      >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
> >      >>         > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >      >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
> >      >>
> >      >>
> >      >>
> >      >>
> >      >>     --
> >      >>     Michael Folkson
> >      >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> >     <mailto:michaelfolkson at gmail.com>>
> >      >>     Keybase: michaelfolkson
> >      >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >      >>     _______________________________________________
> >      >>     bitcoin-dev mailing list
> >      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
> >      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >      >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
> >      >
> >      >
> >      >
> >      > --
> >      > Michael Folkson
> >      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> >     <mailto:michaelfolkson at gmail.com>>
> >      > Keybase: michaelfolkson
> >      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> >     _______________________________________________
> >     bitcoin-dev mailing list
> >     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> >
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From chill at degreesofzero.com  Fri Feb 19 10:33:45 2021
From: chill at degreesofzero.com (Charles Hill)
Date: Fri, 19 Feb 2021 11:33:45 +0100
Subject: [bitcoin-dev] BIP70 is dead. What now?
In-Reply-To: <63e9654c-44b8-740b-79a7-bb58f7bd198c@electrum.org>
References: <63e9654c-44b8-740b-79a7-bb58f7bd198c@electrum.org>
Message-ID: <b60a7654-0252-90af-7ec1-b3de3ed74ae7@degreesofzero.com>

Hi, Thomas,

I developed a URL signing scheme for use with LNURL as a method for 
authorizing payments on behalf of offline devices /applications. It's 
not specifically off-chain or on-chain related, but could be repurposed. 
The gist of the scheme is as follows:

Before any signing is done:

0) Generate an API key (ID/reference, secret, encoding) to be shared 
between a server and an offline device or application.

To generate a signature:

1) Generate a random nonce (unique per API key)

2) Build a query string with the `id`, `nonce`, `tag`, "Server 
parameters" (see [Subprotocols](#subprotocols) above), and any custom 
parameters. The `id` parameter should be equal to the API key's ID. 
Example: 
`id=b6cb8e81e3&nonce=d585674cf991dbbab42b&tag=withdrawRequest&minWithdrawable=5000&maxWithdrawable=7000&defaultDescription=example&custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE`. 
Note that both the keys and values for query parameters should be URL 
encoded. The following characters should be __unescaped__: `A-Z a-z 0-9 
- _ . ! ~ * ' ( )`. See 
[encodeURIComponent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#description) 
for more details.

3) Sort the query parameters by key (alphabetically). This is referred 
to as the "payload". Example: 
`custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest`

4) Sign the payload (the sorted query string) using the API key secret. 
Signatures are generated using HMAC-SHA256, where the API key secret is 
the key.

5) Append the signature to the payload as follows: 
`custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest&signature=HMAC_SHA256_SIGNATURE`.

You can find more details here:

https://github.com/chill117/lnurl-node#how-to-implement-url-signing-scheme


I would change a few things with this scheme to fit better with the 
use-case you describe. For example:

* Remove the "tag" and LNURL-specific parameters

* Instead of HMAC-SHA256 with a shared secret, it could use pub/priv key 
signing instead. The lnurl-auth subprotocol has an interesting approach 
to protecting user privacy while allowing verification of signatures. 
See for more details on that:

https://github.com/fiatjaf/lnurl-rfc/blob/master/lnurl-auth.md


- chill


On 2/19/21 10:14 AM, Thomas Voegtlin via bitcoin-dev wrote:
> I never liked BIP70. It was too complex, had too many features, and when
> people discuss it, they do not even agree on what the main feature was.
>
> Nevertheless, there is ONE feature of BIP70 that I find useful: the fact
> that payment requests were signed. I am making this post to discuss this.
>
> When I send bitcoins to an exchange, I would like to receive a signed
> request. I want to have a proof that the exchange asked me to send coins
> to that address, in case it has been hijacked by some intern working
> there. If that feature was implemented by an exchange, it would guide my
> decision to use that exchange over its competitors.
>
> I do not think that a single exchange ever implemented that, but I guess
> this is because BIP70 is a terrible standard. LN payment requests are
> signed, do not require SSL, do not require interactivity, and therefore
> exchanges use them. Can't we achieve the same for on-chain payments? Is
> anyone working on that?
>
> I would be more than happy to remove BIP70 support from Electrum, if
> there was another standard for signed requests.
>
> Thomas
>

From adam at cypherspace.org  Fri Feb 19 12:05:09 2021
From: adam at cypherspace.org (Adam Back)
Date: Fri, 19 Feb 2021 12:05:09 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <3MD7z0ETqJZtDw2expUQkoDEwES5BnvCkgjBz4q8h9QRJTK86U9A-EL8pGTprlvjExItC3bz9AxGBNJuk0vqHBX6lnrKqmTEThy9VLA3pNs=@protonmail.com>
References: <CAFvNmHSHu0gqVgWxOCJnSTf5mxpWsMF9FrMQ+_X+uyR3P4QCsg@mail.gmail.com>
 <8591CF93-E574-4C23-90D5-FA410637DECD@mattcorallo.com>
 <CAFvNmHSwRGEy-kE8OA4mcDJ+fJjO7J1ckThWY=wqv4yge-MA1Q@mail.gmail.com>
 <7b8543c3-8ff2-3a6a-b2d4-f4a6cf150d78@mattcorallo.com>
 <CALeFGL1e+q2mrCox99sUOAXYu3qcC7Xce7AfkuKuLPmxh1oSiA@mail.gmail.com>
 <a1ae49f7-049f-cda5-19af-e02a8952e5a4@mattcorallo.com>
 <3MD7z0ETqJZtDw2expUQkoDEwES5BnvCkgjBz4q8h9QRJTK86U9A-EL8pGTprlvjExItC3bz9AxGBNJuk0vqHBX6lnrKqmTEThy9VLA3pNs=@protonmail.com>
Message-ID: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>

Personally I don't really have much of a view and think either
LOT=true or false is better in the context, they both seem safe given
the current context, where basically everyone is saying "are we there
yet", including pools (88.7% going out of their way to say YES
https://taprootactivation.com).  Not that pools are deciding of
anything, being service providers to miners, who can and will switch
pool fast, and miners in-turn being service providers to the market
and as the various forks showed will follow the market.

I think it's a very good idea for safety, if there is a tested and
reviewed code with an option to force LOT=true, even if the
bitcoin-core implementation ends up defaulting to LOT=false.

Part of the danger is rushed versions of things like BIP 91 to avoid a
chain split where miners left brinkmanship just a bit too late, to
avert BIP 148 forking, and BIP 91 was used to expedite activation to
avoid that. The rushed proposal, code, review, ship cycle on that was
dangerously fast - less time and eyes for review was the danger.

> would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?

given there are clearly people of both views, or for now don't care
but might later, it would minimally be friendly and useful if
bitcoin-core has a LOT=true option - and that IMO goes some way to
avoid the assumptive control via defaults.

Otherwise it could be read as saying "developers on average
disapprove, but if you, the market disagree, go figure it out for
yourself" which is not a good message for being defensive and avoiding
mis-interpretation of code repositories or shipped defaults as
"control".

Adam

On Fri, 19 Feb 2021 at 11:30, ZmnSCPxj via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Good morning list,
>
> > This is absolutely the case, however note that the activation method itself is consensus code which executes as a part
> > of a fork, and one which deserves as much scrutiny as anything else. While taproot is a model of how a soft-fork should
> > be designed, this doesn't imply anything about the consensus code which represents the activation thereof.
> >
> > Hence all the debate around activation - ultimately its also defining a fork, and given the politics around it, one
> > which almost certainly carries significantly more risk than Taproot.
> >
> > Note that I don't believe anyone is advocating for "try to activate, and if it fails, move on". Various people have
> > various views on how conservative and timelines for what to do at that point, but I believe most in this discussion are
> > OK with flag-day-based activation (given some level of care) if it becomes clear Taproot is supported by a vast majority
> > of Bitcoin users and is only not activating due to lagging miner upgrades.
>
>
> Okay, I am backing off this proposal to force the LOT=false/true decision on users, it was not particularly serious anyway (and was more a reaction to the request of Samson Mow to just release both versions, which to my mind is no different from such a thing).
>
>
> Nonetheless, as a thought experiment: the main issue is that some number of people run LOT=true when miners do not activate Taproot early for some reason and we decide to leave LOT=false for this particular bit until it times out.
> The issue is that those people will get forked off the network at the end of this particular deployment attempt.
>
> I suspect those people will still exist whether or not Bitcoin Core supports any kind of LOT=true mode.
> ("Never again" for some people)
>
> How do we convince them to go run LOT=false instead of getting themselves forked off?
> Or do we simply let them?
>
> (and how is that different from asking each user to decide on LOT=false/true right now?)
> ("reasonable default"?)
> (fundamentally speaking you still have to educate the users on the ramifications of accepting the default and changing it.)
>
>
> Another thought experiment: From the point of view of a user who strongly supports LOT=true, would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?
> Why or why not?
>
>
> Regards,
> ZmnSCPxj
>
> > Matt
> >
> > On 2/18/21 10:04, Keagan McClelland wrote:
> >
> > > Hi all,
> > > I think it's important for us to consider what is actually being considered for activation here.
> > > The designation of "soft fork" is accurate but I don't think it adequately conveys how non-intrusive a change like this
> > > is. All that taproot does (unless I'm completely missing something) is imbue a previously undefined script version with
> > > actual semantics. In order for a chain reorg to take place it would mean that someone would have to have a use case for
> > > that script version today. This is something I think that we can easily check by digging through the UTXO set or
> > > history. If anyone is using that script version, we absolutely should not be using it, but that doesn't mean that we
> > > can't switch to a script version that no one is actually using.
> > > If no one is even attempting to use the script version, then the change has no effect on whether a chain split occurs
> > > because there is simply no block that contains a transaction that only some of the network will accept.
> > > Furthermore, I don't know how Bitcoin can stand the test of time if we allow developers who rely on "undefined behavior"
> > > (which the taproot script version presently is) to exert tremendous influence over what code does or does not get run.
> > > This isn't a soft fork that makes some particular UTXO's unspendable. It isn't one that bans miners from collecting
> > > fees. It is a change that means that certain "always accept" transactions actually have real conditions you have to
> > > meet. I can't imagine a less intrusive change.
> > > On the other hand, choosing to let L=F be a somewhat final call sets a very real precedent that 10% of what I estimate
> > > to be 1% of bitcoin users can effectively block any change from here on forward. At that point we are saying that miners
> > > are in control of network consensus in ways they have not been up until now. I don't think this is a more desirable
> > > outcome to let ~0.1% of the network get to block /non-intrusive/ changes that the rest of the network wants.
> > > I can certainly live with an L=F attempt as a way to punt on the discussion, maybe the activation happens and this will
> > > all be fine. But if it doesn't, I hardly think that users of Bitcoin are just going to be like "well, guess that's it
> > > for Taproot". I have no idea what ensues at that point, but probably another community led UASF movement.
> > > I wasn't super well educated on this stuff back in '17 when Segwit went down, as I was new at that time, so if I'm
> > > missing something please say so. But from my point of view, we can't treat all soft forks as equal.
> > > Keagan
> > > On Thu, Feb 18, 2021 at 7:43 AM Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> > > mailto:bitcoin-dev at lists.linuxfoundation.org> wrote:
> > >
> > >     We've had several softforks in Bitcoin which, through the course of their activation, had a several-block reorg. That
> > >     should be indication enough that we need to very carefully consider activation to ensure we reduce the risk of that as
> > >     much as absolutely possible. Again, while I think Taproot is a huge improvement and am looking forward to being able to
> > >     use it, getting unlucky and hitting a 4-block reorg that happens to include a double-spend and some PR around an
> > >     exchange losing millions would be worse than having Taproot is good.
> > >
> > >     Matt
> > >
> > >     On 2/18/21 09:26, Michael Folkson wrote:
> > >      > Thanks for your response Matt. It is a fair challenge. There is always going to be an element of risk with soft
> > >     forks,
> > >      > all we can do is attempt to minimize that risk. I would argue that risk has been minimized for Taproot.
> > >      >
> > >      > You know (better than I do in fact) that Bitcoin (and layers built on top of it) greatly benefit from upgrades
> > >     such as
> > >      > Taproot. To say we shouldn't do Taproot or any future soft forks because there is a small but real risk of chain
> > >     splits
> > >      > I think is shortsighted. Indeed I think even if we collectively decided not to do any future soft fork upgrades ever
> > >      > again on this mailing list that wouldn't stop soft fork attempts from other people in future.
> > >      >
> > >      > I don't think there is anything else we can do to minimize that risk for the Taproot soft fork at this point
> > >     though I'm
> > >      > open to ideas. To reiterate that risk will never be zero. I don't think I see Bitcoin as fragile as you seem to
> > >     (though
> > >      > admittedly you have a much better understanding than me of what happened in 2017).
> > >      >
> > >      > The likely scenario for the Taproot soft fork is LOT turns out to be entirely irrelevant and miners activate Taproot
> > >      > before it becomes relevant. And even the unlikely worst case scenario would only cause short term disruption and
> > >      > wouldn't kill Bitcoin long term.
> > >      >
> > >      > On Thu, Feb 18, 2021 at 2:01 PM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>
> > >     <mailto:lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>>> wrote:
> > >      >
> > >      >     If the eventual outcome is that different implementations (that have material *transaction processing* userbases,
> > >      >     and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here
> > >     and not
> > >      >     activate Taproot. Seriously.
> > >      >
> > >      >     Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.
> > >      >
> > >      >     Matt
> > >      >
> > >      >>     On Feb 18, 2021, at 08:11, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> > >      >>     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> > >      >>
> > >      >>     ?
> > >      >>     Right, that is one option. Personally I would prefer a Bitcoin Core release sets LOT=false (based on what I have
> > >      >>     heard from Bitcoin Core contributors) and a community effort releases a version with LOT=true. I don't think
> > >     users
> > >      >>     should be forced to choose something they may have no context on before they are allowed to use Bitcoin Core.
> > >      >>
> > >      >>     My current understanding is that roasbeef is planning to set LOT=false on btcd (an alternative protocol
> > >      >>     implementation to Bitcoin Core) and Luke Dashjr hasn't yet decided on Bitcoin Knots.
> > >      >>
> > >      >>
> > >      >>
> > >      >>     On Thu, Feb 18, 2021 at 11:52 AM ZmnSCPxj <ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>
> > >     <mailto:ZmnSCPxj at protonmail.com <mailto:ZmnSCPxj at protonmail.com>>> wrote:
> > >      >>
> > >      >>         Good morning all,
> > >      >>
> > >      >>         > "An activation mechanism is a consensus change like any other change, can be contentious like any other
> > >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline."
> > >      >>         >
> > >      >>         > Who's we here?
> > >      >>         >
> > >      >>         > Release both and let the network decide.
> > >      >>
> > >      >>         A thing that could be done, without mandating either LOT=true or LOT=false, would be to have a release that
> > >      >>         requires a `taprootlot=1` or `taprootlot=0` and refuses to start if the parameter is not set.
> > >      >>
> > >      >>         This assures everyone that neither choice is being forced on users, and instead what is being forced on
> > >     users,
> > >      >>         is for users to make that choice themselves.
> > >      >>
> > >      >>         Regards,
> > >      >>         ZmnSCPxj
> > >      >>
> > >      >>         >
> > >      >>         > On Thu, Feb 18, 2021 at 3:08 AM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org
> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> > >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> > >      >>         >
> > >      >>         > > Thanks for your response Ariel. It would be useful if you responded to specific points I have made
> > >     in the
> > >      >>         mailing list post or at least quote these ephemeral "people" you speak of. I don't know if you're responding
> > >      >>         to conversation on the IRC channel or on social media etc.
> > >      >>         > >
> > >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
> > >     into
> > >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
> > >      >>         must or must not run.
> > >      >>         > >
> > >      >>         > > I personally have never made this assumption. Of course users aren't forced to run any particular
> > >     software
> > >      >>         version, quite the opposite. Defaults set in software versions matter though as many users won't change
> > >     them.
> > >      >>         > >
> > >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
> > >     only a
> > >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good
> > >     reason of
> > >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the
> > >     moment of
> > >      >>         MUST_SIGNAL, unable to mine new blocks?
> > >      >>         > >
> > >      >>         > > It is a possible outcome but the likely outcome is that miners activate Taproot before LOT is even
> > >      >>         relevant. I think it is prudent to prepare for the unlikely but possible outcome that miners fail to
> > >     activate
> > >      >>         and hence have this discussion now rather than be unprepared for that eventuality. If LOT is set to
> > >     false in a
> > >      >>         software release there is the possibility (T2 in
> > >      >> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
> > >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>) of individuals or a
> > >      >>         proportion of the community changing LOT to true. In that sense setting LOT=false in a software release
> > >      >>         appears to be no more safe than LOT=true.
> > >      >>         > >
> > >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
> > >     miners
> > >      >>         by default.
> > >      >>         > >
> > >      >>         > > There is the (unlikely but possible) possibility of a wasted year if LOT is set to false and miners fail
> > >      >>         to activate. I'm not convinced by this perception that LOT=true is antagonistic to miners. I actually
> > >     think it
> > >      >>         offers them clarity on what will happen over a year time period and removes the need for coordinated or
> > >      >>         uncoordinated community UASF efforts on top of LOT=false.
> > >      >>         > >
> > >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other
> > >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> > >      >>         > >
> > >      >>         > > I don't know what you are recommending here to avoid "this darkest timeline". Open discussions have
> > >      >>         occurred and are continuing and in my mailing list post that you responded to **I recommended we propose
> > >      >>         LOT=false be set in protocol implementations such as Bitcoin Core**. I do think this apocalyptic language
> > >      >>         isn't particularly helpful. In an open consensus system discussion is healthy, we should prepare for bad or
> > >      >>         worst case scenarios in advance and doing so is not antagonistic or destructive. Mining pools have pledged
> > >      >>         support for Taproot but we don't build secure systems based on pledges of support, we build them to minimize
> > >      >>         trust in any human actors. We can be grateful that people like Alejandro have worked hard on
> > >      >> taprootactivation.com <http://taprootactivation.com> <http://taprootactivation.com
> > >     <http://taprootactivation.com>> (and this effort has informed the discussion) without
> > >      >>         taking pledges of support as cast iron guarantees.
> > >      >>         > >
> > >      >>         > > TL;DR It sounds like you agree with my recommendation to set LOT=false in protocol implementations in my
> > >      >>         email :)
> > >      >>         > >
> > >      >>         > > On Thu, Feb 18, 2021 at 5:43 AM Ariel Lorenzo-Luaces <arielluaces at gmail.com
> > >     <mailto:arielluaces at gmail.com>
> > >      >>         <mailto:arielluaces at gmail.com <mailto:arielluaces at gmail.com>>> wrote:
> > >      >>         > >
> > >      >>         > > > Something what strikes me about the conversation is the emotion surrounding the letters UASF.
> > >      >>         > > > It appears as if people discuss UASF as if it's a massive tidal wave of support that is
> > >     inevitable, like
> > >      >>         we saw during segwit activation. But the actual definition is "any activation that is not a MASF".
> > >      >>         > > > A UASF can consist of a single node, ten nodes, a thousand, half of all nodes, all business' nodes, or
> > >      >>         even all the non mining nodes. On another dimension it can have zero mining support, 51% support, 49%
> > >     support,
> > >      >>         or any support right up against a miner activation threshold.
> > >      >>         > > > Hell a UASF doesn't even need code or even a single node running as long as it exists as a possibility
> > >      >>         in people's minds.
> > >      >>         > > > The only thing a UASF doesn't have is miner support above an agreed activation threshold (some number
> > >      >>         above %51).
> > >      >>         > > > I say this because it strikes me when people say that they are for LOT=true with the logic that
> > >     since a
> > >      >>         UASF is guaranteed to happen then it's better to just make it default from the beginning. Words like
> > >      >>         coordination and safety are sometimes sprinkled into the argument.
> > >      >>         > > > The argument comes from a naive assumption that users MUST upgrade to the choice that is submitted
> > >     into
> > >      >>         code. But in fact this isn't true and some voices in this discussion need to be more humble about what users
> > >      >>         must or must not run.
> > >      >>         > > > Does no one realize that it is a very possible outcome that if LOT=true is released there may be
> > >     only a
> > >      >>         handful of people that begin running it while everyone else delays their upgrade (with the very good
> > >     reason of
> > >      >>         not getting involved in politics) and a year later those handful of people just become stuck at the
> > >     moment of
> > >      >>         MUST_SIGNAL, unable to mine new blocks? Or attracting a minority of miners, activating, and forking off
> > >     into a
> > >      >>         minority fork. Then a lot=false could be started that ends up activating the feature now that the stubborn
> > >      >>         option has ran its course.
> > >      >>         > > > The result: a wasted year of waiting and a minority of people who didn't want to be lenient with
> > >     miners
> > >      >>         by default. The chains could be called BitcoinLenient and BitcoinStubborn.
> > >      >>         > > > How is that strictly safer or more coordinated?
> > >      >>         > > > I may be in the minority, or maybe a silent majority, or maybe a majority that just hasn't considered
> > >      >>         this as a choice but honestly if there is contention about whether we're going to be stubborn or lenient
> > >     with
> > >      >>         miners for Taproot and in the future then I prefer to just not activate anything at all. I'm fine for
> > >     calling
> > >      >>         bitcoin ossified, accepting that segwit is Bitcoin's last network upgrade. Taproot is amazing but no new
> > >      >>         feature is worth a network split down the middle.
> > >      >>         > > > Maybe in 10 or 20 years, when other blockchains implement features like Taproot and many more, we will
> > >      >>         become envious enough to put aside our differences on how to behave towards miners and finally activate
> > >     Taproot.
> > >      >>         > > > An activation mechanism is a consensus change like any other change, can be contentious like any other
> > >      >>         change, and we must resolve it like any other change. Otherwise we risk arriving at the darkest timeline.
> > >      >>         > > > Cheers
> > >      >>         > > > Ariel Lorenzo-Luaces
> > >      >>         > > > On Feb 17, 2021, at 7:05 AM, Michael Folkson via bitcoin-dev
> > >     <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> > >      >>         <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>> wrote:
> > >      >>         > > >
> > >      >>         > > > > Yesterday (February 16th) we held a second meeting on Taproot
> > >      >>         > > > > activation on IRC which again was open to all. Despite what appeared
> > >      >>         > > > > to be majority support for LOT=false over LOT=true in the first
> > >      >>         > > > > meeting I (and others) thought the arguments had not been explored in
> > >      >>         > > > > depth and that we should have a follow up meeting almost entirely
> > >      >>         > > > > focused on whether LOT (lockinontimeout) should be set to true or
> > >      >>         > > > > false.
> > >      >>         > > > >
> > >      >>         > > > > The meeting was announced here:
> > >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>
> > >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html>>
> > >      >>         > > > >
> > >      >>         > > > > In that mailing list post I outlined the arguments for LOT=true (T1 to
> > >      >>         > > > > T6) and arguments for LOT=false (F1 to F6) in their strongest form I
> > >      >>         > > > > could. David Harding responded with an additional argument for
> > >      >>         > > > > LOT=false (F7) here:
> > >      >>         > > > > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>
> > >      >>         <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
> > >     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html>>
> > >      >>         > > > >
> > >      >>         > > > > These meetings are very challenging given they are open to all, you
> > >      >>         > > > > don?t know who will attend and you don?t know most people?s views in
> > >      >>         > > > > advance. I tried to give time for both the LOT=true arguments and the
> > >      >>         > > > > LOT=false arguments to be discussed as I knew there was support for
> > >      >>         > > > > both. We only tried evaluating which had more support and which had
> > >      >>         > > > > more strong opposition towards the end of the meeting.
> > >      >>         > > > >
> > >      >>         > > > > The conversation log is here:
> > >      >>         > > > > http://gnusha.org/taproot-activation/2021-02-16.log
> > >     <http://gnusha.org/taproot-activation/2021-02-16.log> <http://gnusha.org/taproot-activation/2021-02-16.log
> > >     <http://gnusha.org/taproot-activation/2021-02-16.log>>
> > >      >>         > > > >
> > >      >>         > > > > (If you are so inclined you can watch a video of the meeting here.
> > >      >>         > > > > Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
> > >      >>         > > > > https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>
> > >     <https://www.youtube.com/watch?v=vpl5q1ovMLM <https://www.youtube.com/watch?v=vpl5q1ovMLM>>)
> > >      >>         > > > >
> > >      >>         > > > > A summary of the meeting was provided by Luke Dashjr on Mastodon here:
> > >      >>         > > > > https://bitcoinhackers.org/@lukedashjr/105742918779234566
> > >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>
> > >      >>         <https://bitcoinhackers.org/@lukedashjr/105742918779234566
> > >     <https://bitcoinhackers.org/@lukedashjr/105742918779234566>>
> > >      >>         > > > >
> > >      >>         > > > > Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
> > >      >>         > > > > did manage to come to consensus on everything but LockinOnTimeout.
> > >      >>         > > > >
> > >      >>         > > > > Activation height range: 693504-745920
> > >      >>         > > > >
> > >      >>         > > > > MASF threshold: 1815/2016 blocks (90%)
> > >      >>         > > > >
> > >      >>         > > > > Keep in mind only ~100 people showed for the meetings, hardly
> > >      >>         > > > > representative of the entire community.
> > >      >>         > > > >
> > >      >>         > > > > So, these details remain JUST a proposal for now.
> > >      >>         > > > >
> > >      >>         > > > > It seems inevitable that there won't be consensus on LOT.
> > >      >>         > > > >
> > >      >>         > > > > Everyone will have to choose for himself. :/
> > >      >>         > > > >
> > >      >>         > > > > Personally I agree with most of this. I agree that there wasn?t
> > >      >>         > > > > overwhelming consensus for either LOT=true or LOT=false. However, from
> > >      >>         > > > > my perspective there was clearly more strong opposition (what would
> > >      >>         > > > > usually be deemed a NACK in Bitcoin Core review terminology) from
> > >      >>         > > > > Bitcoin Core contributors, Lightning developers and other community
> > >      >>         > > > > members against LOT=true than there was for LOT=false. Andrew Chow
> > >      >>         > > > > tried to summarize views from the meeting in this analysis:
> > >      >>         > > > > https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> > >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>
> > >      >>         <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
> > >     <https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c>>
> > >      >>         > > > >
> > >      >>         > > > > I am also aware of other current and previous Bitcoin Core
> > >      >>         > > > > contributors and Lightning developers who didn?t attend the meeting in
> > >      >>         > > > > person who are opposed to LOT=true. I don?t want to put them in the
> > >      >>         > > > > spotlight for no reason but if you go through the conversation logs of
> > >      >>         > > > > not only the meeting but the weeks of discussion prior to this meeting
> > >      >>         > > > > you will see their views evaluated on the ##taproot-activation
> > >      >>         > > > > channel. In addition, on taprootactivation.com <http://taprootactivation.com>
> > >     <http://taprootactivation.com <http://taprootactivation.com>> some mining pools
> > >      >>         > > > > expressed a preference for lot=false though I don?t know how strong
> > >      >>         > > > > that preference was.
> > >      >>         > > > >
> > >      >>         > > > > I am only one voice but it is my current assessment that if we are to
> > >      >>         > > > > attempt to finalize Taproot activation parameters and propose them to
> > >      >>         > > > > the community at this time our only option is to propose LOT=false.
> > >      >>         > > > > Any further delay appears to me counterproductive in our collective
> > >      >>         > > > > aim to get the Taproot soft fork activated as early as possible.
> > >      >>         > > > >
> > >      >>         > > > > Obviously others are free to disagree with that assessment and
> > >      >>         > > > > continue discussions but personally I will be attempting to avoid
> > >      >>         > > > > those discussions unless prominent new information comes to light or
> > >      >>         > > > > various specific individuals change their minds.
> > >      >>         > > > >
> > >      >>         > > > > Next week we are planning a code review of the Bitcoin Core PR #19573
> > >      >>         > > > > which was initially delayed because of this LOT discussion. As I?ve
> > >      >>         > > > > said previously that will be loosely following the format of the
> > >      >>         > > > > Bitcoin Core PR review club and will be lower level and more
> > >      >>         > > > > technical. That is planned for Tuesday February 23rd at 19:00 UTC on
> > >      >>         > > > > the IRC channel ##taproot-activation.
> > >      >>         > > > >
> > >      >>         > > > > Thanks to the meeting participants (and those who joined the
> > >      >>         > > > > discussion on the channel prior and post the meeting) for engaging
> > >      >>         > > > > productively and in good faith.
> > >      >>         > >
> > >      >>         > > --
> > >      >>         > > Michael Folkson
> > >      >>         > > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> > >     <mailto:michaelfolkson at gmail.com>>
> > >      >>         > > Keybase: michaelfolkson
> > >      >>         > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> > >      >>         > > _______________________________________________
> > >      >>         > > bitcoin-dev mailing list
> > >      >>         > > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
> > >      >>         > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> > >      >>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
> > >      >>
> > >      >>
> > >      >>
> > >      >>
> > >      >>     --
> > >      >>     Michael Folkson
> > >      >>     Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> > >     <mailto:michaelfolkson at gmail.com>>
> > >      >>     Keybase: michaelfolkson
> > >      >>     PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> > >      >>     _______________________________________________
> > >      >>     bitcoin-dev mailing list
> > >      >> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> > >     <mailto:bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>
> > >      >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> > >      >>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>>
> > >      >
> > >      >
> > >      >
> > >      > --
> > >      > Michael Folkson
> > >      > Email: michaelfolkson at gmail.com <mailto:michaelfolkson at gmail.com> <mailto:michaelfolkson at gmail.com
> > >     <mailto:michaelfolkson at gmail.com>>
> > >      > Keybase: michaelfolkson
> > >      > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> > >     _______________________________________________
> > >     bitcoin-dev mailing list
> > >     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
> > >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
> > >
> >
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From andrew.kozlik at satoshilabs.com  Fri Feb 19 13:34:16 2021
From: andrew.kozlik at satoshilabs.com (Andrew Kozlik)
Date: Fri, 19 Feb 2021 14:34:16 +0100
Subject: [bitcoin-dev] BIP70 is dead. What now?
In-Reply-To: <b60a7654-0252-90af-7ec1-b3de3ed74ae7@degreesofzero.com>
References: <63e9654c-44b8-740b-79a7-bb58f7bd198c@electrum.org>
 <b60a7654-0252-90af-7ec1-b3de3ed74ae7@degreesofzero.com>
Message-ID: <CACvH2ek=bM=0vH-skjhr2VnaF47U3eht5P3ukJ7CUnB3V8ZGQQ@mail.gmail.com>

Hi Thomas,

I am working on an experimental implementation [1] of a new payment request
format in Trezor T. In some respects it's similar to BIP-70. The main
differences are:

1. There is no reliance on X.509, since that seems to have been the main
reason for BIP-70's downfall. The signature is mandatory, since for us the
main feature is protection against a man-in-the-middle attack. So in this
sense it's more similar to BOLT11.

2. It can be used to solve a similar problem with coin exchange. When you
are sending BTC to a trusted exchange service and expecting another
cryptocurrency in return, say LTC, you want to be sure that you not only
have the correct BTC address, but also that the exchange service has your
correct LTC address.

3. It uses an optional nonce for replay protection.

The two interesting parts in [1] are probably the `TxAckPaymentRequest`
protobuf message [2] and the signature verification [3]. The protobuf
message is only for communication between Trezor and the host software
running on the user's computer. It's not intended for interchange between
wallets. We haven't defined the interchange format yet. I intend to create
a SLIP documenting all this.

Andrew

[1] https://github.com/trezor/trezor-firmware/compare/andrewkozlik/payreq2
[2]
https://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/common/protob/messages-bitcoin.proto#L403-L427
[3]
https://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/core/src/apps/bitcoin/sign_tx/payment_request.py

On Fri, Feb 19, 2021 at 1:43 PM Charles Hill via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi, Thomas,
>
> I developed a URL signing scheme for use with LNURL as a method for
> authorizing payments on behalf of offline devices /applications. It's
> not specifically off-chain or on-chain related, but could be repurposed.
> The gist of the scheme is as follows:
>
> Before any signing is done:
>
> 0) Generate an API key (ID/reference, secret, encoding) to be shared
> between a server and an offline device or application.
>
> To generate a signature:
>
> 1) Generate a random nonce (unique per API key)
>
> 2) Build a query string with the `id`, `nonce`, `tag`, "Server
> parameters" (see [Subprotocols](#subprotocols) above), and any custom
> parameters. The `id` parameter should be equal to the API key's ID.
> Example:
> `id=b6cb8e81e3&nonce=d585674cf991dbbab42b&tag=withdrawRequest&minWithdrawable=5000&maxWithdrawable=7000&defaultDescription=example&custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE`.
>
> Note that both the keys and values for query parameters should be URL
> encoded. The following characters should be __unescaped__: `A-Z a-z 0-9
> - _ . ! ~ * ' ( )`. See
> [encodeURIComponent](
> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#description)
>
> for more details.
>
> 3) Sort the query parameters by key (alphabetically). This is referred
> to as the "payload". Example:
>
> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest`
>
> 4) Sign the payload (the sorted query string) using the API key secret.
> Signatures are generated using HMAC-SHA256, where the API key secret is
> the key.
>
> 5) Append the signature to the payload as follows:
>
> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest&signature=HMAC_SHA256_SIGNATURE`.
>
> You can find more details here:
>
> https://github.com/chill117/lnurl-node#how-to-implement-url-signing-scheme
>
>
> I would change a few things with this scheme to fit better with the
> use-case you describe. For example:
>
> * Remove the "tag" and LNURL-specific parameters
>
> * Instead of HMAC-SHA256 with a shared secret, it could use pub/priv key
> signing instead. The lnurl-auth subprotocol has an interesting approach
> to protecting user privacy while allowing verification of signatures.
> See for more details on that:
>
> https://github.com/fiatjaf/lnurl-rfc/blob/master/lnurl-auth.md
>
>
> - chill
>
>
> On 2/19/21 10:14 AM, Thomas Voegtlin via bitcoin-dev wrote:
> > I never liked BIP70. It was too complex, had too many features, and when
> > people discuss it, they do not even agree on what the main feature was.
> >
> > Nevertheless, there is ONE feature of BIP70 that I find useful: the fact
> > that payment requests were signed. I am making this post to discuss this.
> >
> > When I send bitcoins to an exchange, I would like to receive a signed
> > request. I want to have a proof that the exchange asked me to send coins
> > to that address, in case it has been hijacked by some intern working
> > there. If that feature was implemented by an exchange, it would guide my
> > decision to use that exchange over its competitors.
> >
> > I do not think that a single exchange ever implemented that, but I guess
> > this is because BIP70 is a terrible standard. LN payment requests are
> > signed, do not require SSL, do not require interactivity, and therefore
> > exchanges use them. Can't we achieve the same for on-chain payments? Is
> > anyone working on that?
> >
> > I would be more than happy to remove BIP70 support from Electrum, if
> > there was another standard for signed requests.
> >
> > Thomas
> >
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210219/859aa75d/attachment.html>

From lf-lists at mattcorallo.com  Fri Feb 19 14:13:00 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 19 Feb 2021 09:13:00 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>
References: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>
Message-ID: <E3E39A9A-82B4-4096-9DA1-A4D758CC7B68@mattcorallo.com>

(Also in response to ZMN...)

Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I?d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren?t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.

There?s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn?t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there?s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there?s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).

Matt

> On Feb 19, 2021, at 07:08, Adam Back <adam at cypherspace.org> wrote:
>> would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?
> 
> given there are clearly people of both views, or for now don't care
> but might later, it would minimally be friendly and useful if
> bitcoin-core has a LOT=true option - and that IMO goes some way to
> avoid the assumptive control via defaults.

> Otherwise it could be read as saying "developers on average
> disapprove, but if you, the market disagree, go figure it out for
> yourself" which is not a good message for being defensive and avoiding
> mis-interpretation of code repositories or shipped defaults as
> "control".



From lf-lists at mattcorallo.com  Fri Feb 19 17:48:00 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 19 Feb 2021 12:48:00 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <E3E39A9A-82B4-4096-9DA1-A4D758CC7B68@mattcorallo.com>
References: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>
 <E3E39A9A-82B4-4096-9DA1-A4D758CC7B68@mattcorallo.com>
Message-ID: <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>

It was pointed out to me that this discussion is largely moot as the software complexity for Bitcoin Core to ship an 
option like this is likely not practical/what people would wish to see.

Bitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with 
uasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to 
enable switching back to uasf=false. This is complex, critical code to get right, and the review and testing cycles 
needed seem to be not worth it.

Instead, the only practical way to ship such an option would be to treat it as a separate chain (the same way regtest, 
testnet, and signet are treated), including its own separate datadir and the like.

Matt

On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:
> (Also in response to ZMN...)
> 
> Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I?d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren?t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.
> 
> There?s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn?t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there?s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there?s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).
> 
> Matt
> 
>> On Feb 19, 2021, at 07:08, Adam Back <adam at cypherspace.org> wrote:
>>> would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?
>>
>> given there are clearly people of both views, or for now don't care
>> but might later, it would minimally be friendly and useful if
>> bitcoin-core has a LOT=true option - and that IMO goes some way to
>> avoid the assumptive control via defaults.
> 
>> Otherwise it could be read as saying "developers on average
>> disapprove, but if you, the market disagree, go figure it out for
>> yourself" which is not a good message for being defensive and avoiding
>> mis-interpretation of code repositories or shipped defaults as
>> "control".
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From matthewonthemoon at gmail.com  Fri Feb 19 22:12:00 2021
From: matthewonthemoon at gmail.com (Matt Hill)
Date: Fri, 19 Feb 2021 15:12:00 -0700
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
Message-ID: <CABVK+EUVw7S=oA0sLC3iQUBrUY6G8FFSPQf_NkToPSkJhLM=1w@mail.gmail.com>

Good day all, this is my first post to this mailing list. Per Adam's
comment below:

> given there are clearly people of both views, or for now don't care
but might later, it would minimally be friendly and useful if
bitcoin-core has a LOT=true option - and that IMO goes some way to
avoid the assumptive control via defaults.

Both here and elsewhere, the debate taking place is around the manner of
Taproot activation, not whether or not Taproot should be activated. The
latter seems to have widespread support. Given this favorable environment,
it seems to me this is an incredible opportunity for the developer
contingency to "take the high road" while also minimizing time to Taproot
activation using political incentives. By offering power on the left hand
to miners and and power on the right to users, neither of whom is
expressing disapproval of activation, but both of whom are able to activate
without the consent of the other, both are incentivized to signal
activation as quickly as possible to emerge as the "group that did it". All
that must be done is to include a LOT=true option to Bitcoin Core that
carries a default of LOT=false. Miners can activate at any time, users can
signal their intent to activate should miners renege, and developers emerge
as politically neutral in the eyes of both.

Extrapolating a bit, I contend this expanded agency of full node
operatorship may result in more users running a full node, which is good
and healthy. From a miner's point of view, more full nodes only increases
the likelihood of future UASFs, and so they are even further incentivized
to expedite Taproot activation. Perhaps this is a stretch, perhaps not.

To summarize: (1) this positions developers as neutral facilitators who
deferred power to the other contingencies; (2) we may see a rise in the
popularity of running a full node and the number of full node operators;
(3) miners are incentivized to activate quickly to avoid being perceived as
the "bad guys" and to avoid the spread of full nodes; and (4) even if
miners do not activate, users can organize a UASF in a grass-roots way.

Matt Hill
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210219/bc99c654/attachment-0001.html>

From lf-lists at mattcorallo.com  Fri Feb 19 23:30:47 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 19 Feb 2021 18:30:47 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CABVK+EUVw7S=oA0sLC3iQUBrUY6G8FFSPQf_NkToPSkJhLM=1w@mail.gmail.com>
References: <CABVK+EUVw7S=oA0sLC3iQUBrUY6G8FFSPQf_NkToPSkJhLM=1w@mail.gmail.com>
Message-ID: <f45fbb8e-fb6d-7401-fe30-b27085f8111e@mattcorallo.com>

(off-list)

Your email client didn't thread correctly, so I'm not sure if you saw my responses to Adam's email, but note that there 
is no such thing as "All that must be done" here - supporting multiple, different, consensus rules for a given chain is 
a nontrivial undertaking in Bitcoin Core from a software perspective. The only practical way is to, just treat it as a 
different chain, which, in practice, it could be.

One group running LOT=true and one running LOT=false results in two Bitcoins, and the software would need to be able to 
handle that (and, presumably, allow users to switch between chains).

Matt

On 2/19/21 17:12, Matt Hill via bitcoin-dev wrote:
> Good day all, this is my first post to this mailing list. Per Adam's comment below:
> 
>  > given there are clearly people of both views, or for now don't care
> but might later, it would minimally be friendly and useful if
> bitcoin-core has a LOT=true option - and that IMO goes some way to
> avoid the assumptive control via defaults.
> 
> Both here and elsewhere, the debate taking place is around the manner of Taproot activation, not whether or not Taproot 
> should be activated. The latter seems to have widespread support. Given this favorable environment, it seems to me this 
> is an incredible opportunity for the developer contingency to "take the high road" while also minimizing time to Taproot 
> activation using political incentives. By offering power on the left hand to miners and and power on the right to users, 
> neither of whom is expressing disapproval of activation, but both of whom are able to activate without the consent of 
> the other, both are incentivized to signal activation as quickly as possible to emerge as the "group that did it". All 
> that must be done is to include a LOT=true option to Bitcoin Core that carries a default of LOT=false. Miners can 
> activate at any time, users can signal their intent to activate should miners renege, and developers emerge as 
> politically neutral in the eyes of both.
> 
> Extrapolating a bit, I contend this expanded agency of full node operatorship may result in more users running a full 
> node, which is good and healthy. From a miner's point of view, more full nodes only increases the likelihood of future 
> UASFs, and so they are even further incentivized to expedite Taproot activation. Perhaps this is a stretch, perhaps not.
> 
> To summarize: (1) this positions developers as neutral facilitators who deferred power to the other contingencies; (2) 
> we may see a rise in the popularity of running a full node and the number of full node operators; (3) miners are 
> incentivized to activate quickly to avoid being perceived as the "bad guys" and to avoid the spread of full nodes; and 
> (4) even if miners do not activate, users can organize a UASF in a grass-roots way.
> 
> Matt Hill
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From kanzure at gmail.com  Fri Feb 19 23:42:48 2021
From: kanzure at gmail.com (Bryan Bishop)
Date: Fri, 19 Feb 2021 17:42:48 -0600
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <f45fbb8e-fb6d-7401-fe30-b27085f8111e@mattcorallo.com>
References: <CABVK+EUVw7S=oA0sLC3iQUBrUY6G8FFSPQf_NkToPSkJhLM=1w@mail.gmail.com>
 <f45fbb8e-fb6d-7401-fe30-b27085f8111e@mattcorallo.com>
Message-ID: <CABaSBazzfiF0eLngBk1aaOQUyJa7k-Z96=OoJ2ZXBG8U4QsTuQ@mail.gmail.com>

On Fri, Feb 19, 2021 at 5:31 PM Matt Corallo via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> (off-list)
>
> Your email client didn't thread correctly, so I'm not sure if you saw my
> responses to Adam's email, but note that there


That was not off-list; by the way, as a reminder, some users are digest
subscribed (or not subscribed at all) and they can only reply by making a
new email thread unless they want to forge the email headers to match the
thread (which is a lost art that not many people are familiar with anymore).

- Bryan
https://twitter.com/kanzure
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210219/2d01eb34/attachment.html>

From ZmnSCPxj at protonmail.com  Sat Feb 20 02:55:16 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Sat, 20 Feb 2021 02:55:16 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>
References: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>
 <E3E39A9A-82B4-4096-9DA1-A4D758CC7B68@mattcorallo.com>
 <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>
Message-ID: <GCV_t7q-LWZOSrp4_BzurAjmQTuAcyptvOLUsQEpGNhg_l_SPZ3q0PlBxtUKOLfLs4G73ecSdK4SapbbBnRUo2j3yJg2_OTXgcFRzZOau_Q=@protonmail.com>

Good morning list,

> It was pointed out to me that this discussion is largely moot as the software complexity for Bitcoin Core to ship an
> option like this is likely not practical/what people would wish to see.
>
> Bitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with
> uasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to
> enable switching back to uasf=false. This is complex, critical code to get right, and the review and testing cycles
> needed seem to be not worth it.

Without implying anything else, this can be worked around by a user maintaining two `datadir`s and running two clients.
This would have an "external" client running an LOT=X (where X is whatever the user prefers) and an "internal" client that is at most 0.21.0, which will not impose any LOT rules.
The internal client then uses `connect=` directive to connect locally to the external client and connects only to that client, using it as a firewall.
The external client can be run pruned in order to reduce diskspace resource usage (the internal client can remain unpruned if that is needed by the user, e.g. for LN implementation sthat need to look up arbitrary short-channel-ids).
Bandwidth usage should be same since the internal client only connects to the external client and the OS should optimize that case.
CPU usage is doubled, though.

(the general idea came from gmax, just to be clear, though the below use is from me)

Then the user can select LOT=C or LOT=!C (where C is whatever Bitcoin Core ultimately ships with) on the external client based on the user preferences.

If Taproot is not MASF-activated and LOT=!U is what dominates later (where U is whatever the user decided on), the user can decide to just destroy the external node and connect the internal node directly to the network (optionally upgrading the internal node to LOT=!U) as a way to "change their mind in view of the economy".
The internal node will then follow the dominant chain.


Regards,
ZmnSCPxj

>
> Instead, the only practical way to ship such an option would be to treat it as a separate chain (the same way regtest,
> testnet, and signet are treated), including its own separate datadir and the like.
>
> Matt
>
> On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:
>
> > (Also in response to ZMN...)
> > Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I?d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren?t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.
> > There?s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn?t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there?s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there?s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).
> > Matt
> >
> > > On Feb 19, 2021, at 07:08, Adam Back adam at cypherspace.org wrote:
> > >
> > > > would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?
> > >
> > > given there are clearly people of both views, or for now don't care
> > > but might later, it would minimally be friendly and useful if
> > > bitcoin-core has a LOT=true option - and that IMO goes some way to
> > > avoid the assumptive control via defaults.
> >
> > > Otherwise it could be read as saying "developers on average
> > > disapprove, but if you, the market disagree, go figure it out for
> > > yourself" which is not a good message for being defensive and avoiding
> > > mis-interpretation of code repositories or shipped defaults as
> > > "control".
> >
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev



From ZmnSCPxj at protonmail.com  Sat Feb 20 02:55:16 2021
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Sat, 20 Feb 2021 02:55:16 +0000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>
References: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>
 <E3E39A9A-82B4-4096-9DA1-A4D758CC7B68@mattcorallo.com>
 <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>
Message-ID: <GCV_t7q-LWZOSrp4_BzurAjmQTuAcyptvOLUsQEpGNhg_l_SPZ3q0PlBxtUKOLfLs4G73ecSdK4SapbbBnRUo2j3yJg2_OTXgcFRzZOau_Q=@protonmail.com>

Good morning list,

> It was pointed out to me that this discussion is largely moot as the software complexity for Bitcoin Core to ship an
> option like this is likely not practical/what people would wish to see.
>
> Bitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with
> uasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to
> enable switching back to uasf=false. This is complex, critical code to get right, and the review and testing cycles
> needed seem to be not worth it.

Without implying anything else, this can be worked around by a user maintaining two `datadir`s and running two clients.
This would have an "external" client running an LOT=X (where X is whatever the user prefers) and an "internal" client that is at most 0.21.0, which will not impose any LOT rules.
The internal client then uses `connect=` directive to connect locally to the external client and connects only to that client, using it as a firewall.
The external client can be run pruned in order to reduce diskspace resource usage (the internal client can remain unpruned if that is needed by the user, e.g. for LN implementation sthat need to look up arbitrary short-channel-ids).
Bandwidth usage should be same since the internal client only connects to the external client and the OS should optimize that case.
CPU usage is doubled, though.

(the general idea came from gmax, just to be clear, though the below use is from me)

Then the user can select LOT=C or LOT=!C (where C is whatever Bitcoin Core ultimately ships with) on the external client based on the user preferences.

If Taproot is not MASF-activated and LOT=!U is what dominates later (where U is whatever the user decided on), the user can decide to just destroy the external node and connect the internal node directly to the network (optionally upgrading the internal node to LOT=!U) as a way to "change their mind in view of the economy".
The internal node will then follow the dominant chain.


Regards,
ZmnSCPxj

>
> Instead, the only practical way to ship such an option would be to treat it as a separate chain (the same way regtest,
> testnet, and signet are treated), including its own separate datadir and the like.
>
> Matt
>
> On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:
>
> > (Also in response to ZMN...)
> > Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I?d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren?t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.
> > There?s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn?t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there?s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there?s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).
> > Matt
> >
> > > On Feb 19, 2021, at 07:08, Adam Back adam at cypherspace.org wrote:
> > >
> > > > would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?
> > >
> > > given there are clearly people of both views, or for now don't care
> > > but might later, it would minimally be friendly and useful if
> > > bitcoin-core has a LOT=true option - and that IMO goes some way to
> > > avoid the assumptive control via defaults.
> >
> > > Otherwise it could be read as saying "developers on average
> > > disapprove, but if you, the market disagree, go figure it out for
> > > yourself" which is not a good message for being defensive and avoiding
> > > mis-interpretation of code repositories or shipped defaults as
> > > "control".
> >
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev



From arielluaces at gmail.com  Sat Feb 20 17:20:27 2021
From: arielluaces at gmail.com (Ariel Lorenzo-Luaces)
Date: Sat, 20 Feb 2021 09:20:27 -0800
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <GCV_t7q-LWZOSrp4_BzurAjmQTuAcyptvOLUsQEpGNhg_l_SPZ3q0PlBxtUKOLfLs4G73ecSdK4SapbbBnRUo2j3yJg2_OTXgcFRzZOau_Q=@protonmail.com>
References: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>
 <E3E39A9A-82B4-4096-9DA1-A4D758CC7B68@mattcorallo.com>
 <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>
 <GCV_t7q-LWZOSrp4_BzurAjmQTuAcyptvOLUsQEpGNhg_l_SPZ3q0PlBxtUKOLfLs4G73ecSdK4SapbbBnRUo2j3yJg2_OTXgcFRzZOau_Q=@protonmail.com>
Message-ID: <b5d23fb8-06a8-4dda-bdbb-2247a82fa1a0@gmail.com>

What would be the tradeoffs of a BIP8(false, ?) option? That would remove some of the concerns of having to coordinate a UASF with an approaching deadline.

Cheers
Ariel Lorenzo-Luaces
??

On Feb 19, 2021, 6:55 PM, at 6:55 PM, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Good morning list,
>
>> It was pointed out to me that this discussion is largely moot as the
>software complexity for Bitcoin Core to ship an
>> option like this is likely not practical/what people would wish to
>see.
>>
>> Bitcoin Core does not have infrastructure to handle switching
>consensus rules with the same datadir - after running with
>> uasf=true for some time, valid blocks will be marked as invalid, and
>additional development would need to occur to
>> enable switching back to uasf=false. This is complex, critical code
>to get right, and the review and testing cycles
>> needed seem to be not worth it.
>
>Without implying anything else, this can be worked around by a user
>maintaining two `datadir`s and running two clients.
>This would have an "external" client running an LOT=X (where X is
>whatever the user prefers) and an "internal" client that is at most
>0.21.0, which will not impose any LOT rules.
>The internal client then uses `connect=` directive to connect locally
>to the external client and connects only to that client, using it as a
>firewall.
>The external client can be run pruned in order to reduce diskspace
>resource usage (the internal client can remain unpruned if that is
>needed by the user, e.g. for LN implementation sthat need to look up
>arbitrary short-channel-ids).
>Bandwidth usage should be same since the internal client only connects
>to the external client and the OS should optimize that case.
>CPU usage is doubled, though.
>
>(the general idea came from gmax, just to be clear, though the below
>use is from me)
>
>Then the user can select LOT=C or LOT=!C (where C is whatever Bitcoin
>Core ultimately ships with) on the external client based on the user
>preferences.
>
>If Taproot is not MASF-activated and LOT=!U is what dominates later
>(where U is whatever the user decided on), the user can decide to just
>destroy the external node and connect the internal node directly to the
>network (optionally upgrading the internal node to LOT=!U) as a way to
>"change their mind in view of the economy".
>The internal node will then follow the dominant chain.
>
>
>Regards,
>ZmnSCPxj
>
>>
>> Instead, the only practical way to ship such an option would be to
>treat it as a separate chain (the same way regtest,
>> testnet, and signet are treated), including its own separate datadir
>and the like.
>>
>> Matt
>>
>> On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:
>>
>> > (Also in response to ZMN...)
>> > Bitcoin Core has a long-standing policy of not shipping options
>which shoot yourself in the foot. I?d be very disappointed if that
>changed now. People are of course more than welcome to run such
>software themselves, but I anticipate the loud minority on Twitter and
>here aren?t processing enough transactions or throwing enough financial
>weight behind their decision for them to do anything but just switch
>back if they find themselves on a chain with no blocks.
>> > There?s nothing we can (or should) do to prevent people from
>threatening to (and possibly) forking themselves off of bitcoin, but
>that doesn?t mean we should encourage it either. The work Bitcoin Core
>maintainers and developers do is to recommend courses of action which
>they believe have reasonable levels of consensus and are technically
>sound. Luckily, there?s strong historical precedent for people deciding
>to run other software around forks, so misinterpretation is not very
>common (just like there?s strong historical precedent for miners not
>unilaterally deciding forks in the case of Segwit).
>> > Matt
>> >
>> > > On Feb 19, 2021, at 07:08, Adam Back adam at cypherspace.org wrote:
>> > >
>> > > > would dev consensus around releasing LOT=false be considered as
>"developers forcing their views on users"?
>> > >
>> > > given there are clearly people of both views, or for now don't
>care
>> > > but might later, it would minimally be friendly and useful if
>> > > bitcoin-core has a LOT=true option - and that IMO goes some way
>to
>> > > avoid the assumptive control via defaults.
>> >
>> > > Otherwise it could be read as saying "developers on average
>> > > disapprove, but if you, the market disagree, go figure it out for
>> > > yourself" which is not a good message for being defensive and
>avoiding
>> > > mis-interpretation of code repositories or shipped defaults as
>> > > "control".
>> >
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210220/05495dc3/attachment.html>

From emcquinn8 at gmail.com  Sat Feb 20 15:53:57 2021
From: emcquinn8 at gmail.com (Eoin McQuinn)
Date: Sat, 20 Feb 2021 15:53:57 +0000
Subject: [bitcoin-dev] BIP70 is dead. What now?
In-Reply-To: <CACvH2ek=bM=0vH-skjhr2VnaF47U3eht5P3ukJ7CUnB3V8ZGQQ@mail.gmail.com>
References: <63e9654c-44b8-740b-79a7-bb58f7bd198c@electrum.org>
 <b60a7654-0252-90af-7ec1-b3de3ed74ae7@degreesofzero.com>
 <CACvH2ek=bM=0vH-skjhr2VnaF47U3eht5P3ukJ7CUnB3V8ZGQQ@mail.gmail.com>
Message-ID: <CAPeP9hkhJPu_wEa0_qudiUQNb8Lkb7L6Ue1aTVLGrPD0mF6yFw@mail.gmail.com>

What is a 'pull request'?

On Fri, Feb 19, 2021 at 1:49 PM Andrew Kozlik via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi Thomas,
>
> I am working on an experimental implementation [1] of a new payment
> request format in Trezor T. In some respects it's similar to BIP-70. The
> main differences are:
>
> 1. There is no reliance on X.509, since that seems to have been the main
> reason for BIP-70's downfall. The signature is mandatory, since for us the
> main feature is protection against a man-in-the-middle attack. So in this
> sense it's more similar to BOLT11.
>
> 2. It can be used to solve a similar problem with coin exchange. When you
> are sending BTC to a trusted exchange service and expecting another
> cryptocurrency in return, say LTC, you want to be sure that you not only
> have the correct BTC address, but also that the exchange service has your
> correct LTC address.
>
> 3. It uses an optional nonce for replay protection.
>
> The two interesting parts in [1] are probably the `TxAckPaymentRequest`
> protobuf message [2] and the signature verification [3]. The protobuf
> message is only for communication between Trezor and the host software
> running on the user's computer. It's not intended for interchange between
> wallets. We haven't defined the interchange format yet. I intend to create
> a SLIP documenting all this.
>
> Andrew
>
> [1] https://github.com/trezor/trezor-firmware/compare/andrewkozlik/payreq2
> [2]
> https://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/common/protob/messages-bitcoin.proto#L403-L427
> [3]
> https://github.com/trezor/trezor-firmware/blob/andrewkozlik/payreq2/core/src/apps/bitcoin/sign_tx/payment_request.py
>
> On Fri, Feb 19, 2021 at 1:43 PM Charles Hill via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi, Thomas,
>>
>> I developed a URL signing scheme for use with LNURL as a method for
>> authorizing payments on behalf of offline devices /applications. It's
>> not specifically off-chain or on-chain related, but could be repurposed.
>> The gist of the scheme is as follows:
>>
>> Before any signing is done:
>>
>> 0) Generate an API key (ID/reference, secret, encoding) to be shared
>> between a server and an offline device or application.
>>
>> To generate a signature:
>>
>> 1) Generate a random nonce (unique per API key)
>>
>> 2) Build a query string with the `id`, `nonce`, `tag`, "Server
>> parameters" (see [Subprotocols](#subprotocols) above), and any custom
>> parameters. The `id` parameter should be equal to the API key's ID.
>> Example:
>> `id=b6cb8e81e3&nonce=d585674cf991dbbab42b&tag=withdrawRequest&minWithdrawable=5000&maxWithdrawable=7000&defaultDescription=example&custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE`.
>>
>> Note that both the keys and values for query parameters should be URL
>> encoded. The following characters should be __unescaped__: `A-Z a-z 0-9
>> - _ . ! ~ * ' ( )`. See
>> [encodeURIComponent](
>> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#description)
>>
>> for more details.
>>
>> 3) Sort the query parameters by key (alphabetically). This is referred
>> to as the "payload". Example:
>>
>> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest`
>>
>> 4) Sign the payload (the sorted query string) using the API key secret.
>> Signatures are generated using HMAC-SHA256, where the API key secret is
>> the key.
>>
>> 5) Append the signature to the payload as follows:
>>
>> `custom1=CUSTOM1_PARAM_VALUE&custom2=CUSTOM2_PARAM_VALUE&defaultDescription=example&id=b6cb8e81e3&maxWithdrawable=7000&minWithdrawable=5000&nonce=d585674cf991dbbab42b&tag=withdrawRequest&signature=HMAC_SHA256_SIGNATURE`.
>>
>> You can find more details here:
>>
>> https://github.com/chill117/lnurl-node#how-to-implement-url-signing-scheme
>>
>>
>> I would change a few things with this scheme to fit better with the
>> use-case you describe. For example:
>>
>> * Remove the "tag" and LNURL-specific parameters
>>
>> * Instead of HMAC-SHA256 with a shared secret, it could use pub/priv key
>> signing instead. The lnurl-auth subprotocol has an interesting approach
>> to protecting user privacy while allowing verification of signatures.
>> See for more details on that:
>>
>> https://github.com/fiatjaf/lnurl-rfc/blob/master/lnurl-auth.md
>>
>>
>> - chill
>>
>>
>> On 2/19/21 10:14 AM, Thomas Voegtlin via bitcoin-dev wrote:
>> > I never liked BIP70. It was too complex, had too many features, and when
>> > people discuss it, they do not even agree on what the main feature was.
>> >
>> > Nevertheless, there is ONE feature of BIP70 that I find useful: the fact
>> > that payment requests were signed. I am making this post to discuss
>> this.
>> >
>> > When I send bitcoins to an exchange, I would like to receive a signed
>> > request. I want to have a proof that the exchange asked me to send coins
>> > to that address, in case it has been hijacked by some intern working
>> > there. If that feature was implemented by an exchange, it would guide my
>> > decision to use that exchange over its competitors.
>> >
>> > I do not think that a single exchange ever implemented that, but I guess
>> > this is because BIP70 is a terrible standard. LN payment requests are
>> > signed, do not require SSL, do not require interactivity, and therefore
>> > exchanges use them. Can't we achieve the same for on-chain payments? Is
>> > anyone working on that?
>> >
>> > I would be more than happy to remove BIP70 support from Electrum, if
>> > there was another standard for signed requests.
>> >
>> > Thomas
>> >
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>


-- 
eoin.substack.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210220/b59a9c3b/attachment-0001.html>

From lf-lists at mattcorallo.com  Sun Feb 21 14:30:45 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Sun, 21 Feb 2021 09:30:45 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <b5d23fb8-06a8-4dda-bdbb-2247a82fa1a0@gmail.com>
References: <b5d23fb8-06a8-4dda-bdbb-2247a82fa1a0@gmail.com>
Message-ID: <4A6F5D19-DF75-4C83-A435-53B6EAABD85F@mattcorallo.com>

I don?t think ?some vocal users are going to threaten to fork themselves off? is good justification for technical decisions. It?s important to communicate and for everyone to agree/understand that a failed BIP 8/9 activation, in the scenario people are worried about, is not the end of the story for Taproot activation. If it is clear that Taproot has broad consensus but some miners failed to upgrade in time (as it presumably would be), a flag day activation seems merited and I?m not sure anyone has argued against this. That said, forced-signaling via a UASF/BIP8(true)-style fork carries material additional risk that a classic flag-day activation does not, so let?s not optimize for something like that.

Matt

> On Feb 21, 2021, at 08:26, Ariel Lorenzo-Luaces via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?
> What would be the tradeoffs of a BIP8(false, ?) option? That would remove some of the concerns of having to coordinate a UASF with an approaching deadline.
> 
> Cheers
> Ariel Lorenzo-Luaces
>> On Feb 19, 2021, at 6:55 PM, ZmnSCPxj via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Good morning list,
>> 
>>>  It was pointed out to me that this discussion is largely moot as the software complexity for Bitcoin Core to ship an
>>>  option like this is likely not practical/what people would wish to see.
>>> 
>>>  Bitcoin Core does not have infrastructure to handle switching consensus rules with the same datadir - after running with
>>>  uasf=true for some time, valid blocks will be marked as invalid, and additional development would need to occur to
>>>  enable switching back to uasf=false. This is complex, critical code to get right, and the review and testing cycles
>>>  needed seem to be not worth it.
>> 
>> Without implying anything else, this can be worked around by a user maintaining two `datadir`s and running two clients.
>> This would have an "external" client running an LOT=X (where X is whatever the user prefers) and an "internal" client that is at most 0.21.0, which will not impose any LOT rules.
>> The internal client then uses `connect=` directive to connect locally to the external client and connects only to that client, using it as a firewall.
>> The external client can be run pruned in order to reduce diskspace resource usage (the internal client can remain unpruned if that is needed by the user, e.g. for LN implementation sthat need to look up arbitrary short-channel-ids).
>> Bandwidth usage should be same since the internal client only connects to the external client and the OS should optimize that case.
>> CPU usage is doubled, though.
>> 
>> (the general idea came from gmax, just to be clear, though the below use is from me)
>> 
>> Then the user can select LOT=C or LOT=!C (where C is whatever Bitcoin Core ultimately ships with) on the external client based on the user preferences.
>> 
>> If Taproot is not MASF-activated and LOT=!U is what dominates later (where U is whatever the user decided on), the user can decide to just destroy the external node and connect the internal node directly to the network (optionally upgrading the internal node to LOT=!U) as a way to "change their mind in view of the economy".
>> The internal node will then follow the dominant chain.
>> 
>> 
>> Regards,
>> ZmnSCPxj
>> 
>>> 
>>>  Instead, the only practical way to ship such an option would be to treat it as a separate chain (the same way regtest,
>>>  testnet, and signet are treated), including its own separate datadir and the like.
>>> 
>>>  Matt
>>> 
>>>>  On 2/19/21 09:13, Matt Corallo via bitcoin-dev wrote:
>>>> 
>>>>  (Also in response to ZMN...)
>>>>  Bitcoin Core has a long-standing policy of not shipping options which shoot yourself in the foot. I?d be very disappointed if that changed now. People are of course more than welcome to run such software themselves, but I anticipate the loud minority on Twitter and here aren?t processing enough transactions or throwing enough financial weight behind their decision for them to do anything but just switch back if they find themselves on a chain with no blocks.
>>>>  There?s nothing we can (or should) do to prevent people from threatening to (and possibly) forking themselves off of bitcoin, but that doesn?t mean we should encourage it either. The work Bitcoin Core maintainers and developers do is to recommend courses of action which they believe have reasonable levels of consensus and are technically sound. Luckily, there?s strong historical precedent for people deciding to run other software around forks, so misinterpretation is not very common (just like there?s strong historical precedent for miners not unilaterally deciding forks in the case of Segwit).
>>>>  Matt
>>>> 
>>>>>>  On Feb 19, 2021, at 07:08, Adam Back adam at cypherspace.org wrote:
>>>>>> 
>>>>>>  would dev consensus around releasing LOT=false be considered as "developers forcing their views on users"?
>>>>> 
>>>>>  given there are clearly people of both views, or for now don't care
>>>>>  but might later, it would minimally be friendly and useful if
>>>>>  bitcoin-core has a LOT=true option - and that IMO goes some way to
>>>>>  avoid the assumptive control via defaults.
>>>> 
>>>>>  Otherwise it could be read as saying "developers on average
>>>>>  disapprove, but if you, the market disagree, go figure it out for
>>>>>  yourself" which is not a good message for being defensive and avoiding
>>>>>  mis-interpretation of code repositories or shipped defaults as
>>>>>  "control".
>>>> 
>>>>  bitcoin-dev mailing list
>>>>  bitcoin-dev at lists.linuxfoundation.org
>>>>  https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
>> 
>> 
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210221/fb583f75/attachment.html>

From erik at q32.com  Sun Feb 21 16:21:34 2021
From: erik at q32.com (Erik Aronesty)
Date: Sun, 21 Feb 2021 11:21:34 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
References: <CAFvNmHTGkQJnsp7J8q0W3rf2j_djO0J0GNFzrhTpdAvN1GihEA@mail.gmail.com>
Message-ID: <CAJowKgKicnS=aLD4yk9t9GHChcoED3VBXuqFW0JuvCoZtNbTeg@mail.gmail.com>

I think the most important thing is that the configuration setting is
advertised if somebody were to query the node for its capabilities.

Is this the case?

That way the default value isn't really the important thing.

There are longstanding and well-known nodes, for example.  Community
support and visibility for a UASF is the most important aspect.

I looked over the threads and I don't think I saw the broadcast nature of
this setting clearly discussed.





On Wed, Feb 17, 2021, 10:10 AM Michael Folkson via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Yesterday (February 16th) we held a second meeting on Taproot
> activation on IRC which again was open to all. Despite what appeared
> to be majority support for LOT=false over LOT=true in the first
> meeting I (and others) thought the arguments had not been explored in
> depth and that we should have a follow up meeting almost entirely
> focused on whether LOT (lockinontimeout) should be set to true or
> false.
>
> The meeting was announced here:
>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018380.html
>
> In that mailing list post I outlined the arguments for LOT=true (T1 to
> T6) and arguments for LOT=false (F1 to F6) in their strongest form I
> could. David Harding responded with an additional argument for
> LOT=false (F7) here:
>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018415.html
>
> These meetings are very challenging given they are open to all, you
> don?t know who will attend and you don?t know most people?s views in
> advance. I tried to give time for both the LOT=true arguments and the
> LOT=false arguments to be discussed as I knew there was support for
> both. We only tried evaluating which had more support and which had
> more strong opposition towards the end of the meeting.
>
> The conversation log is here:
> http://gnusha.org/taproot-activation/2021-02-16.log
>
> (If you are so inclined you can watch a video of the meeting here.
> Thanks to the YouTube account ?Bitcoin? for setting up the livestream:
> https://www.youtube.com/watch?v=vpl5q1ovMLM)
>
> A summary of the meeting was provided by Luke Dashjr on Mastodon here:
> https://bitcoinhackers.org/@lukedashjr/105742918779234566
>
> Today's #Bitcoin #Taproot meeting was IMO largely unproductive, but we
> did manage to come to consensus on everything but LockinOnTimeout.
>
> Activation height range: 693504-745920
>
> MASF threshold: 1815/2016 blocks (90%)
>
> Keep in mind only ~100 people showed for the meetings, hardly
> representative of the entire community.
>
> So, these details remain JUST a proposal for now.
>
> It seems inevitable that there won't be consensus on LOT.
>
> Everyone will have to choose for himself. :/
>
> Personally I agree with most of this. I agree that there wasn?t
> overwhelming consensus for either LOT=true or LOT=false. However, from
> my perspective there was clearly more strong opposition (what would
> usually be deemed a NACK in Bitcoin Core review terminology) from
> Bitcoin Core contributors, Lightning developers and other community
> members against LOT=true than there was for LOT=false. Andrew Chow
> tried to summarize views from the meeting in this analysis:
> https://gist.github.com/achow101/3e179501290abb7049de198d46894c7c
>
> I am also aware of other current and previous Bitcoin Core
> contributors and Lightning developers who didn?t attend the meeting in
> person who are opposed to LOT=true. I don?t want to put them in the
> spotlight for no reason but if you go through the conversation logs of
> not only the meeting but the weeks of discussion prior to this meeting
> you will see their views evaluated on the ##taproot-activation
> channel. In addition, on taprootactivation.com some mining pools
> expressed a preference for lot=false though I don?t know how strong
> that preference was.
>
> I am only one voice but it is my current assessment that if we are to
> attempt to finalize Taproot activation parameters and propose them to
> the community at this time our only option is to propose LOT=false.
> Any further delay appears to me counterproductive in our collective
> aim to get the Taproot soft fork activated as early as possible.
>
> Obviously others are free to disagree with that assessment and
> continue discussions but personally I will be attempting to avoid
> those discussions unless prominent new information comes to light or
> various specific individuals change their minds.
>
> Next week we are planning a code review of the Bitcoin Core PR #19573
> which was initially delayed because of this LOT discussion. As I?ve
> said previously that will be loosely following the format of the
> Bitcoin Core PR review club and will be lower level and more
> technical. That is planned for Tuesday February 23rd at 19:00 UTC on
> the IRC channel ##taproot-activation.
>
> Thanks to the meeting participants (and those who joined the
> discussion on the channel prior and post the meeting) for engaging
> productively and in good faith.
>
> --
> Michael Folkson
> Email: michaelfolkson at gmail.com
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210221/f8ea2175/attachment-0001.html>

From aj at erisian.com.au  Mon Feb 22 05:16:24 2021
From: aj at erisian.com.au (Anthony Towns)
Date: Mon, 22 Feb 2021 15:16:24 +1000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>
References: <CALqxMTFKbjg3yDPnrmL8TgtypirB_fDMMJD=AJxjYav51hmEAw@mail.gmail.com>
 <E3E39A9A-82B4-4096-9DA1-A4D758CC7B68@mattcorallo.com>
 <ce8925d5-d2f1-1adb-530d-36f89f5b6352@bluematt.me>
Message-ID: <20210222051624.6eklzfec2bf4lqdk@erisian.com.au>

On Fri, Feb 19, 2021 at 12:48:00PM -0500, Matt Corallo via bitcoin-dev wrote:
> It was pointed out to me that this discussion is largely moot as the
> software complexity for Bitcoin Core to ship an option like this is likely
> not practical/what people would wish to see.
> Bitcoin Core does not have infrastructure to handle switching consensus
> rules with the same datadir - after running with uasf=true for some time,
> valid blocks will be marked as invalid, 

I don't think this is true? With the current proposed bip8 code,
lockinontimeout=true will cause headers to be marked as invalid, and
won't process the block further. If a node running lockinontimeout=true
accepts the header, then it will apply the same consensus rules as a
lockinontimeout=false node.

I don't think an invalid header will be added to the block index at all,
so a node restart should always cleanly allow it to be reconsidered.

The test case in

https://github.com/bitcoin/bitcoin/pull/19573/commits/bd8517135fc839c3332fea4d9c8373b94c8c9de8

tests that a node that had rejected a chain due to lockinontimeout=true
will reorg to that chain after being restarted as a byproduct of the way
it tests different cases (the nodes set a new startheight, but retain
their lockinontimeout settings).


(I think with the current bip8 code, if you switch from
lockinontimeout=false to lockinontimeout=true and the tip of the current
most work chain is after the timeoutheight and did not lockin, then you
will continue following that chain until a taproot-invalid transaction
is inclued, rather than immediately reorging to a shorter chain that
complies with the lockinontimeout=true rules)

Cheers,
aj


From lf-lists at mattcorallo.com  Mon Feb 22 06:44:55 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Mon, 22 Feb 2021 01:44:55 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <20210222051624.6eklzfec2bf4lqdk@erisian.com.au>
References: <20210222051624.6eklzfec2bf4lqdk@erisian.com.au>
Message-ID: <4FF38E1A-677B-478C-B32F-4640DF867810@mattcorallo.com>

Hmm, indeed, I may have missed that you can skip the headers issues by not persisting them, though there are other follow-on effects that are concerning and I think still make my point valid.

A node feeding you invalid headers (used to be) cause for a ban - is that information still persisted? More importantly, nodes on both sides of the fork need to find each other. There?s not a great way to do that without forking the address database, DNS seeds and defining a new protocol magic.

Matt

> On Feb 22, 2021, at 00:16, Anthony Towns <aj at erisian.com.au> wrote:
> 
> ?On Fri, Feb 19, 2021 at 12:48:00PM -0500, Matt Corallo via bitcoin-dev wrote:
>> It was pointed out to me that this discussion is largely moot as the
>> software complexity for Bitcoin Core to ship an option like this is likely
>> not practical/what people would wish to see.
>> Bitcoin Core does not have infrastructure to handle switching consensus
>> rules with the same datadir - after running with uasf=true for some time,
>> valid blocks will be marked as invalid, 
> 
> I don't think this is true? With the current proposed bip8 code,
> lockinontimeout=true will cause headers to be marked as invalid, and
> won't process the block further. If a node running lockinontimeout=true
> accepts the header, then it will apply the same consensus rules as a
> lockinontimeout=false node.
> 
> I don't think an invalid header will be added to the block index at all,
> so a node restart should always cleanly allow it to be reconsidered.
> 
> The test case in
> 
> https://github.com/bitcoin/bitcoin/pull/19573/commits/bd8517135fc839c3332fea4d9c8373b94c8c9de8
> 
> tests that a node that had rejected a chain due to lockinontimeout=true
> will reorg to that chain after being restarted as a byproduct of the way
> it tests different cases (the nodes set a new startheight, but retain
> their lockinontimeout settings).
> 
> 
> (I think with the current bip8 code, if you switch from
> lockinontimeout=false to lockinontimeout=true and the tip of the current
> most work chain is after the timeoutheight and did not lockin, then you
> will continue following that chain until a taproot-invalid transaction
> is inclued, rather than immediately reorging to a shorter chain that
> complies with the lockinontimeout=true rules)
> 
> Cheers,
> aj
> 

From prayank at tutanota.de  Sun Feb 21 10:10:08 2021
From: prayank at tutanota.de (Prayank)
Date: Sun, 21 Feb 2021 11:10:08 +0100 (CET)
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
Message-ID: <MU33KCZ--3-2@tutanota.de>

Hello Everyone,

The below comment by Matt about different implementations and their opinion on `lockinontimeout` is from 18 Feb 2021 communication:?https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018433.html

>?If the eventual outcome is that different implementations (that have material *transaction processing* userbases, and I?m not sure to what extent that?s true with Knots) ship different consensus rules, we should stop here and not activate Taproot. Seriously. Bitcoin is a consensus system. The absolute worst outcome at all possible is to have it fall out of consensus.

I don't agree to the part that 'we should stop and not activate taproot'. Instead it will be helpful if we can educate most of the people about trade-offs involved in both options with some tables, charts etc.

I think its time to use Bitcoin Knots for more projects and also maintain multiple forks of Bitcoin Core. This is not just limited to `LOT=True or False` but few other things and in general its good for decentralization of Bitcoin. Bitcoin Core is used by most of the nodes according to this pie chart:?https://luke.dashjr.org/programs/bitcoin/files/charts/software.html?however having multiple forks of Bitcoin Core with real usage, more maintainers in different parts of the world (some even anon), few different features, more reviewers, better communication channels etc. will help everyone involved in Bitcoin.

I am working on a project right now which involves multisig, discreet log contracts, liquid etc. Using bitcoin-s for it because I need DLC but still depending on Bitcoin Core in it. Would try Bitcoin Knots and other implementations soon and also have been looking for developers good with C++ and Python, living in India who are interested to maintain a fork of Bitcoin Core with few changes. I had shared about in replies to Amir Taaki's tweet few days back.

--
Prayank

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210221/0fac6a94/attachment-0001.html>

From 5700er at gmx.com  Sun Feb 21 23:28:44 2021
From: 5700er at gmx.com (Herman Puller)
Date: Mon, 22 Feb 2021 00:28:44 +0100
Subject: [bitcoin-dev] Teleport Transactions: A CoinSwap implementation
 for Bitcoin
In-Reply-To: <5fcab0fc-6135-7587-7b3c-a314ccd099ca@riseup.net>
References: <5fcab0fc-6135-7587-7b3c-a314ccd099ca@riseup.net>
Message-ID: <trinity-6ade29b2-2d87-490b-8d01-b5c754c3f652-1613950124890@3c-app-mailcom-bs10>

An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210222/8d7777c7/attachment-0001.html>

From aj at erisian.com.au  Mon Feb 22 10:16:32 2021
From: aj at erisian.com.au (Anthony Towns)
Date: Mon, 22 Feb 2021 20:16:32 +1000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <4FF38E1A-677B-478C-B32F-4640DF867810@mattcorallo.com>
References: <20210222051624.6eklzfec2bf4lqdk@erisian.com.au>
 <4FF38E1A-677B-478C-B32F-4640DF867810@mattcorallo.com>
Message-ID: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>

On Mon, Feb 22, 2021 at 01:44:55AM -0500, Matt Corallo wrote:
> A node feeding you invalid headers (used to be) cause for a ban [...]

Headers that are invalid due to MUST_SIGNAL rules are marked as
BLOCK_RECENT_CONSENSUS_CHANGE so don't directly result in a ban. If you're
doing headers-first relay, I think that will also prevent hitting the
BLOCK_MISSING_PREV case, which would result in a ban.

If a lockinontimeout=true node is requesting compact blocks from a
lockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,
I think that could result in a ban.

> More importantly, nodes on both sides of the fork need to find each other. 

(If there was going to be an ongoing fork there'd be bigger things to
worry about...)

I think the important specific case of this is something like "if a chain
where taproot is impossible to activate is temporarily the most work,
miners with lockinontimeout=true need to be well connected so they don't
end up competing with each other while they're catching back up".

Actually, that same requirement might be more practically for a signet
feature we were thinking about -- namely having "optional reorgs", ie
every now and then we'd mine 1-6 blocks and then reorg them out; but
also flag the soon-to-be-stale blocks in some way so that if you didn't
want to have to deal with reorgs you could easily ignore them. Having
it be possible for the "I want to see reorgs!" nodes to be able to find
each other seems like it might be a similar problem (avoiding having the
"don't-want-reorgs" nodes ban the "want-reorgs" nodes too perhaps).

Cheers,
aj


From lf-lists at mattcorallo.com  Mon Feb 22 14:00:29 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Mon, 22 Feb 2021 09:00:29 -0500
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
	lockinontimeout (LOT)
In-Reply-To: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
Message-ID: <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>



> On Feb 22, 2021, at 05:16, Anthony Towns <aj at erisian.com.au> wrote:
> 
> ?If a lockinontimeout=true node is requesting compact blocks from a
> lockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,
> I think that could result in a ban.
> 
>> More importantly, nodes on both sides of the fork need to find each other. 
> 
> (If there was going to be an ongoing fork there'd be bigger things to
> worry about...)

I think it should be clear that a UASF-style command line option to allow consensus rule changes in the node in the short term, immediately before a fork carries some risk of a fork, even if I agree it may not persist over months. We can?t simply ignore that.

> I think the important specific case of this is something like "if a chain
> where taproot is impossible to activate is temporarily the most work,
> miners with lockinontimeout=true need to be well connected so they don't
> end up competing with each other while they're catching back up".

Between this and your above point, I think we probably agree - there is material  technical complexity hiding behind a ?change the consensus rules? option. Given it?s not a critical feature by any means, putting resources into fixing these issues probably isn?t worth it.

Matt
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210222/08d2cbe2/attachment.html>

From aj at erisian.com.au  Mon Feb 22 16:27:40 2021
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 23 Feb 2021 02:27:40 +1000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
Message-ID: <20210222162740.mif2uygjszupizqc@erisian.com.au>

On Mon, Feb 22, 2021 at 09:00:29AM -0500, Matt Corallo wrote:
> I think it should be clear that a UASF-style command line option to allow
> consensus rule changes in the node in the short term, immediately before a fork
> carries some risk of a fork, even if I agree it may not persist over months. We
> can?t simply ignore that.

I don't think a "-set-bip8-lockinontimeout=taproot" option on its own
would be very safe -- if we were sure it was safe, because we were sure
that everyone would eventually set lockinontimeout=true, then we would
set lockinontimeout=true from day one and not need an option. I haven't
seen/had any good ideas on how to make the option safe, or at least make
it obvious that you shouldn't be setting it if you don't really
understand what you're getting yourself into. [0]

And that's even if you assume that the code was perfectly capable of
handling forks in some theoretically optimal way.

So at least for the time being, I don't think a config param / command
line option is a good idea for bip8. IMHO, YMMV, IANABDFL etc.

>     I think the important specific case of this is something like "if a chain
>     where taproot is impossible to activate is temporarily the most work,
>     miners with lockinontimeout=true need to be well connected so they don't
>     end up competing with each other while they're catching back up".
> Between this and your above point, I think we probably agree - there is
> material  technical complexity hiding behind a ?change the consensus rules?
> option. Given it?s not a critical feature by any means, putting resources into
> fixing these issues probably isn?t worth it.

For reference, the "preferentially peer with other UASF nodes" PR for
the BIP148 client was

  https://github.com/UASF/bitcoin/pull/24

List discussion was at

  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014618.html

I think I'll add playing around with that and reorgs on a signet to my
todo list to see how it goes in cases other than ones that are (hopefully)
vanishingly unlikely to ever happen in practice.

Cheers,
aj

[0] In some sense, this is exactly the opposite sentiment compared to
    earonesty's comment:

    https://github.com/bitcoin/bitcoin/pull/10900#issuecomment-317333312

    I mean, I guess could solve the unsafe-now-but-maybe-safe-later
    problem generally with a signature:

      -authorise-dangerous-options-key=XXXX
      -lockinontimeout=taproot:YYYY

    where YYYY is a signature of "dangerous:lockinontimeout=taproot" or
    similar by the key XXXX, and XXXX defaults to some (multisig?) key
    controlled by some bitcoin people, who'll only sign that when
    there's clear evidence that it will be reasonably safe, and maybe to
    "cert-transparency" or something as well. So that allows having an
    option become available by publishing a signature, without having
    to recompile the code. And it could still be overriden by people who
    know what they're doing if the default key owners are being weird. And
    maybe the "dangerous" part is enough to prevent people from randomly
    cut-and-pasting it from a website into their bitcoin.conf.

    I dunno. No bad ideas when brainstorming...

From jtimon at jtimon.cc  Mon Feb 22 16:31:01 2021
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 22 Feb 2021 17:31:01 +0100
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
Message-ID: <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>

Sorry, I haven't read everything. I just want to say what I think is
the best option and why.
Let's say something like 2 years in which miners can signal activation
after which, the MUST signal it for their blocks to be valid (I think
this is LOT=true, but I don't remember what LOT stands for).
Some may argue than it's easier to move from LOT=false to LOT=true
than viceversa (I think I'm getting this right), but either way
different clients could interpret things more differently more easily
and, you know, that's really bad.
If anyone is against the consensus change itself, what they should do
is run a client in which the must is turned into a MUST NOT. Whenever
miners signal activation, blocks aren't valid so that it doesn't
happen.
That way both sides can be cleanly separated and both communities
(assuming there's a community of users opposing the change) can stick
together with their own in the same chain. That is, having only 2
chains in total if there are users opposing the change or only one if
not, but never 2 chains for people who want the change or 2 chains for
pople who don't want it.

Just my two sats, please nobody ask me "why would anyone oppose
taproot?" or anything similar. Because I'm trying to generalize here,
if we're talking about activation, I think the specifics of the change
are kind of irrelevant.

Separately: thanks to everyone who worked on taproot.


On Mon, Feb 22, 2021 at 3:00 PM Matt Corallo via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
>
> On Feb 22, 2021, at 05:16, Anthony Towns <aj at erisian.com.au> wrote:
>
> ?If a lockinontimeout=true node is requesting compact blocks from a
> lockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,
> I think that could result in a ban.
>
> More importantly, nodes on both sides of the fork need to find each other.
>
>
> (If there was going to be an ongoing fork there'd be bigger things to
> worry about...)
>
>
> I think it should be clear that a UASF-style command line option to allow consensus rule changes in the node in the short term, immediately before a fork carries some risk of a fork, even if I agree it may not persist over months. We can?t simply ignore that.
>
> I think the important specific case of this is something like "if a chain
> where taproot is impossible to activate is temporarily the most work,
> miners with lockinontimeout=true need to be well connected so they don't
> end up competing with each other while they're catching back up".
>
>
> Between this and your above point, I think we probably agree - there is material  technical complexity hiding behind a ?change the consensus rules? option. Given it?s not a critical feature by any means, putting resources into fixing these issues probably isn?t worth it.
>
> Matt
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From jtimon at jtimon.cc  Mon Feb 22 16:48:55 2021
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 22 Feb 2021 17:48:55 +0100
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
 <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>
Message-ID: <CABm2gDp5dRTrPEqPfrjOeeYBn6RMS=HFMbtkJ+MM0SMVnSfK5A@mail.gmail.com>

Just to clarify, I'm not saying bitcoin core should maintain the
"oppose proposal" part of the software. presumably people opposing the
change don't want much of the recent software changes anyway.
But perhaps it wouldn't be so bad, to oppose other proposals, perhaps.
I don't expect anyone to want this, but if people want it I offer
myself to code it,
I mean, just imagine that a day after publishing a bitcoin core
release with activation software for taproot some one, let's say in
New York reach an Agreement to "just use the same activation
mechanism, but for our 32 mb hardfork, it's about time, now computers
are 64 bits anyway". How convenient would it be to just cancel that
with 2 lines in bitcoin core?
Not that I think it will be necessary, but perhaps we want it just in case.

On Mon, Feb 22, 2021 at 5:31 PM Jorge Tim?n <jtimon at jtimon.cc> wrote:
>
> Sorry, I haven't read everything. I just want to say what I think is
> the best option and why.
> Let's say something like 2 years in which miners can signal activation
> after which, the MUST signal it for their blocks to be valid (I think
> this is LOT=true, but I don't remember what LOT stands for).
> Some may argue than it's easier to move from LOT=false to LOT=true
> than viceversa (I think I'm getting this right), but either way
> different clients could interpret things more differently more easily
> and, you know, that's really bad.
> If anyone is against the consensus change itself, what they should do
> is run a client in which the must is turned into a MUST NOT. Whenever
> miners signal activation, blocks aren't valid so that it doesn't
> happen.
> That way both sides can be cleanly separated and both communities
> (assuming there's a community of users opposing the change) can stick
> together with their own in the same chain. That is, having only 2
> chains in total if there are users opposing the change or only one if
> not, but never 2 chains for people who want the change or 2 chains for
> pople who don't want it.
>
> Just my two sats, please nobody ask me "why would anyone oppose
> taproot?" or anything similar. Because I'm trying to generalize here,
> if we're talking about activation, I think the specifics of the change
> are kind of irrelevant.
>
> Separately: thanks to everyone who worked on taproot.
>
>
> On Mon, Feb 22, 2021 at 3:00 PM Matt Corallo via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> >
> >
> > On Feb 22, 2021, at 05:16, Anthony Towns <aj at erisian.com.au> wrote:
> >
> > ?If a lockinontimeout=true node is requesting compact blocks from a
> > lockinontimeout=false node during a chainsplit in the MUST_SIGNAL phase,
> > I think that could result in a ban.
> >
> > More importantly, nodes on both sides of the fork need to find each other.
> >
> >
> > (If there was going to be an ongoing fork there'd be bigger things to
> > worry about...)
> >
> >
> > I think it should be clear that a UASF-style command line option to allow consensus rule changes in the node in the short term, immediately before a fork carries some risk of a fork, even if I agree it may not persist over months. We can?t simply ignore that.
> >
> > I think the important specific case of this is something like "if a chain
> > where taproot is impossible to activate is temporarily the most work,
> > miners with lockinontimeout=true need to be well connected so they don't
> > end up competing with each other while they're catching back up".
> >
> >
> > Between this and your above point, I think we probably agree - there is material  technical complexity hiding behind a ?change the consensus rules? option. Given it?s not a critical feature by any means, putting resources into fixing these issues probably isn?t worth it.
> >
> > Matt
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From jlrubin at mit.edu  Tue Feb 23 02:10:34 2021
From: jlrubin at mit.edu (Jeremy)
Date: Mon, 22 Feb 2021 18:10:34 -0800
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CABm2gDp5dRTrPEqPfrjOeeYBn6RMS=HFMbtkJ+MM0SMVnSfK5A@mail.gmail.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
 <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>
 <CABm2gDp5dRTrPEqPfrjOeeYBn6RMS=HFMbtkJ+MM0SMVnSfK5A@mail.gmail.com>
Message-ID: <CAD5xwhg0pWJykWUusdoNQd60L9_MgCzzky1dvViLERADMcoysQ@mail.gmail.com>

Not responding to anyone in particular, but it strikes me that one can
think about the case where a small minority (let's say H = 20%?) of nodes
select the opposite of what Core releases (LOT=false, LOT=true). I'm
ignoring the case where a critical bug is discovered in Taproot for reasons
I could expand on if anyone is interested (I don't think LOT=true/false has
much of a diff in that regard).

You'll note an asymmetry with LOT=true / false analysis. LOT=true nodes are
clearly updated (or lying), LOT=false nodes may be un-upgraded (or however
you want to interpret it).


*# 80% on LOT=false, 20% LOT=True*

- Case 1: Activates ahead of time anyways

No issues.

- Case 2: Fails to Activate before timeout...

20% *may* fork off with LOT=true. Bitcoin hashrate reduced, chance of multi
block reorgs at time of fork relatively high, especially if network does
not partition.

Implication is that activation % being 90%, then X% fewer than 70% of
miners are signaling for Taproot at this time.  If X% is small the
increased orphan rate caused by the LOT=true miners will cause it to
activate anyways. If X% is larger, then there will be a consensus split.



*# 80% on LOT=true, 20% LOT=False*
- Case 1: Activates ahead of time Anyways

No issues.

- Case 2: Fails to Activate before timeout...

A% + B% + C% = 20%

A% (upgraded, signal activate) remain on majority chain with LOT=false,
blocks mined universally valid.

B% (upgraded, not signaling) succeeds in activating and maintaining
consensus, blocks are temporarily lost during the final period, but
consensus re-emerges.

C% (not upgraded/not signalling) both fail to activate (not upgraded) and
blocks are rejected (not signaling) during mandatory signalling.
Essentially becomes an SPV miner, should still not select transactions
improperly given mempool policy, but may mine a bad tip.

(I argue that group B is irrational entirely, as in this case the majority
has upgraded, inevitably winning, and is orphaning their blocks so B should
effectively be 0% or can be combined with group C as being somehow not
upgraded if they are unable to switch once it becomes clear after say the
first 100 blocks in the period that LOT > 50%. The only difference in
lumping B with C is that group C SPV mines after the fork and B should, in
theory, have full validation.).



Apologies if my base analysis is off -- happy to take corrections.


My overall summary is thus:

1) People care what Core releases because we assume the majority will
likely run it. If core were a minority project, we wouldn't really care
what core released.
2) People are upset with LOT=true being suggested as release parameters
because of the *narrative* that it puts devs in control.
3) LOT=true having a sizeable minority running it presents major issues to
majority LOT=false in terms of lost blocks during the final period and in
terms of a longer term fork.
4) Majority LOT=true has no long term instability on consensus (majority
LOT=true means the final period always activates, any instability is short
lived + irrational).
5) On the balance, the safer parameter to release *seems* to be LOT=true.
But because devs are sensitive to control narrative, LOT=false is preferred
by devs.
6) Almost paradoxically, choosing a *less safe* option for a narrative
reason is more of a show of dev control than choosing a more safe option
despite appearances.
7) This all comes down to if we think that a reasonable number of important
nodes will run LOT=true.
8) This all doesn't matter *that much* because taproot will have many
opportunities to activate before the brinksmanship period.

As a plan of action, I think that means that either:

A) Core should release LOT=true, as a less disruptive option given stated
community intentions to do LOT=true
B) Core  community should vehemently anti-advocate running LOT=true to
ensure the % is as small as possible
C) Do nothing
D) Core community should release LOT=false and vehemently advocate manually
changing to LOT=true to ensure the % is supermajority, but leaving it as a
user choice.


Overall, I worry that plan B has a mild Streissand effect and would result
in boosting LOT=true (which could be OK, so long as LOT=true +
LOT=false+signal yes becomes the large majority, but would be not fun for
anyone if LOT=true + LOT=false+signal yes are a small majority). Plan C
most likely ends up with some % doing LOT=true anyways. D feels a little
silly, but maybe a good tradeoff.

If I had to summarize the emotional dynamic among developers around
LOT=true, I think devs wish it didn't exist because it is clear LOT=true
*creates* the issues here. LOT=false would be fine if the LOT=true strategy
didn't exist at all. But unfortunately the cat is out of the bag and cannot
be put back in. To validate the emotions, I think it is fine to be angry
about LOT=true and not like it, but we should either accept that it is most
likely to create consensus OR we should find a new game theoretic
activation strategy with better pro-social equilibriums.

Personally, I think with either plan the ultimate risk of forking is low
given probability to activate before timeout, so we should just pick
something and move on, accepting that we aren't setting a precedent by
which all future forks should abide. Given my understanding of the
tradeoffs, I believe that the safest choice is LOT=true, but I wouldn't
move to hold back a plan of LOT=false (but would probably take mitigative
steps on community advocacy if it looks like there is non majority but non
negligible LOT=true uptake).

Cheers,

Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210222/019548d1/attachment-0001.html>

From keagan.mcclelland at gmail.com  Tue Feb 23 19:33:11 2021
From: keagan.mcclelland at gmail.com (Keagan McClelland)
Date: Tue, 23 Feb 2021 12:33:11 -0700
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CAD5xwhg0pWJykWUusdoNQd60L9_MgCzzky1dvViLERADMcoysQ@mail.gmail.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
 <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>
 <CABm2gDp5dRTrPEqPfrjOeeYBn6RMS=HFMbtkJ+MM0SMVnSfK5A@mail.gmail.com>
 <CAD5xwhg0pWJykWUusdoNQd60L9_MgCzzky1dvViLERADMcoysQ@mail.gmail.com>
Message-ID: <CALeFGL1UbXx14aX7RK7nh7b4jwvmfF6AXrvqPJpriSB4ZvYT2A@mail.gmail.com>

I wanted to follow up on what Jeremy and others are saying regards finding
consensus on LOT. I've seen a few other opinions saying that finding
consensus on the LOT value is far more important than what the LOT value
actually is. This makes sense because if 100% of economic activity is
running the same rule set, there is no divergence, regardless of which
value is picked.

It is my understanding that those who oppose LOT=true are mostly opposed on
the grounds of it *appearing* "unnecessarily coercive" and that this lack
of consensus can precipitate a chain split at the "brinksmanship period" as
Jeremy refers to it. I don't think that we can say that LOT=true is
coercive at all unless there is some opposition to Taproot itself.
Opposition on the grounds that it *may* be opposed by others and Core does
not want to assert control over the protocol is a conservative view but
ultimately contingent upon opposition to Taproot for more fundamental
reasons. If no one opposes it, then by definition you have consensus, and
in that case I also don't think that the LOT=true (or false) in that regard
sets meaningful precedent, as I would expect precedents to only be
meaningful if they were established during a contentious scenario. As it
stands we have precedents for both MASF's and UASF's to execute soft forks
in Bitcoin.

Of course it seems intractable to ascertain the views of ~100% of the
Bitcoin constituency, and therefore it gives credibility to the argument
that by coming to consensus on LOT=false among those who *are* speaking up
is safer with the embedded assumptions that modifying consensus beyond what
core ships is an active choice, presumably by those who know what they are
doing. However, the simple act of Core choosing to ship an unconfigurable
LOT=false value does not *prevent* the forking and creation of a UASF
client. As Jeremy points out, the LOT=true possibility always exists here,
and we have multiple high profile people saying they will be running that
regardless of how things turn out. It seems to me that in this scenario,
LOT=false does less to prevent a chain split.

In regards to precedent, there may be good reasons to force that minority
to fork themselves off the network, as would be the case if a hypothetical
soft fork was a consensus action to blacklist some UTXO's or something else
that weaponizes consensus against some subset of Bitcoin's user base, but I
haven't heard a single person who advocates for LOT=false on the grounds
that they *themselves* oppose the consensus change that is being proposed
here. So if the goal is to prevent a chain split, and the soft fork is
benign and essentially "annexing unoccupied territory" with respect to
script versions, and no one actually has opposed Taproot itself, then I
fail to see how LOT=false is safer in the presence of a grenade defense by
the LOT=true crowd.

I personally *prefer* LOT=true for these reasons, but I am NOT going to be
joining the ranks of the intolerant minority if Core ultimately ships
LOT=false. I think it is more important to stay in consensus, and as a
result I am able to be convinced that false is the right answer. My
question to everyone else (true AND false advocates) is this: what would
you have to observe, in order to change your mind or is it immutably made
up? If we have a significant portion of the community that is immutably
made up to go false, and another portion that is going to go true, the
asymmetry of the fork almost *requires* that those of us whose opinions are
malleable to break for true.

If social consensus is what drives technical consensus and not the other
way around it seems as if there cannot exist a valid (rational?) reason to
oppose Taproot itself, and then by extension with the arguments laid out
above, LOT=true seems to be the logical conclusion of all of this, even if
Core ships LOT=false at the outset.

Where am I wrong here?

Keagan

On Mon, Feb 22, 2021 at 7:11 PM Jeremy via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Not responding to anyone in particular, but it strikes me that one can
> think about the case where a small minority (let's say H = 20%?) of nodes
> select the opposite of what Core releases (LOT=false, LOT=true). I'm
> ignoring the case where a critical bug is discovered in Taproot for reasons
> I could expand on if anyone is interested (I don't think LOT=true/false has
> much of a diff in that regard).
>
> You'll note an asymmetry with LOT=true / false analysis. LOT=true nodes
> are clearly updated (or lying), LOT=false nodes may be un-upgraded (or
> however you want to interpret it).
>
>
> *# 80% on LOT=false, 20% LOT=True*
>
> - Case 1: Activates ahead of time anyways
>
> No issues.
>
> - Case 2: Fails to Activate before timeout...
>
> 20% *may* fork off with LOT=true. Bitcoin hashrate reduced, chance of
> multi block reorgs at time of fork relatively high, especially if network
> does not partition.
>
> Implication is that activation % being 90%, then X% fewer than 70% of
> miners are signaling for Taproot at this time.  If X% is small the
> increased orphan rate caused by the LOT=true miners will cause it to
> activate anyways. If X% is larger, then there will be a consensus split.
>
>
>
> *# 80% on LOT=true, 20% LOT=False*
> - Case 1: Activates ahead of time Anyways
>
> No issues.
>
> - Case 2: Fails to Activate before timeout...
>
> A% + B% + C% = 20%
>
> A% (upgraded, signal activate) remain on majority chain with LOT=false,
> blocks mined universally valid.
>
> B% (upgraded, not signaling) succeeds in activating and maintaining
> consensus, blocks are temporarily lost during the final period, but
> consensus re-emerges.
>
> C% (not upgraded/not signalling) both fail to activate (not upgraded) and
> blocks are rejected (not signaling) during mandatory signalling.
> Essentially becomes an SPV miner, should still not select transactions
> improperly given mempool policy, but may mine a bad tip.
>
> (I argue that group B is irrational entirely, as in this case the majority
> has upgraded, inevitably winning, and is orphaning their blocks so B should
> effectively be 0% or can be combined with group C as being somehow not
> upgraded if they are unable to switch once it becomes clear after say the
> first 100 blocks in the period that LOT > 50%. The only difference in
> lumping B with C is that group C SPV mines after the fork and B should, in
> theory, have full validation.).
>
>
>
> Apologies if my base analysis is off -- happy to take corrections.
>
>
> My overall summary is thus:
>
> 1) People care what Core releases because we assume the majority will
> likely run it. If core were a minority project, we wouldn't really care
> what core released.
> 2) People are upset with LOT=true being suggested as release parameters
> because of the *narrative* that it puts devs in control.
> 3) LOT=true having a sizeable minority running it presents major issues to
> majority LOT=false in terms of lost blocks during the final period and in
> terms of a longer term fork.
> 4) Majority LOT=true has no long term instability on consensus (majority
> LOT=true means the final period always activates, any instability is short
> lived + irrational).
> 5) On the balance, the safer parameter to release *seems* to be LOT=true.
> But because devs are sensitive to control narrative, LOT=false is preferred
> by devs.
> 6) Almost paradoxically, choosing a *less safe* option for a narrative
> reason is more of a show of dev control than choosing a more safe option
> despite appearances.
> 7) This all comes down to if we think that a reasonable number of
> important nodes will run LOT=true.
> 8) This all doesn't matter *that much* because taproot will have many
> opportunities to activate before the brinksmanship period.
>
> As a plan of action, I think that means that either:
>
> A) Core should release LOT=true, as a less disruptive option given stated
> community intentions to do LOT=true
> B) Core  community should vehemently anti-advocate running LOT=true to
> ensure the % is as small as possible
> C) Do nothing
> D) Core community should release LOT=false and vehemently advocate
> manually changing to LOT=true to ensure the % is supermajority, but leaving
> it as a user choice.
>
>
> Overall, I worry that plan B has a mild Streissand effect and would result
> in boosting LOT=true (which could be OK, so long as LOT=true +
> LOT=false+signal yes becomes the large majority, but would be not fun for
> anyone if LOT=true + LOT=false+signal yes are a small majority). Plan C
> most likely ends up with some % doing LOT=true anyways. D feels a little
> silly, but maybe a good tradeoff.
>
> If I had to summarize the emotional dynamic among developers around
> LOT=true, I think devs wish it didn't exist because it is clear LOT=true
> *creates* the issues here. LOT=false would be fine if the LOT=true strategy
> didn't exist at all. But unfortunately the cat is out of the bag and cannot
> be put back in. To validate the emotions, I think it is fine to be angry
> about LOT=true and not like it, but we should either accept that it is most
> likely to create consensus OR we should find a new game theoretic
> activation strategy with better pro-social equilibriums.
>
> Personally, I think with either plan the ultimate risk of forking is low
> given probability to activate before timeout, so we should just pick
> something and move on, accepting that we aren't setting a precedent by
> which all future forks should abide. Given my understanding of the
> tradeoffs, I believe that the safest choice is LOT=true, but I wouldn't
> move to hold back a plan of LOT=false (but would probably take mitigative
> steps on community advocacy if it looks like there is non majority but non
> negligible LOT=true uptake).
>
> Cheers,
>
> Jeremy
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210223/5d65c6e3/attachment-0001.html>

From ben.woosley at gmail.com  Tue Feb 23 23:14:33 2021
From: ben.woosley at gmail.com (Ben Woosley)
Date: Tue, 23 Feb 2021 15:14:33 -0800
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CALeFGL1UbXx14aX7RK7nh7b4jwvmfF6AXrvqPJpriSB4ZvYT2A@mail.gmail.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
 <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>
 <CABm2gDp5dRTrPEqPfrjOeeYBn6RMS=HFMbtkJ+MM0SMVnSfK5A@mail.gmail.com>
 <CAD5xwhg0pWJykWUusdoNQd60L9_MgCzzky1dvViLERADMcoysQ@mail.gmail.com>
 <CALeFGL1UbXx14aX7RK7nh7b4jwvmfF6AXrvqPJpriSB4ZvYT2A@mail.gmail.com>
Message-ID: <CAC5gnOxeaFZh8gCs0h0f+5P=4FU-4HyfyUAZ0JTYcVc0Yf5G+Q@mail.gmail.com>

Relative to your arguments, Keagan and Jeremy, and speaking in favor of
LOT=false, from my limited perspective:

> As Jeremy points out, the LOT=true possibility always exists here, and we
have multiple high profile people saying they will be running that
regardless of how things turn out. It seems to me that in this scenario,
LOT=false does less to prevent a chain split.
> So if the goal is to prevent a chain split, and the soft fork is benign
and essentially "annexing unoccupied territory" with respect to script
versions, and no one actually has opposed Taproot itself, then I fail to
see how LOT=false is safer in the presence of a grenade defense by the
LOT=true crowd.

I don't believe the goal is to avoid a chain split, nor to activate
Taproot. Over the long term it will not have been important when exactly
Taproot activated, or whether a minority forked off, but what culture and
norms we adopted in putting forward this change. A culture of deference to
the network makes Core worthy of remaining the reference implementation of
Bitcoin.

Given Core's special position in the client ecosystem, I see these outcomes
are asymmetric:
a) If an intolerant minority signals LOT=true in contradiction to core,
they are splitting consensus / forking off consensus, which is their right
to do in our open ecosystem.
b) If Core ships LOT=true, we are in fact imposing a change on the network.
This may be justified in the end, but it should be used with discretion.

If LOT=false fails to activate, then the failure will have revealed
information about sentiments and elements of the network, and we will have
an opportunity then to address that information before proceeding with
LOT=true.

To adopt b) as a pre-emptive defense against a) is to express will without
evidence of necessity or opportunity for justification.

Finally, as others have said, I think this option is likely to be moot -
let's not act defensively out of SEGWIT trauma, but with trust in the
network.

Best,
Ben

On Tue, Feb 23, 2021 at 12:09 PM Keagan McClelland via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I wanted to follow up on what Jeremy and others are saying regards finding
> consensus on LOT. I've seen a few other opinions saying that finding
> consensus on the LOT value is far more important than what the LOT value
> actually is. This makes sense because if 100% of economic activity is
> running the same rule set, there is no divergence, regardless of which
> value is picked.
>
> It is my understanding that those who oppose LOT=true are mostly opposed
> on the grounds of it *appearing* "unnecessarily coercive" and that this
> lack of consensus can precipitate a chain split at the
> "brinksmanship period" as Jeremy refers to it. I don't think that we can
> say that LOT=true is coercive at all unless there is some opposition to
> Taproot itself. Opposition on the grounds that it *may* be opposed by
> others and Core does not want to assert control over the protocol is a
> conservative view but ultimately contingent upon opposition to Taproot for
> more fundamental reasons. If no one opposes it, then by definition you have
> consensus, and in that case I also don't think that the LOT=true (or false)
> in that regard sets meaningful precedent, as I would expect precedents to
> only be meaningful if they were established during a contentious scenario.
> As it stands we have precedents for both MASF's and UASF's to execute soft
> forks in Bitcoin.
>
> Of course it seems intractable to ascertain the views of ~100% of the
> Bitcoin constituency, and therefore it gives credibility to the argument
> that by coming to consensus on LOT=false among those who *are* speaking
> up is safer with the embedded assumptions that modifying consensus beyond
> what core ships is an active choice, presumably by those who know what they
> are doing. However, the simple act of Core choosing to ship an
> unconfigurable LOT=false value does not *prevent* the forking and
> creation of a UASF client. As Jeremy points out, the LOT=true possibility
> always exists here, and we have multiple high profile people saying they
> will be running that regardless of how things turn out. It seems to me that
> in this scenario, LOT=false does less to prevent a chain split.
>
> In regards to precedent, there may be good reasons to force that minority
> to fork themselves off the network, as would be the case if a hypothetical
> soft fork was a consensus action to blacklist some UTXO's or something else
> that weaponizes consensus against some subset of Bitcoin's user base, but I
> haven't heard a single person who advocates for LOT=false on the grounds
> that they *themselves* oppose the consensus change that is being proposed
> here. So if the goal is to prevent a chain split, and the soft fork is
> benign and essentially "annexing unoccupied territory" with respect to
> script versions, and no one actually has opposed Taproot itself, then I
> fail to see how LOT=false is safer in the presence of a grenade defense by
> the LOT=true crowd.
>
> I personally *prefer* LOT=true for these reasons, but I am NOT going to
> be joining the ranks of the intolerant minority if Core ultimately ships
> LOT=false. I think it is more important to stay in consensus, and as a
> result I am able to be convinced that false is the right answer. My
> question to everyone else (true AND false advocates) is this: what would
> you have to observe, in order to change your mind or is it immutably made
> up? If we have a significant portion of the community that is immutably
> made up to go false, and another portion that is going to go true, the
> asymmetry of the fork almost *requires* that those of us whose opinions
> are malleable to break for true.
>
> If social consensus is what drives technical consensus and not the other
> way around it seems as if there cannot exist a valid (rational?) reason to
> oppose Taproot itself, and then by extension with the arguments laid out
> above, LOT=true seems to be the logical conclusion of all of this, even if
> Core ships LOT=false at the outset.
>
> Where am I wrong here?
>
> Keagan
>
> On Mon, Feb 22, 2021 at 7:11 PM Jeremy via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Not responding to anyone in particular, but it strikes me that one can
>> think about the case where a small minority (let's say H = 20%?) of nodes
>> select the opposite of what Core releases (LOT=false, LOT=true). I'm
>> ignoring the case where a critical bug is discovered in Taproot for reasons
>> I could expand on if anyone is interested (I don't think LOT=true/false has
>> much of a diff in that regard).
>>
>> You'll note an asymmetry with LOT=true / false analysis. LOT=true nodes
>> are clearly updated (or lying), LOT=false nodes may be un-upgraded (or
>> however you want to interpret it).
>>
>>
>> *# 80% on LOT=false, 20% LOT=True*
>>
>> - Case 1: Activates ahead of time anyways
>>
>> No issues.
>>
>> - Case 2: Fails to Activate before timeout...
>>
>> 20% *may* fork off with LOT=true. Bitcoin hashrate reduced, chance of
>> multi block reorgs at time of fork relatively high, especially if network
>> does not partition.
>>
>> Implication is that activation % being 90%, then X% fewer than 70% of
>> miners are signaling for Taproot at this time.  If X% is small the
>> increased orphan rate caused by the LOT=true miners will cause it to
>> activate anyways. If X% is larger, then there will be a consensus split.
>>
>>
>>
>> *# 80% on LOT=true, 20% LOT=False*
>> - Case 1: Activates ahead of time Anyways
>>
>> No issues.
>>
>> - Case 2: Fails to Activate before timeout...
>>
>> A% + B% + C% = 20%
>>
>> A% (upgraded, signal activate) remain on majority chain with LOT=false,
>> blocks mined universally valid.
>>
>> B% (upgraded, not signaling) succeeds in activating and maintaining
>> consensus, blocks are temporarily lost during the final period, but
>> consensus re-emerges.
>>
>> C% (not upgraded/not signalling) both fail to activate (not upgraded) and
>> blocks are rejected (not signaling) during mandatory signalling.
>> Essentially becomes an SPV miner, should still not select transactions
>> improperly given mempool policy, but may mine a bad tip.
>>
>> (I argue that group B is irrational entirely, as in this case the
>> majority has upgraded, inevitably winning, and is orphaning their blocks so
>> B should effectively be 0% or can be combined with group C as being somehow
>> not upgraded if they are unable to switch once it becomes clear after say
>> the first 100 blocks in the period that LOT > 50%. The only difference in
>> lumping B with C is that group C SPV mines after the fork and B should, in
>> theory, have full validation.).
>>
>>
>>
>> Apologies if my base analysis is off -- happy to take corrections.
>>
>>
>> My overall summary is thus:
>>
>> 1) People care what Core releases because we assume the majority will
>> likely run it. If core were a minority project, we wouldn't really care
>> what core released.
>> 2) People are upset with LOT=true being suggested as release parameters
>> because of the *narrative* that it puts devs in control.
>> 3) LOT=true having a sizeable minority running it presents major issues
>> to majority LOT=false in terms of lost blocks during the final period and
>> in terms of a longer term fork.
>> 4) Majority LOT=true has no long term instability on consensus (majority
>> LOT=true means the final period always activates, any instability is short
>> lived + irrational).
>> 5) On the balance, the safer parameter to release *seems* to be LOT=true.
>> But because devs are sensitive to control narrative, LOT=false is preferred
>> by devs.
>> 6) Almost paradoxically, choosing a *less safe* option for a narrative
>> reason is more of a show of dev control than choosing a more safe option
>> despite appearances.
>> 7) This all comes down to if we think that a reasonable number of
>> important nodes will run LOT=true.
>> 8) This all doesn't matter *that much* because taproot will have many
>> opportunities to activate before the brinksmanship period.
>>
>> As a plan of action, I think that means that either:
>>
>> A) Core should release LOT=true, as a less disruptive option given stated
>> community intentions to do LOT=true
>> B) Core  community should vehemently anti-advocate running LOT=true to
>> ensure the % is as small as possible
>> C) Do nothing
>> D) Core community should release LOT=false and vehemently advocate
>> manually changing to LOT=true to ensure the % is supermajority, but leaving
>> it as a user choice.
>>
>>
>> Overall, I worry that plan B has a mild Streissand effect and would
>> result in boosting LOT=true (which could be OK, so long as LOT=true +
>> LOT=false+signal yes becomes the large majority, but would be not fun for
>> anyone if LOT=true + LOT=false+signal yes are a small majority). Plan C
>> most likely ends up with some % doing LOT=true anyways. D feels a little
>> silly, but maybe a good tradeoff.
>>
>> If I had to summarize the emotional dynamic among developers around
>> LOT=true, I think devs wish it didn't exist because it is clear LOT=true
>> *creates* the issues here. LOT=false would be fine if the LOT=true strategy
>> didn't exist at all. But unfortunately the cat is out of the bag and cannot
>> be put back in. To validate the emotions, I think it is fine to be angry
>> about LOT=true and not like it, but we should either accept that it is most
>> likely to create consensus OR we should find a new game theoretic
>> activation strategy with better pro-social equilibriums.
>>
>> Personally, I think with either plan the ultimate risk of forking is low
>> given probability to activate before timeout, so we should just pick
>> something and move on, accepting that we aren't setting a precedent by
>> which all future forks should abide. Given my understanding of the
>> tradeoffs, I believe that the safest choice is LOT=true, but I wouldn't
>> move to hold back a plan of LOT=false (but would probably take mitigative
>> steps on community advocacy if it looks like there is non majority but non
>> negligible LOT=true uptake).
>>
>> Cheers,
>>
>> Jeremy
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210223/90c7bfe1/attachment-0001.html>

From aj at erisian.com.au  Wed Feb 24 07:18:32 2021
From: aj at erisian.com.au (Anthony Towns)
Date: Wed, 24 Feb 2021 17:18:32 +1000
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CAD5xwhg0pWJykWUusdoNQd60L9_MgCzzky1dvViLERADMcoysQ@mail.gmail.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
 <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>
 <CABm2gDp5dRTrPEqPfrjOeeYBn6RMS=HFMbtkJ+MM0SMVnSfK5A@mail.gmail.com>
 <CAD5xwhg0pWJykWUusdoNQd60L9_MgCzzky1dvViLERADMcoysQ@mail.gmail.com>
Message-ID: <20210224071832.qhsc2fhw5cf7tybs@erisian.com.au>

On Mon, Feb 22, 2021 at 06:10:34PM -0800, Jeremy via bitcoin-dev wrote:
> Not responding to anyone in particular, but it strikes me that one can think
> about the case where a small minority (let's say H = 20%?) of nodes

I don't think that's a good way to try to look at things -- number of
nodes has some impacts, but they're relatively minor (pun deflected).

I think the things to look at are (from most to least important):

 (1) what the price indicates / what people buying/selling BTC want
 (2) what hashpower does
 (3) what nodes do

Here's a concrete example to help justify that ordering. Suppose
that for whatever reason nobody is particularly interested in running
lockinontimeout=true -- only 0.1% of nodes are doing it and they're not
the "economic majority" in any way. In addition, 15% of hashpower have
spent almost the entire signalling period not bothering to upgrade and
thus haven't been signalling and have been blocking activation.

Suppose further that there are futures/prediction markets setup so that
people can bet on taproot activation (eg the bitfinex chain split tokens,
or some sort of DeFi contracts), and the result is that there's some
decent profits to be made if it does activate, enough to tempt >55%
of hashpower into running with lockinontimeout=true. That way those
miners can be confident it will activate, take up contracts in the
futures/predictions markets, and be confident they'll win and get a
big payday. (Note that this means the people on the other side of those
contracts are betting that taproot *doesn't* activate)

Once a majority of hashpower is running lockinontimeout=true, it then
makes sense for the remaining hashpower to both signal for activation
and also run lockinontimeout=true -- otherwise they risk their blocks
being orphaned if too many blocks don't signal, and they build on top
of one.  Figuring out that a majority of hashpower is/will be running
lockinontimeout=true can be done either by a coinbase message or by
bip91-style signalling.

In that scenario, you end up with >90% of hashpower running with
lockinontimeout=true, even if only a token number of nodes in the wild
are doing the same.



It's possible to do estimates of what happens if a majority of miners
are using lockinontimeout=true, and the numbers end up pretty wild.

With 90% of miners signalling and running lockinontimeout=true, if the
remaining 10% don't signal, they can expect to lose around 3% of revenue
($2M) due to blocks getting orphaned. If the numbers are 85% running
lockinontimeout=true, and 15% not signalling, the non-signallers can
expect to lose about 37% of revenue ($38M) during the retarget period
prior to timeout. If 60% of miners are doing spy-mining for up to 90s,
they would expect to lose 0.9% of their spy-mining revenue ($2.5M). If
60% of hashpower is running lockinontimeout=true, while 40% don't
signal, the non-signallers will forego ~83% of revenue ($320M) due to
their blocks being orphaned, and if 60% of miners spy-mine for 90s, they
should expect to lose 5% of revenue ($10M) over the same period. Dollar
figures based on 6.25BTC/block at $50k per BTC.

https://gist.github.com/ajtowns/fbcf30ed9d0e1708fdc98a876a04ff69#file-forced_signalling_chaos_cost_sim-py

Note that if miners simply accept those losses and don't take any
action to prevent it, very long reorgs are to be expected -- in the 15%
non-signalling scenario, you'd expect to see a 5-block reorg; in the 40%
non-signalling scenario, you'd get reorgs of 60+ blocks. (Only people
not running lockinontimeout=true would see the blocks being reorged out,
of course)


So I think focussing on how many nodes have a particular lockinontimeout
setting can be pretty misleading.

> # 80% on LOT=false, 20% LOT=True
> - Case 1: Activates ahead of time anyways

That's the case where >90% of hashpower is signalling, and everything
works fine.

> - Case 2: Fails to Activate before timeout...
> 20% *may* fork off with LOT=true.

Anyone running with lockinontimeout=true will refuse to follow a chain
where lockin hasn't been reached by the timeout height; so if the most
work chain meets that condition, lockinontimeout=true nodes will refuse
to follow it; either getting stuck with no confirmations at all, or
following a lower work chain that does (or can) reach lockin by timeout
height.

> Bitcoin hashrate reduced, chance of multi
> block reorgs at time of fork relatively high, especially if network does not
> partition.

If the most-work chain fails to activate, and only a minority of
hashrate is running lockinontimeout=true, the chance of multiblock
reorgs is actually pretty low. The way it would play out in detail,
with say 20% of hashpower not signalling and 40% of hashpower running
lockinontimeout=true:

  * the chain reaches the last retarget period; lockinontimeout=false
    nodes stay in STARTED, lockinontimeout=true nodes switch to
    MUST_SIGNAL

  * for the first ~1009 blocks, everyone stays in sync, but block ~1010
    becomes the 202nd non-signalling block, meaning that the 60% of
    hashpower on lockinontimeout=false is now one block ahead of the 40%
    of hashpower on lockinontimeout=true

  * it's possible that the 40% have a lucky run and get ahead of the 60%
    chain causing a reorg. But in that case the within about 5 blocks,
    another non-signalling block will be mined and the 60% will be ahead
    again. So the 40% of lockinontimeout=true hashpower has to keep with
    with miners that have 150% of their hashrate for ~1000 blocks in
    order for everyone to end up on a locked in chain, which is
    vanishingly unlike.

Even if you set the percentage not signalling to 11% and the percent of
hashpower running lockinontimeout=true to 48%, by my count you only get
about a 27% chance of ending up reaching lockin on the most work chain.
With the 40%/20% figures above it's a flat 0.0%.

https://gist.github.com/ajtowns/fbcf30ed9d0e1708fdc98a876a04ff69#file-test_disaster-py

It's possible that the 60% will take some action to prevent their blocks
being reorged out if the 40% do get lucky. One option would be for them
to set lockinontimeout=true -- then we quickly get back to the "almost
all hashpower ends up running lockinontimeout=true" and activation is
certain. But they could just as easily decide that one getblockchaininfo
reports a softfork isn't possible, they won't reorg to a chain where it
is possible unless it's 2 or 4 or 6 or whatever blocks longer.

> # 80% on LOT=true, 20% LOT=False
> - Case 1: Activates ahead of time Anyways
> No issues.

This is same case where there's plenty of signalling and it's irrelevant
what the setting for lockinontimeout is...

> - Case 2: Fails to Activate before timeout...

I'm not sure what you mean by "before timeout" here -- if you mean
it reaches the MUST_SIGNAL phase, with 80% of hashpower running
lockinontimeout=true, then things work out okay: even assuming that all
20% that are not running lockinontimeout=true are also not signalling,
then the miners who don't signal will lose up to 56% of their revenue for
the MUST_SIGNAL period (~$80M) , and if some of the lockinontimeout=true
miners do spy-mining and build on top of non-signalling blocks, they
may lose something like 1.7% of their revenue as well. In addition we
might see reorgs of up to ~10 blocks as this resolves itself. That's a
significant loss for the miners who are out of consensus, and the
liklihood of large reorgs will make doing business with bitcoin harder,
but that at least is all able to be coped with.

But if you mean the most work chain reaches the timeout height without
achieving locked in state, because the majority of miners aren't running
lockinontimeout=true, then the 80% of nodes running lockinontimeout=true
will be stalled, and unable to process transactions, until they downgrade.

If that ever occurred, it would be an astounding disaster, and I hope
the first thing people would do is decide never to run any software by
whoever proposed, ACKed or merged the PR that resulted in 80% of nodes
running with lockinontimeout=true.

*Because* it would be such a disaster to effectively run a
denial-of-service attack on 80% of nodes, it's plausible that price
signals would indicate to miners that it will be much more profitable to
run lockinontimeout=true, preventing that from occuring. But people can
make profits out of disasters too -- it might be that people will figure
"oh, the price will crash if this happens, so it'll be a chance to get
some cheap bitcoins, and maybe put competing miners out of business so
I can buy their ASICs off them for cheap too!"

> My overall summary is thus:
> 1) People care what Core releases because we assume the majority will likely
> run it. If core were a minority project, we wouldn't really care what core
> released.

That seems very backwards to me. I'd put it as: people run core because
it makes good, conservative decisions on what features to add. If
"choose your own consensus rules" were what the market wanted, then
Bitcoin Unlimited or similar would be what everyone was running.

If core were to change that policy and push risky changes, I'd hope
that users would be able to recognise this, and would switch to an
implementation that continues to emphasise safe, conservative policies.

> 2) People are upset with LOT=true being suggested as release parameters because
> of the narrative that it puts devs in control.

If users will just run whatever core devs release, even if it involves
contentious changes to consensus rules, then the core devs are in control.

> 3) LOT=true having a sizeable minority running it presents major issues to
> majority LOT=false in terms of lost blocks during the final period and in terms
> of a longer term fork.

As above, I think this scenario is easy to avoid if it were to
eventuate.

> 4) Majority LOT=true has no long term instability on consensus (majority LOT=
> true means the final period always activates, any instability is short lived +
> irrational).

The instability occurs if the lockinontimeout=true chain stalls or is
overtaken by a more-work non-activating chain, then users running nodes
with that parameter set will stop their nodes, and reinstall/reconfigure
it to set lockinontimeout=false.

> 5) On the balance, the safer parameter to release *seems* to be LOT=true. But
> because devs are sensitive to control narrative, LOT=false is preferred by
> devs.

I think that conclusion is based on a few shakey assumptions; particularly
that people won't downgrade/reinstall back to lockinontimeout=false
and that miners will be be pretty naive about allowing their blocks to
be orphaned.

> 6) Almost paradoxically, choosing a less safe option for a narrative reason is
> more of a show of dev control than choosing a more safe option despite
> appearances.

Going all-in on a bluff can be a good bet 9 times out of 10, while still
being a net negative because of the 1 time out of 10 when you lose. In
the examples above, the "80% of nodes running the default client can no
longer follow the blockchain without manual intervention" is the "lose
it all scenario", even if "taproot" is probably one of the 9/10 cases,
not the 1/10 case.

> 7) This all comes down to if we think that a reasonable number of important
> nodes will run LOT=true.

What nodes run (as compared to hashpower, or as compared to what people
want to buy/sell) is the least important factor in working out what's
going to happen.

> As a plan of action, I think that means that either:
> A) Core should release LOT=true, as a less disruptive option given stated
> community intentions to do LOT=true
> B) Core? community should vehemently anti-advocate running LOT=true to ensure
> the % is as small as possible
> C) Do nothing
> D) Core community should release LOT=false and vehemently advocate manually
> changing to LOT=true to ensure the % is supermajority, but leaving it as a user
> choice.

I think these are all a bit terrible as plans of action -- "core should
release X, then advocate Y" is really not playing to core's strengths.
Far better for devs to focus on writing/debugging code, analysing the
way things work, making tests, and adding mitigations for risks.

Better for bloggers and podcasters and the twitterati to do the advocacy,
and core to stick to working on code and saying "no, there are significant
technical risks to doing that that we don't yet have mitigations for"
when people advocate for risky things.

My view is more along the lines of:

 - the setting for lockinontimeout will not matter until around July 2022,
   (though maybe as early as May 2022 if blocks come really fast) either
   technically or even as a game theory incentive

 - lockinontimeout=true has consensus implications, and depending on
   the response by miners can cause network interruptions like long
   chains of reorgs. At best, it hasn't had the same level of review as
   taproot, and some experienced developers aren't comfortable with it
   as it stands. Those seem like pretty good reasons not to deploy it
   immediately, IMO.

 - the lockinontimeout=true code we've got doesn't do (at least) two
   things that the bip148 client did that help avoid bad cases:
     - ensure preferential connections to other nodes setting
       lockinontimeout=true to prevent network splits if the
       non-activating chain is longer during/after the MUST_SIGNAL phase
     - cope with rewinding the chain to the best lockinontimeout=true valid
       block, in the event a node is upgraded to lockinontimeout=true
       from either lockinontimeout=false or a version of bitcoind that
       doesn't have activation parameters set at all

I think it makes more sense to:

 1) release lockinontimeout=false code with a view to reconsidering it
    at about ~6 months (so prior to the 23.0 release)

 2) do more review of lockinontimeout=true code to ensure everyone
    understands what behaviours are likely

 3) add support for the features from the bip148 client, along with
    any other mitigations we think of, assuming we can do so in a way
    that's safe and sane

 4) work with miners and mining pools to ensure that if
    lockinontimeout=true does get used they know how to minimise
    disruption and losses due to orphaning, etc.

That gives us about 6 months work on (2) and (3), and probably 9-12
months to work on (4), and it's all technical rather than advocacy and
popularity contests. Six, nine or twelve months should be plenty of time
to get pretty clear indications of what both the market in general
thinks about things, and what miners are thinking.

I think if lockinontimeout=true weren't new code, and devs, miners and
users widely understood its potential behaviours and risks, and we didn't
have safety features that were still on the todo list, then there'd be
a good argument for doing lockinontimeout=true from day 1. I could see
that being the case for the next soft-fork, assuming it gets a similar
amount of review prior to deployment as taproot has had, eg. But, to me,
taking a more cautious approach seems more sensible today.

> If I had to summarize the emotional dynamic among developers [...]

(Fortunately, you don't have to do that...)

Cheers,
aj


From dentondevelopment at protonmail.com  Wed Feb 24 14:02:00 2021
From: dentondevelopment at protonmail.com (dentondevelopment)
Date: Wed, 24 Feb 2021 14:02:00 +0000
Subject: [bitcoin-dev] bip48 proposal
In-Reply-To: <202012180408.31441.luke@dashjr.org>
References: <cLqW9ZphcaV5hoVNYHjHk_DsdVw_0_hdFxOFwtFkVT9_N_E1IF7ZvtQq745wbqMnny4xzHe8Xdd9TTi2MLyLhB51cI_PJc4fIjLRSpZpGwk=@protonmail.com>
 <202012161716.54878.luke@dashjr.org>
 <MMFMtQ1lNQcLBIv8haKSpykMjFISWeyYWbFZC7dkzliEZrf2vZYw6ThqFWSYzIntVT3bXvTUol_l-P9wxUIFhwL38lKSGHBFsRG-ukRirP4=@protonmail.com>
 <202012180408.31441.luke@dashjr.org>
Message-ID: <oHur4CJz2hnPzG4fvsCUZxs33SJgDTF4VeKI9SaK7Og7aYS-xJNWlAjIxGnIgEQ665pr35lZb-_MwVa47BlaOUTVqsM31M2LSlQhKm1_FEc=@protonmail.com>

Hello all,

Just wanted to give an update on progress for the "bip48" proposal.

There was some discussion on Twitter between a few multi-sig wallet devs: https://twitter.com/fullynoded/status/1339374947228008448?s=21

A few key points were brought up:

1. We should not define a `script_type` as a path level

The explicit purpose of this BIP is to define an already existing standard that is used in practice across multi-sig wallets. In order to do that we must define a script_type in the path otherwise "loss of funds" could occur and backwards compatibility broken.

2. Another point brought up was that no-one uses the legacy derivation path m/48'/0'/0'/1', in practice all "legacy" p2sh multi-sig wallets use bip45.

I agree and have removed all references to legacy p2sh derivations in the proposed bip.

3. We could possibly include a defined "wild card" in the script_type level to define any future address types (e.g. taproot)

I agree this could be useful and think Ben Kaufman's suggestion of using m/48'/0'/0'/1' for this purpose makes sense, however I also think a future multi-sig standard for new address types may well be suited for a different BIP which could also address concern #1 around including `script_type` at all.

Therefore I have not yet added any mention of "wild card" in the proposed bip but kept strictly to p2sh-p2wsh and p2wsh derivations as used in modern day wallets.

I have create a PR https://github.com/bitcoin/bips/pull/1072 so that anyone may easily comment on it and any concerns can be raised.

I think the community needs this and it is well over due.  I have gotten positive feedback and support from other devs.

Feedback welcome.

Cheers,
Fontaine


Sent with ProtonMail Secure Email.

??????? Original Message ???????
On Friday, December 18, 2020 12:08 PM, Luke Dashjr <luke at dashjr.org> wrote:

> Thanks for explaining where instructions are lacking.
>
> How does this look?
> https://github.com/bitcoin/bips/pull/1046/files
>
> On Friday 18 December 2020 01:44:27 dentondevelopment wrote:
>
> > Hi Luke,
> > It looks to have the same motivations and be compatible with
> > https://github.com/bitcoin/bips/pull/253 (if I am reading it correctly).
> > The only guidance I have on proposing a bip is what is on the readme
> > https://github.com/bitcoin/bips/blob/master/README.mediawiki
> > 48 would be fitting if it is unused.
> > This is still very much a work in progress and there does seem to be
> > community support.
> > Pavol and others have shared relevant info/suggestions which I will be
> > using to update the proposal.
> > Will share again here when the next draft is ready.
> > Many thanks,
> > Fontaine
> > Sent with ProtonMail Secure Email.
> > ??????? Original Message ???????
> > On Thursday, December 17, 2020 1:16 AM, Luke Dashjr luke at dashjr.org wrote:
> >
> > > BIP number 48 has not been assigned. Do not self-assign BIP numbers.
> > > Is this intended to be compatible with
> > > https://github.com/bitcoin/bips/pull/253 ?
> > > Luke
> > > On Wednesday 16 December 2020 14:10:28 dentondevelopment via bitcoin-dev
> > > wrote:
> > >
> > > > Here is the repo instead of a static link:
> > > > https://github.com/Fonta1n3/bips/blob/master/bip-0048.mediawiki
> > > > Fontaine
> > > > Sent with ProtonMail Secure Email.
> > > > ??????? Original Message ???????
> > > > On Wednesday, December 16, 2020 8:43 PM, dentondevelopment via
> > > > bitcoin-dev
> > >
> > > bitcoin-dev at lists.linuxfoundation.org wrote:
> > >
> > > > > Hello,
> > > > > I would like to propose bip48 (taking bip44 as inspiration), with the
> > > > > purpose of documenting modern multi-sig derivations.
> > > > > Please see a rough draft of the proposed bip attached, comments/input
> > > > > welcome.
> > > > > Regards,
> > > > > Fontaine



From arielluaces at gmail.com  Wed Feb 24 22:37:09 2021
From: arielluaces at gmail.com (Ariel Luaces)
Date: Wed, 24 Feb 2021 14:37:09 -0800
Subject: [bitcoin-dev] Yesterday's Taproot activation meeting on
 lockinontimeout (LOT)
In-Reply-To: <CALeFGL1UbXx14aX7RK7nh7b4jwvmfF6AXrvqPJpriSB4ZvYT2A@mail.gmail.com>
References: <20210222101632.j5udrgtj2aj5bw6q@erisian.com.au>
 <7B0D8EE4-19D9-4686-906C-F762F29E74D4@mattcorallo.com>
 <CABm2gDrbKdxMuKdwYh0HBXNUxhqWtq1x2oLC0Ni=dbfP8b_a7Q@mail.gmail.com>
 <CABm2gDp5dRTrPEqPfrjOeeYBn6RMS=HFMbtkJ+MM0SMVnSfK5A@mail.gmail.com>
 <CAD5xwhg0pWJykWUusdoNQd60L9_MgCzzky1dvViLERADMcoysQ@mail.gmail.com>
 <CALeFGL1UbXx14aX7RK7nh7b4jwvmfF6AXrvqPJpriSB4ZvYT2A@mail.gmail.com>
Message-ID: <CAOv1TnhQcYrc5q6GTUTuQMEi9RAV4dy5mmyNp--HuYTPzEUfJQ@mail.gmail.com>

On Tue, Feb 23, 2021 at 12:09 PM Keagan McClelland via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> If social consensus is what drives technical consensus and not the other way around it seems as if there cannot exist a valid (rational?) reason to oppose Taproot itself, and then by extension with the arguments laid out above, LOT=true seems to be the logical conclusion of all of this, even if Core ships LOT=false at the outset.
>
> Where am I wrong here?
>
> Keagan
>
> On Mon, Feb 22, 2021 at 7:11 PM Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Personally, I think with either plan the ultimate risk of forking is low given probability to activate before timeout, so we should just pick something and move on, accepting that we aren't setting a precedent by which all future forks should abide. Given my understanding of the tradeoffs, I believe that the safest choice is LOT=true, but I wouldn't move to hold back a plan of LOT=false (but would probably take mitigative steps on community advocacy if it looks like there is non majority but non negligible LOT=true uptake).
>>
>> Cheers,
>>
>> Jeremy
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

To favor LOT=true because it seems like the inevitable result is like
playing the prisoner's dilemma and never cooperating instead of using
the most optimal strategy which is tit-for-tat (cooperating at first
and then cheating once for every time your counterparty cheats).

During segwit users started by cooperating (BIP9, or "LOT=false"),
then a minority of
miners didn't cooperate (small veto but remember the majority of
miners cooperated), then users stopped cooperating in response (UASF),
then miners
reverted to cooperating (MASF while intolerant miners forked off).
Today users should start cooperating again to continue using the
optimal strategy.

Cheers
Ariel Lorenzo-Luaces

From craigraw at gmail.com  Thu Feb 25 10:23:59 2021
From: craigraw at gmail.com (Craig Raw)
Date: Thu, 25 Feb 2021 12:23:59 +0200
Subject: [bitcoin-dev] bip48 proposal
In-Reply-To: <oHur4CJz2hnPzG4fvsCUZxs33SJgDTF4VeKI9SaK7Og7aYS-xJNWlAjIxGnIgEQ665pr35lZb-_MwVa47BlaOUTVqsM31M2LSlQhKm1_FEc=@protonmail.com>
References: <cLqW9ZphcaV5hoVNYHjHk_DsdVw_0_hdFxOFwtFkVT9_N_E1IF7ZvtQq745wbqMnny4xzHe8Xdd9TTi2MLyLhB51cI_PJc4fIjLRSpZpGwk=@protonmail.com>
 <202012161716.54878.luke@dashjr.org>
 <MMFMtQ1lNQcLBIv8haKSpykMjFISWeyYWbFZC7dkzliEZrf2vZYw6ThqFWSYzIntVT3bXvTUol_l-P9wxUIFhwL38lKSGHBFsRG-ukRirP4=@protonmail.com>
 <202012180408.31441.luke@dashjr.org>
 <oHur4CJz2hnPzG4fvsCUZxs33SJgDTF4VeKI9SaK7Og7aYS-xJNWlAjIxGnIgEQ665pr35lZb-_MwVa47BlaOUTVqsM31M2LSlQhKm1_FEc=@protonmail.com>
Message-ID: <CAPR5oBNbYHwpUPrG6Qp0N-7-+LfVH8U55DZzOXHsPMJtp6+YYQ@mail.gmail.com>

+1

It would be greatly beneficial to have a referenceable standard for the
convention that everyone (afaik) is following anyway. I think the current
scope is now correct and agree with Fontaine's comments on the feedback.

Craig

On Wed, Feb 24, 2021 at 10:17 PM dentondevelopment via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello all,
>
> Just wanted to give an update on progress for the "bip48" proposal.
>
> There was some discussion on Twitter between a few multi-sig wallet devs:
> https://twitter.com/fullynoded/status/1339374947228008448?s=21
>
> A few key points were brought up:
>
> 1. We should not define a `script_type` as a path level
>
> The explicit purpose of this BIP is to define an already existing standard
> that is used in practice across multi-sig wallets. In order to do that we
> must define a script_type in the path otherwise "loss of funds" could occur
> and backwards compatibility broken.
>
> 2. Another point brought up was that no-one uses the legacy derivation
> path m/48'/0'/0'/1', in practice all "legacy" p2sh multi-sig wallets use
> bip45.
>
> I agree and have removed all references to legacy p2sh derivations in the
> proposed bip.
>
> 3. We could possibly include a defined "wild card" in the script_type
> level to define any future address types (e.g. taproot)
>
> I agree this could be useful and think Ben Kaufman's suggestion of using
> m/48'/0'/0'/1' for this purpose makes sense, however I also think a future
> multi-sig standard for new address types may well be suited for a different
> BIP which could also address concern #1 around including `script_type` at
> all.
>
> Therefore I have not yet added any mention of "wild card" in the proposed
> bip but kept strictly to p2sh-p2wsh and p2wsh derivations as used in modern
> day wallets.
>
> I have create a PR https://github.com/bitcoin/bips/pull/1072 so that
> anyone may easily comment on it and any concerns can be raised.
>
> I think the community needs this and it is well over due.  I have gotten
> positive feedback and support from other devs.
>
> Feedback welcome.
>
> Cheers,
> Fontaine
>
>
> Sent with ProtonMail Secure Email.
>
> ??????? Original Message ???????
> On Friday, December 18, 2020 12:08 PM, Luke Dashjr <luke at dashjr.org>
> wrote:
>
> > Thanks for explaining where instructions are lacking.
> >
> > How does this look?
> > https://github.com/bitcoin/bips/pull/1046/files
> >
> > On Friday 18 December 2020 01:44:27 dentondevelopment wrote:
> >
> > > Hi Luke,
> > > It looks to have the same motivations and be compatible with
> > > https://github.com/bitcoin/bips/pull/253 (if I am reading it
> correctly).
> > > The only guidance I have on proposing a bip is what is on the readme
> > > https://github.com/bitcoin/bips/blob/master/README.mediawiki
> > > 48 would be fitting if it is unused.
> > > This is still very much a work in progress and there does seem to be
> > > community support.
> > > Pavol and others have shared relevant info/suggestions which I will be
> > > using to update the proposal.
> > > Will share again here when the next draft is ready.
> > > Many thanks,
> > > Fontaine
> > > Sent with ProtonMail Secure Email.
> > > ??????? Original Message ???????
> > > On Thursday, December 17, 2020 1:16 AM, Luke Dashjr luke at dashjr.org
> wrote:
> > >
> > > > BIP number 48 has not been assigned. Do not self-assign BIP numbers.
> > > > Is this intended to be compatible with
> > > > https://github.com/bitcoin/bips/pull/253 ?
> > > > Luke
> > > > On Wednesday 16 December 2020 14:10:28 dentondevelopment via
> bitcoin-dev
> > > > wrote:
> > > >
> > > > > Here is the repo instead of a static link:
> > > > > https://github.com/Fonta1n3/bips/blob/master/bip-0048.mediawiki
> > > > > Fontaine
> > > > > Sent with ProtonMail Secure Email.
> > > > > ??????? Original Message ???????
> > > > > On Wednesday, December 16, 2020 8:43 PM, dentondevelopment via
> > > > > bitcoin-dev
> > > >
> > > > bitcoin-dev at lists.linuxfoundation.org wrote:
> > > >
> > > > > > Hello,
> > > > > > I would like to propose bip48 (taking bip44 as inspiration),
> with the
> > > > > > purpose of documenting modern multi-sig derivations.
> > > > > > Please see a rough draft of the proposed bip attached,
> comments/input
> > > > > > welcome.
> > > > > > Regards,
> > > > > > Fontaine
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210225/fb6326b2/attachment-0001.html>

From greg_g at posteo.net  Thu Feb 25 22:33:25 2021
From: greg_g at posteo.net (Gregorio Guidi)
Date: Thu, 25 Feb 2021 23:33:25 +0100
Subject: [bitcoin-dev] Exploring alternative activation mechanisms:
	decreasing threshold
Message-ID: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>

Hello,

I followed the debate on LOT=false / LOT=true trying to get a grasp of 
the balance of risks and advantages. The summary by Aaron van Wirdum [1] 
explains well the difficulties to find a good equilibrium... it 
concludes that "perhaps, a new possibility will present itself".

Thinking about such a "new possibility" that overcomes the 
LOT=true/false dichotomy, I would like to offer the following proposal. 
It could be called "decreasing threshold activation".

Decreasing threshold activation works similarly to BIP8, with the 
difference that the threshold that triggers the STARTED -> LOCKED_IN 
transition starts at 100% for the first retargeting period, and then is 
gradually reduced on each period in steps of 24 blocks (~1,2%). More 
precisely:

On the 1st period (starting on start_height): if 2016 out of 2016 blocks 
signal, the state is changed to LOCKED_IN on the next period (otherwise 
stays STARTED)
On the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state 
transitions to LOCKED_IN on the next period
On the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state 
transitions to LOCKED_IN on the next period
...
On the 14th period (~6 months): if 1704 out of 2016 blocks signal 
(~84.5%), the state transitions to LOCKED_IN on the next period
...
On the 27th period (~12 months): if 1392 out of 2016 blocks signal 
(~69.0%), the state transitions to LOCKED_IN on the next period
...
On the 40th period (~18 months): if 1080 out of 2016 blocks signal 
(~53.6%), the state transitions to LOCKED_IN on the next period
...
On the 53th period (~24 months): if 768 out of 2016 blocks signal 
(~38.1%), the state transitions to LOCKED_IN on the next period
...
On the 66th period (~30 months): if 456 out of 2016 blocks signal 
(~22.6%), the state transitions to LOCKED_IN on the next period
...
On the 79th period (~36 months): if 144 out of 2016 blocks signal 
(~7.1%), the state transitions to LOCKED_IN on the next period
...
On the 84th and final period (~39 months): if 24 out of 2016 blocks 
signal (~1.2%), the state transitions to LOCKED_IN on the next period, 
otherwise goes to FAILED

(For reference, I include below a snippet of pseudocode for the 
decreasing thresholds in the style of BIP8 and BIP9.)

Here are the main features and advantages of this approach:

1. It is relatively conservative at the beginning: for activation to 
happen in the first year, it requires a clear majority of signaling 
hashrate, indicating that the activation is relatively safe. Only later 
the threshold starts to move towards "unsafe" territory, accepting the 
tradeoff of less support from existing hashrate in exchange for ensuring 
that the activation eventually happens.

2. Like LOT=true, the activation will always occur in the end (except in 
the negligible case where less than 1.2% of hashrate supports it).

3. This approach is quite easy to implement, in particular it avoids the 
extra code to deal with the MUST_SIGNAL period.

4. There are no parameters to set (except startheight). I am a KISS fan, 
so this is a plus for me, making the activation mechanism robust and 
predictable with less chance for users to shoot themselves in the foot. 
It is also a plus for me that - if adopted as the default mechanism - it 
would require very little discussion on how to activate future 
soft-forks. In fact I think it would be a winning move for Core to 
commit to such a scheme, to avoid getting lost in game-theoretic rabbit 
holes.

5. Since there is no MUST_SIGNAL period, no automatic chain split occurs 
around activation when not all miners have upgraded (so activation is 
generally as benign as a MASF). A chain split will occur only when/if an 
invalid block is created (and this requires dedicated effort! it can 
only happen by circumventing the normal policy rules [2]). This 
mitigates the risk of reorgs and involuntary forks around activation, 
even with low miner signaling.

6. It removes motivation to create UASF clients that force activation. 
While individual nodes could still try to force a quicker activation, 
the motivation to do so is reduced since the same result is obtained 
just by waiting a little more.

7. Compared to LOT=true, activation is cleaner and quicker when it is 
relatively safe to do so (when the signaling hashrate is - let's say - 
in the 70%-80% range). On the other hand, activation is pushed further 
and further in time when it is less safe (when signaling hashrate is 
<50%, meaning that there is a serious risk that users/miners that did 
not upgrade start following an alternative chain). This gives everyone 
time to prepare properly for such a potentially disruptive event.

8. If a significant number of users and miners consciously decide (for 
whatever reasons) that they don't want to upgrade and want to fork 
themselves off from the chain followed by Core (as is their 
prerogative), they will have time to do so safely.

9. Compared to the strategy of doing LOT=false and then LOT=true if it 
fails, using the decreasing threshold approach may not seem very 
different. But it completely removes the need to fiddle with different 
client releases and with the issues associated with deployed nodes with 
different consensus parameters.

All in all, reading the various perspectives on this mailing list and 
outside I have the feeling that the strongest arguments against LOT=true 
have at their core a certain uneasiness with the MUST_SIGNAL mechanism 
and the related automatic chain split on activation, which is something 
that greatly complicates the analysis (but please tell me if I am 
wrong...). In this sense, this proposal achieves the big objective of 
always ending in activation (like LOT=true) without resorting to 
MUST_SIGNAL and chain splits.

A final note: this proposal should be seen as somewhat independent from 
the discussion on taproot activation. Personally I would be happy with a 
LOT=false activation for taproot that succeeds quickly, while the 
decreasing threshold approach could be evaluated as potential default 
activation mechanism for the future.

I would be happy to hear what you think about this. What are the 
possible issues/drawbacks of using this mechanism?

Thanks,

Gregorio

[1] 
https://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-hurdle-before-taproot-activation

[2] This was not the case in the past for upgrades such as BIP16 (P2SH), 
which generated frequent reorgs due to a combination of low activation 
threshold (55%) and no policy protection. But for upgrades such as 
taproot the normal policy rules prevent the creation of invalid blocks 
by non-upgraded miners. See 
https://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-rule/

Pseudocode:

         case STARTED:
             int elapsed_periods = (block.height - startheight) / 2016;
             if (elapsed_periods > 2016 / 24) {
                 return FAILED;
             }
             int threshold = 2016 - 24 * (elapsed_periods - 1);
             int count = 0;
             walk = block;
             for (i = 0; i < 2016; i++) {
                 walk = walk.parent;
                 if (walk.nVersion & 0xE0000000 == 0x20000000 && (walk.nVersion >> bit) & 1 == 1) {
                     ++count;
                 }
             }
             if (count >= threshold) {
                 return LOCKED_IN;
             }
             return STARTED;


From bitcoin-dev at rgrant.org  Fri Feb 26 17:48:33 2021
From: bitcoin-dev at rgrant.org (Ryan Grant)
Date: Fri, 26 Feb 2021 17:48:33 +0000
Subject: [bitcoin-dev] Exploring alternative activation mechanisms:
 decreasing threshold
In-Reply-To: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>
References: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>
Message-ID: <CAMnpzfo0X4d9vuVJGxMf9f=yxr8gT_zUZ+d+_X0Dtv7ADTwCnQ@mail.gmail.com>

Huh.
I like the mechanism.

I like the honesty that once a feature with high demand and safety is
ready, activation pressure will keep increasing.

The gradual march of time in this Decreasing Threshold proposal is
predictable and incremental in ways that help avoid brinkmanship.

Avoiding the hard fork dynamic (that LOT=true requires) prevents some
chain splits, but activation under political opposition may then still
depend on a UASF.  If I thought the time had come to line up a UASF
for a feature, I'd first want to have nodes out there running this
softer Decreasing Threshold activation (maybe before it fails).

It's also not as unresponsive to miner wisdom as LOT=true.
Conceptually, it asks miners to arbitrate both version adoption as
well as whether nodes which haven't upgraded face risks in an early
activation.  Should miners find themselves in dramatic unanimity, they
even have enough influence to technically fail any activation.

From keagan.mcclelland at gmail.com  Fri Feb 26 18:40:35 2021
From: keagan.mcclelland at gmail.com (Keagan McClelland)
Date: Fri, 26 Feb 2021 11:40:35 -0700
Subject: [bitcoin-dev] A design for Probabilistic Partial Pruning
Message-ID: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>

Hi all,

I've been thinking for quite some time about the problem of pruned nodes
and ongoing storage costs for full nodes. One of the things that strikes me
as odd is that we only really have two settings.

A. Prune everything except the most recent blocks, down to the cache size
B. Keep everything since genesis

>From my observations and conversations with various folks in the community,
they would like to be able to run a "partially" pruned node to help bear
the load of bootstrapping other nodes and helping with data redundancy in
the network, but would prefer to not dedicate hundreds of Gigabytes of
storage space to the cause.

This led me to the idea that a node could randomly prune some of the blocks
from history if it passed some predicate. A rough sketch of this would look
as follows.

1. At node startup, it would generate a random seed, this would be unique
to the node but not necessary that it be cryptographically secure.
2. In the node configuration it would also carry a "threshold" expressed as
some percentage of blocks it wanted to keep.
3. As IBD occurs, based off of the threshold, the block hash, and the
node's unique seed, the node would either decide to prune the data or keep
it. The uniqueness of the node's hash should ensure that no block is
systematically overrepresented in the set of nodes choosing this storage
scheme.
4. Once the node's IBD is complete it would advertise this as a peer
service, advertising its seed and threshold, so that nodes could
deterministically deduce which of its peers had which blocks.

The goals are to increase data redundancy in a way that more uniformly
shares the load across nodes, alleviating some of the pressure of full
archive nodes on the IBD problem. I am working on a draft BIP for this
proposal but figured I would submit it as a high level idea in case anyone
had any feedback on the initial design before I go into specification
levels of detail.

If you have thoughts on

A. The protocol design itself
B. The barriers to put this kind of functionality into Core

I would love to hear from you,

Cheers,
Keagan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210226/b25852a4/attachment.html>

From igor at codexapertus.com  Sat Feb 27 07:10:39 2021
From: igor at codexapertus.com (Igor Cota)
Date: Sat, 27 Feb 2021 08:10:39 +0100
Subject: [bitcoin-dev] A design for Probabilistic Partial Pruning
In-Reply-To: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
References: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
Message-ID: <CAJx8jdz3uOCpwed3MZkf1ghkvaZMfy-+vvOCVZdvhz2KAn38DQ@mail.gmail.com>

Hi Keagan,

I had a very similar idea. The only difference being for the node to decide
on a range of blocks to keep beforehand, rather than making the decision
block-by-block like you suggest.

I felt the other nodes would be better served by ranges due to the
sequential nature of IBD. Perhaps this would be computationally lighter as
well.

I also encourage you to read Ryosuke Abe's paper [1] that proposes a DHT
scheme to solve this same problem.

Cheers,
Igor

[1] https://arxiv.org/abs/1902.02174

On Fri, 26 Feb 2021 at 21:57, Keagan McClelland via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi all,
>
> I've been thinking for quite some time about the problem of pruned nodes
> and ongoing storage costs for full nodes. One of the things that strikes me
> as odd is that we only really have two settings.
>
> A. Prune everything except the most recent blocks, down to the cache size
> B. Keep everything since genesis
>
> From my observations and conversations with various folks in the
> community, they would like to be able to run a "partially" pruned node to
> help bear the load of bootstrapping other nodes and helping with data
> redundancy in the network, but would prefer to not dedicate hundreds of
> Gigabytes of storage space to the cause.
>
> This led me to the idea that a node could randomly prune some of the
> blocks from history if it passed some predicate. A rough sketch of this
> would look as follows.
>
> 1. At node startup, it would generate a random seed, this would be unique
> to the node but not necessary that it be cryptographically secure.
> 2. In the node configuration it would also carry a "threshold" expressed
> as some percentage of blocks it wanted to keep.
> 3. As IBD occurs, based off of the threshold, the block hash, and the
> node's unique seed, the node would either decide to prune the data or keep
> it. The uniqueness of the node's hash should ensure that no block is
> systematically overrepresented in the set of nodes choosing this storage
> scheme.
> 4. Once the node's IBD is complete it would advertise this as a peer
> service, advertising its seed and threshold, so that nodes could
> deterministically deduce which of its peers had which blocks.
>
> The goals are to increase data redundancy in a way that more uniformly
> shares the load across nodes, alleviating some of the pressure of full
> archive nodes on the IBD problem. I am working on a draft BIP for this
> proposal but figured I would submit it as a high level idea in case anyone
> had any feedback on the initial design before I go into specification
> levels of detail.
>
> If you have thoughts on
>
> A. The protocol design itself
> B. The barriers to put this kind of functionality into Core
>
> I would love to hear from you,
>
> Cheers,
> Keagan
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>


-- 
*Igor Cota*
Codex Apertus d.o.o.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/c79266b3/attachment.html>

From willtech at live.com.au  Wed Feb 24 03:54:45 2021
From: willtech at live.com.au (LORD HIS EXCELLENCY JAMES HRMH)
Date: Wed, 24 Feb 2021 03:54:45 +0000
Subject: [bitcoin-dev]  Consensus Items
Message-ID: <SL2P216MB00899C3FBFB0A38D78CABD059D9F9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>

Good Afternoon,

Does anybody have a consensus list of the existing consensus items? i.e. to itemise the operation of consensus into a list.

KING JAMES HRMH
Great British Empire

Regards,
The Australian
LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
of Hougun Manor & Glencoe & British Empire
MR. Damian A. James Williamson
Wills

et al.


Willtech
www.willtech.com.au
www.go-overt.com
and other projects

earn.com/willtech
linkedin.com/in/damianwilliamson


m. 0487135719
f. +61261470192


This email does not constitute a general advice. Please disregard this email if misdelivered.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210224/af12a470/attachment.html>

From willtech at live.com.au  Wed Feb 24 03:23:35 2021
From: willtech at live.com.au (LORD HIS EXCELLENCY JAMES HRMH)
Date: Wed, 24 Feb 2021 03:23:35 +0000
Subject: [bitcoin-dev]  Taproot NACK
Message-ID: <SL2P216MB00896C65DECD973205D17ABE9D9F9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>

Good Afternoon,

It has been reported that Taproot will enable some Monero like features including the ability to hide transactions.

If that is the case I offer a full NACK and let me explain.

A part of the benefit of using Bitcoin is its honesty. The full transaction is published on the blockchain. If that were to change so that transactions may be obfuscated from scrutiny then any government would have unlimited impetus to ban Bitcoin, and speculation has that is the reason India has been reported to have banned cryptocurrencies already.

I am in support of the expanded use case of Bitcoin without harming the established robust fairness and equal equity offered. The core functionality of Bitcoin, its values, must remain unaltered.

KING JAMES HRMH
Great British Empire

Regards,
The Australian
LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
of Hougun Manor & Glencoe & British Empire
MR. Damian A. James Williamson
Wills

et al.


Willtech
www.willtech.com.au
www.go-overt.com
and other projects

earn.com/willtech
linkedin.com/in/damianwilliamson


m. 0487135719
f. +61261470192


This email does not constitute a general advice. Please disregard this email if misdelivered.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210224/9bf0dd19/attachment.html>

From jlrubin at mit.edu  Sat Feb 27 16:14:27 2021
From: jlrubin at mit.edu (Jeremy)
Date: Sat, 27 Feb 2021 08:14:27 -0800
Subject: [bitcoin-dev] Taproot NACK
In-Reply-To: <SL2P216MB00896C65DECD973205D17ABE9D9F9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>
References: <SL2P216MB00896C65DECD973205D17ABE9D9F9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>
Message-ID: <CAD5xwhhxw7RhwMWSxa76HZqefpVcJidVpzE7Vbzk+hsD6zfUHQ@mail.gmail.com>

I have good news for you: Taproot does not enable monero-like privacy
features any moreso than already exist in Bitcoin today. At its core,
taproot is a way to make transactions with embedded smart contracts less
expensive, done so in a manner that may marginally improve privacy
dependent on user behavior (but not in the monero-like way you mention).
For example, it makes it possible for lightning channels to look
structurally similar to single key wallets, but it does nothing inherently
to obfuscate the transaction graph as in monero.

Such "monero-like" transaction graph obfuscation may already exist in
Bitcoin via other techniques (coinjoin, payjoin, coinswap, lightning, etc)
with or without Taproot, so the point is further moot.

Do you have a source on your reporting?

You may wish to rescind your nack.


--
@JeremyRubin <https://twitter.com/JeremyRubin>
<https://twitter.com/JeremyRubin>


On Sat, Feb 27, 2021 at 5:46 AM LORD HIS EXCELLENCY JAMES HRMH via
bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Good Afternoon,
>
> It has been reported that Taproot will enable some Monero like features
> including the ability to hide transactions.
>
> If that is the case I offer a full NACK and let me explain.
>
> A part of the benefit of using Bitcoin is its honesty. The full
> transaction is published on the blockchain. If that were to change so that
> transactions may be obfuscated from scrutiny then any government would have
> unlimited impetus to ban Bitcoin, and speculation has that is the reason
> India has been reported to have banned cryptocurrencies already.
>
> I am in support of the expanded use case of Bitcoin without harming the
> established robust fairness and equal equity offered. The core
> functionality of Bitcoin, its values, must remain unaltered.
>
> KING JAMES HRMH
> Great British Empire
>
> Regards,
> The Australian
> LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
> of Hougun Manor & Glencoe & British Empire
> MR. Damian A. James Williamson
> Wills
>
> et al.
>
>
> Willtech
> www.willtech.com.au
> www.go-overt.com
> and other projects
>
> earn.com/willtech
> linkedin.com/in/damianwilliamson
>
>
> m. 0487135719
> f. +61261470192
>
>
> This email does not constitute a general advice. Please disregard this
> email if misdelivered.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/f29d0372/attachment-0001.html>

From luke at dashjr.org  Sat Feb 27 17:55:00 2021
From: luke at dashjr.org (Luke Dashjr)
Date: Sat, 27 Feb 2021 17:55:00 +0000
Subject: [bitcoin-dev] Exploring alternative activation mechanisms:
	decreasing threshold
In-Reply-To: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>
References: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>
Message-ID: <202102271755.02271.luke@dashjr.org>

This has the same problems BIP149 did: since there is no signalling, it is 
ambiguous whether the softfork has activated at all. Both anti-SF and pro-SF 
nodes will remain on the same chain, with conflicting perceptions of the 
rules, and resolution (if ever) will be chaotic. Absent resolution, however, 
there is a strong incentive not to rely on the rules, and thus it may never 
get used, and therefore also never resolved.

Additionally, it loses the flexibility of BIP 8 to, after the initial 
deployment, move the timeoutheight sooner.

Luke


On Thursday 25 February 2021 22:33:25 Gregorio Guidi via bitcoin-dev wrote:
> Hello,
>
> I followed the debate on LOT=false / LOT=true trying to get a grasp of
> the balance of risks and advantages. The summary by Aaron van Wirdum [1]
> explains well the difficulties to find a good equilibrium... it
> concludes that "perhaps, a new possibility will present itself".
>
> Thinking about such a "new possibility" that overcomes the
> LOT=true/false dichotomy, I would like to offer the following proposal.
> It could be called "decreasing threshold activation".
>
> Decreasing threshold activation works similarly to BIP8, with the
> difference that the threshold that triggers the STARTED -> LOCKED_IN
> transition starts at 100% for the first retargeting period, and then is
> gradually reduced on each period in steps of 24 blocks (~1,2%). More
> precisely:
>
> On the 1st period (starting on start_height): if 2016 out of 2016 blocks
> signal, the state is changed to LOCKED_IN on the next period (otherwise
> stays STARTED)
> On the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state
> transitions to LOCKED_IN on the next period
> On the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state
> transitions to LOCKED_IN on the next period
> ...
> On the 14th period (~6 months): if 1704 out of 2016 blocks signal
> (~84.5%), the state transitions to LOCKED_IN on the next period
> ...
> On the 27th period (~12 months): if 1392 out of 2016 blocks signal
> (~69.0%), the state transitions to LOCKED_IN on the next period
> ...
> On the 40th period (~18 months): if 1080 out of 2016 blocks signal
> (~53.6%), the state transitions to LOCKED_IN on the next period
> ...
> On the 53th period (~24 months): if 768 out of 2016 blocks signal
> (~38.1%), the state transitions to LOCKED_IN on the next period
> ...
> On the 66th period (~30 months): if 456 out of 2016 blocks signal
> (~22.6%), the state transitions to LOCKED_IN on the next period
> ...
> On the 79th period (~36 months): if 144 out of 2016 blocks signal
> (~7.1%), the state transitions to LOCKED_IN on the next period
> ...
> On the 84th and final period (~39 months): if 24 out of 2016 blocks
> signal (~1.2%), the state transitions to LOCKED_IN on the next period,
> otherwise goes to FAILED
>
> (For reference, I include below a snippet of pseudocode for the
> decreasing thresholds in the style of BIP8 and BIP9.)
>
> Here are the main features and advantages of this approach:
>
> 1. It is relatively conservative at the beginning: for activation to
> happen in the first year, it requires a clear majority of signaling
> hashrate, indicating that the activation is relatively safe. Only later
> the threshold starts to move towards "unsafe" territory, accepting the
> tradeoff of less support from existing hashrate in exchange for ensuring
> that the activation eventually happens.
>
> 2. Like LOT=true, the activation will always occur in the end (except in
> the negligible case where less than 1.2% of hashrate supports it).
>
> 3. This approach is quite easy to implement, in particular it avoids the
> extra code to deal with the MUST_SIGNAL period.
>
> 4. There are no parameters to set (except startheight). I am a KISS fan,
> so this is a plus for me, making the activation mechanism robust and
> predictable with less chance for users to shoot themselves in the foot.
> It is also a plus for me that - if adopted as the default mechanism - it
> would require very little discussion on how to activate future
> soft-forks. In fact I think it would be a winning move for Core to
> commit to such a scheme, to avoid getting lost in game-theoretic rabbit
> holes.
>
> 5. Since there is no MUST_SIGNAL period, no automatic chain split occurs
> around activation when not all miners have upgraded (so activation is
> generally as benign as a MASF). A chain split will occur only when/if an
> invalid block is created (and this requires dedicated effort! it can
> only happen by circumventing the normal policy rules [2]). This
> mitigates the risk of reorgs and involuntary forks around activation,
> even with low miner signaling.
>
> 6. It removes motivation to create UASF clients that force activation.
> While individual nodes could still try to force a quicker activation,
> the motivation to do so is reduced since the same result is obtained
> just by waiting a little more.
>
> 7. Compared to LOT=true, activation is cleaner and quicker when it is
> relatively safe to do so (when the signaling hashrate is - let's say -
> in the 70%-80% range). On the other hand, activation is pushed further
> and further in time when it is less safe (when signaling hashrate is
> <50%, meaning that there is a serious risk that users/miners that did
> not upgrade start following an alternative chain). This gives everyone
> time to prepare properly for such a potentially disruptive event.
>
> 8. If a significant number of users and miners consciously decide (for
> whatever reasons) that they don't want to upgrade and want to fork
> themselves off from the chain followed by Core (as is their
> prerogative), they will have time to do so safely.
>
> 9. Compared to the strategy of doing LOT=false and then LOT=true if it
> fails, using the decreasing threshold approach may not seem very
> different. But it completely removes the need to fiddle with different
> client releases and with the issues associated with deployed nodes with
> different consensus parameters.
>
> All in all, reading the various perspectives on this mailing list and
> outside I have the feeling that the strongest arguments against LOT=true
> have at their core a certain uneasiness with the MUST_SIGNAL mechanism
> and the related automatic chain split on activation, which is something
> that greatly complicates the analysis (but please tell me if I am
> wrong...). In this sense, this proposal achieves the big objective of
> always ending in activation (like LOT=true) without resorting to
> MUST_SIGNAL and chain splits.
>
> A final note: this proposal should be seen as somewhat independent from
> the discussion on taproot activation. Personally I would be happy with a
> LOT=false activation for taproot that succeeds quickly, while the
> decreasing threshold approach could be evaluated as potential default
> activation mechanism for the future.
>
> I would be happy to hear what you think about this. What are the
> possible issues/drawbacks of using this mechanism?
>
> Thanks,
>
> Gregorio
>
> [1]
> https://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-h
>urdle-before-taproot-activation
>
> [2] This was not the case in the past for upgrades such as BIP16 (P2SH),
> which generated frequent reorgs due to a combination of low activation
> threshold (55%) and no policy protection. But for upgrades such as
> taproot the normal policy rules prevent the creation of invalid blocks
> by non-upgraded miners. See
> https://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-r
>ule/
>
> Pseudocode:
>
>          case STARTED:
>              int elapsed_periods = (block.height - startheight) / 2016;
>              if (elapsed_periods > 2016 / 24) {
>                  return FAILED;
>              }
>              int threshold = 2016 - 24 * (elapsed_periods - 1);
>              int count = 0;
>              walk = block;
>              for (i = 0; i < 2016; i++) {
>                  walk = walk.parent;
>                  if (walk.nVersion & 0xE0000000 == 0x20000000 &&
> (walk.nVersion >> bit) & 1 == 1) { ++count;
>                  }
>              }
>              if (count >= threshold) {
>                  return LOCKED_IN;
>              }
>              return STARTED;
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From dave at dtrt.org  Sat Feb 27 19:19:34 2021
From: dave at dtrt.org (David A. Harding)
Date: Sat, 27 Feb 2021 09:19:34 -1000
Subject: [bitcoin-dev] A design for Probabilistic Partial Pruning
In-Reply-To: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
References: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
Message-ID: <20210227191934.phk4z6k2chaefxwt@ganymede>

On Fri, Feb 26, 2021 at 11:40:35AM -0700, Keagan McClelland via bitcoin-dev wrote:
> Hi all,

Hi Keagan,

> 4. Once the node's IBD is complete it would advertise this as a peer
> service, advertising its seed and threshold, so that nodes could
> deterministically deduce which of its peers had which blocks.

Although some of the details differed, I believe this general idea of
sharded block storage was previously discussed in the context of BIP159,
which warns:

    "Peers may have different prune depths (depending on the peers
    configuration, disk space, etc.) which can result in a
    fingerprinting weakness (finding the prune depth through getdata
    requests). NODE_NETWORK_LIMITED supporting peers SHOULD avoid
    leaking the prune depth and therefore not serve blocks deeper than
    the signaled NODE_NETWORK_LIMITED threshold (288 blocks)."

- BIP: https://github.com/bitcoin/bips/blob/master/bip-0159.mediawiki#counter-measures-for-peer-fingerprinting
- Discussion thread 1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014186.html
- Discussion thread 2: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014314.html
- Discussion thread 2, continued: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014186.html
- BIP159-related PR, review comments: https://github.com/bitcoin/bitcoin/pull/10387

> If you have thoughts on
> 
> A. The protocol design itself
> B. The barriers to put this kind of functionality into Core
> 
> I would love to hear from you,

I think it would be unlikely for any popular node software to adopt a
technique that could make specific nodes easily fingerprintable on an
ongoing basis unless it solved some other urgent problem.  Luke Dashjr's
rough data collection currently shows 5,629 archival listening nodes,[1]
which is a substantial fraction of the roughly 10,000 listening nodes
reported by Addy Yeow,[2] so I don't think we're near the point of
needing to worry about the unavailability of historic blocks.

    [1] https://luke.dashjr.org/programs/bitcoin/files/charts/services.html
    [2] https://bitnodes.io/dashboard/

However, if there's a reasonable solution to the fingerprinting problem,
I do think node developers would find that very interesting.

-Dave
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/395e4571/attachment.sig>

From michaelfolkson at gmail.com  Sat Feb 27 17:36:51 2021
From: michaelfolkson at gmail.com (Michael Folkson)
Date: Sat, 27 Feb 2021 17:36:51 +0000
Subject: [bitcoin-dev] Taproot activation facts on lockinontimeout (LOT)
Message-ID: <CAFvNmHSXq8CLV6Su9P-sGwRc0uuwg+4cpjzh9+_gOC3q=qiSZw@mail.gmail.com>

I just want to lay out some facts as I see them because frankly I feel
any personal opinion is irrelevant at this point and without agreement
on facts we are going round in circles. I end with a personal opinion
which you can feel free to ignore.

1) There is a long list of current and past Core contributors who have
said they effectively NACK setting a default of lot=true in Core.
There are a small number of current and past Core contributors who
have said they effectively NACK setting a default of lot=false in
Core. If Core sets a default (barring an incredible transformation in
views) the only default that is possible at this stage is lot=false.

2) Core forcing users to choose lot=true or lot=false before they can
use the software is not viable, nor is it a good idea. This suggestion
was withdrawn by ZmnSCPxj.

3) There has been an idea floated (by Rusty and Greg amongst others)
of setting a config option such that users could (easily or with
greater difficulty) change the default set in Core to their preferred
option. Nobody as far as I'm aware is coding this up and intending to
open a PR to do this currently. Bitcoin Core pull requests are open to
anybody and this may change.

4) There is a non-Core project
(https://github.com/BitcoinActivation/bitcoin) that plans to release
lot=true as a default. If this is coded up and anyone runs this
software there will be lot=true nodes on the network regardless of
what Core does.

5) Core could (in theory) not release any activation code, either
because there is no consensus on the lot default or out of concern for
a (possible but unlikely) chain split if miners failed to activate for
a year. If Core chooses to not release anything Taproot will only
activate if users and miners run non-Core software.

**Personal opinion (feel free to ignore)**

Assuming these facts (feel free to correct me if you think any of the
above aren't facts) I will put forward a personal opinion. Core
releasing nothing and putting all users (including miners) in a
position where the only way they can activate Taproot is to run
non-Core software seems to me to be highly suboptimal. I do appreciate
that if Core releases a default of lot=false that there is a small but
non-zero risk of a chain split *if and only if* miners fail to
activate within a year. Soft forks are not 100 percent risk free. If
the community's appetite for risk and disruption is literally zero we
should not attempt to activate Taproot. I would argue the long term
benefits for the ecosystem of Taproot *significantly* outweigh that
non-zero downside risk.

-- 
Michael Folkson
Email: michaelfolkson at gmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

From nothingmuch at woobling.org  Sat Feb 27 22:13:29 2021
From: nothingmuch at woobling.org (Yuval Kogman)
Date: Sat, 27 Feb 2021 22:13:29 +0000
Subject: [bitcoin-dev] A design for Probabilistic Partial Pruning
In-Reply-To: <CAAQdECD=G_UV+GBB7365iVdvLduRYcFe_G1i_eZCbLqCVpaO5w@mail.gmail.com>
References: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
 <CAAQdECD=G_UV+GBB7365iVdvLduRYcFe_G1i_eZCbLqCVpaO5w@mail.gmail.com>
Message-ID: <CAAQdECAgd3XQpLGi6X1eshW6hT+Bt8p41q6j775QBBqeqL4xjQ@mail.gmail.com>

On Sat, 27 Feb 2021 at 22:09, Yuval Kogman <nothingmuch at woobling.org> wrote:
> and there is work on fountain codes. There is also some work on

apologies, the first half of this line should have been deleted as it
was worked into the next sentence.

From nothingmuch at woobling.org  Sat Feb 27 22:09:48 2021
From: nothingmuch at woobling.org (Yuval Kogman)
Date: Sat, 27 Feb 2021 22:09:48 +0000
Subject: [bitcoin-dev] A design for Probabilistic Partial Pruning
In-Reply-To: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
References: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
Message-ID: <CAAQdECD=G_UV+GBB7365iVdvLduRYcFe_G1i_eZCbLqCVpaO5w@mail.gmail.com>

On Fri, 26 Feb 2021 at 20:57, Keagan McClelland via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:

> The goals are to increase data redundancy in a way that more uniformly shares the load across nodes, alleviating some of the pressure of full archive nodes on the IBD problem. I am working on a draft BIP for this proposal but figured I would submit it as a high level idea in case anyone had any feedback on the initial design before I go into specification levels of detail.

You might be interested in an approach (henceforth "SeF") by Swanand
Kadhe, Jichan Chung and Kannan Ramchandran which employs fountain
codes, presented at Scaling Bitcoin 2019:
https://arxiv.org/abs/1906.12140

>From a cursory search it appears there is quite a bit of
related/followup work as well.

The simplest fountain code, the Luby Transform (applied in this work)
the encoder divides a message into smaller chunks, and then constructs
an infinite stream of codewords which are XORs of d randomly selected
chunks where d is sampled from the robust soliton distribution. The
simplest decoder simply XORs new k=1 codewords from the relevant k>1
codewords, and the full message can be recovered with overwhelming
probability and in linear time with a sufficiently large random sample
of codewords from the encoded stream. Note that the decoder must know
which chunks went into a codeword, but this is usually addressed using
pseudorandomness, which has other motivations in an adversarial
setting.

In SeF, the general idea is that "droplet nodes" are pruning nodes
which retain some number (equivalent to your threshold parameter) of
codewords from the encoding concatenated blocks (to obtain a fixed
message size), and serve these to compatible clients. This is more
robust than retaining a random sample of blocks, and also performs
well according to their simulations.

Even if this paper is not directly applicable to your efforts, the
theory of fountain codes should be of interest (many variants exist),
and there is work on fountain codes. There is also some work on
fountain codes in an adversarial setting (Falcon codes) but I'm only
vaguely familiar with it, and if i'm not mistaken most of the
considerations are either already implicitly addressed by the Bitcoin
protocol or explicitly addressed in the SeF paper, whose results also
take into account malicious droplet nodes.

From dave at dtrt.org  Sat Feb 27 23:37:52 2021
From: dave at dtrt.org (David A. Harding)
Date: Sat, 27 Feb 2021 13:37:52 -1000
Subject: [bitcoin-dev] A design for Probabilistic Partial Pruning
In-Reply-To: <20210227191934.phk4z6k2chaefxwt@ganymede>
References: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
 <20210227191934.phk4z6k2chaefxwt@ganymede>
Message-ID: <20210227233752.q6je6qzofyhmcgn2@ganymede>

On Sat, Feb 27, 2021 at 09:19:34AM -1000, David A. Harding via bitcoin-dev wrote:
> - Discussion thread 1: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014186.html

Two particularly useful emails from that thread are:

- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014199.html
  which links to discussions about the topic prior to 2017, including
  discussion about DoS risks that are more important than the
  fingerprinting risk I mentioned in my previous reply.

- https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014227.html
  which describes a potential way to distribute data with fewer DoS
  risks and less severe fingerprinting than each node storing a
  different set of blocks.

-Dave
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210227/c1dacd98/attachment.sig>

From greg_g at posteo.net  Sat Feb 27 23:49:46 2021
From: greg_g at posteo.net (Gregorio Guidi)
Date: Sun, 28 Feb 2021 00:49:46 +0100
Subject: [bitcoin-dev] Exploring alternative activation mechanisms:
 decreasing threshold
In-Reply-To: <202102271755.02271.luke@dashjr.org>
References: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>
 <202102271755.02271.luke@dashjr.org>
Message-ID: <106cf945-b8a1-d656-0c92-ea9fd02ed0ab@posteo.net>

On 2/27/21 6:55 PM, Luke Dashjr wrote:
> This has the same problems BIP149 did: since there is no signalling, it is
> ambiguous whether the softfork has activated at all. Both anti-SF and pro-SF
> nodes will remain on the same chain, with conflicting perceptions of the
> rules, and resolution (if ever) will be chaotic. Absent resolution, however,
> there is a strong incentive not to rely on the rules, and thus it may never
> get used, and therefore also never resolved.
>
> Additionally, it loses the flexibility of BIP 8 to, after the initial
> deployment, move the timeoutheight sooner.
>
> Luke

I see the point about possible problems of not having immediate 
resolution in the case of a contentious activation. I guess in such 
cases a certain amount of chaos is unavoidable... I see the alternatives 
of BIP8(lot=true) and Decresing Thresholds as a choice between having 
the chaos earlier (BIP8), or leaving it dormant with the possibility of 
having it later (Decreasing Thresholds). You might be right: there is a 
cost in pushing forward the resolution, but overall I think the risks 
are roughly comparable.

Trying to see this scenario from a more general perspective (at this 
point the debate is more theoretical than practical, forgive me for 
that): let's we are say in the soft-fork situation where Core is at 
version X and a new version Y is released with new consensus rules to be 
activated. The risk that nodes at version X do not upgrade and start 
following an invalid chain (invalid for Y) cannot be completely avoided. 
So there is a basic choice to make as a first step:

 ?* Option 1 (only safe soft-fork activation): Core decides that 
activating the soft fork can only be done with a strong guarantee that 
most of the hashrate follows version Y. This gives assurance that an 
invalid chain, if it appears, will be short-lived. That is: only 
lot=false is allowed for BIP8.

 ?* Option 2 (possibly unsafe soft-fork activation): Core accepts the 
risk that the activation occurs even when there is no guarantee that 
most of the hashrate (or even a majority of the hashrate) follows Y, 
because the advantages of activation outweigh the risks. That is: Core 
will consider activation mechanisms stronger than BIP8(lot=false).

This is a difficult choice, and honestly I wouldn't blame at all the 
Core devs if they go for option 1, as it is the safest on paper. But 
here we are considering what happens under option 2...

Under option 2, the risk can be mitigated in various ways, with the key 
factors being these assumption:

 ?* Assumption A1: there is strong evidence (gathered before and during 
the development of the soft-fork) that version Y will be adopted by the 
"economic majority", meaning that miners that mine a block invalid for Y 
are very likely to not have the value of the block recognized by the 
counterparties with which they normally transact. In other words: mining 
invalid blocks likely leads to an economic loss.

 ?* Assumption A2: enough lead time is given before a possibly unsafe 
activation, so that during this period it is possible to diffuse widely 
and loudly the message on the risks associated to not upgrading to Y. 
Given enough time, most economic agents will have made up their mind and 
acted accordingly (by upgrading, or possibly by forking themselves off 
from the Y chain in a safe manner, creating a forked coin).

I think both BIP8(lot=true) and Decreasing Threshold work decently under 
these assumptions. But in the worst case bip8(lot=true) forces 
resolution immediately upon activation, forcing an economic loss 
immediately on non-upgraded miners, while Decreasing Threshold keeps the 
issue lingering a bit more but is more lenient, forcing the economic 
loss on the miners only at the moment that they mine an invalid block. 
In addition, it gives more time for upgrading (and better fulfilling 
assumption A2) before and after activation.

About the final point on BIP8 flexibility, I can say that sometimes not 
having to take a difficult choice can be an advantage... :)

Thanks for your insight and for your work, cheers,

Gregorio


> On Thursday 25 February 2021 22:33:25 Gregorio Guidi via bitcoin-dev wrote:
>> Hello,
>>
>> I followed the debate on LOT=false / LOT=true trying to get a grasp of
>> the balance of risks and advantages. The summary by Aaron van Wirdum [1]
>> explains well the difficulties to find a good equilibrium... it
>> concludes that "perhaps, a new possibility will present itself".
>>
>> Thinking about such a "new possibility" that overcomes the
>> LOT=true/false dichotomy, I would like to offer the following proposal.
>> It could be called "decreasing threshold activation".
>>
>> Decreasing threshold activation works similarly to BIP8, with the
>> difference that the threshold that triggers the STARTED -> LOCKED_IN
>> transition starts at 100% for the first retargeting period, and then is
>> gradually reduced on each period in steps of 24 blocks (~1,2%). More
>> precisely:
>>
>> On the 1st period (starting on start_height): if 2016 out of 2016 blocks
>> signal, the state is changed to LOCKED_IN on the next period (otherwise
>> stays STARTED)
>> On the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state
>> transitions to LOCKED_IN on the next period
>> On the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state
>> transitions to LOCKED_IN on the next period
>> ...
>> On the 14th period (~6 months): if 1704 out of 2016 blocks signal
>> (~84.5%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 27th period (~12 months): if 1392 out of 2016 blocks signal
>> (~69.0%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 40th period (~18 months): if 1080 out of 2016 blocks signal
>> (~53.6%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 53th period (~24 months): if 768 out of 2016 blocks signal
>> (~38.1%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 66th period (~30 months): if 456 out of 2016 blocks signal
>> (~22.6%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 79th period (~36 months): if 144 out of 2016 blocks signal
>> (~7.1%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 84th and final period (~39 months): if 24 out of 2016 blocks
>> signal (~1.2%), the state transitions to LOCKED_IN on the next period,
>> otherwise goes to FAILED
>>
>> (For reference, I include below a snippet of pseudocode for the
>> decreasing thresholds in the style of BIP8 and BIP9.)
>>
>> Here are the main features and advantages of this approach:
>>
>> 1. It is relatively conservative at the beginning: for activation to
>> happen in the first year, it requires a clear majority of signaling
>> hashrate, indicating that the activation is relatively safe. Only later
>> the threshold starts to move towards "unsafe" territory, accepting the
>> tradeoff of less support from existing hashrate in exchange for ensuring
>> that the activation eventually happens.
>>
>> 2. Like LOT=true, the activation will always occur in the end (except in
>> the negligible case where less than 1.2% of hashrate supports it).
>>
>> 3. This approach is quite easy to implement, in particular it avoids the
>> extra code to deal with the MUST_SIGNAL period.
>>
>> 4. There are no parameters to set (except startheight). I am a KISS fan,
>> so this is a plus for me, making the activation mechanism robust and
>> predictable with less chance for users to shoot themselves in the foot.
>> It is also a plus for me that - if adopted as the default mechanism - it
>> would require very little discussion on how to activate future
>> soft-forks. In fact I think it would be a winning move for Core to
>> commit to such a scheme, to avoid getting lost in game-theoretic rabbit
>> holes.
>>
>> 5. Since there is no MUST_SIGNAL period, no automatic chain split occurs
>> around activation when not all miners have upgraded (so activation is
>> generally as benign as a MASF). A chain split will occur only when/if an
>> invalid block is created (and this requires dedicated effort! it can
>> only happen by circumventing the normal policy rules [2]). This
>> mitigates the risk of reorgs and involuntary forks around activation,
>> even with low miner signaling.
>>
>> 6. It removes motivation to create UASF clients that force activation.
>> While individual nodes could still try to force a quicker activation,
>> the motivation to do so is reduced since the same result is obtained
>> just by waiting a little more.
>>
>> 7. Compared to LOT=true, activation is cleaner and quicker when it is
>> relatively safe to do so (when the signaling hashrate is - let's say -
>> in the 70%-80% range). On the other hand, activation is pushed further
>> and further in time when it is less safe (when signaling hashrate is
>> <50%, meaning that there is a serious risk that users/miners that did
>> not upgrade start following an alternative chain). This gives everyone
>> time to prepare properly for such a potentially disruptive event.
>>
>> 8. If a significant number of users and miners consciously decide (for
>> whatever reasons) that they don't want to upgrade and want to fork
>> themselves off from the chain followed by Core (as is their
>> prerogative), they will have time to do so safely.
>>
>> 9. Compared to the strategy of doing LOT=false and then LOT=true if it
>> fails, using the decreasing threshold approach may not seem very
>> different. But it completely removes the need to fiddle with different
>> client releases and with the issues associated with deployed nodes with
>> different consensus parameters.
>>
>> All in all, reading the various perspectives on this mailing list and
>> outside I have the feeling that the strongest arguments against LOT=true
>> have at their core a certain uneasiness with the MUST_SIGNAL mechanism
>> and the related automatic chain split on activation, which is something
>> that greatly complicates the analysis (but please tell me if I am
>> wrong...). In this sense, this proposal achieves the big objective of
>> always ending in activation (like LOT=true) without resorting to
>> MUST_SIGNAL and chain splits.
>>
>> A final note: this proposal should be seen as somewhat independent from
>> the discussion on taproot activation. Personally I would be happy with a
>> LOT=false activation for taproot that succeeds quickly, while the
>> decreasing threshold approach could be evaluated as potential default
>> activation mechanism for the future.
>>
>> I would be happy to hear what you think about this. What are the
>> possible issues/drawbacks of using this mechanism?
>>
>> Thanks,
>>
>> Gregorio
>>
>> [1]
>> https://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-h
>> urdle-before-taproot-activation
>>
>> [2] This was not the case in the past for upgrades such as BIP16 (P2SH),
>> which generated frequent reorgs due to a combination of low activation
>> threshold (55%) and no policy protection. But for upgrades such as
>> taproot the normal policy rules prevent the creation of invalid blocks
>> by non-upgraded miners. See
>> https://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-r
>> ule/
>>
>> Pseudocode:
>>
>>           case STARTED:
>>               int elapsed_periods = (block.height - startheight) / 2016;
>>               if (elapsed_periods > 2016 / 24) {
>>                   return FAILED;
>>               }
>>               int threshold = 2016 - 24 * (elapsed_periods - 1);
>>               int count = 0;
>>               walk = block;
>>               for (i = 0; i < 2016; i++) {
>>                   walk = walk.parent;
>>                   if (walk.nVersion & 0xE0000000 == 0x20000000 &&
>> (walk.nVersion >> bit) & 1 == 1) { ++count;
>>                   }
>>               }
>>               if (count >= threshold) {
>>                   return LOCKED_IN;
>>               }
>>               return STARTED;
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev



From lf-lists at mattcorallo.com  Sun Feb 28 02:38:54 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Sat, 27 Feb 2021 21:38:54 -0500
Subject: [bitcoin-dev] Exploring alternative activation mechanisms:
 decreasing threshold
In-Reply-To: <202102271755.02271.luke@dashjr.org>
References: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>
 <202102271755.02271.luke@dashjr.org>
Message-ID: <6d9f9a87-84ab-c79e-bad0-1448a1609b4d@mattcorallo.com>

Forced-signaling, or any form of signaling, does not materially change whether a soft fork can be seen to be safe to 
use. Pieter wrote a great post[1] some time ago that goes into depth about the security of soft forks, but, while miners 
can help to avoid the risk of forks, they aren't the determining factor in whether use of a fork should be considered 
safe (ie the fork "has activated").

Not only that, but the signaling methods used in BIP 8/9 (ie the version field in the block header) do not imply 
anything about whether mining pools are running full nodes which enforce the soft fork at all, only whether the pool has 
configured their stratum software to signal or not.

Ultimately, forced-signaling, or signaling period, are not a substitute for having a broad set of upgraded nodes across 
the network, including an overwhelming majority of economically-active nodes, enforcing the rules of a new fork. As this 
can be difficult to measure, waiting some time after a fork and examining upgrade patterns across the network is important.

Matt

[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012014.html

On 2/27/21 12:55, Luke Dashjr via bitcoin-dev wrote:
> This has the same problems BIP149 did: since there is no signalling, it is
> ambiguous whether the softfork has activated at all. Both anti-SF and pro-SF
> nodes will remain on the same chain, with conflicting perceptions of the
> rules, and resolution (if ever) will be chaotic. Absent resolution, however,
> there is a strong incentive not to rely on the rules, and thus it may never
> get used, and therefore also never resolved.
> 
> Additionally, it loses the flexibility of BIP 8 to, after the initial
> deployment, move the timeoutheight sooner.
> 
> Luke
> 
> 
> On Thursday 25 February 2021 22:33:25 Gregorio Guidi via bitcoin-dev wrote:
>> Hello,
>>
>> I followed the debate on LOT=false / LOT=true trying to get a grasp of
>> the balance of risks and advantages. The summary by Aaron van Wirdum [1]
>> explains well the difficulties to find a good equilibrium... it
>> concludes that "perhaps, a new possibility will present itself".
>>
>> Thinking about such a "new possibility" that overcomes the
>> LOT=true/false dichotomy, I would like to offer the following proposal.
>> It could be called "decreasing threshold activation".
>>
>> Decreasing threshold activation works similarly to BIP8, with the
>> difference that the threshold that triggers the STARTED -> LOCKED_IN
>> transition starts at 100% for the first retargeting period, and then is
>> gradually reduced on each period in steps of 24 blocks (~1,2%). More
>> precisely:
>>
>> On the 1st period (starting on start_height): if 2016 out of 2016 blocks
>> signal, the state is changed to LOCKED_IN on the next period (otherwise
>> stays STARTED)
>> On the 2nd period: if 1992 out of 2016 blocks signal (~98.8%), the state
>> transitions to LOCKED_IN on the next period
>> On the 3rd period: if 1968 out of 2016 blocks signal (~97.6%), the state
>> transitions to LOCKED_IN on the next period
>> ...
>> On the 14th period (~6 months): if 1704 out of 2016 blocks signal
>> (~84.5%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 27th period (~12 months): if 1392 out of 2016 blocks signal
>> (~69.0%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 40th period (~18 months): if 1080 out of 2016 blocks signal
>> (~53.6%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 53th period (~24 months): if 768 out of 2016 blocks signal
>> (~38.1%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 66th period (~30 months): if 456 out of 2016 blocks signal
>> (~22.6%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 79th period (~36 months): if 144 out of 2016 blocks signal
>> (~7.1%), the state transitions to LOCKED_IN on the next period
>> ...
>> On the 84th and final period (~39 months): if 24 out of 2016 blocks
>> signal (~1.2%), the state transitions to LOCKED_IN on the next period,
>> otherwise goes to FAILED
>>
>> (For reference, I include below a snippet of pseudocode for the
>> decreasing thresholds in the style of BIP8 and BIP9.)
>>
>> Here are the main features and advantages of this approach:
>>
>> 1. It is relatively conservative at the beginning: for activation to
>> happen in the first year, it requires a clear majority of signaling
>> hashrate, indicating that the activation is relatively safe. Only later
>> the threshold starts to move towards "unsafe" territory, accepting the
>> tradeoff of less support from existing hashrate in exchange for ensuring
>> that the activation eventually happens.
>>
>> 2. Like LOT=true, the activation will always occur in the end (except in
>> the negligible case where less than 1.2% of hashrate supports it).
>>
>> 3. This approach is quite easy to implement, in particular it avoids the
>> extra code to deal with the MUST_SIGNAL period.
>>
>> 4. There are no parameters to set (except startheight). I am a KISS fan,
>> so this is a plus for me, making the activation mechanism robust and
>> predictable with less chance for users to shoot themselves in the foot.
>> It is also a plus for me that - if adopted as the default mechanism - it
>> would require very little discussion on how to activate future
>> soft-forks. In fact I think it would be a winning move for Core to
>> commit to such a scheme, to avoid getting lost in game-theoretic rabbit
>> holes.
>>
>> 5. Since there is no MUST_SIGNAL period, no automatic chain split occurs
>> around activation when not all miners have upgraded (so activation is
>> generally as benign as a MASF). A chain split will occur only when/if an
>> invalid block is created (and this requires dedicated effort! it can
>> only happen by circumventing the normal policy rules [2]). This
>> mitigates the risk of reorgs and involuntary forks around activation,
>> even with low miner signaling.
>>
>> 6. It removes motivation to create UASF clients that force activation.
>> While individual nodes could still try to force a quicker activation,
>> the motivation to do so is reduced since the same result is obtained
>> just by waiting a little more.
>>
>> 7. Compared to LOT=true, activation is cleaner and quicker when it is
>> relatively safe to do so (when the signaling hashrate is - let's say -
>> in the 70%-80% range). On the other hand, activation is pushed further
>> and further in time when it is less safe (when signaling hashrate is
>> <50%, meaning that there is a serious risk that users/miners that did
>> not upgrade start following an alternative chain). This gives everyone
>> time to prepare properly for such a potentially disruptive event.
>>
>> 8. If a significant number of users and miners consciously decide (for
>> whatever reasons) that they don't want to upgrade and want to fork
>> themselves off from the chain followed by Core (as is their
>> prerogative), they will have time to do so safely.
>>
>> 9. Compared to the strategy of doing LOT=false and then LOT=true if it
>> fails, using the decreasing threshold approach may not seem very
>> different. But it completely removes the need to fiddle with different
>> client releases and with the issues associated with deployed nodes with
>> different consensus parameters.
>>
>> All in all, reading the various perspectives on this mailing list and
>> outside I have the feeling that the strongest arguments against LOT=true
>> have at their core a certain uneasiness with the MUST_SIGNAL mechanism
>> and the related automatic chain split on activation, which is something
>> that greatly complicates the analysis (but please tell me if I am
>> wrong...). In this sense, this proposal achieves the big objective of
>> always ending in activation (like LOT=true) without resorting to
>> MUST_SIGNAL and chain splits.
>>
>> A final note: this proposal should be seen as somewhat independent from
>> the discussion on taproot activation. Personally I would be happy with a
>> LOT=false activation for taproot that succeeds quickly, while the
>> decreasing threshold approach could be evaluated as potential default
>> activation mechanism for the future.
>>
>> I would be happy to hear what you think about this. What are the
>> possible issues/drawbacks of using this mechanism?
>>
>> Thanks,
>>
>> Gregorio
>>
>> [1]
>> https://bitcoinmagazine.com/articles/lottrue-or-lotfalse-this-is-the-last-h
>> urdle-before-taproot-activation
>>
>> [2] This was not the case in the past for upgrades such as BIP16 (P2SH),
>> which generated frequent reorgs due to a combination of low activation
>> threshold (55%) and no policy protection. But for upgrades such as
>> taproot the normal policy rules prevent the creation of invalid blocks
>> by non-upgraded miners. See
>> https://blog.bitmex.com/the-arts-of-making-softforks-protection-by-policy-r
>> ule/
>>
>> Pseudocode:
>>
>>           case STARTED:
>>               int elapsed_periods = (block.height - startheight) / 2016;
>>               if (elapsed_periods > 2016 / 24) {
>>                   return FAILED;
>>               }
>>               int threshold = 2016 - 24 * (elapsed_periods - 1);
>>               int count = 0;
>>               walk = block;
>>               for (i = 0; i < 2016; i++) {
>>                   walk = walk.parent;
>>                   if (walk.nVersion & 0xE0000000 == 0x20000000 &&
>> (walk.nVersion >> bit) & 1 == 1) { ++count;
>>                   }
>>               }
>>               if (count >= threshold) {
>>                   return LOCKED_IN;
>>               }
>>               return STARTED;
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From leo at LeoWandersleb.de  Sun Feb 28 03:41:06 2021
From: leo at LeoWandersleb.de (Leo Wandersleb)
Date: Sun, 28 Feb 2021 00:41:06 -0300
Subject: [bitcoin-dev] A design for Probabilistic Partial Pruning
In-Reply-To: <CAJx8jdz3uOCpwed3MZkf1ghkvaZMfy-+vvOCVZdvhz2KAn38DQ@mail.gmail.com>
References: <CALeFGL1WSSA69ARvJW3di-UC_gz7NV9q7=6zd7s=CHnmttdQFg@mail.gmail.com>
 <CAJx8jdz3uOCpwed3MZkf1ghkvaZMfy-+vvOCVZdvhz2KAn38DQ@mail.gmail.com>
Message-ID: <b895f2e4-513f-0c0d-91ac-52af055f332c@LeoWandersleb.de>

Only headers need to be downloaded sequentially so downloading relevant blocks
from one node is totally possible with gaps in between.

On 2/27/21 4:10 AM, Igor Cota via bitcoin-dev wrote:
> Hi Keagan,
>
> I had a very similar idea. The only difference being for the node to decide on
> a range of blocks to keep beforehand, rather than making the decision
> block-by-block like you suggest.
>
> I felt the other nodes would be better served by ranges due to the sequential
> nature of IBD. Perhaps this would be computationally lighter as well.
>
> I also encourage?you to read?Ryosuke Abe's paper [1] that proposes a?DHT
> scheme to solve this same problem.
>
> Cheers,
> Igor
>
> [1]?https://arxiv.org/abs/1902.02174
>
> On Fri, 26 Feb 2021 at 21:57, Keagan McClelland via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>
>     Hi all,
>
>     I've been thinking for quite some time about the problem of pruned nodes
>     and ongoing storage costs for full nodes. One of the things that strikes
>     me as odd is that we only really have two settings.
>
>     A. Prune everything except the most recent blocks, down to the cache size
>     B. Keep everything since genesis
>
>     From my observations and conversations with various folks in the
>     community, they would like to be able to run a "partially" pruned node to
>     help bear the load of bootstrapping other nodes and helping with data
>     redundancy in the network, but would prefer to not dedicate hundreds of
>     Gigabytes of storage space to the cause.
>
>     This led me to the idea that a node could randomly prune some of the
>     blocks from history if it passed some predicate. A rough sketch of this
>     would look as follows.
>
>     1. At node startup, it would generate a random seed, this would be unique
>     to the node but not necessary that it be cryptographically secure.
>     2. In the node configuration it would also carry a "threshold" expressed
>     as some percentage of blocks it wanted to keep.
>     3. As IBD occurs, based off of the threshold, the block hash, and the
>     node's unique seed, the node would either decide to prune the data or keep
>     it. The uniqueness of the node's hash should ensure that no block is
>     systematically overrepresented in the set of nodes choosing this storage
>     scheme.
>     4. Once the node's IBD is complete it would advertise this as a peer
>     service, advertising its seed and threshold, so that nodes could
>     deterministically deduce which of its peers had which blocks.
>
>     The goals are to increase data redundancy in a way that more uniformly
>     shares the load across nodes, alleviating some of the pressure of full
>     archive nodes on the IBD problem. I am working on a draft BIP for this
>     proposal but figured I would submit it as a high level idea in case anyone
>     had any feedback on the initial design before I go into specification
>     levels of detail.
>
>     If you have thoughts on
>
>     A. The protocol design itself
>     B. The barriers to put this kind of functionality into Core
>
>     I would love to hear from you,
>
>     Cheers,
>     Keagan
>     _______________________________________________
>     bitcoin-dev mailing list
>     bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>
> -- 
> *Igor Cota*
> Codex Apertus d.o.o.
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From willtech at live.com.au  Sun Feb 28 11:36:37 2021
From: willtech at live.com.au (LORD HIS EXCELLENCY JAMES HRMH)
Date: Sun, 28 Feb 2021 11:36:37 +0000
Subject: [bitcoin-dev] Taproot NACK
In-Reply-To: <CAD5xwhhxw7RhwMWSxa76HZqefpVcJidVpzE7Vbzk+hsD6zfUHQ@mail.gmail.com>
References: <SL2P216MB00896C65DECD973205D17ABE9D9F9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>,
 <CAD5xwhhxw7RhwMWSxa76HZqefpVcJidVpzE7Vbzk+hsD6zfUHQ@mail.gmail.com>
Message-ID: <SL2P216MB0089322359FD1FC4C89AB1619D9B9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>

Good Evening,

Thank-you for your advice @JeremyRubin<https://twitter.com/JeremyRubin> on the basis you advise, "Taproot does not enable monero-like privacy features", I am prepred to withdraw my NACK notably that the existing feeatures of Bitcoin MUST be maintained, and whereby the UTXO of a transaction is identifiable, the PayTo Address, and the amount all without any obfuscation.

Lightning does not really provide obfuscation, it provides a result of a subset of transactions although the operation of the channel is observable to the parties.

The reports I were reading concerning the supposed operation of Taproot published in a public media channel may have been speculation or misinformation nonetheless it is prudent to conditionally reply as you see that I have. It is important not to allow things to slip through the cracks. As you may believe may astute reviewers could make a full disclosure to this list it is not to be expected.

KING JAMES HRMH
Great British Empire

Regards,
The Australian
LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
of Hougun Manor & Glencoe & British Empire
MR. Damian A. James Williamson
Wills

et al.


Willtech
www.willtech.com.au<mail://local/Sent/www.willtech.com.au>
www.go-overt.com<mail://local/Sent/www.go-overt.com>
and other projects

earn.com/willtech
linkedin.com/in/damianwilliamson


m. 0487135719
f. +61261470192


This email does not constitute a general advice. Please disregard this email if misdelivered.
________________________________
From: Jeremy <jlrubin at mit.edu>
Sent: Sunday, 28 February 2021 3:14 AM
To: LORD HIS EXCELLENCY JAMES HRMH <willtech at live.com.au>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>
Subject: Re: [bitcoin-dev] Taproot NACK

I have good news for you: Taproot does not enable monero-like privacy features any moreso than already exist in Bitcoin today. At its core, taproot is a way to make transactions with embedded smart contracts less expensive, done so in a manner that may marginally improve privacy dependent on user behavior (but not in the monero-like way you mention). For example, it makes it possible for lightning channels to look structurally similar to single key wallets, but it does nothing inherently to obfuscate the transaction graph as in monero.

Such "monero-like" transaction graph obfuscation may already exist in Bitcoin via other techniques (coinjoin, payjoin, coinswap, lightning, etc) with or without Taproot, so the point is further moot.

Do you have a source on your reporting?

You may wish to rescind your nack.


--
@JeremyRubin<https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>


On Sat, Feb 27, 2021 at 5:46 AM LORD HIS EXCELLENCY JAMES HRMH via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
Good Afternoon,

It has been reported that Taproot will enable some Monero like features including the ability to hide transactions.

If that is the case I offer a full NACK and let me explain.

A part of the benefit of using Bitcoin is its honesty. The full transaction is published on the blockchain. If that were to change so that transactions may be obfuscated from scrutiny then any government would have unlimited impetus to ban Bitcoin, and speculation has that is the reason India has been reported to have banned cryptocurrencies already.

I am in support of the expanded use case of Bitcoin without harming the established robust fairness and equal equity offered. The core functionality of Bitcoin, its values, must remain unaltered.

KING JAMES HRMH
Great British Empire

Regards,
The Australian
LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
of Hougun Manor & Glencoe & British Empire
MR. Damian A. James Williamson
Wills

et al.


Willtech
www.willtech.com.au<http://www.willtech.com.au>
www.go-overt.com<http://www.go-overt.com>
and other projects

earn.com/willtech<http://earn.com/willtech>
linkedin.com/in/damianwilliamson<http://linkedin.com/in/damianwilliamson>


m. 0487135719
f. +61261470192


This email does not constitute a general advice. Please disregard this email if misdelivered.
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/cc4672e3/attachment.html>

From bitcoin-dev at rgrant.org  Sun Feb 28 14:06:42 2021
From: bitcoin-dev at rgrant.org (Ryan Grant)
Date: Sun, 28 Feb 2021 14:06:42 +0000
Subject: [bitcoin-dev] Exploring alternative activation mechanisms:
 decreasing threshold
In-Reply-To: <202102271755.02271.luke@dashjr.org>
References: <bc69d684-3d6e-624e-a859-c2ef8ad5cb13@posteo.net>
 <202102271755.02271.luke@dashjr.org>
Message-ID: <CAMnpzfpDbskd70z0fKk-_FVCM-A1qYVVCQbRVM=1KOv63RrJrQ@mail.gmail.com>

On Sat, Feb 27, 2021 at 5:55 PM Luke Dashjr via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> This has the same problems BIP149 did: since there is no signalling, it is
> ambiguous whether the softfork has activated at all.

You only need to see one block in the heaviest valid chain to dissolve
that ambiguity.  There are a lot of volunteers in this space who would
(collectively) commit a few block's worth of hashrate, to know.

> Additionally, it loses the flexibility of BIP 8 to, after the initial
> deployment, move the timeoutheight sooner.

It doesn't interfere with concurrent UASFs using any combination of
timeoutheights.

From arielluaces at gmail.com  Sun Feb 28 13:07:21 2021
From: arielluaces at gmail.com (Ariel Lorenzo-Luaces)
Date: Sun, 28 Feb 2021 05:07:21 -0800
Subject: [bitcoin-dev] Taproot NACK
In-Reply-To: <SL2P216MB0089322359FD1FC4C89AB1619D9B9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>
References: <SL2P216MB00896C65DECD973205D17ABE9D9F9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>,
 <CAD5xwhhxw7RhwMWSxa76HZqefpVcJidVpzE7Vbzk+hsD6zfUHQ@mail.gmail.com>
 <SL2P216MB0089322359FD1FC4C89AB1619D9B9@SL2P216MB0089.KORP216.PROD.OUTLOOK.COM>
Message-ID: <c4da8a65-a3ba-467b-91d2-a839bc6e9d35@gmail.com>

Hello LORD HIS EXCELLENCY JAMES HRMH

I find a striking dichotomy between your concern of increased privacy in bitcoin and your link to a bitcoin mixer in your signature www.go-overt.com

At first your concerns seemed genuine but after seeing your promotion of a bitcoin mixer I'm thinking your concerns may be more profit motivated? I can't tell since you failed to disclose your relationship with the mixer.

Could you please clarify your association with the bitcoin mixer and moving forward could you please always do proper disclosure any time you're publically talking about bitcoin transaction privacy. It's only fair to do so as to not mislead people in an attempt to manipulate at worst and just a courteous practice at best.

Cheers
Ariel Lorenzo-Luaces


On Feb 28, 2021, 4:36 AM, at 4:36 AM, LORD HIS EXCELLENCY JAMES HRMH via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Good Evening,
>
>Thank-you for your advice @JeremyRubin<https://twitter.com/JeremyRubin>
>on the basis you advise, "Taproot does not enable monero-like privacy
>features", I am prepred to withdraw my NACK notably that the existing
>feeatures of Bitcoin MUST be maintained, and whereby the UTXO of a
>transaction is identifiable, the PayTo Address, and the amount all
>without any obfuscation.
>
>Lightning does not really provide obfuscation, it provides a result of
>a subset of transactions although the operation of the channel is
>observable to the parties.
>
>The reports I were reading concerning the supposed operation of Taproot
>published in a public media channel may have been speculation or
>misinformation nonetheless it is prudent to conditionally reply as you
>see that I have. It is important not to allow things to slip through
>the cracks. As you may believe may astute reviewers could make a full
>disclosure to this list it is not to be expected.
>
>KING JAMES HRMH
>Great British Empire
>
>Regards,
>The Australian
>LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
>of Hougun Manor & Glencoe & British Empire
>MR. Damian A. James Williamson
>Wills
>
>et al.
>
>
>Willtech
>www.willtech.com.au<mail://local/Sent/www.willtech.com.au>
>www.go-overt.com<mail://local/Sent/www.go-overt.com>
>and other projects
>
>earn.com/willtech
>linkedin.com/in/damianwilliamson
>
>
>m. 0487135719
>f. +61261470192
>
>
>This email does not constitute a general advice. Please disregard this
>email if misdelivered.
>________________________________
>From: Jeremy <jlrubin at mit.edu>
>Sent: Sunday, 28 February 2021 3:14 AM
>To: LORD HIS EXCELLENCY JAMES HRMH <willtech at live.com.au>; Bitcoin
>Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>
>Subject: Re: [bitcoin-dev] Taproot NACK
>
>I have good news for you: Taproot does not enable monero-like privacy
>features any moreso than already exist in Bitcoin today. At its core,
>taproot is a way to make transactions with embedded smart contracts
>less expensive, done so in a manner that may marginally improve privacy
>dependent on user behavior (but not in the monero-like way you
>mention). For example, it makes it possible for lightning channels to
>look structurally similar to single key wallets, but it does nothing
>inherently to obfuscate the transaction graph as in monero.
>
>Such "monero-like" transaction graph obfuscation may already exist in
>Bitcoin via other techniques (coinjoin, payjoin, coinswap, lightning,
>etc) with or without Taproot, so the point is further moot.
>
>Do you have a source on your reporting?
>
>You may wish to rescind your nack.
>
>
>--
>@JeremyRubin<https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>
>
>
>On Sat, Feb 27, 2021 at 5:46 AM LORD HIS EXCELLENCY JAMES HRMH via
>bitcoin-dev
><bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>>
>wrote:
>Good Afternoon,
>
>It has been reported that Taproot will enable some Monero like features
>including the ability to hide transactions.
>
>If that is the case I offer a full NACK and let me explain.
>
>A part of the benefit of using Bitcoin is its honesty. The full
>transaction is published on the blockchain. If that were to change so
>that transactions may be obfuscated from scrutiny then any government
>would have unlimited impetus to ban Bitcoin, and speculation has that
>is the reason India has been reported to have banned cryptocurrencies
>already.
>
>I am in support of the expanded use case of Bitcoin without harming the
>established robust fairness and equal equity offered. The core
>functionality of Bitcoin, its values, must remain unaltered.
>
>KING JAMES HRMH
>Great British Empire
>
>Regards,
>The Australian
>LORD HIS EXCELLENCY JAMES HRMH (& HMRH)
>of Hougun Manor & Glencoe & British Empire
>MR. Damian A. James Williamson
>Wills
>
>et al.
>
>
>Willtech
>www.willtech.com.au<http://www.willtech.com.au>
>www.go-overt.com<http://www.go-overt.com>
>and other projects
>
>earn.com/willtech<http://earn.com/willtech>
>linkedin.com/in/damianwilliamson<http://linkedin.com/in/damianwilliamson>
>
>
>m. 0487135719
>f. +61261470192
>
>
>This email does not constitute a general advice. Please disregard this
>email if misdelivered.
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/49cd6deb/attachment.html>

From lf-lists at mattcorallo.com  Sun Feb 28 16:45:22 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Sun, 28 Feb 2021 11:45:22 -0500
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
Message-ID: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>

As anyone reading this list is aware, there is significant debate around the activation method for the proposed Taproot 
soft fork. So much so, and with so much conviction, that many individuals are committing themselves to running 
incompatible consensus rules. Obviously, such commitments, were they to come to pass, and were a fork to occur as a 
result, would do more harm than any soft-fork does good. Further, such commitments and debate have likely delayed any 
possible release of a future Taproot activation while issues around locked-in activation are debated, instead of 
avoiding it as was the original intent of the "just ship BIP 8 LOT=false and we'll debate the rest if we need to" approach.

Given this, it seems one way to keep the network in consensus would be to simply activate taproot through a traditional, 
no-frills, flag-day (or -height) activation with a flag day of roughly August, 2022. Going back to my criteria laid out 
in [1],

1) I don't believe we have or will see significant, reasonable, and directed objection. This has largely always been the 
case, but it is also critical that the lack of such objection is demonstrable to outside observers. Ironically, the 
ongoing debate (and clear lack of consensus) around activation methods can be said to have had that effect, at least as 
far as the active Bitcoin Reddit/Twitter userbase is concerned. In addition, the public support for Taproot activation 
made by mining pool operators further shows public review and acceptance. Ideally, large Bitcoin business operators who 
previously took part in Bitcoin Optech's Taproot workshop [2] would publicly state something similar prior to release of 
Taproot activation parameters. Because this expectation is social, no technical solution exists, only public statements 
made in broad venues - something which I'd previously argued comes through soft fork activation parameter deployment, 
but which can also come from elsewhere.

2) The high node-level-adoption bar is one of the most critical goals, and the one most currently in jeopardy in a BIP 8 
approach. Users demanding alternative consensus rules (or, worse, configuration flags to change consensus rules on 
individual nodes with an expectation of use) makes this very complicated in the context of BIP 8. Instead of debating 
activation parameters and entrenching individuals into running their own consensus rules, a flag day activation changes 
the problem to one of simply encouraging upgrades, avoiding a lot of possibility for games. Of course in order to meet 
this goal we still need significant time to pass between activation parameter release and activation. Given the delays 
likely to result from debates around BIP 8 parameters, I don't think this is a huge loss. Capitalizing on current 
interest and demand for Taproot further implies a shortened timeline (eg a year and a half instead of two) may be merited.

3) The potential loss of hashpower is likely the biggest risk of this approach. It is derisked somewhat by the public 
commitment of pool operators to Taproot activation, and can be de-risked further by seeking more immediate commitment 
prior to release. Still, given the desire to push for a forced-signaling approach by many, there is more significant 
risk of loss of hashpower in today's approach. In an ideal world, we could do something more akin to BIP 9/BIP 8(false) 
to reduce risk of this further, but its increasingly likely that this is not possible. A flag-day which takes advantage 
of the nonstandardness of Taproot transactions in current Bitcoin Core releases may suffice.

4) Similar arguments apply as the above around the public commitment from pool operators to enforce the Taproot 
consensus rules.

5) Similar arguments apply as the discussion in (1).


Ultimately, the risk which is present in doing flag day activations (and the reason I've argued against them as a 
"default" in the past) are present as well in BIP 8(true), forced-signaling activations where community debate splits 
the consensus rules across nodes. While such a deployment could delay Taproot somewhat, it sidesteps a sufficient amount 
of debate and resulting delay that I wouldn't be surprised if it did not. Further, Taproot has been worked on for many 
years now with no apparent urgency from the many who are suddenly expressing activation urgency, making it more likely 
such urgency is artificial. Those who seek Taproot activation for Bitcoin market reasons should also rejoice - not only 
can the market celebrate the final release of Taproot, but it gets a second celebratory event in 2022 when the 
activation occurs.

Matt


[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-January/017547.html
[2] https://bitcoinops.org/en/schorr-taproot-workshop/

From luke at dashjr.org  Sun Feb 28 17:20:05 2021
From: luke at dashjr.org (Luke Dashjr)
Date: Sun, 28 Feb 2021 17:20:05 +0000
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>
References: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>
Message-ID: <202102281720.07392.luke@dashjr.org>

On Sunday 28 February 2021 16:45:22 Matt Corallo via bitcoin-dev wrote:
> many individuals are committing themselves to running
> incompatible consensus rules.

Yet that is exactly what you propose herein...

> Given this, it seems one way to keep the network in consensus would be to
> simply activate taproot through a traditional, no-frills, flag-day (or
> -height) activation with a flag day of roughly August, 2022.

Concept NACK. This still has the same problems BIP149 would have had, as I 
just reminded in my last email to this ML:

1) Such a chain does not indicate activation at all, leaving it unresolved and 
debatable whether activation has occurred or not.
2) As a result, it is also impractical to intentionally reject the softfork 
should anyone decide to do so.

Signalling is important to activation.

> 2) The high node-level-adoption bar is one of the most critical goals, and
> the one most currently in jeopardy in a BIP 8 approach.

It is only jeopardized if people continue to push for a LOT=False deployment 
(or this new proposal of yours).

BIP 8 itself, with LOT=True, does not create such a risk at all.

> Users demanding alternative consensus rules (or, worse, configuration flags
> to change consensus rules on individual nodes with an expectation of use)
> makes this very complicated in the context of BIP 8.

Alternative consensus rules is exactly what you are proposing here.

More alternative rules to choose from just increase the risks. Two options is 
annoying, but adding a third for no reason is just absurd.

Luke

From lf-lists at mattcorallo.com  Sun Feb 28 17:29:36 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Sun, 28 Feb 2021 12:29:36 -0500
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <202102281720.07392.luke@dashjr.org>
References: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>
 <202102281720.07392.luke@dashjr.org>
Message-ID: <c6a7a7ab-ee68-6594-ebd0-60f38ba40c37@mattcorallo.com>

I think you may have misunderstood my proposal. I'm not suggesting some people run BIP 8(true), some run BIP8(false), 
and some run a client which has a flag day, I'm suggesting a flag day activation instead of any BIP8-based activation. 
Replies to your further points inline.

Matt

On 2/28/21 12:20, Luke Dashjr wrote:
> On Sunday 28 February 2021 16:45:22 Matt Corallo via bitcoin-dev wrote:
> Concept NACK. This still has the same problems BIP149 would have had, as I
> just reminded in my last email to this ML:
> 
> 1) Such a chain does not indicate activation at all, leaving it unresolved and
> debatable whether activation has occurred or not.
> 2) As a result, it is also impractical to intentionally reject the softfork
> should anyone decide to do so.
> 
> Signalling is important to activation.

Several people responded disagreeing, including myself. I'll paste my response here in case you missed it:

Forced-signaling, or any form of signaling, does not materially change whether a soft fork can be seen to be safe to 
use. Pieter wrote a great post[1] some time ago that goes into depth about the security of soft forks, but, while miners 
can help to avoid the risk of forks, they aren't the determining factor in whether use of a fork should be considered 
safe (ie the fork "has activated").

Not only that, but the signaling methods used in BIP 8/9 (ie the version field in the block header) do not imply 
anything about whether mining pools are running full nodes which enforce the soft fork at all, only whether the pool has 
configured their stratum software to signal or not.

Ultimately, forced-signaling, or signaling period, are not a substitute for having a broad set of upgraded nodes across 
the network, including an overwhelming majority of economically-active nodes, enforcing the rules of a new fork. As this 
can be difficult to measure, waiting some time after a fork and examining upgrade patterns across the network is important.

[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/012014.html

From luke at dashjr.org  Sun Feb 28 19:33:30 2021
From: luke at dashjr.org (Luke Dashjr)
Date: Sun, 28 Feb 2021 19:33:30 +0000
Subject: [bitcoin-dev] LOT=False is dangerous and shouldn't be used
Message-ID: <202102281933.30691.luke@dashjr.org>

(Note: I am writing this as a general case against LOT=False, but using 
Taproot simply as an example softfork. Note that this is addressing 
activation under the assumption that the softfork is ethical and has 
sufficient community support. If those criteria have not been met, no 
activation should be deployed at all, of any type.)

As we saw in 2017 with BIP 9, coordinating activation by miner signal alone, 
despite its potential benefits, also leaves open the door to a miner veto. 
This was never the intended behaviour, and a bug, which took a rushed 
deployment of BIP148 to address. LOT=False would reintroduce that same bug.
It wouldn't be much different than adding back the inflation bug 
(CVE-2018-17144) and trusting miners not to exploit it.

Some have tried to spin LOT=True as some kind of punishment for miners or 
reactive "counter-attack". Rather, it is simply a fallback to avoid 
regression on this and other bugs. "Flag day" activation is not fundamentally 
flawed or dangerous, just slow since everyone needs time to upgrade.
BIP 8(LOT=True) combines the certainty of such a flag day, with the speed 
improvement of a MASF, so that softforks can be activated both reasonably 
quick and safely.

In the normal path, and that which BIP8(True) best incentivises, miners will 
simply upgrade and signal, and activation can occur as soon as the economic 
majority is expected to have had time to upgrade. In the worst-case path, the 
behaviour of LOT=True is the least-harmful result: unambiguous activation and 
enforcement by the economy, with miners either deciding to make an 
anti-Taproot(eg) altcoin, or continue mining Bitcoin. Even if ALL the miners 
revolt against the softfork, the LOT=True nodes are simply faced with a 
choice to hardfork (replacing the miners with a PoW change) or concede - they 
do not risk vulnerability or loss.

With LOT=False in the picture, however, things can get messy: some users will 
enforce Taproot(eg) (those running LOT=True), while others will not (those 
with LOT=False). Users with LOT=True will still get all the safety thereof, 
but those with LOT=False will (in the event of miners deciding to produce a 
chain split) face an unreliable chain, being replaced by the LOT=True chain 
every time it overtakes the LOT=False chain in work. For 2 weeks, users with 
LOT=False would not have a usable network. The only way to resolve this would 
be to upgrade to LOT=True or to produce a softfork that makes an activated 
chain invalid (thereby taking the anti-Taproot path). Even if nobody ran 
LOT=True (very unlikely), LOT=False would still fail because users would be 
faced with either accepting the loss of Taproot(eg), or re-deploying from 
scratch with LOT=True. It accomplishes nothing compared to just deploying 
LOT=True from the beginning. Furthermore, this process creates a lot of 
confusion for users ("Yep, I upgraded for Taproot(eg). Wait, you mean I have 
to do it AGAIN?"), and in some scenarios additional code may be needed to 
handle the subsequent upgrade cleanly.

To make matters worse for LOT=False, giving miners a veto also creates an 
incentive to second-guess the decision to activate and/or hold the activation 
hostage. This is a direct result of the bug giving them a power they weren't 
intended to have. Even if we trust miners to act ethically, that does not 
justify sustaining the bug creating both a possibility and incentive to 
behave unethically.

So in all possible scenarios, LOT=False puts users and the network at 
significant risk. In all possible scenarios, LOT=True minimises risk to 
everyone and has no risk to users running LOT=True.

The overall risk is maximally reduced by LOT=True being the only deployed 
parameter, and any introduction of LOT=False only increases risk probability 
and severity.

For all these reasons, I regret adding LOT as an option to BIP 8, and think it 
would be best to remove it entirely, with all deployments in the future 
behaving as LOT=True. I do also recognise that there is not yet consensus on 
this, and for that reason I have not taken action (nor intend to) to remove 
LOT from BIP 8. However, the fact remains that LOT=False should not be used, 
and it is best if every softfork is deployed with LOT=True.

Luke

From jlrubin at mit.edu  Sun Feb 28 19:43:53 2021
From: jlrubin at mit.edu (Jeremy)
Date: Sun, 28 Feb 2021 11:43:53 -0800
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <c6a7a7ab-ee68-6594-ebd0-60f38ba40c37@mattcorallo.com>
References: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>
 <202102281720.07392.luke@dashjr.org>
 <c6a7a7ab-ee68-6594-ebd0-60f38ba40c37@mattcorallo.com>
Message-ID: <CAD5xwhhRCBa86B0ApZ=VioZngREOh1bth4H=zk69k4xsZc9d0Q@mail.gmail.com>

I agree with much of the logic presented by Matt here.

BIP8 was intended to be simpler to agree on to maintain consensus, yet we
find ourselves in a situation where a "tiny" parameter has the potential to
cause great network disruption and confusion (rationality is not too useful
a concept here given differing levels of sophistication and information).
It is therefore much simpler and more likely to be universally understood
by all network participants to just have a flag day. It is easier to
communicate what users should do and when.

This is ultimately not coercive to users because the upgrade for Taproot
itself is provable and analyzable on its own, but activation parameters
based on what % of economically relevant nodes are running an upgrade by a
certain date are not. Selecting these sorts of complicated consensus
parameters may ultimately present more opportunity for a cooptable
consensus process than something more straightforward.


That said, a few points strike me as worth delving into.


1) Con: Mandatory signalling is no different than a flag day. Mandatory
signaling is effectively 2 flag days -- one for the signaling rule, 1 for
the taproot type. The reason for the 2 week gap between flag day for
signaling and flag day for taproot rules is, more or less, so that nodes
who aren't taproot ready at the 1st flag day do not end up SPV mining
(using standardness rules in mempool prevents them from mining an invalid
block on top of a valid tip, but does not ensure the tip is valid).
2) Con: Releasing a flag day without releasing the LOT=true code leading up
to that flag day means that clients would not be fully compatible with an
early activation that could be proposed before the flag day is reached.
E.g., LOT=true is a flag day that retains the possibility of being
compatible with other BIP8 releases without changing software.
3) Pro: BIP-8 is partially in service of "early activation" and . I'm
personally skeptical that early activation is/was ever a good idea. A fixed
activation date may be largely superior for business purposes, software
engineering schedules, etc. I think even with signaling BIP8, it would be
possibly superior to activate rules at a fixed date (or a quantized set of
fixed dates, e.g. guaranteeing at least 3 months but maybe more).
4) Pro: part of the argument for BIP-8=false is that it is possible that
the rule could not activate, if signaling does not occur, providing
additional stopgap against dev collusion and bugs. But BIP-8 can activate
immediately (with start times being proposed 1 month after release?) so we
don't have certainty around how much time there is for that secondary
review process (read -- I think it isn't that valuable) and if there *is* a
deadly bug discovered, we might want to hard-fork to fix it even if it
isn't yet signaled for (e.g., if the rule activates it enables more mining
reward). So I think that it's a healthier mindset to release a with
definite deadline and not rule out having to do a hard fork if there is a
grave issue (we shouldn't ever release a SF if we think this is at all
likely, mind you).
5) Con: It's already taken so long for taproot, the schedule around taproot
was based on the idea it could early activate, 2022 is now too far away. I
don't know how to defray this other than, if your preferred idea is 1 year
flag day, to do that via LOT=true so that taproot can still have early
activation if desired.

Overall I agree with the point that all the contention around LOT, makes a
flag day look not so bad. And something closer to a flag day might not be
so bad either for future forks as well.

However, I think given the appetite for early activation, if a flag day is
desired I think LOT=true is the best option at this time as it allows our
flag day to remain compatible with such an early activation.

I think we can also clearly communicate that LOT=true for Taproot is not a
precedent setting occurence for any future forks (hold me accountable to
not using this as precedent this should I ever advocate for a SF with
similar release parameters).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/5fff5317/attachment-0001.html>

From luke at dashjr.org  Sun Feb 28 19:45:23 2021
From: luke at dashjr.org (Luke Dashjr)
Date: Sun, 28 Feb 2021 19:45:23 +0000
Subject: [bitcoin-dev] Taproot activation meeting 2 - Tuesday 16th
	February 19:00 UTC
In-Reply-To: <20210213163257.uvn4apdy4znr7p2t@ganymede>
References: <CAFvNmHSnd4OM+c0_L8fFXRNrxo23WdQpNdBjTJjhmGuHumgLDA@mail.gmail.com>
 <20210213163257.uvn4apdy4znr7p2t@ganymede>
Message-ID: <202102281945.24039.luke@dashjr.org>

Answering the F1-F7 arguments for LOT=False...

> F1) The probability of Taproot not being activated by miners is small. This
> is not 2017, this is not SegWit, there is no need to worry.

While we believe miners have no reason to sabotage Taproot activation, this 
was also the belief leading up to Segwit?s activation in 2017, and regardless 
it is not desirable to create such a risk forcing the community to place 
extra trust in miners. Miners might very well not exploit an inflation bug, 
but that is no reason to purposefully add an inflation bug.

> F2) The worst case scenario is we have to wait over a year for Taproot to
> be activated. Even the worst case scenario is not a disaster.

While it is true that a second activation can be deployed in the event of the 
first one failing, doing so would not necessarily change the situation unless 
LOT were changed to true anyway - in which case, it might as well be true for 
the initial deployment as well. Furthermore, a re-deployment could create a 
situation where users believe they have already upgraded for Taproot, but do 
not enforce it due to not understanding the need to upgrade yet again.

> F3) If in the unlikely scenario miners did not activate Taproot for a year
> for no apparent reason we would never set LOT to false again for any
> potential future soft fork. If miners fail to activate Taproot despite
> pledging support and there being overwhelming community consensus for it,
> it would set a precedent that miners cannot be relied upon *at all* to
> activate soft forks.

Setting LOT=false with a threat to change it to true later is antagonistic 
against miners. With LOT=true, expectations are simply made clear and miners 
can simply cooperate by making valid blocks as they do day-to-day already.

> F4) If in the highly unlikely scenario that a bug or some problem with the
> Taproot implementation was found during the signaling period miners could
> choose not to activate it which is cleaner than needing an emergency Core
> release.

The risk that a bug in Taproot is discovered this late yet before activation, 
to warrant aborting the deployment, is extremely low (much lower than the 
risks created by LOT=false). Even if such a scenario occurred, and even with 
LOT=false, users would still need to upgrade to back out the deployment. In 
the best-case scenario, users would need to upgrade to deploy the fixed 
Taproot. So in the end, nothing is to be gained from relying on a miner abort 
for such scenarios.

> F5) LOT = false is more similar to what was done previously (unless you go
> way back to the earliest soft forks which were more similar to LOT = true)

The behaviour of LOT=false has proven problematic and caused failure of Segwit 
activation in 2017. LOT=true behaviour has a long history of success, and was 
used to resolve and activate Segwit in 2017 after LOT=false?s failure.

> F6) It is more important that no rules that harm users are deployed than it
> is that new useful rules are deployed quickly. If there is a choice between
> ?faster? and ?more clear that this isn?t a mechanism to force bad things on
> users? we should prefer the latter. Plenty of people just don?t like
> LOT=true very much absent evidence that miners are blocking deployment. To
> some it just feels needlessly antagonistic and distrusting towards part of
> our community.

Any deployment, or even status quo, can be falsely portrayed/spun in a way to 
harm Bitcoin. As such, only objective criteria should be considered.

BIP 8 makes it explicitly easy for people to reject the softfork if they don't 
like it, so any claim of being "forced" is a non-starter to an honest person.

> F7) defaulting to LOT=false makes non-activation possible even if people
>     run the code that developers provide, meaning a successful
>     activation proves that at least some people (e.g. miners or UASFers)
>     voluntarily took actions that were well outside the scope of
>     developer control.
>
>     This makes it clear that developers don't control changes to the
>     system.  There are other arguments that demonstrate that developers
>     aren't in control[1], but they aren't as clear as simply pointing
>     out that a rule change won't go into effect until at least several
>     non-developers independently act of their own accord.
>
>     Having such a clear argument that developers aren't in control
>     bolsters the decentralized ethos of Bitcoin and reduces the chance
>     that bad actors will pressure Bitcoin developers to attempt future
>     unwanted changes.

Even if developers release software, it must still be accepted by the 
community in the form of actively choosing to run the software which includes 
the activation. So long as the activation is clearly and prominently 
documented, users have taken the action to accept the protocol change. 
Furthermore, the community has already demonstrated a clear and undisputed 
support for the activation of Taproot. If there was/is any question of 
whether that is true or not, it is premature to be planning activation of ANY 
type.

Luke

From lf-lists at mattcorallo.com  Sun Feb 28 19:51:55 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Sun, 28 Feb 2021 14:51:55 -0500
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <CAD5xwhhRCBa86B0ApZ=VioZngREOh1bth4H=zk69k4xsZc9d0Q@mail.gmail.com>
References: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>
 <202102281720.07392.luke@dashjr.org>
 <c6a7a7ab-ee68-6594-ebd0-60f38ba40c37@mattcorallo.com>
 <CAD5xwhhRCBa86B0ApZ=VioZngREOh1bth4H=zk69k4xsZc9d0Q@mail.gmail.com>
Message-ID: <20c5eb39-915d-6af9-5b0a-f488ff40ef3f@mattcorallo.com>

Note further that mandatory signaling isn't "just" a flag day - unlike a Taproot flag day (where miners running Bitcoin 
Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3) from 
my original post - it results in any miner who has not taken active action (and ensured every part of their often-large 
infrastructure has been correctly reconfigured) generating invalid blocks.

As for "Taproot" took too long, hey, at least if its locked in people can just build things assuming it exists. Some 
already are, but once its clearly locked in, there's no reason to not continue other work at the same time.

Matt

On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:
> I agree with much of the logic presented by Matt here.
> 
> BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a "tiny" 
> parameter has the potential to cause great network disruption and confusion (rationality is not too useful a concept 
> here given differing levels of sophistication and information). It is therefore much simpler and more likely to be 
> universally understood by all network participants to just have a flag day. It is easier to communicate what users 
> should do and when.
> 
> This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on its own, 
> but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain date are 
> not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a cooptable 
> consensus process than something more straightforward.
> 
> 
> That said, a few points strike me as worth delving into.
> 
> 
> 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days -- one for 
> the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and flag day 
> for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV mining 
> (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not 
> ensure the tip is valid).
> 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients would 
> not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g., LOT=true 
> is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.
> 3) Pro: BIP-8 is partially in service of "early activation" and . I'm personally skeptical that early activation is/was 
> ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering schedules, 
> etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a quantized 
> set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).
> 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if signaling does 
> not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with start 
> times being proposed 1 month after release?) so we don't have certainty around how much time there is for that secondary 
> review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to 
> hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining reward). So I 
> think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard fork if 
> there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).
> 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early 
> activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year flag 
> day, to do that via LOT=true so that taproot can still have early activation if desired.
> 
> Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something 
> closer to a flag day might not be so bad either for future forks as well.
> 
> However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best option 
> at this time as it allows our flag day to remain compatible with such an early activation.
> 
> I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any future 
> forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release 
> parameters).
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From jlrubin at mit.edu  Sun Feb 28 20:02:15 2021
From: jlrubin at mit.edu (Jeremy)
Date: Sun, 28 Feb 2021 12:02:15 -0800
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <20c5eb39-915d-6af9-5b0a-f488ff40ef3f@mattcorallo.com>
References: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>
 <202102281720.07392.luke@dashjr.org>
 <c6a7a7ab-ee68-6594-ebd0-60f38ba40c37@mattcorallo.com>
 <CAD5xwhhRCBa86B0ApZ=VioZngREOh1bth4H=zk69k4xsZc9d0Q@mail.gmail.com>
 <20c5eb39-915d-6af9-5b0a-f488ff40ef3f@mattcorallo.com>
Message-ID: <CAD5xwhh89-5WRdnhA0X0CueWe6s2HneeEFiW5nZs4KFQw4iG6Q@mail.gmail.com>

Miners still can generate invalid blocks as a result of SPV mining, and it
could be profitable to do "bad block enhanced selfish mining" to take
advantage of it.


Hard to analyze exactly what that looks like, but...

E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate
to mine bad blocks would mean 1/4th of the time you could make 20% of the
hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One
could analyze out that the lost hash rate for bad blocks only matters for
the first difficulty adjustment period you're doing this for too, as the
hashrate drop will be accounted for -- but then a miner can switch back to
mining valid chain, giving themselves a larger % of hashrate.

So it is still possible that an un-upgraded miner will fail part 3, and
attempting to accommodate un-upgraded miners leads to some nasty
oscillating hashrate being optimal.


--
@JeremyRubin <https://twitter.com/JeremyRubin>
<https://twitter.com/JeremyRubin>


On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com>
wrote:

> Note further that mandatory signaling isn't "just" a flag day - unlike a
> Taproot flag day (where miners running Bitcoin
> Core unmodified today will not generate invalid blocks), a mandatory
> signaling flag day blatantly ignores goal (3) from
> my original post - it results in any miner who has not taken active action
> (and ensured every part of their often-large
> infrastructure has been correctly reconfigured) generating invalid blocks.
>
> As for "Taproot" took too long, hey, at least if its locked in people can
> just build things assuming it exists. Some
> already are, but once its clearly locked in, there's no reason to not
> continue other work at the same time.
>
> Matt
>
> On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:
> > I agree with much of the logic presented by Matt here.
> >
> > BIP8 was intended to be simpler to agree on to maintain consensus, yet
> we find ourselves in a situation where a "tiny"
> > parameter has the potential to cause great network disruption and
> confusion (rationality is not too useful a concept
> > here given differing levels of sophistication and information). It is
> therefore much simpler and more likely to be
> > universally understood by all network participants to just have a flag
> day. It is easier to communicate what users
> > should do and when.
> >
> > This is ultimately not coercive to users because the upgrade for Taproot
> itself is provable and analyzable on its own,
> > but activation parameters based on what % of economically relevant nodes
> are running an upgrade by a certain date are
> > not. Selecting these sorts of complicated consensus parameters may
> ultimately present more opportunity for a cooptable
> > consensus process than something more straightforward.
> >
> >
> > That said, a few points strike me as worth delving into.
> >
> >
> > 1) Con: Mandatory signalling is no different than a flag day. Mandatory
> signaling is effectively 2 flag days -- one for
> > the signaling rule, 1 for the taproot type. The reason for the 2 week
> gap between flag day for signaling and flag day
> > for taproot rules is, more or less, so that nodes who aren't taproot
> ready at the 1st flag day do not end up SPV mining
> > (using standardness rules in mempool prevents them from mining an
> invalid block on top of a valid tip, but does not
> > ensure the tip is valid).
> > 2) Con: Releasing a flag day without releasing the LOT=true code leading
> up to that flag day means that clients would
> > not be fully compatible with an early activation that could be proposed
> before the flag day is reached. E.g., LOT=true
> > is a flag day that retains the possibility of being compatible with
> other BIP8 releases without changing software.
> > 3) Pro: BIP-8 is partially in service of "early activation" and . I'm
> personally skeptical that early activation is/was
> > ever a good idea. A fixed activation date may be largely superior for
> business purposes, software engineering schedules,
> > etc. I think even with signaling BIP8, it would be possibly superior to
> activate rules at a fixed date (or a quantized
> > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).
> > 4) Pro: part of the argument for BIP-8=false is that it is possible that
> the rule could not activate, if signaling does
> > not occur, providing additional stopgap against dev collusion and bugs.
> But BIP-8 can activate immediately (with start
> > times being proposed 1 month after release?) so we don't have certainty
> around how much time there is for that secondary
> > review process (read -- I think it isn't that valuable) and if there
> *is* a deadly bug discovered, we might want to
> > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule
> activates it enables more mining reward). So I
> > think that it's a healthier mindset to release a with definite deadline
> and not rule out having to do a hard fork if
> > there is a grave issue (we shouldn't ever release a SF if we think this
> is at all likely, mind you).
> > 5) Con: It's already taken so long for taproot, the schedule around
> taproot was based on the idea it could early
> > activate, 2022 is now too far away. I don't know how to defray this
> other than, if your preferred idea is 1 year flag
> > day, to do that via LOT=true so that taproot can still have early
> activation if desired.
> >
> > Overall I agree with the point that all the contention around LOT, makes
> a flag day look not so bad. And something
> > closer to a flag day might not be so bad either for future forks as well.
> >
> > However, I think given the appetite for early activation, if a flag day
> is desired I think LOT=true is the best option
> > at this time as it allows our flag day to remain compatible with such an
> early activation.
> >
> > I think we can also clearly communicate that LOT=true for Taproot is not
> a precedent setting occurence for any future
> > forks (hold me accountable to not using this as precedent this should I
> ever advocate for a SF with similar release
> > parameters).
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/df85cf85/attachment-0001.html>

From lf-lists at mattcorallo.com  Sun Feb 28 20:20:56 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Sun, 28 Feb 2021 15:20:56 -0500
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <CAD5xwhh89-5WRdnhA0X0CueWe6s2HneeEFiW5nZs4KFQw4iG6Q@mail.gmail.com>
References: <c35e1761-43ca-e157-6a5c-72d27f2c6c6e@mattcorallo.com>
 <202102281720.07392.luke@dashjr.org>
 <c6a7a7ab-ee68-6594-ebd0-60f38ba40c37@mattcorallo.com>
 <CAD5xwhhRCBa86B0ApZ=VioZngREOh1bth4H=zk69k4xsZc9d0Q@mail.gmail.com>
 <20c5eb39-915d-6af9-5b0a-f488ff40ef3f@mattcorallo.com>
 <CAD5xwhh89-5WRdnhA0X0CueWe6s2HneeEFiW5nZs4KFQw4iG6Q@mail.gmail.com>
Message-ID: <11b00a3a-91ff-54dd-6a48-b6f860dccfb6@mattcorallo.com>

SPV mining has been curtailed somewhat to only apply for a brief period of time (based on public statements) since the 
last time SPV mining caused a fork. Indeed, if you can make other miners mine on top of an invalid block, you can make 
money by reducing the difficulty, but that is true as much today as during a fork. Still, I think you've made my point - 
someone has to take an active, malicious action in order to mine a bad block, vs with forced signaling, someone only 
needs to forget to reconfigure one out of one hundred pool servers they operate.

Matt

On 2/28/21 15:02, Jeremy wrote:
> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do "bad block enhanced 
> selfish mining" to take advantage of it.
> 
> 
> Hard to analyze exactly what that looks like, but...
> 
> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the 
> time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze 
> out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this for 
> too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving 
> themselves a larger % of hashrate.
> 
> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners 
> leads to some nasty oscillating hashrate being optimal.
> 
> 
> --
> @JeremyRubin <https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>
> 
> 
> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:
> 
>     Note further that mandatory signaling isn't "just" a flag day - unlike a Taproot flag day (where miners running Bitcoin
>     Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3) from
>     my original post - it results in any miner who has not taken active action (and ensured every part of their often-large
>     infrastructure has been correctly reconfigured) generating invalid blocks.
> 
>     As for "Taproot" took too long, hey, at least if its locked in people can just build things assuming it exists. Some
>     already are, but once its clearly locked in, there's no reason to not continue other work at the same time.
> 
>     Matt
> 
>     On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:
>      > I agree with much of the logic presented by Matt here.
>      >
>      > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a
>     "tiny"
>      > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a concept
>      > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be
>      > universally understood by all network participants to just have a flag day. It is easier to communicate what users
>      > should do and when.
>      >
>      > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on its
>     own,
>      > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain date
>     are
>      > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a
>     cooptable
>      > consensus process than something more straightforward.
>      >
>      >
>      > That said, a few points strike me as worth delving into.
>      >
>      >
>      > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days --
>     one for
>      > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and flag
>     day
>      > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV
>     mining
>      > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not
>      > ensure the tip is valid).
>      > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients
>     would
>      > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g.,
>     LOT=true
>      > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.
>      > 3) Pro: BIP-8 is partially in service of "early activation" and . I'm personally skeptical that early activation
>     is/was
>      > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering
>     schedules,
>      > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a
>     quantized
>      > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).
>      > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if
>     signaling does
>      > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with
>     start
>      > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that
>     secondary
>      > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to
>      > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining
>     reward). So I
>      > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard fork if
>      > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).
>      > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early
>      > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year
>     flag
>      > day, to do that via LOT=true so that taproot can still have early activation if desired.
>      >
>      > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something
>      > closer to a flag day might not be so bad either for future forks as well.
>      >
>      > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best
>     option
>      > at this time as it allows our flag day to remain compatible with such an early activation.
>      >
>      > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any
>     future
>      > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release
>      > parameters).
>      >
>      >
>      > _______________________________________________
>      > bitcoin-dev mailing list
>      > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>      > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>      >
> 

From lf-lists at mattcorallo.com  Sun Feb 28 20:25:15 2021
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Sun, 28 Feb 2021 15:25:15 -0500
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <E083AFEC-DE1B-4ECC-BCDD-EA248E8E76DD@voskuil.org>
References: <CAD5xwhh89-5WRdnhA0X0CueWe6s2HneeEFiW5nZs4KFQw4iG6Q@mail.gmail.com>
 <E083AFEC-DE1B-4ECC-BCDD-EA248E8E76DD@voskuil.org>
Message-ID: <0adb87b0-0e05-2ccc-77e1-1de689b45739@mattcorallo.com>

Glad you asked! Yes, your goal here is #4 on the list of goals I laid out at [1], which I referenced and specifically 
addressed each of in the OP of this thread.

[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-January/017547.html

On 2/28/21 15:19, Eric Voskuil wrote:
> In the attempt to change consensus rules there is a simple set of choices:
> 
> 1) hard fork: creates a chain split
> 2) soft fork: creates a chain split
> 3) 51% attack: does not create a chain split
> 
> The presumption being that one can never assume 100% explicit adoption of any rule change.
> 
> A 51% attack can of course fail. It is also possible that signaling can be untruthful. But miner signaling provides some 
> level of assurance that it will be successful. This level of assurance is increased by adoption of a higher than 
> majority threshold, as has been done in the past.
> 
> Most of the discussion I?ve seen has been focused on who is in charge. Bitcoin requires no identity; anyone can mine 
> and/or accept bitcoin - nobody is in charge.
> 
> The majority of those who mine can choose to enforce censorship any time they want. They don?t need anyone?s permission. 
> No power is given to them by developers or anyone else. They have that power based on their own capital invested.
> 
> Similarly, the economy (those who accept bitcoin) can enforce any rule change it wants to. And it can do so at any level 
> of participation that wants to go along. Anyone can do this, it requires nobody?s permission. Furthermore, it is 
> possible for the economy to signal its level of agreement in every transaction, as miners have done in blocks previously.
> 
> But if the objective is to produce a rule change while avoiding a chain split, 50% is a much lower bar than 100%. If 
> there is some other objective, it?s not clear to me what it is.
> 
> e
> 
>> On Feb 28, 2021, at 12:02, Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> ?
>> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do "bad block 
>> enhanced selfish mining" to take advantage of it.
>>
>>
>> Hard to analyze exactly what that looks like, but...
>>
>> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the 
>> time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze 
>> out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this 
>> for too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving 
>> themselves a larger % of hashrate.
>>
>> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners 
>> leads to some nasty oscillating hashrate being optimal.
>>
>>
>> --
>> @JeremyRubin <https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>
>>
>>
>> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:
>>
>>     Note further that mandatory signaling isn't "just" a flag day - unlike a Taproot flag day (where miners running
>>     Bitcoin
>>     Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3)
>>     from
>>     my original post - it results in any miner who has not taken active action (and ensured every part of their
>>     often-large
>>     infrastructure has been correctly reconfigured) generating invalid blocks.
>>
>>     As for "Taproot" took too long, hey, at least if its locked in people can just build things assuming it exists. Some
>>     already are, but once its clearly locked in, there's no reason to not continue other work at the same time.
>>
>>     Matt
>>
>>     On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:
>>     > I agree with much of the logic presented by Matt here.
>>     >
>>     > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a
>>     "tiny"
>>     > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a
>>     concept
>>     > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be
>>     > universally understood by all network participants to just have a flag day. It is easier to communicate what users
>>     > should do and when.
>>     >
>>     > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on
>>     its own,
>>     > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain
>>     date are
>>     > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a
>>     cooptable
>>     > consensus process than something more straightforward.
>>     >
>>     >
>>     > That said, a few points strike me as worth delving into.
>>     >
>>     >
>>     > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days --
>>     one for
>>     > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and
>>     flag day
>>     > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV
>>     mining
>>     > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not
>>     > ensure the tip is valid).
>>     > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients
>>     would
>>     > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g.,
>>     LOT=true
>>     > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.
>>     > 3) Pro: BIP-8 is partially in service of "early activation" and . I'm personally skeptical that early activation
>>     is/was
>>     > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering
>>     schedules,
>>     > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a
>>     quantized
>>     > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).
>>     > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if
>>     signaling does
>>     > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with
>>     start
>>     > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that
>>     secondary
>>     > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to
>>     > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining
>>     reward). So I
>>     > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard
>>     fork if
>>     > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).
>>     > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early
>>     > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year
>>     flag
>>     > day, to do that via LOT=true so that taproot can still have early activation if desired.
>>     >
>>     > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something
>>     > closer to a flag day might not be so bad either for future forks as well.
>>     >
>>     > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best
>>     option
>>     > at this time as it allows our flag day to remain compatible with such an early activation.
>>     >
>>     > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any
>>     future
>>     > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release
>>     > parameters).
>>     >
>>     >
>>     > _______________________________________________
>>     > bitcoin-dev mailing list
>>     > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>>     >
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From eric at voskuil.org  Sun Feb 28 20:19:59 2021
From: eric at voskuil.org (Eric Voskuil)
Date: Sun, 28 Feb 2021 12:19:59 -0800
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <CAD5xwhh89-5WRdnhA0X0CueWe6s2HneeEFiW5nZs4KFQw4iG6Q@mail.gmail.com>
References: <CAD5xwhh89-5WRdnhA0X0CueWe6s2HneeEFiW5nZs4KFQw4iG6Q@mail.gmail.com>
Message-ID: <E083AFEC-DE1B-4ECC-BCDD-EA248E8E76DD@voskuil.org>

In the attempt to change consensus rules there is a simple set of choices:

1) hard fork: creates a chain split
2) soft fork: creates a chain split
3) 51% attack: does not create a chain split

The presumption being that one can never assume 100% explicit adoption of any rule change.

A 51% attack can of course fail. It is also possible that signaling can be untruthful. But miner signaling provides some level of assurance that it will be successful. This level of assurance is increased by adoption of a higher than majority threshold, as has been done in the past.

Most of the discussion I?ve seen has been focused on who is in charge. Bitcoin requires no identity; anyone can mine and/or accept bitcoin - nobody is in charge.

The majority of those who mine can choose to enforce censorship any time they want. They don?t need anyone?s permission. No power is given to them by developers or anyone else. They have that power based on their own capital invested.

Similarly, the economy (those who accept bitcoin) can enforce any rule change it wants to. And it can do so at any level of participation that wants to go along. Anyone can do this, it requires nobody?s permission. Furthermore, it is possible for the economy to signal its level of agreement in every transaction, as miners have done in blocks previously.

But if the objective is to produce a rule change while avoiding a chain split, 50% is a much lower bar than 100%. If there is some other objective, it?s not clear to me what it is.

e

> On Feb 28, 2021, at 12:02, Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> ?
> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do "bad block enhanced selfish mining" to take advantage of it.
> 
> 
> Hard to analyze exactly what that looks like, but...
> 
> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this for too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving themselves a larger % of hashrate.
> 
> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners leads to some nasty oscillating hashrate being optimal.
> 
> 
> --
> @JeremyRubin
> 
> 
>> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com> wrote:
>> Note further that mandatory signaling isn't "just" a flag day - unlike a Taproot flag day (where miners running Bitcoin 
>> Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3) from 
>> my original post - it results in any miner who has not taken active action (and ensured every part of their often-large 
>> infrastructure has been correctly reconfigured) generating invalid blocks.
>> 
>> As for "Taproot" took too long, hey, at least if its locked in people can just build things assuming it exists. Some 
>> already are, but once its clearly locked in, there's no reason to not continue other work at the same time.
>> 
>> Matt
>> 
>> On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:
>> > I agree with much of the logic presented by Matt here.
>> > 
>> > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a "tiny" 
>> > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a concept 
>> > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be 
>> > universally understood by all network participants to just have a flag day. It is easier to communicate what users 
>> > should do and when.
>> > 
>> > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on its own, 
>> > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain date are 
>> > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a cooptable 
>> > consensus process than something more straightforward.
>> > 
>> > 
>> > That said, a few points strike me as worth delving into.
>> > 
>> > 
>> > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days -- one for 
>> > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and flag day 
>> > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV mining 
>> > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not 
>> > ensure the tip is valid).
>> > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients would 
>> > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g., LOT=true 
>> > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.
>> > 3) Pro: BIP-8 is partially in service of "early activation" and . I'm personally skeptical that early activation is/was 
>> > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering schedules, 
>> > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a quantized 
>> > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).
>> > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if signaling does 
>> > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with start 
>> > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that secondary 
>> > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to 
>> > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining reward). So I 
>> > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard fork if 
>> > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).
>> > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early 
>> > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year flag 
>> > day, to do that via LOT=true so that taproot can still have early activation if desired.
>> > 
>> > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something 
>> > closer to a flag day might not be so bad either for future forks as well.
>> > 
>> > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best option 
>> > at this time as it allows our flag day to remain compatible with such an early activation.
>> > 
>> > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any future 
>> > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release 
>> > parameters).
>> > 
>> > 
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> > 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210228/7aaf54ca/attachment-0001.html>

From eric at voskuil.org  Sun Feb 28 20:38:13 2021
From: eric at voskuil.org (Eric Voskuil)
Date: Sun, 28 Feb 2021 12:38:13 -0800
Subject: [bitcoin-dev] Straight Flag Day (Height) Taproot Activation
In-Reply-To: <0adb87b0-0e05-2ccc-77e1-1de689b45739@mattcorallo.com>
References: <0adb87b0-0e05-2ccc-77e1-1de689b45739@mattcorallo.com>
Message-ID: <DB47E953-AAEF-4550-B60E-8530F3477A39@voskuil.org>

I think it has been shown that an understanding of reasonableness is not universal, making any assertion about it as a collective goal kind of self-defeating. The question is what is achievable, not what is reasonable. I?m not making any value judgements here. Simply pointing out that anything other than a successful 51% attack will create a split.

e

> On Feb 28, 2021, at 12:25, Matt Corallo <lf-lists at mattcorallo.com> wrote:
> 
> ?Glad you asked! Yes, your goal here is #4 on the list of goals I laid out at [1], which I referenced and specifically addressed each of in the OP of this thread.
> 
> [1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-January/017547.html
> 
>> On 2/28/21 15:19, Eric Voskuil wrote:
>> In the attempt to change consensus rules there is a simple set of choices:
>> 1) hard fork: creates a chain split
>> 2) soft fork: creates a chain split
>> 3) 51% attack: does not create a chain split
>> The presumption being that one can never assume 100% explicit adoption of any rule change.
>> A 51% attack can of course fail. It is also possible that signaling can be untruthful. But miner signaling provides some level of assurance that it will be successful. This level of assurance is increased by adoption of a higher than majority threshold, as has been done in the past.
>> Most of the discussion I?ve seen has been focused on who is in charge. Bitcoin requires no identity; anyone can mine and/or accept bitcoin - nobody is in charge.
>> The majority of those who mine can choose to enforce censorship any time they want. They don?t need anyone?s permission. No power is given to them by developers or anyone else. They have that power based on their own capital invested.
>> Similarly, the economy (those who accept bitcoin) can enforce any rule change it wants to. And it can do so at any level of participation that wants to go along. Anyone can do this, it requires nobody?s permission. Furthermore, it is possible for the economy to signal its level of agreement in every transaction, as miners have done in blocks previously.
>> But if the objective is to produce a rule change while avoiding a chain split, 50% is a much lower bar than 100%. If there is some other objective, it?s not clear to me what it is.
>> e
>>>> On Feb 28, 2021, at 12:02, Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> 
>>> ?
>>> Miners still can generate invalid blocks as a result of SPV mining, and it could be profitable to do "bad block enhanced selfish mining" to take advantage of it.
>>> 
>>> 
>>> Hard to analyze exactly what that looks like, but...
>>> 
>>> E.g., suppose 20% is un-upgraded and 80% is upgraded. Taking 25% hashrate to mine bad blocks would mean 1/4th of the time you could make 20% of the hashrate mine bad blocks, overall a > 5% (series expansion) benefit. One could analyze out that the lost hash rate for bad blocks only matters for the first difficulty adjustment period you're doing this for too, as the hashrate drop will be accounted for -- but then a miner can switch back to mining valid chain, giving themselves a larger % of hashrate.
>>> 
>>> So it is still possible that an un-upgraded miner will fail part 3, and attempting to accommodate un-upgraded miners leads to some nasty oscillating hashrate being optimal.
>>> 
>>> 
>>> --
>>> @JeremyRubin <https://twitter.com/JeremyRubin><https://twitter.com/JeremyRubin>
>>> 
>>> 
>>>> On Sun, Feb 28, 2021 at 11:52 AM Matt Corallo <lf-lists at mattcorallo.com <mailto:lf-lists at mattcorallo.com>> wrote:
>>> 
>>>    Note further that mandatory signaling isn't "just" a flag day - unlike a Taproot flag day (where miners running
>>>    Bitcoin
>>>    Core unmodified today will not generate invalid blocks), a mandatory signaling flag day blatantly ignores goal (3)
>>>    from
>>>    my original post - it results in any miner who has not taken active action (and ensured every part of their
>>>    often-large
>>>    infrastructure has been correctly reconfigured) generating invalid blocks.
>>> 
>>>    As for "Taproot" took too long, hey, at least if its locked in people can just build things assuming it exists. Some
>>>    already are, but once its clearly locked in, there's no reason to not continue other work at the same time.
>>> 
>>>    Matt
>>> 
>>>>    On 2/28/21 14:43, Jeremy via bitcoin-dev wrote:
>>>    > I agree with much of the logic presented by Matt here.
>>>    >
>>>    > BIP8 was intended to be simpler to agree on to maintain consensus, yet we find ourselves in a situation where a
>>>    "tiny"
>>>    > parameter has the potential to cause great network disruption and confusion (rationality is not too useful a
>>>    concept
>>>    > here given differing levels of sophistication and information). It is therefore much simpler and more likely to be
>>>    > universally understood by all network participants to just have a flag day. It is easier to communicate what users
>>>    > should do and when.
>>>    >
>>>    > This is ultimately not coercive to users because the upgrade for Taproot itself is provable and analyzable on
>>>    its own,
>>>    > but activation parameters based on what % of economically relevant nodes are running an upgrade by a certain
>>>    date are
>>>    > not. Selecting these sorts of complicated consensus parameters may ultimately present more opportunity for a
>>>    cooptable
>>>    > consensus process than something more straightforward.
>>>    >
>>>    >
>>>    > That said, a few points strike me as worth delving into.
>>>    >
>>>    >
>>>    > 1) Con: Mandatory signalling is no different than a flag day. Mandatory signaling is effectively 2 flag days --
>>>    one for
>>>    > the signaling rule, 1 for the taproot type. The reason for the 2 week gap between flag day for signaling and
>>>    flag day
>>>    > for taproot rules is, more or less, so that nodes who aren't taproot ready at the 1st flag day do not end up SPV
>>>    mining
>>>    > (using standardness rules in mempool prevents them from mining an invalid block on top of a valid tip, but does not
>>>    > ensure the tip is valid).
>>>    > 2) Con: Releasing a flag day without releasing the LOT=true code leading up to that flag day means that clients
>>>    would
>>>    > not be fully compatible with an early activation that could be proposed before the flag day is reached. E.g.,
>>>    LOT=true
>>>    > is a flag day that retains the possibility of being compatible with other BIP8 releases without changing software.
>>>    > 3) Pro: BIP-8 is partially in service of "early activation" and . I'm personally skeptical that early activation
>>>    is/was
>>>    > ever a good idea. A fixed activation date may be largely superior for business purposes, software engineering
>>>    schedules,
>>>    > etc. I think even with signaling BIP8, it would be possibly superior to activate rules at a fixed date (or a
>>>    quantized
>>>    > set of fixed dates, e.g. guaranteeing at least 3 months but maybe more).
>>>    > 4) Pro: part of the argument for BIP-8=false is that it is possible that the rule could not activate, if
>>>    signaling does
>>>    > not occur, providing additional stopgap against dev collusion and bugs. But BIP-8 can activate immediately (with
>>>    start
>>>    > times being proposed 1 month after release?) so we don't have certainty around how much time there is for that
>>>    secondary
>>>    > review process (read -- I think it isn't that valuable) and if there *is* a deadly bug discovered, we might want to
>>>    > hard-fork to fix it even if it isn't yet signaled for (e.g., if the rule activates it enables more mining
>>>    reward). So I
>>>    > think that it's a healthier mindset to release a with definite deadline and not rule out having to do a hard
>>>    fork if
>>>    > there is a grave issue (we shouldn't ever release a SF if we think this is at all likely, mind you).
>>>    > 5) Con: It's already taken so long for taproot, the schedule around taproot was based on the idea it could early
>>>    > activate, 2022 is now too far away. I don't know how to defray this other than, if your preferred idea is 1 year
>>>    flag
>>>    > day, to do that via LOT=true so that taproot can still have early activation if desired.
>>>    >
>>>    > Overall I agree with the point that all the contention around LOT, makes a flag day look not so bad. And something
>>>    > closer to a flag day might not be so bad either for future forks as well.
>>>    >
>>>    > However, I think given the appetite for early activation, if a flag day is desired I think LOT=true is the best
>>>    option
>>>    > at this time as it allows our flag day to remain compatible with such an early activation.
>>>    >
>>>    > I think we can also clearly communicate that LOT=true for Taproot is not a precedent setting occurence for any
>>>    future
>>>    > forks (hold me accountable to not using this as precedent this should I ever advocate for a SF with similar release
>>>    > parameters).
>>>    >
>>>    >
>>>    > _______________________________________________
>>>    > bitcoin-dev mailing list
>>>    > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>
>>>    > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>    <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>
>>>    >
>>> 
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From efaula.prafbodous at ctemplar.com  Sun Feb 28 16:26:18 2021
From: efaula.prafbodous at ctemplar.com (Efaula Prafbodous)
Date: Sun, 28 Feb 2021 16:26:18 -0000
Subject: [bitcoin-dev] Proposal: Scheduled Activation with Potential
	Miner-Signaled Delay
Message-ID: <467af32d3c6e4758a8d6ffcd9cc60140-efaula.prafbodous@ctemplar.com>

Hello Bitcoin Protocol Discussion Mailing List,

The binary presented by "Lock on Timeout" or LOT; is inherently divisive.  Hence, after taking some time to meditate; please consider the following as an overview, and a possible solution:

---

The lingering bad-taste from the drama surrounding the activation of SegWit (Using, BIP9, BIP91, and BIP148) lead to the development of the very reasonable activation protocol: BIP8.

The BIP8 protocol includes an optional feature, called "Lock on Timeout", that is essentially a technically improved version of the flag-day activation proposed in BIP148.

Many in the Bitcoin Community find the use of blind flag-day activations needlessly divisive and dangerous. In particular:

# A flag-day activation imposes itself on the network, without consideration of the deployment concerns that the miners may have when implementing the network upgrade on their unique infrastructure; and risks decreasing the good-will between users and miners.

# A flag-day activation proceeds, even if, before activation, a critical bug in the design is found in the process of doing the miner software upgrades. There is no back-out path for the community and miners alike.

# A flag-day activation can have wide-reaching damaging effects if activated with only a small amount of the miners in active support.

Others in the Bitcoin Community, however do not find these concerns weighty enough to override the certainty and reliability that a flag-day activation provides. Hence, this binary-option of using a flag-day activation, or not, is always going to be divisive for the community.

---

The activation procedure for new consensus rules should be empowering for both the users and the miners alike. It should respect the reality that the proposed network upgrade (Taproot: BIP340, 341, and 342) has already completed its consensus building process within the Bitcoin Community.

This proposal decides against using a blind flag-day activation; instead it uses a more nuanced approach. It allows a majority of the miners to block deployment (if they maintain consensus to postpone the deployment for at least half of the activation period) and it also allows a minority of the miners to temporarily delay the deployment.

Signaling "readiness" for a consensus change has been confused with implying political support of this change. This proposal addresses this confusion by inverting the meaning of the "Version Bit". Now miners will signal they are "not-ready", instead of the previously used behavior of signaling when they are "ready".

After a lengthy pre-starting period of 6 months, an upgrade may be further delayed, or be postponed by miners signaling. In the default case, where the vast majority of the miners have successfully upgraded within the pre-starting period, the first 2016 block period will lock-in the upgrade without any delay or postponement.

This is far more accurately resolving the primary worry of both the Bitcoin users and Bitcoin miners, that is to allow an upgrade to proceed too-quickly while some lag behind with difficulties. Miners who are having difficulties can explicitly notify the community through signaling their lack of readiness, and thus triggering a delay, or entirely postponing the deployment.

---

Please find following a rough, and incomplete, draft of the proposal written in BIP form. If the community finds this approach conceptually sound, this BIP will be completed to a high-standard and hopefully be considered to be used for the activation of Taproot.


Lovely Regards,
Efaula.



  BIP: scheduled-activation-delay
  Title: Scheduled Activation with Potential Miner-Signaled Delay
  Author: Efaula Prafbodous
  Created: 2021-02-26
  License: BSD-3-Clause
           CC0-1.0

==Abstract==

This document specifies an alternative to [[bip-0008.mediawiki|BIP8]], where the signalling intention is inverted, and the activation may be delayed a limited number of times, or postponed (and ultimately fail deployment).

Unlike previous proposals, where miners signaled that they are '''ready''' for the consensus change.  This proposal has miners signal that they are '''not-ready''', and proceeds with the upgrade in the default case.

The core assumption within this proposal is that it is far easier and faster for a miner to adjust the signaling within the blocks they produce, than to certify and validate new software that enforces advanced new consensus rules.  Hence, miners will quickly signal they are '''not-ready''', and once upgraded; they will remove this signal; allowing the upgrade to proceed.

The authors of this proposal suggest this is more appropriate, as it directly focuses on the core issue: allowing miners to delay the activation of new consensus rules until they have solved their technological and validation issues.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.

==Motivation==

Flag-day activations are the simplest way to introduce consensus changes to the Bitcoin Network. However, without overwhelming miner support, a flag-day activation can cause a damaging chain split to occur.

Since [[bip-0016.mediawiki|BIP16]], the Bitcoin Community has used miner-signaling (where miners place a specific flag in the blocks they produce) to trigger the activation of a consensus change. This has worked to assure that the network remains in good consensus throughout the activation period. However, in the case of [[bip-0141.mediawiki|BIP141]], this activation process of signaling '''readiness''' resulted in confusion between signaling readiness of the miner software; and signaling political support of the consensus change.

This lead to much drama; and a strong movement within the users to move back to using flag-day style activations.

In this proposal we address this issue by requiring miners to explicitly signal that they are '''not-ready''' for the proposed network upgrade. This removes a great amount of the political confusion, as the default behavior is now ambiguous:

# A miner chooses to enforce the new consensus rules.
# A miner may choose not to upgrade; and not enforce the new consensus rules. In a soft-fork this behavior is acceptable; except for the loss of funds and disruption caused by mining on-top of other invalid blocks without detection.

In the case of signaling '''not-ready''', the miner is simply referencing the technological reality of their lack-of-readiness. This allows the Bitcoin Community to focus on the miners who have signaled that they are not-yet-ready, and build support with them. Thus, helping the miners implement the technological aspects of this network upgrade.

==Specification==

This proposal uses 2016 block intervals; using the same set of intervals as used for difficulty adjustment calculations.

# The '''start_height''' should be 13 x 2016 block intervals (approximately six months) after the release of the software that implements this upgrade.
# The '''stop_height''' should be 26  x 2016 block intervals (approximately one year) after the '''start_height'''.

--

There will be exactly 26 intervals, to attempt activation:

'''LOCKED_IN''' becomes activated IF:
# Less than 126 blocks signal '''not-ready'''. In any interval. OR
# Less than 1008 blocks, but 126 or more blocks signal '''not-ready'''. For a total of 14 intervals.

'''FAILED''', i.e. activation failed IF:
# 1008 or more blocks signal '''not-ready'''. For a total of 13 intervals. AND
# 126 or more blocks signal '''not-ready'''. In all remaining intervals.

==Copyright==
This document is dual licensed as BSD 3-clause, and Creative Commons CC0 1.0 Universal.

