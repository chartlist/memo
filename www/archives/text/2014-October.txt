From pete at petertodd.org  Wed Oct  1 13:08:26 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 1 Oct 2014 09:08:26 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent a
 txout from being spent until an expiration time
Message-ID: <20141001130826.GM28710@savin.petertodd.org>

I've written a reference implementation and BIP draft for a new opcode,
CHECKLOCKTIMEVERIFY. The BIP, reproduced below, can be found at:

    https://github.com/petertodd/bips/blob/checklocktimeverify/bip-checklocktimeverify.mediawiki

The reference implementation, including a full-set of unittests for the
opcode semantics can be found at:

    https://github.com/petertodd/bitcoin/compare/checklocktimeverify

<pre>
  BIP:
  Title: OP_CHECKLOCKTIMEVERIFY
  Author: Peter Todd <pete at petertodd.org>
  Status: Draft
  Type: Standards Track
  Created: 2014-10-01
</pre>

==Abstract==

This BIP describes a new opcode (OP_CHECKLOCKTIMEVERIFY) for the Bitcoin
scripting system that allows a transaction output to be made unspendable until
some point in the future.


==Summary==

CHECKLOCKTIMEVERIFY re-defines the existing NOP2 opcode. When executed it
compares the top item on the stack to the nLockTime field of the transaction
containing the scriptSig. If that top stack item is greater than the transation
nLockTime the script fails immediately, otherwise script evaluation continues
as though a NOP was executed.

The nLockTime field in a transaction prevents the transaction from being mined
until either a certain block height, or block time, has been reached. By
comparing the argument to CHECKLOCKTIMEVERIFY against the nLockTime field, we
indirectly verify that the desired block height or block time has been reached;
until that block height or block time has been reached the transaction output
remains unspendable.


==Motivation==

The nLockTime field in transactions makes it possible to prove that a
transaction output can be spent in the future: a valid signature for a
transaction with the desired nLockTime can be constructed, proving that it is
possible to spend the output with that signature when the nLockTime is reached.
An example where this technique is used is in micro-payment channels, where the
nLockTime field proves that should the receiver vanish the sender is guaranteed
to get all their escrowed funds back when the nLockTime is reached.

However the nLockTime field is insufficient if you wish to prove that
transaction output ''can-not'' be spent until some time in the future, as there
is no way to prove that the secret keys corresponding to the pubkeys controling
the funds have not been used to create a valid signature.


===Escrow===

If Alice and Bob jointly operate a business they may want to
ensure that all funds are kept in 2-of-2 multisig transaction outputs that
require the co-operation of both parties to spend. However, they recognise that
in exceptional circumstances such as either party getting "hit by a bus" they
need a backup plan to retrieve the funds. So they appoint their lawyer, Lenny,
to act as a third-party.

With a standard 2-of-3 CHECKMULTISIG at any time Lenny could conspire with
either Alice or Bob to steal the funds illegitimately. Equally Lenny may prefer
not to have immediate access to the funds to discourage bad actors from
attempting to get the secret keys from him by force.

However with CHECKLOCKTIMEVERIFY the funds can be stored in scriptPubKeys of
the form:

    IF
        <now + 3 months> CHECKLOCKTIMEVERIFY DROP
        <Lenny's pubkey> CHECKSIGVERIFY
        1
    ELSE
        2
    ENDIF
    <Alice's pubkey> <Bob's pubkey> 2 CHECKMULTISIG

At any time the funds can be spent with the following scriptSig:

    <Alice's signature> <Bob's signature> 0

After 3 months have passed Lenny and one of either Alice or Bob can spend the
funds with the following scriptSig:

    <Alice/Bob's signature> <Lenny's signature> 1


===Non-interactive time-locked refunds===

There exist a number of protocols where a transaction output is created that
the co-operation of both parties to spend the output. To ensure the failure of
one party does not result in the funds becoming lost refund transactions are
setup in advance using nLockTime. These refund transactions need to be created
interactively, and additionaly, are currently vulnerable to transaction
mutability. CHECKLOCKTIMEVERIFY can be used in these protocols, replacing the
interactive setup with a non-interactive setup, and additionally, making
transaction mutability a non-issue.


====Two-factor wallets====

Services like GreenAddress store Bitcoins with 2-of-2 multisig scriptPubKey's
such that one keypair is controlled by the user, and the other keypair is
controlled by the service. To spend funds the user uses locally installed
wallet software that generates one of the required signatures, and then uses a
2nd-factor authentication method to authorize the service to create the second
SIGHASH_NONE signature that is locked until some time in the future and sends
the user that signature for storage. If the user needs to spend their funds and
the service is not available, they wait until the nLockTime expires.

The problem is there exist numerous occasions the user will not have a valid
signature for some or all of their transaction outputs. With
CHECKLOCKTIMEVERIFY rather than creating refund signatures on demand
scriptPubKeys of the following form are used instead:

    IF
        <service pubkey> CHECKSIGVERIFY
    ELSE
        <expiry time> CHECKLOCKTIMEVERIFY DROP
    ENDIF
    <user pubkey> CHECKSIG

Now the user is always able to spend their funds without the co-operation of
the service by waiting for the expiry time to be reached.


====Micropayment Channels====

Jeremy Spilman style micropayment channels first setup a deposit controlled by
2-of-2 multisig, tx1, and then adjust a second transaction, tx2, that spends
the output of tx1 to payor and payee. Prior to publishing tx1 a refund
transaction is created, tx3, to ensure that should the payee vanish the payor
can get their deposit back. The process by which the refund transaction is
created is currently vulnerable to transaction mutability attacks, and
additionally, requires the payor to store the refund. Using the same
scriptPubKey from as in the Two-factor wallets example solves both these issues.


===Trustless Payments for Publishing Data===

The PayPub protocol makes it possible to pay for information in a trustless way
by first proving that an encrypted file contains the desired data, and secondly
crafting scriptPubKeys used for payment such that spending them reveals the
encryption keys to the data. However the existing implementation has a
significant flaw: the publisher can delay the release of the keys indefinitely.

This problem can be solved interactively with the refund transaction technique;
with CHECKLOCKTIMEVERIFY the problem can be non-interactively solved using
scriptPubKeys of the following form:

    IF
        HASH160 <Hash160(encryption key)> EQUALVERIFY
        <publisher pubkey> CHECKSIG
    ELSE
        <expiry time> CHECKLOCKTIMEVERIFY DROP
        <buyer pubkey> CHECKSIG
    ENDIF

The buyer of the data is now making a secure offer with an expiry time. If the
publisher fails to accept the offer before the expiry time is reached the buyer
can cancel the offer by spending the output.


===Proving sacrifice to miners' fees===

Proving the sacrifice of some limited resource is a common technique in a
variety of cryptographic protocols. Proving sacrifices of coins to mining fees
has been proposed as a ''universal public good'' to which the sacrifice could
be directed, rather than simply destroying the coins. However doing so is
non-trivial, and even the best existing technqiue - announce-commit sacrifices
- could encourage mining centralization. CHECKLOCKTIMEVERIFY can be used to
create outputs that are provably spendable by anyone (thus to mining fees
assuming miners behave optimally and rationally) but only at a time
sufficiently far into the future that large miners profitably can't sell the
sacrifices at a discount.


===Replacing the nLockTime field entirely===

As an aside, note how if the SignatureHash() algorithm could optionally cover
part of the scriptSig the signature could require that the scriptSig contain
CHECKLOCKTIMEVERIFY opcodes, and additionally, require that they be executed.
(the CODESEPARATOR opcode came very close to making this possible in v0.1 of
Bitcoin) This per-signature capability could replace the per-transaction
nLockTime field entirely as a valid signature would now be the proof that a
transaction output ''can'' be spent.


==Detailed Specification==

Refer to the reference implementation, reproduced below, for the precise
semantics and detailed rationale for those semantics.

    case OP_NOP2:
    {
        // CHECKLOCKTIMEVERIFY
        //
        // (nLockTime -- nLockTime )
    
        if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY))
            break; // not enabled; treat as a NOP
    
        if (stack.size() < 1)
            return false;
    
        // Note that elsewhere numeric opcodes are limited to
        // operands in the range -2**31+1 to 2**31-1, however it is
        // legal for opcodes to produce results exceeding that
        // range. This limitation is implemented by CScriptNum's
        // default 4-byte limit.
        //
        // If we kept to that limit we'd have a year 2038 problem,
        // even though the nLockTime field in transactions
        // themselves is uint32 which only becomes meaningless
        // after the year 2106.
        //
        // Thus as a special case we tell CScriptNum to accept up
        // to 5-byte bignums, which are good until 2**32-1, the
        // same limit as the nLockTime field itself.
        const CScriptNum nLockTime(stacktop(-1), 5);
    
        // In the rare event that the argument may be < 0 due to
        // some arithmetic being done first, you can always use
        // 0 MAX CHECKLOCKTIMEVERIFY.
        if (nLockTime < 0)
            return false;
    
        // There are two times of nLockTime: lock-by-blockheight
        // and lock-by-blocktime, distinguished by whether
        // nLockTime < LOCKTIME_THRESHOLD.
        //
        // We want to compare apples to apples, so fail the script
        // unless the type of nLockTime being tested is the same as
        // the nLockTime in the transaction.
        if (!(
              (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||
              (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)
             ))
            return false;
    
        // Now that we know we're comparing apples-to-apples, the
        // comparison is a simple numeric one.
        if (nLockTime > (int64_t)txTo.nLockTime)
            return false;
    
        // Finally the nLockTime feature can be disabled and thus
        // CHECKLOCKTIMEVERIFY bypassed if every txin has been
        // finalized by setting nSequence to maxint. The
        // transaction would be allowed into the blockchain, making
        // the opcode ineffective.
        //
        // Testing if this vin is not final is sufficient to
        // prevent this condition. Alternatively we could test all
        // inputs, but testing just this input minimizes the data
        // required to prove correct CHECKLOCKTIMEVERIFY execution.
        if (txTo.vin[nIn].IsFinal())
            return false;
    
        break;
    
    }

https://github.com/petertodd/bitcoin/commit/ab0f54f38e08ee1e50ff72f801680ee84d0f1bf4


==Upgrade and Testing Plan==

TBD


==Credits==

Thanks goes to Gregory Maxwell for suggesting that the argument be compared
against the per-transaction nLockTime, rather than the current block height and
time.


==References==

PayPub - https://github.com/unsystem/paypub

Jeremy Spilman Micropayment Channels - http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02028.html


==Copyright==

This document is placed in the public domain.

-- 
'peter'[:-1]@petertodd.org
000000000000000009012f16fe9db21abbba5025453a9b7b589a807b21cec318
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/e8e4213b/attachment.sig>

From gavinandresen at gmail.com  Wed Oct  1 15:01:28 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 1 Oct 2014 11:01:28 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <20141001130826.GM28710@savin.petertodd.org>
References: <20141001130826.GM28710@savin.petertodd.org>
Message-ID: <CABsx9T0M0Xc4_rXptTS7PqoQW+KhrtdF_PGEsp5Ce2VS+7J91g@mail.gmail.com>

Very nice, semantics are clear and use cases are compelling.

Can we defer discussion of how to roll this out for a little bit, and see
if there is consensus that:

a) benefits of having this outweigh risks
b) we're all happy with exact semantics

Then we can have a knock-down drag-out argument about whether it should
roll out as a soft fork, wait for a hard fork, be combined with some other
things that it would be nice to add or change, etc.....

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/94a794c3/attachment.html>

From sergiolerner at certimix.com  Wed Oct  1 15:29:48 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Wed, 01 Oct 2014 12:29:48 -0300
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <20141001130826.GM28710@savin.petertodd.org>
References: <20141001130826.GM28710@savin.petertodd.org>
Message-ID: <542C1DEC.8010007@certimix.com>

I like the proposal.

I suggest that applications and nodes should only broadcast transactions
having OP_CHECKLOCKTIMEVERIFY a few blocks after the timeout value.
If a node broadcasts a TX having OP_CHECKLOCKTIMEVERIFY and nLockTime is
equal to the current height and equal to the timeout value, but that
peer is one block behind in the blockchain, the transaction will be
rejected by the peer and the source will be banned.

Another option will be not to ban peers sending transactions failing to
verify OP_CHECKLOCKTIMEVERIFY , but I don't like this.

Still another option would be that the sender checks periodically the
height of it's peers (using the version command) in order to be sure to
send the transaction having OP_CHECKLOCKTIMEVERIFY only to the peers
that are up to date with the blockchain.

Regards,
 Sergio.






From pete at petertodd.org  Wed Oct  1 17:06:03 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 01 Oct 2014 13:06:03 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
	a txout from being spent until an expiration time
In-Reply-To: <542C1DEC.8010007@certimix.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<542C1DEC.8010007@certimix.com>
Message-ID: <C9E1D7CC-B4F8-4428-8AB8-E199ECA7BFAD@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Yeah, there are lots of "upper-level" details to consider; I'm not going to pretend that BIP is complete yet. My thinking is that the first release should include my NOPx blacklist pull-req, and leave NOP2/CHECKLOCKTIMEVERIFY in that blacklist for another minor release or two.


On 1 October 2014 11:29:48 GMT-04:00, Sergio Lerner <sergiolerner at certimix.com> wrote:
>I like the proposal.
>
>I suggest that applications and nodes should only broadcast
>transactions
>having OP_CHECKLOCKTIMEVERIFY a few blocks after the timeout value.
>If a node broadcasts a TX having OP_CHECKLOCKTIMEVERIFY and nLockTime
>is
>equal to the current height and equal to the timeout value, but that
>peer is one block behind in the blockchain, the transaction will be
>rejected by the peer and the source will be banned.
>
>Another option will be not to ban peers sending transactions failing to
>verify OP_CHECKLOCKTIMEVERIFY , but I don't like this.
>
>Still another option would be that the sender checks periodically the
>height of it's peers (using the version command) in order to be sure to
>send the transaction having OP_CHECKLOCKTIMEVERIFY only to the peers
>that are up to date with the blockchain.
>
>Regards,
> Sergio.
>
>
>
>
>------------------------------------------------------------------------------
>Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
>Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS
>Reports
>Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
>Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
>http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJULDR7MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhS8ACADKQYHqOvmKJBYv+ZZM
Vs6358sMEtHGIEoTEjPio/vGbM0TkCGvRAnvzXDYz20WQcQsWZ4jflP1BihdbszE
NrQ+4JYm11Sw6vK5RpxeI4rJSb/hMUJooR0WQn8TOSZowtVxhINUnBku+N21Dhuf
IBCzji5bW2wjeN50psWOjJkBo1gZP761tjfmpI9kdNFe6RYIceAIWIIhccKX4PhA
FucuPawjB8+Ajd707UGHew82VHbXis+6Oxzob7hVJRH/wNKpkR6LXRxh2dwVaRAw
/Eytbt8LZRcRZGNXvMZ4GKG0xP79cBQI30QhrgM88gGyioMxrWcP2hVhtADOVl40
E4yh
=C9fu
-----END PGP SIGNATURE-----




From luke at dashjr.org  Wed Oct  1 18:23:55 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 1 Oct 2014 18:23:55 +0000
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
	a txout from being spent until an expiration time
In-Reply-To: <20141001130826.GM28710@savin.petertodd.org>
References: <20141001130826.GM28710@savin.petertodd.org>
Message-ID: <201410011823.56441.luke@dashjr.org>

On Wednesday, October 01, 2014 1:08:26 PM Peter Todd wrote:
> I've written a reference implementation and BIP draft for a new opcode,
> CHECKLOCKTIMEVERIFY.

Thoughts on some way to have the stack item be incremented by the height at 
which the scriptPubKey was in a block? A limitation of encoding the target 
height/time directly, is that miners may choose not to mine the first 
transaction until they can also take the "burn to fee". So, one may prefer to 
say "cannot be spent until 100 blocks after the first transaction is mined", 
in effect reproducing the generation maturity rule.

I propose any stack item under 0x40000 be incremented by the height at which 
the scriptPubKey was mined for comparison. Maybe there is a use case for doing 
something similar for time too?

Luke



From gavinandresen at gmail.com  Wed Oct  1 20:58:34 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 1 Oct 2014 16:58:34 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <201410011823.56441.luke@dashjr.org>
References: <20141001130826.GM28710@savin.petertodd.org>
	<201410011823.56441.luke@dashjr.org>
Message-ID: <CABsx9T1xC_1GzquEKBH3TQscZoo3EjXyQFR3FF6BXufjduL_JA@mail.gmail.com>

On Wed, Oct 1, 2014 at 2:23 PM, Luke Dashjr <luke at dashjr.org> wrote:

> houghts on some way to have the stack item be incremented by the height at
> which the scriptPubKey was in a block? A limitation of encoding the target
> height/time directly, is that miners may choose not to mine the first
> transaction until they can also take the "burn to fee".
>

If the first transaction is P2SH, then the miner won't know there is an
advantage to holding it until it is too late (the scriptPubKey is an opaque
hash until the second transaction is final and relayed/broadcast).


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/dd4a8c60/attachment.html>

From etotheipi at gmail.com  Wed Oct  1 21:04:33 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Wed, 01 Oct 2014 17:04:33 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CABsx9T1xC_1GzquEKBH3TQscZoo3EjXyQFR3FF6BXufjduL_JA@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>	<201410011823.56441.luke@dashjr.org>
	<CABsx9T1xC_1GzquEKBH3TQscZoo3EjXyQFR3FF6BXufjduL_JA@mail.gmail.com>
Message-ID: <542C6C61.30301@gmail.com>

On 10/01/2014 04:58 PM, Gavin Andresen wrote:
> If the first transaction is P2SH, then the miner won't know there is
> an advantage to holding it until it is too late (the scriptPubKey is
> an opaque hash until the second transaction is final and
> relayed/broadcast).

If you're doing some kind of proof-of-burn scheme, wouldn't using P2SH
defeat the purpose of it?



From gavinandresen at gmail.com  Wed Oct  1 21:34:33 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 1 Oct 2014 17:34:33 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <542C6C61.30301@gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<201410011823.56441.luke@dashjr.org>
	<CABsx9T1xC_1GzquEKBH3TQscZoo3EjXyQFR3FF6BXufjduL_JA@mail.gmail.com>
	<542C6C61.30301@gmail.com>
Message-ID: <CABsx9T1Wh1ypQ-RCkAh+1qEw7QvBnuPja1teJ6xq9F_gQHAGOA@mail.gmail.com>

On Wed, Oct 1, 2014 at 5:04 PM, Alan Reiner <etotheipi at gmail.com> wrote:

> On 10/01/2014 04:58 PM, Gavin Andresen wrote:
> > If the first transaction is P2SH, then the miner won't know there is
> > an advantage to holding it until it is too late (the scriptPubKey is
> > an opaque hash until the second transaction is final and
> > relayed/broadcast).
>
> If you're doing some kind of proof-of-burn scheme, wouldn't using P2SH
> defeat the purpose of it?
>

No, the burner would supply the funding transaction plus the redeeming
script as the proof-of-burn to whoever needed the proof.

Only after at least one confirmation, if there was some risk that revealing
the redeeming script would make miners refuse to mine that first
transaction because they want to get it plus the CHECKTIMELOCKVERIFY "burn"
transaction.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/05ee5140/attachment.html>

From pete at petertodd.org  Thu Oct  2 00:05:15 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 01 Oct 2014 17:05:15 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY -
	Prevent	a txout from being spent until an expiration time
In-Reply-To: <201410011823.56441.luke@dashjr.org>
References: <20141001130826.GM28710@savin.petertodd.org>
	<201410011823.56441.luke@dashjr.org>
Message-ID: <CE356B97-E5AC-4A04-B67C-A542D070F1C5@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:
>Thoughts on some way to have the stack item be incremented by the
>height at
>which the scriptPubKey was in a block?

Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator. scriptPubKey would be:

    GET-TXIN-BLOCKHEIGHT-EQUALVERIFY

(fails unless top stack item is equal to the txin block height)

    <delta height> ADD

(top stack item is now txin height + delta height)

    CHECKLOCKTIMEVERIFY

> A limitation of encoding the
>target
>height/time directly, is that miners may choose not to mine the first
>transaction until they can also take the "burn to fee". So, one may
>prefer to
>say "cannot be spent until 100 blocks after the first transaction is
>mined",
>in effect reproducing the generation maturity rule.

You'd want these sacrifices to unlock years into the future to thoroughly exceed any reasonable business cycle; that's so far into the future that miners are almost certain to just mine them and collect the fees.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJULJa7MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhYlFB/4r2Hv82RK85BDe+hAT
ZQJtzXv1JRCa+o7Y344unMJ8y7rSDJRFSH+X+4VeCln833XKb8FNgj2loniQAq5H
FIH04gPf7yuXvDrKI6HwCj9Q3KLPv4UZM1+LjijczOM/y4e/C82squpTpgFaton+
6VXU/WyaCDYDS4he975E14YhBBVhoadZZMOW3Moxgpnde2RwAYZdkcdhqvh/3dJC
/9VOEUBu0ENyraL5HHGdZyjSJT2MsY4CBTCCd54RxBBMoMZqFRvIi4Xrt2vE1T+Y
R2DtKs7upjydnfg9KPm484upvO2U3lcnPBW9rqOVQyV2q81TcloRtUIU4QQ9GCAk
ayj2
=p0BG
-----END PGP SIGNATURE-----




From pete at petertodd.org  Thu Oct  2 00:12:51 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 01 Oct 2014 17:12:51 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
	a txout from being spent until an expiration time
In-Reply-To: <CABsx9T1Wh1ypQ-RCkAh+1qEw7QvBnuPja1teJ6xq9F_gQHAGOA@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<201410011823.56441.luke@dashjr.org>
	<CABsx9T1xC_1GzquEKBH3TQscZoo3EjXyQFR3FF6BXufjduL_JA@mail.gmail.com>
	<542C6C61.30301@gmail.com>
	<CABsx9T1Wh1ypQ-RCkAh+1qEw7QvBnuPja1teJ6xq9F_gQHAGOA@mail.gmail.com>
Message-ID: <72667BA8-FDE6-4C6B-A463-9DFAE067C287@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 1 October 2014 14:34:33 GMT-07:00, Gavin Andresen <gavinandresen at gmail.com> wrote:
>On Wed, Oct 1, 2014 at 5:04 PM, Alan Reiner <etotheipi at gmail.com>
>wrote:
>No, the burner would supply the funding transaction plus the redeeming
>script as the proof-of-burn to whoever needed the proof.

No, the redeemScript has to be provably published to miners for the sacrifice to be valid; if not you can exploit the scheme by hiding the redeemScript and having a big miner mine it at lower-than-face-value cost when it unlocks.

>Only after at least one confirmation, if there was some risk that
>revealing
>the redeeming script would make miners refuse to mine that first
>transaction because they want to get it plus the CHECK TIME BLOCK VERIFY
>"burn"
>transaction.

Yes, you could do that in a followup tx containing the redeemScript in an OP_RETURN output to prove publication. That said as I said to Luke-Jr, the sacrifices need to unlock pretty far into the future, so I don't see miners bothering to do this.





-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJULJiDMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTwKCACD+GWzID7Qhn2no1p9
KYNiYlQVNt+DPZY0QB7MujL8riAmyJBliF9zptfjEdvglShoIzonJien/DOCjp9S
Lw2wMvPhtZGgSttJEvlr3wclty6TfWygd4Y+v/MR8TnYC99su7HhiQ1pkqohkklv
RxeF9jXhcJMERzN6wPUyeowfziBAfbWw+M5CwiXRlzLLBWO37eoDTXzUD0Np5Nia
nFxQ7sAsSbLijVpvigh9uIi3/1347VqwMc+0ZsZoZ2AnMICA8Q+XKNHv7DKpChxw
Xa+P532Di34uu8dlG/Z/UwYdENvb15P1yUZ7CEDfqNqrZp0RM7x+XKMA7QPwhuz3
YSBp
=mvKP
-----END PGP SIGNATURE-----




From luke at dashjr.org  Thu Oct  2 00:55:36 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 2 Oct 2014 00:55:36 +0000
Subject: [Bitcoin-development]
 =?utf-8?q?=5BBIP_draft=5D_CHECKLOCKTIMEVERI?=
 =?utf-8?q?FY_-_Prevent=09a_txout_from_being_spent_until_an_expiration_tim?=
 =?utf-8?q?e?=
In-Reply-To: <CE356B97-E5AC-4A04-B67C-A542D070F1C5@petertodd.org>
References: <20141001130826.GM28710@savin.petertodd.org>
	<201410011823.56441.luke@dashjr.org>
	<CE356B97-E5AC-4A04-B67C-A542D070F1C5@petertodd.org>
Message-ID: <201410020055.37347.luke@dashjr.org>

On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:
> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:
> >Thoughts on some way to have the stack item be incremented by the
> >height at
> >which the scriptPubKey was in a block?
> 
> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.
> scriptPubKey would be:
>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY
> (fails unless top stack item is equal to the txin block height)
>     <delta height> ADD
> (top stack item is now txin height + delta height)
>     CHECKLOCKTIMEVERIFY

This sounds do-able, although it doesn't address using timestamps.

> > A limitation of encoding the target
> >height/time directly, is that miners may choose not to mine the first
> >transaction until they can also take the "burn to fee". So, one may
> >prefer to
> >say "cannot be spent until 100 blocks after the first transaction is
> >mined",
> >in effect reproducing the generation maturity rule.
> 
> You'd want these sacrifices to unlock years into the future to thoroughly
> exceed any reasonable business cycle; that's so far into the future that
> miners are almost certain to just mine them and collect the fees.

For many use cases, short maturity periods are just as appropriate IMO.

Luke



From pete at petertodd.org  Thu Oct  2 01:06:06 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 01 Oct 2014 18:06:06 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
	a txout from being spent until an expiration time
In-Reply-To: <CABsx9T0M0Xc4_rXptTS7PqoQW+KhrtdF_PGEsp5Ce2VS+7J91g@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABsx9T0M0Xc4_rXptTS7PqoQW+KhrtdF_PGEsp5Ce2VS+7J91g@mail.gmail.com>
Message-ID: <FF51DE7D-1EE7-4E8F-9D9B-548DC0233387@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 1 October 2014 08:01:28 GMT-07:00, Gavin Andresen <gavinandresen at gmail.com> wrote:
>Very nice, semantics are clear and use cases are compelling.

Thanks!

>Can we defer discussion of how to roll this out for a little bit, and
>see
>if there is consensus that:
>
>a) benefits of having this outweigh risks
>b) we're all happy with exact semantics
>
>Then we can have a knock-down drag-out argument about whether it should
>roll out as a soft fork, wait for a hard fork, be combined with some
>other
>things that it would be nice to add or change, etc.....

Agreed. People should keep in mind that leaving the deployment details as "TBD" was quite deliberate. There is some code in the repo to implement a softfork, but it's only meant to be illustrative.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJULKT9MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhevAB/0eTWleef5GehrH03tZ
NrOdtJ881NhXJpB3p81jPyT9z4gv9u3M5bkjMOvClQaf8PX551ICgKbWDQTNf9oS
TF/blkqWRWX28VLkNsMUQNN/dd7rdqDMpnwcN8worgHToRMa4drFBU/MXapedMLQ
Sb2ETXGYPm4b/HqgFf9j/EGt8jhmnk4HiSwZ6wdhdYLbbZ6NhplSR8tTs+GouAWp
PHntN6DQI8oFDaIKkMbs2dDlpXSGG9hxr6m46LBwp/CHBY9aKkwLyaJXkMVovP3J
HrSYTzlCmjrDNbLJwIze+fyO2UDkgZUzjVENfMvixcQNdz0pVoCzJ2BK8b4fAc7Y
maRA
=Mz3E
-----END PGP SIGNATURE-----




From pete at petertodd.org  Thu Oct  2 01:09:01 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 01 Oct 2014 18:09:01 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY -
	Prevent	a txout from being spent until an expiration time
In-Reply-To: <201410020055.37347.luke@dashjr.org>
References: <20141001130826.GM28710@savin.petertodd.org>
	<201410011823.56441.luke@dashjr.org>
	<CE356B97-E5AC-4A04-B67C-A542D070F1C5@petertodd.org>
	<201410020055.37347.luke@dashjr.org>
Message-ID: <B3CB4356-7F37-44D3-916B-7A591A1DBBEF@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:
>On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:
>> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>
>wrote:
>> >Thoughts on some way to have the stack item be incremented by the
>> >height at
>> >which the scriptPubKey was in a block?
>>
>> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.
>> scriptPubKey would be:
>>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY
>> (fails unless top stack item is equal to the txin block height)
>>     <delta height> ADD
>> (top stack item is now txin height + delta height)
>>     CHECKLOCKTIMEVERIFY
>
>This sounds do-able, although it doesn't address using timestamps.

For timestamps replace "height" with "time" in the above example; the minimum block time rule will prevent gaming it.


>> You'd want these sacrifices to unlock years into the future to
>thoroughly
>> exceed any reasonable business cycle; that's so far into the future
>that
>> miners are almost certain to just mine them and collect the fees.
>
>For many use cases, short maturity periods are just as appropriate IMO.

Very easy to incentivise mining centralisation with short maturities. I personally think just destroying coins is better, but it doesn't sit well with people so this is the next best thing.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o
JwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV
f5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb
63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr
1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm
vrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq
SOgO
=WybM
-----END PGP SIGNATURE-----




From rebroad+sourceforge.net at gmail.com  Thu Oct  2 04:39:47 2014
From: rebroad+sourceforge.net at gmail.com (Rebroad (sourceforge))
Date: Thu, 2 Oct 2014 12:39:47 +0800
Subject: [Bitcoin-development] Decreasing block propagation time
Message-ID: <CAFBxzAC6566OPT4Ex6Q6cnAAz0y8L6cg9wGcM_Tts401vCfxYQ@mail.gmail.com>

https://bitcointalk.org/index.php?topic=145066.0

The idea proposed in the above article seemed like an excellent idea. What
is holding this up from being implemented? Does someone need to code it, or
write a BIP first?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141002/393bbd3b/attachment.html>

From bitcoin-list at bluematt.me  Thu Oct  2 04:46:43 2014
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 02 Oct 2014 04:46:43 +0000
Subject: [Bitcoin-development] Decreasing block propagation time
In-Reply-To: <CAFBxzAC6566OPT4Ex6Q6cnAAz0y8L6cg9wGcM_Tts401vCfxYQ@mail.gmail.com>
References: <CAFBxzAC6566OPT4Ex6Q6cnAAz0y8L6cg9wGcM_Tts401vCfxYQ@mail.gmail.com>
Message-ID: <542CD8B3.5060001@bluematt.me>

It already is https://bitcointalk.org/index.php?topic=766190.0;all.
Well, ok, a variation on the idea is.

Matt

On 10/02/14 04:39, Rebroad (sourceforge) wrote:
> https://bitcointalk.org/index.php?topic=145066.0
> 
> The idea proposed in the above article seemed like an excellent idea.
> What is holding this up from being implemented? Does someone need to
> code it, or write a BIP first?
> 
> 
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From flavien.charlon at coinprism.com  Thu Oct  2 15:05:01 2014
From: flavien.charlon at coinprism.com (Flavien Charlon)
Date: Thu, 2 Oct 2014 16:05:01 +0100
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <B3CB4356-7F37-44D3-916B-7A591A1DBBEF@petertodd.org>
References: <20141001130826.GM28710@savin.petertodd.org>
	<201410011823.56441.luke@dashjr.org>
	<CE356B97-E5AC-4A04-B67C-A542D070F1C5@petertodd.org>
	<201410020055.37347.luke@dashjr.org>
	<B3CB4356-7F37-44D3-916B-7A591A1DBBEF@petertodd.org>
Message-ID: <CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>

Very good, I like the proposal.

A question I have: can it be used to do the opposite, i.e. build a script
that can only be spent up until block X?

On Thu, Oct 2, 2014 at 2:09 AM, Peter Todd <pete at petertodd.org> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
>
>
> On 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:
> >On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:
> >> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>
> >wrote:
> >> >Thoughts on some way to have the stack item be incremented by the
> >> >height at
> >> >which the scriptPubKey was in a block?
> >>
> >> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.
> >> scriptPubKey would be:
> >>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY
> >> (fails unless top stack item is equal to the txin block height)
> >>     <delta height> ADD
> >> (top stack item is now txin height + delta height)
> >>     CHECKLOCKTIMEVERIFY
> >
> >This sounds do-able, although it doesn't address using timestamps.
>
> For timestamps replace "height" with "time" in the above example; the
> minimum block time rule will prevent gaming it.
>
>
> >> You'd want these sacrifices to unlock years into the future to
> >thoroughly
> >> exceed any reasonable business cycle; that's so far into the future
> >that
> >> miners are almost certain to just mine them and collect the fees.
> >
> >For many use cases, short maturity periods are just as appropriate IMO.
>
> Very easy to incentivise mining centralisation with short maturities. I
> personally think just destroying coins is better, but it doesn't sit well
> with people so this is the next best thing.
> -----BEGIN PGP SIGNATURE-----
> Version: APG v1.1.1
>
> iQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o
> JwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV
> f5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb
> 63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr
> 1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm
> vrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq
> SOgO
> =WybM
> -----END PGP SIGNATURE-----
>
>
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
>
> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141002/d08a3134/attachment.html>

From mike at plan99.net  Fri Oct  3 12:49:52 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 3 Oct 2014 14:49:52 +0200
Subject: [Bitcoin-development] bitcoinj 0.12
Message-ID: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>

I?m pleased to announce version 0.12 of bitcoinj, one of the worlds most popular Bitcoin libraries. It is used by at least four Android wallets, three desktop wallets, blockchain.info, Circle, biteasy, CryptoCorp, Lighthouse, BlueMatt?s relay network, bitpos, countless alt coin wallets, for academic research projects and much more.

This release represents 8 months of work. The biggest new feature is HD wallets. Other notable enhancements include a bundled Tor client that can be activated with one line of code, support for multisig wallets, much faster and deterministic ECDSA, many API improvements and big upgrades to the included GUI wallet which can be seen in a new screencasted tutorial.

The commit hash of bitcoinj 0.12 is 83a9a71f3fff3f223d0737ad758b519a39dbbd62. 

New in this release

Privacy enhancements:
Wallets are now hierarchical and deterministic (HD) by default, using the BIP32 specification. Support for mnemonic codes (BIP 39) is also included. Change and receive addresses are no longer being reused. Old wallets are upgraded in place using the private key of the oldest non-rotating key as the seed bytes, so old backups remain valid.
Thanks to devrandom, we have an integrated Tor mode using the Orchid library. The user does not have to install the Tor client as it?s all pure Java. WalletAppKit users can enable usage of Tor with a single line of code. This support should be considered experimental for now.
Thanks to Kosta Korenkov, we have an experimental multisig wallets implementation. Multisig (also ?married?) wallets are HD wallets that are connected to a third party risk analysis service or device. When married, the wallet tracks multiple BIP32 key trees, keeps them in sync and starts vending P2SH addresses.
As part of this work, transaction signing is now pluggable. TransactionSigner implementations can be added to the wallet and will be serialized into and out of the users saved wallet file. Signers are given a transaction to sign in sequence. This is intended for risk analysis providers to provide a class that talks to their server to get a signature of the right form, so that all bitcoinj based wallets can be easily upgraded to support the new provider.
Reject messages are now deserialized and logged, though not yet exposed in the API.
Upgraded to Guava 16 and Bouncy Castle 1.51. Thanks to Peter Dettman and the rest of the Bouncy Castle team, bitcoinj now uses deterministic ECDSA for signing and we?re now using an accelerated secp256k1 implementation that exploits the special properties of this curve, for dramatically faster calculations.
Payment protocol code improvements: Some X.509 utility code was refactored out of PaymentSession for general usage. StartCom was added to the default trust store which was promoted to override the system trust store on non-Android platforms. A command line tool to dump requests to stdout was added.
Thanks to Andreas Schildbach:
We are now BIP62 (canonical push encodings) compliant.
A new Coin class replaces usage of BigInteger for marking values that are quantities of bitcoin. Formatting has moved into the new MonetaryFormat class.
The wallet now saves the fee paid on transactions we calculated ourselves. This is useful for putting it into a wallet user interface.
Transactions can have user memos and exchange rates attached, that will be saved by the wallet.
Support for decrypting BIP 38 protected private keys has been added.
Checkpoints can now be stored textually as well as in the old binary format.
There is also a new BtcFormat API that provides an alternative to MonetaryFormat that plugs in to the java.text framework.
Added new DNS seed from Addy Yeow.
Wallets can now have string->byte[] mappings attached to them, for lighter weight extensions.
Thanks to Richard Green, there is now a Python version of the ForwardingService program from the getting started tutorial. This shows how to use bitcoinj from Python using the Jython interpreter.
bitcoinj now probes localhost for a Bitcoin node and automatically uses that instead of the P2P network, when present. This means any bitcoinj based app can be easily upgraded from SPV to full security just by running Core at the same time: no setup needed.
Thanks to Michael Bumann, there are now more example apps showing how to use parts of the API.
WalletTemplate/WalletAppKit improvements. WalletTemplate is a demo app that shows how to create a cross-platform GUI wallet with a modern style and 60fps animations. WalletAppKit is a very high level API for creating apps that have a Bitcoin wallet:
Now supports mnemonic code and restore from seed words. A date picker is provided to cut down on the amount of chain that needs to be rescanned.
Support for encrypting wallets. Password is requested when needed. The difficulty of the scrypt function is selected to always take a fixed number of seconds even if hardware gets more powerful.
Some new animation and utility code backported from Lighthouse.
Tor support
Thanks to Martin Zachrison, the micropayment channels implementation has received various improvements.
Thanks to Eric Tierney (Circle), the Postgres store can now take a custom schema.
The Bloom filtering API has been extended so FilteredBlock objects can now be produced from Block objects given a BloomFilter. Previously there was support for client-side Bloom usage but no implementation of the generation part.
Many other bugfixes, cleanups, minor tweaks and small new APIs.
Documentation and tutorials

A JavaScript tutorial has been added, showing how to use bitcoinj from this language. More tutorials in other languages will come in future.
The ?Working with the wallet? document has been significantly extended to cover encryption, watching wallets, HD wallets and multisig/married wallets.
A new document and accompanying screencast shows how to extend the WalletTemplate app to have a transactions list, and then make a native/bundled packages that don?t need the user to install Java. By following this tutorial you will learn how to make a basic cross platform desktop wallet of your own.
All other docs were refreshed to the latest APIs.
API changes

The package name has changed to org.bitcoinj and the core Maven artifact name is now ?bitcoinj-core?. You can auto-port most of your code by running find . -name '*.java' \| xargs sed -i .bak 's/com.google.bitcoin./import org.bitcoinj./g
Wallet.completeTx now throws more precise unchecked exceptions in edge cases, instead of IllegalArgumentException.
The use of BigInteger to represent quantities of Bitcoin has been replaced with the more efficient, type safe and useful class Coin. Coin is mostly source compatible with BigInteger so you can probably just do a search and replace to update your codebase. Utils.bitcoinValueToFriendlyString and friends moved to CoinFormat.
NetworkParameters.getProofOfWorkLimit was renamed to getMaxTarget for consistency with other Bitcoin codebases.
The library no longer uses the misleading term ?nanocoins? to mean satoshis (the old term predated the use of the word satoshi to describe the smallest possible amount of bitcoin).
TransactionConfidence no longer tracks total work done.
Because outputs are now shuffled any code during that assumes the ordering is preserved will break. You can set the shuffleOutputs field of SendRequest to false to disable this behaviour if you need to.
The ECKey and HD API?s have changed quite a bit: several constructors were replaced with clearer static factory methods that make it more obvious how their parameters are interpreted. The new methods don?t change their behaviour depending on the pattern of nulls passed into them.
Some unit testing utilities have been moved to the new testing subpackage and cleaned up/rearranged. It should be easier to write unit tests for your app that need a simulated network now. DeterministicKey now derives from ECKey.
We now use Utils.HEX.encode() and Utils.HEX.decode() to do translation to and from base 16.
Transaction.hashTransactionForSignature was renamed to just hashForSignature.
The subVer string sent by bitcoinj now has a lower cased first component.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/5cc45a5a/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3927 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/5cc45a5a/attachment.p7s>

From laanwj at gmail.com  Fri Oct  3 13:25:56 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 3 Oct 2014 15:25:56 +0200
Subject: [Bitcoin-development] bitcoinj 0.12
In-Reply-To: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
References: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
Message-ID: <CA+s+GJDmqjsw3Ve+cG_6AKk4QuOPjYTEkG_b2y-pXhY6j-xn6Q@mail.gmail.com>

On Fri, Oct 3, 2014 at 2:49 PM, Mike Hearn <mike at plan99.net> wrote:
> I?m pleased to announce version 0.12 of bitcoinj, one of the worlds most
> popular Bitcoin libraries. It is used by at least four Android wallets,
> three desktop wallets, blockchain.info, Circle, biteasy, CryptoCorp,
> Lighthouse, BlueMatt?s relay network, bitpos, countless alt coin wallets,
> for academic research projects and much more.

Congrats on the release!

Wladimir



From stick at gk2.sk  Fri Oct  3 13:02:24 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Fri, 03 Oct 2014 15:02:24 +0200
Subject: [Bitcoin-development] bitcoinj 0.12
In-Reply-To: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
References: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
Message-ID: <542E9E60.4080604@gk2.sk>

On 10/03/2014 02:49 PM, Mike Hearn wrote:
> I?m pleased to announce version 0.12 of bitcoinj
> 
> This release represents 8 months of work. The biggest new feature is HD wallets.

Congratulations on this release and I am quite happy that bitcoinj now
fully supports BIP32 and BIP39!

Does it also support various HD wallet structures such as BIP44 for example?

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From bip at mattwhitlock.name  Fri Oct  3 14:28:17 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Fri, 03 Oct 2014 10:28:17 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
	a txout from being spent until an expiration time
In-Reply-To: <CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<B3CB4356-7F37-44D3-916B-7A591A1DBBEF@petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
Message-ID: <1987325.zKPNeYyO8K@crushinator>

Is there a reason why we can't have the new opcode simply replace the top stack item with the block height of the txout being redeemed? Then arbitrary logic could be implemented, including "output cannot be spent until a certain time" and also "output can ONLY be spent until a certain time," as well as complex logic with alternative key groups with differing time constraints.

OP_CHECKLOCKTIMEVERIFY, as conceived, seems too limited, IMHO.


On Thursday, 2 October 2014, at 4:05 pm, Flavien Charlon wrote:
> Very good, I like the proposal.
> 
> A question I have: can it be used to do the opposite, i.e. build a script
> that can only be spent up until block X?
> 
> On Thu, Oct 2, 2014 at 2:09 AM, Peter Todd <pete at petertodd.org> wrote:
> 
> > -----BEGIN PGP SIGNED MESSAGE-----
> > Hash: SHA256
> >
> >
> >
> > On 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:
> > >On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:
> > >> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>
> > >wrote:
> > >> >Thoughts on some way to have the stack item be incremented by the
> > >> >height at
> > >> >which the scriptPubKey was in a block?
> > >>
> > >> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.
> > >> scriptPubKey would be:
> > >>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY
> > >> (fails unless top stack item is equal to the txin block height)
> > >>     <delta height> ADD
> > >> (top stack item is now txin height + delta height)
> > >>     CHECKLOCKTIMEVERIFY
> > >
> > >This sounds do-able, although it doesn't address using timestamps.
> >
> > For timestamps replace "height" with "time" in the above example; the
> > minimum block time rule will prevent gaming it.
> >
> >
> > >> You'd want these sacrifices to unlock years into the future to
> > >thoroughly
> > >> exceed any reasonable business cycle; that's so far into the future
> > >that
> > >> miners are almost certain to just mine them and collect the fees.
> > >
> > >For many use cases, short maturity periods are just as appropriate IMO.
> >
> > Very easy to incentivise mining centralisation with short maturities. I
> > personally think just destroying coins is better, but it doesn't sit well
> > with people so this is the next best thing.
> > -----BEGIN PGP SIGNATURE-----
> > Version: APG v1.1.1
> >
> > iQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
> > cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o
> > JwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV
> > f5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb
> > 63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr
> > 1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm
> > vrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq
> > SOgO
> > =WybM
> > -----END PGP SIGNATURE-----
> >
> >
> >
> > ------------------------------------------------------------------------------
> > Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> > Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> > Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> > Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> >
> > http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >



From bip at mattwhitlock.name  Fri Oct  3 14:30:45 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Fri, 03 Oct 2014 10:30:45 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
	a txout from being spent until an expiration time
In-Reply-To: <1987325.zKPNeYyO8K@crushinator>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
Message-ID: <2245970.WQSVoH38ra@crushinator>

Oops, sorry. I meant: replace the top stack item with the block height of the txin doing the redeeming. (So the script can calculate the "current time" to some reference time embedded in the script.)


On Friday, 3 October 2014, at 10:28 am, Matt Whitlock wrote:
> Is there a reason why we can't have the new opcode simply replace the top stack item with the block height of the txout being redeemed? Then arbitrary logic could be implemented, including "output cannot be spent until a certain time" and also "output can ONLY be spent until a certain time," as well as complex logic with alternative key groups with differing time constraints.
> 
> OP_CHECKLOCKTIMEVERIFY, as conceived, seems too limited, IMHO.
> 
> 
> On Thursday, 2 October 2014, at 4:05 pm, Flavien Charlon wrote:
> > Very good, I like the proposal.
> > 
> > A question I have: can it be used to do the opposite, i.e. build a script
> > that can only be spent up until block X?
> > 
> > On Thu, Oct 2, 2014 at 2:09 AM, Peter Todd <pete at petertodd.org> wrote:
> > 
> > > -----BEGIN PGP SIGNED MESSAGE-----
> > > Hash: SHA256
> > >
> > >
> > >
> > > On 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:
> > > >On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:
> > > >> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>
> > > >wrote:
> > > >> >Thoughts on some way to have the stack item be incremented by the
> > > >> >height at
> > > >> >which the scriptPubKey was in a block?
> > > >>
> > > >> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.
> > > >> scriptPubKey would be:
> > > >>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY
> > > >> (fails unless top stack item is equal to the txin block height)
> > > >>     <delta height> ADD
> > > >> (top stack item is now txin height + delta height)
> > > >>     CHECKLOCKTIMEVERIFY
> > > >
> > > >This sounds do-able, although it doesn't address using timestamps.
> > >
> > > For timestamps replace "height" with "time" in the above example; the
> > > minimum block time rule will prevent gaming it.
> > >
> > >
> > > >> You'd want these sacrifices to unlock years into the future to
> > > >thoroughly
> > > >> exceed any reasonable business cycle; that's so far into the future
> > > >that
> > > >> miners are almost certain to just mine them and collect the fees.
> > > >
> > > >For many use cases, short maturity periods are just as appropriate IMO.
> > >
> > > Very easy to incentivise mining centralisation with short maturities. I
> > > personally think just destroying coins is better, but it doesn't sit well
> > > with people so this is the next best thing.
> > > -----BEGIN PGP SIGNATURE-----
> > > Version: APG v1.1.1
> > >
> > > iQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
> > > cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o
> > > JwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV
> > > f5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb
> > > 63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr
> > > 1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm
> > > vrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq
> > > SOgO
> > > =WybM
> > > -----END PGP SIGNATURE-----
> > >
> > >
> > >
> > > ------------------------------------------------------------------------------
> > > Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> > > Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> > > Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> > > Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> > >
> > > http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> > > _______________________________________________
> > > Bitcoin-development mailing list
> > > Bitcoin-development at lists.sourceforge.net
> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >



From gmaxwell at gmail.com  Fri Oct  3 16:17:48 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 3 Oct 2014 09:17:48 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <1987325.zKPNeYyO8K@crushinator>
References: <20141001130826.GM28710@savin.petertodd.org>
	<B3CB4356-7F37-44D3-916B-7A591A1DBBEF@petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
Message-ID: <CAAS2fgT5VSQywp_5_N2JboVT-LQDZ76UQXBvwZ4KfdQ06jAPig@mail.gmail.com>

On Fri, Oct 3, 2014 at 7:28 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> Is there a reason why we can't have the new opcode simply replace the top stack item with the block height of the txout being redeemed?

This would not be soft-forking compatible.

It also would be unsafe in that it would result in transactions which
once mined could not be restored in a reorg through no fault of the
participants, which makes the coins less fungible and differently safe
to accept. It risks creating weird pressures around immediate block
admission since a one additional block delay could forever censor such
a transaction (E.g. increases the power of single miners to censor or
steal). Avoiding this is a conscious decision in Bitcoin and also part
of the justification for the 100 block maturity of newly generated
coins.

It also would require violating the script/transaction/block layering
more substantially, complicating implementations, and making the
validity of a script no longer a deterministic pure function of the
transaction.

Avoiding these issues is a conscious design in OP_CHECKLOCKTIMEVERIFY.
I would strenuously oppose a proposal which failed in any of these
respects.

> Then arbitrary logic could be implemented, including "output cannot be spent until a certain time" and also "output can ONLY be spent until a certain time," as well as complex logic with alternative key groups with differing time constraints.

You can already achieve the not spendable after logic with a
cancellation spend that moves the coin in the usual way. (Which
doesn't even require the participant be online, with the help of some
network service to queue unlocked transactions).

> OP_CHECKLOCKTIMEVERIFY, as conceived, seems too limited, IMHO.

It is intentionally so, and yet it covers the intended use cases;
including ones with alternative key groups, they are just not
exclusive.



From luke at dashjr.org  Fri Oct  3 17:50:26 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 3 Oct 2014 17:50:26 +0000
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
	a txout from being spent until an expiration time
In-Reply-To: <1987325.zKPNeYyO8K@crushinator>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
Message-ID: <201410031750.27323.luke@dashjr.org>

On Friday, October 03, 2014 2:28:17 PM Matt Whitlock wrote:
> Is there a reason why we can't have the new opcode simply replace the top
> stack item with the block height of the txout being redeemed? Then
> arbitrary logic could be implemented, including "output cannot be spent
> until a certain time" and also "output can ONLY be spent until a certain
> time," as well as complex logic with alternative key groups with differing
> time constraints.

This cannot be done in a softfork.

Furthermore, "output can ONLY be spent until a certain time" contradict's 
Bitcoin's present security assumptions: that assuming a honest sender, the 
transaction will remain valid and simply re-confirm if a reorg kicks it out.

Luke



From mike at plan99.net  Fri Oct  3 20:58:28 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 3 Oct 2014 22:58:28 +0200
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <201410031750.27323.luke@dashjr.org>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
Message-ID: <CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>

Alright. It seems there's no real disagreement about how the opcode
behaves. Perhaps a time limit would be appropriate to stop people creating
outputs locked for 100 years .... is bitcoin even likely to exist in 100
years? The entire history of computing is not even that old, seems hard to
imagine that it'd be good for anything beyond wasting space in the
database. But this is a minor point.

So I guess it's time to start the deployment discussion.

Bitcoin is a consensus system. It works best when everyone is following
exactly the same rules at the same time. A soft fork works against this
principle by allowing nodes to think they're following the majority
ruleset, even if they aren't, effectively downgrading them to something a
bit like SPV security without them realising.

A hard fork has multiple desirable properties. Most importantly, it means a
node can detect it's no longer in the consensus because it'll find its own
chain height has diverged significantly from its peers. Core already has
code that knows how to detect this condition and log errors about it as
well as running the alertnotify script i.e. emailing the admin. Ideally it
would also stop serving work so miners shut down or fail over, but this is
easily added to the CheckForkWarningConditions() function.

In other words, this gives the cleanest failure we can give, such that any
procedures a node operator has put in place to alert them of divergence
will be triggered.  Any code which is waiting for confirmations will wait
forever at this point, thus minimising the risk of loss.

Additionally, forcing old peers to fall behind means SPV clients will pick
the right chain, and not end up downloading transactions or blocks that are
about to be doomed at the next re-org. They can easily choose to ignore
transactions relayed by peers that are too far behind and thus not end up
accepting transactions that are no longer valid according to the majority
(a scenario which can cause monetary loss).

I don't think hard forks should be scary. Mechanisms are in place to warn
people and they can be scheduled with plenty of time in advance. The main
stated justification for a soft fork is backwards compatibility, but in a
system like Bitcoin you really don't want to be running behind the
consensus and it's hard to imagine any node operator deliberately choosing
to stay on the wrong side of the fork. It's not like other software where
people can choose to skip an upgrade and things still work just like before.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/328db159/attachment.html>

From jgarzik at bitpay.com  Fri Oct  3 23:12:11 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 3 Oct 2014 19:12:11 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator> <201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
Message-ID: <CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>

RE " It's not like other software where people can choose to skip an
upgrade and things still work just like before."

If you're a minority, sure you can.  Still a few nutters out there on
a 0.3.x codebase, including one or two inattentive,
now-inconsequential miners.

There is some headroom built in for just that... less disruptive
upgrades that don't require 100%.



On Fri, Oct 3, 2014 at 4:58 PM, Mike Hearn <mike at plan99.net> wrote:
> Alright. It seems there's no real disagreement about how the opcode behaves.
> Perhaps a time limit would be appropriate to stop people creating outputs
> locked for 100 years .... is bitcoin even likely to exist in 100 years? The
> entire history of computing is not even that old, seems hard to imagine that
> it'd be good for anything beyond wasting space in the database. But this is
> a minor point.
>
> So I guess it's time to start the deployment discussion.
>
> Bitcoin is a consensus system. It works best when everyone is following
> exactly the same rules at the same time. A soft fork works against this
> principle by allowing nodes to think they're following the majority ruleset,
> even if they aren't, effectively downgrading them to something a bit like
> SPV security without them realising.
>
> A hard fork has multiple desirable properties. Most importantly, it means a
> node can detect it's no longer in the consensus because it'll find its own
> chain height has diverged significantly from its peers. Core already has
> code that knows how to detect this condition and log errors about it as well
> as running the alertnotify script i.e. emailing the admin. Ideally it would
> also stop serving work so miners shut down or fail over, but this is easily
> added to the CheckForkWarningConditions() function.
>
> In other words, this gives the cleanest failure we can give, such that any
> procedures a node operator has put in place to alert them of divergence will
> be triggered.  Any code which is waiting for confirmations will wait forever
> at this point, thus minimising the risk of loss.
>
> Additionally, forcing old peers to fall behind means SPV clients will pick
> the right chain, and not end up downloading transactions or blocks that are
> about to be doomed at the next re-org. They can easily choose to ignore
> transactions relayed by peers that are too far behind and thus not end up
> accepting transactions that are no longer valid according to the majority (a
> scenario which can cause monetary loss).
>
> I don't think hard forks should be scary. Mechanisms are in place to warn
> people and they can be scheduled with plenty of time in advance. The main
> stated justification for a soft fork is backwards compatibility, but in a
> system like Bitcoin you really don't want to be running behind the consensus
> and it's hard to imagine any node operator deliberately choosing to stay on
> the wrong side of the fork. It's not like other software where people can
> choose to skip an upgrade and things still work just like before.
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From tomh at thinlink.com  Fri Oct  3 23:29:07 2014
From: tomh at thinlink.com (Tom Harding)
Date: Fri, 03 Oct 2014 16:29:07 -0700
Subject: [Bitcoin-development] bitcoinj 0.12
In-Reply-To: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
References: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
Message-ID: <542F3143.5080903@thinlink.com>


I'm stunned by what bitcoinj can do these days.  Just reading the 
release notes gives one app ideas.  Mike, Awesome.


On 10/3/2014 5:49 AM, Mike Hearn wrote:
> I'm pleased to announce version 0.12 of bitcoinj, one of the worlds 
> most popular Bitcoin libraries.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/8bec625f/attachment.html>

From pete at petertodd.org  Sat Oct  4 00:38:50 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 3 Oct 2014 17:38:50 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
Message-ID: <20141004003850.GA23202@muck>

On Fri, Oct 03, 2014 at 07:12:11PM -0400, Jeff Garzik wrote:
> RE " It's not like other software where people can choose to skip an
> upgrade and things still work just like before."
> 
> If you're a minority, sure you can.  Still a few nutters out there on
> a 0.3.x codebase, including one or two inattentive,
> now-inconsequential miners.
> 
> There is some headroom built in for just that... less disruptive
> upgrades that don't require 100%.

Anyway the stuff Mike is saying about being able to detect upgrades is
incorrect - detecting an upgrade is *easier* with a soft-fork, just look
at the block header nVersion numbers and warn the user if they increase
beyond what you know is valid. Bitcoin Core implements this IIRC, and
bitcoinj should.

Someone with more time should write all this up for the bitcoin.org
developer docs BTW... There's extensive discussions on #bitcoin-dev and
others about all of this.

-- 
'peter'[:-1]@petertodd.org
000000000000000012367d385ad11358a4a1eee86cf8ebe06a76add36dfb4622
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/6049aa93/attachment.sig>

From kristovatlas.lists at gmail.com  Sat Oct  4 06:44:30 2014
From: kristovatlas.lists at gmail.com (Kristov Atlas)
Date: Sat, 4 Oct 2014 02:44:30 -0400
Subject: [Bitcoin-development] bitcoinj 0.12
In-Reply-To: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
References: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
Message-ID: <CAGH37SJ_vdpM6iWbegggRULVKkg7GV=yNQafWv-hyC4MbfccvA@mail.gmail.com>

Congrats, and thanks for your hard work.

I hate to reply to a release that includes a huge number of new features
with yet another feature request, so -- with apologies -- any plans for
bitcoinj to support stealth address sending and/or receiving?

https://wiki.unsystem.net/en/index.php/DarkWallet/Stealth

Sincerely,
Kristov Atlas
On Oct 3, 2014 8:50 AM, "Mike Hearn" <mike at plan99.net> wrote:

> I?m pleased to announce version 0.12 of bitcoinj, one of the worlds most
> popular Bitcoin libraries. It is used by at least four Android wallets,
> three desktop wallets, blockchain.info, Circle, biteasy, CryptoCorp,
> Lighthouse, BlueMatt?s relay network, bitpos, countless alt coin wallets,
> for academic research projects and much more.
>
> This release represents 8 months of work. The biggest new feature is HD
> wallets. Other notable enhancements include a bundled Tor client that can
> be activated with one line of code, support for multisig wallets, much
> faster and deterministic ECDSA, many API improvements and big upgrades to
> the included GUI wallet which can be seen in a new screencasted tutorial
> <https://bitcoinj.github.io/simple-gui-wallet>.
>
> The commit hash of bitcoinj 0.12
> is 83a9a71f3fff3f223d0737ad758b519a39dbbd62.
>
> New in this release
>
>    - Privacy enhancements:
>       - Wallets are now hierarchical and deterministic (HD) by default,
>       using the BIP32 specification. Support for mnemonic codes (BIP 39) is also
>       included. Change and receive addresses are no longer being reused. Old
>       wallets are upgraded in place using the private key of the oldest
>       non-rotating key as the seed bytes, so old backups remain valid.
>       - Thanks to devrandom, we have an integrated Tor mode using the
>       Orchid library. The user does not have to install the Tor client as it?s
>       all pure Java. WalletAppKit users can enable usage of Tor with a single
>       line of code. This support should be considered experimental for now.
>    - Thanks to Kosta Korenkov, we have an experimental multisig wallets
>    implementation. Multisig (also ?married?) wallets are HD wallets that are
>    connected to a third party risk analysis service or device. When married,
>    the wallet tracks multiple BIP32 key trees, keeps them in sync and starts
>    vending P2SH addresses.
>       - As part of this work, transaction signing is now pluggable.
>       TransactionSigner implementations can be added to the wallet and will be
>       serialized into and out of the users saved wallet file. Signers are given a
>       transaction to sign in sequence. This is intended for risk analysis
>       providers to provide a class that talks to their server to get a signature
>       of the right form, so that all bitcoinj based wallets can be easily
>       upgraded to support the new provider.
>    - Reject messages are now deserialized and logged, though not yet
>    exposed in the API.
>    - Upgraded to Guava 16 and Bouncy Castle 1.51. Thanks to Peter Dettman
>    and the rest of the Bouncy Castle team, bitcoinj now uses deterministic
>    ECDSA for signing and we?re now using an accelerated secp256k1
>    implementation that exploits the special properties of this curve, for
>    dramatically faster calculations.
>    - Payment protocol code improvements: Some X.509 utility code was
>    refactored out of PaymentSession for general usage. StartCom was added to
>    the default trust store which was promoted to override the system trust
>    store on non-Android platforms. A command line tool to dump requests to
>    stdout was added.
>    - Thanks to Andreas Schildbach:
>       - We are now BIP62 (canonical push encodings) compliant.
>       - A new Coin class replaces usage of BigInteger for marking values
>       that are quantities of bitcoin. Formatting has moved into the new
>       MonetaryFormat class.
>       - The wallet now saves the fee paid on transactions we calculated
>       ourselves. This is useful for putting it into a wallet user interface.
>       - Transactions can have user memos and exchange rates attached,
>       that will be saved by the wallet.
>       - Support for decrypting BIP 38 protected private keys has been
>       added.
>       - Checkpoints can now be stored textually as well as in the old
>       binary format.
>    - There is also a new BtcFormat API that provides an alternative to
>    MonetaryFormat that plugs in to the java.text framework.
>    - Added new DNS seed from Addy Yeow.
>    - Wallets can now have string->byte[] mappings attached to them, for
>    lighter weight extensions.
>    - Thanks to Richard Green, there is now a Python version of the
>    ForwardingService program from the getting started tutorial. This shows how
>    to use bitcoinj from Python using the Jython interpreter.
>    - bitcoinj now probes localhost for a Bitcoin node and automatically
>    uses that instead of the P2P network, when present. This means any bitcoinj
>    based app can be easily upgraded from SPV to full security just by running
>    Core at the same time: no setup needed.
>    - Thanks to Michael Bumann, there are now more example apps showing
>    how to use parts of the API.
>    - WalletTemplate/WalletAppKit improvements. WalletTemplate is a demo
>    app that shows how to create a cross-platform GUI wallet with a modern
>    style and 60fps animations. WalletAppKit is a very high level API for
>    creating apps that have a Bitcoin wallet:
>       - Now supports mnemonic code and restore from seed words. A date
>       picker is provided to cut down on the amount of chain that needs to be
>       rescanned.
>       - Support for encrypting wallets. Password is requested when
>       needed. The difficulty of the scrypt function is selected to always take a
>       fixed number of seconds even if hardware gets more powerful.
>       - Some new animation and utility code backported from Lighthouse.
>       - Tor support
>    - Thanks to Martin Zachrison, the micropayment channels implementation
>    has received various improvements.
>    - Thanks to Eric Tierney (Circle), the Postgres store can now take a
>    custom schema.
>    - The Bloom filtering API has been extended so FilteredBlock objects
>    can now be produced from Block objects given a BloomFilter. Previously
>    there was support for client-side Bloom usage but no implementation of the
>    generation part.
>    - Many other bugfixes, cleanups, minor tweaks and small new APIs.
>
> *Documentation and tutorials*
>
>    - A JavaScript tutorial <https://bitcoinj.github.io/getting-started-js> has
>    been added, showing how to use bitcoinj from this language. More tutorials
>    in other languages will come in future.
>    - The ?Working with the wallet
>    <https://bitcoinj.github.io/working-with-the-wallet>? document has
>    been significantly extended to cover encryption, watching wallets, HD
>    wallets and multisig/married wallets.
>    - A new document and accompanying screencast
>    <https://bitcoinj.github.io/simple-gui-wallet> shows how to extend the
>    WalletTemplate app to have a transactions list, and then make a
>    native/bundled packages that don?t need the user to install Java. By
>    following this tutorial you will learn how to make a basic cross platform
>    desktop wallet of your own.
>    - All other docs were refreshed to the latest APIs.
>
> *API changes*
>
>    - The package name has changed to org.bitcoinj and the core Maven
>    artifact name is now ?bitcoinj-core?. You can auto-port most of your code
>    by running find . -name '*.java' \| xargs sed -i .bak
>    's/com.google.bitcoin./import org.bitcoinj./g
>    - Wallet.completeTx now throws more precise unchecked exceptions in
>    edge cases, instead of IllegalArgumentException.
>    - The use of BigInteger to represent quantities of Bitcoin has been
>    replaced with the more efficient, type safe and useful class Coin. Coin is
>    mostly source compatible with BigInteger so you can probably just do a
>    search and replace to update your codebase.
>    Utils.bitcoinValueToFriendlyString and friends moved to CoinFormat.
>    - NetworkParameters.getProofOfWorkLimit was renamed to getMaxTarget
>    for consistency with other Bitcoin codebases.
>    - The library no longer uses the misleading term ?nanocoins? to mean
>    satoshis (the old term predated the use of the word satoshi to describe the
>    smallest possible amount of bitcoin).
>    - TransactionConfidence no longer tracks total work done.
>    - Because outputs are now shuffled any code during that assumes the
>    ordering is preserved will break. You can set the shuffleOutputs field of
>    SendRequest to false to disable this behaviour if you need to.
>    - The ECKey and HD API?s have changed quite a bit: several
>    constructors were replaced with clearer static factory methods that make it
>    more obvious how their parameters are interpreted. The new methods don?t
>    change their behaviour depending on the pattern of nulls passed into them.
>    - Some unit testing utilities have been moved to the new testing
>    subpackage and cleaned up/rearranged. It should be easier to write unit
>    tests for your app that need a simulated network now. DeterministicKey now
>    derives from ECKey.
>    - We now use Utils.HEX.encode() and Utils.HEX.decode() to do
>    translation to and from base 16.
>    - Transaction.hashTransactionForSignature was renamed to just
>    hashForSignature.
>    - The subVer string sent by bitcoinj now has a lower cased first
>    component.
>
>
>
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
>
> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141004/1f0ea69d/attachment.html>

From mike at plan99.net  Sat Oct  4 12:58:19 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 4 Oct 2014 14:58:19 +0200
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <20141004003850.GA23202@muck>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
Message-ID: <CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>

>
> Anyway the stuff Mike is saying about being able to detect upgrades is
> incorrect - detecting an upgrade is *easier* with a soft-fork, just look
> at the block header nVersion numbers and warn the user if they increase
> beyond what you know is valid. Bitcoin Core implements this IIRC, and
> bitcoinj should.
>

Nobody said hard forks shouldn't have an associated block version number
increase - that's a straw man. They should! The difference is only whether
older clients are presented with data they would refuse to accept thus
ensuring they don't accept the new version blocks.

Meanwhile, what I said *is* correct. New version numbers result in only a
log print. Being hard forked off results in both log prints *and* the
-alertnotify being run: it's noisier, and if the user followed the
instructions printed to the console when there is no config file present,
he/she should also get an email or some other kind of more meaningful alert.

Finally, please stop trying to imply that all this is settled and I'm
somehow an idiot for bringing it up. You've done that on the pull request
and now here, it gives me a headache. Instead of making hand-waving
references to "stuff on IRC ages ago", explain why it's better to keep
these nodes in some fantasy world where they think they're fully validating
but are actually not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141004/0be3ed8c/attachment.html>

From mike at plan99.net  Sat Oct  4 13:26:39 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 4 Oct 2014 15:26:39 +0200
Subject: [Bitcoin-development] bitcoinj 0.12
In-Reply-To: <CAGH37SJ_vdpM6iWbegggRULVKkg7GV=yNQafWv-hyC4MbfccvA@mail.gmail.com>
References: <E3D224C5-302E-494C-92CD-7DEC85284201@plan99.net>
	<CAGH37SJ_vdpM6iWbegggRULVKkg7GV=yNQafWv-hyC4MbfccvA@mail.gmail.com>
Message-ID: <CANEZrP3p3CKV-PeXsN6AtDc1=65SCnhQdhvZOd-iA7ZG_3HLnA@mail.gmail.com>

Hey Kristov,

> I hate to reply to a release that includes a huge number of new features
> with yet another feature request, so -- with apologies -- any plans for
> bitcoinj to support stealth address sending and/or receiving?
>
Stealth addresses and SPV don't mix well, so no. I wrote up a description
of how to do something similar with the payment protocol here:

https://medium.com/@octskyward/ecdh-in-the-payment-protocol-cb2f81962c1b

Because you can send data around outside the block chain on private
channels, with the pp the same issues don't crop up.

At the moment there are no concrete plans what goes into the next release.
I will be focusing on fully launching Lighthouse and crowdfunding for
decentralisation/crypto related projects, so I won't be doing any major
feature work on bitcoinj. Luckily it's become quite an active project now
and there are lots of contributors, so things won't stand still.

If I were to tackle a big project the next one would not be privacy
related. It'd be refactoring the wallet so it doesn't store transactions
directly anymore, just unspent outputs. Bitcoinj has always been largely
driven by the needs of Andreas' mobile app, and right now the top user
reported problem there is people hitting the scalability limits of the
current design (e.g. they are mining directly into their phone's wallet).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141004/55bdfed8/attachment.html>

From sergiolerner at certimix.com  Sun Oct  5 23:00:29 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Sun, 05 Oct 2014 20:00:29 -0300
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
Message-ID: <5431CD8D.7050508@certimix.com>

I would like to share with you a vulnerability in the Bitcoin protocol
I've been thinking of which might have impact on the future of Bitcoin.
Please criticize it!

*The Freeze on Transaction Problem
*

The freeze problem occurs if someone publishes a transaction with fees
much higher than the block subsidy. I don't remember who described the
attack first. Suppose that, by mistake, a transaction is published with
50 BTC in fees. The transaction is included in a block at height n. If
everyone acts rationally in his own interest, then the best choice for
the remaining miners is to try to mine a competing block at the same
height n including the high-fee transaction, to collect the fee for
themselves. All the miners having solved the block at height n, now move
on mining at height (n+1). But they won't choose each other branches
until one branch is sufficiently longer so that it is better to switch
to it and abandon their own branch rather than try to keep the block
with the high fee. This case is different from the real block
competition case we see periodically on the blockchain, where the miners
are generally split between two branches. Here there are multiple
branches competing. If there are 10 "top" miners each having 10% of the
network hashing power, then 10 different branches will compete. The
analysis for this case is similar to the Gambler's Ruin problem analysis
present in the Satoshi paper, but with a fixed constant monetary
incentive not to switch. Since the incentive to switch grows
exponentially with the branch length difference, any initial constant is
diluted. In the special and rare case that all the miners have exactly
the same hashing power, then the network diverges, and this is
equivalent as having two miners having exactly 50% of the hashing power
each. So in principle the freeze on transaction problem is just a
temporary disruption in the network, but not a fatal halt. Nevertheless,
since during the freeze period each miner is mining on his own branch,
it also means that moving forward with blocks is a lot slower. Assuming
10 miners having 10% of the total hashing power each (+/- 3%), the
network becomes 10 times slower. I simulated it with a 50 BTC tx freeze
fee, and 10 miners, and it takes approximately 6 blocks to converge, so
the freeze time is approximately 60 times the block interval, or 10
hours. If the distribution is approximately 25% of the hashing power for
each top miner, the freeze time is 4 hours.

Obviously what's needed for the freeze problem to occur is that miners
are 100% rational, greedy and prepared. They need to have a modified
version of bitcoind which can automatically detect a high-fee
transaction and prevent adding to the best chain a not-owned block
containing such transaction. There will be no time for the miners to
patch bitcoind if such transaction is manually spotted. Also the latest
versions of bitcoind have preventions not to allow high fees by mistake.
So the freeze problem is currently non-existent, but may pop up in the
future in form of a state-sponsored attack.

*The Freeze problem as an Attack*

If an attacker plans to repeat such attack periodically at the expense
of wasting a lot of BTC, there is little the current protocol can do,
because miners will be prepared to take advantage of the attack. If the
attacker issues a new fee burning transaction before the network
converges, then the attacker can maintain incentives to keep every miner
separated in his own branch. So wasting 50 BTC every 4 hours, an
attacker can maintain the network frozen forever.  Even if we restrict
the maximum fee per transaction, the scripting system has infinite ways
to create transactions whose output can be taken by anyone, and the
attacker can announce the method miners can use to collect those BTC and
even prepare and publish the bitcoind patches to automate collecting
those transaction outputs.

The best thing the community can do is act together and cooperate to
share the high transaction fee. This will neutralize the attack
completely and allow miners to earn extra bitcoins. But cooperation in
the Bitcoin community has never been easy. There is a technical solution
which is to modify the Bitcoin protocol so that every transaction output
has a maturity time of 6 blocks, and if a transaction output is redeemed
multiple times in a 6 block interval, then the BTC amount is split
between all redeemers, and also fees would be automatically shared in a
6 block sliding window. At a first glance, this provides a way for
miners to cooperate even anonymously and there is no immediate drawback,
but an in depth analysis is necessary.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141005/e58c0714/attachment.html>

From gmaxwell at gmail.com  Sun Oct  5 23:40:43 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 5 Oct 2014 16:40:43 -0700
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <5431CD8D.7050508@certimix.com>
References: <5431CD8D.7050508@certimix.com>
Message-ID: <CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>

On Sun, Oct 5, 2014 at 4:00 PM, Sergio Lerner <sergiolerner at certimix.com> wrote:
> I would like to share with you a vulnerability in the Bitcoin protocol I've
> been thinking of which might have impact on the future of Bitcoin. Please
> criticize it!
> The Freeze on Transaction Problem

I should point you to some of the tools that have been discussed in
the past which are potentially helpful here:

The first is the use of locktime on normal transactions.  This
behavior is already in Bitcoin core git:   The idea is that users of
the system should locktime their transaction at a point as high as
they expect it to get included.  If used well this means that there
should always be a base of fees which can only be collected by future
blocks, creating an incentive to move forward.  This may be
particularly effective if the limitations on blocksize mean that there
is always a healthy standing load.

The second is having block commitments in transactions
(https://en.bitcoin.it/wiki/User:Gmaxwell/alt_ideas). The idea is that
the data under signature in a transaction could commit to some recent
block which _must_ be in the chain or the transaction's fee cannot be
collected (or, at least, not all of the fee).  This would allow
transacting users to 'vote with their fees' on the honest chain.
Arguably this could also be used to pay for doublespending forks, but
you can already do that by paying fees via a chain that stems from the
doublespend.  This greatly complicates strategy for forking miners,
since future transactions which you haven't even seen yet may have
fees conditional on the honest chain.

I think both of the above are obviously useful, should be done, but
don't completely address the concern, they may be adequate.

The third is fee forwarding.  An example form would be that the miner
gets half the fees, the rest are added to a pool which pays out half
in every successive block.  This can prevent unusually high fees from
making as much reorg pressure and more correctly models what people
would like to pay for: getting their txn buried.   The huge problem
with this class is that miners can demand users pay fees "out of
band", e.g. with additional txouts (just make a different version of
the tx for each miner you wish to pay) and escape the process.  I have
had some notions about fees that come in the form of adjusting the
difficulty of creating a block slightly (which is something that can't
be paid out of band), but such schemes becomes very complicated very
fast.  I am unsure if any form of fee forwarding is workable.

Something you might want to try to formalize in your analysis is the
proportion of the network which is "rational" vs
"honest"/"altruistic".  Intuitively, if there is a significant amount
of honest hashrate which is refusing to aid the greedy behavior even
at a potential loss to themselves this strategy becomes a loser even
for the purely greedy participants. It would be interesting to
characterize the income tradeoffs for different amounts of altruism,
or whatever convergence problems an attempt by altruistic
participaints to punish the forkers might create.



From gmaxwell at gmail.com  Sun Oct  5 23:50:56 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 5 Oct 2014 16:50:56 -0700
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>
References: <5431CD8D.7050508@certimix.com>
	<CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>
Message-ID: <CAAS2fgTXWznKYCcqAP_+CkaoGikL1sTnvPnf2WGHS=MbYGsw+w@mail.gmail.com>

On Sun, Oct 5, 2014 at 4:40 PM, Gregory Maxwell <gmaxwell at gmail.com>
> I should point you to some of the tools that have been discussed in
> the past which are potentially helpful here:

Ah, I should also mention a somewhat more far out approach which helps
here as a side effect:

If transactions were using the BLS short signature scheme (a very
compact EC signature based on pairing cryptography) there is a scheme
so that you securely can aggregate the signatures from multiple
messages into a single signature (also has nice bandwidth properties)
and still verify it. It also works recursively, so aggregates can be
further aggregated.

A consequence of this is that you cannot remove a (set of)
signature(s) from the aggregate without knowing the (set of)
signature(s) by itself.

If the coinbase transaction also contains a signature and if some
non-trivial portion of fee paying users relayed their transaction
privately to miners it,  then other miners would only learn of the
transaction in aggregated form.  Without knowing the transaction by
itself they could not pull it out of a block separately from the
coinbase payment and add it to their own block in a fork.

(In general this provides several anti-censorship properties, since if
someone passed you an aggregate of several transactions you could only
accept or reject them as a group unless you knew the members
separately).

The use in aggregation can be done in a way which is purely additive
(e.g. in addition to regular DSA signatures), so even if the
cryptosystem is broken the only harm would be allowing
disaggregation... but unfortunately the pairing crypto is pretty slow
(verification takes a 0.5ms-ish pairing operation per transaction).



From gmaxwell at gmail.com  Mon Oct  6 00:01:46 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 5 Oct 2014 17:01:46 -0700
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <CAKJtGK2hdO+eTv6Hf9OhdetMmgTARHwQmmdEt_K489QFJOatPA@mail.gmail.com>
References: <5431CD8D.7050508@certimix.com>
	<CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>
	<CAKJtGK2hdO+eTv6Hf9OhdetMmgTARHwQmmdEt_K489QFJOatPA@mail.gmail.com>
Message-ID: <CAAS2fgSRnnjPdW0oHCkE=deLLv8w0z0syGeeXjb1EaF1xLrtJQ@mail.gmail.com>

On Sun, Oct 5, 2014 at 4:54 PM, Jorge Tim?n <jtimon at blockstream.io> wrote:
> In any case, it is interesting to think about this things since mining
> subsidies will eventually disappear and then transaction fees will
> ALWAYS be higher than subsidies.

You can imagine that instead of subsidy Bitcoin came with a initial
set of nlocktimed transactions that pay fees, one block at a time, for
each block from the start until the subsidy goes away.

Perhaps that mental model might make it clear why some people think
that the nlocked transactions and the block size being lower than the
instant offered demand (there is always a backlog) are both things
which address the concern of this thread. :)



From jtimon at blockstream.io  Sun Oct  5 23:54:38 2014
From: jtimon at blockstream.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 6 Oct 2014 01:54:38 +0200
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>
References: <5431CD8D.7050508@certimix.com>
	<CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>
Message-ID: <CAKJtGK2hdO+eTv6Hf9OhdetMmgTARHwQmmdEt_K489QFJOatPA@mail.gmail.com>

On Mon, Oct 6, 2014 at 1:40 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> Something you might want to try to formalize in your analysis is the
> proportion of the network which is "rational" vs
> "honest"/"altruistic".  Intuitively, if there is a significant amount
> of honest hashrate which is refusing to aid the greedy behavior even
> at a potential loss to themselves this strategy becomes a loser even
> for the purely greedy participants. It would be interesting to
> characterize the income tradeoffs for different amounts of altruism,
> or whatever convergence problems an attempt by altruistic
> participaints to punish the forkers might create.

Not only that, greedy miners may actually have an incentive to just
follow the longest chain. Say I'm a small miner and I know that the
chances of re-mining the high tx and getting that block into the
longest chain are minimal or null. Then I will probably prefer to just
mine on top of the longest chain.
So "If everyone acts rationally in his own interest, then the best
choice for the remaining miners is to try to mine a competing block at
the same height n including the high-fee transaction, to collect the
fee for themselves" is not necessarily true.
p * 50 can be lower than q * 25 if p < 2*q. P and q depend on what
everyone is doing, not just you.

In any case, it is interesting to think about this things since mining
subsidies will eventually disappear and then transaction fees will
ALWAYS be higher than subsidies.



From alex.mizrahi at gmail.com  Mon Oct  6 06:42:40 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Mon, 6 Oct 2014 09:42:40 +0300
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <5431CD8D.7050508@certimix.com>
References: <5431CD8D.7050508@certimix.com>
Message-ID: <CAE28kUTBbT5_Jh-aP_rVkLYMSdY+XeQO39LFh+EFHqSp-wFXOQ@mail.gmail.com>

I've heard about this idea from TierNolan. Here's some quick an dirty
analysis:

Suppose the last known block claimed a large tx fee of L. A miner who owns
1/N of the total hashrate needs to choose between two strategies:

1. Mine on top of that block and win usual reward R with probability 1/N.
2. Mine on top of the previous block, trying to make two blocks in a row,
might get reward L with probability 1/N^2.

Thus for the first strategy expected payoff is R/N, and for the second the
expected pay-off is L/N^2.

Second strategy is viable if R/N < L/N^2,
 R < L/N.

Now suppose the miner who claimed the unusually large reward will share it
with the next miner, for example, using coinbase output with OP_TRUE. If
that shared reward Rs is higher than L/N^2, then the next miner will be
better off mining on top of that block.

This doesn't require protocol changes(*) and can be simply incorporated
into a piece of code which decides what to do when a transaction with
unusually large fee appears. (I.e. it will automatically share the fee, and
others will recognize that). And if the biggest miner has 25% of all
hashrate, sharing 25% of your loot doesn't sound that bad.

(*) Except one problem: coinbase maturity rules won't allow one to share
the fee with the next miner.
So some protocol changes are required. But changes which affect coinbase
maturity and sharing are probably going to be simpler and smaller than what
Sergio have proposed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141006/44b0b2bc/attachment.html>

From mike at plan99.net  Mon Oct  6 11:02:13 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 6 Oct 2014 13:02:13 +0200
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <CAAS2fgSRnnjPdW0oHCkE=deLLv8w0z0syGeeXjb1EaF1xLrtJQ@mail.gmail.com>
References: <5431CD8D.7050508@certimix.com>
	<CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>
	<CAKJtGK2hdO+eTv6Hf9OhdetMmgTARHwQmmdEt_K489QFJOatPA@mail.gmail.com>
	<CAAS2fgSRnnjPdW0oHCkE=deLLv8w0z0syGeeXjb1EaF1xLrtJQ@mail.gmail.com>
Message-ID: <CANEZrP2_9tRGpZ4gySHvohy0g2PsaQF9u+-tZ-bmn8JtgweihA@mail.gmail.com>

>
> the block size being lower than the instant offered demand (there is
> always a backlog) are both things which address the concern of this thread.
> :)


I'm skeptical such a situation can ever be stable. People have no incentive
to create a transaction that will remain stuck in the backlog forever,
regardless of the effect it may have on the rest of the system.

If someone invents a business model in which lots of payments are made,
with fees, but that only clear probabilistically, perhaps such a situation
could occur. But otherwise I think we have to assume that people won't make
transactions that will lose the competition game, and instant demand would
only ever be roughly equal to supply.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141006/960af166/attachment.html>

From tamas at bitsofproof.com  Mon Oct  6 12:22:51 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Mon, 6 Oct 2014 05:22:51 -0700
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <CANEZrP2_9tRGpZ4gySHvohy0g2PsaQF9u+-tZ-bmn8JtgweihA@mail.gmail.com>
References: <5431CD8D.7050508@certimix.com>
	<CAAS2fgQ-MrmBGjcuqYdvfs0g2b6+vAOVR3sUCCyQy386CY8EDA@mail.gmail.com>
	<CAKJtGK2hdO+eTv6Hf9OhdetMmgTARHwQmmdEt_K489QFJOatPA@mail.gmail.com>
	<CAAS2fgSRnnjPdW0oHCkE=deLLv8w0z0syGeeXjb1EaF1xLrtJQ@mail.gmail.com>
	<CANEZrP2_9tRGpZ4gySHvohy0g2PsaQF9u+-tZ-bmn8JtgweihA@mail.gmail.com>
Message-ID: <C91A515E-E08F-4112-B4A3-1B0FCF5E60C8@bitsofproof.com>

Note that the problem might arise also by a bug / accident and not as an attack.

Since value spent is not part of the signature it is easy to create an arbitrary fee by a defective wallet software.
Collecting that huge fee might provide a higher incentive to miner than the block subsidy on the trunk.

Assuming miner are fully rational, they might even form a temporary coalition to claim the fee:
The miner who mines forking block might offer part of the fee gained in a similar transaction to
other miners, so they help to extend his fork. A sufficiently high stake could trigger a long
fork ?battle? of ad-hoc coalitions.

Addressing the known bug of the signature hash, that it does not include the value spent,
would have other positive effects, e.g. for resource limited hardware wallets.

Interpretation of an OP_NOP for a value hashing signature check were suggested by Alan Reiner
discussed earlier on bitcointalk.

Tamas Blummer


From sergiolerner at certimix.com  Mon Oct  6 13:21:15 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Mon, 06 Oct 2014 10:21:15 -0300
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
 (FRONT)
In-Reply-To: <CAE28kUTBbT5_Jh-aP_rVkLYMSdY+XeQO39LFh+EFHqSp-wFXOQ@mail.gmail.com>
References: <5431CD8D.7050508@certimix.com>
	<CAE28kUTBbT5_Jh-aP_rVkLYMSdY+XeQO39LFh+EFHqSp-wFXOQ@mail.gmail.com>
Message-ID: <5432974B.4000606@certimix.com>

Comments between lines...

On 06/10/2014 03:42 a.m., Alex Mizrahi wrote:
> .....
>
> This doesn't require protocol changes(*) and can be simply
> incorporated into a piece of code which decides what to do when a
> transaction with unusually large fee appears. (I.e. it will
> automatically share the fee, and others will recognize that). And if
> the biggest miner has 25% of all hashrate, sharing 25% of your loot
> doesn't sound that bad.
The problem with this approach is that once the bitcoind has been
modified to allow this sharing of the high-tx fee by delegation, then
the same system can be used for an attack.
Let's call a system that makes the Optimum Rational Best-chain Selection
for maximizing profit "ORBS", just to give it a name. The system assures
that the best chain chosen is always the optimum in terms of profit,
taking into account fee delegation and all the game-theoretic incentives
derived. It's only a theoretical abstraction, but could be approximated
in practice.

The attack is called Chained Kickback DOuble-spend attack (or ?CHAKIDO?)
and is an extension of Bonneau's kickback attack. Basically the attack
is to create the ORBS patch, and start convincing miners to use it,
sending some probe high-fees tx.
Once you have ORBS working in a majority of the mining nodes, you can
perform a double-spend against a target like an exchange by:
- Buy some btc X
- Send those btc to an exchange (suppose the exchange requires 6
confirmations) in a transaction TX
- Immediately convert those btc to an alt-coin, and collect the alt-coins
- Create a high fee tx that is a double-spend of TX having a high fee Y
such that Y < X but Y triggers a ORBS reorganization.
- Profit
(This rollback attack was performed against whitecoin, I think)

This attack gets terrible powerful if there is no subsidy. You may need
500 blocks of confirmation to protect from a 10 BTC spend with current
fees and no subsidy. This is because once 100% of the nodes use ORBS,
the fee delegation is linear (it doesn't grow exponentially with the
number of blocks). So ORBS should never be implemented without
additional protective measures in merchant applications.
If we had a closed formula for ORBS, then all merchants could compute
the minimum confirmation blocks such that always Y > X, but such formula
involves many unknowns which would need to be dynamically estimated, and
also it should take into account the number of simultaneous payment
attempts.

My conclusions are:
- We should never allow ORBS to be implemented unless merchants are also
aware of it. If are aware of ORBS then Bitcoin with no subsidy will be
become a terrible slow payment system so ...
- We could implement the protections that work even if some nodes
implement ORBS, such as fee and burn btc sharing, as I described before
- Or we need some high percentage of miners to be irrational, to force
ORBS fee delegation have an exponential decay.

Best regards,
Sergio.



From tamas at bitsofproof.com  Mon Oct  6 13:29:15 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Mon, 6 Oct 2014 06:29:15 -0700
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <5432974B.4000606@certimix.com>
References: <5431CD8D.7050508@certimix.com>
	<CAE28kUTBbT5_Jh-aP_rVkLYMSdY+XeQO39LFh+EFHqSp-wFXOQ@mail.gmail.com>
	<5432974B.4000606@certimix.com>
Message-ID: <DCDFAA23-015B-42C2-9094-02DEA6A9D296@bitsofproof.com>

Sergio,

you can call this an ORBS attack or an attempt of ad-hoc coalition forming for a fork.

Preparation Step:
Include a transaction sending a sizable amount between two of your own addresses in every block.
Miner can do this at zero cost in their own blocks.

Execution:
Embed into the preferred fork a transaction double spending the regular do-nothing transaction with one that offers a sufficiently high fee. This offers inceptive to rational miner to join the ad-hoc coalition for that fork.

Attempting to form an ad-hoc coalition using above steps is open to anyone, just cheaper and easier to execute for a miner. 

Fortunately cost for (cumulative) proof-of-work creates a lower bound to the incentive that need to be offered. So your worry
of times where block subsidy is low is unwarranted as cost of POW will be high.

I do not think ?disallowing? the implementation of rational mining is a viable option, since no one needs permission to implement whatever optimization he thinks is profitable and within the rules.

Tamas Blummer
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141006/c0751957/attachment.sig>

From gavinandresen at gmail.com  Tue Oct  7 15:50:45 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 7 Oct 2014 11:50:45 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
Message-ID: <CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>

On Sat, Oct 4, 2014 at 8:58 AM, Mike Hearn <mike at plan99.net> wrote:

>
>> Meanwhile, what I said *is* correct. New version numbers result in only
> a log print. Being hard forked off results in both log prints *and* the
> -alertnotify being run:
>

That is easy to change; I'll submit a pull request. It is a good idea to
get an -alertnotify sooner rather than later for EITHER a hard fork or a
soft-fork. Better to be told you have to upgrade while the block.version is
on its way to being a super-majority than after you are either hard-forked
off the main chain (or soft-forked).

I don't have any opinion on the hard- versus soft- fork debate. I think
either can work.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141007/788fa260/attachment.html>

From mike at plan99.net  Tue Oct  7 16:08:13 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 7 Oct 2014 18:08:13 +0200
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
Message-ID: <CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>

>
> That is easy to change; I'll submit a pull request.
>

That's certainly a useful improvement. It won't help the existing userbase
though - assuming CHECKLOCKTIMEVERIFY is to go in to the next major
release. If there's going to be an intermediate release (6 months?) which
lays the groundwork for future rule changes, it helps more.

It would be good if getblocktemplate was updated at the same time to serve
errors if the fork warning is active. I'd hope miners have some way to
automatically handle IBD/getting forked off the chain, but I guess some
(newer) pools might not, and refusing to serve work should be the safest
option that shuts them down.

I don't have any opinion on the hard- versus soft- fork debate. I think
> either can work.
>

P2SH was a soft fork and the sky did not fall, but miners did lose money
and waste electricity mining blocks on the wrong side of the chain:

https://bitcointalk.org/index.php?topic=75294.0

Presumably they didn't notice for longer because it looked like a run of
unusually bad orphaning luck. It seems safer to have a clean fork, with
alerts telling people during the lockin period before new rule enforcement
starts (and possibly automated termination if there's no upgrade by the
flag day?). Miners who ignore it would still risk losing money, but
merchants who wait for a block at least would not be at risk.

One open question is how can you actually trigger a hard fork? Coinbase
scriptSigs are not executed, so putting some ignored but failing opcode
sequence there wouldn't work. One possibility would be to have a special
invalid tx in the block that marks the start of new rule enforcement. New
nodes would know to ignore it. But this risks corrupting block explorers.
Alternatively the coinbase outpoint structure could have its hash set to 1
instead of 0.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141007/9f9292df/attachment.html>

From jeremie.dl at gmail.com  Tue Oct  7 17:32:10 2014
From: jeremie.dl at gmail.com (=?UTF-8?B?SsOpcsOpbWllIER1Ym9pcy1MYWNvc3Rl?=)
Date: Tue, 7 Oct 2014 19:32:10 +0200
Subject: [Bitcoin-development] Partial wallet rescan
Message-ID: <CAJqsvLB9JtvB=HmxYvg2HY_HFyecD=sekOO1moQg0PRs6BPa=w@mail.gmail.com>

Hi all,

Before starting to implement a patch for a specific need, I would like
to be sure that it was not written already and available somewhere.
This list is probably my best chance.

I would like to add an optional parameter <block_heigh> to "-rescan",
from which the rescan would then start. When performing the wallet
rescan, everything before the block number <block_heigh> would be
ignored.
Thus, it would do pretty much the same thing as the wallet birthday
mechanism (which relies on nTimeFirstKey), the difference being that
the point in time where to start would be *explicitly* given by the
user, at launch time, on the command line. Another possiblity is to
provide as parameter a time stamp instead of a block height; the
interesting part for me is that anyway that information is explicitly
provided by the user.

Regards,

Jeremie

--
Jeremie Dubois-Lacoste, PhD.
Belgian Bitcoin Association, Director.
Universit? Libre de Bruxelles, Post-Doctoral Researcher.



From sergiolerner at certimix.com  Tue Oct  7 19:04:40 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Tue, 07 Oct 2014 16:04:40 -0300
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
 (FRONT)
In-Reply-To: <543438E4.8080501@certimix.com>
References: <543438E4.8080501@certimix.com>
Message-ID: <54343948.1030400@certimix.com>



On 06/10/2014 08:43 p.m., Tom Harding wrote:
> On 10/5/2014 4:00 PM, Sergio Lerner wrote:
>> If everyone acts rationally in his own interest, then the best choice
>> for the remaining miners is to try to mine a competing block at the
>> same height n including the high-fee transaction, to collect the fee
>> for themselves.
>
> Sergio --
>
> Just some thoughts on your interesting problem.
>
>
> Since everybody but M10 is on equal footing, I would expect M10 to
> have some fixed advantage depending on assumptions, and the bigger the
> advantage, the shorter the "freeze time".
>

Yes, that's how simulation works. The problem is that the existence of
high-fee delays the decision to switch to M10. Since the network is
moving slower (because of fragmentation) the effect of the high-fee is
twofold: it delays the convergence because it promotes selfishness and
it delays convergence because it promotes fragmentation.

During that time window where the network is frozen, any other high-fee
transaction only makes things worse.  This is a very rare example where
a well distributed network (100 miners having 1% each) is much much
worse than 3 miners having 33% each.

Using the my previous terminology, automatic fee-sharing ("ORBS") is a
solution to the freeze problem ("FRONT") but opens the windows to
"CHAKIDO" double-spending. and CHAKIDO double-spending is a much worse
problem than FRONT.
But as Tamas pointed out, sooner or later someone will implement
something like ORBS, get over the critical mass of miner adoption, and
then the CHAKIDO problem will be inevitable.

The only clean solution to this problem is the DECOR+ protocol, which
shares block-rewards by including "uncles" (as GHOST does) and splitting
the reward between all miners at the same height until coinbase maturity
is over. This way the best choice is always cooperative.

PS: Using so many acronyms makes arguments much more concise, but
suggest we should have all the attack terminology described in a single
"Bitcoin Security Wiki"...
















From gmaxwell at gmail.com  Tue Oct  7 19:16:13 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 7 Oct 2014 19:16:13 +0000
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <54343948.1030400@certimix.com>
References: <543438E4.8080501@certimix.com>
	<54343948.1030400@certimix.com>
Message-ID: <CAAS2fgRdB_4XS9Q+MFLsNtXvSiYS9Ymh9SAPzcJ5aae+89vxFA@mail.gmail.com>

On Tue, Oct 7, 2014 at 7:04 PM, Sergio Lerner <sergiolerner at certimix.com> wrote:
> Using the my previous terminology, automatic fee-sharing ("ORBS") is a
> solution to the freeze problem ("FRONT") but opens the windows to
> "CHAKIDO" double-spending. and CHAKIDO double-spending is a much worse
> problem than FRONT.

I'm not following this. Perhaps I'm getting lost in terminology here.

It's already to provide double spending bounties to greedy-rational
miners, via a simple approach that has been known since at least early
in 2011.    I pay someone then create a later fraudulent doublespend
which is nlocked at the height the original payment occurred, paying
large fees. Then I spend the output of the fraudulent spend nlocked
one block higher, and spend the output of that one again, nlocked one
block higher, and so on... each step paying fees.

A hypothetical purely greedy miner which considers all sequences of
acceptable forks and transactions would see that they have higher
expected returns assisting the theft (assuming the honest party
doesn't fight back by also adopting a similar strategy), at least if
the population of greedy miners is large relative to altruistic ones.

I don't see how miners being able to roll forward fees makes anything
worse, since the transactions themselves can also roll forward fees.



From sergiolerner at certimix.com  Tue Oct  7 20:04:33 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Tue, 07 Oct 2014 17:04:33 -0300
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
 (FRONT)
In-Reply-To: <CAAS2fgRdB_4XS9Q+MFLsNtXvSiYS9Ymh9SAPzcJ5aae+89vxFA@mail.gmail.com>
References: <543438E4.8080501@certimix.com> <54343948.1030400@certimix.com>
	<CAAS2fgRdB_4XS9Q+MFLsNtXvSiYS9Ymh9SAPzcJ5aae+89vxFA@mail.gmail.com>
Message-ID: <54344751.708@certimix.com>


On 07/10/2014 04:16 p.m., Gregory Maxwell wrote:
> Then I spend the output of the fraudulent spend nlocked
> one block higher, and spend the output of that one again, nlocked one
> block higher, and so on... each step paying fees.
Yes, you're right. I didn't consider that case. But the problem is that
this is not automatic. Currently there is a clear division between
miners how will not take the kickback (irrrational) and miners who will
(rational).
If somebody modifies the bitcoind to make this choice automatic, then
DECOR+ is the only solution I know about to avoid people doing anonymous
double-spends (with chained kickbacks, as you mention).
The  "locktime on normal transactions" you proposed does not solve the
problem, just diminishes it in a constant value (which currently is very
low)






From tomh at thinlink.com  Wed Oct  8 04:07:15 2014
From: tomh at thinlink.com (Tom Harding)
Date: Tue, 07 Oct 2014 21:07:15 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>	<1987325.zKPNeYyO8K@crushinator>	<201410031750.27323.luke@dashjr.org>	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>	<20141004003850.GA23202@muck>	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
Message-ID: <5434B873.1060406@thinlink.com>

On 10/7/2014 8:50 AM, Gavin Andresen wrote:
>
> I don't have any opinion on the hard- versus soft- fork debate. I 
> think either can work.
>

Opinion: if a soft work works, it should be preferred, if for no other 
reason than once a hard-fork is planned, the discussion begins about 
what else to throw in.  To minimize the frequency of hard-forks, the 
time for that is when the change being considered actually requires one.



From naveen.garg at gmail.com  Wed Oct  8 07:32:30 2014
From: naveen.garg at gmail.com (Naveen Garg)
Date: Wed, 8 Oct 2014 02:32:30 -0500
Subject: [Bitcoin-development] snailmail bitcoin client
Message-ID: <CABipEAv2x+zLN8GD=hojZfj2CKP0qot+ZjFS=MjAyAoc8AkNvw@mail.gmail.com>

Here is a business idea:
customers send you a bitcoin transaction printed on paper.
You scan the transaction and broadcast it to the network.
Your fee could be the greater of some minimum or like 0.01% of the
transaction value.
The fee could be sent as just another paper transaction, it could even just
be cash.

You could expand into a snailmail based email or publishing platform.
Customers send you a letter.
You make the letter available in one or more of the following forms:
1. as a single webpage
2. sent via email to a specified address
3. in a data dump along with all open letters received that day / week /
month / year / or decade.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/f0388318/attachment.html>

From mike at plan99.net  Wed Oct  8 10:15:02 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 8 Oct 2014 12:15:02 +0200
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <5434B873.1060406@thinlink.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
	<5434B873.1060406@thinlink.com>
Message-ID: <CANEZrP3p+gF-38OchA_U2RJmy0F440ZibCihpsJLGr2e3f7cOw@mail.gmail.com>

>
> Opinion: if a soft work works, it should be preferred, if for no other
> reason than once a hard-fork is planned, the discussion begins about
> what else to throw in.  To minimize the frequency of hard-forks, the
> time for that is when the change being considered actually requires one.


I'm not sure why it'd be any different. Soft forks are just as disruptive -
everyone who needs a correct node has to upgrade on time. Given that, I
guess there will be a desire to roll out several changes at once too,
regardless of what happens to older nodes.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/5bc3190e/attachment.html>

From mike at plan99.net  Wed Oct  8 10:19:10 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 8 Oct 2014 12:19:10 +0200
Subject: [Bitcoin-development] The Bitcoin Freeze on Transaction Attack
	(FRONT)
In-Reply-To: <54344751.708@certimix.com>
References: <543438E4.8080501@certimix.com> <54343948.1030400@certimix.com>
	<CAAS2fgRdB_4XS9Q+MFLsNtXvSiYS9Ymh9SAPzcJ5aae+89vxFA@mail.gmail.com>
	<54344751.708@certimix.com>
Message-ID: <CANEZrP0soZPGeP5HBoJVSdcKOTWJEB8LDkTDNdLDHcjysjpmcg@mail.gmail.com>

>
> Yes, you're right. I didn't consider that case. But the problem is that
> this is not automatic. Currently there is a clear division between
> miners how will not take the kickback (irrrational) and miners who will
> (rational).


This seems to come up a lot. Your definition of rational is a short term
rationality only. I can pass up a short term profit in return for more
stable longer term profits and be completely rational, by a reasonable
definition of the word.

I think it's clear by now that if most or even some miners decide to
prioritise short term profit over the long term health of the system (i.e.
longer term profit), Bitcoin basically doesn't work right. This attack is
only one of several such things that can happen. This certainly can be a
problem when difficulty is skyrocketing because a mining investment is I
guess quite short term anyway, but presumably at some point the mining arms
race will end and miners will become more settled in.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/62bcc790/attachment.html>

From laanwj at gmail.com  Wed Oct  8 10:26:15 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 8 Oct 2014 12:26:15 +0200
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
	<CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>
Message-ID: <CA+s+GJC2v+g-SWvqdaD2Fb7bb4DkWTtp+e4QNRGvCo1QtraFnQ@mail.gmail.com>

On Tue, Oct 7, 2014 at 6:08 PM, Mike Hearn <mike at plan99.net> wrote:
>> That is easy to change; I'll submit a pull request.
>
>
> That's certainly a useful improvement. It won't help the existing userbase
> though - assuming CHECKLOCKTIMEVERIFY is to go in to the next major release.

The next minor release (0.9.4) could have Gavin's change already.

I don't think CHECKLOCKTIMEVERIFY will make it into the next major
release though. Once headers-first and pruning is merged (which is
expected to be a matter of weeks). I'd like to split off the 0.10
branch and give it some time to stabilize with a feature freeze, then
do a release before the end of the year.

So 0.11, in say 6 months, would be soonest.

Wladimir



From etotheipi at gmail.com  Thu Oct  9 03:13:01 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Wed, 08 Oct 2014 23:13:01 -0400
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CA+s+GJC2v+g-SWvqdaD2Fb7bb4DkWTtp+e4QNRGvCo1QtraFnQ@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>	<1987325.zKPNeYyO8K@crushinator>	<201410031750.27323.luke@dashjr.org>	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>	<20141004003850.GA23202@muck>	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>	<CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>
	<CA+s+GJC2v+g-SWvqdaD2Fb7bb4DkWTtp+e4QNRGvCo1QtraFnQ@mail.gmail.com>
Message-ID: <5435FD3D.40409@gmail.com>

By the way, I really like this proposal.  I haven't spent much time
thinking about the deeper subtleties and risks associated with it, but I
see a lot of opportunities.  One just came to mind that I didn't see
mentioned in his original proposal:

_Non-Interactive Recurring payments__with ID-association_:
You want to make N recurring payments of 1 BTC each month to a service. 
Sign N transactions each of them use a CHECKLOCKTIMEVERIFY block number
approximately X months in the future (one for each month).   The script
allows the customer to move the coins at any time, but after the
locktime the merchant/service has signing access.  The merchant software
will continually watch for and sweep all coins that become available via
this mechanism and credit the appropriate customer account.  The
customer maintains control of the funds until payment time, the merchant
can automatically collect it each month without requiring user
interaction, and the customer can cancel it just by spending it
elsewhere before the locktime. 

This scheme has an added benefit:  both the merchant's address and the
user's address is in the script.  Given an appropriate scheme for
linking addresses to accounts (perhaps sending the service a watch-only
BIP32 branch), the service can use the other address in the script to
recognize and link that payment to the user's account.  This allows you
to continue paying and extending your subscription without having to
explicitly link each payment to the account.  The wallet will simply
make sure to use a return address that is in a BIP32 branch that was
provided to the service during signup, and the service will
automatically extend your subscription every month based on that info
when it sweeps payments.

Along with everything else that was mentioned by Peter in his original
proposal, I see OP_CHECKLOCKTIMEVERIFY as an enabling feature, not just
a simple improvement.
 
-Alan


On 10/08/2014 06:26 AM, Wladimir wrote:
> On Tue, Oct 7, 2014 at 6:08 PM, Mike Hearn <mike at plan99.net> wrote:
>>> That is easy to change; I'll submit a pull request.
>>
>> That's certainly a useful improvement. It won't help the existing userbase
>> though - assuming CHECKLOCKTIMEVERIFY is to go in to the next major release.
> The next minor release (0.9.4) could have Gavin's change already.
>
> I don't think CHECKLOCKTIMEVERIFY will make it into the next major
> release though. Once headers-first and pruning is merged (which is
> expected to be a matter of weeks). I'd like to split off the 0.10
> branch and give it some time to stabilize with a feature freeze, then
> do a release before the end of the year.
>
> So 0.11, in say 6 months, would be soonest.
>
> Wladimir
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/f2bfd465/attachment.html>

From adam at cypherspace.org  Thu Oct  9 06:14:31 2014
From: adam at cypherspace.org (Adam Back)
Date: Thu, 9 Oct 2014 07:14:31 +0100
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <5435FD3D.40409@gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
	<CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>
	<CA+s+GJC2v+g-SWvqdaD2Fb7bb4DkWTtp+e4QNRGvCo1QtraFnQ@mail.gmail.com>
	<5435FD3D.40409@gmail.com>
Message-ID: <CALqxMTHN4G1HO-7_0Fot943KK-GGOfK9gXDBqaKyyRngiXbuFQ@mail.gmail.com>

I think you can do everything with the existing script level nlocktime
in some kind of turing completeness sense (maybe); but there is a
complexity cost that often you have to resort to extra dependent
transaction(s) (and work-around malleability until that is fully
fixed) just to get the effect.

When I tried building things that need nlocktime I found it quite
inconvenient that it was wasnt a function rather than a script
property, so I like this proposal.

Adam

On 9 October 2014 04:13, Alan Reiner <etotheipi at gmail.com> wrote:
> By the way, I really like this proposal.  I haven't spent much time thinking
> about the deeper subtleties and risks associated with it, but I see a lot of
> opportunities.  One just came to mind that I didn't see mentioned in his
> original proposal:
>
> Non-Interactive Recurring payments with ID-association:
> You want to make N recurring payments of 1 BTC each month to a service.
> Sign N transactions each of them use a CHECKLOCKTIMEVERIFY block number
> approximately X months in the future (one for each month).   The script
> allows the customer to move the coins at any time, but after the locktime
> the merchant/service has signing access.  The merchant software will
> continually watch for and sweep all coins that become available via this
> mechanism and credit the appropriate customer account.  The customer
> maintains control of the funds until payment time, the merchant can
> automatically collect it each month without requiring user interaction, and
> the customer can cancel it just by spending it elsewhere before the
> locktime.
>
> This scheme has an added benefit:  both the merchant's address and the
> user's address is in the script.  Given an appropriate scheme for linking
> addresses to accounts (perhaps sending the service a watch-only BIP32
> branch), the service can use the other address in the script to recognize
> and link that payment to the user's account.  This allows you to continue
> paying and extending your subscription without having to explicitly link
> each payment to the account.  The wallet will simply make sure to use a
> return address that is in a BIP32 branch that was provided to the service
> during signup, and the service will automatically extend your subscription
> every month based on that info when it sweeps payments.
>
> Along with everything else that was mentioned by Peter in his original
> proposal, I see OP_CHECKLOCKTIMEVERIFY as an enabling feature, not just a
> simple improvement.
>
> -Alan
>
>
>
> On 10/08/2014 06:26 AM, Wladimir wrote:
>
> On Tue, Oct 7, 2014 at 6:08 PM, Mike Hearn <mike at plan99.net> wrote:
>
> That is easy to change; I'll submit a pull request.
>
> That's certainly a useful improvement. It won't help the existing userbase
> though - assuming CHECKLOCKTIMEVERIFY is to go in to the next major release.
>
> The next minor release (0.9.4) could have Gavin's change already.
>
> I don't think CHECKLOCKTIMEVERIFY will make it into the next major
> release though. Once headers-first and pruning is merged (which is
> expected to be a matter of weeks). I'd like to split off the 0.10
> branch and give it some time to stabilize with a feature freeze, then
> do a release before the end of the year.
>
> So 0.11, in say 6 months, would be soonest.
>
> Wladimir
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From gmaxwell at gmail.com  Thu Oct  9 06:28:19 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 9 Oct 2014 06:28:19 +0000
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CALqxMTHN4G1HO-7_0Fot943KK-GGOfK9gXDBqaKyyRngiXbuFQ@mail.gmail.com>
References: <20141001130826.GM28710@savin.petertodd.org>
	<CABbpET8_FMCcnh0dELnHsYmF+YP05Gz=nZ3SPkLZuqXYV3JUpQ@mail.gmail.com>
	<1987325.zKPNeYyO8K@crushinator>
	<201410031750.27323.luke@dashjr.org>
	<CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
	<CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>
	<CA+s+GJC2v+g-SWvqdaD2Fb7bb4DkWTtp+e4QNRGvCo1QtraFnQ@mail.gmail.com>
	<5435FD3D.40409@gmail.com>
	<CALqxMTHN4G1HO-7_0Fot943KK-GGOfK9gXDBqaKyyRngiXbuFQ@mail.gmail.com>
Message-ID: <CAAS2fgRmuyK_k4UU+3Lufaq7=j7wR_MXV1PKeb2HqRRa7VX=pQ@mail.gmail.com>

On Thu, Oct 9, 2014 at 6:14 AM, Adam Back <adam at cypherspace.org> wrote:
> I think you can do everything with the existing script level nlocktime
> in some kind of turing completeness sense (maybe); but there is a
> complexity cost that often you have to resort to extra dependent
> transaction(s) (and work-around malleability until that is fully
> fixed) just to get the effect.

Right, ... moreover, even with all the malleability fixes, they only
work if you refrain from using certain features (e.g. cannot do an
anyone-can-pay) and we cannot be completely sure all accidental
vectors for malleability are gone (we've been unable to construct a
proof that our strengthening of ECDSA turns it into a strong
signature, though it seems likely).

Having the locktime control in a scriptPubKey sidesteps all those
limitations and simplifies protocols (e.g. not requiring some three
step state machine and a bunch of risky validation code to be sure a
refund you receive is actually workable).



From pete at petertodd.org  Thu Oct  9 06:33:31 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 8 Oct 2014 23:33:31 -0700
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <CAAS2fgRmuyK_k4UU+3Lufaq7=j7wR_MXV1PKeb2HqRRa7VX=pQ@mail.gmail.com>
References: <CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
	<CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>
	<CA+s+GJC2v+g-SWvqdaD2Fb7bb4DkWTtp+e4QNRGvCo1QtraFnQ@mail.gmail.com>
	<5435FD3D.40409@gmail.com>
	<CALqxMTHN4G1HO-7_0Fot943KK-GGOfK9gXDBqaKyyRngiXbuFQ@mail.gmail.com>
	<CAAS2fgRmuyK_k4UU+3Lufaq7=j7wR_MXV1PKeb2HqRRa7VX=pQ@mail.gmail.com>
Message-ID: <20141009063331.GA16898@muck>

On Thu, Oct 09, 2014 at 06:28:19AM +0000, Gregory Maxwell wrote:
> On Thu, Oct 9, 2014 at 6:14 AM, Adam Back <adam at cypherspace.org> wrote:
> > I think you can do everything with the existing script level nlocktime
> > in some kind of turing completeness sense (maybe); but there is a
> > complexity cost that often you have to resort to extra dependent
> > transaction(s) (and work-around malleability until that is fully
> > fixed) just to get the effect.
> 
> Right, ... moreover, even with all the malleability fixes, they only
> work if you refrain from using certain features (e.g. cannot do an
> anyone-can-pay) and we cannot be completely sure all accidental
> vectors for malleability are gone (we've been unable to construct a
> proof that our strengthening of ECDSA turns it into a strong
> signature, though it seems likely).
> 
> Having the locktime control in a scriptPubKey sidesteps all those
> limitations and simplifies protocols (e.g. not requiring some three
> step state machine and a bunch of risky validation code to be sure a
> refund you receive is actually workable).

Speaking of, can anyone think of an example of a complex transaction
use-case that is affected by malleability which can't be fixed by
CHECKLOCKTIMEVERIFY? I'm sure they exist, but I'm scratching my head
trying to think of a good example.

-- 
'peter'[:-1]@petertodd.org
000000000000000012367d385ad11358a4a1eee86cf8ebe06a76add36dfb4622
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/7ba7bc8f/attachment.sig>

From gmaxwell at gmail.com  Thu Oct  9 06:40:59 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 9 Oct 2014 06:40:59 +0000
Subject: [Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent
 a txout from being spent until an expiration time
In-Reply-To: <20141009063331.GA16898@muck>
References: <CANEZrP1eGi-AHgciQiKUuUB7WwqKsMOyTjCQAAO=RWEkPC2Uiw@mail.gmail.com>
	<CAJHLa0NRNEQLqA2E=ysXsKw6hWS-H9X_AFYK4ckC4-_Bk=qbSA@mail.gmail.com>
	<20141004003850.GA23202@muck>
	<CANEZrP0_jDouDCLn9BvxUd7UYiZLbVsaGGkkxwjcOYxZryBDPQ@mail.gmail.com>
	<CABsx9T0Q8g9KYRbAvCV=35x5Rb5HFnrNkrwwMZ=Mv-namMEPpg@mail.gmail.com>
	<CANEZrP2Xp7ene+KDw_L_YnNW=hDt9K-UigvZ6PLb3oUviOr_Tw@mail.gmail.com>
	<CA+s+GJC2v+g-SWvqdaD2Fb7bb4DkWTtp+e4QNRGvCo1QtraFnQ@mail.gmail.com>
	<5435FD3D.40409@gmail.com>
	<CALqxMTHN4G1HO-7_0Fot943KK-GGOfK9gXDBqaKyyRngiXbuFQ@mail.gmail.com>
	<CAAS2fgRmuyK_k4UU+3Lufaq7=j7wR_MXV1PKeb2HqRRa7VX=pQ@mail.gmail.com>
	<20141009063331.GA16898@muck>
Message-ID: <CAAS2fgSfv4NoJtT=eEN7cSM=f2syeggt7fFLJd=GBcjP53RAHQ@mail.gmail.com>

On Thu, Oct 9, 2014 at 6:33 AM, Peter Todd <pete at petertodd.org> wrote:
> Speaking of, can anyone think of an example of a complex transaction
> use-case that is affected by malleability which can't be fixed by
> CHECKLOCKTIMEVERIFY? I'm sure they exist, but I'm scratching my head
> trying to think of a good example.

Yea, no problem since we lack covenants.

Or a least no problem making an example, maybe you'll find it too
contrived since I'm not sure what would motivate it:

You and I put 5 btc each into a kickstarter-escrow to pay Alice+some
oracle that decides if alice did her job.  But if a timeout expires
before alice manages to get the sign off the funds must be returned
completely to their original payers.

Returning them to in two outputs, one to me, one to you is trivial
with a pre-signed refund.

You could make there be multiple alice outputs or refund, but then you
can't guarantee an atomic reversal (e.g. maybe Alice gets half if we
race).



From xor at freenetproject.org  Fri Oct 10 16:22:18 2014
From: xor at freenetproject.org (xor)
Date: Fri, 10 Oct 2014 18:22:18 +0200
Subject: [Bitcoin-development] Something people are forgetting about the
	Gentoo / Luke-jr censorship issue
Message-ID: <2262118.BDDGpkgqmz@1337h4x0r>

Hey folks,

FYI the issue is that Luke-Jr wants to include code which can censor stuff like 
SatoshiDice transactions because he thinks they are denial of service:
https://bugs.gentoo.org/show_bug.cgi?id=524512

While everyone is jumping on the neutrality Bitcoin should have, you're 
forgetting that there are also *legal* implications:
The *technical ability'* to filter certain types of network traffic can cause you 
to be legally liable to *USE* it to filter illegal stuff. 
So even if the filter code is disabled by default, it can put Bitcoin users in 
legal danger: Law enforcement can try to force them to use it.

This for sure depends on the country you are living in, but in general I think 
it can be agreed that it will be a lot easier to defend a "my node relays 
everything uncensored" policy against law enforcement if you wouldn't even 
have the technical ability to filter stuff because the code just cannot do it 
anyway. 

So please do not even include this code as disabled, and if possible do not 
even write or publish it :)

Also, as I don't have a Gentoo bugtracker account, can someone please add this 
comment there?

Thanks & Gretings,
	xor - a developer of https://freenetproject.org/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141010/0b92ca2f/attachment.sig>

From jgarzik at bitpay.com  Fri Oct 10 16:42:39 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 10 Oct 2014 12:42:39 -0400
Subject: [Bitcoin-development] Something people are forgetting about the
 Gentoo / Luke-jr censorship issue
In-Reply-To: <2262118.BDDGpkgqmz@1337h4x0r>
References: <2262118.BDDGpkgqmz@1337h4x0r>
Message-ID: <CAJHLa0OcTFKdg8+ZLjaTqSQkGeqBARfKSb81fWMRM2RRBV=Jig@mail.gmail.com>

The whole issue is a troll, and I'm afraid you got sucked in.

There are no plans to add a blacklist to Bitcoin Core.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Fri Oct 10 17:26:49 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 10 Oct 2014 19:26:49 +0200
Subject: [Bitcoin-development] Something people are forgetting about the
 Gentoo / Luke-jr censorship issue
In-Reply-To: <CAJHLa0OcTFKdg8+ZLjaTqSQkGeqBARfKSb81fWMRM2RRBV=Jig@mail.gmail.com>
References: <2262118.BDDGpkgqmz@1337h4x0r>
	<CAJHLa0OcTFKdg8+ZLjaTqSQkGeqBARfKSb81fWMRM2RRBV=Jig@mail.gmail.com>
Message-ID: <CANEZrP3NDFq8RJMH_OwH=9r3nOvLt4vhToy8qDnLzHb7EsP9iw@mail.gmail.com>

I'm sure this suggestion will go down like a lead balloon, but Bitcoin Core
is not the first project that's had issues with Linux distros silently
modifying their software as they package it. In this case Luke has changed
things to be closer to what users expect, which is good to see, but I
expect to see the same issue crop up with other Linux distributions in
future. The temptation to "improve" things when you're a middleman is just
too great.

The usual approach to fixing it is trademark the project name and use that
to enforce "clean" packaging. Firefox and Chrome both take this approach.
I'll probably do the same with Lighthouse (need to figure out the
trademarking process first).

The goal here is not to remove choice, rather to ensure people know what
they're getting. It's reasonable to assume if you do "emerge bitcoin" then
you're getting Bitcoin Core as distributed by bitcoin.org, not a highly
opinionated fork of it. Renaming a project and creating a package under the
new name is not only better for end users, but lets the fork grow into
something else and be more usable to people on other distros too.

In this case "Bitcoin" is already a trademark, though I lost track of who
owns it at the moment (the foundation?) but I guess Bitcoin Core is not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141010/2cee3656/attachment.html>

From justusranvier at riseup.net  Fri Oct 10 18:41:19 2014
From: justusranvier at riseup.net (Justus Ranvier)
Date: Fri, 10 Oct 2014 18:41:19 +0000
Subject: [Bitcoin-development] Something people are forgetting about the
 Gentoo / Luke-jr censorship issue
In-Reply-To: <CANEZrP3NDFq8RJMH_OwH=9r3nOvLt4vhToy8qDnLzHb7EsP9iw@mail.gmail.com>
References: <2262118.BDDGpkgqmz@1337h4x0r>	<CAJHLa0OcTFKdg8+ZLjaTqSQkGeqBARfKSb81fWMRM2RRBV=Jig@mail.gmail.com>
	<CANEZrP3NDFq8RJMH_OwH=9r3nOvLt4vhToy8qDnLzHb7EsP9iw@mail.gmail.com>
Message-ID: <5438284F.8090609@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On 10/10/2014 05:26 PM, Mike Hearn wrote:
> I'm sure this suggestion will go down like a lead balloon, but
> Bitcoin Core is not the first project that's had issues with Linux
> distros silently modifying their software as they package it. In
> this case Luke has changed things to be closer to what users
> expect, which is good to see, but I expect to see the same issue
> crop up with other Linux distributions in future. The temptation to
> "improve" things when you're a middleman is just too great.
> 
> The usual approach to fixing it is trademark the project name and
> use that to enforce "clean" packaging. Firefox and Chrome both take
> this approach. I'll probably do the same with Lighthouse (need to
> figure out the trademarking process first).
> 
> The goal here is not to remove choice, rather to ensure people know
> what they're getting. It's reasonable to assume if you do "emerge
> bitcoin" then you're getting Bitcoin Core as distributed by
> bitcoin.org, not a highly opinionated fork of it. Renaming a
> project and creating a package under the new name is not only
> better for end users, but lets the fork grow into something else
> and be more usable to people on other distros too.
> 
> In this case "Bitcoin" is already a trademark, though I lost track
> of who owns it at the moment (the foundation?) but I guess Bitcoin
> Core is not.

Regardless of whether this is a good idea or not in general, it won't
work in the case of Gentoo (and similar source-based distributions)
because Gentoo doesn't distribute software - they distribute
instructions which allow end users to download, compile, and install
software (ebuilds).

On my system I can compile a modified Firefox that still calls itself
"Firefox" by setting USE="-bindist". This would put Gentoo in
violation of Mozilla's trademarks if they were distributing that
modified version, but they aren't, so they're not. They just
distribute the instructions that tells my copy of Portage how to
compile the modified version. As long as I don't distribute the
modified binaries I compiled, then neither am I violating Mozilla's
trademarks.

tl;dr: The trademarking approach is only effective with regards to
binary distributions, not source-based distributions.


- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCAAGBQJUOChPAAoJEMP3uyY4RQ21DNoH/0Yb3GpF230UGfQQ7Y2qQ4Sr
QTNW6hwMaLSwRvdnkAxmQf1S2I3da6AJkXcyyUavJuqw+m6lxdiA3OwUQOZblEUS
HkZqajS3gpCCmYJGbHD+DT3YnvDaeIQmuacsxMTXpVWK5QleH6mSdpbomc2TCS+D
JulZuSQJSB997uNKqYvQmwe0b3ImgND6omoOZABjFrLESeYgQWLFBthl9vwBLtFB
DqRbyvrl6+vFzX9yObAt0+iSDkoHHkPbg2/KeUCKuJaIqvFyBo0t9dvx/tvQJupk
TY39a/0MW8z524e2s2SwsZbmYXSBLTlDhkTbWR0lPQH5OOcrmH7cpEG1vsZH9yY=
=tfaE
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14046 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141010/58be4aa9/attachment.bin>

From thomas at thomaszander.se  Fri Oct 10 19:02:38 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Fri, 10 Oct 2014 21:02:38 +0200
Subject: [Bitcoin-development] Something people are forgetting about the
	Gentoo / Luke-jr censorship issue
In-Reply-To: <CANEZrP3NDFq8RJMH_OwH=9r3nOvLt4vhToy8qDnLzHb7EsP9iw@mail.gmail.com>
References: <2262118.BDDGpkgqmz@1337h4x0r>
	<CAJHLa0OcTFKdg8+ZLjaTqSQkGeqBARfKSb81fWMRM2RRBV=Jig@mail.gmail.com>
	<CANEZrP3NDFq8RJMH_OwH=9r3nOvLt4vhToy8qDnLzHb7EsP9iw@mail.gmail.com>
Message-ID: <2421098.8lktok9SJz@coldstorage>

On Friday 10. October 2014 19.26.49 Mike Hearn wrote:
> I'm sure this suggestion will go down like a lead balloon, but Bitcoin Core
> is not the first project that's had issues with Linux distros silently
> modifying their software as they package it. 

And so far its been near impossible for those others to make distros not 
modify it.
Firefox is actually a good idea, it made debian stop distributing it.

Best solution is to build good relations with the packagers of distros.

ps. Linux distros distributing GPL licensed apps are required by law to offer 
the sources of the thing they build and distribute as binary. Which allows you 
to check the difference with upstream. Most distros therefore have a process in 
place for this. Even for not FLOSS software like bitcoin core.



From naveen.garg at gmail.com  Sat Oct 11 19:49:11 2014
From: naveen.garg at gmail.com (Naveen Garg)
Date: Sat, 11 Oct 2014 14:49:11 -0500
Subject: [Bitcoin-development] Distributed anonymous bitcoin client using
	your friendly government postal service
References: <3973916F-EBBC-41F1-8B38-65FA8379CF2B@gmail.com>
Message-ID: <052D6026-7B99-4CC0-A5E2-820736A1753F@gmail.com>

Make a transaction with two outputs.  Output A is your payee.  Output B is a fee to whoever transmits the transaction to the network.  Sign and print the transaction, along with private key controlling address of output B.  Put it in the mail with instructions to 1 or more greedy people who don't know you.   

Does namecoin allow mixing outputs for name registration with pay to hash outputs ?  If so, you could use namecoin for anonymous publishing via post.  Or just make output A in bitcoin scripted with op_return if its a 40byte tweet.



From pieter.wuille at gmail.com  Sat Oct 11 23:34:15 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 11 Oct 2014 16:34:15 -0700
Subject: [Bitcoin-development] Request for review/testing: headers-first
	synchronization in Bitcoin Core
Message-ID: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>

Hi all,

I believe that a large change that I've been working on for Bitcoin
Core is ready for review and testing: headers-first synchronization.
In short, it changes the way the best chain is discovered, downloaded
and verified, with several advantages:
* Parallel block downloading (much faster sync on typical network connections).
* No more stalled downloads.
* Much more robust against unresponsive or slow peers.
* Removes a class of DoS attacks related to peers feeding you
low-difficulty valid large blocks on a side branch.
* Reduces the need for checkpoints in the code.
* No orphan blocks stored in memory anymore (reducing memory usage during sync).
* A major step step towards an SPV mode using the reference codebase.

Historically, this mode of operation has been known for years (Greg
Maxwell wrote up a description of a very similar method in
https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync
in early 2012, but it was known before that), but it took a long time
to refactor these code enough to support it.

Technically, it works by replacing the single-peer blocks download by
a single-peer headers download (which typically takes seconds/minutes)
and verification, and simultaneously fetching blocks along the best
known headers chain from all peers that are known to have the relevant
blocks. Downloading is constrained to a moving window to avoid
unbounded unordering of blocks on disk (which would interfere with
pruning later).

At the protocol level, it increases the minimally supported version
for peers to 31800 (corresponding to bitcoin v3.18, released in
december 2010), as earlier versions did not support the getheaders P2P
message.

So, the code is available as a github pull request
(https://github.com/bitcoin/bitcoin/pull/4468), or packaged on
http://bitcoin.sipa.be/builds/headersfirst, where you can also find
binaries to test with.

Known issues:
* At the very start of the sync, especially before all headers are
processed, downloading is very slow due to a limited number of blocks
that are requested per peer simultaneously. The policies around this
will need some experimentation can certainly be improved.
* Blocks will be stored on disk out of order (in the order they are
received, really), which makes it incompatible with some tools or
other programs. Reindexing using earlier versions will also not work
anymore as a result of this.
* The block index database will now hold headers for which no block is
stored on disk, which earlier versions won't support. If you are fully
synced, it may still be possible to go back to an earlier version.

Unknown issues:
* Who knows, maybe it will replace your familiy pictures with Nyan
Cat? Use at your own risk.

TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or
http://bitcoin.sipa.be/builds/headersfirst.

-- 
Pieter



From voisine at gmail.com  Sun Oct 12 05:51:41 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Sat, 11 Oct 2014 22:51:41 -0700
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
Message-ID: <CACq0ZD4XMSFfNbLkX2jdnuGC3ocSSCTkhN_8ba=gL3RVOdmcqQ@mail.gmail.com>

This is great Pieter. I was able to sync the entire blockchain from
scratch in a little over 4 hours on a laptop over cable modem. :) No
issues to report. Even my family photos are intact! This makes it
practical to run a full node, part time on a laptop again.

Aaron Voisine
breadwallet.com


On Sat, Oct 11, 2014 at 4:34 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> Hi all,
>
> I believe that a large change that I've been working on for Bitcoin
> Core is ready for review and testing: headers-first synchronization.
> In short, it changes the way the best chain is discovered, downloaded
> and verified, with several advantages:
> * Parallel block downloading (much faster sync on typical network connections).
> * No more stalled downloads.
> * Much more robust against unresponsive or slow peers.
> * Removes a class of DoS attacks related to peers feeding you
> low-difficulty valid large blocks on a side branch.
> * Reduces the need for checkpoints in the code.
> * No orphan blocks stored in memory anymore (reducing memory usage during sync).
> * A major step step towards an SPV mode using the reference codebase.
>
> Historically, this mode of operation has been known for years (Greg
> Maxwell wrote up a description of a very similar method in
> https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync
> in early 2012, but it was known before that), but it took a long time
> to refactor these code enough to support it.
>
> Technically, it works by replacing the single-peer blocks download by
> a single-peer headers download (which typically takes seconds/minutes)
> and verification, and simultaneously fetching blocks along the best
> known headers chain from all peers that are known to have the relevant
> blocks. Downloading is constrained to a moving window to avoid
> unbounded unordering of blocks on disk (which would interfere with
> pruning later).
>
> At the protocol level, it increases the minimally supported version
> for peers to 31800 (corresponding to bitcoin v3.18, released in
> december 2010), as earlier versions did not support the getheaders P2P
> message.
>
> So, the code is available as a github pull request
> (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on
> http://bitcoin.sipa.be/builds/headersfirst, where you can also find
> binaries to test with.
>
> Known issues:
> * At the very start of the sync, especially before all headers are
> processed, downloading is very slow due to a limited number of blocks
> that are requested per peer simultaneously. The policies around this
> will need some experimentation can certainly be improved.
> * Blocks will be stored on disk out of order (in the order they are
> received, really), which makes it incompatible with some tools or
> other programs. Reindexing using earlier versions will also not work
> anymore as a result of this.
> * The block index database will now hold headers for which no block is
> stored on disk, which earlier versions won't support. If you are fully
> synced, it may still be possible to go back to an earlier version.
>
> Unknown issues:
> * Who knows, maybe it will replace your familiy pictures with Nyan
> Cat? Use at your own risk.
>
> TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or
> http://bitcoin.sipa.be/builds/headersfirst.
>
> --
> Pieter
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From gmaxwell at gmail.com  Sun Oct 12 07:14:32 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 12 Oct 2014 07:14:32 +0000
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
Message-ID: <CAAS2fgThKM8e3Oh1E6KXJ5rW_7H8=dxCLDq0NoQRwUjJ41t97g@mail.gmail.com>

On Sat, Oct 11, 2014 at 11:34 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> * Parallel block downloading (much faster sync on typical network connections).

"Much faster" is an understatement. Benchmarking here shows one hour
five minutes syncing to 295000.   Old code isn't even at 250000 after
7 hours.


(I'm using 295k as the target here because after that point ecdsa
dominates, and then your 6+x faster libsecp256k1 makes more of a
difference)



From operator at bitminter.com  Sun Oct 12 08:41:29 2014
From: operator at bitminter.com (Geir Harald Hansen)
Date: Sun, 12 Oct 2014 10:41:29 +0200
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
Message-ID: <543A3EB9.4040803@bitminter.com>

On 12.10.2014 01:34, Pieter Wuille wrote:
> * No orphan blocks stored in memory anymore (reducing memory usage during sync).

Will this slow down reorgs after a fork, compared to today?

Regards,
Geir H. Hansen, Bitminter




From luke at dashjr.org  Sun Oct 12 09:44:21 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Sun, 12 Oct 2014 09:44:21 +0000
Subject: [Bitcoin-development] Request for review/testing: headers-first
	synchronization in Bitcoin Core
In-Reply-To: <543A3EB9.4040803@bitminter.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
	<543A3EB9.4040803@bitminter.com>
Message-ID: <201410120944.22650.luke@dashjr.org>

On Sunday, October 12, 2014 8:41:29 AM Geir Harald Hansen wrote:
> On 12.10.2014 01:34, Pieter Wuille wrote:
> > * No orphan blocks stored in memory anymore (reducing memory usage during
> > sync).
> 
> Will this slow down reorgs after a fork, compared to today?

It shouldn't... he's talking about actual orphan blocks (ones without a known 
previous/parent block), not stale blocks.

Luke



From laanwj at gmail.com  Sun Oct 12 09:52:31 2014
From: laanwj at gmail.com (Wladimir)
Date: Sun, 12 Oct 2014 11:52:31 +0200
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <543A3EB9.4040803@bitminter.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
	<543A3EB9.4040803@bitminter.com>
Message-ID: <CA+s+GJA=zgacbURh83DKyAV=x_t15xT=5cJTwSY8Omk2XZyuxA@mail.gmail.com>

On Sun, Oct 12, 2014 at 10:41 AM, Geir Harald Hansen
<operator at bitminter.com> wrote:
> On 12.10.2014 01:34, Pieter Wuille wrote:
>> * No orphan blocks stored in memory anymore (reducing memory usage during sync).
>
> Will this slow down reorgs after a fork, compared to today?

Why would you think so? Orphan blocks are blocks whose parent is not
known. In the case of a reorganization the client 'jumps' to a new
best chain, for this to happen the original tip and the new best tip
and all their parents must be already known.

Wladimir



From operator at bitminter.com  Sun Oct 12 10:06:25 2014
From: operator at bitminter.com (Geir Harald Hansen)
Date: Sun, 12 Oct 2014 12:06:25 +0200
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <CA+s+GJA=zgacbURh83DKyAV=x_t15xT=5cJTwSY8Omk2XZyuxA@mail.gmail.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
	<543A3EB9.4040803@bitminter.com>
	<CA+s+GJA=zgacbURh83DKyAV=x_t15xT=5cJTwSY8Omk2XZyuxA@mail.gmail.com>
Message-ID: <543A52A1.2010408@bitminter.com>

On 12.10.2014 11:52, Wladimir wrote:
> On Sun, Oct 12, 2014 at 10:41 AM, Geir Harald Hansen
> <operator at bitminter.com> wrote:
>> On 12.10.2014 01:34, Pieter Wuille wrote:
>>> * No orphan blocks stored in memory anymore (reducing memory usage during sync).
>>
>> Will this slow down reorgs after a fork, compared to today?
>
> Why would you think so? Orphan blocks are blocks whose parent is not
> known. In the case of a reorganization the client 'jumps' to a new
> best chain, for this to happen the original tip and the new best tip
> and all their parents must be already known.

I was thinking of shorter sides of forks as being orphaned. Sorry for 
the confusion.

Regards,
Geir H. Hansen, Bitminter




From jameson.lopp at gmail.com  Sun Oct 12 19:13:06 2014
From: jameson.lopp at gmail.com (Jameson Lopp)
Date: Sun, 12 Oct 2014 15:13:06 -0400
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
Message-ID: <543AD2C2.3010309@gmail.com>

Great work, Pieter. I've been spooling up several nodes per week lately and can testify that stalled downloads during initial syncing are a pain. I usually forgo bootstrapping on VPSes because I don't want to have to adjust the disk space allocation.

With headers-first I'm saturating my home cable connection with download rates of 4 MB/s until block 295,000 at which point CPU becomes the bottleneck and it settles down in the 1 MB/s range.

It took 6 minutes for my node to sync to block height 100,000
22 minutes to reach height 200,000
62 minutes to reach height 250,000
125 minutes to reach height 295,000
144 minutes to reach height 300,000
248 minutes to reach height 325,000

- Jameson

On 10/11/2014 07:34 PM, Pieter Wuille wrote:
> Hi all,
> 
> I believe that a large change that I've been working on for Bitcoin
> Core is ready for review and testing: headers-first synchronization.
> In short, it changes the way the best chain is discovered, downloaded
> and verified, with several advantages:
> * Parallel block downloading (much faster sync on typical network connections).
> * No more stalled downloads.
> * Much more robust against unresponsive or slow peers.
> * Removes a class of DoS attacks related to peers feeding you
> low-difficulty valid large blocks on a side branch.
> * Reduces the need for checkpoints in the code.
> * No orphan blocks stored in memory anymore (reducing memory usage during sync).
> * A major step step towards an SPV mode using the reference codebase.
> 
> Historically, this mode of operation has been known for years (Greg
> Maxwell wrote up a description of a very similar method in
> https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync
> in early 2012, but it was known before that), but it took a long time
> to refactor these code enough to support it.
> 
> Technically, it works by replacing the single-peer blocks download by
> a single-peer headers download (which typically takes seconds/minutes)
> and verification, and simultaneously fetching blocks along the best
> known headers chain from all peers that are known to have the relevant
> blocks. Downloading is constrained to a moving window to avoid
> unbounded unordering of blocks on disk (which would interfere with
> pruning later).
> 
> At the protocol level, it increases the minimally supported version
> for peers to 31800 (corresponding to bitcoin v3.18, released in
> december 2010), as earlier versions did not support the getheaders P2P
> message.
> 
> So, the code is available as a github pull request
> (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on
> http://bitcoin.sipa.be/builds/headersfirst, where you can also find
> binaries to test with.
> 
> Known issues:
> * At the very start of the sync, especially before all headers are
> processed, downloading is very slow due to a limited number of blocks
> that are requested per peer simultaneously. The policies around this
> will need some experimentation can certainly be improved.
> * Blocks will be stored on disk out of order (in the order they are
> received, really), which makes it incompatible with some tools or
> other programs. Reindexing using earlier versions will also not work
> anymore as a result of this.
> * The block index database will now hold headers for which no block is
> stored on disk, which earlier versions won't support. If you are fully
> synced, it may still be possible to go back to an earlier version.
> 
> Unknown issues:
> * Who knows, maybe it will replace your familiy pictures with Nyan
> Cat? Use at your own risk.
> 
> TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or
> http://bitcoin.sipa.be/builds/headersfirst.
> 



From melvincarvalho at gmail.com  Mon Oct 13 10:01:37 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Mon, 13 Oct 2014 12:01:37 +0200
Subject: [Bitcoin-development] Fwd: [Bug 24444] Named Curve Registry (adding
	secp256k1)
In-Reply-To: <bug-24444-7046-xvP1kb2tHS@http.www.w3.org/Bugs/Public/>
References: <bug-24444-7046@http.www.w3.org/Bugs/Public/>
	<bug-24444-7046-xvP1kb2tHS@http.www.w3.org/Bugs/Public/>
Message-ID: <CAKaEYhJPFoaSzPuGH80u3y6XoYCOpeQ0=3qote3jdwNVegoiVQ@mail.gmail.com>

FYI:

This is an issue I filed related to adding secp256k1 into Web Crypto API
which will be implemented natively in (some) web browsers.

If there is any feedback from crypto implementers, please feel free to add
comments to this thread:
https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444

---------- Forwarded message ----------
From: <bugzilla at jessica.w3.org>
Date: 13 October 2014 09:18
Subject: [Bug 24444] Named Curve Registry (adding secp256k1)
To: melvincarvalho at gmail.com


https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444

Myron Davis <myrond at gmail.com> changed:

           What    |Removed                     |Added
----------------------------------------------------------------------------
             Status|RESOLVED                    |REOPENED
                 CC|                            |myrond at gmail.com
         Resolution|NEEDSINFO                   |---

--- Comment #2 from Myron Davis <myrond at gmail.com> ---
Could this be looked at again?

Last response was waiting for feedback from crypto implementors.

Currently secp256k1 is supported in the following SSL/TLS libraries now
Botan
NSS
openssl
LibreSSL
PolarSSL
JSSE

The three other curves are all all have parameters which do not define how
they
were generated.  secp256k1 curve has some great advantages in faster
signature
verification and how the values were determined for the curve.  (i.e. not
random).

http://www.ietf.org/rfc/rfc4492

The curve has had a lot of eyes on it with lots of hardware and software
supporting this curve.

With discovery of backdoor's in NIST's random number generator
(https://www.schneier.com/blog/archives/2007/11/the_strange_sto.html ) I
would
like to see a determined parameter curve instead of a "random" curve option.

Thanks

--
You are receiving this mail because:
You reported the bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141013/92a06c56/attachment.html>

From dsmurrell at gmail.com  Mon Oct 13 14:20:15 2014
From: dsmurrell at gmail.com (Daniel Murrell)
Date: Mon, 13 Oct 2014 15:20:15 +0100
Subject: [Bitcoin-development] OpenCryptocurrencyReview
Message-ID: <CADK=3Hz3+5TrC69jHvpiVJ0hoABjKYiMKSjnL6_UbRiaQTnN2g@mail.gmail.com>

Dear All

I'm not sure this is welcome here. Someone suggested I let the devs
know about it here. I've made an open forum on which to post
discussion about cryptocurrency related research:
www.opencryptocurrencyreview.com

Jeff helped me with the naming a bit some time ago. It's not had much
attention but then I've not advertised it much.

Please check it out and let me know if something like this is
worthwhile in this community. I'm not aware of much of the research
myself but a central repo of it seemed lacking and this adds
discussion capabilities to the repo.

If you guys have any potential use case for this, please consider
holding some of your discussions about research that interests you
here. If it gets core devs talking on it (if it's actually useful to
you that is), then I'm sure that others will be inspired to use it.
Even just one discussion thread will help if this regard.

It's not for profit so I'm not trying to make any money out of you.
It's just an experiment.

Kind regards
Daniel Murrell



From bitcoin-list at bluematt.me  Mon Oct 13 17:18:53 2014
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 13 Oct 2014 17:18:53 +0000
Subject: [Bitcoin-development] Fwd: [Bug 24444] Named Curve Registry
 (adding secp256k1)
In-Reply-To: <CAKaEYhJPFoaSzPuGH80u3y6XoYCOpeQ0=3qote3jdwNVegoiVQ@mail.gmail.com>
References: <bug-24444-7046@http.www.w3.org/Bugs/Public/>	<bug-24444-7046-xvP1kb2tHS@http.www.w3.org/Bugs/Public/>
	<CAKaEYhJPFoaSzPuGH80u3y6XoYCOpeQ0=3qote3jdwNVegoiVQ@mail.gmail.com>
Message-ID: <543C097D.7060308@bluematt.me>

See-also: this related bug on Curve25519 and some MS Research curves
that generated far more discussion.

https://www.w3.org/Bugs/Public/show_bug.cgi?id=25839

Matt

On 10/13/14 10:01, Melvin Carvalho wrote:
> FYI:
> 
> This is an issue I filed related to adding secp256k1 into Web Crypto API
> which will be implemented natively in (some) web browsers.
> 
> If there is any feedback from crypto implementers, please feel free to
> add comments to this thread:
> https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444
> 
> ---------- Forwarded message ----------
> From: ** <bugzilla at jessica.w3.org <mailto:bugzilla at jessica.w3.org>>
> Date: 13 October 2014 09:18
> Subject: [Bug 24444] Named Curve Registry (adding secp256k1)
> To: melvincarvalho at gmail.com <mailto:melvincarvalho at gmail.com>
> 
> 
> https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444
> 
> Myron Davis <myrond at gmail.com <mailto:myrond at gmail.com>> changed:
> 
>            What    |Removed                     |Added
> ----------------------------------------------------------------------------
>              Status|RESOLVED                    |REOPENED
>                  CC|                            |myrond at gmail.com
> <mailto:myrond at gmail.com>
>          Resolution|NEEDSINFO                   |---
> 
> --- Comment #2 from Myron Davis <myrond at gmail.com
> <mailto:myrond at gmail.com>> ---
> Could this be looked at again?
> 
> Last response was waiting for feedback from crypto implementors.
> 
> Currently secp256k1 is supported in the following SSL/TLS libraries now
> Botan
> NSS
> openssl
> LibreSSL
> PolarSSL
> JSSE
> 
> The three other curves are all all have parameters which do not define
> how they
> were generated.  secp256k1 curve has some great advantages in faster
> signature
> verification and how the values were determined for the curve.  (i.e. not
> random).
> 
> http://www.ietf.org/rfc/rfc4492
> 
> The curve has had a lot of eyes on it with lots of hardware and software
> supporting this curve.
> 
> With discovery of backdoor's in NIST's random number generator
> (https://www.schneier.com/blog/archives/2007/11/the_strange_sto.html ) I
> would
> like to see a determined parameter curve instead of a "random" curve option.
> 
> Thanks
> 
> --
> You are receiving this mail because:
> You reported the bug.
> 
> 
> 
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://p.sf.net/sfu/Zoho
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From 21xe14 at gmail.com  Mon Oct 13 22:43:35 2014
From: 21xe14 at gmail.com (21E14)
Date: Mon, 13 Oct 2014 22:43:35 +0000
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <543AD2C2.3010309@gmail.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
	<543AD2C2.3010309@gmail.com>
Message-ID: <CAFZQHkGDjxFW3yCZe4PauicgV-ic7X3_GcKn+uQCkNQgAsw8Xw@mail.gmail.com>

When forgoing bootstrapping due to disk space constraints, you, and the
network, are likely better off -reindex-ing from current blk000??.dat files.

Which brings up an interesting point: The improvements related to the
headers first approach are likely to increase, how ever marginally, the
percentage of block exchange-related traffic, as it is less painful now to
be catching up.

It'd be interesting to see the statistics, not from a single node
perspective, but from the viewpoint of an Internet backbone provider, say
through the cables coming ashore in Cornwall. For the incurred bandwidth
expense would invariably trickle down to transaction fees in an equilibrium
model.

There is an opportunity somewhere in this.


On Sun, Oct 12, 2014 at 7:13 PM, Jameson Lopp <jameson.lopp at gmail.com>
wrote:

> Great work, Pieter. I've been spooling up several nodes per week lately
> and can testify that stalled downloads during initial syncing are a pain. I
> usually forgo bootstrapping on VPSes because I don't want to have to adjust
> the disk space allocation.
>
> With headers-first I'm saturating my home cable connection with download
> rates of 4 MB/s until block 295,000 at which point CPU becomes the
> bottleneck and it settles down in the 1 MB/s range.
>
> It took 6 minutes for my node to sync to block height 100,000
> 22 minutes to reach height 200,000
> 62 minutes to reach height 250,000
> 125 minutes to reach height 295,000
> 144 minutes to reach height 300,000
> 248 minutes to reach height 325,000
>
> - Jameson
>
> On 10/11/2014 07:34 PM, Pieter Wuille wrote:
> > Hi all,
> >
> > I believe that a large change that I've been working on for Bitcoin
> > Core is ready for review and testing: headers-first synchronization.
> > In short, it changes the way the best chain is discovered, downloaded
> > and verified, with several advantages:
> > * Parallel block downloading (much faster sync on typical network
> connections).
> > * No more stalled downloads.
> > * Much more robust against unresponsive or slow peers.
> > * Removes a class of DoS attacks related to peers feeding you
> > low-difficulty valid large blocks on a side branch.
> > * Reduces the need for checkpoints in the code.
> > * No orphan blocks stored in memory anymore (reducing memory usage
> during sync).
> > * A major step step towards an SPV mode using the reference codebase.
> >
> > Historically, this mode of operation has been known for years (Greg
> > Maxwell wrote up a description of a very similar method in
> > https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync
> > in early 2012, but it was known before that), but it took a long time
> > to refactor these code enough to support it.
> >
> > Technically, it works by replacing the single-peer blocks download by
> > a single-peer headers download (which typically takes seconds/minutes)
> > and verification, and simultaneously fetching blocks along the best
> > known headers chain from all peers that are known to have the relevant
> > blocks. Downloading is constrained to a moving window to avoid
> > unbounded unordering of blocks on disk (which would interfere with
> > pruning later).
> >
> > At the protocol level, it increases the minimally supported version
> > for peers to 31800 (corresponding to bitcoin v3.18, released in
> > december 2010), as earlier versions did not support the getheaders P2P
> > message.
> >
> > So, the code is available as a github pull request
> > (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on
> > http://bitcoin.sipa.be/builds/headersfirst, where you can also find
> > binaries to test with.
> >
> > Known issues:
> > * At the very start of the sync, especially before all headers are
> > processed, downloading is very slow due to a limited number of blocks
> > that are requested per peer simultaneously. The policies around this
> > will need some experimentation can certainly be improved.
> > * Blocks will be stored on disk out of order (in the order they are
> > received, really), which makes it incompatible with some tools or
> > other programs. Reindexing using earlier versions will also not work
> > anymore as a result of this.
> > * The block index database will now hold headers for which no block is
> > stored on disk, which earlier versions won't support. If you are fully
> > synced, it may still be possible to go back to an earlier version.
> >
> > Unknown issues:
> > * Who knows, maybe it will replace your familiy pictures with Nyan
> > Cat? Use at your own risk.
> >
> > TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or
> > http://bitcoin.sipa.be/builds/headersfirst.
> >
>
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141013/7e538cbd/attachment.html>

From pieter.wuille at gmail.com  Tue Oct 14 02:34:16 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 13 Oct 2014 19:34:16 -0700
Subject: [Bitcoin-development] Malleable booleans
Message-ID: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>

Hi all,

while working on a BIP62 implementation I discovered yet another type
of malleability: the interpretation of booleans.

Any byte array with non-zero bytes in it (ignoring the highest bit of
the last byte, which is the sign bit when interpreting as a number) is
interpreted as true, anything else as false. Other than numbers,
they're not even restricted to 4 bytes. Worse, the code for dealing
with booleans is not very consistent: OP_BOOLAND and OP_BOOLOR first
interpret their arguments as numbers, and then compare them to 0 to
turn them into boolean values.

This means that scripts that use booleans as inputs will be inherently
malleable. Given that that seems actually useful (passing in booleans
to guide some OP_IF's during execution of several alternatives), I
would like to change BIP62 to also state that interpreted booleans
must be of minimal encoded size (in addition to numbers).

Any opinions for or against?



From gmaxwell at gmail.com  Tue Oct 14 02:45:47 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 14 Oct 2014 02:45:47 +0000
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
Message-ID: <CAAS2fgQXGkYgxuzDaYUr-p6Z6J0sPBGt-qg4HVMDcs3owf+90w@mail.gmail.com>

On Tue, Oct 14, 2014 at 2:34 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> Hi all,
>
> while working on a BIP62 implementation I discovered yet another type
> of malleability: the interpretation of booleans.
>
> Any byte array with non-zero bytes in it (ignoring the highest bit of
> the last byte, which is the sign bit when interpreting as a number) is
> interpreted as true, anything else as false. Other than numbers,
> they're not even restricted to 4 bytes. Worse, the code for dealing
> with booleans is not very consistent: OP_BOOLAND and OP_BOOLOR first
> interpret their arguments as numbers, and then compare them to 0 to
> turn them into boolean values.
>
> This means that scripts that use booleans as inputs will be inherently
> malleable. Given that that seems actually useful (passing in booleans
> to guide some OP_IF's during execution of several alternatives), I
> would like to change BIP62 to also state that interpreted booleans
> must be of minimal encoded size (in addition to numbers).
>
> Any opinions for or against?


An argument against is that you can currently do something like this:


OP_DUP OP_IF OP_HASH160 PUSH OP_EQUALVERIFY OP_ELSE  <stuff>
OP_CHECKSIGVERIFY OP_ENDIF

E.g. if your input is non-zero you're giving a hash, if it's zero
you're skipping that and running another branch.

Of course you could just encode your script another way... but by that
same logic you can 1 OP_QUALVERIFY to bool-ize any input in the true
path.  The inconsistency in handling makes it more likely that script
authors will screw up with bad (for them) consequences, however.

[I just asked pieter out of band to clarify if he means "minimal
encoded size", or must be 0 or 1 minimally encoded... as the former
doesn't fix the malleability, but the later is more disruptive]



From thomas at thomaszander.se  Tue Oct 14 07:27:36 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Tue, 14 Oct 2014 09:27:36 +0200
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
Message-ID: <201410140927.36252.thomas@thomaszander.se>

On Tuesday 14. October 2014 04.34.16 Pieter Wuille wrote:
> This means that scripts that use booleans as inputs will be inherently
> malleable.

I've ran into this issue in C++ often enough,
a funny example is assigning "2" to a native c++ bool and then you can do a
 if (myBool == true)
 else if (myBool == false)
and neither of them will hit.

> I
> would like to change BIP62 to also state that interpreted booleans
> must be of minimal encoded size (in addition to numbers).

What about rejecting a script where a bool is not explicitly zero or one?
-- 
Thomas Zander



From gmaxwell at gmail.com  Tue Oct 14 07:52:44 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 14 Oct 2014 07:52:44 +0000
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <201410140927.36252.thomas@thomaszander.se>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
	<201410140927.36252.thomas@thomaszander.se>
Message-ID: <CAAS2fgQbsTBPqqz8BGZSd5h1VuudHDCr2T_zxTQ_6nD8VC0HvA@mail.gmail.com>

On Tue, Oct 14, 2014 at 7:27 AM, Thomas Zander <thomas at thomaszander.se> wrote:
> What about rejecting a script where a bool is not explicitly zero or one?

I believe this is what he actually meant.



From laanwj at gmail.com  Tue Oct 14 08:04:20 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 14 Oct 2014 10:04:20 +0200
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <201410140927.36252.thomas@thomaszander.se>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
	<201410140927.36252.thomas@thomaszander.se>
Message-ID: <CA+s+GJBvOH9cW_yaK7ZEDUYznDe=KeoMYMZ3KF=P503JceWFeg@mail.gmail.com>

On Tue, Oct 14, 2014 at 9:27 AM, Thomas Zander <thomas at thomaszander.se> wrote:
> On Tuesday 14. October 2014 04.34.16 Pieter Wuille wrote:
>> This means that scripts that use booleans as inputs will be inherently
>> malleable.
>
> I've ran into this issue in C++ often enough,
> a funny example is assigning "2" to a native c++ bool and then you can do a
>  if (myBool == true)
>  else if (myBool == false)
> and neither of them will hit.

Off topic nit: I think you're confused with custom BOOL typedefs in C?
C++ booleans are protected against this (C++ standard ?4.7/4 according
to Google).:

```
#include <stdio.h>

int main()
{
    bool myBool;
    myBool = 2;
    if (myBool == true)
        printf("It is true!\n");
    else if (myBool == false)
        printf("It is false!\n");
    else
        printf("It is something else!\n");
}
```

Prints 'It is true'. You can also use bool(something) as equivalent of
`x != 0`; as in `assert(bool(2) == true);`.

Wladimir



From pete at petertodd.org  Tue Oct 14 08:09:05 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 14 Oct 2014 04:09:05 -0400
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
Message-ID: <20141014080905.GA10545@savin.petertodd.org>

On Mon, Oct 13, 2014 at 07:34:16PM -0700, Pieter Wuille wrote:
> Hi all,
> 
> while working on a BIP62 implementation I discovered yet another type
> of malleability: the interpretation of booleans.
> 
> Any byte array with non-zero bytes in it (ignoring the highest bit of
> the last byte, which is the sign bit when interpreting as a number) is
> interpreted as true, anything else as false. Other than numbers,
> they're not even restricted to 4 bytes. Worse, the code for dealing
> with booleans is not very consistent: OP_BOOLAND and OP_BOOLOR first
> interpret their arguments as numbers, and then compare them to 0 to
> turn them into boolean values.
> 
> This means that scripts that use booleans as inputs will be inherently
> malleable. Given that that seems actually useful (passing in booleans
> to guide some OP_IF's during execution of several alternatives), I
> would like to change BIP62 to also state that interpreted booleans
> must be of minimal encoded size (in addition to numbers).
> 
> Any opinions for or against?

I noticed this awhile back myself. More interestingly, I remember
noticing some non-std scripts on mainnet that had opcodes that appeared
to be attempts to solve this issue with variations of the following:

    DUP
    IF
        1 EQUALVERIFY
        <do stuff>
    ELSE
        0 EQUALVERIFY
        <do stuff>
    ENDIF

I'll have to admit, I decided to keep quiet about it because it's a good
example of how relying on BIP62 for specialty contract applications that
absolutely need to avoid malleability for security reasons is a dubious
idea; it's hard to be sure that we've really gotten every relevant case
correct.

I think a decent argument *for* doing this is that if a script author
fails to properly 'bool-ize' every boolean-using path that can have
non-minimal encodings in normal execution, you can always create a
nVersion=1 transaction manually to spend the output, preventing funds
from getting lost. Meanwhile in the general case of a compenent script
author having the canonical bool testing in every boolean-using opcode
saves a lot of bytes.

-- 
'peter'[:-1]@petertodd.org
0000000000000000147fe2005d7d4490938a7ab96901b8256dcd9d4eac78cb8c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141014/512de704/attachment.sig>

From melvincarvalho at gmail.com  Tue Oct 14 08:57:58 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Tue, 14 Oct 2014 10:57:58 +0200
Subject: [Bitcoin-development] Fwd: [Bug 24444] Named Curve Registry
 (adding secp256k1)
In-Reply-To: <543C097D.7060308@bluematt.me>
References: <bug-24444-7046@http.www.w3.org/Bugs/Public/>
	<bug-24444-7046-xvP1kb2tHS@http.www.w3.org/Bugs/Public/>
	<CAKaEYhJPFoaSzPuGH80u3y6XoYCOpeQ0=3qote3jdwNVegoiVQ@mail.gmail.com>
	<543C097D.7060308@bluematt.me>
Message-ID: <CAKaEYh+awWMF_7ExVkCVs5OLETDS4fPyC9NuY_LObGSPCHe7mA@mail.gmail.com>

FYI:

"In order to progress towards exit to Last Call for the Web Crypto API, the
chair suggests the following resolution for that bug.

resolution : Bug CLOSED. This problem will be addressed by the extension bug
25618 https://www.w3.org/Bugs/Public/show_bug.cgi?id=25618.

If none objects before the 20th of Oct @20:00 UTC, this resolution will be
endorsed."

On 13 October 2014 19:18, Matt Corallo <bitcoin-list at bluematt.me> wrote:

> See-also: this related bug on Curve25519 and some MS Research curves
> that generated far more discussion.
>
> https://www.w3.org/Bugs/Public/show_bug.cgi?id=25839
>
> Matt
>
> On 10/13/14 10:01, Melvin Carvalho wrote:
> > FYI:
> >
> > This is an issue I filed related to adding secp256k1 into Web Crypto API
> > which will be implemented natively in (some) web browsers.
> >
> > If there is any feedback from crypto implementers, please feel free to
> > add comments to this thread:
> > https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444
> >
> > ---------- Forwarded message ----------
> > From: ** <bugzilla at jessica.w3.org <mailto:bugzilla at jessica.w3.org>>
> > Date: 13 October 2014 09:18
> > Subject: [Bug 24444] Named Curve Registry (adding secp256k1)
> > To: melvincarvalho at gmail.com <mailto:melvincarvalho at gmail.com>
> >
> >
> > https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444
> >
> > Myron Davis <myrond at gmail.com <mailto:myrond at gmail.com>> changed:
> >
> >            What    |Removed                     |Added
> >
> ----------------------------------------------------------------------------
> >              Status|RESOLVED                    |REOPENED
> >                  CC|                            |myrond at gmail.com
> > <mailto:myrond at gmail.com>
> >          Resolution|NEEDSINFO                   |---
> >
> > --- Comment #2 from Myron Davis <myrond at gmail.com
> > <mailto:myrond at gmail.com>> ---
> > Could this be looked at again?
> >
> > Last response was waiting for feedback from crypto implementors.
> >
> > Currently secp256k1 is supported in the following SSL/TLS libraries now
> > Botan
> > NSS
> > openssl
> > LibreSSL
> > PolarSSL
> > JSSE
> >
> > The three other curves are all all have parameters which do not define
> > how they
> > were generated.  secp256k1 curve has some great advantages in faster
> > signature
> > verification and how the values were determined for the curve.  (i.e. not
> > random).
> >
> > http://www.ietf.org/rfc/rfc4492
> >
> > The curve has had a lot of eyes on it with lots of hardware and software
> > supporting this curve.
> >
> > With discovery of backdoor's in NIST's random number generator
> > (https://www.schneier.com/blog/archives/2007/11/the_strange_sto.html ) I
> > would
> > like to see a determined parameter curve instead of a "random" curve
> option.
> >
> > Thanks
> >
> > --
> > You are receiving this mail because:
> > You reported the bug.
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> > Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> > Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> > Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> > http://p.sf.net/sfu/Zoho
> >
> >
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141014/486b7876/attachment.html>

From pieter.wuille at gmail.com  Tue Oct 14 18:54:36 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 14 Oct 2014 11:54:36 -0700
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <20141014080905.GA10545@savin.petertodd.org>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
	<20141014080905.GA10545@savin.petertodd.org>
Message-ID: <CAPg+sBh4r8CzdOZ_nfJpq_7W07-e0bP7Subnxpsm=29tzKK0OQ@mail.gmail.com>

To be clear: I indeed meant to only allow 0 and 1 as booleans (or,
more precisely: [] and [0x01]). Evaluating any stack element as a
boolean that is not any of these would result in script failure.

The only places where this is relevant:
* Inputs to OP_IF and OP_NOTIF (which are currently allowed to be any
byte array).
* Inputs to OP_BOOLAND and OP_BOOLOR (which are currently allowed to
be any valid number).
* The resulting final element on the stack for validity.

The code for converting stack elements to booleans is also invoked for
all OP_*VERIFY operators, but for those it is always the output of a
previous operator, so it will not have any semantic impact.

On Tue, Oct 14, 2014 at 1:09 AM, Peter Todd <pete at petertodd.org> wrote:
> I noticed this awhile back myself. More interestingly, I remember
> noticing some non-std scripts on mainnet that had opcodes that appeared
> to be attempts to solve this issue with variations of the following:
>
>     DUP
>     IF
>         1 EQUALVERIFY
>         <do stuff>
>     ELSE
>         0 EQUALVERIFY
>         <do stuff>
>     ENDIFo.
>
> I'll have to admit, I decided to keep quiet about it because it's a good
> example of how relying on BIP62 for specialty contract applications that
> absolutely need to avoid malleability for security reasons is a dubious
> idea; it's hard to be sure that we've really gotten every relevant case
> correct.

I think my goal is to have the property that for every possible
script, there is an equivalent one that is non-malleable. There are
likely still holes in that idea, but at least for just standard
scripts I think BIP62 (as is) covers this. And as your example points
out (Greg and I discussed this, though we didn't come up with such a
concise one), it is already possible for boolean inputs too.

> I think a decent argument *for* doing this is that if a script author
> fails to properly 'bool-ize' every boolean-using path that can have
> non-minimal encodings in normal execution, you can always create a
> nVersion=1 transaction manually to spend the output, preventing funds
> from getting lost. Meanwhile in the general case of a compenent script
> author having the canonical bool testing in every boolean-using opcode
> saves a lot of bytes.

The real question is whether there are use cases for not having this
requirement. I can't come up with any, as that would imply a boolean
that is also interpretable as a hash, a pubkey or a signature - all of
which seems crpytographically impossible to ever result in false.

-- 
Pieter



From pete at petertodd.org  Tue Oct 14 19:45:18 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 14 Oct 2014 15:45:18 -0400
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <CAPg+sBh4r8CzdOZ_nfJpq_7W07-e0bP7Subnxpsm=29tzKK0OQ@mail.gmail.com>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
	<20141014080905.GA10545@savin.petertodd.org>
	<CAPg+sBh4r8CzdOZ_nfJpq_7W07-e0bP7Subnxpsm=29tzKK0OQ@mail.gmail.com>
Message-ID: <20141014194518.GB941@savin.petertodd.org>

On Tue, Oct 14, 2014 at 11:54:36AM -0700, Pieter Wuille wrote:
> > I think a decent argument *for* doing this is that if a script author
> > fails to properly 'bool-ize' every boolean-using path that can have
> > non-minimal encodings in normal execution, you can always create a
> > nVersion=1 transaction manually to spend the output, preventing funds
> > from getting lost. Meanwhile in the general case of a compenent script
> > author having the canonical bool testing in every boolean-using opcode
> > saves a lot of bytes.
> 
> The real question is whether there are use cases for not having this
> requirement. I can't come up with any, as that would imply a boolean
> that is also interpretable as a hash, a pubkey or a signature - all of
> which seems crpytographically impossible to ever result in false.

I'm kinda inclined to agree, however there is an opposing argument too:
How often is BOOLAND and BOOLOR applied to unsanitised input from the
scriptSig? I can't think of a script type where that would be the case,
unlike OP_IF where the logical way of writing scripts is to have the
scriptSig select which brance you take. In every script I've ever
thought of BOOLAND and BOOLOR is applied to stuff generated within the
script itself, which isn't a malleability concern.

-- 
'peter'[:-1]@petertodd.org
000000000000000005f3f265a1636bd90c2c8098093c2db2ccfc91c17890a714
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141014/1fc6aa6e/attachment.sig>

From laanwj at gmail.com  Wed Oct 15 08:29:43 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 15 Oct 2014 10:29:43 +0200
Subject: [Bitcoin-development] BIP process
Message-ID: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>

Hello,

I'm trying to create a bit of process around the
https://github.com/bitcoin/bips repository.

A) Currently a lot of pulls are open for various BIPs and it is not
clear who should comment on them, or who decides on changes to be
merged.

Currently all BIP changes have to go through the Bitcoin Core team,
which is a narrow bottleneck and makes little sense when you think
about it. But I don't want to go back to the wiki state in which
everyone can make arbitrary changes to any BIP - we need to distribute
the process somehow.

I'd like to propose to make the author (or someone they delegate to)
the primary contact for each BIP. They should comment on changes, and
either accept or reject them. If they accept them, the change will be
merged.

Of course this means that there is a responsibility for the author to
adhere to BIP 1. For example if your BIP is final, don't allow any
technical changes. To do small clarifications, spelling or adding
implementations or examples is OK, but changing or adding to a
protocol is not - this needs a new BIP. Changing your BIP status
without community consensus is also not OK.

B) I also think it makes sense to move the BIP discussion (both about
the BIP process and individual BIPs) to a separate mailing list.

bitcoin-development currently has a dual function: discussion of
Bitcoin Core implementation concerns, as well as global changes to
Bitcoin (in the form of BIPs).

This makes the list too busy for some people, but it is critical that
everyone writing a Bitcoin node or client is up-to-date with proposals
and can comment on them.

Wladimir



From laanwj at gmail.com  Wed Oct 15 08:47:18 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 15 Oct 2014 10:47:18 +0200
Subject: [Bitcoin-development] Proposed BIP status changes
Message-ID: <CA+s+GJApfj5OAxGyHG9CsmRHTpAQBgC44iU2U99LwNGNZDATBw@mail.gmail.com>

These BIPs should go to Final state - they are implemented all over
the place, and are thus entirely fixed in place now. Any changes would
require a new BIP as amandment:

- BIP 14 (BIP Protocol Version and User Agent)

- BIP 21 (URI Scheme)

- BIP 22 (getblocktemplate - Fundamentals)

- BIP 31 (Pong Message)

- BIP 34 (Block v2, Height in coinbase)

- BIP 35 (mempool message)

- BIP 37 (Bloom filtering)

Let me know if you (don't) agree.

Wladimir



From gmaxwell at gmail.com  Wed Oct 15 09:22:46 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 15 Oct 2014 09:22:46 +0000
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
Message-ID: <CAAS2fgQRWAk6+ZvEaAX+Mp+_dtg9G_h8+tYxtZpVhu=Djb0k7A@mail.gmail.com>

On Wed, Oct 15, 2014 at 8:29 AM, Wladimir <laanwj at gmail.com> wrote:
> Hello,
>
> I'm trying to create a bit of process around the
> https://github.com/bitcoin/bips repository.
>
> A) Currently a lot of pulls are open for various BIPs and it is not
> clear who should comment on them, or who decides on changes to be
> merged.
>
> Currently all BIP changes have to go through the Bitcoin Core team,
> which is a narrow bottleneck and makes little sense when you think
> about it. But I don't want to go back to the wiki state in which
> everyone can make arbitrary changes to any BIP - we need to distribute
> the process somehow.
>
> I'd like to propose to make the author (or someone they delegate to)
> the primary contact for each BIP. They should comment on changes, and
> either accept or reject them. If they accept them, the change will be
> merged.
>
> Of course this means that there is a responsibility for the author to
> adhere to BIP 1. For example if your BIP is final, don't allow any
> technical changes. To do small clarifications, spelling or adding
> implementations or examples is OK, but changing or adding to a
> protocol is not - this needs a new BIP. Changing your BIP status
> without community consensus is also not OK.
>
> B) I also think it makes sense to move the BIP discussion (both about
> the BIP process and individual BIPs) to a separate mailing list.
>
> bitcoin-development currently has a dual function: discussion of
> Bitcoin Core implementation concerns, as well as global changes to
> Bitcoin (in the form of BIPs).
>
> This makes the list too busy for some people, but it is critical that
> everyone writing a Bitcoin node or client is up-to-date with proposals
> and can comment on them.


This all makes a lot of sense to me, and would help a lot with the
workflow.  Unfortunately github pulls and issues really have nothing
to faciltate a multistage workflow... e.g. where something can go
through several steps.

We're also having problems with people failing to comment on things,
not even "I looked at this and have no opinion", which is really
obstructing things.



From laanwj at gmail.com  Wed Oct 15 09:36:58 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 15 Oct 2014 11:36:58 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CAAS2fgQRWAk6+ZvEaAX+Mp+_dtg9G_h8+tYxtZpVhu=Djb0k7A@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CAAS2fgQRWAk6+ZvEaAX+Mp+_dtg9G_h8+tYxtZpVhu=Djb0k7A@mail.gmail.com>
Message-ID: <CA+s+GJCzBHGoBo8mcubbaavwR2HPave8GbA90+aGYgiJDKm=4g@mail.gmail.com>

> This all makes a lot of sense to me, and would help a lot with the
> workflow.  Unfortunately github pulls and issues really have nothing
> to faciltate a multistage workflow... e.g. where something can go
> through several steps.

Indeed, pull requests don't have a "status".
It would be possible to (ab)use labels for this.

The drawback of labels is that only the repository team can set these,
there is no way to delegate. But I suppose it'd be possible to build
something on top of the github API that handles this.

> We're also having problems with people failing to comment on things,
> not even "I looked at this and have no opinion", which is really
> obstructing things.

Well - the only way to avoid that is to set a reasonable deadline,
after which there is a default decision. You'd hope this would
motivate people to get involved in time.

Wladimir



From gavinandresen at gmail.com  Wed Oct 15 15:37:57 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 15 Oct 2014 11:37:57 -0400
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
Message-ID: <CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>

RE: process:

I like author == primary control, and an "assume they will do the right
thing, revert if they don't"

RE: separate mailing list for BIP discussion:

Great idea. Jeff Garzik was looking for a better mailing list solution than
SourceForge, but assuming
there isn't a clearly better solution I think "we" should create a strictly
moderated bitcoin-bips at lists.sourceforge list.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/6532efb8/attachment.html>

From mike at plan99.net  Wed Oct 15 15:46:13 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 15 Oct 2014 17:46:13 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>
Message-ID: <CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>

>
> Great idea. Jeff Garzik was looking for a better mailing list solution
> than SourceForge, but assuming
> there isn't a clearly better solution I think "we" should create a
> strictly moderated bitcoin-bips at lists.sourceforge list.
>

Let's stay away from SF.net or any mailman-controlled lists if at all
possible. They break DKIM signatures which means they're no longer
compatible with Yahoo, all mail from Yahoo users gets spamfoldered
immediately. Google Groups gets this right. Perhaps other list operators do
too. Groups also has moderation features.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/2cf0640d/attachment.html>

From adam at cypherspace.org  Wed Oct 15 15:54:57 2014
From: adam at cypherspace.org (Adam Back)
Date: Wed, 15 Oct 2014 16:54:57 +0100
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>
	<CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>
Message-ID: <CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>

please not google groups *, I'd vote for sourceforge or other simple
open list software over google groups.

Adam

* Google lists are somehow a little proprietary or gmail lockin
focused eg it makes things extra hard to subscribe with a non-google
address if google has any hint that your address is associated with a
gmail account.  Quite frustrating.

On 15 October 2014 16:46, Mike Hearn <mike at plan99.net> wrote:
>> Great idea. Jeff Garzik was looking for a better mailing list solution
>> than SourceForge, but assuming
>> there isn't a clearly better solution I think "we" should create a
>> strictly moderated bitcoin-bips at lists.sourceforge list.
>
>
> Let's stay away from SF.net or any mailman-controlled lists if at all
> possible. They break DKIM signatures which means they're no longer
> compatible with Yahoo, all mail from Yahoo users gets spamfoldered
> immediately. Google Groups gets this right. Perhaps other list operators do
> too. Groups also has moderation features.
>
> ------------------------------------------------------------------------------
> Comprehensive Server Monitoring with Site24x7.
> Monitor 10 servers for $9/Month.
> Get alerted through email, SMS, voice calls or mobile push notifications.
> Take corrective actions from your mobile device.
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From pete at petertodd.org  Wed Oct 15 16:47:12 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 15 Oct 2014 12:47:12 -0400
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>
	<CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>
	<CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
Message-ID: <20141015164712.GA28150@savin.petertodd.org>

On Wed, Oct 15, 2014 at 04:54:57PM +0100, Adam Back wrote:
> please not google groups *, I'd vote for sourceforge or other simple
> open list software over google groups.
> 
> Adam
> 
> * Google lists are somehow a little proprietary or gmail lockin
> focused eg it makes things extra hard to subscribe with a non-google
> address if google has any hint that your address is associated with a
> gmail account.  Quite frustrating.

I'll second that request. Something mailman based; don't particularly
care where it's hosted.

After all, one of the big advantages of open mailing lists is that
multiple third-parties can easily provide archives, for instance
www.mail-archive.com

-- 
'peter'[:-1]@petertodd.org
00000000000000000a91d3bbf16d2b80e142f98e6ff45b615f668dba558a4413
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/192c5e62/attachment.sig>

From mike at plan99.net  Wed Oct 15 18:13:11 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 15 Oct 2014 20:13:11 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>
	<CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>
	<CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
Message-ID: <CANEZrP0-Rnoe2GzvTs4nztbTMWKVxxuW=qMMwtcgoQJCvRkosA@mail.gmail.com>

I don't care much what exact list software/service is used, but lists.sf.net
hasn't changed in years and is basically dying. Trashing all @yahoo
accounts because ancient mailman does a MITM attack on people's email is no
good, it's not any better than a web proxy that breaks every SSL
connection. For a project that is based on digital signatures, it's really
bad that the mailing list is incompatible with Yahoo's "mail signatures
must be valid" policy.

Plus its moderation features suck, its mail archiving features suck, etc.
It essentially has no redeeming features at all.

mail-archive.com can be easily used with any mailing list, so not sure why
that's brought up. You just add it as a member, as documented here:
http://www.mail-archive.com/faq.html#newlist
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/34d2a24e/attachment.html>

From btcdrak at gmail.com  Wed Oct 15 19:00:10 2014
From: btcdrak at gmail.com (Btc Drak)
Date: Wed, 15 Oct 2014 20:00:10 +0100
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>
	<CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>
	<CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
Message-ID: <CADJgMzt4fe2aD8ErzJvxuAkvUrv1fH7+8Ei7EHP3dsk-4iEEmg@mail.gmail.com>

On Wed, Oct 15, 2014 at 4:54 PM, Adam Back <adam at cypherspace.org> wrote:

> please not google groups *, I'd vote for sourceforge or other simple
> open list software over google groups.
>

Please not sourceforge.


> * Google lists are somehow a little proprietary or gmail lockin
> focused eg it makes things extra hard to subscribe with a non-google
> address if google has any hint that your address is associated with a
> gmail account.  Quite frustrating.


Mailman is good enough...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/df10eb73/attachment.html>

From lists at coryfields.com  Wed Oct 15 18:58:57 2014
From: lists at coryfields.com (Cory Fields)
Date: Wed, 15 Oct 2014 14:58:57 -0400
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CA+s+GJCzBHGoBo8mcubbaavwR2HPave8GbA90+aGYgiJDKm=4g@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CAAS2fgQRWAk6+ZvEaAX+Mp+_dtg9G_h8+tYxtZpVhu=Djb0k7A@mail.gmail.com>
	<CA+s+GJCzBHGoBo8mcubbaavwR2HPave8GbA90+aGYgiJDKm=4g@mail.gmail.com>
Message-ID: <CAApLimg4qcH3vpywYKtJa_VUBG7mj=A8LMgS84PHU=yueY5Sqg@mail.gmail.com>

Sounds like this is what you're after, it's a fairly new feature:
https://github.com/blog/1375%0A-task-lists-in-gfm-issues-pulls-comments

I've been meaning to use it in a PR to try it out.

Cory

On Wed, Oct 15, 2014 at 5:36 AM, Wladimir <laanwj at gmail.com> wrote:
>> This all makes a lot of sense to me, and would help a lot with the
>> workflow.  Unfortunately github pulls and issues really have nothing
>> to faciltate a multistage workflow... e.g. where something can go
>> through several steps.
>
> Indeed, pull requests don't have a "status".
> It would be possible to (ab)use labels for this.
>
> The drawback of labels is that only the repository team can set these,
> there is no way to delegate. But I suppose it'd be possible to build
> something on top of the github API that handles this.
>
>> We're also having problems with people failing to comment on things,
>> not even "I looked at this and have no opinion", which is really
>> obstructing things.
>
> Well - the only way to avoid that is to set a reasonable deadline,
> after which there is a default decision. You'd hope this would
> motivate people to get involved in time.
>
> Wladimir
>
> ------------------------------------------------------------------------------
> Comprehensive Server Monitoring with Site24x7.
> Monitor 10 servers for $9/Month.
> Get alerted through email, SMS, voice calls or mobile push notifications.
> Take corrective actions from your mobile device.
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From pete at petertodd.org  Wed Oct 15 19:40:04 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 15 Oct 2014 15:40:04 -0400
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CADJgMzt4fe2aD8ErzJvxuAkvUrv1fH7+8Ei7EHP3dsk-4iEEmg@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>
	<CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>
	<CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
	<CADJgMzt4fe2aD8ErzJvxuAkvUrv1fH7+8Ei7EHP3dsk-4iEEmg@mail.gmail.com>
Message-ID: <20141015194004.GA19617@savin.petertodd.org>

On Wed, Oct 15, 2014 at 08:00:10PM +0100, Btc Drak wrote:
> > * Google lists are somehow a little proprietary or gmail lockin
> > focused eg it makes things extra hard to subscribe with a non-google
> > address if google has any hint that your address is associated with a
> > gmail account.  Quite frustrating.
> 
> 
> Mailman is good enough...

I used these guys for awhile to host a small mailman list with
absolutely no issues. Just $5/month for 1000 subscribers.

https://www.mailmanlist.net/

-- 
'peter'[:-1]@petertodd.org
000000000000000019e75ca8667f175b61a41ad950d15b61d83d3faf1a128f94
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/9ca283d8/attachment.sig>

From bitcoin-list at bluematt.me  Thu Oct 16 04:29:06 2014
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 16 Oct 2014 04:29:06 +0000
Subject: [Bitcoin-development] Proposed BIP status changes
In-Reply-To: <CA+s+GJApfj5OAxGyHG9CsmRHTpAQBgC44iU2U99LwNGNZDATBw@mail.gmail.com>
References: <CA+s+GJApfj5OAxGyHG9CsmRHTpAQBgC44iU2U99LwNGNZDATBw@mail.gmail.com>
Message-ID: <543F4992.4000509@bluematt.me>



On 10/15/14 08:47, Wladimir wrote:
> These BIPs should go to Final state - they are implemented all over
> the place, and are thus entirely fixed in place now. Any changes would
> require a new BIP as amandment:
> 
> - BIP 14 (BIP Protocol Version and User Agent)
> 
> - BIP 21 (URI Scheme)

ACK.

> - BIP 22 (getblocktemplate - Fundamentals)
> 
> - BIP 31 (Pong Message)
> 
> - BIP 34 (Block v2, Height in coinbase)
> 
> - BIP 35 (mempool message)
> 
> - BIP 37 (Bloom filtering)
> 
> Let me know if you (don't) agree.
> 
> Wladimir
> 
> ------------------------------------------------------------------------------
> Comprehensive Server Monitoring with Site24x7.
> Monitor 10 servers for $9/Month.
> Get alerted through email, SMS, voice calls or mobile push notifications.
> Take corrective actions from your mobile device.
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From luke at dashjr.org  Thu Oct 16 04:36:51 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 16 Oct 2014 04:36:51 +0000
Subject: [Bitcoin-development] Proposed BIP status changes
In-Reply-To: <CA+s+GJApfj5OAxGyHG9CsmRHTpAQBgC44iU2U99LwNGNZDATBw@mail.gmail.com>
References: <CA+s+GJApfj5OAxGyHG9CsmRHTpAQBgC44iU2U99LwNGNZDATBw@mail.gmail.com>
Message-ID: <201410160436.52259.luke@dashjr.org>

On Wednesday, October 15, 2014 8:47:18 AM Wladimir wrote:
> These BIPs should go to Final state - they are implemented all over
> the place, and are thus entirely fixed in place now. Any changes would
> require a new BIP as amandment:
> 
> - BIP 14 (BIP Protocol Version and User Agent)

ACK

> - BIP 21 (URI Scheme)

ACK

> - BIP 22 (getblocktemplate - Fundamentals)

ACK

> - BIP 31 (Pong Message)

ACK

> - BIP 34 (Block v2, Height in coinbase)

ACK

> - BIP 35 (mempool message)

ACK

> - BIP 37 (Bloom filtering)
> 
> Let me know if you (don't) agree.

Shouldn't we be doing this in a GitHub PR rather than spamming up the ML?

Luke



From luke at dashjr.org  Thu Oct 16 04:41:18 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 16 Oct 2014 04:41:18 +0000
Subject: [Bitcoin-development] BIP process
In-Reply-To: <20141015194004.GA19617@savin.petertodd.org>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CADJgMzt4fe2aD8ErzJvxuAkvUrv1fH7+8Ei7EHP3dsk-4iEEmg@mail.gmail.com>
	<20141015194004.GA19617@savin.petertodd.org>
Message-ID: <201410160441.19588.luke@dashjr.org>

On Wednesday, October 15, 2014 7:40:04 PM Peter Todd wrote:
> On Wed, Oct 15, 2014 at 08:00:10PM +0100, Btc Drak wrote:
> > > * Google lists are somehow a little proprietary or gmail lockin
> > > focused eg it makes things extra hard to subscribe with a non-google
> > > address if google has any hint that your address is associated with a
> > > gmail account.  Quite frustrating.
> > 
> > Mailman is good enough...
> 
> I used these guys for awhile to host a small mailman list with
> absolutely no issues. Just $5/month for 1000 subscribers.
> 
> https://www.mailmanlist.net/

I've been using http://lists.nongnu.org/ for BFGMiner announce/dev mailing 
lists for a while. I don't know what software it runs, but it works.

Catch is that we'd need to go through Savannah's free software auditing.
That might be a good idea anyway?

Luke



From rebroad+sourceforge.net at gmail.com  Thu Oct 16 05:05:58 2014
From: rebroad+sourceforge.net at gmail.com (Rebroad (sourceforge))
Date: Thu, 16 Oct 2014 13:05:58 +0800
Subject: [Bitcoin-development] Request for review/testing: headers-first
 synchronization in Bitcoin Core
In-Reply-To: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
References: <CAPg+sBjG86ZYKZZXA4VCMiFhz0sdxr_so41Zr+DATOXyRa9_Jw@mail.gmail.com>
Message-ID: <CAFBxzABOWgy=5NszM+yTFOPVzLegd5h7R+s_YbKG_teKryhEgA@mail.gmail.com>

Hi all,

I've also been spending a few months coding upon the change's Pieter has
been making with the headersfirst8 pull request.

My code updates are also ready to test, and are available on github at
https://github.com/rebroad/bitcoin/  and the branch is
"sipa-headersfirst8-patches".

I've made a number of improvement. Namely that it tracks the block as it
downloads and won't disconnect if the block is downloading at a reasonable
speed. The current stall logic of Pieter's is broken in that it will
continue to disconnect a peer that is providing a block - particularly the
next block needed to advance the current tip. I've raised this issue, but
so far haven't been able to communicate the problem in a way that's been
understood.

I've also added logic to avoid the node stalling due to many blocks being
added to the ActiveTip (which would cause timeouts both from our node, and
nodes we are connected to). It will also log and determine bandwidth per
node, and the next changes I will be adding will be to make it prefer to
download from the faster nodes (coming shortly).

I have also added code ready to adapt the window size for the download.
Currently the start setting for blocks in flight is 3 per node, but for
early on on the block chain this will be too small, so once it realises
this after a few downloads and determines the average block size and speed,
it will automatically adjust the number of blocks to request per node and
revise this each minute.

Please do take a look at my code, and feel free to test it. It also
improves some of the debug.log output to make it easier to read and provide
useful information about concurrent downloads, etc.

Edmund

On Sun, Oct 12, 2014 at 7:34 AM, Pieter Wuille <pieter.wuille at gmail.com>
wrote:

> Hi all,
>
> I believe that a large change that I've been working on for Bitcoin
> Core is ready for review and testing: headers-first synchronization.
> In short, it changes the way the best chain is discovered, downloaded
> and verified, with several advantages:
> * Parallel block downloading (much faster sync on typical network
> connections).
> * No more stalled downloads.
> * Much more robust against unresponsive or slow peers.
> * Removes a class of DoS attacks related to peers feeding you
> low-difficulty valid large blocks on a side branch.
> * Reduces the need for checkpoints in the code.
> * No orphan blocks stored in memory anymore (reducing memory usage during
> sync).
> * A major step step towards an SPV mode using the reference codebase.
>
> Historically, this mode of operation has been known for years (Greg
> Maxwell wrote up a description of a very similar method in
> https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync
> in early 2012, but it was known before that), but it took a long time
> to refactor these code enough to support it.
>
> Technically, it works by replacing the single-peer blocks download by
> a single-peer headers download (which typically takes seconds/minutes)
> and verification, and simultaneously fetching blocks along the best
> known headers chain from all peers that are known to have the relevant
> blocks. Downloading is constrained to a moving window to avoid
> unbounded unordering of blocks on disk (which would interfere with
> pruning later).
>
> At the protocol level, it increases the minimally supported version
> for peers to 31800 (corresponding to bitcoin v3.18, released in
> december 2010), as earlier versions did not support the getheaders P2P
> message.
>
> So, the code is available as a github pull request
> (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on
> http://bitcoin.sipa.be/builds/headersfirst, where you can also find
> binaries to test with.
>
> Known issues:
> * At the very start of the sync, especially before all headers are
> processed, downloading is very slow due to a limited number of blocks
> that are requested per peer simultaneously. The policies around this
> will need some experimentation can certainly be improved.
> * Blocks will be stored on disk out of order (in the order they are
> received, really), which makes it incompatible with some tools or
> other programs. Reindexing using earlier versions will also not work
> anymore as a result of this.
> * The block index database will now hold headers for which no block is
> stored on disk, which earlier versions won't support. If you are fully
> synced, it may still be possible to go back to an earlier version.
>
> Unknown issues:
> * Who knows, maybe it will replace your familiy pictures with Nyan
> Cat? Use at your own risk.
>
> TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or
> http://bitcoin.sipa.be/builds/headersfirst.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer
> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports
> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper
> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141016/3ed00833/attachment.html>

From laanwj at gmail.com  Thu Oct 16 06:22:04 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 16 Oct 2014 08:22:04 +0200
Subject: [Bitcoin-development] Proposed BIP status changes
In-Reply-To: <201410160436.52259.luke@dashjr.org>
References: <CA+s+GJApfj5OAxGyHG9CsmRHTpAQBgC44iU2U99LwNGNZDATBw@mail.gmail.com>
	<201410160436.52259.luke@dashjr.org>
Message-ID: <CA+s+GJAhJTXZwotBzGMh_D3ZadjuP-UtOV+Xv+pBMZ7QOH21GQ@mail.gmail.com>

>
> Shouldn't we be doing this in a GitHub PR rather than spamming up the ML?

Not really. BIP changes should be discussed on the mailing list,
that's the way to get community consensus (as specified in BIP1).

Wladimir



From luke at dashjr.org  Thu Oct 16 06:46:21 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 16 Oct 2014 06:46:21 +0000
Subject: [Bitcoin-development] Proposed BIP status changes
In-Reply-To: <CA+s+GJAhJTXZwotBzGMh_D3ZadjuP-UtOV+Xv+pBMZ7QOH21GQ@mail.gmail.com>
References: <CA+s+GJApfj5OAxGyHG9CsmRHTpAQBgC44iU2U99LwNGNZDATBw@mail.gmail.com>
	<201410160436.52259.luke@dashjr.org>
	<CA+s+GJAhJTXZwotBzGMh_D3ZadjuP-UtOV+Xv+pBMZ7QOH21GQ@mail.gmail.com>
Message-ID: <201410160646.22544.luke@dashjr.org>

On Thursday, October 16, 2014 6:22:04 AM Wladimir wrote:
> > Shouldn't we be doing this in a GitHub PR rather than spamming up the ML?
> 
> Not really. BIP changes should be discussed on the mailing list,
> that's the way to get community consensus (as specified in BIP1).
> 
> Wladimir

Discussion vs simple ACKing.



From thomas at thomaszander.se  Thu Oct 16 07:50:48 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Thu, 16 Oct 2014 09:50:48 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CA+s+GJCzBHGoBo8mcubbaavwR2HPave8GbA90+aGYgiJDKm=4g@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CAAS2fgQRWAk6+ZvEaAX+Mp+_dtg9G_h8+tYxtZpVhu=Djb0k7A@mail.gmail.com>
	<CA+s+GJCzBHGoBo8mcubbaavwR2HPave8GbA90+aGYgiJDKm=4g@mail.gmail.com>
Message-ID: <201410160950.48809.thomas@thomaszander.se>

On Wednesday 15. October 2014 11.36.58 Wladimir wrote:
> > We're also having problems with people failing to comment on things,
> > not even "I looked at this and have no opinion", which is really
> > obstructing things.
> 
> Well - the only way to avoid that is to set a reasonable deadline,
> after which there is a default decision. You'd hope this would
> motivate people to get involved in time.

I have been part of both the OSI (NEN) and the OASIS standards committees for 
a while, working on standards as a technical adviser.

There I learned a lot about how to manage this process, maybe some ideas from 
such committees can be useful.

The idea that one person owns a BIP makes total sense, (s)he is the only one 
that should be putting forward the BIP when its mature enough for making it 
final. Note that this can be already after its been implemented once or twice.

So you have a phase where you have random people propose changes, which should 
all go in the public mailinglist, and they can be accepted by the owner 
without discussion.
If anyone that sees that change has an objection to the change, (s)he speaks 
up and you follow group consensus. This means (and this is actually in an ISO 
standard ;) that consensus is reached when nobody is left objecting to the 
change.

At some point the BIP is mature enough to vote on, at the discretion of the 
owner, and the owner puts it forward and requests a vote. If the above process 
was handled cleanly there is a very small chance of it being down-voted so an 
actual vote may not be needed (its hard to decide who gets a vote..).
You obviously need a deadline for this and afterwards you mark the proposal 
final. Or you close it as "needs more work".
-- 
Thomas Zander



From thomas at thomaszander.se  Thu Oct 16 07:38:08 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Thu, 16 Oct 2014 09:38:08 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CANEZrP0-Rnoe2GzvTs4nztbTMWKVxxuW=qMMwtcgoQJCvRkosA@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
	<CANEZrP0-Rnoe2GzvTs4nztbTMWKVxxuW=qMMwtcgoQJCvRkosA@mail.gmail.com>
Message-ID: <201410160938.08495.thomas@thomaszander.se>

On Wednesday 15. October 2014 20.13.11 Mike Hearn wrote:
> Plus its moderation features suck, its mail archiving features suck, etc.
> It essentially has no redeeming features at all.

Other than it being open source, an open platform with no lock-in 'features' 
and it works with everyone that uses the standards properly.
Naturally, if an old version fails to function with Yahoo, I'm all for finding 
a different provider. Thats what open platforms, like Mailman, are about.

-- 
Thomas Zander



From bitcoin at olivere.de  Thu Oct 16 14:19:37 2014
From: bitcoin at olivere.de (Oliver Egginger)
Date: Thu, 16 Oct 2014 16:19:37 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CANEZrP0-Rnoe2GzvTs4nztbTMWKVxxuW=qMMwtcgoQJCvRkosA@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>	<CABsx9T1U10R4t9NNO9rSSfBxcpOLQNvKFC=7fRKa5Tq41+67cQ@mail.gmail.com>	<CANEZrP1yFOWcJUr+ML73Eoqa=EvYRZivkogdrFdww+5QsOXhBw@mail.gmail.com>	<CALqxMTErVtN2bj7s=DiX4ajzMtQ=M+_DCFQ0=jT6QWUVaXwY_w@mail.gmail.com>
	<CANEZrP0-Rnoe2GzvTs4nztbTMWKVxxuW=qMMwtcgoQJCvRkosA@mail.gmail.com>
Message-ID: <543FD3F9.8040105@olivere.de>

15.10.2014 at 20:13 Mike Hearn wrote:
> For a project that is based on digital signatures, it's really
> bad that the mailing list is incompatible with Yahoo's "mail signatures
> must be valid" policy.

# Mailman: Do not break existing DKIM signatures
DEFAULT_SUBJECT_PREFIX  = ""
DEFAULT_MSG_HEADER = ""
DEFAULT_MSG_FOOTER = ""

Maybe you should remove these settings. They make little sense and cause
apparently problems for some recipients.

Also the mail body must not be altered through advertising or something
else.

- oliver



From info at AndySchroder.com  Fri Oct 17 19:58:48 2014
From: info at AndySchroder.com (Andy Schroder)
Date: Fri, 17 Oct 2014 15:58:48 -0400
Subject: [Bitcoin-development] Two Proposed BIPs - Bluetooth Communication
 and bitcoin: URI Scheme Improvements
Message-ID: <544174F8.1050208@AndySchroder.com>

Hello,

I'd like to introduce two proposed BIPs. They are primarily focused on 
implementing the payment protocol using bluetooth connections. I've been 
working on automated point of sale devices and bluetooth communication 
is critical in my mind due to the potential lack of internet access at 
many points of sale, either due to lack of cellular internet coverage, 
lack of payee providing wireless internet, and/or due to financial 
constraints of the payer prohibiting them from maintaining a cellular 
internet service plan. These BIPs are largely modeled after the current 
functionality of Andreas Schildbach's android Bitcoin Wallet's bluetooth 
capability. I've discussed the communication scheme with him in depth 
and believe these proposals to clearly and accurately represent the 
communication scheme.

There is also an additional &h= parameter added to the bitcoin: URI 
scheme which applies to both bluetooth and http payment protocol 
requests which allows for a hash of the payment request to be included. 
This hash was proposed by Andreas as an amendment to BIP72, but others 
preferred not to amend BIP72 since it has already been put into place. 
The current version of Schildbach's bitcoin wallet already supports the 
"h parameter".

I'd appreciate feedback from everyone, particularly wallet developers as 
widespread bluetooth support among wallets is very important to me. I'm 
also very new to this mailing list as well as the BIP writing process, 
so I'd appreciate your understanding if my conventions are not standard. 
I am currently using the naming conventions "TBIP", so that I can 
propose /temporary/ BIP numbers, and cross reference between the two. 
Obviously these will change if the BIPs are formally adopted. You can 
find a copy of these proposed BIPs at the following links:

  * https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki
  * https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki


If you are interested, you can see a demonstration of many of the 
proposed features using Schildbach's wallet and my fuel pump in a video 
I recently created: https://youtu.be/kkVAhA75k1Y . The main thing not 
implemented is multiple URLs for the payment protocol, so, as a hack, 
I'm just presenting https vi QR code and bluetooth via NFC on my fuel 
pump for now.



There are a few known issues that could be improved to this bluetooth 
communication scheme as well as the general payment protocol and myself 
and Andreas would like to receive feedback regarding concerns and 
potential solutions. Some of the known issues are:

  * There may seem to be some inconsistency in the connection header
    messages between the payment request connection and the payment
    connection. This is largely because it is how Andreas originally
    implemented the communication and is hesitant to change it since
    there are many instances of is software already deployed that
    implement this scheme.
  * The current method uses an unauthenticated bluetooth connection for
    bluetooth 2.1 and newer devices (subject to man in the middle
    attacks, but not passive eavesdroppers), and an unsecure and
    unauthenticated connection for older devices. The known concerns
    here are that someone within 100 meters of the payer could track the
    bitcoin addresses used for the transaction and could possibly
    replace the refund address by submitting a forged payment message to
    the payee. Requiring bluetooth 2.1 and authenticating the connection
    out of band unfortunately don't seem to be as straightforward/simple
    of a task with most bluetooth libraries (although I'd love for
    someone to prove me wrong). It's possible this communication scheme
    could be extended to use an https "like" protocol that would not
    care if the underlying bluetooth connection is authenticated or
    encrypted. It's actually possible that http over a bluetooth socket
    (instead of tcp socket) could be implemented, however it is
    presently uncertain whether this would be too slow, too much
    overhead (both on the devices software and communication), or if
    http could easily be run over bluetooth sockets on all platforms.
  * There is no acknowledgement failure message possible in the payment
    protocol, only an acknowledgement message or lack of acknowledgement
    message. This issue seems to be a concern and as a result, the memo
    field is used to send an "ack" or "nack" in Schildbach's wallet. Can
    we add a boolean status field to the payment acknowledgement message?
  * I'd personally like a new optional boolean field added to the
    "PaymentDetails" portion of the "PaymentRequest" to allow for the
    payer's wallet to match the "Output" optional "amount" fields as a
    total amount of all Outputs, rather than requiring the amount for
    each output to be matched exactly. As it currently is, the payee can
    specify multiple receiving addresses in order to require a payer
    split up the payments so that when the payee then goes to spend the
    funds later, they don't necessarily have to give their payees as
    much knowledge of their balances and spending and receiving habits
    and sources. As the payment protocol currently is requiring all
    output amounts to be matched exactly for each output, there is no
    flexibility given to the payer in order to reduce a merging or
    unnecessary diverging of account funds, which can reduce the privacy
    of both the payer and the payee. If the payee were given the option
    to allow the payer the option to divide the amounts amount the
    outputs intelligently, there can be some privacy gained.
  * Amount of data stored in QR codes may be getting large when a
    backwards compatible URL is used (for wallets that don't support the
    payment protocol) and can be difficult to scan with outdoor screens
    that have an extra weather resistant pane when in direct sunlight.
  * The number of offline transactions of a wallet is limited to the
    known unspent outputs when they go offline. Long term, I'd like to
    see wallet devices that can use systems such as Kryptoradio's DVB-T
    based broadcast (but this will need yet another radio!). Another
    project may be to develop a blockchain query protocol of some kind
    where retailers can provide access to blockchain data so that
    customer's wallets can update their known unspent outputs via
    bluetooth. It's possible such a bluetooth system could be used in
    combination of "Kryptoradio" like broadcasts to provide multiple
    blockchain references.
  * The additional payment_url approach is a bit sloppy of a solution in
    the PaymentDetails portion of the PaymentRequest. It would have been
    ideal to just change this from an optional field to a repeated
    field, however, the backwards compatibility in the protocol buffer
    format will provide the last item in the array for a repeated field
    (to a code that expects it to be an optional field), rather than the
    first. Because of this, backwards compatibility with https payment
    requests wouldn't work if the payment_url field is just changed to a
    repeated field.
      o Possible alternatives to what is described in the proposed BIP
          + Change payment_url to a repeated field and then reverse the
            order of the parameter numbers in the payment_url, compared
            to the bitcoin URL "r parameter".
          + Create an additional, new payment_url_multi repeated field
            (or some better name), and then leave the original
            payment_url field in there for backwards compatibility (and
            then maybe phase it out in the future).
      o Reference
          + https://developers.google.com/protocol-buffers/docs/proto#updating
              # "|optional| is compatible with |repeated|. Given
                serialized data of a repeated field as input, clients
                that expect this field to be |optional| will take the
                last input value if it's a primitive type field or merge
                all input elements if it's a message type field."



Your comments and suggestions would be greatly appreciated.

-- 
Andy Schroder

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141017/b6585627/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 555 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141017/b6585627/attachment.sig>

From flavien.charlon at coinprism.com  Fri Oct 17 20:36:04 2014
From: flavien.charlon at coinprism.com (Flavien Charlon)
Date: Fri, 17 Oct 2014 21:36:04 +0100
Subject: [Bitcoin-development] About watch-only addresses
Message-ID: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>

Hi,

What is the status of watch-only addresses in Bitcoin Core? Is it merged in
master and usable? Is there documentation on how to add a watch-only
address through RPC.

Also, I believe that is going towards the 0.10 release, is there a
rough ETA for a release candidate?

Thanks
Flavien
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141017/3fced468/attachment.html>

From flavien.charlon at coinprism.com  Sat Oct 18 09:44:10 2014
From: flavien.charlon at coinprism.com (Flavien Charlon)
Date: Sat, 18 Oct 2014 10:44:10 +0100
Subject: [Bitcoin-development] About watch-only addresses
In-Reply-To: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>
References: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>
Message-ID: <CABbpET9NHKyfPTjam3gH8McT+Bz197BiVAtoBTtODU=BtJ70qQ@mail.gmail.com>

Also, I was wondering if there were nightly builds I could try this from?

On Fri, Oct 17, 2014 at 9:36 PM, Flavien Charlon <
flavien.charlon at coinprism.com> wrote:

> Hi,
>
> What is the status of watch-only addresses in Bitcoin Core? Is it merged
> in master and usable? Is there documentation on how to add a watch-only
> address through RPC.
>
> Also, I believe that is going towards the 0.10 release, is there a
> rough ETA for a release candidate?
>
> Thanks
> Flavien
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141018/7584839b/attachment.html>

From laanwj at gmail.com  Sat Oct 18 10:13:28 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 18 Oct 2014 12:13:28 +0200
Subject: [Bitcoin-development] About watch-only addresses
In-Reply-To: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>
References: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>
Message-ID: <CA+s+GJBsgKrZgtOTHFqpbGPp8YfbYdRE885emiqMApGfUGX0WA@mail.gmail.com>

On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon
<flavien.charlon at coinprism.com> wrote:
> Hi,
>
> What is the status of watch-only addresses in Bitcoin Core? Is it merged in
> master and usable? Is there documentation on how to add a watch-only address
> through RPC.

It has been merged. There is the "importaddress" RPC call, which works
the same as "importprivkey" except that you a pass it an address.

> Also, I believe that is going towards the 0.10 release, is there a rough ETA
> for a release candidate?

Yes - aim is in a few months, probably by the end of the year.

AFAIK there are no nightly builds at this moment. Warren Togami was
building them for a while (at http://nightly.bitcoin.it/) but he
stopped some time around June.

It's not recommended to use master without at least a little bit of
development/debugging experience of yourself (to trace down problems
when they appear), so it's best to build it yourself if you're going
to test day-to-day development versions.

Wladimir



From timo.hanke at web.de  Sat Oct 18 18:25:59 2014
From: timo.hanke at web.de (Timo Hanke)
Date: Sat, 18 Oct 2014 13:25:59 -0500
Subject: [Bitcoin-development] Proposal for extra nonce in block header
In-Reply-To: <CANEZrP38P8-NVy5p1zBnk97MMZTZx7Fdhx386CAa2018e64abA@mail.gmail.com>
References: <20140427070732.GA23422@crunch>
	<CAKaEYh+ajt1QUz9_8v1b4azeajCdPB+WuCdsix3J8hO7vLnTvw@mail.gmail.com>
	<20140504151451.GB5432@crunch>
	<CANEZrP38P8-NVy5p1zBnk97MMZTZx7Fdhx386CAa2018e64abA@mail.gmail.com>
Message-ID: <20141018182559.GE23626@crunch>

Greg,

I'd like to ask you to assign a BIP number to this proposal and open
another round of discussion.

There is now a reference implementation available as pull request #5102
(https://github.com/bitcoin/bitcoin/pull/5102).

It introduces a new version number (3) to properly distinguish the
interpretation of the version number and allow for a clean upgrade
process.

Unittests are included.

The updated BIP draft in .mediawiki format is available here:
https://github.com/BlockheaderNonce2/bitoin/wiki

Thanks,
Timo

On Sun, May 04, 2014 at 05:26:06PM +0200, Mike Hearn wrote:
> Although I agree 32 bits for a version is overkill, I really don't like the
> idea of you simply ignoring the protocol spec to try and reduce your own costs.
> Especially because in future we should make unknown versions a validation rule,
> so we can easily trigger hard forks.
> 
> If this change was introduced through a proper process and software was
> properly upgraded to understand the new header format, that'd be one thing.
> Arbitrarily exploiting what is IMHO a missing rule in the rule set to shave a
> bit more profit is something else.
> 
> 
> On Sun, May 4, 2014 at 5:14 PM, Timo Hanke <timo.hanke at web.de> wrote:
> 
>     > If changing the structure of the block header, wouldnt you also need to
>     > increment the version number to 3?
> 
>     No, in this case I don't think so. Incrementing the version number has
>     two purposes:
> 
>     1. inform old clients that something new is going on
>     2. be able to phase out old version numbers and block them once the new
>     version number becomes a supermajority.
> 
>     None of these two is necessary here. Old clients already recognize the
>     new block headers as something new because they look like very high
>     version numbers to them. And there is no reason to ever phase out blocks
>     that have zero in the MSBs of the version.
> 
>     On Sun, Apr 27, 2014 at 10:17:11AM +0200, Melvin Carvalho wrote:
>     > On 27 April 2014 09:07, Timo Hanke <timo.hanke at web.de> wrote:
>     >
>     > ? ? I'd like to put the following draft of a BIP up for discussion.
>     >
>     > ? ? Timo
>     >
>     > ? ? # Abstract
>     > ? ? There are incentives for miners to find cheap, non-standard ways to
>     > ? ? generate new work, which are not necessarily in the best interest of
>     the
>     > ? ? protocol.
>     > ? ? In order to reduce these incentives this proposal re-assigns 2 bytes
>     from
>     > ? ? the version field of the block header to a new extra nonce field.
>     > ? ? # Copyright
>     > ? ? # Specification
>     > ? ? The block version number field in the block header is reduced in size
>     from
>     > ? ? 4 to 2 bytes.
>     > ? ? The third and fourth byte in the block header are assigned to the new
>     extra
>     > ? ? nonce field inside the block header.
>     > ? ? # Motivation
>     > ? ? The motivation of this proposal is to provide miners with a cheap
>     > ? ? constant-complexity method to create new work that does not require
>     > ? ? altering the transaction tree.
>     >
>     > ? ? Furthermore, the motivation is to protect the version and timestamp
>     fields
>     > ? ? in the block header from abuse.
>     > ? ? # Rationale
>     > ? ? Traditionally, the extra nonce is part of the coinbase field of the
>     > ? ? generation transaction, which is always the very first transaction of
>     a
>     > ? ? block.
>     > ? ? After incrementing the extra nonce the minimum amount of work a miner
>     has
>     > ? ? to do to re-calculate the block header is a) to hash the coinbase
>     > ? ? transaction and b) to re-calculate the left-most branch of the merkle
>     tree
>     > ? ? all the way to the merkle root.
>     > ? ? This is necessary overhead a miner has to do besides hashing the
>     block
>     > ? ? header itself.
>     > ? ? We shall call the process that leads to a new block header from the
>     same
>     > ? ? transaction set the _pre-hashing_.
>     >
>     > ? ? First it should be noted that the relative cost of pre-hashing in its
>     > ? ? traditional form depends
>     > ? ? on the block size, which may create an unwanted incentive for miners
>     > ? ? to keep the block size small. However, this is not the main
>     motivation for
>     > ? ? the current proposal.
>     >
>     > ? ? While the block header is hashed by ASICs, pre-hashing typically
>     happens on
>     > ? ? a CPU because of the greater flexibility required.
>     > ? ? Consequently, as ASIC cost per hash performance drops the relative
>     cost of
>     > ? ? pre-hashing increases.
>     >
>     > ? ? This creates an incentive for miners to find cheaper ways to create
>     new
>     > ? ? work than by means of pre-hashing.
>     > ? ? An example of this currently happening is the on-device rolling of
>     the
>     > ? ? timestamp into the future.
>     > ? ? These ways of creating new work are unlikely to be in the best
>     interest of
>     > ? ? the protocol.
>     > ? ? For example, rolling the timestamp faster than the real time is
>     unwanted
>     > ? ? (more so on faster blockchains).
>     >
>     > ? ? The version number in the block header is a possible target for
>     alteration
>     > ? ? with the goal of cheaply creating new work.
>     > ? ? Currently, blocks with arbitrarily large version numbers get relayed
>     and
>     > ? ? accepted by the network.
>     > ? ? As this is unwanted behaviour, there should not exist any incentive
>     for a
>     > ? ? miner to abuse the version number in this way.
>     >
>     > ? ? The solution is to reduce the range of version numbers from 2^32 to 2
>     ^16
>     > ? ? and to declare the third and forth bytes of the block header as
>     legitimate
>     > ? ? space for an extra nonce.
>     > ? ? This will reduce the incentive for a miner to abuse the shortened
>     version
>     > ? ? number by a factor in the order of 2^16.
>     >
>     > ? ? As a side effect, this proposal greatly reduces the bandwidth
>     requirements
>     > ? ? of a blind pool protocol by only submitting the block header to the
>     miner.
>     > ? ? # Backwards Compatibility
>     > ? ? Old versions of the client will accept blocks of this kind but will
>     throw
>     > ? ? an alert at the user to upgrade.
>     > ? ? The only code change would be a cast of the version number to a
>     short.
>     > ? ? Besides the upgrade alert, old and new versions of the client can
>     co-exist
>     > ? ? and there is no need to introduce a new block version number or to
>     > ? ? phase-out old block versions.
>     > ? ? # Reference Implementation
>     > ? ? # Final implementation
>     >
>     >
>     > If changing the structure of the block header, wouldnt you also need to
>     > increment the version number to 3?
> 
>     ------------------------------------------------------------------------------
>     "Accelerate Dev Cycles with Automated Cross-Browser Testing - For FREE
>     Instantly run your Selenium tests across 300+ browser/OS combos. ?Get
>     unparalleled scalability from the best Selenium testing platform available.
>     Simple to use. Nothing to install. Get started now for free."
>     http://p.sf.net/sfu/SauceLabs
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 

-- 
Timo Hanke
PGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8



From micaroni at walltime.info  Sat Oct 18 18:43:08 2014
From: micaroni at walltime.info (Felipe Micaroni Lalli)
Date: Sat, 18 Oct 2014 15:43:08 -0300
Subject: [Bitcoin-development] About watch-only addresses
In-Reply-To: <CA+s+GJBsgKrZgtOTHFqpbGPp8YfbYdRE885emiqMApGfUGX0WA@mail.gmail.com>
References: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>
	<CA+s+GJBsgKrZgtOTHFqpbGPp8YfbYdRE885emiqMApGfUGX0WA@mail.gmail.com>
Message-ID: <5442B4BC.9040601@walltime.info>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

This feature makes possible Bitcoin Core to read a balance of any
public address via RPC call or, after importing the balance, it became
available only via QT interface?

On 18-10-2014 07:13, Wladimir wrote:
> On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon 
> <flavien.charlon at coinprism.com> wrote:
>> Hi,
>> 
>> What is the status of watch-only addresses in Bitcoin Core? Is it
>> merged in master and usable? Is there documentation on how to add
>> a watch-only address through RPC.
> 
> It has been merged. There is the "importaddress" RPC call, which
> works the same as "importprivkey" except that you a pass it an
> address.
> 
>> Also, I believe that is going towards the 0.10 release, is there
>> a rough ETA for a release candidate?
> 
> Yes - aim is in a few months, probably by the end of the year.
> 
> AFAIK there are no nightly builds at this moment. Warren Togami
> was building them for a while (at http://nightly.bitcoin.it/) but
> he stopped some time around June.
> 
> It's not recommended to use master without at least a little bit
> of development/debugging experience of yourself (to trace down
> problems when they appear), so it's best to build it yourself if
> you're going to test day-to-day development versions.
> 
> Wladimir
> 
> ------------------------------------------------------------------------------
>
> 
Comprehensive Server Monitoring with Site24x7.
> Monitor 10 servers for $9/Month. Get alerted through email, SMS,
> voice calls or mobile push notifications. Take corrective actions
> from your mobile device. http://p.sf.net/sfu/Zoho 
> _______________________________________________ Bitcoin-development
> mailing list Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

- -- 
Felipe Micaroni Lalli

Walltime: https://walltime.info
Bitcoin Paranoid Android developer
PGP ID: 0x4c0afccfed5cde14
BTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQIcBAEBAgAGBQJUQrS8AAoJEEwK/M/tXN4UcsgQAMKyKFO2EcJ1+Ib08c5dJAft
VGNzf9c7TQtv/wfTWwqfD0QlkZ0jYqgoEJIflYJi7DhqFARQg2nTJIDoKAyDypaH
0x7ckt0G4Fp4Dq9GQAqyJq+5NFTO+S4LpnhzMGDLE6PZNOeoDRYf8GbuzNjCAU6s
huB9OhvXa4XZ2azsFnAhx3CcM98jTcbm0SLctqlTcHr//FMjEJioDFZATutlu8be
/PIhQ6OkfjBSeZv7A4lwgd0vbGJ8ioEkLMmjzYgfeaZG5KxOJXXzX9nDysAw7O3U
jXE/zpm9pFqZ9uhgdG1gzTBoROn49xZmycA82NbTn8/+mLrK7WYFei3Th5V0G1DG
hUI0vEb8g6id+y3w0HWnYqquFZBFOLNfs7ONsKdqvMj+ci2+IavAU7SY51BQcEwm
GW6d24Fd9/zhliEmFzq61xvOj5Rgcj7piGH/qMtGKYececS0tFMxQ4IDH+bkxKhr
lZ00Zk0K4bTCq3cASjP9L9AgV3zmTOUfe9RMtIHTJq79TIDPbBCsz2PrbtAcgWGZ
vb/08asgPC2FZHKOWf1TGiDr34JlBPhNKVKfiDuxbGqLGjlhYrdqkl1CrVqJP7dW
dxvEkwittodLc5MnVdS7QIHfjXJ/UEbyINIe7zrX/7w3pf0aLAX0KaxpDpfBessD
Nf2y99ZocpddQu0/EDJl
=Ctf/
-----END PGP SIGNATURE-----



From xor at freenetproject.org  Sun Oct 19 07:17:51 2014
From: xor at freenetproject.org (xor)
Date: Sun, 19 Oct 2014 09:17:51 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
Message-ID: <2753630.UjohjSx8jx@1337h4x0r>

On Wednesday, October 15, 2014 10:29:43 AM Wladimir wrote:
> B) I also think it makes sense to move the BIP discussion (both about
> the BIP process and individual BIPs) to a separate mailing list.
> 
> bitcoin-development currently has a dual function: discussion of
> Bitcoin Core implementation concerns, as well as global changes to
> Bitcoin (in the form of BIPs).
> 
> This makes the list too busy for some people, but it is critical that
> everyone writing a Bitcoin node or client is up-to-date with proposals
> and can comment on them.

I joined the list when Bitcoin was already in the 10-billions of market 
capitalization, and it actually really surprised me how low the traffic is here 
given the importance of Bitcoin.

So as a random stranger to the project, I would vote against that if I was 
allowed to. There really should be *more* discussion here, and splitting the 
list up won't help with that.

Greetings
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141019/3bafc443/attachment.sig>

From btcdrak at gmail.com  Sun Oct 19 09:42:07 2014
From: btcdrak at gmail.com (Btc Drak)
Date: Sun, 19 Oct 2014 10:42:07 +0100
Subject: [Bitcoin-development] BIP process
In-Reply-To: <2753630.UjohjSx8jx@1337h4x0r>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<2753630.UjohjSx8jx@1337h4x0r>
Message-ID: <CADJgMztHyft-hLdzfOXABTAZxhmH_irSc_cqUgkBZ0tpSRMb8w@mail.gmail.com>

On Sun, Oct 19, 2014 at 8:17 AM, xor <xor at freenetproject.org> wrote:

> I joined the list when Bitcoin was already in the 10-billions of market
> capitalization, and it actually really surprised me how low the traffic is
> here
> given the importance of Bitcoin.
>
> So as a random stranger to the project, I would vote against that if I was
> allowed to. There really should be *more* discussion here, and splitting
> the
> list up won't help with that.


I agree. This is also where the best peer review is to be found. Splitting
the list will dilute this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141019/c8e7d3fb/attachment.html>

From laanwj at gmail.com  Sun Oct 19 09:49:48 2014
From: laanwj at gmail.com (Wladimir)
Date: Sun, 19 Oct 2014 11:49:48 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <2753630.UjohjSx8jx@1337h4x0r>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<2753630.UjohjSx8jx@1337h4x0r>
Message-ID: <CA+s+GJB+RfqYNH+c99uLgFtJPEigW378A62bqYfZm2A_3o9c3A@mail.gmail.com>

On Sun, Oct 19, 2014 at 9:17 AM, xor <xor at freenetproject.org> wrote:

> So as a random stranger to the project, I would vote against that if I was
> allowed to. There really should be *more* discussion here, and splitting the
> list up won't help with that.

The problem is not one of traffic, but of confusion of concerns, and of focus.

That specific questions about Bitcoin Core are being asked, for
example about watch-only functionality, in the same list where changes
to the entire system (BIPs) should be decided on doesn't make sense.

This has in practice caused some developers of alternative clients to
not subscribe to this list, even though they *should* follow BIP
discussion otherwise it makes no sense to have a process in the first
place.

Wladimir



From thomas at thomaszander.se  Sun Oct 19 18:58:02 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Sun, 19 Oct 2014 20:58:02 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <2753630.UjohjSx8jx@1337h4x0r>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<2753630.UjohjSx8jx@1337h4x0r>
Message-ID: <2099106.fAD26qAWoq@coldstorage>

On Sunday 19. October 2014 09.17.51 xor wrote:
> I joined the list when Bitcoin was already in the 10-billions of market 
> capitalization, and it actually really surprised me how low the traffic is
> here  given the importance of Bitcoin.

I gather that actual code changes to bitcoin-core and naturally all the other 
clients are already done in another place. Which is likely the reason for your 
impression.
 
> So as a random stranger to the project, I would vote against that if I was 
> allowed to. There really should be *more* discussion here, and splitting
> the  list up won't help with that.

I agree with your stance that more discussion in public is always good.

Lets allow people that work on bitcoin java, or completely other bitcoin based 
stuff to have a simple way to filter out the topics they are interested in.
Mailinglist handling is pretty trivial in practically all email software, 
people can equally trivially subscribe to multiple lists as their interests 
go.

As a long time open source developer, my experience is that more lists has 
never really caused fragmentation in the way that you fear.



From odinn.cyberguerrilla at riseup.net  Mon Oct 20 00:33:34 2014
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Mon, 20 Oct 2014 00:33:34 +0000
Subject: [Bitcoin-development] BIP process
In-Reply-To: <2753630.UjohjSx8jx@1337h4x0r>
References: <CA+s+GJCAWXgpzyQnAar6ecKdcci+tdR8yJjCOUpB=xmj-ytZZQ@mail.gmail.com>
	<2753630.UjohjSx8jx@1337h4x0r>
Message-ID: <5444585E.5080600@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Earlier in the discussion I suggested Discourse so that the BIP page
would be able to look smoother and draw more input.
Unsystem forum is run on Discourse and has twitter, github, and e-mail
integration.
For those who haven't explored it, here is what that looks / feels like:
https://forum.unsystem.net/

I'm curious as to why this sort of solution should or should not be
considered from someone else's perspective. In the end, whatever
works best for all concerned, I'm fine with it, but I'd like to hear
more about people's thoughts on Discourse. (I kind of like the feel
of it.)

xor wrote:
> On Wednesday, October 15, 2014 10:29:43 AM Wladimir wrote:
>> B) I also think it makes sense to move the BIP discussion (both 
>> about the BIP process and individual BIPs) to a separate mailing
>>  list.
>> 
>> bitcoin-development currently has a dual function: discussion of 
>> Bitcoin Core implementation concerns, as well as global changes 
>> to Bitcoin (in the form of BIPs).
>> 
>> This makes the list too busy for some people, but it is critical
>>  that everyone writing a Bitcoin node or client is up-to-date 
>> with proposals and can comment on them.
> 
> I joined the list when Bitcoin was already in the 10-billions of 
> market capitalization, and it actually really surprised me how low
>  the traffic is here given the importance of Bitcoin.
> 
> So as a random stranger to the project, I would vote against that 
> if I was allowed to. There really should be *more* discussion here,
> and splitting the list up won't help with that.
> 
> Greetings
> 
> 
> 
> ------------------------------------------------------------------------------
>
>
>
> 
Comprehensive Server Monitoring with Site24x7.
> Monitor 10 servers for $9/Month. Get alerted through email, SMS, 
> voice calls or mobile push notifications. Take corrective actions 
> from your mobile device. http://p.sf.net/sfu/Zoho
> 
> 
> 
> _______________________________________________ Bitcoin-development
> mailing list Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn

-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJURFhXAAoJEGxwq/inSG8Cpc0H+wZauz7iOj4XZJSI3VBv+5WL
YAe8kDSOpa5ZprFntsFfKVU+cmSjXckPjCRI9+LsrfTR2L+VjAimjQTct1m6oRAo
+5ZQ8Tn2CLEVRJRUzd8zbW8QPMuQCdzvwjs1oq8anaAPdwseEC/QhTZY6Av1MB8y
nH+05mMu4YeF3RRIyjXgvxDiBBK3knoaBkbsORkVbIb7MojUBy7FnsS1JFmSs8wv
XwWnkmFjVlhC8wSQYohcTWdJablxjpKRFq1ZNgDtIoXEi0dsC+G9Gc+8xub4hA/Y
nDk85ihX17TBbB47SOJEAdpGrJjkb8OvdX2ubLnQPYth82wX/MWJTTdv2a4JGik=
=uYGH
-----END PGP SIGNATURE-----



From mike at plan99.net  Mon Oct 20 10:56:15 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 20 Oct 2014 12:56:15 +0200
Subject: [Bitcoin-development] About watch-only addresses
In-Reply-To: <5442B4BC.9040601@walltime.info>
References: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>
	<CA+s+GJBsgKrZgtOTHFqpbGPp8YfbYdRE885emiqMApGfUGX0WA@mail.gmail.com>
	<5442B4BC.9040601@walltime.info>
Message-ID: <CANEZrP043U1FNcTPDg1OLPz-Hej48G+UGb4rh9bSp8qcGE=eVg@mail.gmail.com>

>
> This feature makes possible Bitcoin Core to read a balance of any
> public address via RPC call or, after importing the balance, it became
> available only via QT interface?


Neither. A watching wallet still has to be synced with the chain in the
same way as any other wallet, i.e. after adding an address, if it was
already used, you must rescan.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/f2f3a526/attachment.html>

From mike at plan99.net  Mon Oct 20 12:50:24 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 20 Oct 2014 14:50:24 +0200
Subject: [Bitcoin-development] Two Proposed BIPs - Bluetooth
 Communication and bitcoin: URI Scheme Improvements
In-Reply-To: <544174F8.1050208@AndySchroder.com>
References: <544174F8.1050208@AndySchroder.com>
Message-ID: <CANEZrP33KH1F8GrTDnTP95G1MyxZ+DXWrC6QKBrj61HXv-eg2w@mail.gmail.com>

Hey Andy,

Thanks for starting this discussion!

One thing this brings up is the never-resolved issue of whether BIPs should
document how we'd *like* things to work, or how things *actually do* work.
BIP32 is an example of the former - it was new technology and the spec was
finalised before any wallets actually implemented it. BIP 44 is an example
of the latter, it basically documents how myTREZOR works and as such there
was minimal or no scope for changes to it. Of course both kinds of document
are valuable.

Currently these specs document how Andreas' app already works. Whilst
preserving compatibility with existing Android apps is surely useful,
having a well designed protocol is also good. The current protocol has
several problems. I don't know which is more important right now and don't
have a strong opinion on that. My gut feeling is that these documents
should possibly be just wiki pages on Andreas' github. Then if the protocol
is brought to a point where it seems pretty good, maybe it can be BIPped at
that point. Alternatively, if developers of other wallet apps feel they'd
like a BIP right now even in the current state, that would be a very
important data point.

Re: the actual specs:

>
>    - There may seem to be some inconsistency in the connection header
>    messages
>
> IMHO we could live with that. Although Android apps are updatable, perfect
header format is probably not worth the inevitable hassle and transition
period that would result.

>
>    - The current method uses an unauthenticated bluetooth connection for
>    bluetooth 2.1
>
> This on the other hand is not excellent. This is actually my fault - the
first Bluetooth support in Bitcoin Wallet for Android was written by me in
a frantic Berlin hackathon over a weekend. We barely got it working at all
by the end, so doing encryption/auth was out of the question. Then I went
back to more important tasks and what got shipped was a cleaned
up/robustified version of that.

Re: hash. I'm not a fan of this approach. For one, in future there might
not even BE a uri involved, e.g. consider the Square style UX where the
merchant is broadcasting an endpoint via BLE and the phone just
automagically connects, sees a trusted merchant and pays. Super slick, we
definitely want it - but no URI. Then of course there's the usual QR code
size limitations.

Encrypting/authing the connection at the app layer does not have to be
difficult. What we really need/want, is a simple lightweight library that
does an ECDH key agreement using secp256k1, and then does AES+HMAC on
framed messages. Such a protocol would be useful not only for this use
case, but perhaps for encrypting/authing the p2p protocol in future as well.

Once the encrypted connection is set up above the Bluetooth layer, the
payment protocol request can then be signed either with a regular Bitcoin
key that was in the Bitcoin URI as the payment address (when a URI is
available), thus linking the request to the URI without adding any
additional data by doubling up the backwards compatibility support. Or if
there's no URI, then of course, the payment request must be PKI signed and
the signed PaymentDetails structure can contain a copy of the public key
that was used to set up the connection, thus binding the connection to a
PKI identity and ensuring you're not talking to a MITM.

I suspect that this is not anywhere near as hard to implement as one might
think. ECDH is not a complex protocol. You certainly don't need full blown
HTTPS involved.

>
>    - There is no acknowledgement failure message possible in the payment
>    protocol, only an acknowledgement message or lack of acknowledgement
>    message. This issue seems to be a concern and as a result, the memo field
>    is used to send an "ack" or "nack" in Schildbach's wallet. Can we add a
>    boolean status field to the payment acknowledgement message?
>
> Ugh. I did want a way to indicate failure when we designed BIP70, but I
can't remember why one wasn't included in the final spec. I think we
decided the containing protocol could do this instead (normally HTTP).

Abusing the memo field is definitely the wrong thing to do! Rather the
Bluetooth specific encapsulation protocol should have a notion of failure.

>
>    - I'd personally like a new optional boolean field added to the
>    "PaymentDetails" portion of the "PaymentRequest" to allow for the payer's
>    wallet to match the "Output" optional "amount" fields as a total amount of
>    all Outputs, rather than requiring the amount for each output to be matched
>    exactly.
>
> Extending BIP70 with more negotiable privacy features is a different
effort, let's not discuss that as part of Bluetooth support.

Besides, no wallet uses even the existing support for merge avoidance in
BIP70. In fact Andreas' wallet is one of the blocking factors here because
it violates the specs by requiring the BIP70 request to have only a single
output that matches the address specified in the URI. All because he
doesn't trust HTTPS :(

I don't think adding even more privacy stuff to BIP70 makes any sense until
we have implementations that actually exploit the existing support. And to
get there, we must fix Andreas' wallet so it doesn't violate the specs
anymore. Sorry Andreas. I know we argue about this all the time, but it's
really a big problem that your app doesn't obey the specs. It makes
everyone reluctant to use new BIP70 features, because they feel a need to
test with every possible wallet app in case one of them has simply decided
to do their own thing and become deliberately incompatible. And then why
bother, there are more important things to do.

>
>    - Amount of data stored in QR codes may be getting large when a
>    backwards compatible URL is used (for wallets that don't support the
>    payment protocol) and can be difficult to scan with outdoor screens that
>    have an extra weather resistant pane when in direct sunlight.
>
> MAC addresses could be encoded more efficiently, of course, but it seems
unlikely that address-less URIs can be relied upon any time soon - and
besides if the URI needs to bind to an authenticated channel because PKI
signing is not in use, then it makes sense to use that part of the URI to
do so.

>
>    - The number of offline transactions of a wallet is limited to the
>    known unspent outputs when they go offline. Long term, I'd like to see
>    wallet devices that can use systems such as Kryptoradio's DVB-T based
>    broadcast (but this will need yet another radio!).
>
> Given that all interesting mobile devices have sophisticated internet
access radios of various forms, I doubt it's worth putting much effort in
here. Bluetooth for submitting payments makes sense some of the time,
partly for performance and partly because it's more decentralised than
looping in an intermediary HTTPS server to temporarily host a BIP70 request
file. I don't think we should try and invent an entirely new "block chain
internet" though. At any rate, it's a separate effort.

>
>    - The additional payment_url approach is a bit sloppy of a solution in
>    the PaymentDetails portion of the PaymentRequest.
>
> This is only an issue because of the way you define the hashing mechanism.
If you reuse the backwards compatibility address, then the payment_url can
of course be customised based on whatever transport mechanism the request
was fetched over. There is no longer any need to have the payment request
be created (and presumably stored) the moment the QR code is generated.
Besides, that approach has all kinds of messy implementation problems. You
don't know the QR code will *ever* be scanned, but you must have the exact
payment request at the time the QR code is generated. Payment requests
expire, so you have to define some kind of timeout at which point the QR
code itself becomes invalid. Urgh.

Much better to have the PaymentRequest formatted and signed on demand, once
the URI is being resolved. But that means you have to abandon the h=
mechanism.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/d16a06b2/attachment.html>

From info at AndySchroder.com  Mon Oct 20 15:12:08 2014
From: info at AndySchroder.com (Andy Schroder)
Date: Mon, 20 Oct 2014 11:12:08 -0400
Subject: [Bitcoin-development] Two Proposed BIPs - Bluetooth
 Communication and bitcoin: URI Scheme Improvements
In-Reply-To: <CANEZrP33KH1F8GrTDnTP95G1MyxZ+DXWrC6QKBrj61HXv-eg2w@mail.gmail.com>
References: <544174F8.1050208@AndySchroder.com>
	<CANEZrP33KH1F8GrTDnTP95G1MyxZ+DXWrC6QKBrj61HXv-eg2w@mail.gmail.com>
Message-ID: <54452648.8040409@AndySchroder.com>

Hello Mike,

Thanks for the feedback. I have indicated some replies below...

Andy Schroder

On 10/20/2014 08:50 AM, Mike Hearn wrote:
> Hey Andy,
>
> Thanks for starting this discussion!
>
> One thing this brings up is the never-resolved issue of whether BIPs 
> should document how we'd /like/ things to work, or how things 
> /actually do/ work. BIP32 is an example of the former - it was new 
> technology and the spec was finalised before any wallets actually 
> implemented it. BIP 44 is an example of the latter, it basically 
> documents how myTREZOR works and as such there was minimal or no scope 
> for changes to it. Of course both kinds of document are valuable.
>
> Currently these specs document how Andreas' app already works. Whilst 
> preserving compatibility with existing Android apps is surely useful, 
> having a well designed protocol is also good. The current protocol has 
> several problems. I don't know which is more important right now and 
> don't have a strong opinion on that. My gut feeling is that these 
> documents should possibly be just wiki pages on Andreas' github. Then 
> if the protocol is brought to a point where it seems pretty good, 
> maybe it can be BIPped at that point. Alternatively, if developers of 
> other wallet apps feel they'd like a BIP right now even in the current 
> state, that would be a very important data point.


Whatever you all want to do here is fine with me. I am new to this 
process, so I have no preference. The payment_url portion is not 
actually part of "Bitcoin Wallet" yet though.


>
> Re: the actual specs:
>
>       * There may seem to be some inconsistency in the connection
>         header messages
>
> IMHO we could live with that. Although Android apps are updatable, 
> perfect header format is probably not worth the inevitable hassle and 
> transition period that would result.

That's kind of what Schildbach and I were thinking so it is why we left 
the proposed spec defined as his app currently functions.

>       * The current method uses an unauthenticated bluetooth
>         connection for bluetooth 2.1
>
> This on the other hand is not excellent. This is actually my fault - 
> the first Bluetooth support in Bitcoin Wallet for Android was written 
> by me in a frantic Berlin hackathon over a weekend. We barely got it 
> working at all by the end, so doing encryption/auth was out of the 
> question. Then I went back to more important tasks and what got 
> shipped was a cleaned up/robustified version of that.
>
> Re: hash. I'm not a fan of this approach. For one, in future there 
> might not even BE a uri involved, e.g. consider the Square style UX 
> where the merchant is broadcasting an endpoint via BLE and the phone 
> just automagically connects, sees a trusted merchant and pays. Super 
> slick, we definitely want it - but no URI. Then of course there's the 
> usual QR code size limitations.


"Bitcoin Wallet" currently does a similar thing by submitting a payment 
request via NFC and skipping the bitcoin URI. This works just fine in 
conjunction with bitcoin: URI support. I'm not doing it this way on my 
fuel pump (still submitting a bitcoin: URI), because I don't think any 
other wallets (other than "Bitcoin Wallet" derivatives) support such a 
feature and because I'm not sure if signed payment requests can be 
transmitted over NFC well because the message may be too large when the 
certificate chain is included.

My point is, you can have both and if you are going to it doesn't hurt 
to include the h= parameter for cases when a bitcoin: URI will still be 
used.


>
> Encrypting/authing the connection at the app layer does not have to be 
> difficult. What we really need/want, is a simple lightweight library 
> that does an ECDH key agreement using secp256k1, and then does 
> AES+HMAC on framed messages. Such a protocol would be useful not only 
> for this use case, but perhaps for encrypting/authing the p2p protocol 
> in future as well.

I'm not a cryptography expert, but why not just wrap the bluetooth 
connection with SSL and not reimplement ECDH? Is this hard to do with 
android/java?


>
> Once the encrypted connection is set up above the Bluetooth layer, the 
> payment protocol request can then be signed either with a regular 
> Bitcoin key that was in the Bitcoin URI as the payment address (when a 
> URI is available), thus linking the request to the URI without adding 
> any additional data by doubling up the backwards compatibility 
> support. Or if there's no URI, then of course, the payment request 
> must be PKI signed and the signed PaymentDetails structure can contain 
> a copy of the public key that was used to set up the connection, thus 
> binding the connection to a PKI identity and ensuring you're not 
> talking to a MITM.

This sounds great, but I thought it is not desired to divulge a bitcoin 
public key until the time of signing a transaction. Isn't that the whole 
point of having a public key hash and never reusing addresses? This 
could be resolved by the payee immediately sending the payment to 
another address after receiving it, but that is kind of a waste of a 
transaction. Also, I would love a less PKI dependent way to authenticate 
a transaction between the two parties, but I was trying to minimize the 
discussion of general payment protocol modifications in this announcement.


>
> I suspect that this is not anywhere near as hard to implement as one 
> might think. ECDH is not a complex protocol. You certainly don't need 
> full blown HTTPS involved.
>
>       * There is no acknowledgement failure message possible in the
>         payment protocol, only an acknowledgement message or lack of
>         acknowledgement message. This issue seems to be a concern and
>         as a result, the memo field is used to send an "ack" or "nack"
>         in Schildbach's wallet. Can we add a boolean status field to
>         the payment acknowledgement message?
>
> Ugh. I did want a way to indicate failure when we designed BIP70, but 
> I can't remember why one wasn't included in the final spec. I think we 
> decided the containing protocol could do this instead (normally HTTP).
>
> Abusing the memo field is definitely the wrong thing to do! Rather the 
> Bluetooth specific encapsulation protocol should have a notion of failure.

We can do something like this, I guess. The issue I mentioned about the 
message headers being inconsistent will have to be fixed though to to do 
this. However, is anyone even using the HTTP base failure signal (I 
don't even know what it is)? What about when new protocols other than 
bluetooth are created? I'm just wondering if it's better to have more 
functionality defined at the payment protocol level so that developers 
have to learn less nuances about each particular protocol they are 
implementing the payment protocol over. The other thing is what if you 
want to indicate a failure, and a reason for that failure?


>       * I'd personally like a new optional boolean field added to the
>         "PaymentDetails" portion of the "PaymentRequest" to allow for
>         the payer's wallet to match the "Output" optional "amount"
>         fields as a total amount of all Outputs, rather than requiring
>         the amount for each output to be matched exactly.
>
> Extending BIP70 with more negotiable privacy features is a different 
> effort, let's not discuss that as part of Bluetooth support.

Understood, I was just throwing this thought out there, but do realize 
it is a separate discussion.

>
> Besides, no wallet uses even the existing support for merge avoidance 
> in BIP70. In fact Andreas' wallet is one of the blocking factors here 
> because it violates the specs by requiring the BIP70 request to have 
> only a single output that matches the address specified in the URI. 
> All because he doesn't trust HTTPS :(

To be clear, the way I am currently implementing my fuel pump, I am 
specifying 4 payment addresses with no amount requirement and a h= 
parameter, and Schildbach's wallet does accept the payment request, but 
only chooses to use the first payment address (this may have something 
to do with the unspent outputs on my phone though). I believe 
Schildbach's wallet still works if multiple addresses are defined and 
multiple amounts, however, I'm not currently submitting payment requests 
this way because of the merge avoidance constraints mentioned below.

I don't trust HTTPS for a number of reasons. First off, it is way to 
easy to get a signed certificate with no real validation by the 
certificate signer. Second, the current PKI is a target for manipulation 
by surveillance organizations because there are too few parties 
involved. Third, even if you have a signed certificate that is really 
owned by the person they say it is, it's not easy for a payer to quickly 
verify the signer is really the correct one because retailers can 
contract out their payment process to another party, have a central 
office, subsidiary, or be doing business under a name that is not 
necessarily their legal company name. Even if we replace the PKI with 
something more distributed like namecoin, the third option is still 
going to be an issue, which warrants the need for the h= parameter.



>
> I don't think adding even more privacy stuff to BIP70 makes any sense 
> until we have implementations that actually exploit the existing 
> support. And to get there, we must fix Andreas' wallet so it doesn't 
> violate the specs anymore. Sorry Andreas. I know we argue about this 
> all the time, but it's really a big problem that your app doesn't obey 
> the specs. It makes everyone reluctant to use new BIP70 features, 
> because they feel a need to test with every possible wallet app in 
> case one of them has simply decided to do their own thing and become 
> deliberately incompatible. And then why bother, there are more 
> important things to do.


I don't totally understand the background of what you are talking about 
here, but I think the h= parameter may designed to address the issues 
Schildbach has complying with the spec as you mention.


>       * Amount of data stored in QR codes may be getting large when a
>         backwards compatible URL is used (for wallets that don't
>         support the payment protocol) and can be difficult to scan
>         with outdoor screens that have an extra weather resistant pane
>         when in direct sunlight.
>
> MAC addresses could be encoded more efficiently, of course, but it 
> seems unlikely that address-less URIs can be relied upon any time soon 
> - and besides if the URI needs to bind to an authenticated channel 
> because PKI signing is not in use, then it makes sense to use that 
> part of the URI to do so.


PKI is not in use for "Bitcoin Wallet" for providing payment request, 
but it is in use in my fuel dispenser that was demonstrated in the 
video. Actually, I should have clarified in my announcement that 
"Bitcoin Wallet" only allows for bluetooth incoming connections for 
submitting payment, not providing payment requests. Since the payment 
request is unsigned and small, it can just be submitted via NFC (as I 
have mentioned above), and bluetooth isn't really needed. Andreas does 
have a branch that supports this but it is not included in the master 
distribution branch. The primary reason he does not have this in the 
master branch is because the payment protocol only supports signing of 
payment requests via PKI, and it is difficult for a user to install a 
PKI signed certificate on android, just for a single peer to peer use 
case. I think for now he just uses that branch to test his functionality 
for fetching bluetooth payment requests from devices like mine (although 
I'm not aware of any other devices that actually exist right now).





>       * The number of offline transactions of a wallet is limited to
>         the known unspent outputs when they go offline. Long term, I'd
>         like to see wallet devices that can use systems such as
>         Kryptoradio's DVB-T based broadcast (but this will need yet
>         another radio!).
>
> Given that all interesting mobile devices have sophisticated internet 
> access radios of various forms, I doubt it's worth putting much effort 
> in here. Bluetooth for submitting payments makes sense some of the 
> time, partly for performance and partly because it's more 
> decentralised than looping in an intermediary HTTPS server to 
> temporarily host a BIP70 request file. I don't think we should try and 
> invent an entirely new "block chain internet" though. At any rate, 
> it's a separate effort.

It is a separate effort, but I was mentioning it because it is related. 
Your comment "Given that all interesting mobile devices have 
sophisticated internet access radios of various forms, I doubt it's 
worth putting much effort in here" makes me believe that you don't 
understand the need for this. If you are to provide a full fledged wifi 
connection to the customer, there would then have to be a very 
sophisticated proxy server that can allow only access to bitcoin nodes, 
and how to do that would be difficult since every node doesn't know all 
of the nodes in the network. You'd also have to be able to make the 
customer's phone automatically connect and disconnect from this service 
without leaving a saved access point name in their wifi access point 
list (otherwise you will have a bunch of them accumulate that you don't 
care about). Having dedicated blockchain access is going to be a 
necessity: everyone doesn't want a cellular internet plan, they can't 
always afford it, and it isn't always available, and as I just 
explained, wifi is currently a cumbersome solution to this problem.

>       * The additional payment_url approach is a bit sloppy of a
>         solution in the PaymentDetails portion of the PaymentRequest.
>
> This is only an issue because of the way you define the hashing 
> mechanism. If you reuse the backwards compatibility address, then the 
> payment_url can of course be customised based on whatever transport 
> mechanism the request was fetched over. There is no longer any need to 
> have the payment request be created (and presumably stored) the moment 
> the QR code is generated. Besides, that approach has all kinds of 
> messy implementation problems. You don't know the QR code will 
> /ever/ be scanned, but you must have the exact payment request at the 
> time the QR code is generated. Payment requests expire, so you have to 
> define some kind of timeout at which point the QR code itself becomes 
> invalid. Urgh.
>
> Much better to have the PaymentRequest formatted and signed on demand, 
> once the URI is being resolved. But that means you have to abandon the 
> h= mechanism.


All this was already known but was not proposed because it does not 
allow you to use the h= parameter. What do you propose to do instead of 
the h= parameter, but still allow for a trust anchor with the payee 
still be maintained? Another option is to do the hashing to the payment 
request before the payment_url is added to the payment request, however, 
this then can allow a hacker to change the payment_url.




-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/f62cff17/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 555 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/f62cff17/attachment.sig>

From mike at plan99.net  Mon Oct 20 16:29:19 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 20 Oct 2014 18:29:19 +0200
Subject: [Bitcoin-development] Two Proposed BIPs - Bluetooth
 Communication and bitcoin: URI Scheme Improvements
In-Reply-To: <54452648.8040409@AndySchroder.com>
References: <544174F8.1050208@AndySchroder.com>
	<CANEZrP33KH1F8GrTDnTP95G1MyxZ+DXWrC6QKBrj61HXv-eg2w@mail.gmail.com>
	<54452648.8040409@AndySchroder.com>
Message-ID: <CANEZrP16jex2AtvU0p-daULKW2yUFJNy+7pHNRRm=ZTCiS0dow@mail.gmail.com>

>
> I'm not a cryptography expert, but why not just wrap the bluetooth
> connection with SSL and not reimplement ECDH? Is this
>
hard to do with android/java?
>

Not at all, it should be very easy in Java because of how the SSL API is
designed. I'd worry more about non-Java platforms.

However, SSL is extremely large, old and complicated. We use it on the web
because of a mix of its feature set and legacy concerns. When discussing
encrypted connections in the past, there has been a desire to avoid SSL
because of these issues and do something much simpler and home grown. Of
course, part of the reason SSL is so convoluted is because cryptography
evolves over time, and thus it's not 100% clear to me that a simple
home-rolled crypto link would avoid falling into the same traps as SSL
eventually.

But, at least for now, it's probably more secure and more robust to not use
SSL.


> This sounds great, but I thought it is not desired to divulge a bitcoin
> public key until the time of signing a transaction. Isn't that the whole
> point of having a public key hash and never reusing addresses?
>

Eh, no. Satoshi originally introduced key hashing simply to make shorter
and easier to type destinations. Actually he envisioned most payments being
routed by IP address, where Bitcoin would just connect to the other node
and request a public key directly. There's no problem with the sender
knowing the public key of the address included in the URI.


> This could be resolved by the payee immediately sending the payment to
> another address after receiving it, but that is kind of a waste of a
> transaction. Also, I would love a less PKI dependent way to authenticate a
> transaction between the two parties, but I was trying to minimize the
> discussion of general payment protocol modifications in this announcement.
>

Alternative PKIs would be a topic for another thread, indeed. But I doubt
you will get anywhere. There are no usable alternatives to the SSL PKI. I
wrote an article on the topic here, you may find it useful:

https://medium.com/@octskyward/why-you-think-the-pki-sucks-b64cf5912aa7

It summarises why BIP70 uses the PKI.


> We can do something like this, I guess. The issue I mentioned about the
> message headers being inconsistent will have to be fixed though to to do
> this. However, is anyone even using the HTTP base failure signal (I don't
> even know what it is)?
>

It's "Respond with 500 Internal Server Error" pretty much.

Originally the idea of BIP70 was that clients would not broadcast
transactions. They would submit them to the merchant for broadcast. If the
merchant didn't like the payment for some reason (e.g. paying with a non
standard transaction or with lots of dust), they could just return an error.

Unfortunately Bitcoin Core does broadcast transactions simultaneously.
Additionally, whilst other wallets  did not, one major payment processor
had a very unreliable BIP70 payment_url endpoint for a while, whilst
broadcasting a tx via the p2p network was fully functioning. So to work
around bugs in this one payment processor some other wallets have started
broadcasting the payment tx simultaneously as well.

This means a receiver cannot meaningfully reject a payment. Some wallets
will send it anyway, via the p2p network.


> and a h= parameter, and Schildbach's wallet does accept the payment request
>

I suspect it won't work if you leave out the non-standard h= parameter.

WRT the merge avoidance - there's an article here on how it's meant to work:

https://medium.com/@octskyward/merge-avoidance-7f95a386692f

It's totally OK for you to specify the amounts you want to avoid merges in
your own wallet. The sending wallet could (but none do today) then pay with
multiple transactions.

Your case is really weird because you aren't actually requesting a specific
amout of money. I recall that there's some reason for this, from your
video, but suddenly it escapes me. Because the user scans the payment
request before pumping?


> I don't trust HTTPS for a number of reasons.
>

I disagree with all your reasons (e.g. there is nothing wrong with
outsourcing payment processing and it doesn't have to imply the user sees
an incorrect name), and I believe you should trust the PKI a lot more than
you do. If you try and build a better replacement, I think you'll discover
it's a lot harder than you imagine.

Regardless, I am not against an *optional* tighter binding between URI and
payment request, mostly because it's useful for the cases where signing
with a cert isn't possible. But the simple/obvious "embed a hash of it in
the URI" is inefficient, not compatible with the current specs, can make QR
codes harder to scan, and forces you to format your payment request up
front rather than generating it on demand.


> The primary reason he does not have this in the master branch is because
> the payment protocol only supports signing of payment requests via PKI, and
> it is difficult for a user to install a PKI signed certificate on android,
> just for a single peer to peer use case.
>

Unsigned requests work OK for the phone to phone case, assuming you aren't
actually talking to an imposter.


> If you are to provide a full fledged wifi connection to the customer,
> there would then have to be a very sophisticated proxy server that can
> allow only access to bitcoin nodes, and how to do that would be difficult
> since every node doesn't know all of the nodes in the network.
>

You can just allow port 8333 and rewrite port 80, as most wifi hotspots do
today already.

But my point about this was that all smartphones get internet access from
time to time. In my own life, I've definitely been in cases where I wanted
to *pay* with bitcoins but didn't have good internet access at that exact
moment, e.g. back of a restaurant. I've also been in the situation more
rarely where I wanted to receive coins from someone in front of me, without
good internet access, but Bluetooth already addresses that.

I don't recall ever being in a situation where I had no internet access,
but somehow knew there was a payment waiting for me on the block chain, and
I needed it right now because it was necessary for me to receive that money
in order to pay a bill. That's what the dedicated blockchain radio would
provide, but it seems like a very rare use case.


> All this was already known but was not proposed because it does not allow
> you to use the h= parameter. What do you propose to do instead of the h=
> parameter, but still allow for a trust anchor with the payee still be
> maintained?
>

I think I said already, but maybe am not explaining well. You use the
address that's already in all backwards compatible URIs. The payment
details can be additionally signed with the key corresponding to that
address. Or, that key can be covered by the PKI signature if there is one.
But dual signing is always possible.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/8c413bd8/attachment.html>

From wtogami at gmail.com  Mon Oct 20 22:37:40 2014
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Mon, 20 Oct 2014 12:37:40 -1000
Subject: [Bitcoin-development] About watch-only addresses
In-Reply-To: <CA+s+GJBsgKrZgtOTHFqpbGPp8YfbYdRE885emiqMApGfUGX0WA@mail.gmail.com>
References: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>
	<CA+s+GJBsgKrZgtOTHFqpbGPp8YfbYdRE885emiqMApGfUGX0WA@mail.gmail.com>
Message-ID: <CAEz79PrNk2fSOxrA4yQMiRU3yNF1eQMEQqaraoLs65T7KWK+vw@mail.gmail.com>

https://bitcointalk.org/index.php?topic=320695
I made a branch of Bitcoin 0.9.3 plus backports including watch-only and a
huge pile of patches cleaning it up from the master branch.  It seems to
work fine although it is not heavily tested.  I suppose if you use ONLY for
watch-only it can't be harmful?  Dunno.

Warren

On Sat, Oct 18, 2014 at 12:13 AM, Wladimir <laanwj at gmail.com> wrote:

> On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon
> <flavien.charlon at coinprism.com> wrote:
> > Hi,
> >
> > What is the status of watch-only addresses in Bitcoin Core? Is it merged
> in
> > master and usable? Is there documentation on how to add a watch-only
> address
> > through RPC.
>
> It has been merged. There is the "importaddress" RPC call, which works
> the same as "importprivkey" except that you a pass it an address.
>
> > Also, I believe that is going towards the 0.10 release, is there a rough
> ETA
> > for a release candidate?
>
> Yes - aim is in a few months, probably by the end of the year.
>
> AFAIK there are no nightly builds at this moment. Warren Togami was
> building them for a while (at http://nightly.bitcoin.it/) but he
> stopped some time around June.
>
> It's not recommended to use master without at least a little bit of
> development/debugging experience of yourself (to trace down problems
> when they appear), so it's best to build it yourself if you're going
> to test day-to-day development versions.
>
> Wladimir
>
>
> ------------------------------------------------------------------------------
> Comprehensive Server Monitoring with Site24x7.
> Monitor 10 servers for $9/Month.
> Get alerted through email, SMS, voice calls or mobile push notifications.
> Take corrective actions from your mobile device.
> http://p.sf.net/sfu/Zoho
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/4fef8329/attachment.html>

From mbde at bitwatch.co  Mon Oct 20 23:06:36 2014
From: mbde at bitwatch.co (mbde at bitwatch.co)
Date: Tue, 21 Oct 2014 01:06:36 +0200
Subject: [Bitcoin-development] About watch-only addresses
In-Reply-To: <CAEz79PrNk2fSOxrA4yQMiRU3yNF1eQMEQqaraoLs65T7KWK+vw@mail.gmail.com>
References: <CABbpET8x__gvSLhVp54GcC5FFVs1buE_-7D4xiqpX0ncB2GPJQ@mail.gmail.com>	<CA+s+GJBsgKrZgtOTHFqpbGPp8YfbYdRE885emiqMApGfUGX0WA@mail.gmail.com>
	<CAEz79PrNk2fSOxrA4yQMiRU3yNF1eQMEQqaraoLs65T7KWK+vw@mail.gmail.com>
Message-ID: <5445957C.9060408@bitwatch.co>

This is just a guess, but I can imagine sipa's address index branch
might be more suitable for an use case where information about any
address is required - jmcorgan continued to maintain a usually somewhat
up-to-date version:

https://github.com/jmcorgan/bitcoin/tree/addrindex

As for balance queries, that's not possible out of the box and I have my
own branch for this with a few other RPC calls that are noted in the README:

https://github.com/dexX7/bitcoin/tree/master-addrindex-extended

When using the original, you need to ensure a transaction is part of the
main chain and wasn't orphaned. If you consider using my branch, please
consider it twice and review the changes first.

-------- Original Message --------
*Subject: *Re: [Bitcoin-development] About watch-only addresses
*From: *Warren Togami Jr. <wtogami at gmail.com>
*To: *Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
*Date: *Mon, 20 Oct 2014 12:37:40 -1000
> https://bitcointalk.org/index.php?topic=320695
> I made a branch of Bitcoin 0.9.3 plus backports including watch-only
> and a huge pile of patches cleaning it up from the master branch.  It
> seems to work fine although it is not heavily tested.  I suppose if
> you use ONLY for watch-only it can't be harmful?  Dunno.
>
> Warren
>
> On Sat, Oct 18, 2014 at 12:13 AM, Wladimir <laanwj at gmail.com
> <mailto:laanwj at gmail.com>> wrote:
>
>     On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon
>     <flavien.charlon at coinprism.com
>     <mailto:flavien.charlon at coinprism.com>> wrote:
>     > Hi,
>     >
>     > What is the status of watch-only addresses in Bitcoin Core? Is
>     it merged in
>     > master and usable? Is there documentation on how to add a
>     watch-only address
>     > through RPC.
>
>     It has been merged. There is the "importaddress" RPC call, which works
>     the same as "importprivkey" except that you a pass it an address.
>
>     > Also, I believe that is going towards the 0.10 release, is there
>     a rough ETA
>     > for a release candidate?
>
>     Yes - aim is in a few months, probably by the end of the year.
>
>     AFAIK there are no nightly builds at this moment. Warren Togami was
>     building them for a while (at http://nightly.bitcoin.it/) but he
>     stopped some time around June.
>
>     It's not recommended to use master without at least a little bit of
>     development/debugging experience of yourself (to trace down problems
>     when they appear), so it's best to build it yourself if you're going
>     to test day-to-day development versions.
>
>     Wladimir
>
>     ------------------------------------------------------------------------------
>     Comprehensive Server Monitoring with Site24x7.
>     Monitor 10 servers for $9/Month.
>     Get alerted through email, SMS, voice calls or mobile push
>     notifications.
>     Take corrective actions from your mobile device.
>     http://p.sf.net/sfu/Zoho
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Comprehensive Server Monitoring with Site24x7.
> Monitor 10 servers for $9/Month.
> Get alerted through email, SMS, voice calls or mobile push notifications.
> Take corrective actions from your mobile device.
> http://p.sf.net/sfu/Zoho
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141021/135f5891/attachment.html>

From stick at gk2.sk  Tue Oct 21 20:56:18 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Tue, 21 Oct 2014 22:56:18 +0200
Subject: [Bitcoin-development] cryptographic review requested
In-Reply-To: <CAKzHBKkHpod+7T0uCtESVNFmgFAbGF8-AFJxKmfUwA-pkt_BrA@mail.gmail.com>
References: <CAKzHBKkHpod+7T0uCtESVNFmgFAbGF8-AFJxKmfUwA-pkt_BrA@mail.gmail.com>
Message-ID: <5446C872.7050302@gk2.sk>

On 09/23/2014 11:12 PM, Mem Wallet wrote:
> communication. To address gmaxwell's criticism, I'd like to also
> follow up with a proposed change to BIP44, such that a structured
> wallet would also include a series of identity keys, both addresses
> which will be used for signing, and public keys which would be used
> as destinations for encrypted messages.

I don't know what criticism it was, but I feel that another BIP than
BIP44 should be created to describe which HD paths should be used for ECIES.

> If anyone is familiar with ECIES and would be interested, there is a
> working implementation at http://memwallet.info/btcmssgs.html,
> which also includes this whitepaper:

That looks great! I already implemented Electrum's way of ECIES into
TREZOR firmware, but yours version seems much more complete, so I am
inclined to throw it away and use your implementation.

Have you thought about pushing this as a new BIP (different one than I
mention above)? I think it's important to have it reviewed and
standardized ASAP.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From stick at gk2.sk  Wed Oct 22 08:52:01 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 22 Oct 2014 10:52:01 +0200
Subject: [Bitcoin-development] cryptographic review requested
In-Reply-To: <CAC0TF=mi5WUHf5wvU0YDOSuUiyrEUH_+QVNGTBr_RYQEzY7QYw@mail.gmail.com>
References: <CAKzHBKkHpod+7T0uCtESVNFmgFAbGF8-AFJxKmfUwA-pkt_BrA@mail.gmail.com>	<5446C872.7050302@gk2.sk>
	<CAC0TF=mi5WUHf5wvU0YDOSuUiyrEUH_+QVNGTBr_RYQEzY7QYw@mail.gmail.com>
Message-ID: <54477031.8040200@gk2.sk>

On 10/22/2014 10:46 AM, Chris D'Costa wrote:
> Looks great, but how would you resolve the problem of knowing for certain
> that the public key you have received to encrypt the message is not from a
> MITM?

Isn't this the same problem with PGP?

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From stick at gk2.sk  Wed Oct 22 14:56:37 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 22 Oct 2014 16:56:37 +0200
Subject: [Bitcoin-development] cryptographic review requested
In-Reply-To: <CAKzHBKkHpod+7T0uCtESVNFmgFAbGF8-AFJxKmfUwA-pkt_BrA@mail.gmail.com>
References: <CAKzHBKkHpod+7T0uCtESVNFmgFAbGF8-AFJxKmfUwA-pkt_BrA@mail.gmail.com>
Message-ID: <5447C5A5.8080400@gk2.sk>

On 09/23/2014 11:12 PM, Mem Wallet wrote:
>    - M,Sender_Address = ReceiveMessage( eM, Decrypting_Key ) It is
>    acceptable for deterministic nonces to be used for signatures, however
>    nonces generated for ECIES must be high quality random bytes. (excepting
>    unit test vectors)

Could you please describe what might get wrong if one uses deterministic
nonces for ECIES as well? Thanks!

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From justus.ranvier at monetas.net  Wed Oct 22 16:01:57 2014
From: justus.ranvier at monetas.net (Justus Ranvier)
Date: Wed, 22 Oct 2014 16:01:57 +0000
Subject: [Bitcoin-development] Two Proposed BIPs - Bluetooth
 Communication and bitcoin: URI Scheme Improvements
In-Reply-To: <CANEZrP33KH1F8GrTDnTP95G1MyxZ+DXWrC6QKBrj61HXv-eg2w@mail.gmail.com>
References: <544174F8.1050208@AndySchroder.com>
	<CANEZrP33KH1F8GrTDnTP95G1MyxZ+DXWrC6QKBrj61HXv-eg2w@mail.gmail.com>
Message-ID: <5447D4F5.9060709@monetas.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On 10/20/2014 12:50 PM, Mike Hearn wrote:
> One thing this brings up is the never-resolved issue of whether
> BIPs should document how we'd *like* things to work, or how things
> *actually do* work. BIP32 is an example of the former - it was new
> technology and the spec was finalised before any wallets actually
> implemented it. BIP 44 is an example of the latter, it basically
> documents how myTREZOR works and as such there was minimal or no
> scope for changes to it. Of course both kinds of document are
> valuable.

You also have things like BIP43 that encourage people to reserve BIP
numbers to avoid namespace collisions even if their work does not
affect any other project.

There should be an efficient process for informational BIPs of this type.

- -- 
Justus Ranvier                   | Monetas <http://monetas.net/>
<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5
                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCAAGBQJUR9T1AAoJEMP3uyY4RQ21ADgH/0JUnkrAzKiBrtFcoXNTEkNl
7npCPY90zQDXk0RN0sV49ralMg/j71azHKmdeH3XHPF2BG3mC4+7TejhJkDEoCoB
fzVyQ/a7MSz3Hnxh0iwx/4p+8A3v6oI6h3yDJeCrwdMudGYA2OfyQuFdrSuchHp6
j0yJpdxxEwtc9A/7SKk5R7yrLqeeLs4OCk2Ep8mZfCQyWssXvlJzd0IDvYZiUHrM
jwLgDCAUNIotEqF4sPzxUMCUkQH3okeVhND/WvoDh8EIrE6l48I19CfDax3gJUU+
4eI5Ooba3SRu5a8cf3V/lgtdbpJJ4i1UdpcjeWNAz1w/P1NVrWN4uJgzUilh6zU=
=OWdW
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14542 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141022/b7b1a4d0/attachment.bin>

From adam at cypherspace.org  Wed Oct 22 21:54:35 2014
From: adam at cypherspace.org (Adam Back)
Date: Wed, 22 Oct 2014 14:54:35 -0700
Subject: [Bitcoin-development] side-chains & 2-way pegging (Re: is there
	a way to do bitcoin-staging?)
Message-ID: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>

For those following this thread, we have now written a paper
describing the side-chains, 2-way pegs and compact SPV proofs.
(With additional authors Andrew Poelstra & Andrew Miller).

http://blockstream.com/sidechains.pdf

Adam

On 16 March 2014 15:58, Adam Back <adam at cypherspace.org> wrote:
> So an update on 1-way pegging (aka bitcoin staging, explained in quoted text
> at bottom): it turns out secure 2-way pegging is also possible (with some
> bitcoin change to help support it).  The interesting thing is this allows
> interoperability in terms of being able to move bitcoin into and out of a
> side chain.  The side chains may have some different parameters, or
> experimental things people might want to come up with (subject to some
> minimum compatibility at the level of being able to produce an SPV proof of
> a given form).
>
> At the time of the 1-way peg discussion I considered 2-way peg as desirable
> and it seemed plausible with bitcoin changes, but the motivation for 1-way
> peg was to make it less risky to make changes on bitcoin, so that seemed
> like a catch-22 loop.  Also in the 2-way peg thought experiment I had not
> realized how simple it was to still impose a security firewall in the 2-way
> peg also.
>
>
> So Greg Maxwell proposed in Dec last year a practically compact way to do
> 2-way pegging using SPV proofs.  And also provided a simple argument of how
> this can provide a security firewall.  (Security firewall means the impact
> of security bugs on the side-chain is limited to the people with coins in
> it; bitcoin holders who did not use it are unaffected). [1]
>
> How it works:
>
> 1. to maintain the 21m coins promise, you start a side-chain with no
> in-chain mining subsidy, all bitcoin creation happens on bitcoin chain (as
> with 1-way peg).  Reach a reasonable hash rate.  (Other semantics than 1:1
> peg should be possible, but this is the base case).
>
> 2. you move coins to the side-chain by spending them to a fancy script,
> which suspends them, and allows them to be reanimated by the production of
> an SPV proof of burn on the side-chain.
>
> 3. the side-chain has no mining reward, but it allows you to mint coins at
> no mining cost by providing an SPV proof that the coin has been suspended as
> in 2 on bitcoin.  The SPV proof must be buried significantly before being
> used to reduce risk of reorganization.  The side-chain is an SPV client to
> the bitcoin network, and so maintains a view of the bitcoin hash chain (but
> not the block data).
>
> 4. the bitcoin chain is firewalled from security bugs on the side chain,
> because bitcoin imposes the rule that no more coins can be reanimated than
> are currently suspend (with respect to a given chain).
>
> 5. to simplify what they hypothetical bitcoin change would need to consider
> and understand, after a coin is reanimated there is a maturity period
> imposed (say same as fresh mined coins).  During the maturity period the
> reanimation script allows a fraud proof to spend the coins back.  A fraud
> bounty fee (equal to the reanimate fee) can be offered by the mover to
> incentivize side-chain full nodes to watch reanimations and search for fraud
> proofs.
>
> 6. a fraud proof is an SPV proof with a longer chain showing that the proof
> of burn was orphaned.
>
> There are a few options to compress the SPV proof, via Fiat-Shamir transform
> to provide a compact proof of amount work contained in a merkle tree of
> proofs of work (as proposed by Fabien Coelho link on
> http://hashcash.org/papers/) with params like 90% of work is proven.  But
> better is something Greg proposed based on skip-lists organized in a tree,
> where 'lucky' proofs of work are used to skip back further.  (Recalling that
> if you search for a 64-bit leading-0 proof-of-work, half the time you get a
> 65-bit, quarter 66-bit etc.)  With this mechanism you can accurately
> prove the amount of proof of work in a compressed tree (rather than ~90%).
>
>
> Apart from pegging from bitcoin to a side-chain, if a private chain is made
> with same rules to the side-chain it becomes possible with some
> modifications to the above algorithm to peg the side-chain to a private
> chain.  Private chain meaning a chain with the same format but signature of
> single server in place of hashing, and timestamping of the block signatures
> in the mined side chain.  And then reactive security on top of that by full
> nodes/auditors trying to find fraud proofs (rewrites of history relative to
> side-chain mined time-stamp or approved double-spends).  The reaction is to
> publish a fraud proof and move coins back to the side chain, and then
> regroup on a new server.  (Open transactions has this audit + reactive model
> but as far as I know does it via escrow, eg the voting pools for k of n
> escrow of the assets on the private server.) I also proposed the same
> reactive audit model but for auditable namespaces [4].
>
> Private chains add some possiblity for higher scaling, while retaining
> bitcoin security properties.  (You need to add the ability for a user to
> unilaterally move his coins to the side-chain they came from in event the
> chain server refuses to process transactions involving them.  This appears
> to be possible if you have compatible formats on the private chain and
> side-chain).
>
>
> This pegging discussion involved a number of #bitcoin-wizards, Greg Maxwell,
> Matt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr. The
> 2-way peg seems to have first been described by Greg.  Greg thought of
> 2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2].
> (As a ZK-SNARK could compactly prove full validation of a side chain rules).
>
> There was also something seemingly similar sounding but not described in
> detail by Alex Mizrahi in the context of color coins in this post [3].
>
> Adam
>
> [1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt
> [2] https://bitcointalk.org/index.php?topic=277389.40
> [3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554
> [4] http://www.cypherspace.org/p2p/auditable-namespace.html
>
> On Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:
>>
>> Coming back to the staging idea, maybe this is a realistic model that
>> could
>> work.  The objective being to provide a way for bitcoin to move to a live
>> beta and stable being worked on in parallel like fedora vs RHEL or
>> odd/even
>> linux kernel versions.
>>
>> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin
>> 0.x
>> stable and leap-frogs as beta becomes stable after testing.
>>
>> Its a live beta, meaning real value, real contracts.  But we dont want it
>> to
>> be an alt-coin with a floating value exactly, we want it to be bitcoin,
>> but
>> the bleeding edge bitcoin so we want to respect the 21 million coin limit,
>> and allow coins to move between bitcoin and betacoin with some necessary
>> security related restrictions.
>>
>> There is no mining reward on the betacoin network (can be merge mined for
>> security), and the way you opt to move a bitcoin into the betacoin network
>> is to mark it as transferred in some UTXO recognized way.  It cant be
>> reanimated, its dead.  (eg spend to a specific recognized invalid address
>> on
>> the bitcoin network).  In this way its not really a destruction, but a
>> move,
>> moving the coin from bitcoin to betacoin network.
>>
>> This respects the 21 million coin cap, and avoids betacoin bugs flowing
>> back
>> and affecting bitcoin security or value-store properties.  Users may buy
>> or
>> swap betacoin for bitcoin to facilitate moving money back from betacoin to
>> bitcoin.  However that is market priced so the bitcoin network is security
>> insulated from beta.  A significant security bug in beta would cause a
>> market freeze, until it is rectified.
>>
>> The cost of a betacoin is capped at one BTC because no one will pay more
>> than one bitcoin for a betacoin because they could alternatively move
>> their
>> own coin.  The reverse is market priced.
>>
>> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a
>> decision is reached to promote 1.0 beta to 2.0 stable, the remaining
>> bitcoins can be moved, and the old network switched off, with mining past
>> a
>> flag day moving to the betacoin.
>>
>> During the beta period betacoin is NOT an alpha, people can rely on it and
>> use it in anger for real value transactions.  eg if it enables more script
>> features, or coin coloring, scalabity tweaks etc people can use it.
>> Probably for large value store they are always going to prefer
>> bitcoin-stable, but applications that need the coloring features, or
>> advanced scripting etc can go ahead and beta.
>>
>> Bitcoin-stable may pull validated changes and merge them, as a way to pull
>> in any features needed in the shorter term and benefit from the betacoin
>> validation.  (Testing isnt as much validation as real-money at stake
>> survivability).
>>
>> The arguments are I think that:
>>
>> - it allows faster development allowing bitcoin to progress features
>> faster,
>>
>> - it avoids mindshare dilution if alternatively an alt-coin with a hit
>>  missing feature takes off;
>>
>> - it concentrates such useful-feature alt activities into one OPEN source
>>  and OPEN control foundation mediated area (rather than suspected land
>>  grabs on colored fees or such like bitcoin respun as a business model
>>  things),
>>
>> - maybe gets the developers that would've been working on their pet
>>  alt-coin, or their startup alt-coin to work together putting more
>>  developers, testers and resources onto something with open control (open
>>  source does not necessarily mean that much) and bitcoin mindshare
>>  branding, its STILL bitcoin, its just the beta network.
>>
>> - it respects the 21 million limit, starting new mining races probably
>>  dillutes the artificial scarcity semantic
>>
>> - while insulating bitcoin from betacoin security defects (I dont mean
>>  betacoin as a testnet, it should have prudent rigorous testing like
>>  bitcoin, just the very act of adding a feature creates risk that bitcoin
>>  stable can be hesitant to take).
>>
>> Probably the main issue as always is more (trustable) very high caliber
>> testers and developers.  Maybe if the alt-coin minded startups and
>> developers donate their time to bitcoin-beta (or bitcoin-stable) for the
>> bits they are missing, we'll get more hands to work on something of
>> reusable
>> value to humanity, in parallel with their startup's objectives and as a
>> way
>> for them to get their needed features, while giving back to the bitcoin
>> community, and helping bitcoin progress faster.
>>
>> Maybe bitcoin foundation could ask for BTC donations to hire more
>> developers
>> and testers full time.  $1.5b of stored value should be interested to safe
>> guard their value store, and develop the transaction features.
>>
>> Adam
>>
>> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:
>>>
>>>  This is exactly what I was planning to do with the
>>>  inappropriately-named "Ultimate Blockchain Compression".  [...]
>>>
>>>  For it to really work, it's gotta be part of the mainnet validation
>>>  rules, but no way it can be evaluated realistically without some kind of
>>>  "staging".
>>
>>
>>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:
>>>
>>>  I think this is a very interesting idea. As Bitcoiners, we often stuff
>>>  things into the 'alt chain' bucket in our heads; I wonder if this idea
>>>  works better as a curing period, essentially an extended version of the
>>>  current 100 block wait for mined coins.



From dsmurrell at gmail.com  Wed Oct 22 22:01:38 2014
From: dsmurrell at gmail.com (Daniel Murrell)
Date: Wed, 22 Oct 2014 23:01:38 +0100
Subject: [Bitcoin-development] side-chains & 2-way pegging (Re: is there
 a way to do bitcoin-staging?)
In-Reply-To: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>
References: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>
Message-ID: <CADK=3HwNp9bMtpviZK0cyYc+UTEvm5589Obe5of7VbMZ06dJ4g@mail.gmail.com>

I've already added it here:
http://www.opencryptocurrencyreview.com/papers/123/enabling-blockchain-innovations-with-pegged-sidechains

I made this site to allow discussions on exactly these sorts of things
to be publicly visible and easily discoverable in the future (this is
why I replied to all).

Please let me know what you think of the site.

Daniel

p.s. I'm not trying to monetize this site. I just tried to make
something I thought could be useful.

On Wed, Oct 22, 2014 at 10:54 PM, Adam Back <adam at cypherspace.org> wrote:
> For those following this thread, we have now written a paper
> describing the side-chains, 2-way pegs and compact SPV proofs.
> (With additional authors Andrew Poelstra & Andrew Miller).
>
> http://blockstream.com/sidechains.pdf
>
> Adam
>
> On 16 March 2014 15:58, Adam Back <adam at cypherspace.org> wrote:
>> So an update on 1-way pegging (aka bitcoin staging, explained in quoted text
>> at bottom): it turns out secure 2-way pegging is also possible (with some
>> bitcoin change to help support it).  The interesting thing is this allows
>> interoperability in terms of being able to move bitcoin into and out of a
>> side chain.  The side chains may have some different parameters, or
>> experimental things people might want to come up with (subject to some
>> minimum compatibility at the level of being able to produce an SPV proof of
>> a given form).
>>
>> At the time of the 1-way peg discussion I considered 2-way peg as desirable
>> and it seemed plausible with bitcoin changes, but the motivation for 1-way
>> peg was to make it less risky to make changes on bitcoin, so that seemed
>> like a catch-22 loop.  Also in the 2-way peg thought experiment I had not
>> realized how simple it was to still impose a security firewall in the 2-way
>> peg also.
>>
>>
>> So Greg Maxwell proposed in Dec last year a practically compact way to do
>> 2-way pegging using SPV proofs.  And also provided a simple argument of how
>> this can provide a security firewall.  (Security firewall means the impact
>> of security bugs on the side-chain is limited to the people with coins in
>> it; bitcoin holders who did not use it are unaffected). [1]
>>
>> How it works:
>>
>> 1. to maintain the 21m coins promise, you start a side-chain with no
>> in-chain mining subsidy, all bitcoin creation happens on bitcoin chain (as
>> with 1-way peg).  Reach a reasonable hash rate.  (Other semantics than 1:1
>> peg should be possible, but this is the base case).
>>
>> 2. you move coins to the side-chain by spending them to a fancy script,
>> which suspends them, and allows them to be reanimated by the production of
>> an SPV proof of burn on the side-chain.
>>
>> 3. the side-chain has no mining reward, but it allows you to mint coins at
>> no mining cost by providing an SPV proof that the coin has been suspended as
>> in 2 on bitcoin.  The SPV proof must be buried significantly before being
>> used to reduce risk of reorganization.  The side-chain is an SPV client to
>> the bitcoin network, and so maintains a view of the bitcoin hash chain (but
>> not the block data).
>>
>> 4. the bitcoin chain is firewalled from security bugs on the side chain,
>> because bitcoin imposes the rule that no more coins can be reanimated than
>> are currently suspend (with respect to a given chain).
>>
>> 5. to simplify what they hypothetical bitcoin change would need to consider
>> and understand, after a coin is reanimated there is a maturity period
>> imposed (say same as fresh mined coins).  During the maturity period the
>> reanimation script allows a fraud proof to spend the coins back.  A fraud
>> bounty fee (equal to the reanimate fee) can be offered by the mover to
>> incentivize side-chain full nodes to watch reanimations and search for fraud
>> proofs.
>>
>> 6. a fraud proof is an SPV proof with a longer chain showing that the proof
>> of burn was orphaned.
>>
>> There are a few options to compress the SPV proof, via Fiat-Shamir transform
>> to provide a compact proof of amount work contained in a merkle tree of
>> proofs of work (as proposed by Fabien Coelho link on
>> http://hashcash.org/papers/) with params like 90% of work is proven.  But
>> better is something Greg proposed based on skip-lists organized in a tree,
>> where 'lucky' proofs of work are used to skip back further.  (Recalling that
>> if you search for a 64-bit leading-0 proof-of-work, half the time you get a
>> 65-bit, quarter 66-bit etc.)  With this mechanism you can accurately
>> prove the amount of proof of work in a compressed tree (rather than ~90%).
>>
>>
>> Apart from pegging from bitcoin to a side-chain, if a private chain is made
>> with same rules to the side-chain it becomes possible with some
>> modifications to the above algorithm to peg the side-chain to a private
>> chain.  Private chain meaning a chain with the same format but signature of
>> single server in place of hashing, and timestamping of the block signatures
>> in the mined side chain.  And then reactive security on top of that by full
>> nodes/auditors trying to find fraud proofs (rewrites of history relative to
>> side-chain mined time-stamp or approved double-spends).  The reaction is to
>> publish a fraud proof and move coins back to the side chain, and then
>> regroup on a new server.  (Open transactions has this audit + reactive model
>> but as far as I know does it via escrow, eg the voting pools for k of n
>> escrow of the assets on the private server.) I also proposed the same
>> reactive audit model but for auditable namespaces [4].
>>
>> Private chains add some possiblity for higher scaling, while retaining
>> bitcoin security properties.  (You need to add the ability for a user to
>> unilaterally move his coins to the side-chain they came from in event the
>> chain server refuses to process transactions involving them.  This appears
>> to be possible if you have compatible formats on the private chain and
>> side-chain).
>>
>>
>> This pegging discussion involved a number of #bitcoin-wizards, Greg Maxwell,
>> Matt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr. The
>> 2-way peg seems to have first been described by Greg.  Greg thought of
>> 2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2].
>> (As a ZK-SNARK could compactly prove full validation of a side chain rules).
>>
>> There was also something seemingly similar sounding but not described in
>> detail by Alex Mizrahi in the context of color coins in this post [3].
>>
>> Adam
>>
>> [1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt
>> [2] https://bitcointalk.org/index.php?topic=277389.40
>> [3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554
>> [4] http://www.cypherspace.org/p2p/auditable-namespace.html
>>
>> On Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:
>>>
>>> Coming back to the staging idea, maybe this is a realistic model that
>>> could
>>> work.  The objective being to provide a way for bitcoin to move to a live
>>> beta and stable being worked on in parallel like fedora vs RHEL or
>>> odd/even
>>> linux kernel versions.
>>>
>>> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin
>>> 0.x
>>> stable and leap-frogs as beta becomes stable after testing.
>>>
>>> Its a live beta, meaning real value, real contracts.  But we dont want it
>>> to
>>> be an alt-coin with a floating value exactly, we want it to be bitcoin,
>>> but
>>> the bleeding edge bitcoin so we want to respect the 21 million coin limit,
>>> and allow coins to move between bitcoin and betacoin with some necessary
>>> security related restrictions.
>>>
>>> There is no mining reward on the betacoin network (can be merge mined for
>>> security), and the way you opt to move a bitcoin into the betacoin network
>>> is to mark it as transferred in some UTXO recognized way.  It cant be
>>> reanimated, its dead.  (eg spend to a specific recognized invalid address
>>> on
>>> the bitcoin network).  In this way its not really a destruction, but a
>>> move,
>>> moving the coin from bitcoin to betacoin network.
>>>
>>> This respects the 21 million coin cap, and avoids betacoin bugs flowing
>>> back
>>> and affecting bitcoin security or value-store properties.  Users may buy
>>> or
>>> swap betacoin for bitcoin to facilitate moving money back from betacoin to
>>> bitcoin.  However that is market priced so the bitcoin network is security
>>> insulated from beta.  A significant security bug in beta would cause a
>>> market freeze, until it is rectified.
>>>
>>> The cost of a betacoin is capped at one BTC because no one will pay more
>>> than one bitcoin for a betacoin because they could alternatively move
>>> their
>>> own coin.  The reverse is market priced.
>>>
>>> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a
>>> decision is reached to promote 1.0 beta to 2.0 stable, the remaining
>>> bitcoins can be moved, and the old network switched off, with mining past
>>> a
>>> flag day moving to the betacoin.
>>>
>>> During the beta period betacoin is NOT an alpha, people can rely on it and
>>> use it in anger for real value transactions.  eg if it enables more script
>>> features, or coin coloring, scalabity tweaks etc people can use it.
>>> Probably for large value store they are always going to prefer
>>> bitcoin-stable, but applications that need the coloring features, or
>>> advanced scripting etc can go ahead and beta.
>>>
>>> Bitcoin-stable may pull validated changes and merge them, as a way to pull
>>> in any features needed in the shorter term and benefit from the betacoin
>>> validation.  (Testing isnt as much validation as real-money at stake
>>> survivability).
>>>
>>> The arguments are I think that:
>>>
>>> - it allows faster development allowing bitcoin to progress features
>>> faster,
>>>
>>> - it avoids mindshare dilution if alternatively an alt-coin with a hit
>>>  missing feature takes off;
>>>
>>> - it concentrates such useful-feature alt activities into one OPEN source
>>>  and OPEN control foundation mediated area (rather than suspected land
>>>  grabs on colored fees or such like bitcoin respun as a business model
>>>  things),
>>>
>>> - maybe gets the developers that would've been working on their pet
>>>  alt-coin, or their startup alt-coin to work together putting more
>>>  developers, testers and resources onto something with open control (open
>>>  source does not necessarily mean that much) and bitcoin mindshare
>>>  branding, its STILL bitcoin, its just the beta network.
>>>
>>> - it respects the 21 million limit, starting new mining races probably
>>>  dillutes the artificial scarcity semantic
>>>
>>> - while insulating bitcoin from betacoin security defects (I dont mean
>>>  betacoin as a testnet, it should have prudent rigorous testing like
>>>  bitcoin, just the very act of adding a feature creates risk that bitcoin
>>>  stable can be hesitant to take).
>>>
>>> Probably the main issue as always is more (trustable) very high caliber
>>> testers and developers.  Maybe if the alt-coin minded startups and
>>> developers donate their time to bitcoin-beta (or bitcoin-stable) for the
>>> bits they are missing, we'll get more hands to work on something of
>>> reusable
>>> value to humanity, in parallel with their startup's objectives and as a
>>> way
>>> for them to get their needed features, while giving back to the bitcoin
>>> community, and helping bitcoin progress faster.
>>>
>>> Maybe bitcoin foundation could ask for BTC donations to hire more
>>> developers
>>> and testers full time.  $1.5b of stored value should be interested to safe
>>> guard their value store, and develop the transaction features.
>>>
>>> Adam
>>>
>>> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:
>>>>
>>>>  This is exactly what I was planning to do with the
>>>>  inappropriately-named "Ultimate Blockchain Compression".  [...]
>>>>
>>>>  For it to really work, it's gotta be part of the mainnet validation
>>>>  rules, but no way it can be evaluated realistically without some kind of
>>>>  "staging".
>>>
>>>
>>>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:
>>>>
>>>>  I think this is a very interesting idea. As Bitcoiners, we often stuff
>>>>  things into the 'alt chain' bucket in our heads; I wonder if this idea
>>>>  works better as a curing period, essentially an extended version of the
>>>>  current 100 block wait for mined coins.
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From kanzure at gmail.com  Wed Oct 22 22:35:38 2014
From: kanzure at gmail.com (Bryan Bishop)
Date: Wed, 22 Oct 2014 17:35:38 -0500
Subject: [Bitcoin-development] side-chains & 2-way pegging (Re: is there
 a way to do bitcoin-staging?)
In-Reply-To: <CADK=3HwNp9bMtpviZK0cyYc+UTEvm5589Obe5of7VbMZ06dJ4g@mail.gmail.com>
References: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>
	<CADK=3HwNp9bMtpviZK0cyYc+UTEvm5589Obe5of7VbMZ06dJ4g@mail.gmail.com>
Message-ID: <CABaSBawmfP0m98jM_5qyHEoJmVK_UeBsc=Odf5QMb0Nw-pAp3Q@mail.gmail.com>

On Wed, Oct 22, 2014 at 5:01 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:
> p.s. I'm not trying to monetize this site. I just tried to make
> something I thought could be useful.

[Unsolicited administrivia follows.]

You have been posting this in a bunch of places for a while now, at
least three times today by my count on other mediums. I also observed
negative karma scores associated with these posts. Maybe you could
consider toning down the message frequency? I think by now everyone
knows you want them to use your site. I also think that in the limit
that it would be inappropriate for /everyone/ to post all possible
research sites, or even vaguely topical discussion sites, for every
paper posted. Personally, I would much rather have discussions happen
on the mailing list anyway, although if I had a different opinion I
certainly hope I would still send this message.

Thank you.

- Bryan
http://heybryan.org/
1 512 203 0507



From dsmurrell at gmail.com  Wed Oct 22 22:52:54 2014
From: dsmurrell at gmail.com (Daniel Murrell)
Date: Wed, 22 Oct 2014 23:52:54 +0100
Subject: [Bitcoin-development] side-chains & 2-way pegging (Re: is there
 a way to do bitcoin-staging?)
In-Reply-To: <CABaSBawmfP0m98jM_5qyHEoJmVK_UeBsc=Odf5QMb0Nw-pAp3Q@mail.gmail.com>
References: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>
	<CADK=3HwNp9bMtpviZK0cyYc+UTEvm5589Obe5of7VbMZ06dJ4g@mail.gmail.com>
	<CABaSBawmfP0m98jM_5qyHEoJmVK_UeBsc=Odf5QMb0Nw-pAp3Q@mail.gmail.com>
Message-ID: <CADK=3HymjDVZKBHB0Q39C=izYNCH6hN+a7a7Mi3jeMF7E=O6qQ@mail.gmail.com>

Sorry Bryan, this was the first paper posted to this list since I've
been on it that I added to my site. I was quite excited about this.

I was not planning on and certainly won't be making this advertisement
after every paper posted on this list (I may do it on reddit). I did
post on reddit a few times yes, but I assumed that this list's user
base didn't overlap extremely (does it?). I'm not sure why my posts
got down voted there. The down voters gave me no constructive feedback
about the usefulness of my site, and neither have you.

Are you able to give me your feedback on the site I've spent quite
some time setting up privately so that we don't spam this list again?



On Wed, Oct 22, 2014 at 11:35 PM, Bryan Bishop <kanzure at gmail.com> wrote:
> On Wed, Oct 22, 2014 at 5:01 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:
>> p.s. I'm not trying to monetize this site. I just tried to make
>> something I thought could be useful.
>
> [Unsolicited administrivia follows.]
>
> You have been posting this in a bunch of places for a while now, at
> least three times today by my count on other mediums. I also observed
> negative karma scores associated with these posts. Maybe you could
> consider toning down the message frequency? I think by now everyone
> knows you want them to use your site. I also think that in the limit
> that it would be inappropriate for /everyone/ to post all possible
> research sites, or even vaguely topical discussion sites, for every
> paper posted. Personally, I would much rather have discussions happen
> on the mailing list anyway, although if I had a different opinion I
> certainly hope I would still send this message.
>
> Thank you.
>
> - Bryan
> http://heybryan.org/
> 1 512 203 0507



From jgarzik at bitpay.com  Thu Oct 23 00:00:55 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 22 Oct 2014 20:00:55 -0400
Subject: [Bitcoin-development] side-chains & 2-way pegging (Re: is there
 a way to do bitcoin-staging?)
In-Reply-To: <CADK=3HymjDVZKBHB0Q39C=izYNCH6hN+a7a7Mi3jeMF7E=O6qQ@mail.gmail.com>
References: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>
	<CADK=3HwNp9bMtpviZK0cyYc+UTEvm5589Obe5of7VbMZ06dJ4g@mail.gmail.com>
	<CABaSBawmfP0m98jM_5qyHEoJmVK_UeBsc=Odf5QMb0Nw-pAp3Q@mail.gmail.com>
	<CADK=3HymjDVZKBHB0Q39C=izYNCH6hN+a7a7Mi3jeMF7E=O6qQ@mail.gmail.com>
Message-ID: <CAJHLa0OMjFUV2QYm9vBb7CrRArfS7UWFOdtZqX6Na0JqjWssPA@mail.gmail.com>

Take the discussion of this site to another M-L, please.  It is off-topic.

Actual discussion of the paper and side-chains is on-topic.

This M-L is publicly archived.


On Wed, Oct 22, 2014 at 6:52 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:
> Sorry Bryan, this was the first paper posted to this list since I've
> been on it that I added to my site. I was quite excited about this.
>
> I was not planning on and certainly won't be making this advertisement
> after every paper posted on this list (I may do it on reddit). I did
> post on reddit a few times yes, but I assumed that this list's user
> base didn't overlap extremely (does it?). I'm not sure why my posts
> got down voted there. The down voters gave me no constructive feedback
> about the usefulness of my site, and neither have you.
>
> Are you able to give me your feedback on the site I've spent quite
> some time setting up privately so that we don't spam this list again?
>
>
>
> On Wed, Oct 22, 2014 at 11:35 PM, Bryan Bishop <kanzure at gmail.com> wrote:
>> On Wed, Oct 22, 2014 at 5:01 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:
>>> p.s. I'm not trying to monetize this site. I just tried to make
>>> something I thought could be useful.
>>
>> [Unsolicited administrivia follows.]
>>
>> You have been posting this in a bunch of places for a while now, at
>> least three times today by my count on other mediums. I also observed
>> negative karma scores associated with these posts. Maybe you could
>> consider toning down the message frequency? I think by now everyone
>> knows you want them to use your site. I also think that in the limit
>> that it would be inappropriate for /everyone/ to post all possible
>> research sites, or even vaguely topical discussion sites, for every
>> paper posted. Personally, I would much rather have discussions happen
>> on the mailing list anyway, although if I had a different opinion I
>> certainly hope I would still send this message.
>>
>> Thank you.
>>
>> - Bryan
>> http://heybryan.org/
>> 1 512 203 0507
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From alex.mizrahi at gmail.com  Sat Oct 25 18:06:32 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Sat, 25 Oct 2014 21:06:32 +0300
Subject: [Bitcoin-development] death by halving
Message-ID: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>

# Death by halving

## Summary

If miner's income margin are less than 50% (which is a healthy situation
when mining hardware is readily available), we might experience
catastrophic loss of hashpower (and, more importantly, catastrophic loss of
security) after reward halving.

## A simple model

Let's define miner's income margin as `MIM = (R-C_e)/R`, where R is the
total revenue miner receives over a period of time, and C_e is the cost of
electricity spent on mining over the same period of time. (Note that for
the sake of simplicity we do not take into account equipment costs,
amortization and other costs mining might incur.)

Also we will assume that transaction fees collected by miner are negligible
as compared to the subsidy.

Theorem 1. If for a certain miner MIM is less than 0.5 before subsidy
halving and bitcoin and electricity prices stay the same, then mining is no
longer profitable after the halving.

Indeed, suppose the revenue after the halving is R' = R/2.
   MIM = (R-C_e)/R < 0.5
   R/2 < C_e.

   R' = R/2 < C_e.

If revenue after halving R' doesn't cover electricity cost, a rational
miner should stop mining, as it's cheaper to acquire bitcoins from the
market.

~~~

Under these assumptions, if the majority of miners have MIM less than 0.5,
Bitcoin is going to experience a significant loss of hashing power.
But are these assumptions reasonable? We need a study a more complex model
which takes into account changes in bitcoin price and difficulty changes
over time.
But, first, let's analyze significance of 'loss of hashpower'.

## Catastrophic loss of hashpower

Bitcoin security model relies on assumption that a malicious actor cannot
acquire more than 50% of network's current hashpower.
E.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based Double
Spending_ paper which shows that as long as the malicious actor controls
only a small fraction of total hashpower, attacks have well-define costs.
But if the attacker-controlled hashrate is higher than 50%, attacks become
virtually costless, as the attacker receives double-spending revenue on top
of his mining revenue, and his risk is close to zero.

Note that the simple model described in the aforementioned paper doesn't
take into account attack's effect on the bitcoin price and the price of the
Bitcoin mining equipment. I hope that one day we'll see more elaborate
attack models, but in the meantime, we'll have to resort to hand-waving.

Consider a situation where almost all available hashpower is available for
a lease to the highest bidder on the open market. In this case someone who
owns sufficient capital could easily pull off an attack.

But why is hashpower not available on the market? Quite likely equipment
owners are aware of the fact that such an attack would make Bitcoin
useless, and thus worthless, which would also make their equipment
worthless. Thus they prefer to do mining for a known mining pools with good
track record.
(Although hashpower marketplaces exist: https://nicehash.com/ they aren't
particularly popular.)

Now let's consider a situation where mining bitcoins is no longer
profitable and the majority of hashpower became dormant, i.e. miners turned
off their equipment or went to mine something else. In this case equipment
is already nearly worthless, so people might as well lease it to the
highest bidder, thus enabling aforementioned attacks.

Alternatively, the attacker might buy obsolete mining equipment from people
who are no longer interested in mining.

## Taking into account the Bitcoin price

This is largely trivial, and thus is left as an exercise for the reader.
Let's just note that the Bitcoin subsidy halving is an event which is known
to market participants in advance, and thus it shouldn't result in
significant changes of the Bitcoin price,

## Changes in difficulty

Different mining devices have different efficiency. After the reward
halving mining on some of these devices becomes unprofitable, thus they
will drop out, which will result in a drop of mining difficulty.

We can greatly simplify calculations if we sum costs and rewards across all
miners, thus calculating average MIM before the halving: `MIM = 1 - C_e/R`.

Let's consider an equilibrium break-even situation where unprofitable
mining devices were turned off, thus resulting in the change in electricity
expenditures: `C_e' = r * C_e`. and average MIM after the halving `MIM' =
0`. In this case:

    r * C_e = R/2
    C_e / R = 1/2r
    (1 - MIM) = 1/2r
    r = 1/(2*(1-MIM))

Let's evaluate this formulate for different before-halving MIM:

1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can remain
mining.
2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient
miners consuming 33% of total electricity costs will drop out.
3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity costs
drop by 45%.

We can note that for the before-halving MIM>0, r is higher than 1/2, thus
less than half of total hashpower will drop out.

The worst-case situation is when before-halving MIM is close to zero and
mining devices, as well as cost of electricity in different places, are
nearly identical, in that case approximately a half of all hashpower will
drop out.

## MIM estimation

OK, what MIM do we expect in the long run? Is it going to be less than 50%
anyway?

We can expect that people will keep buying mining devices as long as it is
profitable.

Break-even condition: `R - C_e - P = 0`, where P is the price of a mining
device, R is the revenue it generates over its lifetime, and C_e is the
total cost of required electricity over its lifetime. In this case, `R =
C_e + P`, and thus:

    MIM = 1 - C_e / (C_e + P)

`f = C_e / P` is a ratio of the cost of electricity to the cost of
hardware, `C_e = f * P`, and thus

    MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)

MIM is less than 0.5 when f > 1.

Computing f is somewhat challenging even for a concrete device, as it's
useful lifetime is unknown.

Let's do some guesstimation:

Spondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If it's
useful lifetime is more than 2 years and a cost of KWh is $0.1, the total
expenditures on electricity will be at least $6135, thus for this device we
have `f > 6135/4000 > 1.5`.

If other devices which will be sold on the market will have similar specs,
we will have MIM lower than 0.5. (Well, no shit.)

## Conclusions

Reward halving is a deficiency in Bitcoin's design, but there is some hope
it won't be critical: in the equilibrium break-even situation hashpower
drop is less than 50%.
Hashrate might drop by more than 50% immediately after the halving (and
before difficulty is updated), thus a combination of the halving and slow
difficulty update pose a real threat.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/00dbaebf/attachment.html>

From jgarzik at bitpay.com  Sat Oct 25 18:12:19 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 25 Oct 2014 14:12:19 -0400
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
Message-ID: <CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>

On Sat, Oct 25, 2014 at 2:06 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:
> Hashrate might drop by more than 50% immediately after the halving (and
> before difficulty is updated), thus a combination of the halving and slow
> difficulty update pose a real threat.

"Flag day" herd behavior like this is unlikely for well informed and
well prepared market participants.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From alex.mizrahi at gmail.com  Sat Oct 25 18:22:34 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Sat, 25 Oct 2014 21:22:34 +0300
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
Message-ID: <CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>

> "Flag day" herd behavior like this is unlikely for well informed and
> well prepared market participants.
>

It is simply rational to turn your mining device off until difficulty
adjusts.
Keeping mining for 2+ weeks when it costs you money is an altruistic
behavior, we shouldn't rely on this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/f10e3bf5/attachment.html>

From jgarzik at bitpay.com  Sat Oct 25 18:31:55 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 25 Oct 2014 14:31:55 -0400
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
Message-ID: <CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>

It is an overly-simplistic miner model to assume altruism is
necessary.  The hashpower market is maturing in the direction of
financial instruments, where the owner of the hashpower is not
necessarily the one receiving income.  These are becoming tradeable
instruments, and derivatives and hedging are built on top of that.
Risk is hedged at each layer.  Market players also forge agreements
with miners, and receive -negative- value if hashpower is simply shut
down.

Simplistic models cannot predict what hashpower does in the face of
business-to-business medium- and long-term contracts.


On Sat, Oct 25, 2014 at 2:22 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:
>
>>
>> "Flag day" herd behavior like this is unlikely for well informed and
>> well prepared market participants.
>
>
> It is simply rational to turn your mining device off until difficulty
> adjusts.
> Keeping mining for 2+ weeks when it costs you money is an altruistic
> behavior, we shouldn't rely on this.
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From alex.mizrahi at gmail.com  Sat Oct 25 19:08:05 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Sat, 25 Oct 2014 22:08:05 +0300
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
Message-ID: <CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>

> The hashpower market is maturing in the direction of
> financial instruments, where the owner of the hashpower is not
> necessarily the one receiving income.  These are becoming tradeable

instruments,


Meni Rosenfeld issued tradeable mining bonds back in 2012:

https://bitcointalk.org/index.php?topic=65569.0

So this is hardly new stuff. But it definitely won't help.
The contract specifies how many bitcoins bondholder would get depending on
difficulty and other factors.
But, usually, bondholder doesn't care (and cannot check) where these
bitcoins come from.

Thus the owner of the mining equipment can temporarily turn off that
equipment off, and instead buy them on the market, as he needs to spend
less money than he would spend on electricity. Then he can pocket the
difference.


> Simplistic models cannot predict what hashpower does in the face of
> business-to-business medium- and long-term contracts.
>

Ah, yes, let's forget game theory, business people know it better!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/4ce59ce0/attachment.html>

From gavinandresen at gmail.com  Sat Oct 25 19:16:26 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 25 Oct 2014 15:16:26 -0400
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
Message-ID: <CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>

We had a halving, and it was a non-event.

Is there some reason to believe next time will be different?

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/a67c8cbb/attachment.html>

From alex.mizrahi at gmail.com  Sat Oct 25 19:53:57 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Sat, 25 Oct 2014 22:53:57 +0300
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
Message-ID: <CAE28kUS5otH3q6BPETANw6PaDCrrs1+Sm+LMNnv_TK-viGRFLQ@mail.gmail.com>

> We had a halving, and it was a non-event.
> Is there some reason to believe next time will be different?
>

Yes.

When the market is rapidly growing, margins can be relatively high because
of limited amounts of capital being invested, or introduction of more
efficient technologies.

However, we should expect market to become more mature with time, and a
mature market will result in lower margins.
The halving can do much more damage when margins are relatively small.

Besides that, there is a difference in ecosystem maturity:

1. Back in 2012, miners weren't so focused on profits, as Bitcoin was
highly experimental: some were mining for the hell of it (it was a novelty
thing back then), others wanted to secure the network, others did it
because it was hard to obtain bitcoins by other means. But now miners are
mostly profit-motivated: they buy expensive dedicated mining equipment and
want to maximize profits. As you might know, at one point ghash.io reached
50% hashrate, and miners didn't care about it enough to switch to a
different pool.

2. Back in 2012, we didn't have multipools. Multipools automatically
switches between mining different alt-chains to maximize miners' profits.
Miners who use multipools do not care how their hashrate is used as long as
they profit off it.
Particularly, check https://nicehash.com/ -- you can easily buy hashrate to
attack a smaller alt-coin, for example.

If the halving will result in a significant hashrate drop (and we did
observe hashrate drop in 2012, although it wasn't that big), it might be
possible to buy enough hashpower to attack Bitcoin.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/d828d84e/attachment.html>

From adam at cypherspace.org  Sat Oct 25 20:27:30 2014
From: adam at cypherspace.org (Adam Back)
Date: Sat, 25 Oct 2014 13:27:30 -0700
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
Message-ID: <CALqxMTGWXkL3wPSVSDr7=R5KsSiHpwjXQO-k+EEk8KvLePv0rQ@mail.gmail.com>

Some thoughts about Alex's analysis:

- bitcoin price may increase (though doubling immediately might be
unlikely) after the halving (because the new coins are in short
supply). Apparently there is some evidence of a feedback loop between
number of freshly mined coins sold to cover electrical costs ongoing
(which depends on halving also), in that there are claims that the btc
price experiences some downwards pressure when margins are slim as
miners sell almost all of them when the electrical cost takes most of
the profit, and otherwise tend more to hold coins longer term.

- that people who cant make money mining with 1/2 reward will resort
to attacking the network rather than living with it for 2weeks until
difficulty adjustment).  actually it will be longer than two weeks if
its going to result in a difficulty fall.

- that the miners wont act in their own meta-interest to aim for the
plausible new hashrate supported by the lower reward.  mining
equipment investment horizon being 3-6mo+ so it can easily make
economic sense to subsidise it for a bit to smooth the transition.

- fees might go up to unjam the network also, so the people
benefitting from the transactions utility also help cover the
transition costs.  or maybe someone makes an assurance contract to pay
the short fall and phase it out over a few months to smooth the shift.

- there is a wide range of electrical efficiency, and some are much
worse than others so there maybe a convenient equilibrium where there
are enough left who can still profit.

- alternatively you might say why not 1/100th reward reduction per 2
week period rather than 1/2 every 4 years, a difficulty retarget could
be a convenient point to do that.

Adam

On 25 October 2014 11:06, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:
> # Death by halving
>
> ## Summary
>
> If miner's income margin are less than 50% (which is a healthy situation
> when mining hardware is readily available), we might experience catastrophic
> loss of hashpower (and, more importantly, catastrophic loss of security)
> after reward halving.
>
> ## A simple model
>
> Let's define miner's income margin as `MIM = (R-C_e)/R`, where R is the
> total revenue miner receives over a period of time, and C_e is the cost of
> electricity spent on mining over the same period of time. (Note that for the
> sake of simplicity we do not take into account equipment costs, amortization
> and other costs mining might incur.)
>
> Also we will assume that transaction fees collected by miner are negligible
> as compared to the subsidy.
>
> Theorem 1. If for a certain miner MIM is less than 0.5 before subsidy
> halving and bitcoin and electricity prices stay the same, then mining is no
> longer profitable after the halving.
>
> Indeed, suppose the revenue after the halving is R' = R/2.
>    MIM = (R-C_e)/R < 0.5
>    R/2 < C_e.
>
>    R' = R/2 < C_e.
>
> If revenue after halving R' doesn't cover electricity cost, a rational miner
> should stop mining, as it's cheaper to acquire bitcoins from the market.
>
> ~~~
>
> Under these assumptions, if the majority of miners have MIM less than 0.5,
> Bitcoin is going to experience a significant loss of hashing power.
> But are these assumptions reasonable? We need a study a more complex model
> which takes into account changes in bitcoin price and difficulty changes
> over time.
> But, first, let's analyze significance of 'loss of hashpower'.
>
> ## Catastrophic loss of hashpower
>
> Bitcoin security model relies on assumption that a malicious actor cannot
> acquire more than 50% of network's current hashpower.
> E.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based Double
> Spending_ paper which shows that as long as the malicious actor controls
> only a small fraction of total hashpower, attacks have well-define costs.
> But if the attacker-controlled hashrate is higher than 50%, attacks become
> virtually costless, as the attacker receives double-spending revenue on top
> of his mining revenue, and his risk is close to zero.
>
> Note that the simple model described in the aforementioned paper doesn't
> take into account attack's effect on the bitcoin price and the price of the
> Bitcoin mining equipment. I hope that one day we'll see more elaborate
> attack models, but in the meantime, we'll have to resort to hand-waving.
>
> Consider a situation where almost all available hashpower is available for a
> lease to the highest bidder on the open market. In this case someone who
> owns sufficient capital could easily pull off an attack.
>
> But why is hashpower not available on the market? Quite likely equipment
> owners are aware of the fact that such an attack would make Bitcoin useless,
> and thus worthless, which would also make their equipment worthless. Thus
> they prefer to do mining for a known mining pools with good track record.
> (Although hashpower marketplaces exist: https://nicehash.com/ they aren't
> particularly popular.)
>
> Now let's consider a situation where mining bitcoins is no longer profitable
> and the majority of hashpower became dormant, i.e. miners turned off their
> equipment or went to mine something else. In this case equipment is already
> nearly worthless, so people might as well lease it to the highest bidder,
> thus enabling aforementioned attacks.
>
> Alternatively, the attacker might buy obsolete mining equipment from people
> who are no longer interested in mining.
>
> ## Taking into account the Bitcoin price
>
> This is largely trivial, and thus is left as an exercise for the reader.
> Let's just note that the Bitcoin subsidy halving is an event which is known
> to market participants in advance, and thus it shouldn't result in
> significant changes of the Bitcoin price,
>
> ## Changes in difficulty
>
> Different mining devices have different efficiency. After the reward halving
> mining on some of these devices becomes unprofitable, thus they will drop
> out, which will result in a drop of mining difficulty.
>
> We can greatly simplify calculations if we sum costs and rewards across all
> miners, thus calculating average MIM before the halving: `MIM = 1 - C_e/R`.
>
> Let's consider an equilibrium break-even situation where unprofitable mining
> devices were turned off, thus resulting in the change in electricity
> expenditures: `C_e' = r * C_e`. and average MIM after the halving `MIM' =
> 0`. In this case:
>
>     r * C_e = R/2
>     C_e / R = 1/2r
>     (1 - MIM) = 1/2r
>     r = 1/(2*(1-MIM))
>
> Let's evaluate this formulate for different before-halving MIM:
>
> 1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can remain
> mining.
> 2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient miners
> consuming 33% of total electricity costs will drop out.
> 3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity costs drop
> by 45%.
>
> We can note that for the before-halving MIM>0, r is higher than 1/2, thus
> less than half of total hashpower will drop out.
>
> The worst-case situation is when before-halving MIM is close to zero and
> mining devices, as well as cost of electricity in different places, are
> nearly identical, in that case approximately a half of all hashpower will
> drop out.
>
> ## MIM estimation
>
> OK, what MIM do we expect in the long run? Is it going to be less than 50%
> anyway?
>
> We can expect that people will keep buying mining devices as long as it is
> profitable.
>
> Break-even condition: `R - C_e - P = 0`, where P is the price of a mining
> device, R is the revenue it generates over its lifetime, and C_e is the
> total cost of required electricity over its lifetime. In this case, `R = C_e
> + P`, and thus:
>
>     MIM = 1 - C_e / (C_e + P)
>
> `f = C_e / P` is a ratio of the cost of electricity to the cost of hardware,
> `C_e = f * P`, and thus
>
>     MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)
>
> MIM is less than 0.5 when f > 1.
>
> Computing f is somewhat challenging even for a concrete device, as it's
> useful lifetime is unknown.
>
> Let's do some guesstimation:
>
> Spondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If it's
> useful lifetime is more than 2 years and a cost of KWh is $0.1, the total
> expenditures on electricity will be at least $6135, thus for this device we
> have `f > 6135/4000 > 1.5`.
>
> If other devices which will be sold on the market will have similar specs,
> we will have MIM lower than 0.5. (Well, no shit.)
>
> ## Conclusions
>
> Reward halving is a deficiency in Bitcoin's design, but there is some hope
> it won't be critical: in the equilibrium break-even situation hashpower drop
> is less than 50%.
> Hashrate might drop by more than 50% immediately after the halving (and
> before difficulty is updated), thus a combination of the halving and slow
> difficulty update pose a real threat.
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From thomas at thomaszander.se  Sat Oct 25 20:28:56 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Sat, 25 Oct 2014 22:28:56 +0200
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
Message-ID: <2109053.EM3JWxoz5A@coldstorage>

On Saturday 25. October 2014 21.06.32 Alex Mizrahi wrote:
> If miner's income margin are less than 50% (which is a healthy situation
> when mining hardware is readily available), we might experience
> catastrophic loss of hashpower (and, more importantly, catastrophic loss of
> security) after reward halving.


For the sake of argument, lets assume that somehow (quite unlikely) half the 
mining equipment gets shut off.
The amount of hashes/second is such that it is currently, lets just say, quite 
secure against any takeover.

Your document makes a long series of assumptions about how this can turn out 
bad with each individually is implausible, together are just fiction.

Your research didn't convince me about this being bad somehow. It also 
completely disregards the equilibriums reached by doing so.



From thomas at thomaszander.se  Sat Oct 25 20:43:22 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Sat, 25 Oct 2014 22:43:22 +0200
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CALqxMTGWXkL3wPSVSDr7=R5KsSiHpwjXQO-k+EEk8KvLePv0rQ@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CALqxMTGWXkL3wPSVSDr7=R5KsSiHpwjXQO-k+EEk8KvLePv0rQ@mail.gmail.com>
Message-ID: <10121957.9n901UckJt@coldstorage>

On Saturday 25. October 2014 13.27.30 Adam Back wrote:
> - alternatively you might say why not 1/100th reward reduction per 2
> week period rather than 1/2 every 4 years, a difficulty retarget could
> be a convenient point to do that.

mining equipment has a much shorter lifetime than 4 years, so the halving 
makes it easy to base purchases on.
Also, divide by two is the cleanest way to get to zero after a specific amount 
of divisions.



From alex.mizrahi at gmail.com  Sat Oct 25 20:49:54 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Sat, 25 Oct 2014 23:49:54 +0300
Subject: [Bitcoin-development] death by halving
In-Reply-To: <2109053.EM3JWxoz5A@coldstorage>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<2109053.EM3JWxoz5A@coldstorage>
Message-ID: <CAE28kUT-Ywo=de94HVJCmLJhWnf_=v5Vo=M9pjed-YhEAu5Sjw@mail.gmail.com>

> For the sake of argument, lets assume that somehow (quite unlikely)


Why is it unlikely? Do you believe that the cost of electricity cannot be
higher than expected mining revenue?
Or do you expect miners to keep mining when it costs them money?


> half the mining equipment gets shut off.
> The amount of hashes/second is such that it is currently, lets just say,
> quite
> secure against any takeover.
>

The equipment won't be simply turned off, it will be up for grabs.

Please check this web sites:

https://nicehash.com/
https://www.multipool.us/

One can use them in the same way he uses normal mining pools, and they
switch between different chains.
Say, multipool.us can switch between BTC and PPC (Peercoin).
Mining BTC will be less profitable after a halving, so a miner who is
willing to maximize his profits might use multipool to auto-switch to
something more profitable.
Which might be attack-on-Bitcoin.
E.g. if 60% of bitcoin's total hashrate is available via "multipools", one
can try to pull of a double-spending attack.


> Your document makes a long series of assumptions about how this can turn
> out
> bad with each individually is implausible, together are just fiction.
>

It sounds like you failed to grasp even basics.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/2daacf00/attachment.html>

From melvincarvalho at gmail.com  Sat Oct 25 21:50:49 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sat, 25 Oct 2014 23:50:49 +0200
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAE28kUS5otH3q6BPETANw6PaDCrrs1+Sm+LMNnv_TK-viGRFLQ@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CAE28kUS5otH3q6BPETANw6PaDCrrs1+Sm+LMNnv_TK-viGRFLQ@mail.gmail.com>
Message-ID: <CAKaEYh+YSjtA-vMWBsWrTjwenB1xxa-pJr3WTykoMGaxEAd8cw@mail.gmail.com>

On 25 October 2014 21:53, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:

>
> We had a halving, and it was a non-event.
>> Is there some reason to believe next time will be different?
>>
>
> Yes.
>
> When the market is rapidly growing, margins can be relatively high because
> of limited amounts of capital being invested, or introduction of more
> efficient technologies.
>
> However, we should expect market to become more mature with time, and a
> mature market will result in lower margins.
> The halving can do much more damage when margins are relatively small.
>
> Besides that, there is a difference in ecosystem maturity:
>
> 1. Back in 2012, miners weren't so focused on profits, as Bitcoin was
> highly experimental: some were mining for the hell of it (it was a novelty
> thing back then), others wanted to secure the network, others did it
> because it was hard to obtain bitcoins by other means. But now miners are
> mostly profit-motivated: they buy expensive dedicated mining equipment and
> want to maximize profits. As you might know, at one point ghash.io
> reached 50% hashrate, and miners didn't care about it enough to switch to a
> different pool.
>
> 2. Back in 2012, we didn't have multipools. Multipools automatically
> switches between mining different alt-chains to maximize miners' profits.
> Miners who use multipools do not care how their hashrate is used as long as
> they profit off it.
> Particularly, check https://nicehash.com/ -- you can easily buy hashrate
> to attack a smaller alt-coin, for example.
>
> If the halving will result in a significant hashrate drop (and we did
> observe hashrate drop in 2012, although it wasn't that big), it might be
> possible to buy enough hashpower to attack Bitcoin.
>

This is a good point, imho.  Miner sophistication has increased drastically
in 2 years.  Sites like ( http://www.coinwarz.com/ ) can heavily influence
mining, 1-2 orders of magnitude on significant levels of hashing.

I think this is more prevalent with scrypt than sha256, litecoin is set to
half reward in 9 months, and it will be interesting to observe what happens
there.


>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/9e83bd0e/attachment.html>

From leishman3 at gmail.com  Sat Oct 25 21:51:59 2014
From: leishman3 at gmail.com (Alexander Leishman)
Date: Sat, 25 Oct 2014 21:51:59 +0000
Subject: [Bitcoin-development] death by halving
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<2109053.EM3JWxoz5A@coldstorage>
	<CAE28kUT-Ywo=de94HVJCmLJhWnf_=v5Vo=M9pjed-YhEAu5Sjw@mail.gmail.com>
Message-ID: <CABW94zRyNWzuRe_xMjj07s+pO5cMEtB7QvR7RiOnTEBbw4xhpw@mail.gmail.com>

Interesting analysis! I think there are a few important effects that aren't
being considered.

1. When the block reward is halved, inflation is halved as well. Is this
halving already priced in by the market or will it result in an upward
pressure on the price?

2. It was acknowledged that the referenced analysis did not take into
account the result of a double-spend attack on the bitcoin price. However,
the effect of a detectable double-spend attack on the Bitcoin network is
not isolated to Bitcoin markets. The price of altcoins often trend with the
price of Bitcoin, so attacking Bitcoin may reduce the profitability of
'multipool' mining. Any alt-coin market vulnerable to the malicious
hash-power would probably go into panic mode.

-Alex Leishman




On Sat Oct 25 2014 at 1:51:10 PM Alex Mizrahi <alex.mizrahi at gmail.com>
wrote:

>
>
>> For the sake of argument, lets assume that somehow (quite unlikely)
>
>
> Why is it unlikely? Do you believe that the cost of electricity cannot be
> higher than expected mining revenue?
> Or do you expect miners to keep mining when it costs them money?
>
>
>> half the mining equipment gets shut off.
>> The amount of hashes/second is such that it is currently, lets just say,
>> quite
>> secure against any takeover.
>>
>
> The equipment won't be simply turned off, it will be up for grabs.
>
> Please check this web sites:
>
> https://nicehash.com/
> https://www.multipool.us/
>
> One can use them in the same way he uses normal mining pools, and they
> switch between different chains.
> Say, multipool.us can switch between BTC and PPC (Peercoin).
> Mining BTC will be less profitable after a halving, so a miner who is
> willing to maximize his profits might use multipool to auto-switch to
> something more profitable.
> Which might be attack-on-Bitcoin.
> E.g. if 60% of bitcoin's total hashrate is available via "multipools", one
> can try to pull of a double-spending attack.
>
>
>> Your document makes a long series of assumptions about how this can turn
>> out
>> bad with each individually is implausible, together are just fiction.
>>
>
> It sounds like you failed to grasp even basics.
> ------------------------------------------------------------
> ------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/588c86c6/attachment.html>

From jrn at jrn.me.uk  Sat Oct 25 22:10:02 2014
From: jrn at jrn.me.uk (Ross Nicoll)
Date: Sat, 25 Oct 2014 23:10:02 +0100
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
Message-ID: <544C1FBA.8030901@jrn.me.uk>

I'd suggest looking at how Dogecoin's mining schedule has worked out, 
for how halvings tend to actually affect the market. Part of Dogecoin's 
design was that it would halve very quickly (around every 75 days, in 
fact), so it's essentially illustrating worst case scenario.

Firstly, miners do not all move/shut down as a batch. Some will stay out 
of loyalty/apathy/optimism, so there's a jolt to hashrate when the 
rewards drop, and then a drift towards a steady-state. In most cases, 
the hardware costs vastly exceed the running costs, so while they may 
never see ROI due to the reward change, there's no benefit in stopping 
mining either.

On the other side, mining hardware update cycles are extremely 
aggressive, and newer hardware runs much faster. Further, those with 
newer hardware are likely to have the best hashrate to power ratio, and 
be less likely to turn off or rent out their hardware.

So, in theory there may be an uncomfortable period where the hashrate 
drops, but I would expect that drop to be much less than 50%, that most 
hardware that's turned off is not cost-effective to rent out, and that 
newer hardware being launched would push the hashrate back up again 
within a sensible timeframe.

Ross


On 25/10/2014 19:06, Alex Mizrahi wrote:
> # Death by halving
>
> ## Summary
>
> If miner's income margin are less than 50% (which is a healthy 
> situation when mining hardware is readily available), we might 
> experience catastrophic loss of hashpower (and, more importantly, 
> catastrophic loss of security) after reward halving.
>
> ## A simple model
>
> Let's define miner's income margin as `MIM = (R-C_e)/R`, where R is 
> the total revenue miner receives over a period of time, and C_e is the 
> cost of electricity spent on mining over the same period of time. 
> (Note that for the sake of simplicity we do not take into account 
> equipment costs, amortization and other costs mining might incur.)
>
> Also we will assume that transaction fees collected by miner are 
> negligible as compared to the subsidy.
>
> Theorem 1. If for a certain miner MIM is less than 0.5 before subsidy 
> halving and bitcoin and electricity prices stay the same, then mining 
> is no longer profitable after the halving.
>
> Indeed, suppose the revenue after the halving is R' = R/2.
>    MIM = (R-C_e)/R < 0.5
>    R/2 < C_e.
>
>    R' = R/2 < C_e.
>
> If revenue after halving R' doesn't cover electricity cost, a rational 
> miner should stop mining, as it's cheaper to acquire bitcoins from the 
> market.
>
> ~~~
>
> Under these assumptions, if the majority of miners have MIM less than 
> 0.5, Bitcoin is going to experience a significant loss of hashing power.
> But are these assumptions reasonable? We need a study a more complex 
> model which takes into account changes in bitcoin price and difficulty 
> changes over time.
> But, first, let's analyze significance of 'loss of hashpower'.
>
> ## Catastrophic loss of hashpower
>
> Bitcoin security model relies on assumption that a malicious actor 
> cannot acquire more than 50% of network's current hashpower.
> E.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based 
> Double Spending_ paper which shows that as long as the malicious actor 
> controls only a small fraction of total hashpower, attacks have 
> well-define costs. But if the attacker-controlled hashrate is higher 
> than 50%, attacks become virtually costless, as the attacker receives 
> double-spending revenue on top of his mining revenue, and his risk is 
> close to zero.
>
> Note that the simple model described in the aforementioned paper 
> doesn't take into account attack's effect on the bitcoin price and the 
> price of the Bitcoin mining equipment. I hope that one day we'll see 
> more elaborate attack models, but in the meantime, we'll have to 
> resort to hand-waving.
>
> Consider a situation where almost all available hashpower is available 
> for a lease to the highest bidder on the open market. In this case 
> someone who owns sufficient capital could easily pull off an attack.
>
> But why is hashpower not available on the market? Quite likely 
> equipment owners are aware of the fact that such an attack would make 
> Bitcoin useless, and thus worthless, which would also make their 
> equipment worthless. Thus they prefer to do mining for a known mining 
> pools with good track record.
> (Although hashpower marketplaces exist: https://nicehash.com/ they 
> aren't particularly popular.)
>
> Now let's consider a situation where mining bitcoins is no longer 
> profitable and the majority of hashpower became dormant, i.e. miners 
> turned off their equipment or went to mine something else. In this 
> case equipment is already nearly worthless, so people might as well 
> lease it to the highest bidder, thus enabling aforementioned attacks.
>
> Alternatively, the attacker might buy obsolete mining equipment from 
> people who are no longer interested in mining.
>
> ## Taking into account the Bitcoin price
>
> This is largely trivial, and thus is left as an exercise for the 
> reader. Let's just note that the Bitcoin subsidy halving is an event 
> which is known to market participants in advance, and thus it 
> shouldn't result in significant changes of the Bitcoin price,
>
> ## Changes in difficulty
>
> Different mining devices have different efficiency. After the reward 
> halving mining on some of these devices becomes unprofitable, thus 
> they will drop out, which will result in a drop of mining difficulty.
>
> We can greatly simplify calculations if we sum costs and rewards 
> across all miners, thus calculating average MIM before the halving: 
> `MIM = 1 - C_e/R`.
>
> Let's consider an equilibrium break-even situation where unprofitable 
> mining devices were turned off, thus resulting in the change in 
> electricity expenditures: `C_e' = r * C_e`. and average MIM after the 
> halving `MIM' = 0`. In this case:
>
>     r * C_e = R/2
>     C_e / R = 1/2r
>     (1 - MIM) = 1/2r
>     r = 1/(2*(1-MIM))
>
> Let's evaluate this formulate for different before-halving MIM:
>
> 1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can 
> remain mining.
> 2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient 
> miners consuming 33% of total electricity costs will drop out.
> 3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity 
> costs drop by 45%.
>
> We can note that for the before-halving MIM>0, r is higher than 1/2, 
> thus less than half of total hashpower will drop out.
>
> The worst-case situation is when before-halving MIM is close to zero 
> and mining devices, as well as cost of electricity in different 
> places, are nearly identical, in that case approximately a half of all 
> hashpower will drop out.
>
> ## MIM estimation
>
> OK, what MIM do we expect in the long run? Is it going to be less than 
> 50% anyway?
>
> We can expect that people will keep buying mining devices as long as 
> it is profitable.
>
> Break-even condition: `R - C_e - P = 0`, where P is the price of a 
> mining device, R is the revenue it generates over its lifetime, and 
> C_e is the total cost of required electricity over its lifetime. In 
> this case, `R = C_e + P`, and thus:
>
>     MIM = 1 - C_e / (C_e + P)
>
> `f = C_e / P` is a ratio of the cost of electricity to the cost of 
> hardware, `C_e = f * P`, and thus
>
>     MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)
>
> MIM is less than 0.5 when f > 1.
>
> Computing f is somewhat challenging even for a concrete device, as 
> it's useful lifetime is unknown.
>
> Let's do some guesstimation:
>
> Spondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If 
> it's useful lifetime is more than 2 years and a cost of KWh is $0.1, 
> the total expenditures on electricity will be at least $6135, thus for 
> this device we have `f > 6135/4000 > 1.5`.
>
> If other devices which will be sold on the market will have similar 
> specs, we will have MIM lower than 0.5. (Well, no shit.)
>
> ## Conclusions
>
> Reward halving is a deficiency in Bitcoin's design, but there is some 
> hope it won't be critical: in the equilibrium break-even situation 
> hashpower drop is less than 50%.
> Hashrate might drop by more than 50% immediately after the halving 
> (and before difficulty is updated), thus a combination of the halving 
> and slow difficulty update pose a real threat.
>
>
> ------------------------------------------------------------------------------
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/306eebd3/attachment.html>

From melvincarvalho at gmail.com  Sat Oct 25 22:42:14 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sun, 26 Oct 2014 00:42:14 +0200
Subject: [Bitcoin-development] death by halving
In-Reply-To: <544C1FBA.8030901@jrn.me.uk>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<544C1FBA.8030901@jrn.me.uk>
Message-ID: <CAKaEYhJSLj2nvQEUeTwJv8YULrSk4CHXLEF7d5iMOHvApFpB2Q@mail.gmail.com>

On 26 October 2014 00:10, Ross Nicoll <jrn at jrn.me.uk> wrote:

>  I'd suggest looking at how Dogecoin's mining schedule has worked out, for
> how halvings tend to actually affect the market. Part of Dogecoin's design
> was that it would halve very quickly (around every 75 days, in fact), so
> it's essentially illustrating worst case scenario.
>

Yes that is an interesting data point, but it's really hard to find
comparables to doge, and most of its hashing is now merge mined with
litecoin.  Comparing doge to btc may be a case of apples and oranges.

>
>
> Firstly, miners do not all move/shut down as a batch. Some will stay out
> of loyalty/apathy/optimism, so there's a jolt to hashrate when the rewards
> drop, and then a drift towards a steady-state. In most cases, the hardware
> costs vastly exceed the running costs, so while they may never see ROI due
> to the reward change, there's no benefit in stopping mining either.
>
> On the other side, mining hardware update cycles are extremely aggressive,
> and newer hardware runs much faster. Further, those with newer hardware are
> likely to have the best hashrate to power ratio, and be less likely to turn
> off or rent out their hardware.
>
> So, in theory there may be an uncomfortable period where the hashrate
> drops, but I would expect that drop to be much less than 50%, that most
> hardware that's turned off is not cost-effective to rent out, and that
> newer hardware being launched would push the hashrate back up again within
> a sensible timeframe.
>
> Ross
>
>
>
> On 25/10/2014 19:06, Alex Mizrahi wrote:
>
>  # Death by halving
>
>  ## Summary
>
>  If miner's income margin are less than 50% (which is a healthy situation
> when mining hardware is readily available), we might experience
> catastrophic loss of hashpower (and, more importantly, catastrophic loss of
> security) after reward halving.
>
>  ## A simple model
>
>  Let's define miner's income margin as `MIM = (R-C_e)/R`, where R is the
> total revenue miner receives over a period of time, and C_e is the cost of
> electricity spent on mining over the same period of time. (Note that for
> the sake of simplicity we do not take into account equipment costs,
> amortization and other costs mining might incur.)
>
>  Also we will assume that transaction fees collected by miner are
> negligible as compared to the subsidy.
>
>  Theorem 1. If for a certain miner MIM is less than 0.5 before subsidy
> halving and bitcoin and electricity prices stay the same, then mining is no
> longer profitable after the halving.
>
>  Indeed, suppose the revenue after the halving is R' = R/2.
>    MIM = (R-C_e)/R < 0.5
>    R/2 < C_e.
>
>     R' = R/2 < C_e.
>
>  If revenue after halving R' doesn't cover electricity cost, a rational
> miner should stop mining, as it's cheaper to acquire bitcoins from the
> market.
>
>  ~~~
>
>  Under these assumptions, if the majority of miners have MIM less than
> 0.5, Bitcoin is going to experience a significant loss of hashing power.
> But are these assumptions reasonable? We need a study a more complex model
> which takes into account changes in bitcoin price and difficulty changes
> over time.
> But, first, let's analyze significance of 'loss of hashpower'.
>
>  ## Catastrophic loss of hashpower
>
>  Bitcoin security model relies on assumption that a malicious actor
> cannot acquire more than 50% of network's current hashpower.
> E.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based Double
> Spending_ paper which shows that as long as the malicious actor controls
> only a small fraction of total hashpower, attacks have well-define costs.
> But if the attacker-controlled hashrate is higher than 50%, attacks become
> virtually costless, as the attacker receives double-spending revenue on top
> of his mining revenue, and his risk is close to zero.
>
>  Note that the simple model described in the aforementioned paper doesn't
> take into account attack's effect on the bitcoin price and the price of the
> Bitcoin mining equipment. I hope that one day we'll see more elaborate
> attack models, but in the meantime, we'll have to resort to hand-waving.
>
>  Consider a situation where almost all available hashpower is available
> for a lease to the highest bidder on the open market. In this case someone
> who owns sufficient capital could easily pull off an attack.
>
>  But why is hashpower not available on the market? Quite likely equipment
> owners are aware of the fact that such an attack would make Bitcoin
> useless, and thus worthless, which would also make their equipment
> worthless. Thus they prefer to do mining for a known mining pools with good
> track record.
> (Although hashpower marketplaces exist: https://nicehash.com/ they aren't
> particularly popular.)
>
>  Now let's consider a situation where mining bitcoins is no longer
> profitable and the majority of hashpower became dormant, i.e. miners turned
> off their equipment or went to mine something else. In this case equipment
> is already nearly worthless, so people might as well lease it to the
> highest bidder, thus enabling aforementioned attacks.
>
>  Alternatively, the attacker might buy obsolete mining equipment from
> people who are no longer interested in mining.
>
>  ## Taking into account the Bitcoin price
>
>  This is largely trivial, and thus is left as an exercise for the reader.
> Let's just note that the Bitcoin subsidy halving is an event which is known
> to market participants in advance, and thus it shouldn't result in
> significant changes of the Bitcoin price,
>
>  ## Changes in difficulty
>
>  Different mining devices have different efficiency. After the reward
> halving mining on some of these devices becomes unprofitable, thus they
> will drop out, which will result in a drop of mining difficulty.
>
>  We can greatly simplify calculations if we sum costs and rewards across
> all miners, thus calculating average MIM before the halving: `MIM = 1 -
> C_e/R`.
>
>  Let's consider an equilibrium break-even situation where unprofitable
> mining devices were turned off, thus resulting in the change in electricity
> expenditures: `C_e' = r * C_e`. and average MIM after the halving `MIM' =
> 0`. In this case:
>
>      r * C_e = R/2
>     C_e / R = 1/2r
>     (1 - MIM) = 1/2r
>     r = 1/(2*(1-MIM))
>
>  Let's evaluate this formulate for different before-halving MIM:
>
>  1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can
> remain mining.
> 2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient
> miners consuming 33% of total electricity costs will drop out.
> 3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity costs
> drop by 45%.
>
>  We can note that for the before-halving MIM>0, r is higher than 1/2,
> thus less than half of total hashpower will drop out.
>
>  The worst-case situation is when before-halving MIM is close to zero and
> mining devices, as well as cost of electricity in different places, are
> nearly identical, in that case approximately a half of all hashpower will
> drop out.
>
>  ## MIM estimation
>
>  OK, what MIM do we expect in the long run? Is it going to be less than
> 50% anyway?
>
>  We can expect that people will keep buying mining devices as long as it
> is profitable.
>
>  Break-even condition: `R - C_e - P = 0`, where P is the price of a
> mining device, R is the revenue it generates over its lifetime, and C_e is
> the total cost of required electricity over its lifetime. In this case, `R
> = C_e + P`, and thus:
>
>      MIM = 1 - C_e / (C_e + P)
>
>  `f = C_e / P` is a ratio of the cost of electricity to the cost of
> hardware, `C_e = f * P`, and thus
>
>      MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)
>
>  MIM is less than 0.5 when f > 1.
>
>  Computing f is somewhat challenging even for a concrete device, as it's
> useful lifetime is unknown.
>
>  Let's do some guesstimation:
>
>  Spondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If
> it's useful lifetime is more than 2 years and a cost of KWh is $0.1, the
> total expenditures on electricity will be at least $6135, thus for this
> device we have `f > 6135/4000 > 1.5`.
>
>  If other devices which will be sold on the market will have similar
> specs, we will have MIM lower than 0.5. (Well, no shit.)
>
>  ## Conclusions
>
>  Reward halving is a deficiency in Bitcoin's design, but there is some
> hope it won't be critical: in the equilibrium break-even situation
> hashpower drop is less than 50%.
> Hashrate might drop by more than 50% immediately after the halving (and
> before difficulty is updated), thus a combination of the halving and slow
> difficulty update pose a real threat.
>
>
> ------------------------------------------------------------------------------
>
>
>
> _______________________________________________
> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141026/c5d1a032/attachment.html>

From laanwj at gmail.com  Sun Oct 26 07:57:12 2014
From: laanwj at gmail.com (Wladimir)
Date: Sun, 26 Oct 2014 08:57:12 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
Message-ID: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>

Now that headers-first is merged it would be good to do a 0.10 release
soon. Not *too* soon as a major code change like that takes some time
to pan out, but I'd like to propose the following:

- November 18: split off 0.10 branch, translation message and feature freeze
- December 1: release 10.0rc1, start Release Candidate cycle

That leaves three weeks until the freeze. After the release and branch
split-off, the RC cycle will run until no critical problems are found.
For major releases this is usually more painful than for stable
releases, but if we can keep to these dates I'd expect the final
release no later than January 2015.

Let's aim to have any pending development for 0.10 merged before
November 18. Major work that I'm aware of is:

- BIP62 (#5134, #5065)
- Verification library (#5086, #5118, #5119)
- Gitian descriptors overhaul, so that Gitian depends = Travis depends (#4727)
- Autoprune (#4701)
- Add "warmup mode" for RPC server (#5007)
- Add unauthenticated HTTP REST interface (#2844)

Let me know if there is anything else you think is ready (and not too
risky) to be in 0.10. You can help along the development process by
participating in testing and reviewing of the mentioned pull requests,
or just by testing master and reporting bugs and regressions.

Note: I intended the 0.10 release to be much sooner. The reason that
this didn't pan out is that I insisted on including headers-first, and
this took longer than expected. There seems to be a preference to
switch to a fixed (instead of feature-based) 6-month major release
schedule, ie

- July 2015: 0.11.0 (or whatever N+1 release is called)
- January 2016: 0.12.0 (or whatever N+2 release is called)
- July 2016: 0.13.0 (or whatever N+3 release is called)

Wladimir



From luke at dashjr.org  Sun Oct 26 08:53:37 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Sun, 26 Oct 2014 08:53:37 +0000
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
Message-ID: <201410260853.38850.luke@dashjr.org>

On Sunday, October 26, 2014 7:57:12 AM Wladimir wrote:
> Let me know if there is anything else you think is ready (and not too
> risky) to be in 0.10.

At the very least, we need:
  #5106 Bugfix: submitblock: Use a temporary CValidationState to determine ...
  #5103 CreateNewBlock and miner_tests: Also check generated template is ...
  #5078 Bugfix: CreateNewBlock: Check that active chain has a valid tip ...
        (or at least some conclusion for the problem discussed therein)

Harmless/No reason not to have:
  #3727 RPC: submitblock: Support for returning specific rejection reasons
  #1816 Support for BIP 23 block proposal
  #5144 Qt: Elaborate on signverify message dialog warning
  #5071 Introduce CNodePolicy for putting isolated node policy code and ...
        (futher commits exist that should ideally get in after this is merged)

Debatable (but harmless, and miners seem to want it):
  #5077 Enable customising node policy for datacarrier data size with a ...

Luke



From odinn.cyberguerrilla at riseup.net  Sun Oct 26 08:55:14 2014
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Sun, 26 Oct 2014 08:55:14 +0000
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
Message-ID: <544CB6F2.4000200@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Q., re. transaction fee changes / txconfirmtarget described at
https://github.com/bitcoin/bitcoin/blob/c8a25189bcb1381eddf46b9a9743ba48e929439e/doc/release-notes.md

(for Core 0.10)

~ does this include the floating fees for 0.10 as described at
https://bitcoinfoundation.org/2014/07/floating-fees-for-0-10/ ?

thanks in advance for clarifications

Wladimir wrote:
> Now that headers-first is merged it would be good to do a 0.10
> release soon. Not *too* soon as a major code change like that takes
> some time to pan out, but I'd like to propose the following:
> 
> - November 18: split off 0.10 branch, translation message and
> feature freeze - December 1: release 10.0rc1, start Release
> Candidate cycle
> 
> That leaves three weeks until the freeze. After the release and
> branch split-off, the RC cycle will run until no critical problems
> are found. For major releases this is usually more painful than for
> stable releases, but if we can keep to these dates I'd expect the
> final release no later than January 2015.
> 
> Let's aim to have any pending development for 0.10 merged before 
> November 18. Major work that I'm aware of is:
> 
> - BIP62 (#5134, #5065) - Verification library (#5086, #5118,
> #5119) - Gitian descriptors overhaul, so that Gitian depends =
> Travis depends (#4727) - Autoprune (#4701) - Add "warmup mode" for
> RPC server (#5007) - Add unauthenticated HTTP REST interface
> (#2844)
> 
> Let me know if there is anything else you think is ready (and not
> too risky) to be in 0.10. You can help along the development
> process by participating in testing and reviewing of the mentioned
> pull requests, or just by testing master and reporting bugs and
> regressions.
> 
> Note: I intended the 0.10 release to be much sooner. The reason
> that this didn't pan out is that I insisted on including
> headers-first, and this took longer than expected. There seems to
> be a preference to switch to a fixed (instead of feature-based)
> 6-month major release schedule, ie
> 
> - July 2015: 0.11.0 (or whatever N+1 release is called) - January
> 2016: 0.12.0 (or whatever N+2 release is called) - July 2016:
> 0.13.0 (or whatever N+3 release is called)
> 
> Wladimir
> 
> ------------------------------------------------------------------------------
>
> 
_______________________________________________
> Bitcoin-development mailing list 
> Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJUTLbyAAoJEGxwq/inSG8CzkgH/jqh3+RxdFR1sFn8PENbUvKN
M3GUF3otRDenuVOY6Gbs1Sv3IBToC1zAR1RdktYeTrfQlCgO89ybASJapqQ6H8XP
7STY99dtZgRxkSwsE5bMHceVlHlSrtCBoPCZpPte9+8KVZUpQ/WNNPhjU84sQTj5
n2wkG7GdtD4vEoLHgLo1yEMoeRcwS8eb7kUeYAdRQbAOdNBqUkcs0FW2yvAnk//M
/ubtWoWr7c+Ksozp45I7rtB6UL1YrYMBJURwKsCc62mpnc1rkvedRmQVC1KO/em1
8nAvobRUbrExPtNO8+AkWZsyiSIR+PANV4h3IOHbERC6L8iGrD/QiUjuAjXXwSw=
=tplQ
-----END PGP SIGNATURE-----



From laanwj at gmail.com  Sun Oct 26 09:10:54 2014
From: laanwj at gmail.com (Wladimir)
Date: Sun, 26 Oct 2014 10:10:54 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <544CB6F2.4000200@riseup.net>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
	<544CB6F2.4000200@riseup.net>
Message-ID: <CA+s+GJANOtiqt1ypkZZeTQX=2k+y=F8uZhLJ69=6Li1GLhmYkQ@mail.gmail.com>

On Sun, Oct 26, 2014 at 9:55 AM, odinn <odinn.cyberguerrilla at riseup.net> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
> Q., re. transaction fee changes / txconfirmtarget described at
> https://github.com/bitcoin/bitcoin/blob/c8a25189bcb1381eddf46b9a9743ba48e929439e/doc/release-notes.md
>
> (for Core 0.10)
>
> ~ does this include the floating fees for 0.10 as described at
> https://bitcoinfoundation.org/2014/07/floating-fees-for-0-10/ ?
>
> thanks in advance for clarifications

Yes, floating/smart fees has been merged a while ago

- https://github.com/bitcoin/bitcoin/pull/3959
- https://github.com/bitcoin/bitcoin/pull/4250

Wladimir



From melvincarvalho at gmail.com  Sun Oct 26 11:44:06 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sun, 26 Oct 2014 12:44:06 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
Message-ID: <CAKaEYhJfY+zhnzWBa76u+=o1jAsxG-+j5c6RYDS+nhSDi1QDQQ@mail.gmail.com>

On 26 October 2014 08:57, Wladimir <laanwj at gmail.com> wrote:

> Now that headers-first is merged it would be good to do a 0.10 release
> soon. Not *too* soon as a major code change like that takes some time
> to pan out, but I'd like to propose the following:
>
> - November 18: split off 0.10 branch, translation message and feature
> freeze
> - December 1: release 10.0rc1, start Release Candidate cycle
>
> That leaves three weeks until the freeze. After the release and branch
> split-off, the RC cycle will run until no critical problems are found.
> For major releases this is usually more painful than for stable
> releases, but if we can keep to these dates I'd expect the final
> release no later than January 2015.
>
> Let's aim to have any pending development for 0.10 merged before
> November 18. Major work that I'm aware of is:
>
> - BIP62 (#5134, #5065)
> - Verification library (#5086, #5118, #5119)
> - Gitian descriptors overhaul, so that Gitian depends = Travis depends
> (#4727)
> - Autoprune (#4701)
> - Add "warmup mode" for RPC server (#5007)
> - Add unauthenticated HTTP REST interface (#2844)
>

Thanks for the update.

I was even unaware of of #2844 : 'The beginnings of a block explorer-style
API for bitcoind.'

https://github.com/bitcoin/bitcoin/pull/2844

Seems to me like an important piece of work, Im glad it's finally made the
cut.

Firstly, apologies in coming in late to the conversation.  As I am also
working on a REST API for electronic coins.  Some questions:

1. Is there a BIP, or some other doc (e.g. gist), outlining the REST output
e.g. the response format and MIME types.  Or just compile from source?

2. How set in stone is v1 of the the going forward?  PS I support @maaku's
comments re: "/api/v1/" -- tho I guess it is too late for that now.

3. Would there be any support to develop this interface into something that
would be W3C standards compliant, or reviewed by the REST community.  So
for example a context can be provided to self document the terms (something
I've almost completed) and would allow standardization of block explorer
and bitcoind outputs.  Right now every explorer seems to have a different
JSON output.

Great work!  Looking forward to seeing this go live and how it devlops!


>
> Let me know if there is anything else you think is ready (and not too
> risky) to be in 0.10. You can help along the development process by
> participating in testing and reviewing of the mentioned pull requests,
> or just by testing master and reporting bugs and regressions.
>
> Note: I intended the 0.10 release to be much sooner. The reason that
> this didn't pan out is that I insisted on including headers-first, and
> this took longer than expected. There seems to be a preference to
> switch to a fixed (instead of feature-based) 6-month major release
> schedule, ie
>
> - July 2015: 0.11.0 (or whatever N+1 release is called)
> - January 2016: 0.12.0 (or whatever N+2 release is called)
> - July 2016: 0.13.0 (or whatever N+3 release is called)
>
> Wladimir
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141026/9b77e9de/attachment.html>

From odinn.cyberguerrilla at riseup.net  Sun Oct 26 18:17:33 2014
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Sun, 26 Oct 2014 18:17:33 +0000
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <CA+s+GJANOtiqt1ypkZZeTQX=2k+y=F8uZhLJ69=6Li1GLhmYkQ@mail.gmail.com>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>	<544CB6F2.4000200@riseup.net>
	<CA+s+GJANOtiqt1ypkZZeTQX=2k+y=F8uZhLJ69=6Li1GLhmYkQ@mail.gmail.com>
Message-ID: <544D3ABD.8080200@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Thanks,

Followup question on https://github.com/bitcoin/bitcoin/pull/3959 :

This describes current dust change handling:

(gavinandresen)
https://github.com/bitcoin/bitcoin/pull/3959/files#r13494256

Related Question:  This describes how wallets would let you know a
transaction is 'precious' with a flag --
(jgarzik)
https://github.com/bitcoin/bitcoin/pull/3753#issuecomment-49464772

- -- however, it doesn't appear to be part of 0.10 anymore ~ what is it
that would keep it from being incorporated into 0.10?
(or was that addressed by a later commit?)

Possibly also related (suggested dusting feature):
https://github.com/bitcoin/bitcoin/issues/4079#issuecomment-41010593

Thanks in advance for your responses.


Wladimir wrote:
> On Sun, Oct 26, 2014 at 9:55 AM, odinn
> <odinn.cyberguerrilla at riseup.net> wrote:
>> -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA512
>> 
>> Q., re. transaction fee changes / txconfirmtarget described at 
>> https://github.com/bitcoin/bitcoin/blob/c8a25189bcb1381eddf46b9a9743ba48e929439e/doc/release-notes.md
>>
>>
>> 
(for Core 0.10)
>> 
>> ~ does this include the floating fees for 0.10 as described at 
>> https://bitcoinfoundation.org/2014/07/floating-fees-for-0-10/ ?
>> 
>> thanks in advance for clarifications
> 
> Yes, floating/smart fees has been merged a while ago
> 
> - https://github.com/bitcoin/bitcoin/pull/3959 -
> https://github.com/bitcoin/bitcoin/pull/4250
> 
> Wladimir
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJUTTq8AAoJEGxwq/inSG8C8PYH/jrZIgecpEiwUYdRGT/dxvrE
qHrlsJz8aPY/E/ojNE4MY4Con5seH2IRL+qg14pZvIQNJSipRYejh0BeqQ2YkfAF
leEt8PlpblNqV0Ieq1VmdJK5wnF3crNZsNdPv73Z7UXplXo8sG+lYGENgC11s+wN
QI29F3Kkrqk66aa6VmRbNzRIgL1JYfTkZLba9ApZNxJsugeOgmlOQw6+q5hgChKy
lxN5s+P/wohH0n047ksYdiMnXbZwPL2scUEN87D74KYqYdCa6AB7vMkLETO2msSg
ndC9ge8LfTODlEuFA9rQ8CgLAkwVWCaCbqph7iqTt6Cvdnqeo9XvlrpcB2B31hI=
=xn6P
-----END PGP SIGNATURE-----



From laanwj at gmail.com  Mon Oct 27 07:31:32 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 27 Oct 2014 08:31:32 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <201410260853.38850.luke@dashjr.org>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
	<201410260853.38850.luke@dashjr.org>
Message-ID: <CA+s+GJBjXGzH07TTt5E1-sgPQhMrWwqOEXUeFk2Azq4=Tb3V2g@mail.gmail.com>

On Sun, Oct 26, 2014 at 9:53 AM, Luke Dashjr <luke at dashjr.org> wrote:
> On Sunday, October 26, 2014 7:57:12 AM Wladimir wrote:
>> Let me know if there is anything else you think is ready (and not too
>> risky) to be in 0.10.
>
> At the very least, we need:
>   #5106 Bugfix: submitblock: Use a temporary CValidationState to determine ...
>   #5103 CreateNewBlock and miner_tests: Also check generated template is ...
>   #5078 Bugfix: CreateNewBlock: Check that active chain has a valid tip ...
>         (or at least some conclusion for the problem discussed therein)

OK

> Harmless/No reason not to have:
>   #3727 RPC: submitblock: Support for returning specific rejection reasons
>   #1816 Support for BIP 23 block proposal
>   #5144 Qt: Elaborate on signverify message dialog warning
>   #5071 Introduce CNodePolicy for putting isolated node policy code and ...
>         (futher commits exist that should ideally get in after this is merged)

ACK on the UI change,

I think it would be best to let the full-blown "miner policy class"
wait for 0.11.

> Debatable (but harmless, and miners seem to want it):
>   #5077 Enable customising node policy for datacarrier data size with a ...

OK, that's a low-risk change, it just makes what is now a constant configurable.

Wladimir



From laanwj at gmail.com  Mon Oct 27 07:49:02 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 27 Oct 2014 08:49:02 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <CAKaEYhJfY+zhnzWBa76u+=o1jAsxG-+j5c6RYDS+nhSDi1QDQQ@mail.gmail.com>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
	<CAKaEYhJfY+zhnzWBa76u+=o1jAsxG-+j5c6RYDS+nhSDi1QDQQ@mail.gmail.com>
Message-ID: <CA+s+GJDqRBFpGS-8rsjodiCscD_swG9mZ=R0EQO+rVi_ed=Kcw@mail.gmail.com>

On Sun, Oct 26, 2014 at 12:44 PM, Melvin Carvalho
<melvincarvalho at gmail.com> wrote:

> Firstly, apologies in coming in late to the conversation.  As I am also
> working on a REST API for electronic coins.  Some questions:
>
> 1. Is there a BIP, or some other doc (e.g. gist), outlining the REST output
> e.g. the response format and MIME types.  Or just compile from source?

See the opening post from @jgarzik, it has some documentation on how
to use the API.

It would be nice to have some write-up about the current functionality
in the release notes, but there currently is none.

It's a RPC-side change, not a P2P-side change so it doesn't require a BIP.

> 2. How set in stone is v1 of the the going forward?  PS I support @maaku's
> comments re: "/api/v1/" -- tho I guess it is too late for that now.
> 3. Would there be any support to develop this interface into something that
> would be W3C standards compliant, or reviewed by the REST community.  So for
> example a context can be provided to self document the terms (something I've
> almost completed) and would allow standardization of block explorer and
> bitcoind outputs.  Right now every explorer seems to have a different JSON
> output.

It's not too late, it's not been merged yet.

Though a W3C standard takes a long time to pan out, and it may be more
useful to have this available rather than wait for the API to be
standardized (which means this will need to be postponed at least one
version). As you say, a new interface be added later under another
URI.

Note that we're only interested in exposing read-only, public data
which is already available in Bitcoin Core's internals.
We're not aiming to add a fully-fledged block explorer with (say)
address indexes. Although that could be part of the standard if it
allows implementations to support just a subset.

Anyhow - please coordinate this with Jeff Garzik, it's better to work
together here.

Wladimir



From melvincarvalho at gmail.com  Mon Oct 27 11:24:13 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Mon, 27 Oct 2014 12:24:13 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <CA+s+GJDqRBFpGS-8rsjodiCscD_swG9mZ=R0EQO+rVi_ed=Kcw@mail.gmail.com>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
	<CAKaEYhJfY+zhnzWBa76u+=o1jAsxG-+j5c6RYDS+nhSDi1QDQQ@mail.gmail.com>
	<CA+s+GJDqRBFpGS-8rsjodiCscD_swG9mZ=R0EQO+rVi_ed=Kcw@mail.gmail.com>
Message-ID: <CAKaEYh+suOdfnJ=GN6v_Gp=yNh4n2Bp+juv89BgBwZ_Mo+GfjQ@mail.gmail.com>

On 27 October 2014 08:49, Wladimir <laanwj at gmail.com> wrote:

> On Sun, Oct 26, 2014 at 12:44 PM, Melvin Carvalho
> <melvincarvalho at gmail.com> wrote:
>
> > Firstly, apologies in coming in late to the conversation.  As I am also
> > working on a REST API for electronic coins.  Some questions:
> >
> > 1. Is there a BIP, or some other doc (e.g. gist), outlining the REST
> output
> > e.g. the response format and MIME types.  Or just compile from source?
>
> See the opening post from @jgarzik, it has some documentation on how
> to use the API.
>
> It would be nice to have some write-up about the current functionality
> in the release notes, but there currently is none.
>
> It's a RPC-side change, not a P2P-side change so it doesn't require a BIP.
>

Thanks.  Yes, I worked this out after looking at the code.

I would be happy to help with documentation.


>
> > 2. How set in stone is v1 of the the going forward?  PS I support
> @maaku's
> > comments re: "/api/v1/" -- tho I guess it is too late for that now.
> > 3. Would there be any support to develop this interface into something
> that
> > would be W3C standards compliant, or reviewed by the REST community.  So
> for
> > example a context can be provided to self document the terms (something
> I've
> > almost completed) and would allow standardization of block explorer and
> > bitcoind outputs.  Right now every explorer seems to have a different
> JSON
> > output.
>
> It's not too late, it's not been merged yet.
>
> Though a W3C standard takes a long time to pan out, and it may be more
> useful to have this available rather than wait for the API to be
> standardized (which means this will need to be postponed at least one
> version). As you say, a new interface be added later under another
> URI.
>

Agree.  I think these changes are great for 0.10.


>
> Note that we're only interested in exposing read-only, public data
> which is already available in Bitcoin Core's internals.
> We're not aiming to add a fully-fledged block explorer with (say)
> address indexes. Although that could be part of the standard if it
> allows implementations to support just a subset.
>

Got it thanks.


>
> Anyhow - please coordinate this with Jeff Garzik, it's better to work
> together here.
>

Will do.  Work in this area is ongoing, both in terms of
coding/patches/testing and documentation.

Do you think it would a reasonable idea to put down some thoughts and
proposals in a BIP?


>
> Wladimir
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141027/9f26ee82/attachment.html>

From jgarzik at bitpay.com  Mon Oct 27 11:37:47 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 27 Oct 2014 07:37:47 -0400
Subject: [Bitcoin-development] Bitcoin Core 0.10 release schedule
In-Reply-To: <CAKaEYh+suOdfnJ=GN6v_Gp=yNh4n2Bp+juv89BgBwZ_Mo+GfjQ@mail.gmail.com>
References: <CA+s+GJA3-qK71TcUCYQ3xOdi+zgE_fB9N6NJkNBUDtWnA-0dcA@mail.gmail.com>
	<CAKaEYhJfY+zhnzWBa76u+=o1jAsxG-+j5c6RYDS+nhSDi1QDQQ@mail.gmail.com>
	<CA+s+GJDqRBFpGS-8rsjodiCscD_swG9mZ=R0EQO+rVi_ed=Kcw@mail.gmail.com>
	<CAKaEYh+suOdfnJ=GN6v_Gp=yNh4n2Bp+juv89BgBwZ_Mo+GfjQ@mail.gmail.com>
Message-ID: <CAJHLa0MMBdZZMfPrT11ABODGEzNwUzinbv0Q985VWkhEJpoung@mail.gmail.com>

On Mon, Oct 27, 2014 at 7:24 AM, Melvin Carvalho
<melvincarvalho at gmail.com> wrote:
> Do you think it would a reasonable idea to put down some thoughts and
> proposals in a BIP?

It would certainly be nice to start with a document that reflects the
new REST interface.  That makes a good starting point for further
discussion.

In general the interface exports what information is already
available.  As Wladimir notes, there is no plan to turn this into a
full fledged block explorer, if that implies adding indices etc.

Feedback on the HTTP headers and form, and additional thoughts &
proposals are welcome.  My pull request is intended to present
something minimal, that is easy to review and merge.  My own list of
further to-dos includes

* last-modified and etag headers
* export UTXOs a la Mike Hearn's getutxos query
* eventually rebuild the RPC server to something multithreaded a la
https://github.com/jgarzik/rpcsrv

PR #2844 @ https://github.com/bitcoin/bitcoin/pull/2844

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From morcos at gmail.com  Mon Oct 27 19:33:45 2014
From: morcos at gmail.com (Alex Morcos)
Date: Mon, 27 Oct 2014 15:33:45 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
Message-ID: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>

I've been playing around with the code for estimating fees and found a few
issues with the existing code.   I think this will address several
observations that the estimates returned by the existing code appear to be
too high.  For instance see @cozz in Issue 4866
<https://github.com/bitcoin/bitcoin/issues/4866>.

Here's what I found:

1) We're trying to answer the question of what fee X you need in order to
be confirmed within Y blocks.   The existing code tries to do that by
calculating the median fee for each possible Y instead of gathering
statistics for each possible X.  That approach is statistically incorrect.
In fact since certain X's appear so frequently, they tend to dominate the
statistics at all possible Y's (a fee rate of about 40k satoshis)

2) The existing code then sorts all of the data points in all of the
buckets together by fee rate and then reassigns buckets before calculating
the medians for each confirmation bucket.  The sorting forces a
relationship where there might not be one.  Imagine some other variable,
such as first 2 bytes of the transaction hash.  If we sorted these and then
used them to give estimates, we'd see a clear but false relationship where
transactions with low starting bytes in their hashes took longer to confirm.

3) Transactions which don't have all their inputs available (because they
depend on other transactions in the mempool) aren't excluded from the
calculations.  This skews the results.

I rewrote the code to follow a different approach.  I divided all possible
fee rates up into fee rate buckets (I spaced these logarithmically).  For
each transaction that was confirmed, I updated the appropriate fee rate
bucket with how many blocks it took to confirm that transaction.

The hardest part of doing this fee estimation is to decide what the
question really is that we're trying to answer.  I took the approach that
if you are asking what fee rate I need to be confirmed within Y blocks,
then what you would like to know is the lowest fee rate such that a
relatively high percentage of transactions of that fee rate are confirmed
within Y blocks. Since even the highest fee transactions are confirmed
within the first block only 90-93% of the time, I decided to use 80% as my
cutoff.  So now to answer "estimatefee Y", I scan through all of the fee
buckets from the most expensive down until I find the last bucket with >80%
of the transactions confirmed within Y blocks.

Unfortunately we still have the problem of not having enough data points
for non-typical fee rates, and so it requires gathering a lot of data to
give reasonable answers. To keep all of these data points in a circular
buffer and then sort them for every analysis (or after every new block) is
expensive.  So instead I adopted the approach of keeping an exponentially
decaying moving average for each bucket.  I used a decay of .998 which
represents a half life of 374 blocks or about 2.5 days.  Also if a bucket
doesn't have very many transactions, I combine it with the next bucket.

Here is a link <https://github.com/morcos/bitcoin/pull/3> to the code.  I
can create an actual pull request if there is consensus that it makes sense
to do so.

I've attached a graph comparing the estimates produced for 1-3
confirmations by the new code and the old code.  I did apply the patch to
fix issue 3 above to the old code first.  The new code is in green and the
fixed code is in purple.  The Y axis is a log scale of feerate in satoshis
per KB and the X axis is chain height.  The new code produces the same
estimates for 2 and 3 confirmations (the answers are effectively quantized
by bucket).

I've also completely reworked smartfees.py.  It turns out to require many
many more transactions are put through in order to have statistically
significant results, so the test is quite slow to run (about 3 mins on my
machine).

I've also been running a real world test, sending transactions of various
fee rates and seeing how long they took to get confirmed.  After almost 200
tx's at each fee rate, here are the results so far:

Fee rate 1100   Avg blocks to confirm 2.30 NumBlocks:% confirmed 1: 0.528
2: 0.751 3: 0.870
Fee rate 2500   Avg blocks to confirm 2.22 NumBlocks:% confirmed 1: 0.528
2: 0.766 3: 0.880
Fee rate 5000   Avg blocks to confirm 1.93 NumBlocks:% confirmed 1: 0.528
2: 0.782 3: 0.891
Fee rate 10000  Avg blocks to confirm 1.67 NumBlocks:% confirmed 1: 0.569
2: 0.844 3: 0.943
Fee rate 20000  Avg blocks to confirm 1.33 NumBlocks:% confirmed 1: 0.715
2: 0.963 3: 0.989
Fee rate 30000  Avg blocks to confirm 1.27 NumBlocks:% confirmed 1: 0.751
2: 0.974 3: 1.0
Fee rate 40000  Avg blocks to confirm 1.25 NumBlocks:% confirmed 1: 0.792
2: 0.953 3: 0.994
Fee rate 60000  Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.875
2: 1.0   3: 1.0
Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901
2: 1.0   3: 1.0
Fee rate 300000 Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.886
2: 0.989 3: 1.0


Alex
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141027/70128962/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Fee Estimation Comparison.jpg
Type: image/jpeg
Size: 90822 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141027/70128962/attachment.jpg>

From tomh at thinlink.com  Mon Oct 27 19:58:15 2014
From: tomh at thinlink.com (Tom Harding)
Date: Mon, 27 Oct 2014 12:58:15 -0700
Subject: [Bitcoin-development] DS Deprecation Window
Message-ID: <544EA3D7.2050901@thinlink.com>

Greetings Bitcoin Dev,

This is a proposal to improve the ability of bitcoin users to rely on 
unconfirmed transactions.  It can be adopted incrementally, with no hard 
or soft fork required.

https://github.com/dgenr8/out-there/blob/master/ds-dep-win.md

Your thoughtful feedback would be very much appreciated.

It is not yet implemented anywhere.

Cheers,
Tom Harding
CA, USA




From bitcoin-list at bluematt.me  Mon Oct 27 20:17:34 2014
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 27 Oct 2014 20:17:34 +0000
Subject: [Bitcoin-development] DS Deprecation Window
In-Reply-To: <544EA3D7.2050901@thinlink.com>
References: <544EA3D7.2050901@thinlink.com>
Message-ID: <544EA85E.8010400@bluematt.me>

It is a very bad idea to delay relaying/accepting blocks based on
information which is only local to your node (ie would create the
ability for people to split the network by sending out lots of
double-spends to different parts of the network at the same time). Thus,
miners are incentivized to go connect to everyone on the network and
look for double-spends, not including them in their blocks to avoid
being delayed (which is OK, except having to connect to everyone is bad).
There is a related concept of "discouraging" blocks which generally only
refers to mining on a previous block, but you have to be careful doing
that so you dont break consensus.

On 10/27/14 19:58, Tom Harding wrote:
> Greetings Bitcoin Dev,
> 
> This is a proposal to improve the ability of bitcoin users to rely on 
> unconfirmed transactions.  It can be adopted incrementally, with no hard 
> or soft fork required.
> 
> https://github.com/dgenr8/out-there/blob/master/ds-dep-win.md
> 
> Your thoughtful feedback would be very much appreciated.
> 
> It is not yet implemented anywhere.
> 
> Cheers,
> Tom Harding
> CA, USA
> 
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From tomh at thinlink.com  Tue Oct 28 02:26:48 2014
From: tomh at thinlink.com (Tom Harding)
Date: Mon, 27 Oct 2014 19:26:48 -0700
Subject: [Bitcoin-development] DS Deprecation Window
In-Reply-To: <544EA85E.8010400@bluematt.me>
References: <544EA3D7.2050901@thinlink.com> <544EA85E.8010400@bluematt.me>
Message-ID: <544EFEE8.4000000@thinlink.com>

Matt,

You're right, thanks.  Without double-spend relay, miner won't know that 
some txes conflict with anything.  I'll add that first-double-spends are 
relayed per #4570.

Miner has to be very careful including a double-spend in his block -- he 
hopes:

  - that based on his measured time offset from the first spend he 
received, at most a tiny fraction of the network will delay his block

  - that not too many nodes saw an earlier spend that he didn't see, 
which could increase that fraction

  - that most other nodes saw his tx.  Any who didn't will only learn 
about it by receiving his block, and they will assign it the time when 
they receive the block.  That's likely to be more than T (30 seconds) 
after an earlier spend, so they would delay the block.

The best course of action is intended to be for miner to exclude fast (< 
2 hours) double spends completely.


On 10/27/2014 1:17 PM, Matt Corallo wrote:
> miners are incentivized to go connect to everyone on the network and
> look for double-spends
>
> On 10/27/14 19:58, Tom Harding wrote:
>> https://github.com/dgenr8/out-there/blob/master/ds-dep-win.md



From gmaxwell at gmail.com  Tue Oct 28 02:36:15 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 28 Oct 2014 02:36:15 +0000
Subject: [Bitcoin-development] DS Deprecation Window
In-Reply-To: <544EFEE8.4000000@thinlink.com>
References: <544EA3D7.2050901@thinlink.com> <544EA85E.8010400@bluematt.me>
	<544EFEE8.4000000@thinlink.com>
Message-ID: <CAAS2fgTW9uWewWbdRj6SCCAKU0D30jFiukDL9YPeG4n8LVwoYg@mail.gmail.com>

On Tue, Oct 28, 2014 at 2:26 AM, Tom Harding <tomh at thinlink.com> wrote:
> Matt,
>
> You're right, thanks.  Without double-spend relay, miner won't know that
> some txes conflict with anything.

Even with that, the miner cannot tell, his only safe option is to
include no transactions at all.

Consider a malicious miner can concurrently flood all other miners
with orthogonal double spends (which he doesn't mine himself). These
other miners will all be spending some amount of their time mining on
these transactions before realizing others consider them
double-spends.



From thomas at thomaszander.se  Tue Oct 28 06:24:07 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Tue, 28 Oct 2014 07:24:07 +0100
Subject: [Bitcoin-development] DS Deprecation Window
In-Reply-To: <544EFEE8.4000000@thinlink.com>
References: <544EA3D7.2050901@thinlink.com> <544EA85E.8010400@bluematt.me>
	<544EFEE8.4000000@thinlink.com>
Message-ID: <1835049.8OJNQBmq5F@coldstorage>

On Monday 27. October 2014 19.26.48 Tom Harding wrote:
> Miner has to be very careful including a double-spend in his block -- he 
> hopes:

How does it help the zero-confirmation to not include a payment? Doesn't that 
just mean that if I send a double spend that neither of the payments will be 
made? So the thief just got an even bigger incentive to double-spent!
 

>   - that based on his measured time offset from the first spend he 
> received, at most a tiny fraction of the network will delay his block
>
>   - that not too many nodes saw an earlier spend that he didn't see, 
> which could increase that fraction
> 
>   - that most other nodes saw his tx.  Any who didn't will only learn 
> about it by receiving his block, and they will assign it the time when 
> they receive the block.  That's likely to be more than T (30 seconds) 
> after an earlier spend, so they would delay the block.

This doesn't addresses the point that Matt brought up.
Your proposal essentially has some side effects that would be disastrous to 
miners. As detailed by the other two replies on this thread.



From mike at plan99.net  Tue Oct 28 09:55:00 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Oct 2014 09:55:00 +0000
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
In-Reply-To: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
Message-ID: <CANEZrP0tpnES7=SuaVHOfWdf=CDkzhx2V=4mqRGDpW3ELsGkKA@mail.gmail.com>

Could you explain a little further why you think the current approach is
statistically incorrect? There's no doubt that the existing estimates the
system produces are garbage, but that's because it assumes players in the
fee market are rational and they are not.

Fwiw bitcoinj 0.12.1 applies the January fee drop and will attach fee of
only 1000 satoshis per kB by default. I also have a program that measures
confirmation time for a given fee level (with fresh coins so there's no
priority) and it aligns with your findings, most txns confirm within a
couple of blocks.

Ultimately there isn't any easy method to stop people throwing money away.
Bitcoinj will probably continue to use hard coded fee values for now to try
and contribute to market sanity in the hope it makes smartfees smarter.
On 27 Oct 2014 19:34, "Alex Morcos" <morcos at gmail.com> wrote:

> I've been playing around with the code for estimating fees and found a few
> issues with the existing code.   I think this will address several
> observations that the estimates returned by the existing code appear to be
> too high.  For instance see @cozz in Issue 4866
> <https://github.com/bitcoin/bitcoin/issues/4866>.
>
> Here's what I found:
>
> 1) We're trying to answer the question of what fee X you need in order to
> be confirmed within Y blocks.   The existing code tries to do that by
> calculating the median fee for each possible Y instead of gathering
> statistics for each possible X.  That approach is statistically incorrect.
> In fact since certain X's appear so frequently, they tend to dominate the
> statistics at all possible Y's (a fee rate of about 40k satoshis)
>
> 2) The existing code then sorts all of the data points in all of the
> buckets together by fee rate and then reassigns buckets before calculating
> the medians for each confirmation bucket.  The sorting forces a
> relationship where there might not be one.  Imagine some other variable,
> such as first 2 bytes of the transaction hash.  If we sorted these and then
> used them to give estimates, we'd see a clear but false relationship where
> transactions with low starting bytes in their hashes took longer to confirm.
>
> 3) Transactions which don't have all their inputs available (because they
> depend on other transactions in the mempool) aren't excluded from the
> calculations.  This skews the results.
>
> I rewrote the code to follow a different approach.  I divided all possible
> fee rates up into fee rate buckets (I spaced these logarithmically).  For
> each transaction that was confirmed, I updated the appropriate fee rate
> bucket with how many blocks it took to confirm that transaction.
>
> The hardest part of doing this fee estimation is to decide what the
> question really is that we're trying to answer.  I took the approach that
> if you are asking what fee rate I need to be confirmed within Y blocks,
> then what you would like to know is the lowest fee rate such that a
> relatively high percentage of transactions of that fee rate are confirmed
> within Y blocks. Since even the highest fee transactions are confirmed
> within the first block only 90-93% of the time, I decided to use 80% as my
> cutoff.  So now to answer "estimatefee Y", I scan through all of the fee
> buckets from the most expensive down until I find the last bucket with >80%
> of the transactions confirmed within Y blocks.
>
> Unfortunately we still have the problem of not having enough data points
> for non-typical fee rates, and so it requires gathering a lot of data to
> give reasonable answers. To keep all of these data points in a circular
> buffer and then sort them for every analysis (or after every new block) is
> expensive.  So instead I adopted the approach of keeping an exponentially
> decaying moving average for each bucket.  I used a decay of .998 which
> represents a half life of 374 blocks or about 2.5 days.  Also if a bucket
> doesn't have very many transactions, I combine it with the next bucket.
>
> Here is a link <https://github.com/morcos/bitcoin/pull/3> to the code.  I
> can create an actual pull request if there is consensus that it makes sense
> to do so.
>
> I've attached a graph comparing the estimates produced for 1-3
> confirmations by the new code and the old code.  I did apply the patch to
> fix issue 3 above to the old code first.  The new code is in green and the
> fixed code is in purple.  The Y axis is a log scale of feerate in satoshis
> per KB and the X axis is chain height.  The new code produces the same
> estimates for 2 and 3 confirmations (the answers are effectively quantized
> by bucket).
>
> I've also completely reworked smartfees.py.  It turns out to require many
> many more transactions are put through in order to have statistically
> significant results, so the test is quite slow to run (about 3 mins on my
> machine).
>
> I've also been running a real world test, sending transactions of various
> fee rates and seeing how long they took to get confirmed.  After almost 200
> tx's at each fee rate, here are the results so far:
>
> Fee rate 1100   Avg blocks to confirm 2.30 NumBlocks:% confirmed 1: 0.528
> 2: 0.751 3: 0.870
> Fee rate 2500   Avg blocks to confirm 2.22 NumBlocks:% confirmed 1: 0.528
> 2: 0.766 3: 0.880
> Fee rate 5000   Avg blocks to confirm 1.93 NumBlocks:% confirmed 1: 0.528
> 2: 0.782 3: 0.891
> Fee rate 10000  Avg blocks to confirm 1.67 NumBlocks:% confirmed 1: 0.569
> 2: 0.844 3: 0.943
> Fee rate 20000  Avg blocks to confirm 1.33 NumBlocks:% confirmed 1: 0.715
> 2: 0.963 3: 0.989
> Fee rate 30000  Avg blocks to confirm 1.27 NumBlocks:% confirmed 1: 0.751
> 2: 0.974 3: 1.0
> Fee rate 40000  Avg blocks to confirm 1.25 NumBlocks:% confirmed 1: 0.792
> 2: 0.953 3: 0.994
> Fee rate 60000  Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.875
> 2: 1.0   3: 1.0
> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901
> 2: 1.0   3: 1.0
> Fee rate 300000 Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.886
> 2: 0.989 3: 1.0
>
>
> Alex
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2150a519/attachment.html>

From morcos at gmail.com  Tue Oct 28 12:12:57 2014
From: morcos at gmail.com (Alex Morcos)
Date: Tue, 28 Oct 2014 08:12:57 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
In-Reply-To: <CANEZrP0tpnES7=SuaVHOfWdf=CDkzhx2V=4mqRGDpW3ELsGkKA@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
	<CANEZrP0tpnES7=SuaVHOfWdf=CDkzhx2V=4mqRGDpW3ELsGkKA@mail.gmail.com>
Message-ID: <CAPWm=eXBUNd2WeCwnTtocuofiEq+Ccn0-hZTrMQCQiuHRvVZEQ@mail.gmail.com>

Yeah, so to explain points 1 and 2 a bit more

1)  It's about what question you are trying to answer.  The existing code
tries to answer the question of what is the median fee of a transaction
that gets confirmed in Y blocks.  It turns out that is not a very good
proxy for the question we really want to know which is what is the fee that
is necessary such that we are likely to be confirmed within Y blocks.
What happens is that there are so many transactions of the 40k satoshis/kB
feerate that they turn out to be the dominant data points of transactions
that are confirmed after 2 blocks, 3 blocks, etc. and not only 1 block.

So for example.   A hypothetical sample of 20 txs might find 2 of your 1k
sat/kB txs and 18 of the 40k sat/kB txs.  Perhaps 15 of the 40k txs are
confirmed in 1 block and the other 3 in 2 blocks, and 1 of the 1k txs in 1
block and the other in 2 blocks.  So if you analyze the data by
confirmation time, you find that 15/16 1-conf txs are 40k and 3/4 2-conf
txs are 40k, so the median feerate is 40k for both 1 and 2 confirmations.
Instead, the correct thing to do is analyze the data by feerate.  Doing
that, we find that 15/18 (83%) of 40k txs are confirmed in 1 block and 1/2
(50%) 1k txs are.  But 100% of both are confirmed within two blocks.  This
leads you to say, you need 40k feerate if you want to get confirmed in 1
block but 1k is sufficient if you want to be confirmed in 2 blocks.

Put another way, Let's imagine you wanted to know how tall you have to be
no longer fit in the coach seats on an airplane.   If you looked at the
median height of all people in coach and all people in first class, you
would see that they were about the same, and you would get a confusing
answer.  Instead you have to bin by height, and look at the percentage of
people of each height that fly first-class vs coach, and I'd guess that by
the time you got up to say 6'8" you were finding greater than 50% of the
people flying first class.

2) The code also presupposes that higher fee rate transactions must be
confirmed quicker.  And so in addition to binning all transactions by
confirmation time, the code then sorts all of the transactions and re-bins
them such that the highest fee transactions are all in the 1-confirmation
bin and the lowest fee transactions are all in the 25-confirmation bin.  If
we'd been trying to predict whether the first 2 bytes of transaction hash
influenced our confirmation time, we would have started by having a random
distribution of hashes in each confirmation bin, but then after doing the
sorting, we'd of course have found that the "median hash" of the
1-confirmation transactions was higher, because we sorted it to make that
the case.

In the airplane example this would have been equivalent to taking the
median height of the 20 tallest people on the plane (assuming first class
is 20 seats) and saying that was the height for first class and the median
height of the remaining people for coach.  This will appear to give a
slightly better answer than the first approach, but is still wrong.



There are still a lot of additional improvements that can be made to fee
estimation.  One problem my proposed code has is there really just aren't
enough data points of low feerate transactions to give meaningful answers
about how likely those are to be confirmed, so its answers are still a bit
conservative.  This will improve though as the actual distribution of
transactions spreads out.    The other major needed improvement is to not
just state some description of what has happened in the past, but to
actually make a prediction about what is going to happen in the future.
For instance looking at the feerates of unconfirmed transactions currently
in the mempool could tell you that if you want to be confirmed immediately
you'll need to be high enough in that priority queue.








On Tue, Oct 28, 2014 at 5:55 AM, Mike Hearn <mike at plan99.net> wrote:

> Could you explain a little further why you think the current approach is
> statistically incorrect? There's no doubt that the existing estimates the
> system produces are garbage, but that's because it assumes players in the
> fee market are rational and they are not.
>
> Fwiw bitcoinj 0.12.1 applies the January fee drop and will attach fee of
> only 1000 satoshis per kB by default. I also have a program that measures
> confirmation time for a given fee level (with fresh coins so there's no
> priority) and it aligns with your findings, most txns confirm within a
> couple of blocks.
>
> Ultimately there isn't any easy method to stop people throwing money away.
> Bitcoinj will probably continue to use hard coded fee values for now to try
> and contribute to market sanity in the hope it makes smartfees smarter.
> On 27 Oct 2014 19:34, "Alex Morcos" <morcos at gmail.com> wrote:
>
>> I've been playing around with the code for estimating fees and found a
>> few issues with the existing code.   I think this will address several
>> observations that the estimates returned by the existing code appear to be
>> too high.  For instance see @cozz in Issue 4866
>> <https://github.com/bitcoin/bitcoin/issues/4866>.
>>
>> Here's what I found:
>>
>> 1) We're trying to answer the question of what fee X you need in order
>> to be confirmed within Y blocks.   The existing code tries to do that by
>> calculating the median fee for each possible Y instead of gathering
>> statistics for each possible X.  That approach is statistically incorrect.
>> In fact since certain X's appear so frequently, they tend to dominate the
>> statistics at all possible Y's (a fee rate of about 40k satoshis)
>>
>> 2) The existing code then sorts all of the data points in all of the
>> buckets together by fee rate and then reassigns buckets before calculating
>> the medians for each confirmation bucket.  The sorting forces a
>> relationship where there might not be one.  Imagine some other variable,
>> such as first 2 bytes of the transaction hash.  If we sorted these and then
>> used them to give estimates, we'd see a clear but false relationship where
>> transactions with low starting bytes in their hashes took longer to confirm.
>>
>> 3) Transactions which don't have all their inputs available (because they
>> depend on other transactions in the mempool) aren't excluded from the
>> calculations.  This skews the results.
>>
>> I rewrote the code to follow a different approach.  I divided all
>> possible fee rates up into fee rate buckets (I spaced these
>> logarithmically).  For each transaction that was confirmed, I updated the
>> appropriate fee rate bucket with how many blocks it took to confirm that
>> transaction.
>>
>> The hardest part of doing this fee estimation is to decide what the
>> question really is that we're trying to answer.  I took the approach that
>> if you are asking what fee rate I need to be confirmed within Y blocks,
>> then what you would like to know is the lowest fee rate such that a
>> relatively high percentage of transactions of that fee rate are confirmed
>> within Y blocks. Since even the highest fee transactions are confirmed
>> within the first block only 90-93% of the time, I decided to use 80% as my
>> cutoff.  So now to answer "estimatefee Y", I scan through all of the fee
>> buckets from the most expensive down until I find the last bucket with >80%
>> of the transactions confirmed within Y blocks.
>>
>> Unfortunately we still have the problem of not having enough data points
>> for non-typical fee rates, and so it requires gathering a lot of data to
>> give reasonable answers. To keep all of these data points in a circular
>> buffer and then sort them for every analysis (or after every new block) is
>> expensive.  So instead I adopted the approach of keeping an exponentially
>> decaying moving average for each bucket.  I used a decay of .998 which
>> represents a half life of 374 blocks or about 2.5 days.  Also if a
>> bucket doesn't have very many transactions, I combine it with the next
>> bucket.
>>
>> Here is a link <https://github.com/morcos/bitcoin/pull/3> to the code.
>> I can create an actual pull request if there is consensus that it makes
>> sense to do so.
>>
>> I've attached a graph comparing the estimates produced for 1-3
>> confirmations by the new code and the old code.  I did apply the patch to
>> fix issue 3 above to the old code first.  The new code is in green and the
>> fixed code is in purple.  The Y axis is a log scale of feerate in satoshis
>> per KB and the X axis is chain height.  The new code produces the same
>> estimates for 2 and 3 confirmations (the answers are effectively quantized
>> by bucket).
>>
>> I've also completely reworked smartfees.py.  It turns out to require many
>> many more transactions are put through in order to have statistically
>> significant results, so the test is quite slow to run (about 3 mins on my
>> machine).
>>
>> I've also been running a real world test, sending transactions of various
>> fee rates and seeing how long they took to get confirmed.  After almost 200
>> tx's at each fee rate, here are the results so far:
>>
>> Fee rate 1100   Avg blocks to confirm 2.30 NumBlocks:% confirmed 1: 0.528
>> 2: 0.751 3: 0.870
>> Fee rate 2500   Avg blocks to confirm 2.22 NumBlocks:% confirmed 1: 0.528
>> 2: 0.766 3: 0.880
>> Fee rate 5000   Avg blocks to confirm 1.93 NumBlocks:% confirmed 1: 0.528
>> 2: 0.782 3: 0.891
>> Fee rate 10000  Avg blocks to confirm 1.67 NumBlocks:% confirmed 1: 0.569
>> 2: 0.844 3: 0.943
>> Fee rate 20000  Avg blocks to confirm 1.33 NumBlocks:% confirmed 1: 0.715
>> 2: 0.963 3: 0.989
>> Fee rate 30000  Avg blocks to confirm 1.27 NumBlocks:% confirmed 1: 0.751
>> 2: 0.974 3: 1.0
>> Fee rate 40000  Avg blocks to confirm 1.25 NumBlocks:% confirmed 1: 0.792
>> 2: 0.953 3: 0.994
>> Fee rate 60000  Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.875
>> 2: 1.0   3: 1.0
>> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901
>> 2: 1.0   3: 1.0
>> Fee rate 300000 Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.886
>> 2: 0.989 3: 1.0
>>
>>
>> Alex
>>
>>
>> ------------------------------------------------------------------------------
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/bb4e512b/attachment.html>

From gavinandresen at gmail.com  Tue Oct 28 13:59:11 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 28 Oct 2014 09:59:11 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
In-Reply-To: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
Message-ID: <CABsx9T35NdEkFmdVDX19gOO1p0h1M_ZDK1iXxTFNLHE9dtC3hQ@mail.gmail.com>

I think Alex's approach is better; I don't think we can know how much
better until we have a functioning fee market.

We don't have a functioning fee market now, because fees are hard-coded. So
we get "pay the hard-coded fee and you'll get confirmed in one or two or
three blocks, depending on which miners mine the next three blocks and what
time of day it is."

git HEAD code says you need a fee of 10,0000 satoshis/kb to be pretty sure
you'll get confirmed in the next block. That looks about right with Alex's
real-world data (if we take "90% chance" as 'pretty sure you'll get
confirmed'):

Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901
2: 1.0   3: 1.0

My only concern with Alex's code is that it takes much longer to get
'primed' -- Alex, if I started with no data about fees, how long would it
take to be able to get enough data for a reasonable estimate of "what is
the least I can pay and still be 90% sure I get confirmed in 20 blocks" ?
Hours? Days? Weeks?

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2c748d73/attachment.html>

From morcos at gmail.com  Tue Oct 28 14:30:14 2014
From: morcos at gmail.com (Alex Morcos)
Date: Tue, 28 Oct 2014 10:30:14 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
In-Reply-To: <CABsx9T35NdEkFmdVDX19gOO1p0h1M_ZDK1iXxTFNLHE9dtC3hQ@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
	<CABsx9T35NdEkFmdVDX19gOO1p0h1M_ZDK1iXxTFNLHE9dtC3hQ@mail.gmail.com>
Message-ID: <CAPWm=eX0MMBOPvugETxq+pyDzZ00xc90hZAJe8qgg4Shftm-9w@mail.gmail.com>

Oh in just a couple of blocks, it'll give you a somewhat reasonable
estimate for asking about every confirmation count other than 1, but it
could take several hours for it to have enough data points to give you a
good estimate for getting confirmed in one block (because the prevalent
feerate is not always confirmed in 1 block >80% of the time)   Essentially
what it does is just combine buckets until it has enough data points, so
after the first block it might be treating all of the txs as belonging to
the same feerate bucket, but since the answer it returns is the "median"*
fee rate for that bucket, its a reasonable answer right off the get go.

Do you think it would make sense to make that 90% number an argument to rpc
call?  For instance there could be a default (I would use 80%) but then you
could specify if you required a different certainty.  It wouldn't require
any code changes and might make it easier for people to build more
complicated logic on top of it.

*It can't actually track the median, but it identifies which of the smaller
actual buckets the median would have fallen into and returns the average
feerate for that median bucket.





On Tue, Oct 28, 2014 at 9:59 AM, Gavin Andresen <gavinandresen at gmail.com>
wrote:

> I think Alex's approach is better; I don't think we can know how much
> better until we have a functioning fee market.
>
> We don't have a functioning fee market now, because fees are hard-coded.
> So we get "pay the hard-coded fee and you'll get confirmed in one or two or
> three blocks, depending on which miners mine the next three blocks and what
> time of day it is."
>
> git HEAD code says you need a fee of 10,0000 satoshis/kb to be pretty sure
> you'll get confirmed in the next block. That looks about right with Alex's
> real-world data (if we take "90% chance" as 'pretty sure you'll get
> confirmed'):
>
> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901
> 2: 1.0   3: 1.0
>
> My only concern with Alex's code is that it takes much longer to get
> 'primed' -- Alex, if I started with no data about fees, how long would it
> take to be able to get enough data for a reasonable estimate of "what is
> the least I can pay and still be 90% sure I get confirmed in 20 blocks" ?
> Hours? Days? Weeks?
>
> --
> --
> Gavin Andresen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/3e672923/attachment.html>

From morcos at gmail.com  Tue Oct 28 14:55:10 2014
From: morcos at gmail.com (Alex Morcos)
Date: Tue, 28 Oct 2014 10:55:10 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
In-Reply-To: <CAPWm=eX0MMBOPvugETxq+pyDzZ00xc90hZAJe8qgg4Shftm-9w@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
	<CABsx9T35NdEkFmdVDX19gOO1p0h1M_ZDK1iXxTFNLHE9dtC3hQ@mail.gmail.com>
	<CAPWm=eX0MMBOPvugETxq+pyDzZ00xc90hZAJe8qgg4Shftm-9w@mail.gmail.com>
Message-ID: <CAPWm=eWA7ZnpE-zQ8snKnSiA0YtBowUzibtWW7fRhvoRoVDeLg@mail.gmail.com>

Sorry, perhaps I misinterpreted that question.  The estimates will be
dominated by the prevailing transaction rates initially, so the estimates
you get for something like "what is the least I can pay and still be 90%
sure I get confirmed in 20 blocks"  won't be insane, but they will still be
way too conservative.  I'm not sure what you meant by reasonable.  You
won't get the "correct" answer of something significantly less than 40k
sat/kB for quite some time.  Given that the half-life of the decay is 2.5
days, then within a couple of days.  And in fact even in the steady state,
the new code will still return a much higher rate than the existing code,
say 10k sat/kB instead of 1k sat/kB, but that's just a result of the
sorting the existing code does and the fact that no one places transactions
with that small fee.   To correctly give such low answers, the new code
will require that those super low feerate transactions are occurring
frequently enough, but the bar for enough datapoints in a feerate bucket is
pretty low, an average of 1 tx per block.  The bar can be made lower at the
expense of a bit of noisiness in the answers, for instance for priorities I
had to make the bar significantly lower because there are so many fewer
transactions confirmed because of priorities.  I'm certainly open to tuning
some of these variables.





On Tue, Oct 28, 2014 at 10:30 AM, Alex Morcos <morcos at gmail.com> wrote:

> Oh in just a couple of blocks, it'll give you a somewhat reasonable
> estimate for asking about every confirmation count other than 1, but it
> could take several hours for it to have enough data points to give you a
> good estimate for getting confirmed in one block (because the prevalent
> feerate is not always confirmed in 1 block >80% of the time)   Essentially
> what it does is just combine buckets until it has enough data points, so
> after the first block it might be treating all of the txs as belonging to
> the same feerate bucket, but since the answer it returns is the "median"*
> fee rate for that bucket, its a reasonable answer right off the get go.
>
> Do you think it would make sense to make that 90% number an argument to
> rpc call?  For instance there could be a default (I would use 80%) but then
> you could specify if you required a different certainty.  It wouldn't
> require any code changes and might make it easier for people to build more
> complicated logic on top of it.
>
> *It can't actually track the median, but it identifies which of the
> smaller actual buckets the median would have fallen into and returns the
> average feerate for that median bucket.
>
>
>
>
>
> On Tue, Oct 28, 2014 at 9:59 AM, Gavin Andresen <gavinandresen at gmail.com>
> wrote:
>
>> I think Alex's approach is better; I don't think we can know how much
>> better until we have a functioning fee market.
>>
>> We don't have a functioning fee market now, because fees are hard-coded.
>> So we get "pay the hard-coded fee and you'll get confirmed in one or two or
>> three blocks, depending on which miners mine the next three blocks and what
>> time of day it is."
>>
>> git HEAD code says you need a fee of 10,0000 satoshis/kb to be pretty
>> sure you'll get confirmed in the next block. That looks about right with
>> Alex's real-world data (if we take "90% chance" as 'pretty sure you'll get
>> confirmed'):
>>
>> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901
>> 2: 1.0   3: 1.0
>>
>> My only concern with Alex's code is that it takes much longer to get
>> 'primed' -- Alex, if I started with no data about fees, how long would it
>> take to be able to get enough data for a reasonable estimate of "what is
>> the least I can pay and still be 90% sure I get confirmed in 20 blocks" ?
>> Hours? Days? Weeks?
>>
>> --
>> --
>> Gavin Andresen
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/06848964/attachment.html>

From gavinandresen at gmail.com  Tue Oct 28 14:58:36 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 28 Oct 2014 10:58:36 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
In-Reply-To: <CAPWm=eX0MMBOPvugETxq+pyDzZ00xc90hZAJe8qgg4Shftm-9w@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
	<CABsx9T35NdEkFmdVDX19gOO1p0h1M_ZDK1iXxTFNLHE9dtC3hQ@mail.gmail.com>
	<CAPWm=eX0MMBOPvugETxq+pyDzZ00xc90hZAJe8qgg4Shftm-9w@mail.gmail.com>
Message-ID: <CABsx9T2ET_Guoa8J-9irjwOo7vN+9Y3TyEUhdDBWxaYKV1J95w@mail.gmail.com>

On Tue, Oct 28, 2014 at 10:30 AM, Alex Morcos <morcos at gmail.com> wrote:
>
> Do you think it would make sense to make that 90% number an argument to
> rpc call?  For instance there could be a default (I would use 80%) but then
> you could specify if you required a different certainty.  It wouldn't
> require any code changes and might make it easier for people to build more
> complicated logic on top of it.
>

RE: 80% versus 90% :  I think a default of 80% will get us a lot of "the
fee estimation logic is broken, I want my transactions to confirm quick and
a lot of them aren't confirming for 2 or 3 blocks."

RE: RPC argument:  I'm reluctant to give too many 'knobs' for the RPC
interface. I think the default percentage makes sense as a
command-line/bitcoin.conf option; I can imagine services that want to save
on fees running with -estimatefeethreshold=0.5  (or
-estimatefeethreshold=0.95 if as-fast-as-possible confirmations are
needed). Setting both the number of confirmations and the estimation
threshold on a transaction-by-transaction basis seems like overkill to me.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/a346b252/attachment.html>

From morcos at gmail.com  Tue Oct 28 15:39:52 2014
From: morcos at gmail.com (Alex Morcos)
Date: Tue, 28 Oct 2014 11:39:52 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
	estimates)
In-Reply-To: <CABsx9T2ET_Guoa8J-9irjwOo7vN+9Y3TyEUhdDBWxaYKV1J95w@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
	<CABsx9T35NdEkFmdVDX19gOO1p0h1M_ZDK1iXxTFNLHE9dtC3hQ@mail.gmail.com>
	<CAPWm=eX0MMBOPvugETxq+pyDzZ00xc90hZAJe8qgg4Shftm-9w@mail.gmail.com>
	<CABsx9T2ET_Guoa8J-9irjwOo7vN+9Y3TyEUhdDBWxaYKV1J95w@mail.gmail.com>
Message-ID: <CAPWm=eWdWqDpB29HW1xMc5i-dWQaLRLpK3MWLPOnpQoRRkhJEA@mail.gmail.com>

RE: 90% : I think it's fine to use 90% for anything other than 1
confirmation, but if you look at the real world data test I did, or the raw
data from this new code, you'll see that even the highest fee rate
transactions only get confirmed at about a 90% rate in 1 block, so that if
you use that as your cut-off you will sometimes get no answer and sometimes
get a very high fee rate and sometimes get a reasonable fee rate, it just
depends because the data is too noisy.  I think thats just because there is
no good answer to that question.  There is no fee you can put on your
transaction to guarantee greater than 90% chance of getting confirmed in
one block.  I think 85% might be safe?

RE: tunable as command-line/bitcoin.conf: sounds good!

OK, sorry to have all this conversation on the dev list, maybe i'll turn
this into an actual PR if we want to comment on the code?
I just wanted to see if it even made sense to make a PR for this or this
isn't the way we wanted to go about it.




On Tue, Oct 28, 2014 at 10:58 AM, Gavin Andresen <gavinandresen at gmail.com>
wrote:

> On Tue, Oct 28, 2014 at 10:30 AM, Alex Morcos <morcos at gmail.com> wrote:
>>
>> Do you think it would make sense to make that 90% number an argument to
>> rpc call?  For instance there could be a default (I would use 80%) but then
>> you could specify if you required a different certainty.  It wouldn't
>> require any code changes and might make it easier for people to build more
>> complicated logic on top of it.
>>
>
> RE: 80% versus 90% :  I think a default of 80% will get us a lot of "the
> fee estimation logic is broken, I want my transactions to confirm quick and
> a lot of them aren't confirming for 2 or 3 blocks."
>
> RE: RPC argument:  I'm reluctant to give too many 'knobs' for the RPC
> interface. I think the default percentage makes sense as a
> command-line/bitcoin.conf option; I can imagine services that want to save
> on fees running with -estimatefeethreshold=0.5  (or
> -estimatefeethreshold=0.95 if as-fast-as-possible confirmations are
> needed). Setting both the number of confirmations and the estimation
> threshold on a transaction-by-transaction basis seems like overkill to me.
>
> --
> --
> Gavin Andresen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2ebb0ad7/attachment.html>

From tomh at thinlink.com  Tue Oct 28 17:38:07 2014
From: tomh at thinlink.com (Tom Harding)
Date: Tue, 28 Oct 2014 10:38:07 -0700
Subject: [Bitcoin-development] DS Deprecation Window
In-Reply-To: <CAAS2fgTW9uWewWbdRj6SCCAKU0D30jFiukDL9YPeG4n8LVwoYg@mail.gmail.com>
References: <544EA3D7.2050901@thinlink.com>	<544EA85E.8010400@bluematt.me>	<544EFEE8.4000000@thinlink.com>
	<CAAS2fgTW9uWewWbdRj6SCCAKU0D30jFiukDL9YPeG4n8LVwoYg@mail.gmail.com>
Message-ID: <544FD47F.6060900@thinlink.com>

On 10/27/2014 7:36 PM, Gregory Maxwell wrote:
> Consider a malicious miner can concurrently flood all other miners
> with orthogonal double spends (which he doesn't mine himself). These
> other miners will all be spending some amount of their time mining on
> these transactions before realizing others consider them
> double-spends.

If I understand correctly, the simplest example of this attack is three 
transactions spending the same coin, distributed to two miners like this:

             Miner A    Miner B
Mempool       tx1a       tx1b
Relayed       tx2        tx2

Since relay has to be limited, Miner B doesn't know about tx1a until it 
is included in Miner A's block, so he delays that block (unless it 
appears very quickly).

To create this situation, attacker has to transmit all three 
transactions very quickly, or mempools will be too synchronized. 
Attacker tries to make it so that everyone else has a tx1a conflict that 
Miner A does not have.  Ditto for each individual victim, with different 
transactions (this seems very difficult).

Proposal shows that there is always a tiny risk to including tx1 when a 
double-spend is known, and I agree that this attack can add something to 
that risk.  Miner A can neutralize his risk by excluding any tx1 known 
to be double-spent, but as Thomas Zander wrote, that is an undesirable 
outcome.

However, Miner A has additional information - he knows how soon he 
received tx2 after receiving tx1a.

The attack has little chance of working if any of the malicious 
transactions are sent even, say, 10 seconds apart from each other. 
Dropping the labels for transmit-order numbering, if the 1->2 transmit 
gap is large, mempools will agree on 1.  If 1->2 gap is small, but the 
gap to 3 is large, mempools will agree on the 1-2 pair, but possibly 
have the order reversed.  Either way, mempools won't disagree on the 
existence of 1 unless the 1->3 gap is small.

So, I think it will be possible to quantify and target the risk of 
including tx1a to an arbitrarily low level, based on the local 
measurement of the time gap to tx2, and an effective threshold won't be 
very high.  It does highlight yet again, the shorter the time frame, the 
greater the risk.




From ferdinando.ametrano at gmail.com  Tue Oct 28 20:17:58 2014
From: ferdinando.ametrano at gmail.com (Ferdinando M. Ametrano)
Date: Tue, 28 Oct 2014 21:17:58 +0100
Subject: [Bitcoin-development] death by halving
In-Reply-To: <CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
Message-ID: <CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>

On Oct 25, 2014 9:19 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> We had a halving, and it was a non-event.
> Is there some reason to believe next time will be different?

In november 2008 bitcoin was a much younger ecosystem, with less liquidity
and trading, smaller market cap, and the halving happened during a quite
stable positive price trend.

In the next months competition might easily drive down mining margins, and
the reward halving might generate unexpected disruption in mining
operations.

Moreover, halving is not strictly necessary to respect the spirit of
Nakamoto's monetary rule and its 21M limit. At the beginning of the 3rd
reward era (block 420000, in 2017) a new reward function could become
effective R(b)=k*2^(-h*b/210000) where b is the block number and R(b) is
the reward. The parameters h and k can be calibrated so that R(419999)=25
and sum_b{R}=21M


?If the increased issuance speed in the third era is considered
problematic, then each era could have its own R_e(b)=k_e*2^(-h_e*b/210000)
fitted to the amount of coins to be issued in that era according to the
current supply rule, e.g. fitting k_e and h_e to R(419999)=25 and
sum_{b}_e=2,625,000.

Would such a BIP have any chance to be considered? Am I missing something?

Nando
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/c338fcc4/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: btc-blkzoomed (1).png
Type: image/png
Size: 18254 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/c338fcc4/attachment.png>

From gmaxwell at gmail.com  Tue Oct 28 20:36:22 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 28 Oct 2014 20:36:22 +0000
Subject: [Bitcoin-development] Fwd:  death by halving
In-Reply-To: <CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
Message-ID: <CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>

On Tue, Oct 28, 2014 at 8:17 PM, Ferdinando M. Ametrano
<ferdinando.ametrano at gmail.com> wrote:
>
> On Oct 25, 2014 9:19 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> > We had a halving, and it was a non-event.
> > Is there some reason to believe next time will be different?
>
> In november 2008 bitcoin was a much younger ecosystem,

Or very old, indeed, if you are using unsigned arithmetic. [...]

> and the halving happened during a quite stable positive price trend

Hardly,

http://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-10-01zeg2012-12-01ztgSzm1g10zm2g25zv

> Moreover, halving is not strictly necessary to respect the spirit of Nakamoto's monetary rule

It isn't, but many people have performed planning around the current
behaviour. The current behaviour has also not shown itself to be
problematic (and we've actually experienced its largest effect already
without incident), and there are arguable benefits like encouraging
investment in mining infrastructure.

This thread is, in my opinion, a waste of time.  It's yet again
another perennial bikeshedding proposal brought up many times since at
least 2011, suggesting random changes for
non-existing(/not-yet-existing) issues.

There is a lot more complexity to the system than the subsidy schedule.



From alex.mizrahi at gmail.com  Tue Oct 28 20:57:56 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Tue, 28 Oct 2014 22:57:56 +0200
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
Message-ID: <CAE28kUSqqcsMJArK29nG+UCiTX9buiJbQoMb30-oH-G=eFxrnQ@mail.gmail.com>

> This thread is, in my opinion, a waste of time.  It's yet again
> another perennial bikeshedding proposal brought up many times since at
> least 2011, suggesting random changes for
> non-existing(/not-yet-existing) issues.
>
> There is a lot more complexity to the system than the subsidy schedule.
>

Well, the main question is what makes Bitcoin secure.
It is secured by proofs of work which are produced by miners.
Miners have economic incentives to play by the rules; in simple terms, that
is more profitable than performing attacks.

So the question is, why and when it works? It would be nice to know the
boundaries, no?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/33741ecb/attachment.html>

From jeremie.dl at gmail.com  Tue Oct 28 21:19:41 2014
From: jeremie.dl at gmail.com (=?UTF-8?B?SsOpcsOpbWllIER1Ym9pcy1MYWNvc3Rl?=)
Date: Tue, 28 Oct 2014 22:19:41 +0100
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CAE28kUSqqcsMJArK29nG+UCiTX9buiJbQoMb30-oH-G=eFxrnQ@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CAE28kUSqqcsMJArK29nG+UCiTX9buiJbQoMb30-oH-G=eFxrnQ@mail.gmail.com>
Message-ID: <CAJqsvLCG2Cv=7wzDLotunEUTnAvdxVLSGrMEtkAnmdoBgONBsg@mail.gmail.com>

Answering today's concerns with yesterday's facts is dangerous,
especially with bitcoin on a 4 years period. I personally consider all
arguments like "we went through once, and nothing special. So no
disturbance worthy of discussion to expect" baseless.
Also, starting a topic with mentions of "death" is not leading to any
useful discussion.

@Topic starters: don't oversell your topic with that kind of
vocabulary hype. "death by halving", seriously?
@Everybody else: don't focus on the chosen vocabulary, or use it to
discard what might be a relevant discussion topic.

The fact that a topic was brought up many times since a long time,
does not mean it is not relevant. It only means it is a recurring
concern. I read no convincing argument against a significant
disturbance of the mining market to come. The fact that it is known in
advance is no counter argument to me.
Environmental conditions will have changed so much, the next halving
occurence might have nothing to do with the previous one, and it
should be perfectly ok to discuss it instead of putting the whole
thing under the carpet.

What is most important to the discussion to me: the main difference
between the last halving and the one to come is the relative weight of
ideology vs. rationality in miners's motivations. Effectively putting
us closer to the original bitcoin premises (miners fully rational).
Miners were close to being 100% individuals last halving, they are now
largely for-profit companies. This isn't a change we can overlook with
pure maths or with previous experience.


Jeremie DL





2014-10-28 21:36 GMT+01:00 Gregory Maxwell <gmaxwell at gmail.com>:
> On Tue, Oct 28, 2014 at 8:17 PM, Ferdinando M. Ametrano
> <ferdinando.ametrano at gmail.com> wrote:
>>
>> On Oct 25, 2014 9:19 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
>> > We had a halving, and it was a non-event.
>> > Is there some reason to believe next time will be different?
>>
>> In november 2008 bitcoin was a much younger ecosystem,
>
> Or very old, indeed, if you are using unsigned arithmetic. [...]
>
>> and the halving happened during a quite stable positive price trend
>
> Hardly,
>
> http://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-10-01zeg2012-12-01ztgSzm1g10zm2g25zv
>
>> Moreover, halving is not strictly necessary to respect the spirit of Nakamoto's monetary rule
>
> It isn't, but many people have performed planning around the current
> behaviour. The current behaviour has also not shown itself to be
> problematic (and we've actually experienced its largest effect already
> without incident), and there are arguable benefits like encouraging
> investment in mining infrastructure.
>
> This thread is, in my opinion, a waste of time.  It's yet again
> another perennial bikeshedding proposal brought up many times since at
> least 2011, suggesting random changes for
> non-existing(/not-yet-existing) issues.
>
> There is a lot more complexity to the system than the subsidy schedule.
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

2014-10-28 21:57 GMT+01:00 Alex Mizrahi <alex.mizrahi at gmail.com>:
>
>>
>> This thread is, in my opinion, a waste of time.  It's yet again
>> another perennial bikeshedding proposal brought up many times since at
>> least 2011, suggesting random changes for
>> non-existing(/not-yet-existing) issues.
>>
>> There is a lot more complexity to the system than the subsidy schedule.
>
>
> Well, the main question is what makes Bitcoin secure.
> It is secured by proofs of work which are produced by miners.
> Miners have economic incentives to play by the rules; in simple terms, that
> is more profitable than performing attacks.
>
> So the question is, why and when it works? It would be nice to know the
> boundaries, no?
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From ferdinando.ametrano at gmail.com  Tue Oct 28 21:23:27 2014
From: ferdinando.ametrano at gmail.com (Ferdinando M. Ametrano)
Date: Tue, 28 Oct 2014 22:23:27 +0100
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
Message-ID: <CADfmNE=hKPA5F8X-iCeZk4J+Mhijyk0BLXD2qVWZ-M5-H+ejVQ@mail.gmail.com>

> > In november 2008 bitcoin was a much younger ecosystem,
>
> Or very old, indeed, if you are using unsigned arithmetic. [...]
>
:-) I meant 2012, of course, but loved your wit


> > and the halving happened during a quite stable positive price trend
>
> Hardly,
>
>
> http://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-10-01zeg2012-12-01ztgSzm1g10zm2g25zv


indeed!
http://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-08-01zeg2013-02-01ztgSzm1g10zm2g25zv


> There is a lot more complexity to the system than the subsidy schedule.
>
who said the contrary?

This thread is, in my opinion, a waste of time.
>
it might be, I have some free time right now...

many people have performed planning around the current
> behaviour. The current behaviour has also not shown itself to be
> problematic (and we've actually experienced its largest effect already
> without incident), and there are arguable benefits like encouraging
> investment in mining infrastructure.
>

I would love a proper rebuttal of a basic economic argument. If increased
competition will push mining revenues below 200% of operational costs, then
the halving will suddenly switch off many non profitable mining resources.
As of now the cost per block is probably already about 100USD, probably in
the 50-150USD.
Dismissed mining resources might even become cheaply available for
malevolent agents considering a 51% attack. Moreover the timing would be
perfect for the burst of any existing cloud hashing Ponzi scheme.
>From a strict economic point of view allowing the halving jump is looking
for trouble. To each his own.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/c85c0aa9/attachment.html>

From kyuupichan at gmail.com  Tue Oct 28 21:34:16 2014
From: kyuupichan at gmail.com (Neil)
Date: Wed, 29 Oct 2014 06:34:16 +0900
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CADfmNE=hKPA5F8X-iCeZk4J+Mhijyk0BLXD2qVWZ-M5-H+ejVQ@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CADfmNE=hKPA5F8X-iCeZk4J+Mhijyk0BLXD2qVWZ-M5-H+ejVQ@mail.gmail.com>
Message-ID: <CAPf5XX6aDGpNxNorbU_JddwpDhnCdX7z=8MskagorC9qUL+T=Q@mail.gmail.com>

Economically a halving is almost the same as a halving in price (as fees
take up more of the pie, less so).

Coincidentally the price has halved since early July to mid-October, and
we've not even seen difficulty fall yet.

I don't think there's much to see here.

Neil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141029/a9fe9593/attachment.html>

From gmaxwell at gmail.com  Tue Oct 28 21:43:42 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 28 Oct 2014 21:43:42 +0000
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CAJqsvLCG2Cv=7wzDLotunEUTnAvdxVLSGrMEtkAnmdoBgONBsg@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CAE28kUSqqcsMJArK29nG+UCiTX9buiJbQoMb30-oH-G=eFxrnQ@mail.gmail.com>
	<CAJqsvLCG2Cv=7wzDLotunEUTnAvdxVLSGrMEtkAnmdoBgONBsg@mail.gmail.com>
Message-ID: <CAAS2fgR4-V10i2D=v5-ZR9rWYcBjPKyRgGvgnG3JAmPKr4x19Q@mail.gmail.com>

On Tue, Oct 28, 2014 at 9:19 PM, J?r?mie Dubois-Lacoste
<jeremie.dl at gmail.com> wrote:
> The fact that a topic was brought up many times since a long time,
> does not mean it is not relevant.

I am not saying that it is "not relevant", I'm saying the discussion
is pointless:

No new information has arrived since the very first times that this
has been discussed except
that the first halving passed without incident.
If people were not sufficiently convinced that this was a serious
concern before there was concrete evidence (however small) that it was
okay, then discussion is not likely going to turn out differently the
50th or 100th time it is repeated...
except, perhaps, by wearing out all the most experienced and
knowledgeable among us as we become tired of rehashing the same
discussions over and over again.

On Tue, Oct 28, 2014 at 9:23 PM, Ferdinando M. Ametrano
<ferdinando.ametrano at gmail.com> wrote:
[snip]
> As of now the cost per block is probably already about 100USD, probably in
> the 50-150USD.

This is wildly at odds with reality. I don't mean to insult, but
please understand that every post you make here consumes the time of
dozens (or, hopefully, hundreds) of people. Every minute you spend
refining your post has a potential return of many minutes for the rest
of the users of the list.

At current difficulty, with a SP30 (one of the
leading-in-power-efficiency) marginal break-even is ~1144.8852 * $/kwh
== $/btc.

At $0.10/kwh each block has an expected cost right now, discounting
all one time hardware costs, close to $3000.



From ferdinando.ametrano at gmail.com  Tue Oct 28 21:44:50 2014
From: ferdinando.ametrano at gmail.com (Ferdinando M. Ametrano)
Date: Tue, 28 Oct 2014 22:44:50 +0100
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CAPf5XX6aDGpNxNorbU_JddwpDhnCdX7z=8MskagorC9qUL+T=Q@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CADfmNE=hKPA5F8X-iCeZk4J+Mhijyk0BLXD2qVWZ-M5-H+ejVQ@mail.gmail.com>
	<CAPf5XX6aDGpNxNorbU_JddwpDhnCdX7z=8MskagorC9qUL+T=Q@mail.gmail.com>
Message-ID: <CADfmNEke=i+WWfJH0d5e7x5mbvGVuujK-LDke=6PRR_d_Vuhig@mail.gmail.com>

On Tue, Oct 28, 2014 at 10:34 PM, Neil <kyuupichan at gmail.com> wrote:

> Economically a halving is almost the same as a halving in price (as fees
> take up more of the pie, less so).
>
> Coincidentally the price has halved since early July to mid-October, and
> we've not even seen difficulty fall yet.
>
because mining profits are many times operational costs. This might change
because of competition, in that case halving in price will become
problematic.

It amazes me that basic economic considerations seems completely lost here,
especially when it comes to mining. We should have learned the lesson of
how a small error in the incentive structure has lead from "one CPU, one
vote" to an oligopoly which might easily become a monopoly in the near
future.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/236689cb/attachment.html>

From christophe.biocca at gmail.com  Tue Oct 28 21:57:01 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Tue, 28 Oct 2014 17:57:01 -0400
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CAPf5XX6aDGpNxNorbU_JddwpDhnCdX7z=8MskagorC9qUL+T=Q@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CADfmNE=hKPA5F8X-iCeZk4J+Mhijyk0BLXD2qVWZ-M5-H+ejVQ@mail.gmail.com>
	<CAPf5XX6aDGpNxNorbU_JddwpDhnCdX7z=8MskagorC9qUL+T=Q@mail.gmail.com>
Message-ID: <CANOOu=-JvCP78kAk67YkwenZgciTc9q0heaP3hLZvoqhu5StUw@mail.gmail.com>

> The fact that it is known in advance is no counter argument to me.

But it does change miner behaviour in pretty significant ways.

Unlike difficulty forecasting, which seems near impossible to do
accurately, miners can plan to purchase less hardware as they approach
the revenue drop. You can do some basic cost/benefit calculation and
see that *if* margins are already low as the halving approaches, then
rational miners would cease purchasing any new hardware that wouldn't
be profitable past that point, unless they expect it to pay for itself
by then.

The lower the margins are, the longer in advance they would alter
their buying behaviour. You'd see an increased focus on cost-effective
hashpower (and older units would not be replaced as they break).
Either a significant supply of cost effective hardware shows up
(because it's the only thing that would sell in the last months), or
difficulty would stall long before the halving happens. Either way,
the predictability of the halving can reduce the hashpower on the day.

On Tue, Oct 28, 2014 at 5:34 PM, Neil <kyuupichan at gmail.com> wrote:
> Economically a halving is almost the same as a halving in price (as fees
> take up more of the pie, less so).
>
> Coincidentally the price has halved since early July to mid-October, and
> we've not even seen difficulty fall yet.
>
> I don't think there's much to see here.
>
> Neil
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From thomas at thomaszander.se  Tue Oct 28 22:00:23 2014
From: thomas at thomaszander.se (Thomas Zander)
Date: Tue, 28 Oct 2014 23:00:23 +0100
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CADfmNEke=i+WWfJH0d5e7x5mbvGVuujK-LDke=6PRR_d_Vuhig@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAPf5XX6aDGpNxNorbU_JddwpDhnCdX7z=8MskagorC9qUL+T=Q@mail.gmail.com>
	<CADfmNEke=i+WWfJH0d5e7x5mbvGVuujK-LDke=6PRR_d_Vuhig@mail.gmail.com>
Message-ID: <2462434.74aohssIDn@coldstorage>

On Tuesday 28. October 2014 22.44.50 Ferdinando M. Ametrano wrote:
> It amazes me that basic economic considerations seems completely lost here,
> especially when it comes to mining.

Please don't confuse people dismissing your thoughts with dismissing the basic 
economic considerations. The fact of the matter is that you didn't read the 
archives where these ideas have been brought forward and discussed, a 
consensus was reached. (it wasn't so basic afterall)

The fact that people don't want to repeat the discussion just for your sake is 
not the same as people not listening to those arguments.





From ferdinando.ametrano at gmail.com  Tue Oct 28 22:38:12 2014
From: ferdinando.ametrano at gmail.com (Ferdinando M. Ametrano)
Date: Tue, 28 Oct 2014 23:38:12 +0100
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <2462434.74aohssIDn@coldstorage>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAPf5XX6aDGpNxNorbU_JddwpDhnCdX7z=8MskagorC9qUL+T=Q@mail.gmail.com>
	<CADfmNEke=i+WWfJH0d5e7x5mbvGVuujK-LDke=6PRR_d_Vuhig@mail.gmail.com>
	<2462434.74aohssIDn@coldstorage>
Message-ID: <CADfmNEkjVM5JhV5i8Rev-i_G4XaFCG=bYdjU=oOnBcAs_v2N=Q@mail.gmail.com>

On Tue, Oct 28, 2014 at 11:00 PM, Thomas Zander <thomas at thomaszander.se>
wrote:

> you didn't read the
> archives where these ideas have been brought forward and discussed, a
> consensus was reached. (it wasn't so basic afterall)
> The fact that people don't want to repeat the discussion just for your
> sake is
> not the same as people not listening to those arguments.


I didn't start the thread and so didn't research the archive. Until two
posts ago there was no reference about the issue being discussed before. A
link would have been much kinder than harsh dismissal. I will research and
read.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/7900e3d4/attachment.html>

From ferdinando.ametrano at gmail.com  Tue Oct 28 22:43:08 2014
From: ferdinando.ametrano at gmail.com (Ferdinando M. Ametrano)
Date: Tue, 28 Oct 2014 23:43:08 +0100
Subject: [Bitcoin-development] Fwd: death by halving
In-Reply-To: <CAAS2fgR4-V10i2D=v5-ZR9rWYcBjPKyRgGvgnG3JAmPKr4x19Q@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CAE28kUSqqcsMJArK29nG+UCiTX9buiJbQoMb30-oH-G=eFxrnQ@mail.gmail.com>
	<CAJqsvLCG2Cv=7wzDLotunEUTnAvdxVLSGrMEtkAnmdoBgONBsg@mail.gmail.com>
	<CAAS2fgR4-V10i2D=v5-ZR9rWYcBjPKyRgGvgnG3JAmPKr4x19Q@mail.gmail.com>
Message-ID: <CADfmNE=2yw65aVEr=HVLWGrcQMbvpRKjraaYZehtfX=xTbdsiw@mail.gmail.com>

On Tue, Oct 28, 2014 at 10:43 PM, Gregory Maxwell <gmaxwell at gmail.com>
wrote:

> > As of now the cost per block is probably already about 100USD, probably
> in
> > the 50-150USD.
>
> This is wildly at odds with reality. I don't mean to insult, but
> please understand that every post you make here consumes the time of
> dozens (or, hopefully, hundreds) of people. Every minute you spend
> refining your post has a potential return of many minutes for the rest
> of the users of the list.
>
> At current difficulty, with a SP30 (one of the
> leading-in-power-efficiency) marginal break-even is ~1144.8852 * $/kwh
> == $/btc.
>
> At $0.10/kwh each block has an expected cost right now, discounting
> all one time hardware costs, close to $3000.
>

yes, you're right I meant about $100USD per BTC, i.e. $2500 per block.
Because of my mistake I'll shut up and go back researching the archive on
this issue.

Thank you for the kind summary of the many good reasons why halving is a
non-issue. Very much appreciated, especially considering how precious is
your time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2e7c0fc3/attachment.html>

From sergiolerner at certimix.com  Wed Oct 29 14:34:09 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Wed, 29 Oct 2014 11:34:09 -0300
Subject: [Bitcoin-development] Death by halving (pro-active proposals)
In-Reply-To: <CADfmNE=2yw65aVEr=HVLWGrcQMbvpRKjraaYZehtfX=xTbdsiw@mail.gmail.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CAE28kUSqqcsMJArK29nG+UCiTX9buiJbQoMb30-oH-G=eFxrnQ@mail.gmail.com>
	<CAJqsvLCG2Cv=7wzDLotunEUTnAvdxVLSGrMEtkAnmdoBgONBsg@mail.gmail.com>
	<CAAS2fgR4-V10i2D=v5-ZR9rWYcBjPKyRgGvgnG3JAmPKr4x19Q@mail.gmail.com>
	<CADfmNE=2yw65aVEr=HVLWGrcQMbvpRKjraaYZehtfX=xTbdsiw@mail.gmail.com>
Message-ID: <5450FAE1.5040508@certimix.com>

Instead of discussing what will happen when the subsidy is halved (which
nobody really knows) maybe we can think about of what we can do to
mitigate any damage in case something unwanted happens. Let's be proactive.

For instance, any form of merged-mining (like higher frequency
side-chains) will end-up increasing miners profit, even by a small
margin. Then that margin can compensate miners not to turn off their
equipment. Then we can encourage merge-mining on SHA-256, instead of
discouraging SHA-256 alt-coins.

Also we can encourage mining during the "trouble" period by creating a
donation pool: suppose we manage to convince miners to donate 1% of
their revenue in order to pay back to the miners for the first month
after the reward halving. If every block pays 1% for 10 months, then
every block during the first month of halving will earn 20% more.  Of
course, convincing miners of this may be difficult, but not impossible.
It could be done automatically with nLockTime freeze of transactions
with high fees, so no TTP is necessary.

So here are two proposals, any other idea?

Best regards,
 Sergio.





From jgarzik at bitpay.com  Wed Oct 29 17:25:19 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 29 Oct 2014 13:25:19 -0400
Subject: [Bitcoin-development] Death by halving (pro-active proposals)
In-Reply-To: <5450FAE1.5040508@certimix.com>
References: <CAE28kUS-uDbd_Br3H5BxwRm1PZFpOwLhcyyZT9b1_VfRaBC9jw@mail.gmail.com>
	<CAJHLa0PeB-DMs2zo680FRvaejV-K97k2g0Ti9pPdaNeH+gYmog@mail.gmail.com>
	<CAE28kUSPb3ZC1nJyX7H__7cAgXvOvPbZ+Tub+htGd5+tujZndg@mail.gmail.com>
	<CAJHLa0M20QjBOwhOwJWJUcPBLzmaX1uuPy-6ytvJQWLZy68aeg@mail.gmail.com>
	<CAE28kUS7cr3i-pSew6Y+xvfLEY5D1mi4oHU-GXv+jEf-i_8sVQ@mail.gmail.com>
	<CABsx9T1RPkif1+DEsOLrFfr-sE=FCs_B5C5aZzKr6HZCHw15ag@mail.gmail.com>
	<CADfmNEk40DTHDB8if_y_2i_Omoszd_BgcSxf-oS+ZcQB0tZZhg@mail.gmail.com>
	<CAAS2fgSiz-XRVQ4V+KbrTUWG4=g=WGf8c-pF4b4fFnfyU9HOqQ@mail.gmail.com>
	<CAAS2fgRjwg_XyvzHbMhmaiW85LmmsW3YiXHyhpKMHd2a03pH2Q@mail.gmail.com>
	<CAE28kUSqqcsMJArK29nG+UCiTX9buiJbQoMb30-oH-G=eFxrnQ@mail.gmail.com>
	<CAJqsvLCG2Cv=7wzDLotunEUTnAvdxVLSGrMEtkAnmdoBgONBsg@mail.gmail.com>
	<CAAS2fgR4-V10i2D=v5-ZR9rWYcBjPKyRgGvgnG3JAmPKr4x19Q@mail.gmail.com>
	<CADfmNE=2yw65aVEr=HVLWGrcQMbvpRKjraaYZehtfX=xTbdsiw@mail.gmail.com>
	<5450FAE1.5040508@certimix.com>
Message-ID: <CAJHLa0M5GBE69iVmFYm=uxSeVmB=iM-+9n-VW+XHg0hvDu=Ycg@mail.gmail.com>

Seconded - IMO a key future use of the chain will be securing other
chains.  I'm interested in pursuing the merged-mining angle.

Getting chain hashes to a miner, and getting that miner payment from
the chain, is key to this.  Consider a future where there are 10,000
chains secured by one block...


On Wed, Oct 29, 2014 at 10:34 AM, Sergio Lerner
<sergiolerner at certimix.com> wrote:
> Instead of discussing what will happen when the subsidy is halved (which
> nobody really knows) maybe we can think about of what we can do to
> mitigate any damage in case something unwanted happens. Let's be proactive.
>
> For instance, any form of merged-mining (like higher frequency
> side-chains) will end-up increasing miners profit, even by a small
> margin. Then that margin can compensate miners not to turn off their
> equipment. Then we can encourage merge-mining on SHA-256, instead of
> discouraging SHA-256 alt-coins.
>
> Also we can encourage mining during the "trouble" period by creating a
> donation pool: suppose we manage to convince miners to donate 1% of
> their revenue in order to pay back to the miners for the first month
> after the reward halving. If every block pays 1% for 10 months, then
> every block during the first month of halving will earn 20% more.  Of
> course, convincing miners of this may be difficult, but not impossible.
> It could be done automatically with nLockTime freeze of transactions
> with high fees, so no TTP is necessary.
>
> So here are two proposals, any other idea?
>
> Best regards,
>  Sergio.
>
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Wed Oct 29 20:08:48 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 29 Oct 2014 16:08:48 -0400
Subject: [Bitcoin-development] Reworking the policy estimation code (fee
 estimates)
In-Reply-To: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
References: <CAPWm=eXxs=AfFhaT2EeGFsR+2r96WcaOeWL_Z59-6LixH+=4AQ@mail.gmail.com>
Message-ID: <20141029200848.GA3458@savin.petertodd.org>

On Mon, Oct 27, 2014 at 03:33:45PM -0400, Alex Morcos wrote:
> I've been playing around with the code for estimating fees and found a few
> issues with the existing code.   I think this will address several
> observations that the estimates returned by the existing code appear to be
> too high.  For instance see @cozz in Issue 4866
> <https://github.com/bitcoin/bitcoin/issues/4866>.

I don't have time to look at the details of your statistical methods
unfortunately due to some deadlines, but a quick comment:

You should think about the malleability of your estimates to attackers.
For instance the current fee estimation code has a serious issue where
it'll happily estimate ludicriously high fees based on very little date.
There is a 'insane fees' failsafe, but it's IIRC set to allow
transactions with fees of less than 100mBTC/tx, roughly $50 at current
exchange rates. It's relatively easy to get a wallet into a condition
where this happens as the estimations are considered valid even based on
very little data - a simple sybil attack suffices. (e.g. the recently
published paper(1) on Tor sybil attacks comes to mind as one example of
many ways to do this) Obviously this could empty someone's wallet pretty
quickly; an exchange that makes a few dozen transactions an hour could
easily lose tens of thousands of dollars due to this exploit. Someone
correct me if I'm wrong, but last I checked in git HEAD this exploit is
still unfixed.

A user-configurable failsafe limit is a pretty obvious solution here,
albeit a crude one; it'd be interesting to see if a plausible security
argument could be made for something more sophisticated, like taking
into account coin-age of observed transactions that estimates are based
on.

1) "Bitcoin over Tor isn't a good idea",
   http://arxiv.org/abs/1410.6079

-- 
'peter'[:-1]@petertodd.org
0000000000000000098d3c9095b47ff1fd692fef5ac6731340802c7c63d38bb0
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141029/f464cf1b/attachment.sig>

From rusty at rustcorp.com.au  Thu Oct 30 23:18:34 2014
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 31 Oct 2014 09:48:34 +1030
Subject: [Bitcoin-development] Increasing regularity of block times?
Message-ID: <874mul9met.fsf@rustcorp.com.au>

Hi all,

        I've been toying with an algorithm to place a ceiling on
confirmation latency by allowing weaker blocks after a certain time.
Hope this isn't noise, but thought someone must have considered this
before, or know of flaws in the scheme?

Gory details:
http://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html

Thanks,
Rusty.



From gmaxwell at gmail.com  Thu Oct 30 23:34:25 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 30 Oct 2014 23:34:25 +0000
Subject: [Bitcoin-development] Increasing regularity of block times?
In-Reply-To: <874mul9met.fsf@rustcorp.com.au>
References: <874mul9met.fsf@rustcorp.com.au>
Message-ID: <CAAS2fgRLoDLzzD3v9qizzhH_PM9Q_a7Dq6-8mrAYbKc1-P6aTg@mail.gmail.com>

On Thu, Oct 30, 2014 at 11:18 PM, Rusty Russell <rusty at rustcorp.com.au> wrote:
> Hi all,
>
>         I've been toying with an algorithm to place a ceiling on
> confirmation latency by allowing weaker blocks after a certain time.
> Hope this isn't noise, but thought someone must have considered this
> before, or know of flaws in the scheme?
>
> Gory details:
> http://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html

Irregularity is a required property for convergence. Imagine what
would happen in a network where a blocks were produced at an exact
interval: Almost everyone would produce one the exact same time, and
the network would fragment and because the process would continue it
would not converge. It is precisely the variance  being some huge
multiple of the network radius which allows the network to converge at
all.

When lower variance is tolerable for convergence it can be achieved by
reducing the expectation. Maybe some other distribution can be proven
to be convergent to, it's difficult to reason about.

Bitcoin testnet implements a rule that allows lower difficulty blocks
after a delay (20 minutes, in fact), but it's a testing-toy... not
secure or intended to be so. At least one altcoin has copied that
behavior and been exploited on account of it.

If you're simply looking for faster evidence that the network is
working on a particular transaction set, at some lower timescale:,
then thats already possible.  e.g. look into how the p2pool sharechain
builds a consensus around mining work used for pooling. The same
mechanism can be used to give faster transaction selection evidence.

I'll dig up some citations for you later. Cheers.



From jgarzik at bitpay.com  Thu Oct 30 23:34:12 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 30 Oct 2014 19:34:12 -0400
Subject: [Bitcoin-development] Increasing regularity of block times?
In-Reply-To: <874mul9met.fsf@rustcorp.com.au>
References: <874mul9met.fsf@rustcorp.com.au>
Message-ID: <CAJHLa0OKAq+AdJQF_1Mf3sje-266x_fUm6C+3x9R85agmZ5B9A@mail.gmail.com>

That's what we do for testnet today:  https://en.bitcoin.it/wiki/Testnet

If no block is found for 20 minutes, one minimum-diff block may be mined.


On Thu, Oct 30, 2014 at 7:18 PM, Rusty Russell <rusty at rustcorp.com.au> wrote:
> Hi all,
>
>         I've been toying with an algorithm to place a ceiling on
> confirmation latency by allowing weaker blocks after a certain time.
> Hope this isn't noise, but thought someone must have considered this
> before, or know of flaws in the scheme?
>
> Gory details:
> http://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html
>
> Thanks,
> Rusty.
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From rusty at rustcorp.com.au  Fri Oct 31 03:31:12 2014
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 31 Oct 2014 14:01:12 +1030
Subject: [Bitcoin-development] Increasing regularity of block times?
In-Reply-To: <CAAS2fgRLoDLzzD3v9qizzhH_PM9Q_a7Dq6-8mrAYbKc1-P6aTg@mail.gmail.com>
References: <874mul9met.fsf@rustcorp.com.au>
	<CAAS2fgRLoDLzzD3v9qizzhH_PM9Q_a7Dq6-8mrAYbKc1-P6aTg@mail.gmail.com>
Message-ID: <87h9yk9apr.fsf@rustcorp.com.au>

Gregory Maxwell <gmaxwell at gmail.com> writes:
> On Thu, Oct 30, 2014 at 11:18 PM, Rusty Russell <rusty at rustcorp.com.au> wrote:
>> Hi all,
>>
>>         I've been toying with an algorithm to place a ceiling on
>> confirmation latency by allowing weaker blocks after a certain time.
>> Hope this isn't noise, but thought someone must have considered this
>> before, or know of flaws in the scheme?
>>
>> Gory details:
>> http://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html
>
> Irregularity is a required property for convergence. Imagine what
> would happen in a network where a blocks were produced at an exact
> interval: Almost everyone would produce one the exact same time, and
> the network would fragment and because the process would continue it
> would not converge.

Your point is well made.

If everyone published their easy blocks at the 20 minute mark,
divergence would be a problem (though with 6/7 blocks being normal, the
network would probably recover).  I was proposing to relay them as
normal, they're just not accepted until 20 minutes.

(Though with the suggested variant of accepting the most-compatible
rather than first-seen block, this isn't so critical).

> It is precisely the variance  being some huge multiple of the network
> radius which allows the network to converge at all.

I hadn't thought about it that way, but I assumed GHOST mitigate this
down to some lower limit.  Or?

> Bitcoin testnet implements a rule that allows lower difficulty blocks
> after a delay (20 minutes, in fact), but it's a testing-toy... not
> secure or intended to be so. At least one altcoin has copied that
> behavior and been exploited on account of it.

Agreed, that would be foolish.  Note that in my proposal, block
timestamps wouldn't reflect the delay (removing incentive to push
timestamps forward, but making judging historical blockchain's validity
harder).

> If you're simply looking for faster evidence that the network is
> working on a particular transaction set, at some lower timescale:,
> then thats already possible.  e.g. look into how the p2pool sharechain
> builds a consensus around mining work used for pooling. The same
> mechanism can be used to give faster transaction selection evidence.

Nice idea.  Publishing WIP blocks like this could provide evidence, but
you'd have to incentivize miners to publish them.  Can you think of a
way to do that (which beats simply reducing the block time)?

> I'll dig up some citations for you later. Cheers.

Thanks for your time,
Rusty.



From melvincarvalho at gmail.com  Fri Oct 31 18:58:07 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 31 Oct 2014 19:58:07 +0100
Subject: [Bitcoin-development] side-chains & 2-way pegging (Re: is there
 a way to do bitcoin-staging?)
In-Reply-To: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>
References: <CALqxMTHeipZZrJ_NSXK9vxiO83gSDgM6TA7T7XNBS3LtmuK2KA@mail.gmail.com>
Message-ID: <CAKaEYhL_N3TgTffwegXJ4pYqXURg7haCQgi2LgLPiSpotazLug@mail.gmail.com>

On 22 October 2014 23:54, Adam Back <adam at cypherspace.org> wrote:

> For those following this thread, we have now written a paper
> describing the side-chains, 2-way pegs and compact SPV proofs.
> (With additional authors Andrew Poelstra & Andrew Miller).
>
> http://blockstream.com/sidechains.pdf
>

A very well written paper, thank you for putting it together and sharing.

Given it's the 6 year birthday of satoshi's white paper, I just read
through it again.

I find it interesting that bitcoin is never defined in Satoshi's paper,
indeed, it never appears after the first word.

The term Electronic Coin is defined.

The terminology of bitcoin / altcoin / altchain / blockchain in this paper
still leaves me slightly uneasy, and I try to use the terms electronic coin
and electronic cash, more often.

If satoshi were to come back and continue his work, would it be an altcoin,
would it be "The" blockchain, would it be bitcoin, or would what we know as
bitcoin become an alt.  I suspect these questions are nothing more than
academic curiosity.

But I think I'll get more used to it over time :)

In any case, happy birthday "bitcoin" :)


>
> Adam
>
> On 16 March 2014 15:58, Adam Back <adam at cypherspace.org> wrote:
> > So an update on 1-way pegging (aka bitcoin staging, explained in quoted
> text
> > at bottom): it turns out secure 2-way pegging is also possible (with some
> > bitcoin change to help support it).  The interesting thing is this allows
> > interoperability in terms of being able to move bitcoin into and out of a
> > side chain.  The side chains may have some different parameters, or
> > experimental things people might want to come up with (subject to some
> > minimum compatibility at the level of being able to produce an SPV proof
> of
> > a given form).
> >
> > At the time of the 1-way peg discussion I considered 2-way peg as
> desirable
> > and it seemed plausible with bitcoin changes, but the motivation for
> 1-way
> > peg was to make it less risky to make changes on bitcoin, so that seemed
> > like a catch-22 loop.  Also in the 2-way peg thought experiment I had not
> > realized how simple it was to still impose a security firewall in the
> 2-way
> > peg also.
> >
> >
> > So Greg Maxwell proposed in Dec last year a practically compact way to do
> > 2-way pegging using SPV proofs.  And also provided a simple argument of
> how
> > this can provide a security firewall.  (Security firewall means the
> impact
> > of security bugs on the side-chain is limited to the people with coins in
> > it; bitcoin holders who did not use it are unaffected). [1]
> >
> > How it works:
> >
> > 1. to maintain the 21m coins promise, you start a side-chain with no
> > in-chain mining subsidy, all bitcoin creation happens on bitcoin chain
> (as
> > with 1-way peg).  Reach a reasonable hash rate.  (Other semantics than
> 1:1
> > peg should be possible, but this is the base case).
> >
> > 2. you move coins to the side-chain by spending them to a fancy script,
> > which suspends them, and allows them to be reanimated by the production
> of
> > an SPV proof of burn on the side-chain.
> >
> > 3. the side-chain has no mining reward, but it allows you to mint coins
> at
> > no mining cost by providing an SPV proof that the coin has been
> suspended as
> > in 2 on bitcoin.  The SPV proof must be buried significantly before being
> > used to reduce risk of reorganization.  The side-chain is an SPV client
> to
> > the bitcoin network, and so maintains a view of the bitcoin hash chain
> (but
> > not the block data).
> >
> > 4. the bitcoin chain is firewalled from security bugs on the side chain,
> > because bitcoin imposes the rule that no more coins can be reanimated
> than
> > are currently suspend (with respect to a given chain).
> >
> > 5. to simplify what they hypothetical bitcoin change would need to
> consider
> > and understand, after a coin is reanimated there is a maturity period
> > imposed (say same as fresh mined coins).  During the maturity period the
> > reanimation script allows a fraud proof to spend the coins back.  A fraud
> > bounty fee (equal to the reanimate fee) can be offered by the mover to
> > incentivize side-chain full nodes to watch reanimations and search for
> fraud
> > proofs.
> >
> > 6. a fraud proof is an SPV proof with a longer chain showing that the
> proof
> > of burn was orphaned.
> >
> > There are a few options to compress the SPV proof, via Fiat-Shamir
> transform
> > to provide a compact proof of amount work contained in a merkle tree of
> > proofs of work (as proposed by Fabien Coelho link on
> > http://hashcash.org/papers/) with params like 90% of work is proven.
> But
> > better is something Greg proposed based on skip-lists organized in a
> tree,
> > where 'lucky' proofs of work are used to skip back further.  (Recalling
> that
> > if you search for a 64-bit leading-0 proof-of-work, half the time you
> get a
> > 65-bit, quarter 66-bit etc.)  With this mechanism you can accurately
> > prove the amount of proof of work in a compressed tree (rather than
> ~90%).
> >
> >
> > Apart from pegging from bitcoin to a side-chain, if a private chain is
> made
> > with same rules to the side-chain it becomes possible with some
> > modifications to the above algorithm to peg the side-chain to a private
> > chain.  Private chain meaning a chain with the same format but signature
> of
> > single server in place of hashing, and timestamping of the block
> signatures
> > in the mined side chain.  And then reactive security on top of that by
> full
> > nodes/auditors trying to find fraud proofs (rewrites of history relative
> to
> > side-chain mined time-stamp or approved double-spends).  The reaction is
> to
> > publish a fraud proof and move coins back to the side chain, and then
> > regroup on a new server.  (Open transactions has this audit + reactive
> model
> > but as far as I know does it via escrow, eg the voting pools for k of n
> > escrow of the assets on the private server.) I also proposed the same
> > reactive audit model but for auditable namespaces [4].
> >
> > Private chains add some possiblity for higher scaling, while retaining
> > bitcoin security properties.  (You need to add the ability for a user to
> > unilaterally move his coins to the side-chain they came from in event the
> > chain server refuses to process transactions involving them.  This
> appears
> > to be possible if you have compatible formats on the private chain and
> > side-chain).
> >
> >
> > This pegging discussion involved a number of #bitcoin-wizards, Greg
> Maxwell,
> > Matt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr.
> The
> > 2-way peg seems to have first been described by Greg.  Greg thought of
> > 2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2].
> > (As a ZK-SNARK could compactly prove full validation of a side chain
> rules).
> >
> > There was also something seemingly similar sounding but not described in
> > detail by Alex Mizrahi in the context of color coins in this post [3].
> >
> > Adam
> >
> > [1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt
> > [2] https://bitcointalk.org/index.php?topic=277389.40
> > [3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554
> > [4] http://www.cypherspace.org/p2p/auditable-namespace.html
> >
> > On Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:
> >>
> >> Coming back to the staging idea, maybe this is a realistic model that
> >> could
> >> work.  The objective being to provide a way for bitcoin to move to a
> live
> >> beta and stable being worked on in parallel like fedora vs RHEL or
> >> odd/even
> >> linux kernel versions.
> >>
> >> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin
> >> 0.x
> >> stable and leap-frogs as beta becomes stable after testing.
> >>
> >> Its a live beta, meaning real value, real contracts.  But we dont want
> it
> >> to
> >> be an alt-coin with a floating value exactly, we want it to be bitcoin,
> >> but
> >> the bleeding edge bitcoin so we want to respect the 21 million coin
> limit,
> >> and allow coins to move between bitcoin and betacoin with some necessary
> >> security related restrictions.
> >>
> >> There is no mining reward on the betacoin network (can be merge mined
> for
> >> security), and the way you opt to move a bitcoin into the betacoin
> network
> >> is to mark it as transferred in some UTXO recognized way.  It cant be
> >> reanimated, its dead.  (eg spend to a specific recognized invalid
> address
> >> on
> >> the bitcoin network).  In this way its not really a destruction, but a
> >> move,
> >> moving the coin from bitcoin to betacoin network.
> >>
> >> This respects the 21 million coin cap, and avoids betacoin bugs flowing
> >> back
> >> and affecting bitcoin security or value-store properties.  Users may buy
> >> or
> >> swap betacoin for bitcoin to facilitate moving money back from betacoin
> to
> >> bitcoin.  However that is market priced so the bitcoin network is
> security
> >> insulated from beta.  A significant security bug in beta would cause a
> >> market freeze, until it is rectified.
> >>
> >> The cost of a betacoin is capped at one BTC because no one will pay more
> >> than one bitcoin for a betacoin because they could alternatively move
> >> their
> >> own coin.  The reverse is market priced.
> >>
> >> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a
> >> decision is reached to promote 1.0 beta to 2.0 stable, the remaining
> >> bitcoins can be moved, and the old network switched off, with mining
> past
> >> a
> >> flag day moving to the betacoin.
> >>
> >> During the beta period betacoin is NOT an alpha, people can rely on it
> and
> >> use it in anger for real value transactions.  eg if it enables more
> script
> >> features, or coin coloring, scalabity tweaks etc people can use it.
> >> Probably for large value store they are always going to prefer
> >> bitcoin-stable, but applications that need the coloring features, or
> >> advanced scripting etc can go ahead and beta.
> >>
> >> Bitcoin-stable may pull validated changes and merge them, as a way to
> pull
> >> in any features needed in the shorter term and benefit from the betacoin
> >> validation.  (Testing isnt as much validation as real-money at stake
> >> survivability).
> >>
> >> The arguments are I think that:
> >>
> >> - it allows faster development allowing bitcoin to progress features
> >> faster,
> >>
> >> - it avoids mindshare dilution if alternatively an alt-coin with a hit
> >>  missing feature takes off;
> >>
> >> - it concentrates such useful-feature alt activities into one OPEN
> source
> >>  and OPEN control foundation mediated area (rather than suspected land
> >>  grabs on colored fees or such like bitcoin respun as a business model
> >>  things),
> >>
> >> - maybe gets the developers that would've been working on their pet
> >>  alt-coin, or their startup alt-coin to work together putting more
> >>  developers, testers and resources onto something with open control
> (open
> >>  source does not necessarily mean that much) and bitcoin mindshare
> >>  branding, its STILL bitcoin, its just the beta network.
> >>
> >> - it respects the 21 million limit, starting new mining races probably
> >>  dillutes the artificial scarcity semantic
> >>
> >> - while insulating bitcoin from betacoin security defects (I dont mean
> >>  betacoin as a testnet, it should have prudent rigorous testing like
> >>  bitcoin, just the very act of adding a feature creates risk that
> bitcoin
> >>  stable can be hesitant to take).
> >>
> >> Probably the main issue as always is more (trustable) very high caliber
> >> testers and developers.  Maybe if the alt-coin minded startups and
> >> developers donate their time to bitcoin-beta (or bitcoin-stable) for the
> >> bits they are missing, we'll get more hands to work on something of
> >> reusable
> >> value to humanity, in parallel with their startup's objectives and as a
> >> way
> >> for them to get their needed features, while giving back to the bitcoin
> >> community, and helping bitcoin progress faster.
> >>
> >> Maybe bitcoin foundation could ask for BTC donations to hire more
> >> developers
> >> and testers full time.  $1.5b of stored value should be interested to
> safe
> >> guard their value store, and develop the transaction features.
> >>
> >> Adam
> >>
> >> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:
> >>>
> >>>  This is exactly what I was planning to do with the
> >>>  inappropriately-named "Ultimate Blockchain Compression".  [...]
> >>>
> >>>  For it to really work, it's gotta be part of the mainnet validation
> >>>  rules, but no way it can be evaluated realistically without some kind
> of
> >>>  "staging".
> >>
> >>
> >>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:
> >>>
> >>>  I think this is a very interesting idea. As Bitcoiners, we often stuff
> >>>  things into the 'alt chain' bucket in our heads; I wonder if this idea
> >>>  works better as a curing period, essentially an extended version of
> the
> >>>  current 100 block wait for mined coins.
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141031/b00e6945/attachment.html>

