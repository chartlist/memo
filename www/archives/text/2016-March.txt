From greg at xiph.org  Tue Mar  1 00:57:58 2016
From: greg at xiph.org (Gregory Maxwell)
Date: Tue, 1 Mar 2016 00:57:58 +0000
Subject: [bitcoin-dev] Open Bitcoin Privacy Protect Privacy
 Questionnaire, Mid-Year 2015 report
In-Reply-To: <CAGH37SLB2bsSCzC1+u-L6v1bQ305MLvDE2uXHVGCy7y61mE5bQ@mail.gmail.com>
References: <b0813349d690442d6ef3961748d1c9fb@openbitcoinprivacyproject.org>
	<CAGH37SLB2bsSCzC1+u-L6v1bQ305MLvDE2uXHVGCy7y61mE5bQ@mail.gmail.com>
Message-ID: <CAAS2fgREFWneGhzU7-zX++SFtJkRKZNaYNekJRTs7AgfF6mejA@mail.gmail.com>

Better late than never, I should correct things here. In the future it
would probably be more productive to open an issue. Otherwise there is
no mechanism for someone to take ownership of a response.

On Sun, Aug 30, 2015 at 7:45 PM, Kristov Atlas via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>> 1.      Does your application take any steps to create ambiguity between
>> transactions which unavoidably spend from multiple addresses at the same
>> time and intentional mixing transactions?
> No, Bitcoin-Qt does not try to make non-mixing transactions look like mixing
> transactions.
>> 2.      What algorithms does your application use for ordering inputs and
>> outputs in a transaction? In particular, how do you handle the change output
>> and do you take into account common practices of other wallet applications
>> when determining ordering?
>
> Not yet BIP 69. These notes suggest that outputs are randomized:
> https://bitcoin.org/en/release/v0.8.1

The ordering used by Bitcoin-QT is cryptographically randomized. This
provides the greatest privacy possible.

The BIP 69 recommendation would currently be equally as private if
universally used, but today would reduce privacy by making the
software more distinguishable.  It is unclear if BIP69 will be equal
in privacy in the future, because external infrastructure may impose
ordering requirements that are incompatible with it.

>> 3.      Does your application minimize the harmful effects of address
>> reuse by spending every spendable input (?sweeping?) from an address when a
>> transaction is created?
>
> Unknown

>> 4.      Does your application fully implement BIP 62?

BIP 62 is withdrawn. The useful mechanisms in it for standardness
rules are, of course, implemeted in Bitcoin Core-- were invented
there, and have been there for years.

>> Mixing
>>
>> 5.      If your application supports mixing:

It's unclear to me precisely what is meant here. I'll answer broadly.

Bitcoin Core is compatible with and can be used with the joinmarket
module to include coinjoins. The raw transaction functionality in
Bitcoin Core was also created specifically to facilitate coinjoins.
Beyond joinmarket there have been several other coinjoin modules
created for Bitcoin Core though today JM is by far the most common,

This functionality is not directly implemented for a number of reasons
including the non-existence of decenteralized tools for this that
don't harm the user's privacy in other ways.

>> a.      What is the average number of participants a user can expect to
>> interact with on a typical join transaction?
>> b.      Does your application attempt to construct join transactions in a
>> way that avoids distinguishing them from non-join transactions?
>> c.      Does your application perform any kind of reversibility analysis
>> on join transactions prior to presenting them to the user for confirmation?
>> d.      Is the mixing technique employed secure against correlation
>> attacks by the facilitator, such as a CoinJoin server or off-chain mixing
>> service?
>> e.      Is the mixing technique employed secure against theft of funds by
>> the facilitator or its participants?

Skipped as these are specific to the implementation in use.

>> Donations
>> 6.      If your application has a fee or donation to the developers
>> feature:
> No donation feature last time I checked.
>> a.      What steps do you take to make the donations indistinguishable
>> from regular spend in terms of output sizes and destination addresses?

As Kristov noted, Bitcoin Core does not implement anti-features like donations.

>> Balance Queries and Tx Broadcasting
>>
>> 7.      Please describe how your application obtains balance information
>> in terms of how queries from the user?s device can reveal a connection
>> between the addresses in their wallet.
>> a.      Does the application keep a complete copy of the blockchain
>> locally (full node)?
> Yes

Optionally, but in all cases the user's privacy is indistinguishable
from keeping all the data locally.

>> b.      Does the user?s device provide a filter which matches some
>> fraction of the blockchain while providing a false positive rate (bloom or
>> prefix filters)?
> No, it just downloads the whole blockchain and performs local queries.

It would be more correct to say that Bitcoin Core always has the
highest possible FP rate.  It uses the only currently available tool
to avoid leaking private address information to indexing services.  As
several academic studies have shown, bloom filters are completely
inadequate for protecting user privacy.

>> i.      If so, approximately what fraction of the blockchain does the
>> filter match in a default configuration (0% - 100%)?
> 100%, unless a user bootstraps downloading the blockchain. Bootstrapping
> will potentially limit the user's anonymity set to other people who have
> downloaded that bootstrap.dat file.

I user that has downloaded a bootstrap.dat is indistinguishable from
any other user on the network; their transaction anonymity set is not
reduced in any way by doing this.  By running bitcoin at all they are
distinguished from other people who do not, but thousands of hosts run
Bitcoin without even having a wallet.

>> c.      Does the user?s device query all of their addresses at the same
>> time?
> N/A

To be clear: This is N/A because there are no queries that would leak
private information about the user's wallet.

  >> d.      Does the user?s device query addresses individually in a manner
>> that does not allow the query responder to correlate queries for different
>> addresses?
> No. Just download blocks and processes that information locally.

Yes. Because the Bitcoin Core downlaods all information, the third
parties cannot correlate responses.

>> e.      Can users opt to obtain their balance information via Tor (or
>> equivalent means)?
> If Tor is set up as a SOCKS proxy, you can configure Bitcoin-QT download the
> blockchain and broadcast txs through a single Tor circuit. This can be
> configured once before opening Bitcoin-Qt.

Bitcoin Core does make remote queries to obtain "balance information",
but it can be directed to perform all commmunications via tor, before
starting it as noted.

>> 8.      Does the applications route outgoing transactions independently
>> from the manner in which it obtains balance information? Can users opt to
>> have their transactions submitted to the Bitcoin network via Tor (or an
>> equivalent means) independently of how they obtain their balance
>> information?
> No, you can only configure a single proxy.

Bitcoin Core can simultaneously connect to both Tor hidden services
and the public IPv4 network for improved partitioning resistance (and
has been able to for years). Instead of setting the socks proxy, the
user configures onion=<tor proxy>.

As of 0.12 inbound tor HS is also auto-configured by default when tor
is installed.

>> 9.      If your application supports multiple identities/wallets, does
>> each one connect to the network as if it were completely independent from
>> the other?
>
>
> No built-in support for multiple identities. You can hotswap wallet files to
> crudely simulate this. You'd have to manually change the Tor connection
> outside of Bitcoin-Qt to create the effect of making the network connections
> independent.

All network connections are independent via Tor by default, no manual
change is required there. Separate "identities" do require separate
wallets, as noted.

>> a.      Does the application ever request balance information for
>> addresses belonging to multiple identities in the same network query?

No it does not and cannot. Freedom from this kind of leak is one of
the benefits of the current design that doesn't allow intermixing
"identities" in wallets.

> Blocks are downloaded and tx broadcasts received/relayed rather than
> querying the utxo set for a particular address. When swapping between wallet
> files, some information may be leaked e.g. the client may be at the same
> block height in terms of what it has downloaded from the p2p network, which
> may leak to global passive adversaries/AS's or sybil attackers the fact that
> a single client was used for multiple wallets.

However, unlikely most other wallets, Bitcoin nodes forward
transactions for third parties and do not make external queries for
private information. Because of this the ability to correlate a
particular node connection multiple times does not necessarily leak
anything about wallet usage.

>> b.      Are outgoing transactions from multiple identities routed
>> independently of each other to the Bitcoin network?
>
> Transactions from multiple identities would not be routed at the same time.
> I'm not clear what happens if you have a single wallet (identity) open and
> then open a new wallet (identity) without closing Bitcoin-Qt -- some of the
> same routing paths may still be used such that an attacker might observe
> transactions broadast signed by private keys from multiple wallets
> (identities) and observe that they appear to come from the same wallet
> client. OBPP should assume the worst unless prevented contrary evidence.

This assumption is incorrect. All the private wallet state is stored
in the wallet. If the wallet is changed the node does know any of them
anymore.  There is no ability to open a new wallet without restarting
the software.

That said, Bitcoin Core normally relays transactions for third
parties-- unlikely virtually all other wallets. This means that where
observation of a transaction from another wallet would give a nearly
guaranteed identification that the system on the other end of the link
is the source, with Bitcoin Core sending a transaction is merely
potentially suggestive of origination.

>> c.      When an identity/wallet is deleted, does the deletion process
>> eliminate all evidence from the user's device that the wallet was previously
>> installed?
> Identity is primarily tied to a wallet.dat file. Deleting it will remove
> most of the evidence that the wallet was installed on that device, but there
> may be some extra information in ancillary files that should also be
> deleted.  This is an OS-level function, as there is no operation built into
> the client to delete a wallet file (identity).

After review and testing we've determined that reliable deletion of
private data is not very feasible on current hardware/OSes. Techniques
which used to work, like overwriting are defeated by write balancing.
We recommend users use OS level encryption to protect their privacy
locally.

>>         Network Privacy
>> 10.     When a user performs a backup operation for their wallet, does
>> this generate any automatic network activity, such as a web query or email?
> No. Backups are local, and no email or SMS is linked. No web queries related
> to backup.

Right.

>> 11.     Does your application perform any lookup external to the user?s
>> device related to identifying transaction senders or recipients?
> No

Not for normal transactions. Bitcoin Core currently supports payment
URIs and BIP70, and if a user follows a payment URI it may instruct
the user to make a connection to a location requested by the payee.

>> 12.     Does you application connect to known endpoints which would be
>> visible to an ISP, such as your domain?
> Yes, some connections to known p2p full nodes to bootstrap the connection to
> the Bitcoin p2p network. This is configurable, but there are defaults. An
> ISP is likely to be able to identify a customer as running the Bitcoin-Qt
> client in particular on this basis.

Kind of.  If a Bitcoin Core node already knows of peers through prior
operation and is able to get at least two network connections within
11 seconds, it will make no further queries.

If a node is completely new and hasn't been otherwise configured; it
will perform four DNS queries to determine lists of candidate nodes.
These queries are frequently answered by caching name servers and do
not go all the way back to their origins. Only if both of these step
fail does it consult a hardcoded list of several hundred nodes to
attempt initialization.

That said, Bitcoin traffic is easily identifiable regardless of how
peers are found. We recommend users run Tor, and if tor is used no
identifiable traffic should happen, except for timing/volume analysis.
And many parties run Bitcoin Core nodes without running wallets; so
the use of Bitcoin does not identify a user as even having a wallet at
all.

>> 13.     If your application connects directly to nodes in the Bitcoin P2P
>> network, does it either use an unremarkable user agent string (Bitcoin Core.
>> BitcoinJ, etc), or randomize its user agent on each connection?
>
>
> BIP12 specifies format for user agents:
> https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki
>
> It appears that the Bitcoin-QT leaks specific information about its client
> version through User Agent. This file defines the current client version:
> https://github.com/bitcoin/bitcoin/blob/55294a9fb673ab0a7c99b9c18279fe12a5a07890/src/clientversion.h
>
> Various other files seem to use this to build up the UA string, which is
> transmitted to other peers.

Bitcoin Core is this questions _definition_ of an unremarkable useragent.

But yes, the useragent notes the major/minor version. Concealing this
would have little to no privacy advantage, as functional/behavioral
analysis would easily reveal the version with at least that level of
precision.

>> 14.     Does the application uninstall process for your application
>> eliminate all evidence from the user's device that the application was
>> previously installed? Does it also eliminate wallet data?
> Probably depends on the platform. Last time I checked, I think Bitcoin-Qt
> leaves behind a .bitcoin directory on most platforms even after you run an
> uninstall script.

If uninstall deleted the wallet it would reliably result in massive
funds loss for users.

To conceal their user of Bitcoin users should at a minimum do a
security erase of their system.

Other wallets who claim to "delete" private information which was
previously stored on disk are likely giving their users a false sense
of security. Doubly so in that many other wallets are written in
dynamic lanaguages which make it impossible to prevent highly secret
data from being written to system swap.

>> 15.     Does your application use techniques such as steganography to
>> store persistent wallet metadata in a form not identifiable as belong to a
>> Bitcoin wallet application?
> No

I believe any software which claimed to do this would have to meet a
rather high burden of proof.

>> 16.     Please describe the degree to which users can use passwords/PINs
>> to protect their data:
>> a.      Can the user set a password/PIN to protect their private keys?
> You can encrypt the wallet file with a password. The wallet is "locked"
> until the password is entered, preventing decryption of the private keys.

Correct. And unlike some other Wallets the KDF used to harden the
users key takes 100ms with efficient native code; this substantially
limits attacker brute for performance.

>> b.      Can the user set a password/PIN to protect their public keys and
>> balance information?
> No -- any wallet.dat file can be opened and the public keys inspected
> without the password.
>> c.      Can the user set a password/PIN to encrypt other wallet metadata,
>> such as address books and transaction notes?
> No -- any wallet.dat file can be opened and the metadata inspected without
> the password.

We recommend users use full disk encryption. Encrypting the public
data in the wallet would require the wallet to enter their key at
every use and increase the probability that their key was leaked (or
if two keys were used, that they'd forget their spending key).

Even if the public key information were encrypted, other data on their
computer (browser cache, swap, logs) would likely compromise the
user's privacy, thus the full disk encryption recommendation. Full
disk encryption is a common, easily used tool; and I don't believe any
wallet software that stores data locally can provide strong privacy in
practice without it.

>> d.      Does the application use a single password/PIN to cover all
>> protected data, or does it allow the use of multiple passwords/PINs?
> A single password for the wallet file.

Right. Each wallet file can have it's own single password which
protect spending.

>> 17.     Do you as a wallet provider ever have access to unencrypted copies
>> of the user?s private keys, public keys, or any other wallet metadata which
>> may be used to associate a user with their transactions or balances?
> No custodianship.

Right.

>>        Telemetry Data
>> 18.     If your application reports telemetry data, such as usage
>> information or automatic crash reporting, does the user have the opportunity
>> to review and approve all information transmitted before it is sent?
> No obvious telemetry data being sent.

No telemetry data.

>>         Source Code and Building
>> 19.     Can a user of your application compile the application themselves
>> in a manner that produces a binary version identical to the version you
>> distribute (deterministic build system)?

Yes, and a large portion of our user base does their own builds. Our
determinstic build process is also actively audited by a good dozen
parties who post cryptographic signatures of their duplicated builds.

From laanwj at gmail.com  Tue Mar  1 09:46:25 2016
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Tue, 1 Mar 2016 10:46:25 +0100
Subject: [bitcoin-dev] IRC meetings moved to #bitcoin-core-dev
Message-ID: <20160301094624.GC25836@amethyst.visucore.com>


It seems that MeetingBot was deactivated in #bitcoin-dev, so the
last two weeks the weekly developer meeting (Thursday 19:00-20:00 UTC)
was held in #bitcoin-core-dev.

Let's keep it at that.

Wladimir


From morcos at gmail.com  Tue Mar  1 14:34:13 2016
From: morcos at gmail.com (Alex Morcos)
Date: Tue, 1 Mar 2016 09:34:13 -0500
Subject: [bitcoin-dev] Soft fork for BIPs 68, 112, and 113
Message-ID: <CAPWm=eWYGsD78wuCeg9RBiPQg2B8XzS-om85bEcJyL2A1Kfb-w@mail.gmail.com>

Bitcoin Core is ready to move towards deployment of a soft fork which will
implement BIP's 68, 112, and 113.

BIP 68 - Relative lock-time using consensus-enforced sequence numbers -
https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki
BIP 112 - CHECKSEQUENCEVERIFY -
https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki
BIP 113 - Median time-past as endpoint for lock-time calculations -
https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki

BIP 113 logic was introduced in the 0.11.2 release as a standardness rule
and BIP 68 and BIP 112 logic has been merged into master*.
What remains to be done is finish testing, merge the logic to activate the
soft forks and backport the code to supported releases.

The exact rollout mechanism is still being finalized but will be
coordinated with the community.

This email is meant to serve as a readiness announcement and confirm that
there are no outstanding concerns.

Thanks,
Alex


* -  BIP 68 and BIP 112 logic is only enforced when the tx version is >= 2
which will only become standard with the release of the soft fork code.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/f118cd50/attachment.html>

From luke at dashjr.org  Tue Mar  1 17:12:34 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 1 Mar 2016 17:12:34 +0000
Subject: [bitcoin-dev] Bitcoin Knots 0.12.0.knots20160226 release candidate
	1 available
Message-ID: <201603011712.35416.luke@dashjr.org>

Binaries for Bitcoin Knots version 0.12.0.knots20160226.rc1 are available from:

    https://bitcoinknots.org/files/0.12.x/0.12.0.knots20160226/test/rc1/

Source code can be found on GitHub under the signed tag:

    https://github.com/bitcoinknots/bitcoin/tree/v0.12.0.knots20160226.rc1

This is a release candidate for a new major version release, bringing new
features, bug fixes, as well as other improvements.

Preliminary release notes for the release can be found here:

    https://github.com/bitcoinknots/bitcoin/blob/0.12.x-knots/doc/release-notes.md

Release candidates are test versions for releases. When no critical problems
are found, this release candidate will be tagged as final.

Please report bugs using the issue tracker at GitHub:

    https://github.com/bitcoinknots/bitcoin/issues

Additional Gitian signatures are welcome. Please submit via GitHub pull
request to:

    https://github.com/bitcoinknots/gitian.sigs

From justin at netki.com  Tue Mar  1 18:58:16 2016
From: justin at netki.com (Justin Newton)
Date: Tue, 1 Mar 2016 13:58:16 -0500
Subject: [bitcoin-dev] Proposed BIP extension to BIP 0070
Message-ID: <CABqynx+gGnJ2AVByr1eKueSaohHtJVFsAVKrfS94StW2NzLWjw@mail.gmail.com>

The following draft BIP proposes an update to the Payment Protocol.

Motivation:

The motivation for defining this extension to the BIP70 Payment Protocol is
to allow 2 parties to exchange payment information in a permissioned and
encrypted way such that wallet address communication can become a more
automated process. Additionally, this extension allows for the requestor of
a PaymentRequest to supply a certificate and signature in order to
facilitate identification for address release. This also allows
for automated creation of off blockchain transaction logs that are human
readable, containing who you transacted with, in addition to the
information that it contains today.

The motivation for this extension to BIP70 is threefold:

1. Ensure that the payment details can only be seen by the participants in
the transaction, and not by any third party.
2. Enhance the Payment Protocol to allow for store and forward servers in
order to allow, for example, mobile wallets to sign and serve
Payment Requests.
3. Allow a sender of funds the option of sharing their identity with the
receiver. This information could then be used to:

        * Make bitcoin logs more human readable
        * Give the user the ability to decide who to release payment
details to
        * Allow an entity such as a political campaign to ensure donors
match regulatory and legal requirements
        * Allow for an open standards based way for regulated financial
entities to meet regulatory requirements
        * Automate the active exchange of payment addresses, so static
addresses and BIP32 X-Pubs can be avoided to maintain privacy
and convenience

In short we wanted to make bitcoin more human, while at the same time
improving transaction privacy.

Full proposal here:

https://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension.mediawiki

We look forward to your thoughts and feedback on this proposal!

Justin


-- 

Justin W. Newton
Founder/CEO
Netki, Inc.

justin at netki.com
+1.818.261.4248
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/d4767625/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PastedGraphic-1.tiff
Type: image/tiff
Size: 10972 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/d4767625/attachment-0001.tiff>

From el33th4x0r at gmail.com  Wed Mar  2 00:57:43 2016
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Tue, 1 Mar 2016 19:57:43 -0500
Subject: [bitcoin-dev] Bitcoin Guarantees Strong, not Eventual, Consistency.
Message-ID: <CAPkFh0tx6BJ2=pCamtawa=niPfci7-a6Vs-wFo3rXXx6oks0Jg@mail.gmail.com>

There seems to be a perception out there that Bitcoin is eventually
consistent. I wrote this post to describe why this perception is completely
false.

Bitcoin Guarantees Strong, not Eventual, Consistency
http://hackingdistributed.com/2016/03/01/bitcoin-guarantees-strong-not-eventual-consistency/

I hope we can lay this bad meme to rest. Bitcoin provides a strong
guarantee.
- egs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160301/939e3925/attachment.html>

From luke at dashjr.org  Wed Mar  2 14:56:14 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 2 Mar 2016 14:56:14 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
Message-ID: <201603021456.15820.luke@dashjr.org>

We are coming up on the subsidy halving this July, and there have been some 
concerns raised that a non-trivial number of miners could potentially drop off 
the network. This would result in a significantly longer block interval, which 
also means a higher per-block transaction volume, which could cause the block 
size limit to legitimately be hit much sooner than expected. Furthermore, due 
to difficulty adjustment being measured exclusively in blocks, the time until 
it adjusts to compensate would be prolonged.

For example, if 50% of miners dropped off the network, blocks would be every 
20 minutes on average and contain double the transactions they presently do. 
Even double would be approximately 850-900k, which potentially bumps up 
against the hard limit when empty blocks are taken into consideration. This 
situation would continue for a full month if no changes are made. If more 
miners drop off the network, most of this becomes linearly worse, but due to 
hitting the block size limit, the backlog would grow indefinitely until the 
adjustment occurs.

To alleviate this risk, it seems reasonable to propose a hardfork to the 
difficulty adjustment algorithm so it can adapt quicker to such a significant 
drop in mining rate. BtcDrak tells me he has well-tested code for this in his 
altcoin, which has seen some roller-coaster hashrates, so it may even be 
possible to have such a proposal ready in time to be deployed alongside SegWit 
to take effect in time for the upcoming subsidy halving. If this slips, I 
think it may be reasonable to push for at least code-readiness before July, 
and possibly roll it into any other hardfork proposed before or around that 
time.

I am unaware of any reason this would be controversial, so if anyone has a 
problem with such a change, please speak up sooner rather than later. Other 
ideas or concerns are of course welcome as well.

Thanks,

Luke

From natanael.l at gmail.com  Wed Mar  2 08:39:07 2016
From: natanael.l at gmail.com (Natanael)
Date: Wed, 2 Mar 2016 09:39:07 +0100
Subject: [bitcoin-dev] Bitcoin Guarantees Strong, not Eventual,
	Consistency.
In-Reply-To: <CAPkFh0tx6BJ2=pCamtawa=niPfci7-a6Vs-wFo3rXXx6oks0Jg@mail.gmail.com>
References: <CAPkFh0tx6BJ2=pCamtawa=niPfci7-a6Vs-wFo3rXXx6oks0Jg@mail.gmail.com>
Message-ID: <CAAt2M197OWV1euFX5x+9A0K=0tTMamrTbXS=2KWX=ZKyPMyXAQ@mail.gmail.com>

To say that Bitcoin is strongly consistent is to say that the memory pool
and the last X blocks aren't part of Bitcoin. If you want to avoid making
that claim, you can at best argue that Bitcoin has both a strongly
consistent component AND an eventually consistent component.

The entire point of the definition of eventually consistency is that your
computer system is running continously and DO NOT have a final state, and
therefore you must be able to describe the behavior when your system either
may give responses to queries across time that are either perfectly
consistent *or not* perfectly consistent.

And Bitcoin by default *does not* ignore the contents of the last X blocks.
A Bitcoin node being queried about the current blockchain state WILL give
inconsistent answers when there's block rearrangements = no strong
consistency. Not to mention that your definition ignores the nonzero
probability of a block rearrangement extending beyond your constant omega.

Bitcoin provides a probabilistic, accumulative probability. Not a perfect
one.
Den 2 mar 2016 04:04 skrev "Emin G?n Sirer" <
bitcoin-dev at lists.linuxfoundation.org>:

>
> There seems to be a perception out there that Bitcoin is eventually
> consistent. I wrote this post to describe why this perception is completely
> false.
>
> Bitcoin Guarantees Strong, not Eventual, Consistency
>
> http://hackingdistributed.com/2016/03/01/bitcoin-guarantees-strong-not-eventual-consistency/
>
> I hope we can lay this bad meme to rest. Bitcoin provides a strong
> guarantee.
> - egs
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/2d24eda8/attachment.html>

From Pavel at Janik.cz  Wed Mar  2 15:05:08 2016
From: Pavel at Janik.cz (=?utf-8?Q?Pavel_Jan=C3=ADk?=)
Date: Wed, 2 Mar 2016 16:05:08 +0100
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021456.15820.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
Message-ID: <B9C659DC-1954-45C2-B3E6-552A17CDD655@Janik.cz>

> the network. This would result in a significantly longer block interval, which 
> also means a higher per-block transaction volume, which could cause the block 
> size limit to legitimately be hit much sooner than expected.

If this happens at all (the exchange rate of the coin can accomodate such expectation), the local fee market will develop, fees will raise and complement mined coins, thus bringing more miners back to the game (together with expected higher exchange rate).
--  
Pavel Jan?k





From luke at dashjr.org  Wed Mar  2 15:14:35 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 2 Mar 2016 15:14:35 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <B9C659DC-1954-45C2-B3E6-552A17CDD655@Janik.cz>
References: <201603021456.15820.luke@dashjr.org>
	<B9C659DC-1954-45C2-B3E6-552A17CDD655@Janik.cz>
Message-ID: <201603021514.36769.luke@dashjr.org>

On Wednesday, March 02, 2016 3:05:08 PM Pavel Jan?k wrote:
> > the network. This would result in a significantly longer block interval,
> > which also means a higher per-block transaction volume, which could
> > cause the block size limit to legitimately be hit much sooner than
> > expected.
> 
> If this happens at all (the exchange rate of the coin can accomodate such
> expectation),

The exchange rate is not significantly influenced by these things. 
Historically, it seems fairly obvious that the difficulty has followed value, 
not value following difficulty.

> the local fee market will develop, fees will raise and complement mined
> coins, thus bringing more miners back to the game (together with expected
> higher exchange rate).

Depends on the hashrate drop, and tolerance for higher fees, both of which are 
largely unknown at this time. At least having code prepared for the negative 
scenarios in case of an emergency seems reasonable, even if we don't end up 
needing to deploy it.

Luke

From jeremie.dl at gmail.com  Wed Mar  2 15:24:31 2016
From: jeremie.dl at gmail.com (=?UTF-8?B?SsOpcsOpbWllIER1Ym9pcy1MYWNvc3Rl?=)
Date: Wed, 2 Mar 2016 16:24:31 +0100
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021514.36769.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
	<B9C659DC-1954-45C2-B3E6-552A17CDD655@Janik.cz>
	<201603021514.36769.luke@dashjr.org>
Message-ID: <CAJqsvLAZR9CmQ0=2heCFaF6Nb=91iQ+kUKtoq3eQ-gn_mVYpBw@mail.gmail.com>

> BtcDrak tells me he has well-tested code for this in his altcoin
Could you be more explicit, which altcoin is that?

> I am unaware of any reason this would be controversial
Probably not until you get to the details of any proposal. What is
your exact proposal here? Algorithm? Parameters?
As you likely know a too short time window would be dangerous for
other reasons. Getting to an agreement as to what is reasonable or not
is not necessarily trivial.

Jeremie


2016-03-02 16:14 GMT+01:00 Luke Dashjr via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org>:
> On Wednesday, March 02, 2016 3:05:08 PM Pavel Jan?k wrote:
>> > the network. This would result in a significantly longer block interval,
>> > which also means a higher per-block transaction volume, which could
>> > cause the block size limit to legitimately be hit much sooner than
>> > expected.
>>
>> If this happens at all (the exchange rate of the coin can accomodate such
>> expectation),
>
> The exchange rate is not significantly influenced by these things.
> Historically, it seems fairly obvious that the difficulty has followed value,
> not value following difficulty.
>
>> the local fee market will develop, fees will raise and complement mined
>> coins, thus bringing more miners back to the game (together with expected
>> higher exchange rate).
>
> Depends on the hashrate drop, and tolerance for higher fees, both of which are
> largely unknown at this time. At least having code prepared for the negative
> scenarios in case of an emergency seems reasonable, even if we don't end up
> needing to deploy it.
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From luke at dashjr.org  Wed Mar  2 15:42:28 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 2 Mar 2016 15:42:28 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021456.15820.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
Message-ID: <201603021542.29609.luke@dashjr.org>

On Wednesday, March 02, 2016 2:56:14 PM Luke Dashjr via bitcoin-dev wrote:
> so it may even be possible to have such a proposal ready in time to be
> deployed alongside SegWit  to take effect in time for the upcoming subsidy
> halving.

Lapse of thinking/clarity here. This probably isn't a practical timeframe for 
deployment, unless/until there's an emergency situation. So if the code were 
bundled with SegWit, it would need some way to avoid its early activation 
outside of such an emergency (which could possibly be detected in code, in 
this case).

Luke

From tier.nolan at gmail.com  Wed Mar  2 15:54:15 2016
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 2 Mar 2016 15:54:15 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <CAE-z3OUR8So2EM_EBeEerW-UPs0KY+whVB=jjFAHkW3xZPF2Hw@mail.gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<B9C659DC-1954-45C2-B3E6-552A17CDD655@Janik.cz>
	<201603021514.36769.luke@dashjr.org>
	<CAE-z3OUR8So2EM_EBeEerW-UPs0KY+whVB=jjFAHkW3xZPF2Hw@mail.gmail.com>
Message-ID: <CAE-z3OXjt4E9a2iMCd51=9F6v0iG0NE5JSkOvKqkeQzWewG7pg@mail.gmail.com>

If a hard-fork is being considered, the easiest is to just step the
difficulty down by a factor of 2 when the adjustment happens.

This means that miners still get paid the same minting fee per hash as
before.  There isn't that much risk.  If the hashing power stays constant,
then there will be 5 minute blocks for a while until everything readjusts.

Nearly the same can be accomplished by a soft fork.

Proposal:

If 900 of the last 1000 blocks are block version X or above, then the
smooth change rule applies.

The adjustment is as follows

big_number get_new_target(int height, big_number old_target) {
    if (height < 405000)
        return old_target;
    else if (height < 420000)
        return (old_target * 15000) / (height - 390000);
    else
        return old_target;
}

What this does is ramp up the difficulty slowly from 405,000 to 420,000.
It ends up with a target that is 50% of the value stored in target bits.
These blocks are valid since they have twice as much POW as normally
required.

For block 420000, the difficulty drops by 2 and the reward drops by 2 at
the same time.  This means that miners still get paid the same BTC per
hash.  It would mean 5 minute blocks until the next adjustment though.

If 90% of the network are mining the artificially hard blocks, then a  10%
fork still loses.  The 90% has an effective hash rate of 45% vs the 10%.

It is unlikely that miners would accept the fork, since they lose minting
fees.  It effectively brings the subsidy reduction forward in time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/4394958d/attachment-0001.html>

From dave at hashingit.com  Wed Mar  2 15:48:21 2016
From: dave at hashingit.com (Dave Hudson)
Date: Wed, 2 Mar 2016 15:48:21 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021456.15820.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
Message-ID: <5E6E8EFD-2BC0-47F6-8005-5A63821C4276@hashingit.com>

I think the biggest question here would be how would the difficulty retargeting be changed?  Without seeing the algorithm proposal it's difficult to assess the impact that it would have, but my intuition is that this is likely to be problematic.

Probabilistically the network sees surprisingly frequent swings of +/-20% in terms of the block finding rate on any given day, while the statistical noise over a 2016 block period can be more than +/-5%.  Any change would still have to require a fairly significant period of time before there would be a reasonable level of confidence that the hash rate really had fallen as opposed to just seeing statistical noise (http://hashingit.com/analysis/29-lies-damned-lies-and-bitcoin-difficulties and http://hashingit.com/analysis/28-reach-for-the-ear-defenders).

How long would be required to deem that the hash rate had dramatically fallen?  Would such a change be a one-time event or would it be ever-present?

If we were to say that if the hash rate dropped 50% in one day (which could, of course be a 30% real drop and 20% variance) and the difficulty was retargeted to 50% lower then that would have to be matched with a similar rapid retarget if it were to increase by a similar amount.  Failing to do this both ways this would introduce an economic incentive for large miners to suppress the difficulty and gain dramatically larger numbers of block rewards.  The current fixed block count per difficulty change prevents this because the daily losses while suppressing hashing outweigh the potential gains when it's re-added.


Cheers,
Dave


> On 2 Mar 2016, at 14:56, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> We are coming up on the subsidy halving this July, and there have been some 
> concerns raised that a non-trivial number of miners could potentially drop off 
> the network. This would result in a significantly longer block interval, which 
> also means a higher per-block transaction volume, which could cause the block 
> size limit to legitimately be hit much sooner than expected. Furthermore, due 
> to difficulty adjustment being measured exclusively in blocks, the time until 
> it adjusts to compensate would be prolonged.
> 
> For example, if 50% of miners dropped off the network, blocks would be every 
> 20 minutes on average and contain double the transactions they presently do. 
> Even double would be approximately 850-900k, which potentially bumps up 
> against the hard limit when empty blocks are taken into consideration. This 
> situation would continue for a full month if no changes are made. If more 
> miners drop off the network, most of this becomes linearly worse, but due to 
> hitting the block size limit, the backlog would grow indefinitely until the 
> adjustment occurs.
> 
> To alleviate this risk, it seems reasonable to propose a hardfork to the 
> difficulty adjustment algorithm so it can adapt quicker to such a significant 
> drop in mining rate. BtcDrak tells me he has well-tested code for this in his 
> altcoin, which has seen some roller-coaster hashrates, so it may even be 
> possible to have such a proposal ready in time to be deployed alongside SegWit 
> to take effect in time for the upcoming subsidy halving. If this slips, I 
> think it may be reasonable to push for at least code-readiness before July, 
> and possibly roll it into any other hardfork proposed before or around that 
> time.
> 
> I am unaware of any reason this would be controversial, so if anyone has a 
> problem with such a change, please speak up sooner rather than later. Other 
> ideas or concerns are of course welcome as well.
> 
> Thanks,
> 
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From kanzure at gmail.com  Wed Mar  2 16:17:31 2016
From: kanzure at gmail.com (Bryan Bishop)
Date: Wed, 2 Mar 2016 10:17:31 -0600
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021456.15820.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
Message-ID: <CABaSBazpdSMJLf-pbiZ45HJycKVcGG2iqs98E5BeJyqPGZfpTg@mail.gmail.com>

On Wed, Mar 2, 2016 at 8:56 AM, Luke Dashjr wrote:

> We are coming up on the subsidy halving this July, and there have been some
>

Luke,

One reason "hard-fork to fix difficulty drop algorithm" could be
controversial is that the proposal involves a hard-fork (perhaps
necessarily so, at my first and second glance). There are a number of
concerns with hard-forks including security, deployment, participation,
readiness measurement, backwards incompatibility, etc. In fact, some
Bitcoin Core developers believe that hard-forks are not a good idea and
should not be used.

# Hard-forks

An interesting (unspoken?) idea I?ve heard from a few people has been ?we
should try to avoid all hard-forks because they are backwards
incompatible?, another thought has been "there should only be one more
hard-fork if any" and/or "there should only be one hard-fork every 30
years". I also recognize feedback from others who have mentioned "probably
unrealistic to expect that the consensus layer can be solidified this early
in Bitcoin's history". At the same time there are concerns about ?slippery
slopes?....

Also, if you are going to participate in a hard-fork then I think you
should make up some proposals for ensure minimal monetary loss on the old
(non-hard-forked) chain, especially since your proposed timeline is so
short seems reasonable to expect even more safety-related due diligence to
minimize money loss (such as using a new address prefix on the hard-forked
upgrade). Anyway, it should be clear that hard-forks are an unsettled issue
and are controversial in ways that I believe you are already aware about.

# Have miners gradually reduce their hashrate instead of using a step
function cliff

adam3us recently proposed that miners who are thinking of turning off
equipment should consider gradually ramping down their hashrate, as a show
of goodwill (and substantial loss to themselves, similar to how they would
incur losses from no longer mining after the halving). This is not
something the consensus algorithm can enforce at the moment, and this
suggestion does not help under adversarial conditions. Since this
suggestion does not require a hard-fork, perhaps some effort should be made
to query miners and figure out if they need assistance with implementing
this (if they happen to be interested).

# Contingency planning

Having said all of the negative things above about hard-forks, I will add
that I do actually like the idea of having backup plans available and
tested and gitian-built many weeks ahead of expected network event dates.
Unfortunately this might encourage partial consensus layer hard-forks in
times of extreme uncertainty such as "emergencies".... creating an even
further emergency.

# "Indefinite backlog growth"

You write "the backlog would grow indefinitely until the adjustment
occurs". This seems to be expected behavior regardless of difficulty
adjustment (in fact, a backlog could continue to grow even once difficulty
adjusts downward), and the consensus protocol does not commit to
information regarding that backlog anyway...

# Difficulty adjustment taking time is expected

This is an expected part of the protocol, it's been mentioned since
forever, it's well known and accounted for. Instead, we should be providing
advice to users about which alternative payment systems they should be
using if they expect instantaneous transaction confirmations. This has been
a long-standing issue, and rolling out a hard-fork is not going to fix
mistaken assumptions from users. They will still think that confirmations
were meant to be instantaneous regardless of how many hard-forks you choose
to deploy.

- Bryan
http://heybryan.org/
1 512 203 0507
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/aefad2cc/attachment.html>

From el33th4x0r at gmail.com  Wed Mar  2 16:56:28 2016
From: el33th4x0r at gmail.com (=?UTF-8?Q?Emin_G=C3=BCn_Sirer?=)
Date: Wed, 2 Mar 2016 11:56:28 -0500
Subject: [bitcoin-dev] Bitcoin Guarantees Strong, not Eventual,
	Consistency.
In-Reply-To: <CAAt2M197OWV1euFX5x+9A0K=0tTMamrTbXS=2KWX=ZKyPMyXAQ@mail.gmail.com>
References: <CAPkFh0tx6BJ2=pCamtawa=niPfci7-a6Vs-wFo3rXXx6oks0Jg@mail.gmail.com>
	<CAAt2M197OWV1euFX5x+9A0K=0tTMamrTbXS=2KWX=ZKyPMyXAQ@mail.gmail.com>
Message-ID: <CAPkFh0vbKv3vJBz2=M92u3cx9bQdCFR3dkP=8=o7tPAq+w5Dyg@mail.gmail.com>

> The entire point of the definition of eventually consistency is that your
> computer system is running continously and DO NOT have a final state, and
> therefore you must be able to describe the behavior when your system either
> may give responses to queries across time that are either perfectly
> consistent *or not* perfectly consistent.
>
This is not the definition of eventual consistency. From
https://en.wikipedia.org/wiki/Eventual_consistency:
Eventual consistency is a consistency model used in distributed computing
to achieve high availability that informally guarantees that, if no new
updates are made to a given data item, eventually all accesses to that item
will return the last updated value.

The actual definition makes it quite clear that a system need not have a
final state to be evaluated for its consistency properties. Almost all
practical database systems execute continuously without a final state.

> And Bitcoin by default *does not* ignore the contents of the last X
> blocks. A Bitcoin node being queried about the current blockchain state
> WILL give inconsistent answers when there's block rearrangements = no
> strong consistency.


One could split hairs here by pedantically defining "Bitcoin by default" --
you could refer to just the reference client code and ignore the shim code
in the app that interfaces with the client -- but that'd drag us into a
fruitless email-list-style discussion from which no one would emerge any
wiser. I'll avoid that, and will instead dryly note that the reference
client's listreceivedbyaddress will return the number of confirmations by
default, and every application will then check the confirmations value to
confirm that it exceeds that application's own omega, while
getbalance,getreceivedbyaddress will take a number of confirmations as an
argument, shielding the app from reorgs of the suffix. That is precisely
the point made in the post.

> Not to mention that your definition ignores the nonzero probability of a
> block rearrangement extending beyond your constant omega.
>
The post covers this case. Technically, there is a difference between 0
probability and epsilon probability -- this is the reason why Nakamoto
Consensus was an exciting breakthrough result; the same reason why
Lamport's results regarding a 3f+1 bound on the Byzantine Generals Problem
do not apply to Nakamoto Consensus; and the same reason it took our paper
(Majority is Not Enough) to show that Nakamoto consensus has a similar 33%
bound as Lamport-style consensus when it comes to tolerating Byzantine
actors.

Practically, however, there is little difference between 0 and a value that
exponentially approximates 0, given that we operate on hardware subject to
random errors. The post makes the case that one can pick an omega such that
the probability of your processor mis-executing your code is larger than
the probability of observing a reorganization.

Bitcoin provides a probabilistic, accumulative probability. Not a perfect
> one.
>
Sometimes, non-technical people get confused about the difference between
very very very small probabilities that approximate 0 and 0. For instance,
some people get very worried about hash collisions, on which Bitcoin relies
for its correctness, whose probability also drops exponentially but is not
exactly 0. Your overall point seems to be an analogous concern that
Bitcoin's exponentially dropping probability of reorganization isn't quite
a "perfect" 0. If so, I agree and the original post made this quite clear.
Though I hope we can avoid that kind of discussion on this particular list.

- egs
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/30a4a945/attachment-0001.html>

From dave at dtrt.org  Wed Mar  2 17:14:28 2016
From: dave at dtrt.org (David A. Harding)
Date: Wed, 2 Mar 2016 12:14:28 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021456.15820.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
Message-ID: <20160302171418.GA5312@localhost.localdomain>

On Wed, Mar 02, 2016 at 02:56:14PM +0000, Luke Dashjr via bitcoin-dev wrote:
> To alleviate this risk, it seems reasonable to propose a hardfork to the 
> difficulty adjustment algorithm so it can adapt quicker to such a significant 
> drop in mining rate.

Having a well-reviewed hard fork patch for rapid difficulty adjustment
would seem to be a useful reserve for all sorts of possible problems.
That said, couldn't this specific potential situation be dealt with by a
relatively simple soft fork?

Let's say that, starting soon, miners require that valid block header
hashes be X% below the target value indicated by nBits. The X% changes
with each block, starting at 0% and increasing to 50% just before block
420,000 (the halving). This means the before the halving, every two
hashes are being treated as one hash, on average.

For blocks 420,000 and higher the code is disabled, immediately doubling
the effective hash rate at the same time the subsidy is halved,
potentially roughly canceling each other out to make a pre-halving hash
equal in economic value to a post-halving hash.

Of course, some (perhaps many) miners will not be profitable at the
post-halving subsidy level, so the steady increase in X% will force them
off the network at some point before the halving, hopefully in small
numbers rather than all at once like the halving would be expected to do.

For example, if the soft fork begins enforcement at block 410,000, then
X% can be increased 0.01% per block. Alice is a miner whose costs are
24BTC per block and she never claims tx fees for some reason, so her
profits now are always 25BTC per block. During the first difficulty
period after the soft fork is deployed, the cost to produce a hash will
increase like this,

    0: 0%           500: 5%         1000: 10%       1500: 15%       2000: 20%
    100: 1%         600: 6%         1100: 11%       1600: 16%
    200: 2%         700: 7%         1200: 12%       1700: 17%
    300: 3%         800: 8%         1300: 13%       1800: 18%
    400: 4%         900: 9%         1400: 14%       1900: 19%

Somewhere around block 417, Alice will need to drop out because her
costs are now above 25BTC per block.  With the loss of her hash rate,
the average interblock time will increase and the capacity will decrease
(all other things being equal). However, Bob whose costs are 20BTC per
block can keep mining through the period.

At the retarget, the difficulty will go down (the target goes up) to
account for the loss of Alice's hashes. It may even go down enough
that Alice can mine profitably for a few more blocks early in the new
period, but the increasing X% factor will make her uneconomical again,
and this time it might even make Bob uneconomical too near the end of
the period. However, Charlie whose costs are 12BTC per block will
never be uneconomical as he can continue mining profitably even after
the halving. Alice and Bob mining less will increase the percentage of
blocks Charlie produces before the retarget, steadily shifting the
dynamics of the mining network to the state expected after the halving
and hopefully minimizing the magnitude of any shocks.

This does create the question about whether this soft fork would be
ethical, as Alice and Bob may have invested money and time on the
assumption that their marginal hardware would be usable up until the
halving and with this soft fork they would become uneconomical earlier
than block 420,000. A counterargument here is such an investment was
always speculative given the vagaries of exchange rate fluctuation, so
it could be permissible to change the economics slightly in order to
help ensure all other Bitcoin users experience minimal disruption during
the halving.

Unless I'm missing something (likely) I think this proposal has the
advantage of fast rollout (if the mechanism of an adjusted target is as
simple as I think it could be) in a non-emergency manner without a hard
fork that would require all full nodes upgrade (plus maybe some SPV
software that check nBits, which they probably all should be doing
given it's in the block headers that they download anyway).

-Dave

P.S. I see Tier Nolan proposed something similar while I was writing
     this. I think this proposal differs in its analysis to warrant a
     possible duplicate posting.

From greg at xiph.org  Wed Mar  2 17:53:46 2016
From: greg at xiph.org (Gregory Maxwell)
Date: Wed, 2 Mar 2016 17:53:46 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <20160302171418.GA5312@localhost.localdomain>
References: <201603021456.15820.luke@dashjr.org>
	<20160302171418.GA5312@localhost.localdomain>
Message-ID: <CAAS2fgQVreFoLiHf8NhHLbT8wpSBO4WHHRU10q6Fe=3johhaoA@mail.gmail.com>

On Wed, Mar 2, 2016 at 5:14 PM, David A. Harding via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Wed, Mar 02, 2016 at 02:56:14PM +0000, Luke Dashjr via bitcoin-dev wrote:
>> To alleviate this risk, it seems reasonable to propose a hardfork to the
>> difficulty adjustment algorithm so it can adapt quicker to such a significant
>> drop in mining rate.
>
> Having a well-reviewed hard fork patch for rapid difficulty adjustment
> would seem to be a useful reserve for all sorts of possible problems.
> That said, couldn't this specific potential situation be dealt with by a
> relatively simple soft fork?
[...]


What you are proposing makes sense only if it was believed that a very
large difficulty drop would be very likely.

This appears to be almost certainly untrue-- consider-- look how long
ago since hashrate was 50% of what it is now, or 25% of what it is
now-- this is strong evidence that supermajority of the hashrate is
equipment with state of the art power efficiency. (I've also heard
more directly-- but I think the this evidence is more compelling
because it can't be tainted by boasting). If a pre-programmed ramp and
drop is set then it has the risk of massively under-setting
difficulty; which is also strongly undesirable (e.g. advanced
inflation and exacerbating existing unintentional selfish mining)...
and that is before suggesting that miners voluntarily take a loss of
inflation now.

So while I think this concern is generally implausible; I think it's
prudent to have a difficulty step patch (e.g. a one time single point
where a particular block is required to lower bits a set amount) ready
to go in the unlikely case the network is stalled. Of course, if the
alternative is "stuck" from a large hashrate drop the deployment would
be both safe and relatively uncontroversial. I think the
unfavorability of that approach is well matched to the implausibility
of the situation, and likely the right coarse of action compared to
risky interventions that would likely cause harm. The cost of
developing and testing such a patch is low, and justified purely on
the basis of increasing confidence that an issue would be handled (a
fact _I_ am perfectly confident in; but apparently some are not).

With respect what Luke was suggesting; without specifics its hard to
comment, but most altcoin "tolerate difficulty drop" changes have made
them much more vulnerable to partitioning attacks and other issues
(e.g. strategic behavior by miners to increase inflation), and have
actually been exploited in practice several times (solidcoin's being
the oldest I'm aware of). Many survived a fairly long time before
being shown to be pretty broken, simply because they were deployed in
cases where no one cared to attack. I'm currently doubtful that
particular path would be fruitful.

From truthcoin at gmail.com  Wed Mar  2 16:27:52 2016
From: truthcoin at gmail.com (Paul Sztorc)
Date: Wed, 2 Mar 2016 11:27:52 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021542.29609.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org>
Message-ID: <56D71488.4080607@gmail.com>

It is **essential** that emergency code be prepared. This code must be
able to lower the difficulty by a large factor.

---

This halving-difficulty-drop problem can, with some bad luck, get quite
disastrous, very quickly.

( I did a micro-study of this problem here, for those who are unaware:
http://www.truthcoin.info/blog/mining-heart-attack )

For example, it is theoretically possible that 100% of miners (not 50%
or 10%) will shut off their hardware. This is because it is revenue
which ~halves, not profit. If miners are all equal, difficulty causes
their profit margin to narrow over time (for example, if BTC revenues
are $100, and amortized fixed costs are $10, then difficulty adjustments
will cause total energy costs to rise to ~ $89, such that total
pre-halving profit is $1 for everyone...post-halving, profit is -$49 for
everyone).

So, if miners are homogenous the result is disastrous. Fortunately,
miners are probably still somewhat heterogenous. However, we don't know
how their power contracts (or their hardware turnover) are
scheduled...many miners might (?) have already planned, in private, to
close down (or substantially reduce) operations after the halving.

As the coinbase rewards are currently orders of magnitude larger than
tx-fees, fees are unlikely to be able to compensate for this. Users may
decide to simply hold-off on transacting until fees decrease.

Worse, if the price crashes (possibly as a result of uncertainty
surrounding this episode), it will begin to affect miner-revenue.

As a result, miners may decide to temporarily halt mining until the
difficulty falls naturally.

But such a temporary halt is also (potentially) disastrous. Recall the
simple fact that difficulty adjustments are measured in blocks, not time
(it appears that we have exactly 1015 blocks between the halving block
and the next difficulty adjustment block). If excessive difficulty
chokes the system, next difficulty adjustment may *never* arrive naturally.

In this worst-case (but somewhat plausible) scenario, we will be
*forced* to lower the difficulty via hard fork, and we will be forced to
do so very very QUICKLY, as word will be spreading that the Bitcoin
system has broken!

If a specific hard fork is not coded and tested for this, in advance,
the delay might be accompanied by endless [contentious] conversations
about what else should be included in this hard fork.

Worse, since all users will need to upgrade, there will be uncertainty
over contentious versions, malicious agents may try to tamper with
versions (to steal Bitcoins), etc. We should consider pushing a version
out for users to upgrade, in advance of the halving, as soon as possible.



What a disaster! I certainly hope it does not happen, but if it does we
should have already agreed on what to do.


One choice is "which number do we set the difficulty to?". Half may be
too much, or too little. However, allow me to suggest that, if this
disastrous scenario occurs, we shouldn't take any chances, and reduce
difficulty by a huge proportion...80% or so. The difficulty will then
quickly begin to increase again...we can warn users of the increased
orphan risk, and that they should wait for many confirmations (which
should be happening faster).

So, "Allow the alert key to reduce the difficulty by 80%, exactly once
on one of the 1015 blocks between halving and difficulty adjustment."

And we should consider smoothing the rewards (as described in my post,
can be done via soft fork) to prevent this from happening again. In
microeconomics literature, 'kinks' in incentive-systems are
almost-universally agreed to be very undesirable.

Paul


On 3/2/2016 10:42 AM, Luke Dashjr via bitcoin-dev wrote:
> On Wednesday, March 02, 2016 2:56:14 PM Luke Dashjr via bitcoin-dev wrote:
>> so it may even be possible to have such a proposal ready in time to be
>> deployed alongside SegWit  to take effect in time for the upcoming subsidy
>> halving.
> 
> Lapse of thinking/clarity here. This probably isn't a practical timeframe for 
> deployment, unless/until there's an emergency situation. So if the code were 
> bundled with SegWit, it would need some way to avoid its early activation 
> outside of such an emergency (which could possibly be detected in code, in 
> this case).
> 
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From pete at petertodd.org  Wed Mar  2 18:20:28 2016
From: pete at petertodd.org (Peter Todd)
Date: Wed, 2 Mar 2016 13:20:28 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021456.15820.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
Message-ID: <20160302182028.GA7783@savin.petertodd.org>

On Wed, Mar 02, 2016 at 02:56:14PM +0000, Luke Dashjr via bitcoin-dev wrote:
> To alleviate this risk, it seems reasonable to propose a hardfork to the 
> difficulty adjustment algorithm so it can adapt quicker to such a significant 
> drop in mining rate. BtcDrak tells me he has well-tested code for this in his 
> altcoin, which has seen some roller-coaster hashrates, so it may even be 
> possible to have such a proposal ready in time to be deployed alongside SegWit 
> to take effect in time for the upcoming subsidy halving. If this slips, I 
> think it may be reasonable to push for at least code-readiness before July, 
> and possibly roll it into any other hardfork proposed before or around that 
> time.
> 
> I am unaware of any reason this would be controversial, so if anyone has a 
> problem with such a change, please speak up sooner rather than later. Other 
> ideas or concerns are of course welcome as well.

Changing the difficulty adjustment algorithm significantly changes the
security of the whole system, as it lets attackers create fake chains
with a lot less hashing power.

Given as tx fees rise this problem will hopefully be a one-time issue, a
simple fixed difficulty adjustment probably makes sense. No need to
bring in new algorithms here with controversial new security tradeoffs.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
0000000000000000045a03e0e551c4e674f301e0a8eeb217a31ad13580446626
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/fc9c261c/attachment.sig>

From tier.nolan at gmail.com  Wed Mar  2 18:07:41 2016
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 2 Mar 2016 18:07:41 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <56D71488.4080607@gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org> <56D71488.4080607@gmail.com>
Message-ID: <CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>

On Wed, Mar 2, 2016 at 4:27 PM, Paul Sztorc via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> For example, it is theoretically possible that 100% of miners (not 50%
> or 10%) will shut off their hardware. This is because it is revenue
> which ~halves, not profit.


It depends on how much is sunk costs and how much is marginal costs too.

If hashing costs are 50% capital and 50% marginal, then the entire network
will be able to absorb a 50% drop in subsidy.

50% capital costs means that the cost of the loan to buy the hardware
represents half the cost.

Assume that for every $100 of income, you have to pay $49 for the loan and
$49 for electricity giving 2% profit.  If the subsidy halves, then you only
get $50 of income, so lose $48.

But if the bank repossesses the operation, they might as well keep things
running for the $1 in marginal profit (or sell on the hardware to someone
who will keep using it).

Since this drop in revenue is well known in advance, businesses will spend
less on capital.  That means that there should be less mining hardware than
otherwise.

A 6 month investment with 3 months on the high subsidy and 3 months on low
subsidy would not be made if it only generated a small profit for the first
3 and then massive losses for the 2nd period of 3 months.  For it to be
made, there needs to be large profit during the first period to compensate
for the losses in the 2nd period.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/1b50893e/attachment-0001.html>

From eric at voskuil.org  Wed Mar  2 19:01:36 2016
From: eric at voskuil.org (Eric Voskuil)
Date: Wed, 2 Mar 2016 11:01:36 -0800
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
References: <201603021456.15820.luke@dashjr.org>	<201603021542.29609.luke@dashjr.org>
	<56D71488.4080607@gmail.com>
	<CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
Message-ID: <00e101d174b5$f2659060$d730b120$@voskuil.org>

> A 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made?

 

Yes, this is the essential point. All capital investments are made based on expectations of future returns. To the extent that futures are perfectly knowable, they can be perfectly factored in. This is why inflation in Bitcoin is not a tax, it?s a cost. These step functions are made continuous by their predictability, removing that predictability will make them -- unpredictable.

 

Changing these futures punishes those who have planned properly and favors those who have not. Sort of like a Bitcoin bail-in; are some miners are too big to fail? It also creates the expectation that it may happen again. This infects the money with the sort of uncertainty that Bitcoin is designed to prevent.

 

e

 

From: bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org] On Behalf Of Tier Nolan via bitcoin-dev
Sent: Wednesday, March 2, 2016 10:08 AM
Cc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>
Subject: Re: [bitcoin-dev] Hardfork to fix difficulty drop algorithm

 

On Wed, Mar 2, 2016 at 4:27 PM, Paul Sztorc via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org> > wrote:

For example, it is theoretically possible that 100% of miners (not 50%
or 10%) will shut off their hardware. This is because it is revenue
which ~halves, not profit.

 

It depends on how much is sunk costs and how much is marginal costs too.

If hashing costs are 50% capital and 50% marginal, then the entire network will be able to absorb a 50% drop in subsidy.

50% capital costs means that the cost of the loan to buy the hardware represents half the cost.

Assume that for every $100 of income, you have to pay $49 for the loan and $49 for electricity giving 2% profit.  If the subsidy halves, then you only get $50 of income, so lose $48.  

But if the bank repossesses the operation, they might as well keep things running for the $1 in marginal profit (or sell on the hardware to someone who will keep using it).

Since this drop in revenue is well known in advance, businesses will spend less on capital.  That means that there should be less mining hardware than otherwise.

A 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made if it only generated a small profit for the first 3 and then massive losses for the 2nd period of 3 months.  For it to be made, there needs to be large profit during the first period to compensate for the losses in the 2nd period.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/0439b647/attachment.html>

From dave at dtrt.org  Wed Mar  2 19:34:33 2016
From: dave at dtrt.org (David A. Harding)
Date: Wed, 2 Mar 2016 14:34:33 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <CAAS2fgQVreFoLiHf8NhHLbT8wpSBO4WHHRU10q6Fe=3johhaoA@mail.gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<20160302171418.GA5312@localhost.localdomain>
	<CAAS2fgQVreFoLiHf8NhHLbT8wpSBO4WHHRU10q6Fe=3johhaoA@mail.gmail.com>
Message-ID: <20160302193433.GA5990@localhost.localdomain>

On Wed, Mar 02, 2016 at 05:53:46PM +0000, Gregory Maxwell wrote:
> What you are proposing makes sense only if it was believed that a very
> large difficulty drop would be very likely.
>
> This appears to be almost certainly untrue-- consider-- look how long
> ago since hashrate was 50% of what it is now, or 25% of what it is
> now-- this is strong evidence that supermajority of the hashrate is
> equipment with state of the art power efficiency.

To avoid duplication of looking up this statistic among readers, here
are the various recent difficulties:

    $ for i in $( seq 0 2016 60000 ) ; do echo -n $i blocks ago:' ' ; bitcoin-cli getblock $( bitcoin-cli getblockhash $(( 400857 - i )) ) | jshon -e difficulty ; done | column -t
    0      blocks  ago:  163491654908.95929
    2016   blocks  ago:  144116447847.34869
    4032   blocks  ago:  120033340651.237
    6048   blocks  ago:  113354299801.4711
    8064   blocks  ago:  103880340815.4559
    10080  blocks  ago:  93448670796.323807
    12096  blocks  ago:  79102380900.225983
    14112  blocks  ago:  72722780642.54718
    16128  blocks  ago:  65848255179.702606
    18144  blocks  ago:  62253982449.760818
    20160  blocks  ago:  60883825480.098282
    22176  blocks  ago:  60813224039.440353
    24192  blocks  ago:  59335351233.86657
    26208  blocks  ago:  56957648455.01001
    28224  blocks  ago:  54256630327.889961
    30240  blocks  ago:  52699842409.347008
    32256  blocks  ago:  52278304845.591682
    34272  blocks  ago:  51076366303.481934
    36288  blocks  ago:  49402014931.227463
    38304  blocks  ago:  49692386354.893837
    40320  blocks  ago:  47589591153.625008
    42336  blocks  ago:  48807487244.681381
    44352  blocks  ago:  47643398017.803436
    46368  blocks  ago:  47610564513.47126
    48384  blocks  ago:  49446390688.24144
    50400  blocks  ago:  46717549644.706421
    52416  blocks  ago:  47427554950.6483
    54432  blocks  ago:  46684376316.860291
    56448  blocks  ago:  44455415962.343803
    58464  blocks  ago:  41272873894.697021

<50% of current hash rate was last seen roughly six retarget periods (12
weeks) ago and <25% of current hash rate was last seen roughly 29 periods
(58 weeks) ago.

I think that's reasonably strong evidence for your thesis given that
the increases in hash rate from the introduction of new efficient
equipment are likely partly offset by the removal from the hash rate of
lower efficiency equipment, so the one-year tail of ~25% probably means
that less than 25% of operating equipment is one year old or older.

However, it is my understanding that most mining equipment can be run at
different hash rates. Is there any evidence that high-efficiency miners
today are using high clock speeds to produce more hashes per ASIC than
they will after halving?  Is there any way to guess at how many fewer
hashes they might produce?

> If a pre-programmed ramp and drop is set then it has the risk of
> massively under-setting difficulty; which is also strongly undesirable
> (e.g. advanced inflation and exacerbating existing unintentional
> selfish mining)

Maybe I'm not thinking this through thoroughly, but I don't think it's
possible to significantly advance inflation unless the effective hash
rate increases by more than 300% at the halving.  With the proposal
being replied to, if all mining equipment operation before the
halving continued operating after it, the effective increase would be
200%. That doubling in effective hash rate would've been offset in
advance through a reduction in the effective hash rate in the weeks
before the halving.

Exacerbated unintentional selfish mining is a much more significant
concern IMO, even if it's only for a short retarget period or two. This
is especially the case given the current high levels of centralization
and validationless mining on the network today, which we would not want
to reward by making those miners the only ones effectively capable of
creating blocks until difficulty adjusted. I had not thought of this
aspect; thank you for bringing it up.

> and that is before suggesting that miners voluntarily take a loss of
> inflation now.

Yes, I very much don't like that aspect, which is why I made sure to
mention it.

> So while I think this concern is generally implausible; I think it's
> prudent to have a difficulty step patch (e.g. a one time single point
> where a particular block is required to lower bits a set amount) ready
> to go in the unlikely case the network is stalled.

I think having that code ready in general is a good idea, and a one-time
change in nBits is sounds like a good and simple way to go about it.

Thank you for your insightful reply,

-Dave

From eric at voskuil.org  Wed Mar  2 20:44:07 2016
From: eric at voskuil.org (Eric Voskuil)
Date: Wed, 02 Mar 2016 12:44:07 -0800
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <56D74859.3090609@gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org> <56D71488.4080607@gmail.com>
	<CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
	<00e101d174b5$f2659060$d730b120$@voskuil.org>
	<56D74859.3090609@gmail.com>
Message-ID: <56D75097.2070609@voskuil.org>

On 03/02/2016 12:08 PM, Paul Sztorc wrote:
> On 3/2/2016 2:01 PM, Eric Voskuil via bitcoin-dev wrote:
>>> A 6 month investment with 3 months on the high subsidy and 3 months on
>> low subsidy would not be made?
>>
>> Yes, this is the essential point. All capital investments are made based
>> on expectations of future returns. To the extent that futures are
>> perfectly knowable, they can be perfectly factored in. This is why
>> inflation in Bitcoin is not a tax, it?s a cost. These step functions are
>> made continuous by their predictability, removing that predictability
>> will make them -- unpredictable.
> 
> The Ministry of Truth is taking job applications in the doublespeak
> department...

Not sure how you interpret a tautology as doublespeak.

>> Changing these futures punishes those who have planned properly and
>> favors those who have not. Sort of like a Bitcoin bail-in; are some
>> miners are too big to fail? It also creates the expectation that it may
>> happen again. This infects the money with the sort of uncertainty that
>> Bitcoin is designed to prevent.
> 
> Coinbase-smoothing can be done via soft fork (soft forks typically only
> move "one way" toward stability).

I'm addressing the hard fork proposal (see subject line).

> Moreover, the effect *costs* miners,
> it does not benefit them. Finally, it can be done so that the economic
> impact on miners is minimized.

Changes to consensus rules change the value of coins, which are property
of their owners. Nobody owes a miner a promise of consistent revenue for
future work. Cost or benefit to miners is relevant only to the extent
that those who hold money believe it will affect their value and
therefore consider it in their decision to consent.

> You'll just have to weigh the risks -- some vague, tiny effect on
> expectations today, vs the need for a small group of experts to
> emergency hard fork once every four years.

How is the small group of experts today different from the small group
of experts tomorrow?

> I'm sure those experts are completely reliable, and won't get threatened
> or assassinated!

This is precisely the issue. The precedent of hard-forking to "fix" the
money is a precedent for establishing authority over the money.

>> A 6 month investment with 3 months on the high subsidy and 3 months on
>> low subsidy would not be made if it only generated a small profit for
>> the first 3 and then massive losses for the 2nd period of 3 months.  For
>> it to be made, there needs to be large profit during the first period to
>> compensate for the losses in the 2nd period.
> 
> The word "loss" is of utmost importance here...if they are operational
> losses, it should be obvious to everyone that the best "compensation for
> losses in the 2nd period" is to just shut them off (thus reducing losses
> to zero).

But of course the losses would not be entirely operational, since
hardware (at a minimum) does not depreciate to zero because of a
halving. The ability to plan does not change this fact. There are
certainly similar considerations for labor, bandwidth, space and even
electrical/cooling costs (contracts). To the extent that these costs are
sunk (as Tier said) *any* earnings are better than none.

> So you must be arguing that miners have made an investment 3 months
> prior, knowing that it would pay for itself despite the reward halving.

Of course, how could they not?

> That's nice, but it ignores the fact that, if that investment is made
> everyone, by all miners, the *difficulty* will have increased 2 weeks
> afterward...such that operating profits are tending *immediately* toward
> zero, and will be zero by the time the first set of 3 months is over.

... which also ignores fees.

e

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/fdc5f118/attachment.sig>

From pete at petertodd.org  Wed Mar  2 23:02:13 2016
From: pete at petertodd.org (Peter Todd)
Date: Wed, 2 Mar 2016 18:02:13 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <00e101d174b5$f2659060$d730b120$@voskuil.org>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org> <56D71488.4080607@gmail.com>
	<CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
	<00e101d174b5$f2659060$d730b120$@voskuil.org>
Message-ID: <20160302230213.GA888@muck>

On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev wrote:
> > A 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made?
> 
>  
> 
> Yes, this is the essential point. All capital investments are made based on expectations of future returns. To the extent that futures are perfectly knowable, they can be perfectly factored in. This is why inflation in Bitcoin is not a tax, it?s a cost. These step functions are made continuous by their predictability, removing that predictability will make them -- unpredictable.

You know, I do agree with you.

But see, this is one of the reasons why we keep reminding people that
strictly speaking a hardfork *is* an altcoin, and the altcoin can change
any rule currently in Bitcoin.

It'd be perfectly reasonable to create an altcoin with a 22-million-coin
limit and an inflation schedule that had smooth, rather than abrupt,
drops. It'd also be reasonable to make that altcoin start with the same
UTXO set as Bitcoin as a means of initial coin distribution.

If miners choose to start mining that altcoin en-mass on the halving,
all the more power to them. It's our choice whether or not we buy those
coins. We may choose not to, but if 95% of the hashing power decides to
go mine something different we have to accept that under our current
chosen rules confirmations might take a long time.


Of course, personally I agree with Gregory Maxwell: this is all fairly
unlikely to happen, so the discussion is academic. But we'll see.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
000000000000000004d430e1daab776bc1c194589b0326924220faa00efc50cf
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/dc039e04/attachment-0001.sig>

From truthcoin at gmail.com  Thu Mar  3 01:06:27 2016
From: truthcoin at gmail.com (Paul Sztorc)
Date: Wed, 2 Mar 2016 20:06:27 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <CAAS2fgQVreFoLiHf8NhHLbT8wpSBO4WHHRU10q6Fe=3johhaoA@mail.gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<20160302171418.GA5312@localhost.localdomain>
	<CAAS2fgQVreFoLiHf8NhHLbT8wpSBO4WHHRU10q6Fe=3johhaoA@mail.gmail.com>
Message-ID: <56D78E13.2050403@gmail.com>



On 3/2/2016 12:53 PM, Gregory Maxwell via bitcoin-dev wrote:
> What you are proposing makes sense only if it was believed that a very
> large difficulty drop would be very likely.
> 
> This appears to be almost certainly untrue-- consider-- look how long
> ago since hashrate was 50% of what it is now, or 25% of what it is
> now-- this is strong evidence that supermajority of the hashrate is
> equipment with state of the art power efficiency.

I don't understand the relevance of this.

In my view, we would prefer miners to invest in hardware just a mere
2016 blocks away from the halving. Instead, they've made them too soon.
Assuming that miners are already located in low-power-cost areas, the
difficulty will be quickly rising to compensate for "state of the art
power efficiency".

So it will have canceled out by July.

If anything, the more efficient miners become today, the bigger our
potential problem in July, because chip-manufacturers may have used up
all of the easy efficiency-increasing moves, such that investments do
not take place in June.

Paul

From alice at librelamp.com  Thu Mar  3 13:02:11 2016
From: alice at librelamp.com (Alice Wonder)
Date: Thu, 3 Mar 2016 05:02:11 -0800
Subject: [bitcoin-dev] consensus rule change for TX fee safety
Message-ID: <56D835D3.9070902@librelamp.com>

I think the next hard fork should require a safety rule for TX fees.

https://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08

15 BTC TX fee for < 7 BTC of outputs.

Probably either a typo or client bug.

My guess is the user was using a client that does not adjust TX fee, and 
needed to manually set it in order to get the TX in the block sooner, 
and meant 15 mBTC or something.

I suggest that either :

A) TX fee may not be larger than sum of outputs
B) TX fee per byte may not be larger than 4X largest fee per byte in 
previous block

Either of those would have prevented this TX from going into a block.

Many people I know are scared of bitcoin, that they will make a TX and 
make a mistake they can't undo.

Adding protections may help give confidence and there is precedence to 
doing things to prevent typo blunders - a public address has a four byte 
checksum to reduce the odds of a typo.

This kind of mistake is rare, so a fix could be included in the coming 
HF for the possible July 2017 block increase.

Thank you for your time.

Alice Wonder

From pshirkey at boosthardware.com  Thu Mar  3 10:14:56 2016
From: pshirkey at boosthardware.com (Patrick Shirkey)
Date: Thu, 3 Mar 2016 21:14:56 +1100 (EST)
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <20160302230213.GA888@muck>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org> <56D71488.4080607@gmail.com>
	<CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
	<00e101d174b5$f2659060$d730b120$@voskuil.org>
	<20160302230213.GA888@muck>
Message-ID: <44382.178.73.210.16.1457000096.squirrel@boosthardware.com>


On Thu, March 3, 2016 10:02 am, Peter Todd via bitcoin-dev wrote:
> On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev
> wrote:
>> > A 6 month investment with 3 months on the high subsidy and 3 months on
>> low subsidy would not be made???
>>
>>
>>
>> Yes, this is the essential point. All capital investments are made based
>> on expectations of future returns. To the extent that futures are
>> perfectly knowable, they can be perfectly factored in. This is why
>> inflation in Bitcoin is not a tax, it???s a cost. These step functions
>> are made continuous by their predictability, removing that
>> predictability will make them -- unpredictable.
>
> You know, I do agree with you.
>
> But see, this is one of the reasons why we keep reminding people that
> strictly speaking a hardfork *is* an altcoin, and the altcoin can change
> any rule currently in Bitcoin.
>
> It'd be perfectly reasonable to create an altcoin with a 22-million-coin
> limit and an inflation schedule that had smooth, rather than abrupt,
> drops. It'd also be reasonable to make that altcoin start with the same
> UTXO set as Bitcoin as a means of initial coin distribution.
>
> If miners choose to start mining that altcoin en-mass on the halving,
> all the more power to them. It's our choice whether or not we buy those
> coins. We may choose not to, but if 95% of the hashing power decides to
> go mine something different we have to accept that under our current
> chosen rules confirmations might take a long time.
>
>
> Of course, personally I agree with Gregory Maxwell: this is all fairly
> unlikely to happen, so the discussion is academic. But we'll see.
>

Bitcoin is a success.

The success has forced various hardfork discussions.

Hard forking is contentious. If a softfork cannot be achieved the
alternate to a hardfork is creating a new bitcoin. ex bitcoin 2.0

Similar to silver, gold, palladium, etc...

Bitcoins success partly stems from it's brand awareness. Any new
officially supported bitcoin will also benefit from this brand awareness.

If the market values the new improved bitcoin they will put their money
into it. This doesn't require any consensus.

Let the market decide which option has the most value. If everyone
switches to the new bitcoin then the old bitcoin miners will follow.





--
Patrick Shirkey
Boost Hardware Ltd

From dscotese at litmocracy.com  Thu Mar  3 05:11:16 2016
From: dscotese at litmocracy.com (Dave Scotese)
Date: Wed, 2 Mar 2016 21:11:16 -0800
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <20160302230213.GA888@muck>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org> <56D71488.4080607@gmail.com>
	<CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
	<00e101d174b5$f2659060$d730b120$@voskuil.org>
	<20160302230213.GA888@muck>
Message-ID: <CAGLBAhcL+Z7uPVG6U5cEShc52KmkYFb6USF_gk6bZaj2SFv37A@mail.gmail.com>

It makes sense to me that there might be objective conditions under which
we would want to use a number smaller than 2016.  A good example would be a
mean time between blocks of more than 20 minutes over the last 144 blocks
(one  - two days).  If such an occurrence ever happened, and the software
then cut the retarget interval to 1008 (triggering an immediate retarget if
the counter is over 1008), the only problem I see is how to measure the
mean time between blocks.

In fact, has anyone examined the potential problems of reducing the
retarget period, even to one?  Not Really.
<http://bitcoin.stackexchange.com/questions/9305/why-not-retarget-on-every-block>
That question includes a suggestion of retargeting on every block, but
using the same 2016 block window for the calculation, so difficulty changes
would be very smooth, and still as unpredictable and how long till we find
the next block.

On Wed, Mar 2, 2016 at 3:02 PM, Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev
> wrote:
> > > A 6 month investment with 3 months on the high subsidy and 3 months on
> low subsidy would not be made?
> >
> >
> >
> > Yes, this is the essential point. All capital investments are made based
> on expectations of future returns. To the extent that futures are perfectly
> knowable, they can be perfectly factored in. This is why inflation in
> Bitcoin is not a tax, it?s a cost. These step functions are made continuous
> by their predictability, removing that predictability will make them --
> unpredictable.
>
> You know, I do agree with you.
>
> But see, this is one of the reasons why we keep reminding people that
> strictly speaking a hardfork *is* an altcoin, and the altcoin can change
> any rule currently in Bitcoin.
>
> It'd be perfectly reasonable to create an altcoin with a 22-million-coin
> limit and an inflation schedule that had smooth, rather than abrupt,
> drops. It'd also be reasonable to make that altcoin start with the same
> UTXO set as Bitcoin as a means of initial coin distribution.
>
> If miners choose to start mining that altcoin en-mass on the halving,
> all the more power to them. It's our choice whether or not we buy those
> coins. We may choose not to, but if 95% of the hashing power decides to
> go mine something different we have to accept that under our current
> chosen rules confirmations might take a long time.
>
>
> Of course, personally I agree with Gregory Maxwell: this is all fairly
> unlikely to happen, so the discussion is academic. But we'll see.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
> 000000000000000004d430e1daab776bc1c194589b0326924220faa00efc50cf
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>


-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160302/c1a8954e/attachment.html>

From henning.kopp at uni-ulm.de  Thu Mar  3 15:04:18 2016
From: henning.kopp at uni-ulm.de (Henning Kopp)
Date: Thu, 3 Mar 2016 16:04:18 +0100
Subject: [bitcoin-dev] consensus rule change for TX fee safety
In-Reply-To: <56D835D3.9070902@librelamp.com>
References: <56D835D3.9070902@librelamp.com>
Message-ID: <20160303150418.GA2341@banane.informatik.uni-ulm.de>

Hi,
I think there is no need to do a hardfork for this. Rather it should
be implemented as a safety-mechanism in the client. Perhaps a warning
can pop up, if one of your conditions A) or B) is met.

All the best
Henning Kopp


On Thu, Mar 03, 2016 at 05:02:11AM -0800, Alice Wonder via bitcoin-dev wrote:
> I think the next hard fork should require a safety rule for TX fees.
> 
> https://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08
> 
> 15 BTC TX fee for < 7 BTC of outputs.
> 
> Probably either a typo or client bug.
> 
> My guess is the user was using a client that does not adjust TX fee, and
> needed to manually set it in order to get the TX in the block sooner, and
> meant 15 mBTC or something.
> 
> I suggest that either :
> 
> A) TX fee may not be larger than sum of outputs
> B) TX fee per byte may not be larger than 4X largest fee per byte in
> previous block
> 
> Either of those would have prevented this TX from going into a block.
> 
> Many people I know are scared of bitcoin, that they will make a TX and make
> a mistake they can't undo.
> 
> Adding protections may help give confidence and there is precedence to doing
> things to prevent typo blunders - a public address has a four byte checksum
> to reduce the odds of a typo.
> 
> This kind of mistake is rare, so a fix could be included in the coming HF
> for the possible July 2017 block increase.
> 
> Thank you for your time.
> 
> Alice Wonder
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

-- 
Henning Kopp
Institute of Distributed Systems
Ulm University, Germany

Office: O27 - 3402
Phone: +49 731 50-24138
Web: http://www.uni-ulm.de/in/vs/~kopp

From dev at jonasschnelli.ch  Thu Mar  3 15:29:30 2016
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Thu, 3 Mar 2016 16:29:30 +0100
Subject: [bitcoin-dev] consensus rule change for TX fee safety
In-Reply-To: <56D835D3.9070902@librelamp.com>
References: <56D835D3.9070902@librelamp.com>
Message-ID: <56D8585A.1070804@jonasschnelli.ch>

Hi

> My guess is the user was using a client that does not adjust TX fee, and
> needed to manually set it in order to get the TX in the block sooner,
> and meant 15 mBTC or something.
> 
> I suggest that either :
> 
> A) TX fee may not be larger than sum of outputs
> B) TX fee per byte may not be larger than 4X largest fee per byte in
> previous block

I don't think a such "feature" or lets say protection should be part of
the consensus layer.

Such checks should be done by the tx creation clients (wallets) ? or ?
nodes could have an option to not accept transaction with insane fees
into their mempool (policy).

</jonas>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/a0e73400/attachment-0001.sig>

From pete at petertodd.org  Thu Mar  3 15:28:36 2016
From: pete at petertodd.org (Peter Todd)
Date: Thu, 3 Mar 2016 10:28:36 -0500
Subject: [bitcoin-dev] consensus rule change for TX fee safety
In-Reply-To: <20160303150418.GA2341@banane.informatik.uni-ulm.de>
References: <56D835D3.9070902@librelamp.com>
	<20160303150418.GA2341@banane.informatik.uni-ulm.de>
Message-ID: <20160303152836.GA27932@savin.petertodd.org>

On Thu, Mar 03, 2016 at 04:04:18PM +0100, Henning Kopp via bitcoin-dev wrote:
> Hi,
> I think there is no need to do a hardfork for this. Rather it should
> be implemented as a safety-mechanism in the client. Perhaps a warning
> can pop up, if one of your conditions A) or B) is met.

Bitcoin Core already implements this safety limit with the "absurd fee"
limit of 10000 * the minimum relay fee. This limit is active in both the
wallet and the sendrawtransaction RPC call. Additionally for the wallet
there is a user configurable -maxtxfee option to limit fees set by the
wallet which currently defaults to 0.1 BTC.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
0000000000000000024eabe5049843ea6d73558e960d6bcead9e91a24cab1161
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/8cd961fe/attachment.sig>

From jtimon at jtimon.cc  Thu Mar  3 15:36:48 2016
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 3 Mar 2016 16:36:48 +0100
Subject: [bitcoin-dev] consensus rule change for TX fee safety
In-Reply-To: <20160303150418.GA2341@banane.informatik.uni-ulm.de>
References: <56D835D3.9070902@librelamp.com>
	<20160303150418.GA2341@banane.informatik.uni-ulm.de>
Message-ID: <CABm2gDqbxAkZzfycEzX7370CAYMsyzL=L3tAKh6CNO4QOJyLsg@mail.gmail.com>

There's  an absurd fee (non-consensus) check already. Maybe that check can
be improved, but probably the wallet layer is more appropriate for this.
On Mar 3, 2016 16:23, "Henning Kopp via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
> I think there is no need to do a hardfork for this. Rather it should
> be implemented as a safety-mechanism in the client. Perhaps a warning
> can pop up, if one of your conditions A) or B) is met.
>
> All the best
> Henning Kopp
>
>
> On Thu, Mar 03, 2016 at 05:02:11AM -0800, Alice Wonder via bitcoin-dev
> wrote:
> > I think the next hard fork should require a safety rule for TX fees.
> >
> >
> https://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08
> >
> > 15 BTC TX fee for < 7 BTC of outputs.
> >
> > Probably either a typo or client bug.
> >
> > My guess is the user was using a client that does not adjust TX fee, and
> > needed to manually set it in order to get the TX in the block sooner, and
> > meant 15 mBTC or something.
> >
> > I suggest that either :
> >
> > A) TX fee may not be larger than sum of outputs
> > B) TX fee per byte may not be larger than 4X largest fee per byte in
> > previous block
> >
> > Either of those would have prevented this TX from going into a block.
> >
> > Many people I know are scared of bitcoin, that they will make a TX and
> make
> > a mistake they can't undo.
> >
> > Adding protections may help give confidence and there is precedence to
> doing
> > things to prevent typo blunders - a public address has a four byte
> checksum
> > to reduce the odds of a typo.
> >
> > This kind of mistake is rare, so a fix could be included in the coming HF
> > for the possible July 2017 block increase.
> >
> > Thank you for your time.
> >
> > Alice Wonder
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
> --
> Henning Kopp
> Institute of Distributed Systems
> Ulm University, Germany
>
> Office: O27 - 3402
> Phone: +49 731 50-24138
> Web: http://www.uni-ulm.de/in/vs/~kopp
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/ae824855/attachment.html>

From falke.marco at gmail.com  Thu Mar  3 15:55:25 2016
From: falke.marco at gmail.com (Marco Falke)
Date: Thu, 3 Mar 2016 16:55:25 +0100
Subject: [bitcoin-dev] consensus rule change for TX fee safety
In-Reply-To: <20160303152836.GA27932@savin.petertodd.org>
References: <56D835D3.9070902@librelamp.com>
	<20160303150418.GA2341@banane.informatik.uni-ulm.de>
	<20160303152836.GA27932@savin.petertodd.org>
Message-ID: <CAKJqnrFc0i_eoG4gfU5zM_b4xbZrHqnR9-ajfB8=JAWJ4xAnaQ@mail.gmail.com>

2016-03-03 16:28 GMT+01:00 Peter Todd via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org>:
> Bitcoin Core already implements this safety limit with the "absurd fee"
> limit of 10000 * the minimum relay fee. This limit is active in both the
> wallet and the sendrawtransaction RPC call. Additionally for the wallet
> there is a user configurable -maxtxfee option to limit fees set by the
> wallet which currently defaults to 0.1 BTC.


It is planned for Bitcoin Core 0.13 to use -maxtxfee for both, the
wallet and the RPC interface (sendrawtransaction). (c.f.
https://github.com/bitcoin/bitcoin/pull/7084)

In regard to the issue, I agree with Jonas. Such large transaction
fees were historically caused by no or insufficient warnings from the
wallet software. And it's the responsibility of the operators to make
the wallet user friendly.

Apart from that, there are legit use cases where one would want to
"pay" a large transaction fee: It may be convenient for the miner to
just collect the fees instead of sending back the change on their own
transactions. Of course making sure to mine the high-fee tx themself.
Moreover, it could increase privacy if another party decides to "wash"
their bitcoins by letting the miner claim the "fee" and then have the
miner send back a fraction of the fee to a fresh address. Though, this
probably works best if a lot of participants are doing this.

Marco

From corey3 at gmail.com  Thu Mar  3 18:27:35 2016
From: corey3 at gmail.com (Corey Haddad)
Date: Thu, 3 Mar 2016 10:27:35 -0800
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <201603021456.15820.luke@dashjr.org>
References: <201603021456.15820.luke@dashjr.org>
Message-ID: <CAK_HAC9v8ZuOKBQQZ4TJa2vdmEuOM-ykqEAMvaLgUn-Cr13Yww@mail.gmail.com>

Since the root cause of what you are trying to address is the reward
having, I'd suggest considering an adjustment to the having schedule.
Instead of their being a large supply shock every four years, perhaps the
reward could drop every 52,500 blocks (yearly), or even at each difficulty
adjustment, in such a way that the inflation curve is smoothed out.  The
exponential decay rate would be preserved, so overall economic philosophy
would be preserved.

I'm guessing hesitance to this approach would lie in a reluctance to tinker
with Bitcoin's 'economic contract', and slippery slope concerns about might
be the next change (21M?).  However, I think it could actually increase
confidence in the system if the community is able to demonstrate a good
process for making such decisions, and show that we can separate the
meaningful underlying principles, such as the coin limit and overall
inflation rate, from what is more akin to an implementation detail, as I
consider the large-step reward reduction to be.

I'm not too worried about the impact of the having as is, but adjusting the
economic parameter would be a safer and simpler way to address the concerns
than to tinker with the difficulty targeting mechanism, which is at the
heart of Bitcoin's security

On Wed, Mar 2, 2016 at 6:56 AM, Luke Dashjr via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> We are coming up on the subsidy halving this July, and there have been some
> concerns raised that a non-trivial number of miners could potentially drop
> off
> the network. This would result in a significantly longer block interval,
> which
> also means a higher per-block transaction volume, which could cause the
> block
> size limit to legitimately be hit much sooner than expected. Furthermore,
> due
> to difficulty adjustment being measured exclusively in blocks, the time
> until
> it adjusts to compensate would be prolonged.
>
> For example, if 50% of miners dropped off the network, blocks would be
> every
> 20 minutes on average and contain double the transactions they presently
> do.
> Even double would be approximately 850-900k, which potentially bumps up
> against the hard limit when empty blocks are taken into consideration. This
> situation would continue for a full month if no changes are made. If more
> miners drop off the network, most of this becomes linearly worse, but due
> to
> hitting the block size limit, the backlog would grow indefinitely until the
> adjustment occurs.
>
> To alleviate this risk, it seems reasonable to propose a hardfork to the
> difficulty adjustment algorithm so it can adapt quicker to such a
> significant
> drop in mining rate. BtcDrak tells me he has well-tested code for this in
> his
> altcoin, which has seen some roller-coaster hashrates, so it may even be
> possible to have such a proposal ready in time to be deployed alongside
> SegWit
> to take effect in time for the upcoming subsidy halving. If this slips, I
> think it may be reasonable to push for at least code-readiness before July,
> and possibly roll it into any other hardfork proposed before or around that
> time.
>
> I am unaware of any reason this would be controversial, so if anyone has a
> problem with such a change, please speak up sooner rather than later. Other
> ideas or concerns are of course welcome as well.
>
> Thanks,
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/89c572a7/attachment-0001.html>

From dscotese at litmocracy.com  Thu Mar  3 16:38:17 2016
From: dscotese at litmocracy.com (Dave Scotese)
Date: Thu, 3 Mar 2016 08:38:17 -0800
Subject: [bitcoin-dev] consensus rule change for TX fee safety
In-Reply-To: <CABm2gDqbxAkZzfycEzX7370CAYMsyzL=L3tAKh6CNO4QOJyLsg@mail.gmail.com>
References: <56D835D3.9070902@librelamp.com>
	<20160303150418.GA2341@banane.informatik.uni-ulm.de>
	<CABm2gDqbxAkZzfycEzX7370CAYMsyzL=L3tAKh6CNO4QOJyLsg@mail.gmail.com>
Message-ID: <CAGLBAheHCKQ8kG1UKMcmR_NSqLj4stBzUrqmw63Y=a+eVWqwOw@mail.gmail.com>

It would be a shame to prohibit someone from rewarding whoever mines their
transaction.  A good example would be a transaction designed to record some
information which is damning to powerful authorities, sort of like the
service cryptograffiti offers.  When we try to protect others by
prohibiting behavior we think is foolish, we may save some fools, but at
the same time, we hurt the best of us.

On Thu, Mar 3, 2016 at 7:36 AM, Jorge Tim?n <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> There's  an absurd fee (non-consensus) check already. Maybe that check can
> be improved, but probably the wallet layer is more appropriate for this.
> On Mar 3, 2016 16:23, "Henning Kopp via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi,
>> I think there is no need to do a hardfork for this. Rather it should
>> be implemented as a safety-mechanism in the client. Perhaps a warning
>> can pop up, if one of your conditions A) or B) is met.
>>
>> All the best
>> Henning Kopp
>>
>>
>> On Thu, Mar 03, 2016 at 05:02:11AM -0800, Alice Wonder via bitcoin-dev
>> wrote:
>> > I think the next hard fork should require a safety rule for TX fees.
>> >
>> >
>> https://blockchain.info/tx/6fe69404e6c12b25b60fcd56cc6dc9fb169b24608943def6dbe1eb0a9388ed08
>> >
>> > 15 BTC TX fee for < 7 BTC of outputs.
>> >
>> > Probably either a typo or client bug.
>> >
>> > My guess is the user was using a client that does not adjust TX fee, and
>> > needed to manually set it in order to get the TX in the block sooner,
>> and
>> > meant 15 mBTC or something.
>> >
>> > I suggest that either :
>> >
>> > A) TX fee may not be larger than sum of outputs
>> > B) TX fee per byte may not be larger than 4X largest fee per byte in
>> > previous block
>> >
>> > Either of those would have prevented this TX from going into a block.
>> >
>> > Many people I know are scared of bitcoin, that they will make a TX and
>> make
>> > a mistake they can't undo.
>> >
>> > Adding protections may help give confidence and there is precedence to
>> doing
>> > things to prevent typo blunders - a public address has a four byte
>> checksum
>> > to reduce the odds of a typo.
>> >
>> > This kind of mistake is rare, so a fix could be included in the coming
>> HF
>> > for the possible July 2017 block increase.
>> >
>> > Thank you for your time.
>> >
>> > Alice Wonder
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>>
>> --
>> Henning Kopp
>> Institute of Distributed Systems
>> Ulm University, Germany
>>
>> Office: O27 - 3402
>> Phone: +49 731 50-24138
>> Web: http://www.uni-ulm.de/in/vs/~kopp
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>


-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/970dc2e2/attachment.html>

From eric at voskuil.org  Thu Mar  3 20:54:24 2016
From: eric at voskuil.org (Eric Voskuil)
Date: Thu, 03 Mar 2016 12:54:24 -0800
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <20160302230213.GA888@muck>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org> <56D71488.4080607@gmail.com>
	<CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
	<00e101d174b5$f2659060$d730b120$@voskuil.org>
	<20160302230213.GA888@muck>
Message-ID: <56D8A480.6040604@voskuil.org>

On 03/02/2016 03:02 PM, Peter Todd wrote:
> On Wed, Mar 02, 2016 at 11:01:36AM -0800, Eric Voskuil via bitcoin-dev wrote:
>>> A 6 month investment with 3 months on the high subsidy and 3 months on low subsidy would not be made?
>>
>> Yes, this is the essential point. All capital investments are made based on expectations of future returns. To the extent that futures are perfectly knowable, they can be perfectly factored in. This is why inflation in Bitcoin is not a tax, it?s a cost. These step functions are made continuous by their predictability, removing that predictability will make them -- unpredictable.
> 
> You know, I do agree with you.
> 
> But see, this is one of the reasons why we keep reminding people that
> strictly speaking a hardfork *is* an altcoin, and the altcoin can change
> any rule currently in Bitcoin.
> 
> It'd be perfectly reasonable to create an altcoin with a 22-million-coin
> limit and an inflation schedule that had smooth, rather than abrupt,
> drops. It'd also be reasonable to make that altcoin start with the same
> UTXO set as Bitcoin as a means of initial coin distribution.
> 
> If miners choose to start mining that altcoin en-mass on the halving,
> all the more power to them. It's our choice whether or not we buy those
> coins. We may choose not to, but if 95% of the hashing power decides to
> go mine something different we have to accept that under our current
> chosen rules confirmations might take a long time.
> 
> Of course, personally I agree with Gregory Maxwell: this is all fairly
> unlikely to happen, so the discussion is academic. But we'll see.
> 
I agree, this is a perfectly rational interpretation. I also agree that
this particular instance is academic. But I see more to this than
accepting what is possible.

In the case of Federal Reserve Notes the gold obligation was abrogated.
This was (at least) a contract default, implemented by force of arms.
This contentious hard fork was clearly an attack.

But in a system with no authority and in which nobody has formed a
contractual obligation with anyone else, what would constitute an attack
on the money? There is no difference between state attacks on (or
collusion with) miners and miners acting on self interest.

One answer is that nothing is an attack, it's up to the market to
decide. But to the extent that there can be an attack on the money, the
attempt to move the value of the coin to an altcoin (hard fork) is it.
Though the choice of the term "attack" isn't essential.

The importance of recognizing an attack is that it affords one the
opportunity to defend against it. People holding "dollars" in 1933 were
ill equipped to defend against a system level attack (monetary policy),
in part because many did not recognize it as such, and in part because
there was insufficient preparation by those who did.

I see us building the tools and awareness necessary for defense. As you
say, nobody has to buy into an altcoin forked from their coin. This much
is simple to achieve. The more difficult problem is preserving the
utility of the original coin. Clearly the purpose of a hard fork (as
opposed to a new coin) is to transfer this value.

We've all seen arguments for contentious hard fork deployment that
explicitly depend on the fear of monetary loss to drag people to
acceptance. While this may be the nature of the technology, it's
important that we develop effective defense against it.

Ultimately the only defense is individual validation. The collusion of
banks (web wallets) with miners in attacking consensus is obvious. But
even without active collusion, the surrender of validation leaves people
just as defenseless as *being* unarmed while retaining a right to
*become* armed.

Even if every person mines at the same level, the system amounts to
little more than majority rule if validation is not decentralized. There
are people perfectly willing to exploit this weakness.

e

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160303/10b4501e/attachment.sig>

From g.andrew.stone at gmail.com  Mon Mar  7 20:06:12 2016
From: g.andrew.stone at gmail.com (G. Andrew Stone)
Date: Mon, 7 Mar 2016 15:06:12 -0500
Subject: [bitcoin-dev]  Services bit for xthin blocks
Message-ID: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>

The Bitcoin Unlimited client needs a services bit to indicate that the node
is capable of communicating thin blocks.  We propose to use bit 4 as AFAIK
bit 3 is already earmarked for Segregated Witness.

Andrew
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/e2f1149f/attachment.html>

From greg at xiph.org  Mon Mar  7 20:51:00 2016
From: greg at xiph.org (Gregory Maxwell)
Date: Mon, 7 Mar 2016 20:51:00 +0000
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
Message-ID: <CAAS2fgQi1X4v9WxT1pnd_XSyE2b8hUZUv0z5A8cOEvw5RztOKw@mail.gmail.com>

On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> The Bitcoin Unlimited client needs a services bit to indicate that the node
> is capable of communicating thin blocks.  We propose to use bit 4 as AFAIK
> bit 3 is already earmarked for Segregated Witness.

Does this functionality change peer selection?  If not, the preferred
signaling mechanism is probably the one in BIP 130.

Otherwise, I think the standard method for getting numbers has been to
write a BIP documenting the usage. I don't know if that is intentional
or just how things have previously happened; and I don't have much of
an opinion on it.

From jameson.lopp at gmail.com  Sun Mar  6 20:04:32 2016
From: jameson.lopp at gmail.com (Jameson Lopp)
Date: Sun, 6 Mar 2016 15:04:32 -0500
Subject: [bitcoin-dev] BIP44 & BIP32 chain address look-ahead limits
Message-ID: <CADL_X_cFOknYejoQPRarwRxpFz5D8ffqfohh799NR7e2_Jgx4w@mail.gmail.com>

I recently ran into an issue while importing a Mycelium HD wallet where it
was not finding all of my funds - upon further investigation with Mycelium
devs we realized that the wallet was following the BIP44 spec correctly,
but BIP44 may have a flaw.

The problem was a result of my creating 16 transactions in Mycelium in a
fairly short timeframe, but the first 15 transactions ended up never
confirming while the 16th was confirmed. As a result, when I later
reimported the account from the master seed, the chain derivation stopped
upon hitting this large gap of unused addresses on the internal / change
chain.

BIP44 recommends that there need not be a lookahead on internal chains
"because internal chains receive only coins that come from the associated
external chains."
https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Address_gap_limit

BIP32 also notes that "the look-ahead for internal chains can be very
small, as no gaps are to be expected here."
https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#Full_wallet_sharing_m

It seems to me that there /is/ an edge case that can result in significant
gaps in internal chain address usage and as such, the recommendation should
be to look ahead on both external and internal chains when performing
account discovery. On a related note, the recommended look-ahead of 20 may
not be safe enough - perhaps it should be raised to 100 if not higher.

In addition to recommending a larger look-ahead, it may also be advisable
for BIP44 to recommend that wallets "fill in" gaps of unused chain
addresses by "looking back" from the current tip of the internal chain's
index when the wallet decides to create a new change address. This could
help mitigate the size of gaps caused by failed transactions.

- Jameson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160306/41fc1874/attachment.html>

From tier.nolan at gmail.com  Fri Mar  4 10:27:48 2016
From: tier.nolan at gmail.com (Tier Nolan)
Date: Fri, 4 Mar 2016 10:27:48 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <56D8A480.6040604@voskuil.org>
References: <201603021456.15820.luke@dashjr.org>
	<201603021542.29609.luke@dashjr.org> <56D71488.4080607@gmail.com>
	<CAE-z3OWA0sn+=+qqs8BtiBe7T9Qdb4G8XAS_bX4hScq225iZQQ@mail.gmail.com>
	<00e101d174b5$f2659060$d730b120$@voskuil.org>
	<20160302230213.GA888@muck> <56D8A480.6040604@voskuil.org>
Message-ID: <CAE-z3OVPcfA5UuSQ=425SOGa08f_uW1xOyDfF0KvehQt0g7BFA@mail.gmail.com>

An alternative soft fork would be to require that miners pay some of the
coinbase to a CLTV locked output (that is otherwise unlocked).  This allows
the release of the funds to be delayed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160304/c1de9387/attachment.html>

From tier.nolan at gmail.com  Mon Mar  7 21:09:12 2016
From: tier.nolan at gmail.com (Tier Nolan)
Date: Mon, 7 Mar 2016 21:09:12 +0000
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
Message-ID: <CAE-z3OWyzxSxyEma9MXnOzOcirea=HcR_gps20fDwGxVnxuZ+Q@mail.gmail.com>

These are the relevant info BIPs.

NODE_GETUTXO
https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki

NODE_BLOOM:
https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki

The relevant code is here:
https://github.com/bitcoin/bitcoin/blob/master/src/protocol.h#L228

The NODE_GETUTXO bit was included even though it is not supported by core.
(It is one of XT's features).

I think you need to be able to reasonably claim that the bit is useful and
will have actual users, before you can claim a bit.

You can also claim one of the free for all bits 24 - 31, but that is
supposed to be only temporary.

Giving a link to "thin blocks" would help promote discussion about its
merits.

On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> The Bitcoin Unlimited client needs a services bit to indicate that the
> node is capable of communicating thin blocks.  We propose to use bit 4 as
> AFAIK bit 3 is already earmarked for Segregated Witness.
>
> Andrew
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/48ace09c/attachment-0001.html>

From dagurvj+btclist at gmail.com  Mon Mar  7 21:10:33 2016
From: dagurvj+btclist at gmail.com (dagurval)
Date: Mon, 7 Mar 2016 22:10:33 +0100
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <CAAS2fgQi1X4v9WxT1pnd_XSyE2b8hUZUv0z5A8cOEvw5RztOKw@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
	<CAAS2fgQi1X4v9WxT1pnd_XSyE2b8hUZUv0z5A8cOEvw5RztOKw@mail.gmail.com>
Message-ID: <CALcNmJwY=pQuRpnb-MJ1QiME3mPUSe2KmHD7XykhX08yku9mhQ@mail.gmail.com>

Hi,

> Does this functionality change peer selection?

This bit will be used for selecting outgoing peers in Bitcoin XT.

On Mon, Mar 7, 2016 at 9:51 PM, Gregory Maxwell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > The Bitcoin Unlimited client needs a services bit to indicate that the
> node
> > is capable of communicating thin blocks.  We propose to use bit 4 as
> AFAIK
> > bit 3 is already earmarked for Segregated Witness.
>
> Does this functionality change peer selection?  If not, the preferred
> signaling mechanism is probably the one in BIP 130.
>
> Otherwise, I think the standard method for getting numbers has been to
> write a BIP documenting the usage. I don't know if that is intentional
> or just how things have previously happened; and I don't have much of
> an opinion on it.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/243473ae/attachment-0001.html>

From g.andrew.stone at gmail.com  Tue Mar  8 02:35:21 2016
From: g.andrew.stone at gmail.com (G. Andrew Stone)
Date: Mon, 7 Mar 2016 21:35:21 -0500
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <CALcNmJwY=pQuRpnb-MJ1QiME3mPUSe2KmHD7XykhX08yku9mhQ@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
	<CAAS2fgQi1X4v9WxT1pnd_XSyE2b8hUZUv0z5A8cOEvw5RztOKw@mail.gmail.com>
	<CALcNmJwY=pQuRpnb-MJ1QiME3mPUSe2KmHD7XykhX08yku9mhQ@mail.gmail.com>
Message-ID: <CAHUwRvv_UMoRhcwy7u2XLz19q3aKNfHXyTNbfaSUsEapFnH2kg@mail.gmail.com>

Included at the bottom of this mail is a BIP concerning our impending use
of a particular services bit.

I am making a good-faith effort to notify the community of this use and
follow the BIP submission rules with a correctly formatted BIP sent to Luke
jr.  He has informed me that such a BIP should be discussed on the mailing
list (which is this thread) and that the BIP should document the extreme
thin block protocol.

Not an unreasonable request, however while I personally respect the many
great accomplishments of individual engineers loosely affiliated with
"Core", Bitcoin Unlimited has our own process for documentation and
discussion on an uncensored forum located here:
https://bitco.in/forum/threads/buip010-passed-xtreme-thinblocks.774/.  We
would love to have any interested engineer join us there with ideas and
criticisms.

But since Bitcoin Unlimited already has a process, it would be redundant
and time consuming for us to adhere to your process.  If a "Core" engineer
would like to spend the time to move this BIP through your process I would
be eternally grateful and be willing to use a different bit or make other
changes that make mutual sense.  If not, then it is up to "Core" as a group
to decide whether they would like to preserve interoperability as the
protocol intended by avoiding use of bit 1<<4  (except to indicate the
presence of a compatible Xthin implementation), or whether they will force
clients to take the sub-version field into account when determining client
capabilities.

Regards,
Andrew Stone
Developer, Bitcoin Unlimited


<pre>
  BIP: XXX
  Title: Extreme thin block service bit
  Author: Andrew Stone <g.andrew.stone at gmail.com>
  Status:
  Type: Standards Track
  Created: 2016-03-07
</pre>

==Abstract==

Nodes need to communicate to each other whether or not thin block
communication messages are supported.

==Motivation==

# Ensure Satoshi client interoperability

==Rationale==

Clients will use this functionality to choose peers, so a service bit is
the most appropriate location.

==Specification==

# Bit (1 << 4) of the nServices flags enum located in protocol.h shall
indicate the ability to handle thin block communication messages.

==Backward compatibility==

All older clients are compatible with this change. Users and merchants
should not be impacted.

==Implementation==

/** nServices flags */
enum {
  ...
    // NODE_XTHIN means the node is capable of and willing to handle Xthin
messages.
    NODE_XTHIN = (1 << 4),
  ...
};

==Copyright==
This document is Public Domain.

On Mon, Mar 7, 2016 at 4:10 PM, dagurval <dagurvj+btclist at gmail.com> wrote:

> Hi,
>
> > Does this functionality change peer selection?
>
> This bit will be used for selecting outgoing peers in Bitcoin XT.
>
> On Mon, Mar 7, 2016 at 9:51 PM, Gregory Maxwell via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > The Bitcoin Unlimited client needs a services bit to indicate that the
>> node
>> > is capable of communicating thin blocks.  We propose to use bit 4 as
>> AFAIK
>> > bit 3 is already earmarked for Segregated Witness.
>>
>> Does this functionality change peer selection?  If not, the preferred
>> signaling mechanism is probably the one in BIP 130.
>>
>> Otherwise, I think the standard method for getting numbers has been to
>> write a BIP documenting the usage. I don't know if that is intentional
>> or just how things have previously happened; and I don't have much of
>> an opinion on it.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/8f3f62c2/attachment-0001.html>

From dscotese at litmocracy.com  Tue Mar  8 05:14:15 2016
From: dscotese at litmocracy.com (Dave Scotese)
Date: Mon, 7 Mar 2016 21:14:15 -0800
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <CAAS2fgQi1X4v9WxT1pnd_XSyE2b8hUZUv0z5A8cOEvw5RztOKw@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
	<CAAS2fgQi1X4v9WxT1pnd_XSyE2b8hUZUv0z5A8cOEvw5RztOKw@mail.gmail.com>
Message-ID: <CAGLBAheY-LWy1YjOZz9+-M3O0jO5H3iyogdXzBaXrnj6KGjY8A@mail.gmail.com>

I think a BIP is a good idea, but rather than making such a specific
proposal as "Let's use bit 4 to indicate communication of thin blocks," how
about a more general one like "Let's use bit(s?) 4(-5?) as user-agent
specific service bits so that if you customize your user-agent string, you
can use them for whatever you want"? That way, other clients can choose to
follow suit by saying so, or simply recognize the meaning (or lack thereof)
of those bits based on the user-agent setting.  This relieves future
development from the burden of agreeing on where to put what, and allows
time and utility to show when such a user-agent-specific service bit should
be moved into the protocol section of service bits.

PS I am not well versed in the creation of standards, but the reservation
of digital real estate for self-identified customization (bits, bytes, or
whatever that will never be used by the standard) such as what I'm
proposing seems like something that probably has a standard name.  "Public
provisioning" or something like that?

On Mon, Mar 7, 2016 at 12:51 PM, Gregory Maxwell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Mon, Mar 7, 2016 at 8:06 PM, G. Andrew Stone via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > The Bitcoin Unlimited client needs a services bit to indicate that the
> node
> > is capable of communicating thin blocks.  We propose to use bit 4 as
> AFAIK
> > bit 3 is already earmarked for Segregated Witness.
>
> Does this functionality change peer selection?  If not, the preferred
> signaling mechanism is probably the one in BIP 130.
>
> Otherwise, I think the standard method for getting numbers has been to
> write a BIP documenting the usage. I don't know if that is intentional
> or just how things have previously happened; and I don't have much of
> an opinion on it.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160307/d29951b7/attachment-0001.html>

From greg at xiph.org  Tue Mar  8 06:09:53 2016
From: greg at xiph.org (Gregory Maxwell)
Date: Tue, 8 Mar 2016 06:09:53 +0000
Subject: [bitcoin-dev] Fwd:  Services bit for xthin blocks
In-Reply-To: <CAAS2fgSf_qYaT7ahQTbmRoQpG57qgF26NKVuGGaEzpMZmCOFoA@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
	<CAAS2fgQi1X4v9WxT1pnd_XSyE2b8hUZUv0z5A8cOEvw5RztOKw@mail.gmail.com>
	<CAGLBAheY-LWy1YjOZz9+-M3O0jO5H3iyogdXzBaXrnj6KGjY8A@mail.gmail.com>
	<CAAS2fgSf_qYaT7ahQTbmRoQpG57qgF26NKVuGGaEzpMZmCOFoA@mail.gmail.com>
Message-ID: <CAAS2fgQxWi=vTov3NiNsEzvAU1eDDdH1p2M=7wf5Qw6g1Az_3w@mail.gmail.com>

On Tue, Mar 8, 2016 at 5:14 AM, Dave Scotese <dscotese at litmocracy.com> wrote:
> I think a BIP is a good idea, but rather than making such a specific
> proposal as "Let's use bit 4 to indicate communication of thin blocks," how
> about a more general one like "Let's use bit(s?) 4(-5?) as user-agent

Not communicated in address messages, so useless for discovery.

I think any feature which could do this could use the BIP130 approach instead.

From luke at dashjr.org  Tue Mar  8 17:19:19 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 8 Mar 2016 17:19:19 +0000
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <CAHUwRvv_UMoRhcwy7u2XLz19q3aKNfHXyTNbfaSUsEapFnH2kg@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
	<CALcNmJwY=pQuRpnb-MJ1QiME3mPUSe2KmHD7XykhX08yku9mhQ@mail.gmail.com>
	<CAHUwRvv_UMoRhcwy7u2XLz19q3aKNfHXyTNbfaSUsEapFnH2kg@mail.gmail.com>
Message-ID: <201603081719.20662.luke@dashjr.org>

On Tuesday, March 08, 2016 2:35:21 AM G. Andrew Stone via bitcoin-dev wrote:
> Not an unreasonable request, however while I personally respect the many
> great accomplishments of individual engineers loosely affiliated with
> "Core", Bitcoin Unlimited has our own process for documentation and
> discussion on an uncensored forum located here:
> https://bitco.in/forum/threads/buip010-passed-xtreme-thinblocks.774/. We
> would love to have any interested engineer join us there with ideas and
> criticisms.

Bitcoin-dev and the BIP process are not affiliated with Core at all. In fact, 
the BIP process was created by Amir Taaki, who was a libbitcoin developer 
(libbitcoin is not Core).

I encourage Bitcoin Unlimited to use the BIP process for cross-implementation 
standards like this, as do other implementations, so that you can benefit from 
peer review from the wider Bitcoin development community, as well as have a 
common repository for these standards.

Many BIPs are discussed on reddit in addition to this mailing list, and you 
would certainly remain free to discuss your own proposals on any forum you 
like - it isn't restricted to only this mailing list.

If this is of interest, I will be happy to try to go over and assign BIP 
numbers to the current (15?) BUIPs assuming they meet the basic requirements 
for such assignment (see BIP 1: 
https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki). Is there an 
easy way to get links to each of the BUIPs? I couldn't find BUIP 1 at all, for 
example.

Thanks,

Luke


From luke at dashjr.org  Tue Mar  8 19:04:27 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 8 Mar 2016 19:04:27 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
Message-ID: <201603081904.28687.luke@dashjr.org>

It has been about 1 month since BIP 2 finished receiving comments, so I 
believe it is an appropriate time to begin the process of moving it to Final 
Status. Toward this end, I have opened a pull request:

    https://github.com/bitcoin/bips/pull/350

The current requirement for this is that "the reference implementation is 
complete and accepted by the community". Given the vagueness of this criteria, 
I intend to move forward applying BIP 2's more specific criteria to itself:

> A process BIP may change status from Draft to Active when it achieves rough
> consensus on the mailing list. Such a proposal is said to have rough
> consensus if it has been open to discussion on the development mailing list
> for at least one month, and no person maintains any unaddressed
> substantiated objections to it. Addressed or obstructive objections may be
> ignored/overruled by general agreement that they have been sufficiently
> addressed, but clear reasoning must be given in such circumstances.

Furthermore, there is a reference implementation in the mentioned PR.

Please review the latest draft BIP and provide any objections ASAP.
If there are no outstanding objections on 2016 April 9th, I will consider the 
current draft to have reached rough consensus and update its Status to Final 
by merging the PR.

Thanks,

Luke

From bob_bitcoin at mcelrath.org  Tue Mar  8 22:05:07 2016
From: bob_bitcoin at mcelrath.org (Bob McElrath)
Date: Tue, 8 Mar 2016 22:05:07 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <5E6E8EFD-2BC0-47F6-8005-5A63821C4276@hashingit.com>
References: <201603021456.15820.luke@dashjr.org>
	<5E6E8EFD-2BC0-47F6-8005-5A63821C4276@hashingit.com>
Message-ID: <20160308220507.GA4388@mcelrath.org>

Dave Hudson via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:
> I think the biggest question here would be how would the difficulty
> retargeting be changed?  Without seeing the algorithm proposal it's difficult
> to assess the impact that it would have, but my intuition is that this is
> likely to be problematic.

I have no comment on whether this will be *needed* but there's a simple
algorithm that I haven't seen any coin adopt, that I think needs to be: the
critically damped harmonic oscillator:

    http://mathworld.wolfram.com/CriticallyDampedSimpleHarmonicMotion.html

In dynamical systems one does a derivative expansion.  Here we want to find the
first and second derivatives (in time) of the hashrate.  These can be determined
by a method of finite differences, or fancier algorithms which use a quadratic
or quartic polynomial approximation.  Two derivatives are generally all that is
needed, and the resulting dynamical system is a damped harmonic oscillator.  

A damped harmonic oscillator is basically how your car's shock absorbers work.
The relevant differential equation has two parameters: the oscillation frequency
and damping factor.  The maximum oscillation frequency is the block rate.  Any
oscillation faster than the block rate cannot be measured by block times.  The
damping rate is an exponential decay and for critical damping is twice the
oscillation frequency.

So, this is a zero parameter, optimal damping solution for a varying hashrate.
This is inherently a numeric approximation solution to a differential equation,
so questions of approximations for the hashrate enter, but that's all.  Weak
block proposals will be able to get better approximations to the hashrate.

If solving this problem is deemed desirable, I can put some time into this, or
direct others as to how to go about it.

--
Cheers, Bob McElrath

"For every complex problem, there is a solution that is simple, neat, and wrong."
    -- H. L. Mencken 


From luke at dashjr.org  Tue Mar  8 22:34:13 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 8 Mar 2016 22:34:13 +0000
Subject: [bitcoin-dev] Proposed BIP extension to BIP 0070
In-Reply-To: <CABqynx+gGnJ2AVByr1eKueSaohHtJVFsAVKrfS94StW2NzLWjw@mail.gmail.com>
References: <CABqynx+gGnJ2AVByr1eKueSaohHtJVFsAVKrfS94StW2NzLWjw@mail.gmail.com>
Message-ID: <201603082234.14398.luke@dashjr.org>

Is there a way for Joe Mobile Wallet User to upload a set of N PaymentRequests 
authenticated by his key to an untrusted server, which encrypts and passes 
them on in response to InvoiceRequests? Or does this necessarily require the 
recipient to be online?

On Tuesday, March 01, 2016 6:58:16 PM Justin Newton via bitcoin-dev wrote:
> The following draft BIP proposes an update to the Payment Protocol.
> 
> Motivation:
> 
> The motivation for defining this extension to the BIP70 Payment Protocol is
> to allow 2 parties to exchange payment information in a permissioned and
> encrypted way such that wallet address communication can become a more
> automated process. Additionally, this extension allows for the requestor of
> a PaymentRequest to supply a certificate and signature in order to
> facilitate identification for address release. This also allows
> for automated creation of off blockchain transaction logs that are human
> readable, containing who you transacted with, in addition to the
> information that it contains today.
> 
> The motivation for this extension to BIP70 is threefold:
> 
> 1. Ensure that the payment details can only be seen by the participants in
> the transaction, and not by any third party.
> 2. Enhance the Payment Protocol to allow for store and forward servers in
> order to allow, for example, mobile wallets to sign and serve
> Payment Requests.
> 3. Allow a sender of funds the option of sharing their identity with the
> receiver. This information could then be used to:
> 
>         * Make bitcoin logs more human readable
>         * Give the user the ability to decide who to release payment
> details to
>         * Allow an entity such as a political campaign to ensure donors
> match regulatory and legal requirements
>         * Allow for an open standards based way for regulated financial
> entities to meet regulatory requirements
>         * Automate the active exchange of payment addresses, so static
> addresses and BIP32 X-Pubs can be avoided to maintain privacy
> and convenience
> 
> In short we wanted to make bitcoin more human, while at the same time
> improving transaction privacy.
> 
> Full proposal here:
> 
> https://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension
> .mediawiki
> 
> We look forward to your thoughts and feedback on this proposal!
> 
> Justin

From macwhyte at gmail.com  Tue Mar  8 23:07:03 2016
From: macwhyte at gmail.com (James MacWhyte)
Date: Tue, 08 Mar 2016 23:07:03 +0000
Subject: [bitcoin-dev] Proposed BIP extension to BIP 0070
In-Reply-To: <201603082234.14398.luke@dashjr.org>
References: <CABqynx+gGnJ2AVByr1eKueSaohHtJVFsAVKrfS94StW2NzLWjw@mail.gmail.com>
	<201603082234.14398.luke@dashjr.org>
Message-ID: <CAH+Axy77qm0Ls3vNFxhbqfaG=PvraX92RqFPKZs7je=qNuSA6Q@mail.gmail.com>

Our BIP just defines protocol definitions, and doesn't really dictate how
people use them (we're coming up with a new title for the BIP, by the way,
to more accurately convey that). Using our definitions as building blocks,
someone could definitely accomplish what you described. For example, Joe
Mobile Wallet User's wallet could upload a slew of generic PaymentRequest
messages with signatures to prove his identity, and the server could then
create encryptedPaymentRequest messages using the server's key for
encryption and communication with the other party. In this case the server
would essentially be a proxy for the user without having actual access to
the user's private keys.

My personal goal with the protocol was to keep it extremely flexible so
developers could use it to build all different types of schemes while
keeping standard messages that could be forwarded between services if
needed. Does the above make sense?

James

On Tue, Mar 8, 2016 at 2:55 PM Luke Dashjr via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Is there a way for Joe Mobile Wallet User to upload a set of N
> PaymentRequests
> authenticated by his key to an untrusted server, which encrypts and passes
> them on in response to InvoiceRequests? Or does this necessarily require
> the
> recipient to be online?
>
> On Tuesday, March 01, 2016 6:58:16 PM Justin Newton via bitcoin-dev wrote:
> > The following draft BIP proposes an update to the Payment Protocol.
> >
> > Motivation:
> >
> > The motivation for defining this extension to the BIP70 Payment Protocol
> is
> > to allow 2 parties to exchange payment information in a permissioned and
> > encrypted way such that wallet address communication can become a more
> > automated process. Additionally, this extension allows for the requestor
> of
> > a PaymentRequest to supply a certificate and signature in order to
> > facilitate identification for address release. This also allows
> > for automated creation of off blockchain transaction logs that are human
> > readable, containing who you transacted with, in addition to the
> > information that it contains today.
> >
> > The motivation for this extension to BIP70 is threefold:
> >
> > 1. Ensure that the payment details can only be seen by the participants
> in
> > the transaction, and not by any third party.
> > 2. Enhance the Payment Protocol to allow for store and forward servers in
> > order to allow, for example, mobile wallets to sign and serve
> > Payment Requests.
> > 3. Allow a sender of funds the option of sharing their identity with the
> > receiver. This information could then be used to:
> >
> >         * Make bitcoin logs more human readable
> >         * Give the user the ability to decide who to release payment
> > details to
> >         * Allow an entity such as a political campaign to ensure donors
> > match regulatory and legal requirements
> >         * Allow for an open standards based way for regulated financial
> > entities to meet regulatory requirements
> >         * Automate the active exchange of payment addresses, so static
> > addresses and BIP32 X-Pubs can be avoided to maintain privacy
> > and convenience
> >
> > In short we wanted to make bitcoin more human, while at the same time
> > improving transaction privacy.
> >
> > Full proposal here:
> >
> >
> https://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension
> > .mediawiki
> >
> > We look forward to your thoughts and feedback on this proposal!
> >
> > Justin
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160308/069639e0/attachment-0001.html>

From macwhyte at gmail.com  Wed Mar  9 01:17:11 2016
From: macwhyte at gmail.com (James MacWhyte)
Date: Wed, 09 Mar 2016 01:17:11 +0000
Subject: [bitcoin-dev] Proposed BIP extension to BIP 0070
In-Reply-To: <CAH+Axy77qm0Ls3vNFxhbqfaG=PvraX92RqFPKZs7je=qNuSA6Q@mail.gmail.com>
References: <CABqynx+gGnJ2AVByr1eKueSaohHtJVFsAVKrfS94StW2NzLWjw@mail.gmail.com>
	<201603082234.14398.luke@dashjr.org>
	<CAH+Axy77qm0Ls3vNFxhbqfaG=PvraX92RqFPKZs7je=qNuSA6Q@mail.gmail.com>
Message-ID: <CAH+Axy7SsLohdeYkUbGUaX2JUf6ni5744stNbsTPJEEMtT9Xdg@mail.gmail.com>

I accidentally replied to Luke off-list, and this was his reply to my last
message:

"But wouldn't the server be a trusted third-party in this case?
I'm thinking it's very close to being possible for an untrusted server to do
this..."

If you are okay with anyone being able to view your PaymentRequest
messages, then you wouldn't need to encrypt them. Just upload them to the
server and let it give them away--no trust needed as long as you include a
signature. If you want only certain people to be able to see your messages,
then you need to denote those people in some way. In this situation, you
would do that by trading public keys and uploading encryptedPaymentRequest
messages to the server that only those people could read.

Using the encrypted method doesn't require the devices to be online, but it
does require at least one of the parties to know the other party's public
key. Do you have a specific use case in mind?

James

On Tue, Mar 8, 2016 at 3:07 PM James MacWhyte <macwhyte at gmail.com> wrote:

> Our BIP just defines protocol definitions, and doesn't really dictate how
> people use them (we're coming up with a new title for the BIP, by the way,
> to more accurately convey that). Using our definitions as building blocks,
> someone could definitely accomplish what you described. For example, Joe
> Mobile Wallet User's wallet could upload a slew of generic PaymentRequest
> messages with signatures to prove his identity, and the server could then
> create encryptedPaymentRequest messages using the server's key for
> encryption and communication with the other party. In this case the server
> would essentially be a proxy for the user without having actual access to
> the user's private keys.
>
> My personal goal with the protocol was to keep it extremely flexible so
> developers could use it to build all different types of schemes while
> keeping standard messages that could be forwarded between services if
> needed. Does the above make sense?
>
> James
>
> On Tue, Mar 8, 2016 at 2:55 PM Luke Dashjr via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Is there a way for Joe Mobile Wallet User to upload a set of N
>> PaymentRequests
>> authenticated by his key to an untrusted server, which encrypts and passes
>> them on in response to InvoiceRequests? Or does this necessarily require
>> the
>> recipient to be online?
>>
>> On Tuesday, March 01, 2016 6:58:16 PM Justin Newton via bitcoin-dev wrote:
>> > The following draft BIP proposes an update to the Payment Protocol.
>> >
>> > Motivation:
>> >
>> > The motivation for defining this extension to the BIP70 Payment
>> Protocol is
>> > to allow 2 parties to exchange payment information in a permissioned and
>> > encrypted way such that wallet address communication can become a more
>> > automated process. Additionally, this extension allows for the
>> requestor of
>> > a PaymentRequest to supply a certificate and signature in order to
>> > facilitate identification for address release. This also allows
>> > for automated creation of off blockchain transaction logs that are human
>> > readable, containing who you transacted with, in addition to the
>> > information that it contains today.
>> >
>> > The motivation for this extension to BIP70 is threefold:
>> >
>> > 1. Ensure that the payment details can only be seen by the participants
>> in
>> > the transaction, and not by any third party.
>> > 2. Enhance the Payment Protocol to allow for store and forward servers
>> in
>> > order to allow, for example, mobile wallets to sign and serve
>> > Payment Requests.
>> > 3. Allow a sender of funds the option of sharing their identity with the
>> > receiver. This information could then be used to:
>> >
>> >         * Make bitcoin logs more human readable
>> >         * Give the user the ability to decide who to release payment
>> > details to
>> >         * Allow an entity such as a political campaign to ensure donors
>> > match regulatory and legal requirements
>> >         * Allow for an open standards based way for regulated financial
>> > entities to meet regulatory requirements
>> >         * Automate the active exchange of payment addresses, so static
>> > addresses and BIP32 X-Pubs can be avoided to maintain privacy
>> > and convenience
>> >
>> > In short we wanted to make bitcoin more human, while at the same time
>> > improving transaction privacy.
>> >
>> > Full proposal here:
>> >
>> >
>> https://github.com/techguy613/bips/blob/master/bip-invoicerequest-extension
>> > .mediawiki
>> >
>> > We look forward to your thoughts and feedback on this proposal!
>> >
>> > Justin
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/bc71ef82/attachment.html>

From daniele.pinna at gmail.com  Wed Mar  9 01:27:22 2016
From: daniele.pinna at gmail.com (Daniele Pinna)
Date: Wed, 9 Mar 2016 02:27:22 +0100
Subject: [bitcoin-dev] bitcoin-dev Digest, Vol 10, Issue 13
In-Reply-To: <mailman.6363.1457481624.1673.bitcoin-dev@lists.linuxfoundation.org>
References: <mailman.6363.1457481624.1673.bitcoin-dev@lists.linuxfoundation.org>
Message-ID: <CAEgR2PFByXpd5C7X2NUJYt+UE3ji6dd6M5LfZGQvg-QQV7fLnw@mail.gmail.com>

This seems unnecessarily complicated ("don't use cannon to kill mosquito"
kind of thing). If the community were interested in a realtime hashrate
rebalancing proposal one could simply adjust difficulty at each new block
using the current method.

If faster relaxation in case of adversity is required, it suspect that it
would suffice to perform a weighted average of the previous 2016 blocks
instead of the standard averaging that is currently done. It should be
possible to find an optimal weighting based on historical interblock timing
data. I look into it over the next couple of days.

dpinna




> ------------------------------
>
> Message: 3
> Date: Tue, 8 Mar 2016 22:05:07 +0000
> From: Bob McElrath <bob_bitcoin at mcelrath.org>
> To: Dave Hudson <dave at hashingit.com>
> Cc: bitcoin-dev at lists.linuxfoundation.org
> Subject: Re: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
> Message-ID: <20160308220507.GA4388 at mcelrath.org>
> Content-Type: text/plain; charset=us-ascii
>
> Dave Hudson via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:
> > I think the biggest question here would be how would the difficulty
> > retargeting be changed?  Without seeing the algorithm proposal it's
> difficult
> > to assess the impact that it would have, but my intuition is that this is
> > likely to be problematic.
>
> I have no comment on whether this will be *needed* but there's a simple
> algorithm that I haven't seen any coin adopt, that I think needs to be: the
> critically damped harmonic oscillator:
>
>     http://mathworld.wolfram.com/CriticallyDampedSimpleHarmonicMotion.html
>
> In dynamical systems one does a derivative expansion.  Here we want to
> find the
> first and second derivatives (in time) of the hashrate.  These can be
> determined
> by a method of finite differences, or fancier algorithms which use a
> quadratic
> or quartic polynomial approximation.  Two derivatives are generally all
> that is
> needed, and the resulting dynamical system is a damped harmonic oscillator.
>
> A damped harmonic oscillator is basically how your car's shock absorbers
> work.
> The relevant differential equation has two parameters: the oscillation
> frequency
> and damping factor.  The maximum oscillation frequency is the block rate.
> Any
> oscillation faster than the block rate cannot be measured by block times.
> The
> damping rate is an exponential decay and for critical damping is twice the
> oscillation frequency.
>
> So, this is a zero parameter, optimal damping solution for a varying
> hashrate.
> This is inherently a numeric approximation solution to a differential
> equation,
> so questions of approximations for the hashrate enter, but that's all.
> Weak
> block proposals will be able to get better approximations to the hashrate.
>
> If solving this problem is deemed desirable, I can put some time into
> this, or
> direct others as to how to go about it.
>
> --
> Cheers, Bob McElrath
>
> "For every complex problem, there is a solution that is simple, neat, and
> wrong."
>     -- H. L. Mencken
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/9e70ecd6/attachment.html>

From bob_bitcoin at mcelrath.org  Wed Mar  9 06:17:50 2016
From: bob_bitcoin at mcelrath.org (Bob McElrath)
Date: Wed, 9 Mar 2016 06:17:50 +0000
Subject: [bitcoin-dev] bitcoin-dev Digest, Vol 10, Issue 13
In-Reply-To: <CAEgR2PFByXpd5C7X2NUJYt+UE3ji6dd6M5LfZGQvg-QQV7fLnw@mail.gmail.com>
References: <mailman.6363.1457481624.1673.bitcoin-dev@lists.linuxfoundation.org>
	<CAEgR2PFByXpd5C7X2NUJYt+UE3ji6dd6M5LfZGQvg-QQV7fLnw@mail.gmail.com>
Message-ID: <20160309061750.GB4388@mcelrath.org>

Daniele Pinna via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:
> This seems unnecessarily complicated ("don't use cannon to kill mosquito" kind
> of thing). If the community were interested in a realtime hashrate rebalancing
> proposal one could simply adjust difficulty at each new block using the current
> method.

That proposal is equivalent to an under-damped oscillator, and would still see
significant oscillation between blocks if miners were switching on and off
hardware.

> If faster relaxation in case of adversity is required, it suspect that it would
> suffice to perform a weighted average of the previous 2016 blocks instead of
> the standard averaging that is currently done. It should be possible to find an
> optimal weighting based on historical interblock timing data. I look into it
> over the next couple of days.

The optimal solution is the one I quote, and is well known, just not in the
bitcoin community.

"faster relaxation time" refers to the time constant of the exponential damping.
if you make it too fast, you create an over-damped oscillator.  The system
cannot measure oscillation faster than the block time, so damping on shorter
timescales is useless.  The optimal damping is given by the critically damped
oscillator.

Tonight at BitDevsNYC, Mike Wozniak pointed out that SPV wallets must also
calculate retargeting, but this is a terribly simple calculation, and while more
complex from a coding perspective, would not be noticeable in run-time of SPV
wallets.

--
Cheers, Bob McElrath

"For every complex problem, there is a solution that is simple, neat, and wrong."
    -- H. L. Mencken 


From truthcoin at gmail.com  Wed Mar  9 17:58:18 2016
From: truthcoin at gmail.com (Paul Sztorc)
Date: Wed, 9 Mar 2016 12:58:18 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <56D78E13.2050403@gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<20160302171418.GA5312@localhost.localdomain>
	<CAAS2fgQVreFoLiHf8NhHLbT8wpSBO4WHHRU10q6Fe=3johhaoA@mail.gmail.com>
	<56D78E13.2050403@gmail.com>
Message-ID: <56E0643A.8070201@gmail.com>


My recent conversations with miners revealed:

* Many have made "extra-large" hardware investments recently.
* Some wonder if we have just reached (or are quickly reaching) a
plateau of hardware-efficiency. This would mean that
hardware-investments might not be made in the critical period
immediately preceding the halving.

However, some good news:

* For Chinese miners, power is often purchased in fixed quantities, for
long-durations (of around 12 months, and these contracts -fortunately-
do overlap the July halving). Because power is difficult to store, this
implies that miners will *need* to mine, at all times, even at a loss.
So miners may continue to mine after the halving, no matter what.

On the other hand, miners can default on these contracts by simply
declaring bankruptcy, at which point their equipment would be entirely
unusable, by anyone, for a very long time.

So the problem is less likely, but more potentially-catastrophic.

Paul

On 3/2/2016 8:06 PM, Paul Sztorc wrote:
>
> On 3/2/2016 12:53 PM, Gregory Maxwell via bitcoin-dev wrote:
>> What you are proposing makes sense only if it was believed that a very
>> large difficulty drop would be very likely.
>>
>> This appears to be almost certainly untrue-- consider-- look how long
>> ago since hashrate was 50% of what it is now, or 25% of what it is
>> now-- this is strong evidence that supermajority of the hashrate is
>> equipment with state of the art power efficiency.
> I don't understand the relevance of this.
>
> In my view, we would prefer miners to invest in hardware just a mere
> 2016 blocks away from the halving. Instead, they've made them too soon.
> Assuming that miners are already located in low-power-cost areas, the
> difficulty will be quickly rising to compensate for "state of the art
> power efficiency".
>
> So it will have canceled out by July.
>
> If anything, the more efficient miners become today, the bigger our
> potential problem in July, because chip-manufacturers may have used up
> all of the easy efficiency-increasing moves, such that investments do
> not take place in June.
>
> Paul



From g.andrew.stone at gmail.com  Wed Mar  9 18:11:34 2016
From: g.andrew.stone at gmail.com (G. Andrew Stone)
Date: Wed, 9 Mar 2016 13:11:34 -0500
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <201603081719.20662.luke@dashjr.org>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
	<CALcNmJwY=pQuRpnb-MJ1QiME3mPUSe2KmHD7XykhX08yku9mhQ@mail.gmail.com>
	<CAHUwRvv_UMoRhcwy7u2XLz19q3aKNfHXyTNbfaSUsEapFnH2kg@mail.gmail.com>
	<201603081719.20662.luke@dashjr.org>
Message-ID: <CAHUwRvszz2XQ1DdfKYqrkQkxvPzkPSc=2R+LNDkDuvjyZ+U8FA@mail.gmail.com>

Thanks for your offer Luke, but we are happy with our own process and,
regardless of historical provenance, see this mailing list and the BIP
process as very Core specific for reasons that are too numerous to describe
here but should be obvious to anyone who has been aware of the last year of
Bitcoin history.

Andrew

On Tue, Mar 8, 2016 at 12:19 PM, Luke Dashjr <luke at dashjr.org> wrote:

> On Tuesday, March 08, 2016 2:35:21 AM G. Andrew Stone via bitcoin-dev
> wrote:
> > Not an unreasonable request, however while I personally respect the many
> > great accomplishments of individual engineers loosely affiliated with
> > "Core", Bitcoin Unlimited has our own process for documentation and
> > discussion on an uncensored forum located here:
> > https://bitco.in/forum/threads/buip010-passed-xtreme-thinblocks.774/. We
> > would love to have any interested engineer join us there with ideas and
> > criticisms.
>
> Bitcoin-dev and the BIP process are not affiliated with Core at all. In
> fact,
> the BIP process was created by Amir Taaki, who was a libbitcoin developer
> (libbitcoin is not Core).
>
> I encourage Bitcoin Unlimited to use the BIP process for
> cross-implementation
> standards like this, as do other implementations, so that you can benefit
> from
> peer review from the wider Bitcoin development community, as well as have a
> common repository for these standards.
>
> Many BIPs are discussed on reddit in addition to this mailing list, and you
> would certainly remain free to discuss your own proposals on any forum you
> like - it isn't restricted to only this mailing list.
>
> If this is of interest, I will be happy to try to go over and assign BIP
> numbers to the current (15?) BUIPs assuming they meet the basic
> requirements
> for such assignment (see BIP 1:
> https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki). Is there
> an
> easy way to get links to each of the BUIPs? I couldn't find BUIP 1 at all,
> for
> example.
>
> Thanks,
>
> Luke
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/e09b5b92/attachment.html>

From dave at hashingit.com  Wed Mar  9 18:30:19 2016
From: dave at hashingit.com (Dave Hudson)
Date: Wed, 9 Mar 2016 18:30:19 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <20160308220507.GA4388@mcelrath.org>
References: <201603021456.15820.luke@dashjr.org>
	<5E6E8EFD-2BC0-47F6-8005-5A63821C4276@hashingit.com>
	<20160308220507.GA4388@mcelrath.org>
Message-ID: <26355E0C-1DDC-4CBD-A044-788C9C135EA6@hashingit.com>

A damping-based design would seem like the obvious choice (I can think of a few variations on a theme here, but most are found in the realms of control theory somewhere).  The problem, though, is working working out a timeframe over which to run the derivative calculations.

The problem is the measurement of the hashrate, which is pretty inaccurate at best because even 2016 events isn't really enough (with a completely constant hash rate running indefinitely we'd see difficulty swings of up to +/- 5% even with the current algorithm).  In order to meaningfully react to a major loss of hashing we'd still need to be considering a window of probably 2 weeks.

My other concern is that if we allow quick retargets to lower difficulties then that seems likely to expose the chain to being gamed.  I'd need to think about this some more, but a few scenarios I was thinking about earlier this week appeared to risk making some types of selfish mining strategies quite a lot more profitable.

With all this said though I'll be very surprised if there's a huge drop in the hash rate come July.  The hash rate has jumped up by almost 70% in the last 6 to 7 months and that implies some pretty serious investments by miners who are quite aware of the halving.  My guess is that quite a lot of the baseline 30% has also been replaced in the same cycle.  These same miners were mining with a coin price around $250 last year so in terms of profitability I'm pretty sure that one around $400 won't be a huge concern.

I'm sure that there will be some very public "I'm done with mining" announcements from a few smaller miners come July, but I suspect the bulk of the network will have a relatively small blip and continue on its way.


Cheers,
Dave


> On 8 Mar 2016, at 22:05, Bob McElrath <bob_bitcoin at mcelrath.org> wrote:
> 
> Dave Hudson via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:
>> I think the biggest question here would be how would the difficulty
>> retargeting be changed?  Without seeing the algorithm proposal it's difficult
>> to assess the impact that it would have, but my intuition is that this is
>> likely to be problematic.
> 
> I have no comment on whether this will be *needed* but there's a simple
> algorithm that I haven't seen any coin adopt, that I think needs to be: the
> critically damped harmonic oscillator:
> 
>    http://mathworld.wolfram.com/CriticallyDampedSimpleHarmonicMotion.html
> 
> In dynamical systems one does a derivative expansion.  Here we want to find the
> first and second derivatives (in time) of the hashrate.  These can be determined
> by a method of finite differences, or fancier algorithms which use a quadratic
> or quartic polynomial approximation.  Two derivatives are generally all that is
> needed, and the resulting dynamical system is a damped harmonic oscillator.  
> 
> A damped harmonic oscillator is basically how your car's shock absorbers work.
> The relevant differential equation has two parameters: the oscillation frequency
> and damping factor.  The maximum oscillation frequency is the block rate.  Any
> oscillation faster than the block rate cannot be measured by block times.  The
> damping rate is an exponential decay and for critical damping is twice the
> oscillation frequency.
> 
> So, this is a zero parameter, optimal damping solution for a varying hashrate.
> This is inherently a numeric approximation solution to a differential equation,
> so questions of approximations for the hashrate enter, but that's all.  Weak
> block proposals will be able to get better approximations to the hashrate.
> 
> If solving this problem is deemed desirable, I can put some time into this, or
> direct others as to how to go about it.
> 
> --
> Cheers, Bob McElrath
> 
> "For every complex problem, there is a solution that is simple, neat, and wrong."
>    -- H. L. Mencken 
> 


From davidmanheim at gmail.com  Fri Mar  4 19:38:59 2016
From: davidmanheim at gmail.com (David Manheim)
Date: Fri, 4 Mar 2016 11:38:59 -0800
Subject: [bitcoin-dev] Proposing a (potentially less contentious) difficulty
	drop solution
Message-ID: <CAMsFVXnfLf5L4oMCCnydNsUK2M9=KbAX5syV5x8iKgWHz=C_hQ@mail.gmail.com>

Hi all,

I've been following this discussion closely. Unlike most of the
developers, I'm more of an economist and game theorist than
cryptographer, and I wanted to suggest a possible compromise solution.

Brief review of discussion so far, as background;
There is a clear split in the discussion on the list about the costs
and benefits of a potential solution. Most of this is because of
implicit disagreement about the probability of a stalled blockchain at
the halving, and how a change would open the door to worries about
future changes. That said, as Paul Sztorc noted, "This
halving-difficulty-drop problem can, with some bad luck, get quite
disastrous, very quickly." If it doesn't happen, however, the
solutions proposed unfairly give a bonus to miners, and speeding up
the chain for a while - which also potentially increases the odds of
block-splits during that time.

Lukejr suggested that "it would need some way to avoid its early
activation outside of such an emergency (which could possibly be
detected in code, in this case)." That means it would fork after the
halving, if and only if there was a stall. The problem with this is to
detect it, and how to retarget, given asynchronous nodes. I don't
think this can be avoided nicely without either  creating some
perverse incentives, or handing a large bonus to miners. Paul suggests
a very low retarget difficulty, which essentially gives a larger bonus
to miners until the next retarget; that's non-ideal. He also suggests
investigating dynamic retargeting, (This was proposed a while ago
here: http://www.truthcoin.info/blog/mining-heart-attack/ ) which
others note is unfairly changing the implicit contract.

The methods implemented by many altcoins with smooth / dynamic
retargeting are not really suitable directly - as noted, people didn't
sign up for dynamic retargeting, and there are stability issues. If
bitcoin's hash rate drops after the halving, it could be sudden and
drastic. Any solution I can foresee that prevents this leads to some
difficult to analyze incentives for the miners.

My proposal:
I think a simple solution splits the difference; a short temporary
dynamic difficulty retargeting after the halving. This allows for a
fix, while making it clear that the original ruless of bitcoin
shouldn't be discarded, and when they need to be altered, it will be a
minimal change. It also limits the period where perverse incentives
can exist, which minimizes their effects.

We don't know what difficultly is appropriate after the halving, but
can still allow a temporary dynamic difficult retargeting starting
then. Halving occurs at block 420,000; it will then be 1/3 of the way
to the next difficulty retarget. The remaining 1344 of those 2016
blocks can be used for a dynamic retarget, without changing the
schedule otherwise. The initial retarget difficulty would be 1/2 of
the previous one, as suggested by others, but it would very quickly
stabilize at the appropriate level, using essentially any dynamic
method - and so it would not stay low for long, unless necessary. One
potential downside is that the probability of a orphaned blocks
increases for a couple blocks. (That seems inevitable with any method
that might reduce difficulty and lead to faster block generation, but
by retargeting quickly, we limit that time frame.) At block 421344, it
reverts to using the current method - and that can use the entire last
2016 blocks, to smooth out the lower difficulty adjustment that
occurred.

(Conveniently, in the longer term, the same method could be used for
the 3 halvings after this one, with correspondingly shorter retarget
windows, since 210000 isn't divisible by 2016 - until we're down to
the 1.25btc coinbase reward, with 336 blocks until the next retarget.
The next halving could eliminate this; the coinbase reward would be
much less than mining fees by then, and halving difficulty would be
unneeded. This also means that the retarget about would be reduced in
the subsequent 2016 blocks each time, since the smaller retarget
window will still be averaged in with the earlier blocks.)

The only remaining question is what temporary retargeting method
should we use? I'm completely agnostic on this one, since I think it
doesn't make a huge difference, as long as there is a method chosen.

Short altcoin methods review, to make some options clear;
Smooth difficulty readjustment methods have been implemented by many
altcoins. The first of these seems to be Kimoto Gravity Well, which
does smoothing as follows; KGW = 1 + (0.7084 *
pow((double(PastBlocksMass)/double(144)), -1.228)); DigiByteCoin
tested this in the presence of discontinuities, and found it responded
too slowly. Instead, they created the so-called Digishield, which was
created explicitly to do smoothing in the presence of sudden shifts in
mining, without causing stalling - but uses much closer together
blocks to do so. See:
https://www.reddit.com/r/Digibyte/comments/1yn6t1/digibyte_v_20_code_name_digishield/
for more. Another such method is Heavycoin's temporal retargeting. Any
of these should be fine, since we don't need such fast response times.

I hope this is a useful potential compromise,
David Manheim

From henning.kopp at uni-ulm.de  Fri Mar  4 08:41:02 2016
From: henning.kopp at uni-ulm.de (Henning Kopp)
Date: Fri, 4 Mar 2016 09:41:02 +0100
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <CAK_HAC9v8ZuOKBQQZ4TJa2vdmEuOM-ykqEAMvaLgUn-Cr13Yww@mail.gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<CAK_HAC9v8ZuOKBQQZ4TJa2vdmEuOM-ykqEAMvaLgUn-Cr13Yww@mail.gmail.com>
Message-ID: <20160304084101.GA2352@banane.informatik.uni-ulm.de>

Hi,

> However, I think it could actually increase
> confidence in the system if the community is able to demonstrate a good
> process for making such decisions, and show that we can separate the
> meaningful underlying principles, such as the coin limit and overall
> inflation rate, from what is more akin to an implementation detail, as I
> consider the large-step reward reduction to be.

I do not think that a line can be drawn here. As far as I understood,
you think that the coin limit is a meaningful underlying principle
which should not be touched, whereas the halving of mining rewards is
an implementation detail. The two are very closely tied together and
changes to both of them would result in a hardfork, if I am not
mistaken.

Regarding the effects of the mining reward halving, there is a nice
paper from courtois:
http://arxiv.org/abs/1405.0534

All the best
Henning



On Thu, Mar 03, 2016 at 10:27:35AM -0800, Corey Haddad via bitcoin-dev wrote:
> Since the root cause of what you are trying to address is the reward
> having, I'd suggest considering an adjustment to the having schedule.
> Instead of their being a large supply shock every four years, perhaps the
> reward could drop every 52,500 blocks (yearly), or even at each difficulty
> adjustment, in such a way that the inflation curve is smoothed out.  The
> exponential decay rate would be preserved, so overall economic philosophy
> would be preserved.
> 
> I'm guessing hesitance to this approach would lie in a reluctance to tinker
> with Bitcoin's 'economic contract', and slippery slope concerns about might
> be the next change (21M?).  However, I think it could actually increase
> confidence in the system if the community is able to demonstrate a good
> process for making such decisions, and show that we can separate the
> meaningful underlying principles, such as the coin limit and overall
> inflation rate, from what is more akin to an implementation detail, as I
> consider the large-step reward reduction to be.
> 
> I'm not too worried about the impact of the having as is, but adjusting the
> economic parameter would be a safer and simpler way to address the concerns
> than to tinker with the difficulty targeting mechanism, which is at the
> heart of Bitcoin's security
> 
> On Wed, Mar 2, 2016 at 6:56 AM, Luke Dashjr via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> > We are coming up on the subsidy halving this July, and there have been some
> > concerns raised that a non-trivial number of miners could potentially drop
> > off
> > the network. This would result in a significantly longer block interval,
> > which
> > also means a higher per-block transaction volume, which could cause the
> > block
> > size limit to legitimately be hit much sooner than expected. Furthermore,
> > due
> > to difficulty adjustment being measured exclusively in blocks, the time
> > until
> > it adjusts to compensate would be prolonged.
> >
> > For example, if 50% of miners dropped off the network, blocks would be
> > every
> > 20 minutes on average and contain double the transactions they presently
> > do.
> > Even double would be approximately 850-900k, which potentially bumps up
> > against the hard limit when empty blocks are taken into consideration. This
> > situation would continue for a full month if no changes are made. If more
> > miners drop off the network, most of this becomes linearly worse, but due
> > to
> > hitting the block size limit, the backlog would grow indefinitely until the
> > adjustment occurs.
> >
> > To alleviate this risk, it seems reasonable to propose a hardfork to the
> > difficulty adjustment algorithm so it can adapt quicker to such a
> > significant
> > drop in mining rate. BtcDrak tells me he has well-tested code for this in
> > his
> > altcoin, which has seen some roller-coaster hashrates, so it may even be
> > possible to have such a proposal ready in time to be deployed alongside
> > SegWit
> > to take effect in time for the upcoming subsidy halving. If this slips, I
> > think it may be reasonable to push for at least code-readiness before July,
> > and possibly roll it into any other hardfork proposed before or around that
> > time.
> >
> > I am unaware of any reason this would be controversial, so if anyone has a
> > problem with such a change, please speak up sooner rather than later. Other
> > ideas or concerns are of course welcome as well.
> >
> > Thanks,
> >
> > Luke
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >

> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


-- 
Henning Kopp
Institute of Distributed Systems
Ulm University, Germany

Office: O27 - 3402
Phone: +49 731 50-24138
Web: http://www.uni-ulm.de/in/vs/~kopp

From bob_bitcoin at mcelrath.org  Wed Mar  9 20:21:36 2016
From: bob_bitcoin at mcelrath.org (Bob McElrath)
Date: Wed, 9 Mar 2016 20:21:36 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <26355E0C-1DDC-4CBD-A044-788C9C135EA6@hashingit.com>
References: <201603021456.15820.luke@dashjr.org>
	<5E6E8EFD-2BC0-47F6-8005-5A63821C4276@hashingit.com>
	<20160308220507.GA4388@mcelrath.org>
	<26355E0C-1DDC-4CBD-A044-788C9C135EA6@hashingit.com>
Message-ID: <20160309202135.GC4388@mcelrath.org>

Dave Hudson [dave at hashingit.com] wrote:
> A damping-based design would seem like the obvious choice (I can think of a
> few variations on a theme here, but most are found in the realms of control
> theory somewhere).  The problem, though, is working working out a timeframe
> over which to run the derivative calculations.

>From a measurement theory perspective this is straightforward.  Each block is a
measurement, and error propagation can be performed to derive an error on the
derivatives.

The statistical theory of Bitcoin's block timing is known as a Poisson Point
Process: https://en.wikipedia.org/wiki/Poisson_point_process or temporal point
process.  If you google those plus "estimation" you'll find a metric shit-ton of
literature on how to handle this.

> The problem is the measurement of the hashrate, which is pretty inaccurate at
> best because even 2016 events isn't really enough (with a completely constant
> hash rate running indefinitely we'd see difficulty swings of up to +/- 5% even
> with the current algorithm).  In order to meaningfully react to a major loss
> of hashing we'd still need to be considering a window of probably 2 weeks.

You don't want to assume it's constant in order to get a better measurement.
The assumption is clearly false.  But, errors can be calculated, and retargeting
can take errors into account, because no matter what we'll always be dealing
with a finite sample.

Personally I don't think difficulty target variations are such a big deal, if
the algorithm targets that over any long time interval, the average block time
is 10 min.  Bitcoin's current algorithm fails here, with increasing hashrate (as
we have), it issues coins faster than its assumed schedule.

--
Cheers, Bob McElrath

"For every complex problem, there is a solution that is simple, neat, and wrong."
    -- H. L. Mencken 


From truthcoin at gmail.com  Wed Mar  9 20:26:47 2016
From: truthcoin at gmail.com (Paul Sztorc)
Date: Wed, 9 Mar 2016 15:26:47 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <26355E0C-1DDC-4CBD-A044-788C9C135EA6@hashingit.com>
References: <201603021456.15820.luke@dashjr.org>
	<5E6E8EFD-2BC0-47F6-8005-5A63821C4276@hashingit.com>
	<20160308220507.GA4388@mcelrath.org>
	<26355E0C-1DDC-4CBD-A044-788C9C135EA6@hashingit.com>
Message-ID: <56E08707.8090306@gmail.com>

On 3/9/2016 1:30 PM, Dave Hudson via bitcoin-dev wrote:
> The hash rate has jumped up by almost 70% in the last 6 to 7 months and that implies some pretty serious investments by miners who are quite aware of the halving.
There are a few ways in which that information would be irrelevant:
[1.] It is possible that miners expect to breakeven before the halving.
[2.] It is also possible that miners earnestly believe that there will
be no problem -- however:
...  [2a.] This belief may be mistaken.
...  [2b.] Miners may be counting on Core Devs to fix any problems that
come up with anything, this one included.

Also, [3.] many miners believe that the price will increase around the
time of the halving, either for market-microstructure reasons or
marketing reasons. I, personally, think that the price is as likely to
go down as up.

On 3/9/2016 1:30 PM, Dave Hudson via bitcoin-dev wrote:
> These same miners were mining with a coin price around $250 last year so in terms of profitability I'm pretty sure that one around $400 won't be a huge concern.
For some miners, currently it costs $X in electricity per coin mined,
and $400 / 2 is less than X. I do not know how representative this
information is.

Paul


From truthcoin at gmail.com  Wed Mar  9 20:43:08 2016
From: truthcoin at gmail.com (Paul Sztorc)
Date: Wed, 9 Mar 2016 15:43:08 -0500
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <CA+XQW1gfnXxxCod6cL=caGnEc66YOvaF6SJL=omUbMqwLNDP7g@mail.gmail.com>
References: <201603021456.15820.luke@dashjr.org>
	<CAK_HAC9v8ZuOKBQQZ4TJa2vdmEuOM-ykqEAMvaLgUn-Cr13Yww@mail.gmail.com>
	<20160304084101.GA2352@banane.informatik.uni-ulm.de>
	<CA+XQW1gfnXxxCod6cL=caGnEc66YOvaF6SJL=omUbMqwLNDP7g@mail.gmail.com>
Message-ID: <56E08ADC.30403@gmail.com>

On 3/9/2016 3:18 PM, Henning Kopp via bitcoin-dev wrote:
> Hi,
>
> > However, I think it could actually increase
> > confidence in the system if the community is able to demonstrate a good
> > process for making such decisions, and show that we can separate the
> > meaningful underlying principles, such as the coin limit and overall
> > inflation rate, from what is more akin to an implementation detail, as I
> > consider the large-step reward reduction to be.
>
> I do not think that a line can be drawn here. As far as I understood,
> you think that the coin limit is a meaningful underlying principle
> which should not be touched, whereas the halving of mining rewards is
> an implementation detail. The two are very closely tied together and
> changes to both of them would result in a hardfork, if I am not
> mistaken.

I believe that you are mistaken.

The two are almost-completely unrelated, and (as Dr. Back has been
pointing out for a very long time now) the halving of mining rewards can
be modified with a soft fork.

http://www.truthcoin.info/blog/mining-heart-attack/#smooth-the-disinflation-out



From dave at hashingit.com  Wed Mar  9 23:24:15 2016
From: dave at hashingit.com (Dave Hudson)
Date: Wed, 9 Mar 2016 23:24:15 +0000
Subject: [bitcoin-dev] Hardfork to fix difficulty drop algorithm
In-Reply-To: <20160309202135.GC4388@mcelrath.org>
References: <201603021456.15820.luke@dashjr.org>
	<5E6E8EFD-2BC0-47F6-8005-5A63821C4276@hashingit.com>
	<20160308220507.GA4388@mcelrath.org>
	<26355E0C-1DDC-4CBD-A044-788C9C135EA6@hashingit.com>
	<20160309202135.GC4388@mcelrath.org>
Message-ID: <DD5ED99B-6127-4D9F-9E39-B623234281BA@hashingit.com>


> On 9 Mar 2016, at 20:21, Bob McElrath <bob_bitcoin at mcelrath.org> wrote:
> 
> Dave Hudson [dave at hashingit.com] wrote:
>> A damping-based design would seem like the obvious choice (I can think of a
>> few variations on a theme here, but most are found in the realms of control
>> theory somewhere).  The problem, though, is working working out a timeframe
>> over which to run the derivative calculations.
> 
> From a measurement theory perspective this is straightforward.  Each block is a
> measurement, and error propagation can be performed to derive an error on the
> derivatives.

Sure, but I think there are 2 problems:

1) My guess is that errors over anything but a long period are probably too large to be very useful.

2) We don't have a strong notion of time that is part of the consensus.  Sure, blocks have timestamps but they're very loosely controlled (can't be more than 2 hours ahead of what any validating node thinks the time might be).  Difficulty can't be calculated based on anything that's not part of the consensus data.

> The statistical theory of Bitcoin's block timing is known as a Poisson Point
> Process: https://en.wikipedia.org/wiki/Poisson_point_process or temporal point
> process.  If you google those plus "estimation" you'll find a metric shit-ton of
> literature on how to handle this.

Strictly it's a non-homogeneous Poisson Process, but I'm pretty familiar with the concept (Google threw one of my own blog posts back at me: http://hashingit.com/analysis/27-hash-rate-headaches, but I actually prefer this one: http://hashingit.com/analysis/30-finding-2016-blocks because most people seem to find it easier to visualize).

>> The problem is the measurement of the hashrate, which is pretty inaccurate at
>> best because even 2016 events isn't really enough (with a completely constant
>> hash rate running indefinitely we'd see difficulty swings of up to +/- 5% even
>> with the current algorithm).  In order to meaningfully react to a major loss
>> of hashing we'd still need to be considering a window of probably 2 weeks.
> 
> You don't want to assume it's constant in order to get a better measurement.
> The assumption is clearly false.  But, errors can be calculated, and retargeting
> can take errors into account, because no matter what we'll always be dealing
> with a finite sample.

Agreed, it's a thought experiment I ran in May 2014 (http://hashingit.com/analysis/28-reach-for-the-ear-defenders).  I found that many people's intuition is that there would be little or no difficulty changes in such a scenario, but the intuition isn't reliable.  Given a static hash rate the NHPP behaviour introduces a surprisingly large amount of noise (often much larger than any signal over a period of even weeks).  Any measurements in the order of even a few days has so much noise that it's practically unusable.  I just realized that unlike some of my other sims this one didn't make it to github; I'll fix that later this week.


Cheers,
Dave

From tier.nolan at gmail.com  Wed Mar  9 21:11:36 2016
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 9 Mar 2016 21:11:36 +0000
Subject: [bitcoin-dev] Services bit for xthin blocks
In-Reply-To: <CAHUwRvszz2XQ1DdfKYqrkQkxvPzkPSc=2R+LNDkDuvjyZ+U8FA@mail.gmail.com>
References: <CAHUwRvuR9qtYc+rVh1yPbQoESxm4m0r6a+Fd6VF=FuT0vom_HQ@mail.gmail.com>
	<CALcNmJwY=pQuRpnb-MJ1QiME3mPUSe2KmHD7XykhX08yku9mhQ@mail.gmail.com>
	<CAHUwRvv_UMoRhcwy7u2XLz19q3aKNfHXyTNbfaSUsEapFnH2kg@mail.gmail.com>
	<201603081719.20662.luke@dashjr.org>
	<CAHUwRvszz2XQ1DdfKYqrkQkxvPzkPSc=2R+LNDkDuvjyZ+U8FA@mail.gmail.com>
Message-ID: <CAE-z3OWMz0qHKDNFLGYEpd=c9j9aA7hU15VZn=LevWHgbEtnqA@mail.gmail.com>

On Wed, Mar 9, 2016 at 6:11 PM, G. Andrew Stone via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Thanks for your offer Luke, but we are happy with our own process and,
> regardless of historical provenance, see this mailing list and the BIP
> process as very Core specific for reasons that are too numerous to describe
> here but should be obvious to anyone who has been aware of the last year of
> Bitcoin history.
>

One of the advantages with the BIP process is that it means that there are
hashlocked descriptions of the specs available for people to implement
against.

The BIP process is not the same as getting a PR accepted into core.  It is
not a veto based process.  If you write the BIP and it doesn't have any
serious technical problems, then it will be accepted into the BIP repo.

Getting it marked as "final" is harder but I don't think that matters
much.  I don't think that core would actually use a service bit that was
claimed in a BIP, even if the BIP wasn't final.  Maybe in 20 years if thin
blocks aren't being used, they might recycle it.  It would be pretty
obviously an aggressive act otherwise.

The NODE_GETUTXO bit is a perfect example of that.  They don't think it is
a good idea, but they still accepted the claim on the bit, because there
are nodes actually using it.

On the other hand, the BIP git repository is hosted on the /bitcoin github
site, so in that context it can be seen as linked with core.  I wouldn't be
surprised if that specific objection was raised when it was moved from the
wiki to github.  Luke may be willing to change that if you think that would
be worth changing?

With regards to the proposal, the description on the forum link isn't
sufficient for an alternative client to implement it.  I had a look at the
thread and I think that this is the implementation?

https://github.com/ptschip/bitcoinxt/commit/7ea5854a3599851beffb1323544173f03d45373b

Is the intention here to simply reserve the bit for thin blocks usage or to
define the specification for inter-operation with other clients?

Perhaps there could be a process for claiming service bits as it can be
useful to claim a bit in advance of actually finalizing the feature.

- Claim bit with a reasonable justification (good faith intent to implement
and the bit is useful for the feature)
- Within 3 months have a finalized description of the feature that lets
other clients implement it
- Within 6 months have working software that deploys the feature
- After 6 months of it actually being in active use, the bit is "locked"
and stays assigned to that feature

There could be an expiry process if it ends up not being used after all.
Requiring a public description of the feature seems like a reasonable
requirement in exchange for the community assigning the service bit, but we
don't want to go to far.  There is no point in having lots of free bits
that end up never being used.  Worst case, the addr message could be
updated to add more bits.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160309/dba257b7/attachment-0001.html>

From mus at musalbas.com  Thu Mar 10 00:36:39 2016
From: mus at musalbas.com (Mustafa Al-Bassam)
Date: Thu, 10 Mar 2016 00:36:39 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <201603081904.28687.luke@dashjr.org>
References: <201603081904.28687.luke@dashjr.org>
Message-ID: <56E0C197.7040708@musalbas.com>

> the soft-fork does not become Final for as long as such a hard-fork
has potentially-majority support, or at most three months.
This wording is awkward. What is "potentially-majority"?

>A hard-fork BIP requires adoption from the entire Bitcoin economy,
particularly including those selling desirable goods and services in
exchange for bitcoin payments, as well as Bitcoin holders who wish to
spend or would spend their bitcoins (including selling for other
currencies) differently in the event of such a hard-fork.
What if one shop owner, for example, out of thousands, doesn't adapt the
hard-fork? It is expected, and should perhaps be encouraged, for a small
minority to not accept a hard fork, but by the wording of the BIP
("entire Bitcoin economy"), one shop owner can veto a hard-fork.

Mustafa

On 08/03/16 19:04, Luke Dashjr via bitcoin-dev wrote:
> It has been about 1 month since BIP 2 finished receiving comments, so I 
> believe it is an appropriate time to begin the process of moving it to Final 
> Status. Toward this end, I have opened a pull request:
>
>     https://github.com/bitcoin/bips/pull/350
>
> The current requirement for this is that "the reference implementation is 
> complete and accepted by the community". Given the vagueness of this criteria, 
> I intend to move forward applying BIP 2's more specific criteria to itself:
>
>> A process BIP may change status from Draft to Active when it achieves rough
>> consensus on the mailing list. Such a proposal is said to have rough
>> consensus if it has been open to discussion on the development mailing list
>> for at least one month, and no person maintains any unaddressed
>> substantiated objections to it. Addressed or obstructive objections may be
>> ignored/overruled by general agreement that they have been sufficiently
>> addressed, but clear reasoning must be given in such circumstances.
> Furthermore, there is a reference implementation in the mentioned PR.
>
> Please review the latest draft BIP and provide any objections ASAP.
> If there are no outstanding objections on 2016 April 9th, I will consider the 
> current draft to have reached rough consensus and update its Status to Final 
> by merging the PR.
>
> Thanks,
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From mus at musalbas.com  Thu Mar 10 00:37:46 2016
From: mus at musalbas.com (Mustafa Al-Bassam)
Date: Thu, 10 Mar 2016 00:37:46 +0000
Subject: [bitcoin-dev] BIP Process: Status, comments,
 and copyright licenses
In-Reply-To: <CABsx9T2X+2Vnwd3RJJvRpNKbO2S1kY8JS2YqHEKUmAhYSNpkBg@mail.gmail.com>
References: <201602012253.18009.luke@dashjr.org>
	<CABsx9T2X+2Vnwd3RJJvRpNKbO2S1kY8JS2YqHEKUmAhYSNpkBg@mail.gmail.com>
Message-ID: <56E0C1DA.4090804@musalbas.com>

It would be nice to decouple the venue, but even BIP 1 gives that
control to whoever controls the mailing list: "Following a discussion,
the proposal should be sent to the bitcoin-dev list and the BIP editor
with the draft BIP." (BIP 1)

A neater way to do it might be to replace references to the mailing list
with "public discussion medium" where "medium" can be defined as
something like any discussion forum frequented by the wider development
community, like the pull requests section of the BIP repo, conferences, etc.

On 02/02/16 15:58, Gavin Andresen via bitcoin-dev wrote:
> On Mon, Feb 1, 2016 at 5:53 PM, Luke Dashjr via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>
>     I've completed an initial draft of a BIP that provides
>     clarifications on the
>     Status field for BIPs, as well as adding the ability for public
>     comments on
>     them, and expanding the list of allowable BIP licenses.
>
>     https://github.com/luke-jr/bips/blob/bip-biprevised/bip-biprevised.mediawiki
>
>     I plan to open discussion of making this BIP an Active status
>     (along with BIP
>     123) a month after initial revisions have completed. Please
>     provide any
>     objections now, so I can try to address them now and enable
>     consensus to be
>     reached.
>
>  
>
> I like the more concrete definitions of the various statuses.
>
> I don't like the definition of "consensus".  I think the definition
> described gives too much centralized control to whoever controls the
> mailing list and the wiki.
>
> -- 
> --
> Gavin Andresen
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/d9bf3ae9/attachment.html>

From mus at musalbas.com  Thu Mar 10 14:02:15 2016
From: mus at musalbas.com (Mustafa Al-Bassam)
Date: Thu, 10 Mar 2016 14:02:15 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <201603100053.43822.luke@dashjr.org>
References: <201603081904.28687.luke@dashjr.org>
	<56E0BFDC.5070604@musalbas.com> <201603100053.43822.luke@dashjr.org>
Message-ID: <56E17E67.9040508@musalbas.com>



On 10/03/16 00:53, Luke Dashjr wrote:
> On Thursday, March 10, 2016 12:29:16 AM Mustafa Al-Bassam wrote:
>>> the soft-fork does not become Final for as long as such a hard-fork
>>> has potentially-majority support, or at most three months.
>> This wording is awkward. What is "potentially-majority"?
> A group that is large enough that it may constitute a majority.
> How can I reword this better/clearer?
"potentially has majority support"?
>
>>> A hard-fork BIP requires adoption from the entire Bitcoin economy,
>>> particularly including those selling desirable goods and services in
>>> exchange for bitcoin payments, as well as Bitcoin holders who wish to
>>> spend or would spend their bitcoins (including selling for other
>>> currencies) differently in the event of such a hard-fork.
>> What if one shop owner, for example, out of thousands, doesn't adapt the
>> hard-fork? It is expected, and should perhaps be encouraged, for a small
>> minority to not accept a hard fork, but by the wording of the BIP
>> ("entire Bitcoin economy"), one shop owner can veto a hard-fork.
> It's not the hard-fork they can veto (in this context, anyway), but the 
> progression of the BIP Status field. However, one shop cannot operate in a 
> vacuum: if they are indeed alone, they will soon find themselves no longer 
> selling in exchange for bitcoin payments, as nobody else would exist willing 
> to use the previous blockchain to pay them. If they are no longer selling, 
> they cease to meet the criteria here enabling their veto.
I think in general this sounds like a good definition for a hard-fork
becoming active. But I can envision a situation where someone will try
to be annoying about it and point to one instance of one buyer and one
seller using the blockchain to buy and sell from each other, or set one up.

> Luke


From jtimon at jtimon.cc  Thu Mar 10 15:46:57 2016
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 10 Mar 2016 16:46:57 +0100
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <56E0C197.7040708@musalbas.com>
References: <201603081904.28687.luke@dashjr.org>
	<56E0C197.7040708@musalbas.com>
Message-ID: <CABm2gDo5eLgr5DhESWp9Bg4JLAq9TS+PX8=PepKAi0tC+bxWSw@mail.gmail.com>

On Mar 10, 2016 02:04, "Mustafa Al-Bassam via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> >A hard-fork BIP requires adoption from the entire Bitcoin economy,
> particularly including those selling desirable goods and services in
> exchange for bitcoin payments, as well as Bitcoin holders who wish to
> spend or would spend their bitcoins (including selling for other
> currencies) differently in the event of such a hard-fork.
> What if one shop owner, for example, out of thousands, doesn't adapt the
> hard-fork? It is expected, and should perhaps be encouraged, for a small
> minority to not accept a hard fork, but by the wording of the BIP
> ("entire Bitcoin economy"), one shop owner can veto a hard-fork.

No, the hardfork can still happen, but if a small group remains using the
old chain (a single person will likely abandon it very soon), then it
cannot be said that deployment was universal and thus the hardfork BIP
doesn't move to the final state. As long as there's users using the old
chain, a hardfork BIP shouldn't become final if I understood BIP2
correctly.

In other words,  uncontroversial hardfork bips can make it to the final
state once deployed, controversial hardforks may never become universally
deployed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/519eb1e0/attachment.html>

From jtimon at jtimon.cc  Thu Mar 10 15:59:32 2016
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 10 Mar 2016 16:59:32 +0100
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <56E17E67.9040508@musalbas.com>
References: <201603081904.28687.luke@dashjr.org>
	<56E0BFDC.5070604@musalbas.com>
	<201603100053.43822.luke@dashjr.org>
	<56E17E67.9040508@musalbas.com>
Message-ID: <CABm2gDogqtOkgtjWNY6vD_Cu=dnoATtLHBS+-E8BtrNTOsPCSg@mail.gmail.com>

On Mar 10, 2016 16:51, "Mustafa Al-Bassam via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I think in general this sounds like a good definition for a hard-fork
> becoming active. But I can envision a situation where someone will try
> to be annoying about it and point to one instance of one buyer and one
> seller using the blockchain to buy and sell from each other, or set one
up.

And all the attacker will achieve is preventing a field on a text file on
github from moving from "active" to "final".
Seems pretty stupid. Why would an attacker care so much about this? Is
there any way the attacker can make gains or harm bitcoin with this attack?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/ff14b0b1/attachment.html>

From mus at musalbas.com  Thu Mar 10 16:28:43 2016
From: mus at musalbas.com (Mustafa Al-Bassam)
Date: Thu, 10 Mar 2016 16:28:43 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <CABm2gDogqtOkgtjWNY6vD_Cu=dnoATtLHBS+-E8BtrNTOsPCSg@mail.gmail.com>
References: <201603081904.28687.luke@dashjr.org>
	<56E0BFDC.5070604@musalbas.com> <201603100053.43822.luke@dashjr.org>
	<56E17E67.9040508@musalbas.com>
	<CABm2gDogqtOkgtjWNY6vD_Cu=dnoATtLHBS+-E8BtrNTOsPCSg@mail.gmail.com>
Message-ID: <56E1A0BB.5090804@musalbas.com>



On 10/03/16 15:59, Jorge Tim?n wrote:
>
>
> On Mar 10, 2016 16:51, "Mustafa Al-Bassam via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>
> > I think in general this sounds like a good definition for a hard-fork
> > becoming active. But I can envision a situation where someone will try
> > to be annoying about it and point to one instance of one buyer and one
> > seller using the blockchain to buy and sell from each other, or set
> one up.
>
> And all the attacker will achieve is preventing a field on a text file
> on github from moving from "active" to "final".
> Seems pretty stupid. Why would an attacker care so much about this? Is
> there any way the attacker can make gains or harm bitcoin with this
> attack?
>
It's extremely naive to think that just because you can't think of an
incentive for a reason for an attack to do this, an attacker will never
to do this. There are many people that would be willing to spend some
time to cause some trouble for the enjoyment of it, if the attack is
free to execute.

The fact that it takes very little time and effort to prevent a BIP from
reaching final status, means that in an base of millions of users it's
guaranteed that some disgruntled or bored person out there will attack
it, even if it's for the lulz.

To reasonably expect that any hark fork - including an uncontroversial
one - will be adapted by every single person in a ecosystem of millions
of people, is wishful thinking and the BIP may as well say "hard fork
BIPs shall never reach final status."
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/3356a3f8/attachment.html>

From mus at musalbas.com  Thu Mar 10 16:33:40 2016
From: mus at musalbas.com (Mustafa Al-Bassam)
Date: Thu, 10 Mar 2016 16:33:40 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <56E1A0BB.5090804@musalbas.com>
References: <201603081904.28687.luke@dashjr.org>
	<56E0BFDC.5070604@musalbas.com> <201603100053.43822.luke@dashjr.org>
	<56E17E67.9040508@musalbas.com>
	<CABm2gDogqtOkgtjWNY6vD_Cu=dnoATtLHBS+-E8BtrNTOsPCSg@mail.gmail.com>
	<56E1A0BB.5090804@musalbas.com>
Message-ID: <56E1A1E4.60908@musalbas.com>

By the way, on that basis it might be a good idea to introduce an extra
status called "deployed" to indicate when a hard fork has reached a
super-majority and is being used by the economy in practice, but not the
whole economy.

On 10/03/16 16:28, Mustafa Al-Bassam wrote:
>
>
> On 10/03/16 15:59, Jorge Tim?n wrote:
>>
>>
>> On Mar 10, 2016 16:51, "Mustafa Al-Bassam via bitcoin-dev"
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> > I think in general this sounds like a good definition for a hard-fork
>> > becoming active. But I can envision a situation where someone will try
>> > to be annoying about it and point to one instance of one buyer and one
>> > seller using the blockchain to buy and sell from each other, or set
>> one up.
>>
>> And all the attacker will achieve is preventing a field on a text
>> file on github from moving from "active" to "final".
>> Seems pretty stupid. Why would an attacker care so much about this?
>> Is there any way the attacker can make gains or harm bitcoin with
>> this attack?
>>
> It's extremely naive to think that just because you can't think of an
> incentive for a reason for an attack to do this, an attacker will
> never to do this. There are many people that would be willing to spend
> some time to cause some trouble for the enjoyment of it, if the attack
> is free to execute.
>
> The fact that it takes very little time and effort to prevent a BIP
> from reaching final status, means that in an base of millions of users
> it's guaranteed that some disgruntled or bored person out there will
> attack it, even if it's for the lulz.
>
> To reasonably expect that any hark fork - including an uncontroversial
> one - will be adapted by every single person in a ecosystem of
> millions of people, is wishful thinking and the BIP may as well say
> "hard fork BIPs shall never reach final status."

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/96b12109/attachment-0001.html>

From luke at dashjr.org  Thu Mar 10 16:43:59 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 10 Mar 2016 16:43:59 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <56E17E67.9040508@musalbas.com>
References: <201603081904.28687.luke@dashjr.org>
	<201603100053.43822.luke@dashjr.org>
	<56E17E67.9040508@musalbas.com>
Message-ID: <201603101644.00799.luke@dashjr.org>

On Thursday, March 10, 2016 2:02:15 PM Mustafa Al-Bassam wrote:
> On 10/03/16 00:53, Luke Dashjr wrote:
> > On Thursday, March 10, 2016 12:29:16 AM Mustafa Al-Bassam wrote:
> >>> A hard-fork BIP requires adoption from the entire Bitcoin economy,
> >>> particularly including those selling desirable goods and services in
> >>> exchange for bitcoin payments, as well as Bitcoin holders who wish to
> >>> spend or would spend their bitcoins (including selling for other
> >>> currencies) differently in the event of such a hard-fork.
> >> 
> >> What if one shop owner, for example, out of thousands, doesn't adapt the
> >> hard-fork? It is expected, and should perhaps be encouraged, for a small
> >> minority to not accept a hard fork, but by the wording of the BIP
> >> ("entire Bitcoin economy"), one shop owner can veto a hard-fork.
> > 
> > It's not the hard-fork they can veto (in this context, anyway), but the
> > progression of the BIP Status field. However, one shop cannot operate in
> > a vacuum: if they are indeed alone, they will soon find themselves no
> > longer selling in exchange for bitcoin payments, as nobody else would
> > exist willing to use the previous blockchain to pay them. If they are no
> > longer selling, they cease to meet the criteria here enabling their
> > veto.
> 
> I think in general this sounds like a good definition for a hard-fork
> becoming active. But I can envision a situation where someone will try
> to be annoying about it and point to one instance of one buyer and one
> seller using the blockchain to buy and sell from each other, or set one up.

In this scenario, it would seem the previous Bitcoin is alive any working, and 
that the hard-fork has failed. How to resolve such a split is outside the 
scope of the BIP process IMO.

Luke

From jtimon at jtimon.cc  Thu Mar 10 18:30:22 2016
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 10 Mar 2016 19:30:22 +0100
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <56E1A0BB.5090804@musalbas.com>
References: <201603081904.28687.luke@dashjr.org>
	<56E0BFDC.5070604@musalbas.com>
	<201603100053.43822.luke@dashjr.org>
	<56E17E67.9040508@musalbas.com>
	<CABm2gDogqtOkgtjWNY6vD_Cu=dnoATtLHBS+-E8BtrNTOsPCSg@mail.gmail.com>
	<56E1A0BB.5090804@musalbas.com>
Message-ID: <CABm2gDqCVmmYAefoSTC0XajYQ=0t0E2OjxzsJ9iW_vGQzmb0iw@mail.gmail.com>

On Mar 10, 2016 17:28, "Mustafa Al-Bassam" <mus at musalbas.com> wrote:
>
> The fact that it takes very little time and effort to prevent a BIP from
reaching final status, means that in an base of millions of users it's
guaranteed that some disgruntled or bored person out there will attack it,
even if it's for the lulz.

I still fail to see the harm caused by this attack. At some point the
attacker will get bored of laughing even if the attack has a small costs
(which I'm not that sure it is).

> To reasonably expect that any hark fork - including an uncontroversial
one - will be adapted by every single person in a ecosystem of millions of
people, is wishful thinking and the BIP may as well say "hard fork BIPs
shall never reach final status."

This is what seem to have happened with uncontroversial softforks in the
past. Why is wishful thinking to expect the same for uncontroversial
hardforks?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/39b8d101/attachment.html>

From macwhyte at gmail.com  Thu Mar 10 21:43:29 2016
From: macwhyte at gmail.com (James MacWhyte)
Date: Thu, 10 Mar 2016 21:43:29 +0000
Subject: [bitcoin-dev] BIP75 - Out of Band Address Exchange
Message-ID: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>

Hi everyone,

Our BIP (officially proposed on March 1) has tentatively been assigned
number 75. Also, the title has been changed to "Out of Band Address
Exchange using Payment Protocol Encryption" to be more accurate.

We thought it would be good to take this opportunity to add some optional
fields to the BIP70 paymentDetails message. The new fields are:
subtractable fee (give permission to the sender to use some of the
requested amount towards the transaction fee), fee per kb (the minimum fee
required to be accepted as zeroconf), and replace by fee (whether or not a
transaction with the RBF flag will be accepted with zeroconf). I know it
doesn't make much sense for merchants to accept RBF with zeroconf, so that
last one might be used more to explicitly refuse RBF transactions (and
allow the automation of choosing a setting based on who you are transacting
with).

I see BIP75 as a general modernization of BIP70, so I think it should be
fine to include these extensions in the new BIP, even though these fields
are not specific to the features we are proposing. Please take a look at
the relevant section and let me know if anyone has any concerns:
https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails

The BIP70 extensions page in our fork has also been updated.

Thanks!

James
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160310/f5ce8ae6/attachment.html>

From andreas at schildbach.de  Fri Mar 11 11:54:52 2016
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 11 Mar 2016 12:54:52 +0100
Subject: [bitcoin-dev] BIP75 - Out of Band Address Exchange
In-Reply-To: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>
References: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>
Message-ID: <nbublk$d1f$1@ger.gmane.org>

I think it's a bad idea to pollute the original idea of this BIP with
other extensions. Other extensions should go to separate BIPs,
especially since methods to clarify the fee have nothing to do with
secure and authenticated bi-directional BIP70 communication.


On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:
> Hi everyone,
> 
> Our BIP (officially proposed on March 1) has tentatively been assigned
> number 75. Also, the title has been changed to "Out of Band Address
> Exchange using Payment Protocol Encryption" to be more accurate.
> 
> We thought it would be good to take this opportunity to add some
> optional fields to the BIP70 paymentDetails message. The new fields are:
> subtractable fee (give permission to the sender to use some of the
> requested amount towards the transaction fee), fee per kb (the minimum
> fee required to be accepted as zeroconf), and replace by fee (whether or
> not a transaction with the RBF flag will be accepted with zeroconf). I
> know it doesn't make much sense for merchants to accept RBF with
> zeroconf, so that last one might be used more to explicitly refuse RBF
> transactions (and allow the automation of choosing a setting based on
> who you are transacting with).
> 
> I see BIP75 as a general modernization of BIP70, so I think it should be
> fine to include these extensions in the new BIP, even though these
> fields are not specific to the features we are proposing. Please take a
> look at the relevant section and let me know if anyone has any concerns:
> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails
> 
> The BIP70 extensions page in our fork has also been updated.
> 
> Thanks!
> 
> James 
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 



From justin at netki.com  Fri Mar 11 22:43:48 2016
From: justin at netki.com (Justin Newton)
Date: Fri, 11 Mar 2016 14:43:48 -0800
Subject: [bitcoin-dev] BIP75 - Out of Band Address Exchange
In-Reply-To: <nbublk$d1f$1@ger.gmane.org>
References: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>
	<nbublk$d1f$1@ger.gmane.org>
Message-ID: <CABqynxK+bdh=6_RbE0c4KXwrTz=f47Ddn=C-iTSEMwZKBPUQdA@mail.gmail.com>

I think we would be open to either leaving them in, or doing a separate
BIP.  What do others think?  I?d prefer to keep them together if the
changes are non-controversial just to cut down on #of BIP?s, but thats not
a strong preference.

On Fri, Mar 11, 2016 at 3:54 AM, Andreas Schildbach via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I think it's a bad idea to pollute the original idea of this BIP with
> other extensions. Other extensions should go to separate BIPs,
> especially since methods to clarify the fee have nothing to do with
> secure and authenticated bi-directional BIP70 communication.
>
>
> On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:
> > Hi everyone,
> >
> > Our BIP (officially proposed on March 1) has tentatively been assigned
> > number 75. Also, the title has been changed to "Out of Band Address
> > Exchange using Payment Protocol Encryption" to be more accurate.
> >
> > We thought it would be good to take this opportunity to add some
> > optional fields to the BIP70 paymentDetails message. The new fields are:
> > subtractable fee (give permission to the sender to use some of the
> > requested amount towards the transaction fee), fee per kb (the minimum
> > fee required to be accepted as zeroconf), and replace by fee (whether or
> > not a transaction with the RBF flag will be accepted with zeroconf). I
> > know it doesn't make much sense for merchants to accept RBF with
> > zeroconf, so that last one might be used more to explicitly refuse RBF
> > transactions (and allow the automation of choosing a setting based on
> > who you are transacting with).
> >
> > I see BIP75 as a general modernization of BIP70, so I think it should be
> > fine to include these extensions in the new BIP, even though these
> > fields are not specific to the features we are proposing. Please take a
> > look at the relevant section and let me know if anyone has any concerns:
> >
> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails
> >
> > The BIP70 extensions page in our fork has also been updated.
> >
> > Thanks!
> >
> > James
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 

Justin W. Newton
Founder/CEO
Netki, Inc.

justin at netki.com
+1.818.261.4248
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160311/4de2c325/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: PastedGraphic-1.tiff
Type: image/tiff
Size: 10972 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160311/4de2c325/attachment-0001.tiff>

From macwhyte at gmail.com  Fri Mar 11 19:32:12 2016
From: macwhyte at gmail.com (James MacWhyte)
Date: Fri, 11 Mar 2016 19:32:12 +0000
Subject: [bitcoin-dev] BIP75 - Out of Band Address Exchange
In-Reply-To: <nbublk$d1f$1@ger.gmane.org>
References: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>
	<nbublk$d1f$1@ger.gmane.org>
Message-ID: <CAH+Axy5usVrkKb5w65evJceeR5WG8giHxtZ7uyDwePyRxjbBig@mail.gmail.com>

That's a valid point, and one we had thought of, which is why I wanted to
get everyone's opinion. I agree the proposed field extensions have nothing
to do with encryption, but does it make sense to propose a completely
separate BIP for such a small thing? If that is the accepted way to go, we
can split it into two and make a separate proposal.

On Fri, Mar 11, 2016 at 5:48 AM Andreas Schildbach via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I think it's a bad idea to pollute the original idea of this BIP with
> other extensions. Other extensions should go to separate BIPs,
> especially since methods to clarify the fee have nothing to do with
> secure and authenticated bi-directional BIP70 communication.
>
>
> On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:
> > Hi everyone,
> >
> > Our BIP (officially proposed on March 1) has tentatively been assigned
> > number 75. Also, the title has been changed to "Out of Band Address
> > Exchange using Payment Protocol Encryption" to be more accurate.
> >
> > We thought it would be good to take this opportunity to add some
> > optional fields to the BIP70 paymentDetails message. The new fields are:
> > subtractable fee (give permission to the sender to use some of the
> > requested amount towards the transaction fee), fee per kb (the minimum
> > fee required to be accepted as zeroconf), and replace by fee (whether or
> > not a transaction with the RBF flag will be accepted with zeroconf). I
> > know it doesn't make much sense for merchants to accept RBF with
> > zeroconf, so that last one might be used more to explicitly refuse RBF
> > transactions (and allow the automation of choosing a setting based on
> > who you are transacting with).
> >
> > I see BIP75 as a general modernization of BIP70, so I think it should be
> > fine to include these extensions in the new BIP, even though these
> > fields are not specific to the features we are proposing. Please take a
> > look at the relevant section and let me know if anyone has any concerns:
> >
> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails
> >
> > The BIP70 extensions page in our fork has also been updated.
> >
> > Thanks!
> >
> > James
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160311/12e2977c/attachment.html>

From andreas at schildbach.de  Sat Mar 12 14:40:11 2016
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sat, 12 Mar 2016 15:40:11 +0100
Subject: [bitcoin-dev] BIP75 - Out of Band Address Exchange
In-Reply-To: <CAH+Axy5usVrkKb5w65evJceeR5WG8giHxtZ7uyDwePyRxjbBig@mail.gmail.com>
References: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>
	<nbublk$d1f$1@ger.gmane.org>
	<CAH+Axy5usVrkKb5w65evJceeR5WG8giHxtZ7uyDwePyRxjbBig@mail.gmail.com>
Message-ID: <nc19ni$mnr$1@ger.gmane.org>

Yes, it makes sense. A BIP is something people refer to, either just by
its number or by URL, and with multiple orthogonal "sub-BIPs" it's
difficult to refer to. We have this problem with BIP32 already -- all HD
wallets implement the derivation part of BIP32 but almost none do
implement the hierarchy part (and use BIP43/44 instead). I tried to
split up BIP32 into two BIPs later (without any content changes), but it
was declined because of its final state.

There is no harm in using a BIP only for a small thing, BIP numbers are
infinite.


On 03/11/2016 08:32 PM, James MacWhyte via bitcoin-dev wrote:
> That's a valid point, and one we had thought of, which is why I wanted
> to get everyone's opinion. I agree the proposed field extensions have
> nothing to do with encryption, but does it make sense to propose a
> completely separate BIP for such a small thing? If that is the accepted
> way to go, we can split it into two and make a separate proposal.
> 
> On Fri, Mar 11, 2016 at 5:48 AM Andreas Schildbach via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
>     I think it's a bad idea to pollute the original idea of this BIP with
>     other extensions. Other extensions should go to separate BIPs,
>     especially since methods to clarify the fee have nothing to do with
>     secure and authenticated bi-directional BIP70 communication.
> 
> 
>     On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:
>     > Hi everyone,
>     >
>     > Our BIP (officially proposed on March 1) has tentatively been assigned
>     > number 75. Also, the title has been changed to "Out of Band Address
>     > Exchange using Payment Protocol Encryption" to be more accurate.
>     >
>     > We thought it would be good to take this opportunity to add some
>     > optional fields to the BIP70 paymentDetails message. The new
>     fields are:
>     > subtractable fee (give permission to the sender to use some of the
>     > requested amount towards the transaction fee), fee per kb (the minimum
>     > fee required to be accepted as zeroconf), and replace by fee
>     (whether or
>     > not a transaction with the RBF flag will be accepted with zeroconf). I
>     > know it doesn't make much sense for merchants to accept RBF with
>     > zeroconf, so that last one might be used more to explicitly refuse RBF
>     > transactions (and allow the automation of choosing a setting based on
>     > who you are transacting with).
>     >
>     > I see BIP75 as a general modernization of BIP70, so I think it
>     should be
>     > fine to include these extensions in the new BIP, even though these
>     > fields are not specific to the features we are proposing. Please
>     take a
>     > look at the relevant section and let me know if anyone has any
>     concerns:
>     >
>     https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails
>     >
>     > The BIP70 extensions page in our fork has also been updated.
>     >
>     > Thanks!
>     >
>     > James
>     >
>     >
>     > _______________________________________________
>     > bitcoin-dev mailing list
>     > bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     >
> 
> 
>     _______________________________________________
>     bitcoin-dev mailing list
>     bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 



From andreas at schildbach.de  Sat Mar 12 15:00:17 2016
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sat, 12 Mar 2016 16:00:17 +0100
Subject: [bitcoin-dev] BIP75 - Out of Band Address Exchange
In-Reply-To: <CABqynxK+bdh=6_RbE0c4KXwrTz=f47Ddn=C-iTSEMwZKBPUQdA@mail.gmail.com>
References: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>
	<nbublk$d1f$1@ger.gmane.org>
	<CABqynxK+bdh=6_RbE0c4KXwrTz=f47Ddn=C-iTSEMwZKBPUQdA@mail.gmail.com>
Message-ID: <nc1at9$8gi$1@ger.gmane.org>

Replying to the "fee" part of BIP75 (which as already noted should go to
a different BIP number imho):

It makes to sense to let the payee define a fee *rate*. The payee
doesn't know anything about how the payer's wallet is structured. In
extreme cases, as a payer I would keep all my tiny UTXOs (which would be
unspendable in a economic way) for the one payee who is willing to pay a
high enough rate...

Rather, I propose an absolute amount that the payee is willing to cover
should be declared.

Also, in order to avoid disputes I suggest the amount should be deducted
from the BIP70 payment message amount already. A wallet which
understands BIP75fee would add these two up for *display* puposes only.
The wallet should continue to use the existing fee policies. If it can
send the amount as specified by BIP70 and the fee is below the BIP75fee
amount, it would not mention any fees to the user. If it exceeds, it
would display just the exceeding amount.




On 03/11/2016 11:43 PM, Justin Newton via bitcoin-dev wrote:
> I think we would be open to either leaving them in, or doing a separate
> BIP.  What do others think?  I?d prefer to keep them together if the
> changes are non-controversial just to cut down on #of BIP?s, but thats
> not a strong preference.
> 
> On Fri, Mar 11, 2016 at 3:54 AM, Andreas Schildbach via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
>     I think it's a bad idea to pollute the original idea of this BIP with
>     other extensions. Other extensions should go to separate BIPs,
>     especially since methods to clarify the fee have nothing to do with
>     secure and authenticated bi-directional BIP70 communication.
> 
> 
>     On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:
>     > Hi everyone,
>     >
>     > Our BIP (officially proposed on March 1) has tentatively been assigned
>     > number 75. Also, the title has been changed to "Out of Band Address
>     > Exchange using Payment Protocol Encryption" to be more accurate.
>     >
>     > We thought it would be good to take this opportunity to add some
>     > optional fields to the BIP70 paymentDetails message. The new
>     fields are:
>     > subtractable fee (give permission to the sender to use some of the
>     > requested amount towards the transaction fee), fee per kb (the minimum
>     > fee required to be accepted as zeroconf), and replace by fee
>     (whether or
>     > not a transaction with the RBF flag will be accepted with zeroconf). I
>     > know it doesn't make much sense for merchants to accept RBF with
>     > zeroconf, so that last one might be used more to explicitly refuse RBF
>     > transactions (and allow the automation of choosing a setting based on
>     > who you are transacting with).
>     >
>     > I see BIP75 as a general modernization of BIP70, so I think it
>     should be
>     > fine to include these extensions in the new BIP, even though these
>     > fields are not specific to the features we are proposing. Please
>     take a
>     > look at the relevant section and let me know if anyone has any
>     concerns:
>     >
>     https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails
>     >
>     > The BIP70 extensions page in our fork has also been updated.
>     >
>     > Thanks!
>     >
>     > James
>     >
>     >
>     > _______________________________________________
>     > bitcoin-dev mailing list
>     > bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     >
> 
> 
>     _______________________________________________
>     bitcoin-dev mailing list
>     bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> 
> 
> -- 
> 
> Justin W. Newton
> Founder/CEO
> Netki, Inc.
> 
> justin at netki.com <mailto:justin at netki.com>
> +1.818.261.4248 <tel:+1.818.261.4248>
> 
> 
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 



From laanwj at gmail.com  Mon Mar 14 11:18:33 2016
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Mon, 14 Mar 2016 12:18:33 +0100
Subject: [bitcoin-dev] Proposed release schedule 0.13.0
Message-ID: <20160314111833.GA13529@amethyst.visucore.com>

Proposed release schedule for 0.13.0:

2015-05-01
-----------
- Open Transifex translations for 0.13
- Soft translation string freeze (no large or unnecessary string changes until release)
- Finalize and close translations for 0.11

2015-05-15
-----------
- Feature freeze (bug fixes only until release)
- Translation string freeze (no more source language changes until release)

2016-06-06
-----------
- Split off `0.13` branch from `master`
- Start RC cycle, tag and release `0.13.0rc1`
- Start merging for 0.14 on master branch

2016-07-01
-----------
- Release 0.13.0 final (aim)


From laanwj at gmail.com  Wed Mar 16 11:42:02 2016
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Wed, 16 Mar 2016 12:42:02 +0100
Subject: [bitcoin-dev] Proposed release schedule 0.13.0
In-Reply-To: <20160314111833.GA13529@amethyst.visucore.com>
References: <20160314111833.GA13529@amethyst.visucore.com>
Message-ID: <20160316114202.GA28038@amethyst.visucore.com>

On Mon, Mar 14, 2016 at 12:18:33PM +0100, Wladimir J. van der Laan wrote:
> Proposed release schedule for 0.13.0:
> 
> 2015-05-01
> 2015-05-15

Obviously these are 2016, not 2015.

More active tracking here:
https://github.com/bitcoin/bitcoin/issues/7679
https://github.com/bitcoin/bitcoin/milestones/0.13.0


From btcdrak at gmail.com  Wed Mar 16 20:43:09 2016
From: btcdrak at gmail.com (Btc Drak)
Date: Wed, 16 Mar 2016 20:43:09 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <201603081904.28687.luke@dashjr.org>
References: <201603081904.28687.luke@dashjr.org>
Message-ID: <CADJgMzt1BUHo9_tVJF-LG_kkGdR88NVeqXaz9itLN21=R763Xw@mail.gmail.com>

I have an objection about "BIP comments" in BIP2. I think BIPs should be
self contained, but the specification recommends posting comments to the
Bitcoin Wiki (bitcoin.it). I think this is a bad idea and external sources
are bound to go stale over time as can be evidenced by a number of existing
BIPs which link to external content that has long since expired. Comments
should be made instead using the Wiki feature at bitcoin/bips itself (which
can be enabled in the administration settings).

On Tue, Mar 8, 2016 at 7:04 PM, Luke Dashjr via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> It has been about 1 month since BIP 2 finished receiving comments, so I
> believe it is an appropriate time to begin the process of moving it to
> Final
> Status. Toward this end, I have opened a pull request:
>
>     https://github.com/bitcoin/bips/pull/350
>
> The current requirement for this is that "the reference implementation is
> complete and accepted by the community". Given the vagueness of this
> criteria,
> I intend to move forward applying BIP 2's more specific criteria to itself:
>
> > A process BIP may change status from Draft to Active when it achieves
> rough
> > consensus on the mailing list. Such a proposal is said to have rough
> > consensus if it has been open to discussion on the development mailing
> list
> > for at least one month, and no person maintains any unaddressed
> > substantiated objections to it. Addressed or obstructive objections may
> be
> > ignored/overruled by general agreement that they have been sufficiently
> > addressed, but clear reasoning must be given in such circumstances.
>
> Furthermore, there is a reference implementation in the mentioned PR.
>
> Please review the latest draft BIP and provide any objections ASAP.
> If there are no outstanding objections on 2016 April 9th, I will consider
> the
> current draft to have reached rough consensus and update its Status to
> Final
> by merging the PR.
>
> Thanks,
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160316/b562838a/attachment.html>

From luke at dashjr.org  Wed Mar 16 22:24:30 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 16 Mar 2016 22:24:30 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <CADJgMzt1BUHo9_tVJF-LG_kkGdR88NVeqXaz9itLN21=R763Xw@mail.gmail.com>
References: <201603081904.28687.luke@dashjr.org>
	<CADJgMzt1BUHo9_tVJF-LG_kkGdR88NVeqXaz9itLN21=R763Xw@mail.gmail.com>
Message-ID: <201603162224.32315.luke@dashjr.org>

On Wednesday, March 16, 2016 8:43:09 PM Btc Drak wrote:
> I have an objection about "BIP comments" in BIP2. I think BIPs should be
> self contained, but the specification recommends posting comments to the
> Bitcoin Wiki (bitcoin.it). I think this is a bad idea and external sources
> are bound to go stale over time as can be evidenced by a number of existing
> BIPs which link to external content that has long since expired. Comments
> should be made instead using the Wiki feature at bitcoin/bips itself (which
> can be enabled in the administration settings).

BIP Comments are not a part of the BIP itself, merely post-completion notes 
from various external parties. So having them external does not make the BIP 
any less self-contained. Right now, this information takes the form of 
reddit/forum comments, IRC chats, etc.

It is important that the forum for comments have a low barrier of use. The 
Bitcoin Wiki requires only a request for editing privileges, whereas GitHub 
wiki would require reading and agreeing to a lengthy Terms of Service 
contract.

In terms of staleness, the Wiki has been shown to stand the test of time, and 
is frankly less likely to move than the GitHub repository.

The BIP process originated on the Wiki, and was only moved to GitHub because 
stronger moderation was needed (eg, to prevent random other people from 
editing someone else's BIP; number self-assignments; etc). Such moderation is 
not only unnecessary for BIP Comments, but would be an outright nuisance.

I hope this addresses all your concerns and we can move forward with BIP 2 
unmodified?

(On another note, I wonder if we should recommend non-reference implementation 
lists/links be moved to BIP Comments rather than constantly revising the BIPs 
with them...)

Luke

From macwhyte at gmail.com  Thu Mar 17 01:23:09 2016
From: macwhyte at gmail.com (James MacWhyte)
Date: Thu, 17 Mar 2016 01:23:09 +0000
Subject: [bitcoin-dev] BIP75 - Out of Band Address Exchange
In-Reply-To: <nc1at9$8gi$1@ger.gmane.org>
References: <CAH+Axy6WVtb8Eib0aqS4Pp=zpjnsrDBbWRMmmBrJOZ3rFQAXww@mail.gmail.com>
	<nbublk$d1f$1@ger.gmane.org>
	<CABqynxK+bdh=6_RbE0c4KXwrTz=f47Ddn=C-iTSEMwZKBPUQdA@mail.gmail.com>
	<nc1at9$8gi$1@ger.gmane.org>
Message-ID: <CAH+Axy6R5m2DTOpm=-u8kUf8LhwUEkPMJinST-5cATa2zVXxxg@mail.gmail.com>

We have removed the BIP70 field extensions from this BIP and will save that
for another time. A PR to add our documentation to the main repo has been
submitted.

James

On Sat, Mar 12, 2016 at 8:36 AM Andreas Schildbach via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Replying to the "fee" part of BIP75 (which as already noted should go to
> a different BIP number imho):
>
> It makes to sense to let the payee define a fee *rate*. The payee
> doesn't know anything about how the payer's wallet is structured. In
> extreme cases, as a payer I would keep all my tiny UTXOs (which would be
> unspendable in a economic way) for the one payee who is willing to pay a
> high enough rate...
>
> Rather, I propose an absolute amount that the payee is willing to cover
> should be declared.
>
> Also, in order to avoid disputes I suggest the amount should be deducted
> from the BIP70 payment message amount already. A wallet which
> understands BIP75fee would add these two up for *display* puposes only.
> The wallet should continue to use the existing fee policies. If it can
> send the amount as specified by BIP70 and the fee is below the BIP75fee
> amount, it would not mention any fees to the user. If it exceeds, it
> would display just the exceeding amount.
>
>
>
>
> On 03/11/2016 11:43 PM, Justin Newton via bitcoin-dev wrote:
> > I think we would be open to either leaving them in, or doing a separate
> > BIP.  What do others think?  I?d prefer to keep them together if the
> > changes are non-controversial just to cut down on #of BIP?s, but thats
> > not a strong preference.
> >
> > On Fri, Mar 11, 2016 at 3:54 AM, Andreas Schildbach via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org
> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >
> >     I think it's a bad idea to pollute the original idea of this BIP with
> >     other extensions. Other extensions should go to separate BIPs,
> >     especially since methods to clarify the fee have nothing to do with
> >     secure and authenticated bi-directional BIP70 communication.
> >
> >
> >     On 03/10/2016 10:43 PM, James MacWhyte via bitcoin-dev wrote:
> >     > Hi everyone,
> >     >
> >     > Our BIP (officially proposed on March 1) has tentatively been
> assigned
> >     > number 75. Also, the title has been changed to "Out of Band Address
> >     > Exchange using Payment Protocol Encryption" to be more accurate.
> >     >
> >     > We thought it would be good to take this opportunity to add some
> >     > optional fields to the BIP70 paymentDetails message. The new
> >     fields are:
> >     > subtractable fee (give permission to the sender to use some of the
> >     > requested amount towards the transaction fee), fee per kb (the
> minimum
> >     > fee required to be accepted as zeroconf), and replace by fee
> >     (whether or
> >     > not a transaction with the RBF flag will be accepted with
> zeroconf). I
> >     > know it doesn't make much sense for merchants to accept RBF with
> >     > zeroconf, so that last one might be used more to explicitly refuse
> RBF
> >     > transactions (and allow the automation of choosing a setting based
> on
> >     > who you are transacting with).
> >     >
> >     > I see BIP75 as a general modernization of BIP70, so I think it
> >     should be
> >     > fine to include these extensions in the new BIP, even though these
> >     > fields are not specific to the features we are proposing. Please
> >     take a
> >     > look at the relevant section and let me know if anyone has any
> >     concerns:
> >     >
> >
> https://github.com/techguy613/bips/blob/master/bip-0075.mediawiki#Extending_BIP70_PaymentDetails
> >     >
> >     > The BIP70 extensions page in our fork has also been updated.
> >     >
> >     > Thanks!
> >     >
> >     > James
> >     >
> >     >
> >     > _______________________________________________
> >     > bitcoin-dev mailing list
> >     > bitcoin-dev at lists.linuxfoundation.org
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >     >
> >
> >
> >     _______________________________________________
> >     bitcoin-dev mailing list
> >     bitcoin-dev at lists.linuxfoundation.org
> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>
> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >
> >
> >
> > --
> >
> > Justin W. Newton
> > Founder/CEO
> > Netki, Inc.
> >
> > justin at netki.com <mailto:justin at netki.com>
> > +1.818.261.4248 <tel:+1.818.261.4248>
> >
> >
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160317/240febd4/attachment-0001.html>

From morcos at gmail.com  Fri Mar 18 19:43:41 2016
From: morcos at gmail.com (Alex Morcos)
Date: Fri, 18 Mar 2016 15:43:41 -0400
Subject: [bitcoin-dev] New Soft Fork Deployment: CSV (BIP's 68, 112, 113)
Message-ID: <CAPWm=eWhwphyex=m51KGjQmzoP3Yedt6_+As1o9wEr-A-+X+Sg@mail.gmail.com>

Following on my earlier message
<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-March/012485.html>,
I am happy to announce a new soft fork to be deployed using BIP 9
<https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki> - Version
bits.

Please review BIP 9
<https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki> as it has
been updated for information on how Version bits soft forks activate.

This deployment is being referred to as CSV (CheckSequenceVerify) and will
activate the following 3 BIPS as consensus rules:
BIP 68 <https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki> -
Relative lock-time using consensus-enforced sequence numbers
BIP 112 <https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki> -
CHECKSEQUENCEVERIFY
BIP 113 <https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki> -
Median time-past as endpoint for lock-time calculations

These BIP's have been updated with the deployment information:
bit: 0
startTime: 1462060800 "May 1st, 2016"   (mainnet)
           1456790400 "March 1st, 2016" (testnet)
endTime:   1493596800 "May 1st, 2017"   (mainnet and testnet)


Bitcoin Core will release 0.11.3 and 0.12.1 software which implements these
soft forks in the near future.


Thanks,
Alex
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160318/1286d40a/attachment.html>

From tomz at freedommail.ch  Fri Mar 18 11:59:36 2016
From: tomz at freedommail.ch (Tom)
Date: Fri, 18 Mar 2016 11:59:36 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <201603162224.32315.luke@dashjr.org>
References: <201603081904.28687.luke@dashjr.org>
	<CADJgMzt1BUHo9_tVJF-LG_kkGdR88NVeqXaz9itLN21=R763Xw@mail.gmail.com>
	<201603162224.32315.luke@dashjr.org>
Message-ID: <5484529.39fntvhB9c@garp>

On Wednesday 16 Mar 2016 22:24:30 Luke Dashjr via bitcoin-dev wrote:
> It is important that the forum for comments have a low barrier of use. The 
> Bitcoin Wiki requires only a request for editing privileges, whereas GitHub 
> wiki would require reading and agreeing to a lengthy Terms of Service
> contract.

I'd argue that neither of those two qualifies in that case.

I second BTCDraks' objection.



From btcdrak at gmail.com  Fri Mar 18 09:42:16 2016
From: btcdrak at gmail.com (Btc Drak)
Date: Fri, 18 Mar 2016 09:42:16 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <201603162224.32315.luke@dashjr.org>
References: <201603081904.28687.luke@dashjr.org>
	<CADJgMzt1BUHo9_tVJF-LG_kkGdR88NVeqXaz9itLN21=R763Xw@mail.gmail.com>
	<201603162224.32315.luke@dashjr.org>
Message-ID: <CADJgMzsc1znp2tXxHa+LFmeZUnHxEcD+rfexg=5rG1T4=fN07A@mail.gmail.com>

On Wed, Mar 16, 2016 at 10:24 PM, Luke Dashjr <luke at dashjr.org> wrote:

> BIP Comments are not a part of the BIP itself, merely post-completion notes
> from various external parties. So having them external does not make the
> BIP
> any less self-contained. Right now, this information takes the form of
> reddit/forum comments, IRC chats, etc.
>

BIP2 does not state the comments section is where discussion happens for
the BIP, but for a sort of final summary.


> It is important that the forum for comments have a low barrier of use. The
> Bitcoin Wiki requires only a request for editing privileges, whereas GitHub
> wiki would require reading and agreeing to a lengthy Terms of Service
> contract.
>

Seems weak, it's much easier to sign up for a Github account and most have
one already. It's certainly easier than either paying to get edit
privileges on the Bitcoin Wiki find someone to convince you're genuine an
obscure IRC channel.


> In terms of staleness, the Wiki has been shown to stand the test of time,
> and
> is frankly less likely to move than the GitHub repository.
>
> The BIP process originated on the Wiki, and was only moved to GitHub
> because
> stronger moderation was needed (eg, to prevent random other people from
> editing someone else's BIP; number self-assignments; etc). Such moderation
> is
> not only unnecessary for BIP Comments, but would be an outright nuisance.
>

I'm not sure that is the reason why, but in any case, Github is a more
sensible place because of the collaborative features which is why they
became the centre of OSS software development for hundreds of thousands of
projects.


> I hope this addresses all your concerns and we can move forward with BIP 2
> unmodified?
>

I am sorry but it has not. I still strongly object to using the Bitcoin
Wiki or any external source source for the commentary part of BIP2. I
believe it should be done on using the Wiki feature at bitcoin/bips. If
that is not acceptable, then I would suggest a separate page in the bip
assets folder, called bip<nnnn>/comments.md. On a side note, more complex
reference implementation code should be stored in that folder too.


> (On another note, I wonder if we should recommend non-reference
> implementation
> lists/links be moved to BIP Comments rather than constantly revising the
> BIPs
> with them...)
>

Certainly those could be on the comments page.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160318/092da883/attachment.html>

From luke at dashjr.org  Fri Mar 18 19:34:52 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 18 Mar 2016 19:34:52 +0000
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <CADJgMzsc1znp2tXxHa+LFmeZUnHxEcD+rfexg=5rG1T4=fN07A@mail.gmail.com>
References: <201603081904.28687.luke@dashjr.org>
	<201603162224.32315.luke@dashjr.org>
	<CADJgMzsc1znp2tXxHa+LFmeZUnHxEcD+rfexg=5rG1T4=fN07A@mail.gmail.com>
Message-ID: <201603181934.54684.luke@dashjr.org>

On Friday, March 18, 2016 9:42:16 AM Btc Drak wrote:
> On Wed, Mar 16, 2016 at 10:24 PM, Luke Dashjr <luke at dashjr.org> wrote:
> > BIP Comments are not a part of the BIP itself, merely post-completion
> > notes from various external parties. So having them external does not
> > make the BIP
> > any less self-contained. Right now, this information takes the form of
> > reddit/forum comments, IRC chats, etc.
> 
> BIP2 does not state the comments section is where discussion happens for
> the BIP, but for a sort of final summary.

Yes, discussion for the BIP still happens on the mailing list.

> > It is important that the forum for comments have a low barrier of use.
> > The Bitcoin Wiki requires only a request for editing privileges, whereas
> > GitHub wiki would require reading and agreeing to a lengthy Terms of
> > Service contract.
> 
> Seems weak, it's much easier to sign up for a Github account and most have
> one already. It's certainly easier than either paying to get edit
> privileges on the Bitcoin Wiki find someone to convince you're genuine an
> obscure IRC channel.

Weak? What does that even mean? GitHub's terms are no trivial list. It's not a 
matter of "easy", but whether you're willing to agree to the terms or not - 
and people should be free to participate without doing so. The Bitcoin Wiki 
has never had a problem with whitelisting people, and isn't exclusively 
available via IRC.

> > In terms of staleness, the Wiki has been shown to stand the test of time,
> > and
> > is frankly less likely to move than the GitHub repository.
> > 
> > The BIP process originated on the Wiki, and was only moved to GitHub
> > because
> > stronger moderation was needed (eg, to prevent random other people from
> > editing someone else's BIP; number self-assignments; etc). Such
> > moderation is
> > not only unnecessary for BIP Comments, but would be an outright nuisance.
> 
> I'm not sure that is the reason why, but in any case, Github is a more
> sensible place because of the collaborative features which is why they
> became the centre of OSS software development for hundreds of thousands of
> projects.

GitHub's collaborative features for the wiki function is clearly inferior.

> > I hope this addresses all your concerns and we can move forward with BIP
> > 2 unmodified?
> 
> I am sorry but it has not. I still strongly object to using the Bitcoin
> Wiki or any external source source for the commentary part of BIP2. I
> believe it should be done on using the Wiki feature at bitcoin/bips. If
> that is not acceptable, then I would suggest a separate page in the bip
> assets folder, called bip<nnnn>/comments.md. On a side note, more complex
> reference implementation code should be stored in that folder too.

Then you're essentially standing in the way of BIP 2 and stalling it.

I have no interest in having to manually approve every single little comment 
on BIPs, and I think it's likely nobody will use it if doing so requires such 
effort.

> > (On another note, I wonder if we should recommend non-reference
> > implementation
> > lists/links be moved to BIP Comments rather than constantly revising the
> > BIPs
> > with them...)
> 
> Certainly those could be on the comments page.

From dave at dtrt.org  Fri Mar 18 22:52:55 2016
From: dave at dtrt.org (David A. Harding)
Date: Fri, 18 Mar 2016 18:52:55 -0400
Subject: [bitcoin-dev] BIP 2 promotion to Final
In-Reply-To: <201603181934.54684.luke@dashjr.org>
References: <201603081904.28687.luke@dashjr.org>
	<201603162224.32315.luke@dashjr.org>
	<CADJgMzsc1znp2tXxHa+LFmeZUnHxEcD+rfexg=5rG1T4=fN07A@mail.gmail.com>
	<201603181934.54684.luke@dashjr.org>
Message-ID: <20160318225255.GA5049@localhost.localdomain>

Hi,

Arguing about which wiki is better doesn't feel productive to me. Can we
just let BIP authors decide for themselves? Draft-BIP2 already has a
provision for allowing authors to specify a backup wiki of their own
choosing; can we just make that the policy in all cases (and drop the
need for a backup wiki)?

-Dave

From sergio.d.lerner at gmail.com  Mon Mar 21 02:50:55 2016
From: sergio.d.lerner at gmail.com (Sergio Demian Lerner)
Date: Sun, 20 Mar 2016 23:50:55 -0300
Subject: [bitcoin-dev] BIP147 minor error
Message-ID: <CAKzdR-pk6WHRkKWHxkTtPps+fXn9VBnJiMf-9vRCmg=O1JODfw@mail.gmail.com>

The BIP147 reads:

*Sigop cost* is defined. The cost of a sigop in traditional script is 4,
while the cost of a sigop in witness program is 1.

The new rule is total *sigop cost* ? 80,000.

But the code implements:
if (nSigOps + (nWitSigOps + 3) / 4 > MAX_BLOCK_SIGOPS)
 ... error....

Which is not the same.

For example:
nSigOps = 1
nWitSigOps =79999

Is not an error by BIP definition but it's an error by the implemented code.

Regards, Sergio.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160320/74fe80fb/attachment.html>

From jl2012 at xbt.hk  Tue Mar 22 06:48:49 2016
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Tue, 22 Mar 2016 14:48:49 +0800
Subject: [bitcoin-dev] BIP147 minor error
In-Reply-To: <CAKzdR-pk6WHRkKWHxkTtPps+fXn9VBnJiMf-9vRCmg=O1JODfw@mail.gmail.com>
References: <CAKzdR-pk6WHRkKWHxkTtPps+fXn9VBnJiMf-9vRCmg=O1JODfw@mail.gmail.com>
Message-ID: <002e01d18406$e55554e0$affffea0$@xbt.hk>

Do you mean BIP141?

 

Your example is an error by BIP141:

 

1*4 + 79999*1 = 80003 > 80000

 

From: bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org] On Behalf Of Sergio Demian Lerner via bitcoin-dev
Sent: Monday, 21 March, 2016 10:51
To: bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
Subject: [bitcoin-dev] BIP147 minor error

 

The BIP147 reads:

Sigop cost is defined. The cost of a sigop in traditional script is 4, while the cost of a sigop in witness program is 1. 

The new rule is total sigop cost ? 80,000. 

But the code implements:

if (nSigOps + (nWitSigOps + 3) / 4 > MAX_BLOCK_SIGOPS)

 ... error....

Which is not the same.


For example:

nSigOps = 1
nWitSigOps =79999

Is not an error by BIP definition but it's an error by the implemented code.

Regards, Sergio.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160322/5be2f7b5/attachment.html>

From sergio.d.lerner at gmail.com  Tue Mar 22 10:39:51 2016
From: sergio.d.lerner at gmail.com (Sergio Demian Lerner)
Date: Tue, 22 Mar 2016 07:39:51 -0300
Subject: [bitcoin-dev] BIP147 minor error
In-Reply-To: <002e01d18406$e55554e0$affffea0$@xbt.hk>
References: <CAKzdR-pk6WHRkKWHxkTtPps+fXn9VBnJiMf-9vRCmg=O1JODfw@mail.gmail.com>
	<002e01d18406$e55554e0$affffea0$@xbt.hk>
Message-ID: <CAKzdR-pZMR0vpu+T6a5n7RQeffDHmqrtw7doDEkAaPzkcpWWJg@mail.gmail.com>

My mistake.
El mar 22, 2016 3:49 AM, <jl2012 at xbt.hk> escribi?:

> Do you mean BIP141?
>
>
>
> Your example is an error by BIP141:
>
>
>
> 1*4 + 79999*1 = 80003 > 80000
>
>
>
> *From:* bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:
> bitcoin-dev-bounces at lists.linuxfoundation.org] *On Behalf Of *Sergio
> Demian Lerner via bitcoin-dev
> *Sent:* Monday, 21 March, 2016 10:51
> *To:* bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> *Subject:* [bitcoin-dev] BIP147 minor error
>
>
>
> The BIP147 reads:
>
> *Sigop cost* is defined. The cost of a sigop in traditional script is 4,
> while the cost of a sigop in witness program is 1.
>
> The new rule is total *sigop cost* ? 80,000.
>
> But the code implements:
>
> if (nSigOps + (nWitSigOps + 3) / 4 > MAX_BLOCK_SIGOPS)
>
>  ... error....
>
> Which is not the same.
>
>
> For example:
>
> nSigOps = 1
> nWitSigOps =79999
>
> Is not an error by BIP definition but it's an error by the implemented
> code.
>
> Regards, Sergio.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160322/9d37efef/attachment.html>

From dev at jonasschnelli.ch  Wed Mar 23 15:24:12 2016
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Wed, 23 Mar 2016 16:24:12 +0100
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
Message-ID: <56F2B51C.8000105@jonasschnelli.ch>

Hi

I have just PRed a draft version of two BIPs I recently wrote.
https://github.com/bitcoin/bips/pull/362

Two BIPs that addresses the problem of decoupling wallets/clients from
nodes while assuming a user (or a group) know the remote peer.

Authentication would be necessary to selective allow bloom filtering of
transactions, encryption or any other node service that might lead to
fingerprinting or resource attacks. Authentication would also be a
pre-requirement for certificate free encryption-handshakes that is
(enough?) resistant to MITM attacks.

Encryption is highly recommended if you connect a SPV node to a trusted
node.

Authentication would allow accessing private p2p extensions from a
remote SPV peer (example: fee estimation).

I'm aware of other methods to increase privacy and integrity (tor, VPN,
stunnel, etc.), however I think authentication and a basic communication
encryption should be part of the protocol and its setup should be
complete hassle-free.

Thanks for your feeback.

/jonas

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/0c31649c/attachment.sig>

From tier.nolan at gmail.com  Wed Mar 23 16:44:30 2016
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 23 Mar 2016 16:44:30 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F2B51C.8000105@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch>
Message-ID: <CAE-z3OVnh4qJYRqLMQr93S8FQb6iAepk1EL=0s+Qye0nK9Dn4w@mail.gmail.com>

There is probably not much loss due to per message encryption.  Even if a
MITM determined that a message was an inv message (or bloom filter
message), it wouldn't be able to extract much information.  Since the
hashes in those messages are fixed size, there is very little leakage.

You could make it so that the the encryption messages effectively create a
second data stream and break/weaken the link between message size and
wrapped message size.  This requires state though, so there is a complexity
tradeoff.

There is no real need to include an IV, since you are including a 32 byte
context hash.  The first 16 bytes of the context hash could be used as IV.

In terms of generating the context hash, it would be easier to make it
linear.

context_hash_n = SHA256(context_hash_(n-1) | message_(n-1))

As the session gets longer, both nodes would have to do more and more
hashing to compute the hash of the entire conversation.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/64f754da/attachment.html>

From tomz at freedommail.ch  Wed Mar 23 20:36:00 2016
From: tomz at freedommail.ch (Tom)
Date: Wed, 23 Mar 2016 20:36 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F2B51C.8000105@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch>
Message-ID: <1983116.UNQS71VxHo@garp>

On Wednesday 23 Mar 2016 16:24:12 Jonas Schnelli via bitcoin-dev wrote:
> Hi
> 
> I have just PRed a draft version of two BIPs I recently wrote.
> https://github.com/bitcoin/bips/pull/362

I suggest running a spellchecker ;)

Some questions;

* why would you not allow encryption on non-pre-approved connections?
* we just removed (ssl) encryption from the JSON interface, how do you suggest 
this encryption to be implemented without openSSL?
* What is the reason for using the p2p code to connect a wallet to a node?
I suggest using one of the other connection methods to connect to the node. 
This avoids a change in the bitcoin protocol for a very specific usecase.
* Why do you want to do a per-message encryption (wrapping the original)? 
Smaller messages that contain predictable content and are able to be matched 
to the unencrypted versions on the wire send to other nodes will open this 
scheme up to various old statistical attacks.

> Responding peers must ignore (banning would lead to fingerprinting) the 
requesting peer after 5 unsuccessfully authentication tries to avoid resource 
attacks.

Any implementation of that kind would itself again be open to resource 
attacks.
Why 5? Do you want to allow a node to make a typo?


> To ensure that no message was dropped or blocked, the complete communication 
must be hashed (sha256). Both peers keep the SHA256 context of the encryption 
session. The complete <code>enc</code> message (leaving out the hash itself) 
must be added to the hash-context by both parties. Before sending a 
<code>enc</code> command, the sha256 context will be copied and finalized.

You write "the complete communication must be hashed" and every message has a 
hash of the state until it is at that point.
I think you need to explain how that works specifically.



From eric at voskuil.org  Wed Mar 23 21:40:50 2016
From: eric at voskuil.org (Eric Voskuil)
Date: Wed, 23 Mar 2016 14:40:50 -0700
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <1983116.UNQS71VxHo@garp>
References: <56F2B51C.8000105@jonasschnelli.ch> <1983116.UNQS71VxHo@garp>
Message-ID: <56F30D62.4090409@voskuil.org>

On 03/23/2016 01:36 PM, Tom via bitcoin-dev wrote:
> On Wednesday 23 Mar 2016 16:24:12 Jonas Schnelli via bitcoin-dev wrote:
> * why would you not allow encryption on non-pre-approved connections?

Agree

> * we just removed (ssl) encryption from the JSON interface, how do you suggest 
> this encryption to be implemented without openSSL?

CurveCP

> * What is the reason for using the p2p code to connect a wallet to a node?
> I suggest using one of the other connection methods to connect to the node. 
> This avoids a change in the bitcoin protocol for a very specific usecase.

Agree, P2P and client-server protocols are distinct use-cases. Missing
this distinction is the root cause of problems with the bloom filters
feature.

> * Why do you want to do a per-message encryption (wrapping the original)? 
> Smaller messages that contain predictable content and are able to be matched 
> to the unencrypted versions on the wire send to other nodes will open this 
> scheme up to various old statistical attacks.

Privacy cannot currently be achieved unless the server is trusted. In
most wallet scenarios that's not a reasonable assumption unless one
controls the full node. So this is only useful in the case where the
wallet is trusting a remote server, and as you point out - message
encryption is weak in this case. In a trustless server scenario
encryption would be unnecessary overhead.

>> Responding peers must ignore (banning would lead to fingerprinting) the 
> requesting peer after 5 unsuccessfully authentication tries to avoid resource 
> attacks.
> 
> Any implementation of that kind would itself again be open to resource 
> attacks.
> Why 5? Do you want to allow a node to make a typo?

Agree, denial of service protection can and should be much more flexible
than this. It's not necessary to incorporate DoS protection into a
protocol. I think maybe this stems from the ill-advised attempt at
messaging reliability.

>> To ensure that no message was dropped or blocked, the complete communication 
> must be hashed (sha256). Both peers keep the SHA256 context of the encryption 
> session. The complete <code>enc</code> message (leaving out the hash itself) 
> must be added to the hash-context by both parties. Before sending a 
> <code>enc</code> command, the sha256 context will be copied and finalized.
> 
> You write "the complete communication must be hashed" and every message has a 
> hash of the state until it is at that point.
> I think you need to explain how that works specifically.

Also, this gets into the area of messaging reliability. This is
certainly not something I would recommend for a P2P protocol optimized
for maintaining a cache of public data.

e

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/344d0bae/attachment.sig>

From dev at jonasschnelli.ch  Wed Mar 23 21:55:34 2016
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Wed, 23 Mar 2016 22:55:34 +0100
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <1983116.UNQS71VxHo@garp>
References: <56F2B51C.8000105@jonasschnelli.ch> <1983116.UNQS71VxHo@garp>
Message-ID: <56F310D6.2070002@jonasschnelli.ch>


>> I have just PRed a draft version of two BIPs I recently wrote.
>> https://github.com/bitcoin/bips/pull/362
> 
> I suggest running a spellchecker ;)

Thanks. Will do.


> * why would you not allow encryption on non-pre-approved connections?

The encryption should be optional.
The proposed authentication scheme does take care of the
identity-management and therefor prevent MITM attacks.
Without the identity management, you might not detect sending/receiving
encrypted data from/to a MITM.

> * we just removed (ssl) encryption from the JSON interface, how do you suggest 
> this encryption to be implemented without openSSL?

The proposed encryption schema is based on ECDSA/ECDH (implemented in
libsecp256k1) and AES256CBC (implementation is on the way see
https://github.com/bitcoin/bitcoin/pull/7689).
OpenSSL is not required.

> * What is the reason for using the p2p code to connect a wallet to a node?
> I suggest using one of the other connection methods to connect to the node. 
> This avoids a change in the bitcoin protocol for a very specific usecase.

Most known use-case: SPV.

> * Why do you want to do a per-message encryption (wrapping the original)? 
> Smaller messages that contain predictable content and are able to be matched 
> to the unencrypted versions on the wire send to other nodes will open this 
> scheme up to various old statistical attacks.

It's probably extremely inefficient to create a constant time stream.
Even most SSL/SSH application leak information because of the
communication message characteristics.

The current wrapping message proposal is not very efficient.
I will change it so that the p2p message header will contain the
encryption metadata. This should lead to a tiny overhead.


> 
>> Responding peers must ignore (banning would lead to fingerprinting) the 
> requesting peer after 5 unsuccessfully authentication tries to avoid resource 
> attacks.
> 
> Any implementation of that kind would itself again be open to resource 
> attacks.
> Why 5? Do you want to allow a node to make a typo?

Good point. Maybe one false try should lead to ignoring the peer.

> 
> 
>> To ensure that no message was dropped or blocked, the complete communication 
> must be hashed (sha256). Both peers keep the SHA256 context of the encryption 
> session. The complete <code>enc</code> message (leaving out the hash itself) 
> must be added to the hash-context by both parties. Before sending a 
> <code>enc</code> command, the sha256 context will be copied and finalized.
> 
> You write "the complete communication must be hashed" and every message has a 
> hash of the state until it is at that point.
> I think you need to explain how that works specifically.

This is a relative simple concept and does not require rehashing the
whole communication. You just append the "new data".

Some pseudocode:

SHA256CTX ctx;

// first com
SHA256CTX_Update(ctx, 1stmessage);

// copy context
SHA256CTX ctxnew = ctx;

// finalize the copied context
sha256hash = SHA256CTX_Finalize(ctxnew); //use as checksum hash


//////// next message
SHA256CTX_Update(ctx, 2ndmessage);

// copy context
SHA256CTX ctxnew = ctx;

// finalize the copied context
sha256hash = SHA256CTX_Finalize(ctxnew); //use as checksum hash

... etc.

</jonas>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/3dd53763/attachment-0001.sig>

From sergio.d.lerner at gmail.com  Thu Mar 24 00:37:25 2016
From: sergio.d.lerner at gmail.com (Sergio Demian Lerner)
Date: Wed, 23 Mar 2016 21:37:25 -0300
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <1983116.UNQS71VxHo@garp>
References: <56F2B51C.8000105@jonasschnelli.ch> <1983116.UNQS71VxHo@garp>
Message-ID: <CAKzdR-r7T2vC2dtvN1=PHzFox8T78wQMaYy+=1DezPOtRHNrjQ@mail.gmail.com>

It seems that every message must be signed (the protocols lacks MACs). This
can be very resource consuming in terms of CPU and bandwidth since most p2p
messages are small.


On Wed, Mar 23, 2016 at 5:36 PM, Tom via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Wednesday 23 Mar 2016 16:24:12 Jonas Schnelli via bitcoin-dev wrote:
> > Hi
> >
> > I have just PRed a draft version of two BIPs I recently wrote.
> > https://github.com/bitcoin/bips/pull/362
>
> I suggest running a spellchecker ;)
>
> Some questions;
>
> * why would you not allow encryption on non-pre-approved connections?
> * we just removed (ssl) encryption from the JSON interface, how do you
> suggest
> this encryption to be implemented without openSSL?
> * What is the reason for using the p2p code to connect a wallet to a node?
> I suggest using one of the other connection methods to connect to the node.
> This avoids a change in the bitcoin protocol for a very specific usecase.
> * Why do you want to do a per-message encryption (wrapping the original)?
> Smaller messages that contain predictable content and are able to be
> matched
> to the unencrypted versions on the wire send to other nodes will open this
> scheme up to various old statistical attacks.
>
> > Responding peers must ignore (banning would lead to fingerprinting) the
> requesting peer after 5 unsuccessfully authentication tries to avoid
> resource
> attacks.
>
> Any implementation of that kind would itself again be open to resource
> attacks.
> Why 5? Do you want to allow a node to make a typo?
>
>
> > To ensure that no message was dropped or blocked, the complete
> communication
> must be hashed (sha256). Both peers keep the SHA256 context of the
> encryption
> session. The complete <code>enc</code> message (leaving out the hash
> itself)
> must be added to the hash-context by both parties. Before sending a
> <code>enc</code> command, the sha256 context will be copied and finalized.
>
> You write "the complete communication must be hashed" and every message
> has a
> hash of the state until it is at that point.
> I think you need to explain how that works specifically.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160323/adfd13d4/attachment.html>

From luke at dashjr.org  Thu Mar 24 02:16:55 2016
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 24 Mar 2016 02:16:55 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F2B51C.8000105@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch>
Message-ID: <201603240216.56752.luke@dashjr.org>

On Wednesday, March 23, 2016 3:24:12 PM Jonas Schnelli via bitcoin-dev wrote:
> I have just PRed a draft version of two BIPs I recently wrote.
> https://github.com/bitcoin/bips/pull/362

In the future, please submit BIP drafts to the mailing list for comment and 
initial peer review before opening a pull request (or requesting a BIP number 
assignment), per BIP 1.

> Each peer that supports p2p authentication, must provide two user editable
> databases (can be a simple record-per-line file).

As long as the format of these databases is not standardised, it seems 
inappropriate to define *any* of this implementation detail in a BIP.

> A peer can send an authenticate message by wrapping the desired message into
> an <code>auth</code>-message-wrapper to the remote peer.

How does a peer know what messages the other peer requires to be 
authenticated?

> 33bytes || identity-pubkey || comp.-pubkey || The identity pubkey of the
> requesting peer

Seems a waste to include this with every single [authenticated] message...

> 8bytes || auth-msg-id || int64 || up-counting auth-msg-id (0 to INT64MAX)

Is this required to persist across connections/restarts/possibly complete 
reinstalls?

Can the same auth-msg-id be used for multiple peers, so a message can be 
signed once and sent to all N peers?

> Responding peers must ignore (banning would lead to fingerprinting) the
> requesting peer after 5 unsuccessfully authentication tries to avoid
> resource attacks.

How does banning in this specific case enable fingerprinting as opposed to any 
other banning?

> The peers should display the identity-pubkey as a identity-address to the
> users, which is a base58-check encoded ripemd160(sha256) hash.

If this is going to become a general-purpose identity system, I think more is 
needed than a simple EC keypair. At the very least, it should probably use a 
HD chain and use a new key for every signature (notice you already have auth-
msg-id to use with this!).

> This proposal is backward compatible. Non supporting peers will ignore the
> <code>auth</code> message.

... and not process it at all? How is that backward compatible?

> Encrypting traffic between peers is already possible with VPN, tor, stunnel,
> curveCP or any other encryption mechanism on a deeper OSI level, however, 
> most mechanism are not practical for SPV or other DHCP/NAT environment and
> will require significant knowhow in how to setup a secure channel.

I don't see how Tor fails this criteria...

> The responding peer will set a session timeout time-interval. The default
> must be 1'800 seconds.

What default? Is the timeout field optional? Why not simply require it?

> This proposal is backward compatible. Non supporting peers will ignore the
> <code>enc*</code> messages.

How should the supporting peer handle the message being ignored?

Luke

From ctpacia at gmail.com  Thu Mar 24 17:20:48 2016
From: ctpacia at gmail.com (Chris)
Date: Thu, 24 Mar 2016 13:20:48 -0400
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F2B51C.8000105@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch>
Message-ID: <56F421F0.8090307@gmail.com>

Thanks for doing some work on this Jonas. It's something I've been
interested in for a while. I haven't had an opportunity to read the bips
but I will do so soon and comment.

As far as the use cases others mentioned, connecting and SPV wallet to
your full node is certainly one. It would make it easy to, say, connect
the android bitcoin-wallet to your own node. I've hacked on that wallet
to make it connect to my .onion node, but it's very slow border-line
unusable. Basic encryption and authentication would make that viable.

Also, while bloom filtering in bitcoinj is broken, it could be fixed by
just creating a single filter and filling it with 1000 addresses and
persisting it to disk. The main issue is you can't restore from seed
that way and would have to revert to what bitcoinj does now and blow
your privacy. If you had the ability to make an encrypted connection to
a trusted node just for restoring from seed, you could save your privacy
during a restore.

On 03/23/2016 11:24 AM, Jonas Schnelli via bitcoin-dev wrote:
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160324/d7789436/attachment.html>

From forum at leeclagett.com  Fri Mar 25 07:17:29 2016
From: forum at leeclagett.com (Lee Clagett)
Date: Fri, 25 Mar 2016 03:17:29 -0400
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F2B51C.8000105@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch>
Message-ID: <20160325031729.511ab37c@laptop-m1330>

On Wed, 23 Mar 2016 16:24:12 +0100
Jonas Schnelli via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
wrote:
> Hi
> 
> I have just PRed a draft version of two BIPs I recently wrote.
> https://github.com/bitcoin/bips/pull/362
> 
> Two BIPs that addresses the problem of decoupling wallets/clients from
> nodes while assuming a user (or a group) know the remote peer.
> 
> Authentication would be necessary to selective allow bloom filtering
> of transactions, encryption or any other node service that might lead
> to fingerprinting or resource attacks. Authentication would also be a
> pre-requirement for certificate free encryption-handshakes that is
> (enough?) resistant to MITM attacks.
> 
> Encryption is highly recommended if you connect a SPV node to a
> trusted node.
> 
> Authentication would allow accessing private p2p extensions from a
> remote SPV peer (example: fee estimation).
> 
> I'm aware of other methods to increase privacy and integrity (tor,
> VPN, stunnel, etc.), however I think authentication and a basic
> communication encryption should be part of the protocol and its setup
> should be complete hassle-free.
> 
> Thanks for your feeback.
> 
> /jonas
> 

- The motivation sections seem weak. Why not use SSH? It would have
  similar setup requirements, and is already a deployed solution. If
  there are additional setup simplicities (compared to SSH),
  consider listing them. And if one of the motivating factors is
  complexity reduction from the various "do everything you could
  possible want" protocols/implementations, then add this to the
  motivation.
- ECDSA and "ec pubkey" are mentioned, but not the specific curve.
- The hash algorithm for ECDSA is not explicitly mentioned.
- There is no way to change the cryptographic primitives being used or
  to update to a new protocol version. Would it be done with a new
  message type `auth2` ... ?
- The following seems to be contradictory:

> If the responding peer could not lookup the requesting peer's
> identity-pubkey in the local authorized-peers database or if the
> responding peer could not verify the signature, the requested auth
> message must be ignored to avoid fingerprinting of peers with
> authentication support.
>
> Responding peers must ignore (banning would lead to fingerprinting)
> the requesting peer after 5 unsuccessfully authentication tries to
> avoid resource attacks.

  If I connect to a peer, send 5 auth messages followed by another type
  of message that gets no response, this could indicate auth support.
  Or is this supposed to say ignore further auth messages, but not
  other types of messages? The wording seems to suggest an ignore-all.
- The pubkey from the requester is sent in cleartext, which can be used
  as an identifier across connections (similar to a MAC, except it can
  be seen across every network hop and correlated across connection
  types). Hiding this will likely require encryption, and the protocol
  will start to look similar to CurveCP. If the additional complexity
  is not worth fixing this issue, a section in the encryption BIP
  should be added to explain the identifier leakage.
- The known-peers has an IP and port section. Should the requester limit
  signatures based on this information? This algorithm or process needs
  to be better defined than the vague paragraph about verifying the
  integrity of the remote peer; if an implementation uses the
  any-one-of server approach the known-peers file becomes more like a
  SSL CA list, which does not seem like the intent. However, the example
  at the bottom says "Requesting peer does a lookup of (F) in
  known-peers database (B)".
- The encryption portion does not mention the pubkey pairs in use for
  ECDH (this needs to be described), so I am assuming the pairs from
  authentication are re-used. This increases the chances of data
  exposure since a single botched k selection (re-use) for ECDSA would
  allow for forged authentications, and the decryption of all
  historical data. Adding a temporary key exchange would add slight
  complexity and one RTT from the requesters perspective, but it
  provides forward-secrecy and protection against ECDSA implementation
  failures.
- Can the responding peer set a different cipher in the `ecinit`
  response, or should/must it be the same?
- What happens if the responding peer does not support the cipher?
  Presumably, a rejection?
- The contents of the IV field are unspecified, and should be
  specified to contain new output from a CSPRNG for each message.
- Should `enc` messages be wrapped in `auth` messages (presumably so
  since there is no MAC)? `encinit` have this restriction, but nothing
  is specified for `enc`.
- Is the context hash unique in each direction? There seems to be one,
  which would be racy - what if the client wanted to pipeline messages?
  Or is the intent a single open request/response style? I think this
  _adds_ a restriction to the Bitcoin protocol.
- Instead of a hash, what about a counter in each direction for the
  `enc` stream? The auth portion verifies integrity, authenticity, and
  completeness of each message (including this counter). Missing
  messages (through TCP injection?) would still detected. Using TCP
  injection to forcefully teardown a connection is possible in both
  designs.

Lee

From dev at jonasschnelli.ch  Fri Mar 25 10:17:10 2016
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Fri, 25 Mar 2016 11:17:10 +0100
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F2B51C.8000105@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch>
Message-ID: <56F51026.8010708@jonasschnelli.ch>

> I have just PRed a draft version of two BIPs I recently wrote.
> https://github.com/bitcoin/bips/pull/362

Thanks for the feedback and IRC discussions.

I have overhauled both BIPs.
https://github.com/bitcoin/bips/pull/362/files#diff

Main changes for the encryption BIP:
* No message wrapping. Once encryption is established, everything is
encrypted. No timeout.
* Added MAC: proposed AEAD is now ChaCha20-Poly1305 with an alternative
for AES256-GCH
* Independent ECDH negotiation and independent secrets for the symmetric
cipher for both communication directions
* Optimized message format and message-batch-option for encrypted data

It could be that the p2p performance for Chacha20-poly1305 encrypted
message is slightly better then the current plaintext message format
(dropping the network magic and the sha256 per message).

P2p authentication BIP:
* No message wrapping. Peers keep the state once authenticated.
* Simplified and auth now requires encrypted channels.


Some answers...

> How does a peer know what messages the other peer requires to be
authenticated?

This is not covered by the auth BIP. Peers could agree on a protocol
extension outside of any BIP.
Once auth is possible, new BIPs could be written. Things like only
allowing filtering (or other services) to authenticated peers (and
disabling NODE_BLOOM).

> How does banning in this specific case enable fingerprinting as
opposed to any other banning?

Current nodes ignore a unknown message with a command like "auth".
Banning would allow a requesting peer to identify nodes that support
auth and attack them over different channels ("ah, ... this guy supports
auth, they must have some secret data, lets attack over SSH).

>> This proposal is backward compatible. Non supporting peers will
ignore the <code>auth</code> message.
> ... and not process it at all? How is that backward compatible?

Depends how we define backward compatibility. :-)
Peers supporting this "extension" can still interact with older peers.

> This proposal is backward compatible. Non supporting peers will ignore
the > <code>enc*</code> messages.

Current p2p implementation ignores any unknown command.


</jonas>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/79ef629f/attachment.sig>

From tomz at freedommail.ch  Fri Mar 25 10:36:28 2016
From: tomz at freedommail.ch (Tom)
Date: Fri, 25 Mar 2016 10:36:28 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F310D6.2070002@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch> <1983116.UNQS71VxHo@garp>
	<56F310D6.2070002@jonasschnelli.ch>
Message-ID: <2590065.B4dTBeyc1A@garp>

On Wednesday 23 Mar 2016 22:55:34 Jonas Schnelli via bitcoin-dev wrote:
> >> I have just PRed a draft version of two BIPs I recently wrote.
> > * why would you not allow encryption on non-pre-approved connections?
> 
> The encryption should be optional.
> The proposed authentication scheme does take care of the
> identity-management and therefor prevent MITM attacks.
> Without the identity management, you might not detect sending/receiving
> encrypted data from/to a MITM.

If you want to extend the Bitcoin protocol itself, you will have to resolve 
that. Which many other solutions do (ssh for instance).

It would not be Ok to have an peer-to-peer encryption system that doesn't 
allow non-pre-approved connections.

> > * What is the reason for using the p2p code to connect a wallet to a node?
> > I suggest using one of the other connection methods to connect to the
> > node.
> > This avoids a change in the bitcoin protocol for a very specific usecase.
> 
> Most known use-case: SPV.

You didn't answer the question.

> > * Why do you want to do a per-message encryption (wrapping the original)?
> > Smaller messages that contain predictable content and are able to be
> > matched to the unencrypted versions on the wire send to other nodes will
> > open this scheme up to various old statistical attacks.
> 
> It's probably extremely inefficient to create a constant time stream.

Your use of "probably" makes me wonder if you already have an implementation. 
Doing any encryption and handshaking design *without* actually having it coded 
and gone though testing yet makes no sense.
I do not belief Bitcoin will benefit from "design by committee" where a 
specification is drawn before an implementation is written.

Also, you didn't actually address the attack-vector.

 
> >> Responding peers must ignore (banning would lead to fingerprinting) the
> > 
> > requesting peer after 5 unsuccessfully authentication tries to avoid
> > resource attacks.
> > 
> > Any implementation of that kind would itself again be open to resource
> > attacks.
> > Why 5? Do you want to allow a node to make a typo?
> 
> Good point. Maybe one false try should lead to ignoring the peer.

That doesn't take away the resource attack at all.

 
> >> To ensure that no message was dropped or blocked, the complete
> >> communication> 
> > must be hashed (sha256). Both peers keep the SHA256 context of the
> > encryption session. The complete <code>enc</code> message (leaving out
> > the hash itself) must be added to the hash-context by both parties.
> > Before sending a <code>enc</code> command, the sha256 context will be
> > copied and finalized.
> > 
> > You write "the complete communication must be hashed" and every message
> > has a hash of the state until it is at that point.
> > I think you need to explain how that works specifically.
> 
> This is a relative simple concept and does not require rehashing the
> whole communication. 

Apologies, I should have been more clear; the BIP should specify the actual 
algorithm, otherwise you can't create an implementation from just reading the 
BIP.

Also, this may be a good time to ask why you want to have a per-message 
encryption?
Practically every single popular end-to-end encryption uses one approach or 
another were it just encrypts as another layer. (the  L in ssl). You are 
mixing layers, and unless you do that for a very good reason, or have a very 
good reason why everyone else is doing it wrong, I suggest using a layered 
encryption approach.

From tomz at freedommail.ch  Fri Mar 25 10:41:04 2016
From: tomz at freedommail.ch (Tom)
Date: Fri, 25 Mar 2016 10:41:04 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F421F0.8090307@gmail.com>
References: <56F2B51C.8000105@jonasschnelli.ch> <56F421F0.8090307@gmail.com>
Message-ID: <9565898.d3O8M9NKBW@garp>

On Thursday 24 Mar 2016 13:20:48 Chris via bitcoin-dev wrote:
> As far as the use cases others mentioned, connecting and SPV wallet to
> your full node is certainly one. It would make it easy to, say, connect
> the android bitcoin-wallet to your own node. I've hacked on that wallet
> to make it connect to my .onion node, but it's very slow border-line
> unusable. Basic encryption and authentication would make that viable.

What about using some interface, much like the JSON one (but more likely the 
zeroMQ one) instead? Would that not solve the problem?

I'm thinking that would not be a replacement for a full-node-connection but in 
addition.

Which means that some questions can be asked over that channel that you need 
authentication for. It would be a much better separation of concerns.

From laconia at gmail.com  Fri Mar 25 17:27:30 2016
From: laconia at gmail.com (Chris Kleeschulte)
Date: Fri, 25 Mar 2016 13:27:30 -0400
Subject: [bitcoin-dev] Proposed BIP: Maximum block size consensus rule based
 on median block size (adaptive block size)
Message-ID: <CAO1Z-eMxRfM8O+uTFbK0rb-zuL0KKLgYFJex35Rk8UJgGYd4RA@mail.gmail.com>

The following draft BIP proposes changing the MAX_BLOCK_SIZE consensus rule
to be a function of the median block size over the last 12,960 blocks
(about three months) multiplied by 2 and calculated when a block is
connected to the blockchain.

Motivation:

The purpose of this consensus rule change is to allow the maximum block
size to increase or decrease based on actual network usage. A block size
limit, as discussed here, prevents certain types of denial of service
attacks on the Bitcoin network, however a fixed limit does not allow the
capacity of the network to increase as advancements in scaling are
realized.  By adjusting the limit based on the sizes of blocks in the
recent past, the throughput of the network can adjust to changes in user
demand and scaling related technology advancements while still being
protected from denial of service attacks.


Full proposal here:

https://github.com/bitpay/bips/blob/master/bip-adaptiveblocksize.mediawiki

I look forward to your consideration.

thank you,
-- 
Chris Kleeschulte
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/b65925f8/attachment.html>

From dev at jonasschnelli.ch  Fri Mar 25 18:43:00 2016
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Fri, 25 Mar 2016 19:43:00 +0100
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <2590065.B4dTBeyc1A@garp>
References: <56F2B51C.8000105@jonasschnelli.ch> <1983116.UNQS71VxHo@garp>
	<56F310D6.2070002@jonasschnelli.ch> <2590065.B4dTBeyc1A@garp>
Message-ID: <56F586B4.8020507@jonasschnelli.ch>

Hi Tom

>> The encryption should be optional.
>> The proposed authentication scheme does take care of the
>> identity-management and therefor prevent MITM attacks.
>> Without the identity management, you might not detect sending/receiving
>> encrypted data from/to a MITM.
> 
> If you want to extend the Bitcoin protocol itself, you will have to resolve 
> that. Which many other solutions do (ssh for instance).

Please check the newest auth BIP (it solves MITM).

The encryption BIP itself does not cover peer authentication.
Encryption without authentication of peers can also be valuable.


>>> * What is the reason for using the p2p code to connect a wallet to a node?
>>> I suggest using one of the other connection methods to connect to the
>>> node.
>>> This avoids a change in the bitcoin protocol for a very specific usecase.
>>
>> Most known use-case: SPV.
> 
> You didn't answer the question.

I hope you see the today's problem with SPV.
You fully reveal to your ISP / WiFi provider most of your wallet
controlled addresses (when using BF). The ISP/WiFi provider can link
your bitcoin usage to other inet traffic and/or they could sell
information to statistics company like google.

Also, an attacker controlling a WiFi router or any other network peer
between your SPV node and the remote full node could censorship
transactions.

Etc. etc.

An encrypted channel together with a trusted full node would finally
allow to have a secure and save SPV communication.


>>> * Why do you want to do a per-message encryption (wrapping the original)?
>>> Smaller messages that contain predictable content and are able to be
>>> matched to the unencrypted versions on the wire send to other nodes will
>>> open this scheme up to various old statistical attacks.
>>
>> It's probably extremely inefficient to create a constant time stream.
> 
> Your use of "probably" makes me wonder if you already have an implementation. 
> Doing any encryption and handshaking design *without* actually having it coded 
> and gone though testing yet makes no sense.
> I do not belief Bitcoin will benefit from "design by committee" where a 
> specification is drawn before an implementation is written.
> 
> Also, you didn't actually address the attack-vector.

Which attack-vector? MITM? Is conceptual solved with the auth BIP (that
requires encryption).

There is no implementation done yet.
It would be a waste of time to start writing a such implementation
_before_ having this discusses and improved by the community.

But the encryption BIP now recommends Chacha20-Polay1305 as AEAD which
is widely used.

I'm ready to write an implementation as soon as I have some signs that
the BIP does make sense.

Also, auth and enc is not something we will have in the next couple of
weeks. This might require a couple of months until its stable and ready
for production.

> 
>  
>>>> Responding peers must ignore (banning would lead to fingerprinting) the
>>>
>>> requesting peer after 5 unsuccessfully authentication tries to avoid
>>> resource attacks.
>>>
>>> Any implementation of that kind would itself again be open to resource
>>> attacks.
>>> Why 5? Do you want to allow a node to make a typo?
>>
>> Good point. Maybe one false try should lead to ignoring the peer.
> 
> That doesn't take away the resource attack at all.
> 
>  
>>>> To ensure that no message was dropped or blocked, the complete
>>>> communication> 
>>> must be hashed (sha256). Both peers keep the SHA256 context of the
>>> encryption session. The complete <code>enc</code> message (leaving out
>>> the hash itself) must be added to the hash-context by both parties.
>>> Before sending a <code>enc</code> command, the sha256 context will be
>>> copied and finalized.
>>>
>>> You write "the complete communication must be hashed" and every message
>>> has a hash of the state until it is at that point.
>>> I think you need to explain how that works specifically.
>>
>> This is a relative simple concept and does not require rehashing the
>> whole communication. 
> 
> Apologies, I should have been more clear; the BIP should specify the actual 
> algorithm, otherwise you can't create an implementation from just reading the 
> BIP.

The sha256 context is gone now and replaced by a proper MAC.

> 
> Also, this may be a good time to ask why you want to have a per-message 
> encryption?
> Practically every single popular end-to-end encryption uses one approach or 
> another were it just encrypts as another layer. (the  L in ssl). You are 
> mixing layers, and unless you do that for a very good reason, or have a very 
> good reason why everyone else is doing it wrong, I suggest using a layered 
> encryption approach.

Like most other encryption layers, we would still use messages. But we
call them "encrypted messages", the have a tiny header of plaintext data
(message length, AEAD-tag) and they will contain <n> plaintext p2p
messages _after_ decrypting. The plaintext messages have a much simpler
header (removed the 4 bytes sha256 checksum, removed the 4byte network)

</jonas>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/438b2e1f/attachment-0001.sig>

From tier.nolan at gmail.com  Fri Mar 25 18:48:15 2016
From: tier.nolan at gmail.com (Tier Nolan)
Date: Fri, 25 Mar 2016 18:48:15 +0000
Subject: [bitcoin-dev] Proposed BIP: Maximum block size consensus rule
 based on median block size (adaptive block size)
In-Reply-To: <CAO1Z-eMxRfM8O+uTFbK0rb-zuL0KKLgYFJex35Rk8UJgGYd4RA@mail.gmail.com>
References: <CAO1Z-eMxRfM8O+uTFbK0rb-zuL0KKLgYFJex35Rk8UJgGYd4RA@mail.gmail.com>
Message-ID: <CAE-z3OUZ-dehQKsCA1ZNHr=vmc7hE0-ZL6rTNx3Rms0p2kcGmA@mail.gmail.com>

I think you will have a hard time getting something related to block size
accepted in the current climate.

Using floating point calculations in consensus code is a bad idea.  The
standard practice is to use very large integers to fake it.  That has the
advantage that it is exact.  You don't even need to do this here.

Your get median function could just as easily use an array of integers.
You are dividing by 2.0 and then getting casting it to int after using a
floor function.  The standard integer divide by 2 does that automatically.

The median function is sufficiently defined that I don't think you need the
exact function (especially if you use integers).

Since the block size has to be an integer, even if the size was
1,234,567.5, the limit would still be 1,234,567.

It would likely help to gain acceptance if you added a 2nd limiter to the
growth rate.  For example, you could make it so that the size isn't allowed
to more than double every year.  This is similar to the 1MB limit on the
lower end.  A 45 day doubling time (granted subject to miner veto) is
likely unacceptable.  Miners could spam max size blocks by filling them
with transactions created for that purpose.

The graphs likely understate the growth rate, since the 1MB limit
inherently restricts things to 1MB.

On Fri, Mar 25, 2016 at 5:27 PM, Chris Kleeschulte via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> The following draft BIP proposes changing the MAX_BLOCK_SIZE consensus
> rule to be a function of the median block size over the last 12,960 blocks
> (about three months) multiplied by 2 and calculated when a block is
> connected to the blockchain.
>
> Motivation:
>
> The purpose of this consensus rule change is to allow the maximum block
> size to increase or decrease based on actual network usage. A block size
> limit, as discussed here, prevents certain types of denial of service
> attacks on the Bitcoin network, however a fixed limit does not allow the
> capacity of the network to increase as advancements in scaling are
> realized.  By adjusting the limit based on the sizes of blocks in the
> recent past, the throughput of the network can adjust to changes in user
> demand and scaling related technology advancements while still being
> protected from denial of service attacks.
>
>
> Full proposal here:
>
> https://github.com/bitpay/bips/blob/master/bip-adaptiveblocksize.mediawiki
>
> I look forward to your consideration.
>
> thank you,
> --
> Chris Kleeschulte
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160325/7846decc/attachment.html>

From tomz at freedommail.ch  Fri Mar 25 20:42:08 2016
From: tomz at freedommail.ch (Tom)
Date: Fri, 25 Mar 2016 20:42:08 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F586B4.8020507@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch> <2590065.B4dTBeyc1A@garp>
	<56F586B4.8020507@jonasschnelli.ch>
Message-ID: <4517402.JLxTDjem5X@garp>

On Friday 25 Mar 2016 19:43:00 Jonas Schnelli via bitcoin-dev wrote:
> An encrypted channel together with a trusted full node would finally
> allow to have a secure and save SPV communication.

I guess my question didn't get across. 

Why would you want to make your usecase do connections over the peer2peer 
(net.cpp) connection at all?

Mixing messages that are being sent to everyone and encrypted messages is 
asking for trouble.
Making your private connection out-of-band would work much better.

> > Also, you didn't actually address the attack-vector.
> 
> Which attack-vector?

The statistical attack I mentioned earlier.  Which comes from knowing which 
plain text messages are being sent over the encrypted channel, So as long as 
you keep saying you want to encrypt data that identical copies of are being 
sent to other nodes at practically the same time, you will keep being 
vulnerable to that.



From dev at jonasschnelli.ch  Sat Mar 26 09:01:36 2016
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Sat, 26 Mar 2016 10:01:36 +0100
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <4517402.JLxTDjem5X@garp>
References: <56F2B51C.8000105@jonasschnelli.ch> <2590065.B4dTBeyc1A@garp>
	<56F586B4.8020507@jonasschnelli.ch> <4517402.JLxTDjem5X@garp>
Message-ID: <56F64FF0.7060706@jonasschnelli.ch>


> I guess my question didn't get across. 
> 
> Why would you want to make your usecase do connections over the peer2peer 
> (net.cpp) connection at all?

First, because there _are_ a hight amount of SPV wallets in the field.
SPV wallets are "dumb-clients" with only a tiny value for the bitcoin
network (they don't validate, they don't relay). They already are
decoupled wallets. We need solution that offers higher privacy and
higher traffic analysis resistance.

Using the p2p channel for communication between full validation peers
and wallet-only-peers makes sense IMO because wallet-only-peers can
slowly validate the chain and create a UTXO set in the background (could
take a couple of weeks) or solve other purposes that increases the
security and/or serving something back to the bitcoin network.

Sure, you can always use client/server wallets (Coinbase / Copay, etc.)
that offers SSL.
But I strongly recommend to improve the communication and interface
possibilities between wallet-nodes (SPV) and full-validation-nodes.

Otherwise we will very likely see centralization regarding end-user
wallets (with all the large risks of disrupting the community in case of
attacks/thefts, etc.).

_If we think Bitcoin should scale, we also need to scale and improve at
the point where users enter the network and start using Bitcoin._

> Mixing messages that are being sent to everyone and encrypted messages is 
> asking for trouble.
> Making your private connection out-of-band would work much better.

The current encryption BIP requires to encrypt the complete traffic.
Having an option to do analysis resistant communication with a remote
peer within the protocol itself is something that is very valuable IMO.


>>> Also, you didn't actually address the attack-vector.
>>
>> Which attack-vector?
> 
> The statistical attack I mentioned earlier.  Which comes from knowing which 
> plain text messages are being sent over the encrypted channel, So as long as 
> you keep saying you want to encrypt data that identical copies of are being 
> sent to other nodes at practically the same time, you will keep being 
> vulnerable to that.

The encryption BIP recommends Chacha20-Poly1305 as encryption AEAD. This
is a very broad used encryption scheme (Google uses it to connect
Android phones with their cloud services).

Completely avoiding side channel on data analysis would probably require
extremely inefficient constant time encrypted datastreams.

Also, the BIP allows combining of multiple plaintext message in one
encrypted message.

Additionally we could extend the enc. BIP by allowing random padding of
encrypted messages or other techniques to reduce side channel analysis.

</jonas>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160326/6b17032b/attachment.sig>

From macwhyte at gmail.com  Sat Mar 26 23:23:54 2016
From: macwhyte at gmail.com (James MacWhyte)
Date: Sat, 26 Mar 2016 23:23:54 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <4517402.JLxTDjem5X@garp>
References: <56F2B51C.8000105@jonasschnelli.ch> <2590065.B4dTBeyc1A@garp>
	<56F586B4.8020507@jonasschnelli.ch> <4517402.JLxTDjem5X@garp>
Message-ID: <CAH+Axy7cyZXzAHE7bfGxyMF8oxy=hpOW9nFd5KiLnVab3b=qCA@mail.gmail.com>

On Sat, Mar 26, 2016 at 1:34 AM Tom via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Friday 25 Mar 2016 19:43:00 Jonas Schnelli via bitcoin-dev wrote:
> > An encrypted channel together with a trusted full node would finally
> > allow to have a secure and save SPV communication.
>
> I guess my question didn't get across.
>
> Why would you want to make your usecase do connections over the peer2peer
> (net.cpp) connection at all?
>
> Mixing messages that are being sent to everyone and encrypted messages is
> asking for trouble.
> Making your private connection out-of-band would work much better.
>
>
I agree doing it out-of-band is the easiest solution for people who need
this privacy right now, but I do like the idea of adding this feature as
the number of SPV wallets is going to increase. I think the best way to
organize things would be to give encrypted messages their own port number,
similar to how http vs. https works.

We don't want two networks to develop, separated by which nodes support
encryption and which don't, so ideally nodes would rebroadcast messages
they receive on both (encrypted and non-encrypted) channels. This would
essentially double the required bandwidth of the network, which is
something to think about.


> > > Also, you didn't actually address the attack-vector.
> >
> > Which attack-vector?
>
> The statistical attack I mentioned earlier.  Which comes from knowing which
> plain text messages are being sent over the encrypted channel, So as long
> as
> you keep saying you want to encrypt data that identical copies of are being
> sent to other nodes at practically the same time, you will keep being
> vulnerable to that.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160326/e2a0f1f0/attachment.html>

From dev at jonasschnelli.ch  Sun Mar 27 11:58:11 2016
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Sun, 27 Mar 2016 13:58:11 +0200
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <CAH+Axy7cyZXzAHE7bfGxyMF8oxy=hpOW9nFd5KiLnVab3b=qCA@mail.gmail.com>
References: <56F2B51C.8000105@jonasschnelli.ch> <2590065.B4dTBeyc1A@garp>
	<56F586B4.8020507@jonasschnelli.ch> <4517402.JLxTDjem5X@garp>
	<CAH+Axy7cyZXzAHE7bfGxyMF8oxy=hpOW9nFd5KiLnVab3b=qCA@mail.gmail.com>
Message-ID: <56F7CAD3.9080809@jonasschnelli.ch>


>     I guess my question didn't get across.
> 
>     Why would you want to make your usecase do connections over the
>     peer2peer
>     (net.cpp) connection at all?
> 
>     Mixing messages that are being sent to everyone and encrypted
>     messages is
>     asking for trouble.
>     Making your private connection out-of-band would work much better.
> 
> 
> I agree doing it out-of-band is the easiest solution for people who need
> this privacy right now, but I do like the idea of adding this feature as
> the number of SPV wallets is going to increase. I think the best way to
> organize things would be to give encrypted messages their own port
> number, similar to how http vs. https works.

I'm not sure if different ports would make sense. I can't see a benefit
(happy if someone can convince me).
How would this affect p2p address management (address relay)? Wouldn't
this require to extend the current address message to support two port
numbers?


> We don't want two networks to develop, separated by which nodes support
> encryption and which don't, so ideally nodes would rebroadcast messages
> they receive on both (encrypted and non-encrypted) channels. This would
> essentially double the required bandwidth of the network, which is
> something to think about.

It can be the same "p2p network". The only difference would be, that
once two peers has negotiated encryption, the whole traffic between
_these two peers_, and _only_ these two pears, would be encrypted (would
_not_ affect traffic to/from other peers).

A simplified example:
1. Peer Alice connects to peer Bob
2. Alice asks Bob: "lets do encrypted communication, here is my session
pubkey"
3. Bob also supports encryption and answers "Yes, let's do this, here is
my session pubkey"
4. Alice tells Bob (encrypted now): "Perfect. Here I prove that I'm
Alice by signing the session ID with my identity pubkey"
5. Bob checks his "authorized-peers" database and look-up Alices pubkey
and verifies the signatures.
6. Bob tells Alice: "Good! I trust you now Alice, here is my identity
pubkey with a signature of our session-ID"
7. Alice looks up Bobs pubkey in her "known-peers" database and verifies
the signature.
8. Alice response to bob: "Perfect. Indeed, you are Bob!"
---
At this point, the communication is encrypted and the identities has
been verified (MITM protection).


(simplified negotiation [only one-way, missing dh explanation, missing
KDF, session-ID, cipher suite nego., missing re-keying, etc.])


</jonas>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160327/0d52fd3e/attachment.sig>

From macwhyte at gmail.com  Sun Mar 27 17:04:30 2016
From: macwhyte at gmail.com (James MacWhyte)
Date: Sun, 27 Mar 2016 17:04:30 +0000
Subject: [bitcoin-dev] p2p authentication and encryption BIPs
In-Reply-To: <56F7CAD3.9080809@jonasschnelli.ch>
References: <56F2B51C.8000105@jonasschnelli.ch> <2590065.B4dTBeyc1A@garp>
	<56F586B4.8020507@jonasschnelli.ch> <4517402.JLxTDjem5X@garp>
	<CAH+Axy7cyZXzAHE7bfGxyMF8oxy=hpOW9nFd5KiLnVab3b=qCA@mail.gmail.com>
	<56F7CAD3.9080809@jonasschnelli.ch>
Message-ID: <CAH+Axy7RiWtQDZCLq7uwgzTAbKz7sHO6POivrMHag46Z-iFmiw@mail.gmail.com>

On Sun, Mar 27, 2016 at 5:49 AM Jonas Schnelli via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> >     I guess my question didn't get across.
> >
> >     Why would you want to make your usecase do connections over the
> >     peer2peer
> >     (net.cpp) connection at all?
> >
> >     Mixing messages that are being sent to everyone and encrypted
> >     messages is
> >     asking for trouble.
> >     Making your private connection out-of-band would work much better.
> >
> >
> > I agree doing it out-of-band is the easiest solution for people who need
> > this privacy right now, but I do like the idea of adding this feature as
> > the number of SPV wallets is going to increase. I think the best way to
> > organize things would be to give encrypted messages their own port
> > number, similar to how http vs. https works.
>
> I'm not sure if different ports would make sense. I can't see a benefit
> (happy if someone can convince me).
> How would this affect p2p address management (address relay)? Wouldn't
> this require to extend the current address message to support two port
> numbers?
>
> I'm assuming clients that connect with encryption don't want to use
unencrypted connections, and are only interested in other peers that
support encryption. From their perspective, it is quite inefficient to get
a generic list of peers and then have to connect to each one searching for
those that accept encryption. If we use port numbers, we can assume any
connection that comes on the encrypted port is only interested in encrypted
communication, so a getaddr to an encrypted port would only return a list
of other encryption-capable peers.

This isn't an issue if the plan is to require all peers to support
encryption, and we assume the majority of the network will upgrade before
too long.


>
> > We don't want two networks to develop, separated by which nodes support
> > encryption and which don't, so ideally nodes would rebroadcast messages
> > they receive on both (encrypted and non-encrypted) channels. This would
> > essentially double the required bandwidth of the network, which is
> > something to think about.
>
> It can be the same "p2p network". The only difference would be, that
> once two peers has negotiated encryption, the whole traffic between
> _these two peers_, and _only_ these two pears, would be encrypted (would
> _not_ affect traffic to/from other peers).
>
>
You're right, there would not be an increase in bandwidth. Please forget I
said that :) But following the logic I wrote above, it would be possible
for peers to become segregated (those who require encryption would only
connect to each other). It wouldn't be a problem as long as there are
enough peers that provide both encrypted and non-encrypted connections; or,
as I said above, if we can assume every peer will support it. Maybe the
issues I'm thinking of are just growing pains that will be solved once the
majority of people upgrade?


> A simplified example:
> 1. Peer Alice connects to peer Bob
> 2. Alice asks Bob: "lets do encrypted communication, here is my session
> pubkey"
> 3. Bob also supports encryption and answers "Yes, let's do this, here is
> my session pubkey"
> 4. Alice tells Bob (encrypted now): "Perfect. Here I prove that I'm
> Alice by signing the session ID with my identity pubkey"
> 5. Bob checks his "authorized-peers" database and look-up Alices pubkey
> and verifies the signatures.
> 6. Bob tells Alice: "Good! I trust you now Alice, here is my identity
> pubkey with a signature of our session-ID"
> 7. Alice looks up Bobs pubkey in her "known-peers" database and verifies
> the signature.
> 8. Alice response to bob: "Perfect. Indeed, you are Bob!"
> ---
> At this point, the communication is encrypted and the identities has
> been verified (MITM protection).
>
>
> (simplified negotiation [only one-way, missing dh explanation, missing
> KDF, session-ID, cipher suite nego., missing re-keying, etc.])
>
>
> </jonas>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160327/30bc800e/attachment.html>

From elombrozo at gmail.com  Wed Mar 30 08:54:33 2016
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 30 Mar 2016 01:54:33 -0700
Subject: [bitcoin-dev] Segnet4
Message-ID: <63869D4C-8862-4BF6-BB50-5656C586DE53@gmail.com>

Hello everyone.

Pieter Wuille has pushed code for a new segwit testnet that features activation via BIP9 as well as support for BIP68, BIP112, and BIP113. In particular, it now supports Lightning Network app development and collaboration.
I encourage everyone to spin up a node and try it out.

For source code, please go to Pieter's github repo:
https://github.com/sipa/bitcoin/tree/segwit4 <https://github.com/sipa/bitcoin/tree/segwit4>

Feedback is welcome here or on the #segwit-dev channel on Freenode.


- Eric
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20160330/1bceb311/attachment.html>

